

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Tue Dec 26 14:31:14 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	text35,local,class=CODE,merge=1,delta=2
    21                           	psect	text54,local,class=CODE,merge=1,delta=2
    22                           	psect	text55,local,class=CODE,merge=1,delta=2
    23                           	psect	text56,local,class=CODE,merge=1,delta=2
    24                           	psect	text57,local,class=CODE,merge=1,delta=2
    25                           	psect	text58,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text70,local,class=CODE,merge=1,delta=2
    28                           	psect	text71,local,class=CODE,merge=1,delta=2
    29                           	psect	text75,local,class=CODE,merge=1,delta=2
    30                           	psect	text76,local,class=CODE,merge=1,delta=2
    31                           	psect	text99,local,class=CODE,merge=1,delta=2
    32                           	psect	text104,local,class=CODE,merge=1,delta=2
    33                           	psect	text105,local,class=CODE,merge=1,delta=2
    34                           	psect	text106,local,class=CODE,merge=1,delta=2
    35                           	psect	pa_nodes0,global,class=CODE,delta=2
    36                           	dabs	1,0x620,48
    37                           	dabs	1,0x5AB,69
    38                           	dabs	1,0x237B,0,_gLedPara
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 1.41
    42                           ; Generated 25/01/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F18345 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  0090                     	;# 
   113  0091                     	;# 
   114  0092                     	;# 
   115  0093                     	;# 
   116  0094                     	;# 
   117  0097                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  018C                     	;# 
   137  018D                     	;# 
   138  018E                     	;# 
   139  0197                     	;# 
   140  0199                     	;# 
   141  0199                     	;# 
   142  0199                     	;# 
   143  019A                     	;# 
   144  019A                     	;# 
   145  019A                     	;# 
   146  019B                     	;# 
   147  019B                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019C                     	;# 
   152  019C                     	;# 
   153  019C                     	;# 
   154  019D                     	;# 
   155  019D                     	;# 
   156  019D                     	;# 
   157  019E                     	;# 
   158  019E                     	;# 
   159  019E                     	;# 
   160  019F                     	;# 
   161  019F                     	;# 
   162  019F                     	;# 
   163  019F                     	;# 
   164  019F                     	;# 
   165  020C                     	;# 
   166  020D                     	;# 
   167  020E                     	;# 
   168  0211                     	;# 
   169  0211                     	;# 
   170  0212                     	;# 
   171  0212                     	;# 
   172  0213                     	;# 
   173  0213                     	;# 
   174  0214                     	;# 
   175  0214                     	;# 
   176  0215                     	;# 
   177  0215                     	;# 
   178  0215                     	;# 
   179  0215                     	;# 
   180  0216                     	;# 
   181  0216                     	;# 
   182  0217                     	;# 
   183  0217                     	;# 
   184  0219                     	;# 
   185  021A                     	;# 
   186  021B                     	;# 
   187  021C                     	;# 
   188  021D                     	;# 
   189  021D                     	;# 
   190  021E                     	;# 
   191  021F                     	;# 
   192  028C                     	;# 
   193  028D                     	;# 
   194  028E                     	;# 
   195  0291                     	;# 
   196  0291                     	;# 
   197  0292                     	;# 
   198  0293                     	;# 
   199  0294                     	;# 
   200  0295                     	;# 
   201  0295                     	;# 
   202  0296                     	;# 
   203  0297                     	;# 
   204  0298                     	;# 
   205  029F                     	;# 
   206  030C                     	;# 
   207  030D                     	;# 
   208  030E                     	;# 
   209  0311                     	;# 
   210  0311                     	;# 
   211  0312                     	;# 
   212  0313                     	;# 
   213  0314                     	;# 
   214  0315                     	;# 
   215  0315                     	;# 
   216  0316                     	;# 
   217  0317                     	;# 
   218  0318                     	;# 
   219  038C                     	;# 
   220  038D                     	;# 
   221  038E                     	;# 
   222  0391                     	;# 
   223  0392                     	;# 
   224  0393                     	;# 
   225  0394                     	;# 
   226  0395                     	;# 
   227  0396                     	;# 
   228  0397                     	;# 
   229  0398                     	;# 
   230  0399                     	;# 
   231  039A                     	;# 
   232  039C                     	;# 
   233  039D                     	;# 
   234  039E                     	;# 
   235  039F                     	;# 
   236  0411                     	;# 
   237  0411                     	;# 
   238  0412                     	;# 
   239  0413                     	;# 
   240  0414                     	;# 
   241  0415                     	;# 
   242  0416                     	;# 
   243  0417                     	;# 
   244  0418                     	;# 
   245  0418                     	;# 
   246  0419                     	;# 
   247  041A                     	;# 
   248  041B                     	;# 
   249  041C                     	;# 
   250  041D                     	;# 
   251  041E                     	;# 
   252  041F                     	;# 
   253  0498                     	;# 
   254  0498                     	;# 
   255  0499                     	;# 
   256  049A                     	;# 
   257  049B                     	;# 
   258  049B                     	;# 
   259  049C                     	;# 
   260  049D                     	;# 
   261  049E                     	;# 
   262  049F                     	;# 
   263  0617                     	;# 
   264  0618                     	;# 
   265  0619                     	;# 
   266  0619                     	;# 
   267  061A                     	;# 
   268  061B                     	;# 
   269  061C                     	;# 
   270  061C                     	;# 
   271  061F                     	;# 
   272  0691                     	;# 
   273  0692                     	;# 
   274  0693                     	;# 
   275  0694                     	;# 
   276  0695                     	;# 
   277  0696                     	;# 
   278  0697                     	;# 
   279  0698                     	;# 
   280  0699                     	;# 
   281  0711                     	;# 
   282  0712                     	;# 
   283  0713                     	;# 
   284  0714                     	;# 
   285  0715                     	;# 
   286  0716                     	;# 
   287  0717                     	;# 
   288  0718                     	;# 
   289  0719                     	;# 
   290  0891                     	;# 
   291  0891                     	;# 
   292  0891                     	;# 
   293  0891                     	;# 
   294  0891                     	;# 
   295  0891                     	;# 
   296  0892                     	;# 
   297  0892                     	;# 
   298  0892                     	;# 
   299  0893                     	;# 
   300  0893                     	;# 
   301  0893                     	;# 
   302  0893                     	;# 
   303  0893                     	;# 
   304  0893                     	;# 
   305  0894                     	;# 
   306  0894                     	;# 
   307  0894                     	;# 
   308  0895                     	;# 
   309  0895                     	;# 
   310  0895                     	;# 
   311  0896                     	;# 
   312  0896                     	;# 
   313  0896                     	;# 
   314  089B                     	;# 
   315  0911                     	;# 
   316  0912                     	;# 
   317  0913                     	;# 
   318  0914                     	;# 
   319  0915                     	;# 
   320  0916                     	;# 
   321  0918                     	;# 
   322  0919                     	;# 
   323  091A                     	;# 
   324  091B                     	;# 
   325  091C                     	;# 
   326  091D                     	;# 
   327  091E                     	;# 
   328  091F                     	;# 
   329  0E0F                     	;# 
   330  0E10                     	;# 
   331  0E11                     	;# 
   332  0E12                     	;# 
   333  0E13                     	;# 
   334  0E14                     	;# 
   335  0E15                     	;# 
   336  0E16                     	;# 
   337  0E17                     	;# 
   338  0E18                     	;# 
   339  0E19                     	;# 
   340  0E1A                     	;# 
   341  0E1B                     	;# 
   342  0E1C                     	;# 
   343  0E1D                     	;# 
   344  0E1E                     	;# 
   345  0E1F                     	;# 
   346  0E20                     	;# 
   347  0E21                     	;# 
   348  0E22                     	;# 
   349  0E24                     	;# 
   350  0E25                     	;# 
   351  0E28                     	;# 
   352  0E29                     	;# 
   353  0E2A                     	;# 
   354  0E2B                     	;# 
   355  0E2C                     	;# 
   356  0E2D                     	;# 
   357  0E2E                     	;# 
   358  0E2F                     	;# 
   359  0E90                     	;# 
   360  0E91                     	;# 
   361  0E92                     	;# 
   362  0E94                     	;# 
   363  0E95                     	;# 
   364  0E9C                     	;# 
   365  0E9D                     	;# 
   366  0E9E                     	;# 
   367  0E9F                     	;# 
   368  0EA0                     	;# 
   369  0EA1                     	;# 
   370  0EA2                     	;# 
   371  0EA3                     	;# 
   372  0EA4                     	;# 
   373  0EA5                     	;# 
   374  0EA6                     	;# 
   375  0EA7                     	;# 
   376  0F0F                     	;# 
   377  0F10                     	;# 
   378  0F11                     	;# 
   379  0F12                     	;# 
   380  0F13                     	;# 
   381  0F14                     	;# 
   382  0F15                     	;# 
   383  0F16                     	;# 
   384  0F17                     	;# 
   385  0F18                     	;# 
   386  0F19                     	;# 
   387  0F1A                     	;# 
   388  0F1B                     	;# 
   389  0F1C                     	;# 
   390  0F1D                     	;# 
   391  0F1E                     	;# 
   392  0F1F                     	;# 
   393  0F20                     	;# 
   394  0F21                     	;# 
   395  0F22                     	;# 
   396  0F23                     	;# 
   397  0F24                     	;# 
   398  0F25                     	;# 
   399  0F26                     	;# 
   400  0F27                     	;# 
   401  0F28                     	;# 
   402  0F29                     	;# 
   403  0F2A                     	;# 
   404  0F2B                     	;# 
   405  0F2C                     	;# 
   406  0F2D                     	;# 
   407  0F2E                     	;# 
   408  0F2F                     	;# 
   409  0F30                     	;# 
   410  0F31                     	;# 
   411  0F32                     	;# 
   412  0F33                     	;# 
   413  0F34                     	;# 
   414  0F35                     	;# 
   415  0F36                     	;# 
   416  0F37                     	;# 
   417  0FE4                     	;# 
   418  0FE5                     	;# 
   419  0FE6                     	;# 
   420  0FE7                     	;# 
   421  0FE8                     	;# 
   422  0FE9                     	;# 
   423  0FEA                     	;# 
   424  0FEB                     	;# 
   425  0FED                     	;# 
   426  0FEE                     	;# 
   427  0FEF                     	;# 
   428  0000                     	;# 
   429  0001                     	;# 
   430  0002                     	;# 
   431  0003                     	;# 
   432  0004                     	;# 
   433  0005                     	;# 
   434  0006                     	;# 
   435  0007                     	;# 
   436  0008                     	;# 
   437  0009                     	;# 
   438  000A                     	;# 
   439  000B                     	;# 
   440  000C                     	;# 
   441  000D                     	;# 
   442  000E                     	;# 
   443  0010                     	;# 
   444  0011                     	;# 
   445  0012                     	;# 
   446  0013                     	;# 
   447  0014                     	;# 
   448  0015                     	;# 
   449  0015                     	;# 
   450  0016                     	;# 
   451  0016                     	;# 
   452  0017                     	;# 
   453  0018                     	;# 
   454  0019                     	;# 
   455  0019                     	;# 
   456  001A                     	;# 
   457  001B                     	;# 
   458  001C                     	;# 
   459  001D                     	;# 
   460  001E                     	;# 
   461  001F                     	;# 
   462  008C                     	;# 
   463  008D                     	;# 
   464  008E                     	;# 
   465  0090                     	;# 
   466  0091                     	;# 
   467  0092                     	;# 
   468  0093                     	;# 
   469  0094                     	;# 
   470  0097                     	;# 
   471  009B                     	;# 
   472  009B                     	;# 
   473  009C                     	;# 
   474  009D                     	;# 
   475  009E                     	;# 
   476  009F                     	;# 
   477  010C                     	;# 
   478  010D                     	;# 
   479  010E                     	;# 
   480  0111                     	;# 
   481  0112                     	;# 
   482  0113                     	;# 
   483  0114                     	;# 
   484  0115                     	;# 
   485  0116                     	;# 
   486  0117                     	;# 
   487  0118                     	;# 
   488  0119                     	;# 
   489  018C                     	;# 
   490  018D                     	;# 
   491  018E                     	;# 
   492  0197                     	;# 
   493  0199                     	;# 
   494  0199                     	;# 
   495  0199                     	;# 
   496  019A                     	;# 
   497  019A                     	;# 
   498  019A                     	;# 
   499  019B                     	;# 
   500  019B                     	;# 
   501  019B                     	;# 
   502  019B                     	;# 
   503  019B                     	;# 
   504  019C                     	;# 
   505  019C                     	;# 
   506  019C                     	;# 
   507  019D                     	;# 
   508  019D                     	;# 
   509  019D                     	;# 
   510  019E                     	;# 
   511  019E                     	;# 
   512  019E                     	;# 
   513  019F                     	;# 
   514  019F                     	;# 
   515  019F                     	;# 
   516  019F                     	;# 
   517  019F                     	;# 
   518  020C                     	;# 
   519  020D                     	;# 
   520  020E                     	;# 
   521  0211                     	;# 
   522  0211                     	;# 
   523  0212                     	;# 
   524  0212                     	;# 
   525  0213                     	;# 
   526  0213                     	;# 
   527  0214                     	;# 
   528  0214                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0215                     	;# 
   533  0216                     	;# 
   534  0216                     	;# 
   535  0217                     	;# 
   536  0217                     	;# 
   537  0219                     	;# 
   538  021A                     	;# 
   539  021B                     	;# 
   540  021C                     	;# 
   541  021D                     	;# 
   542  021D                     	;# 
   543  021E                     	;# 
   544  021F                     	;# 
   545  028C                     	;# 
   546  028D                     	;# 
   547  028E                     	;# 
   548  0291                     	;# 
   549  0291                     	;# 
   550  0292                     	;# 
   551  0293                     	;# 
   552  0294                     	;# 
   553  0295                     	;# 
   554  0295                     	;# 
   555  0296                     	;# 
   556  0297                     	;# 
   557  0298                     	;# 
   558  029F                     	;# 
   559  030C                     	;# 
   560  030D                     	;# 
   561  030E                     	;# 
   562  0311                     	;# 
   563  0311                     	;# 
   564  0312                     	;# 
   565  0313                     	;# 
   566  0314                     	;# 
   567  0315                     	;# 
   568  0315                     	;# 
   569  0316                     	;# 
   570  0317                     	;# 
   571  0318                     	;# 
   572  038C                     	;# 
   573  038D                     	;# 
   574  038E                     	;# 
   575  0391                     	;# 
   576  0392                     	;# 
   577  0393                     	;# 
   578  0394                     	;# 
   579  0395                     	;# 
   580  0396                     	;# 
   581  0397                     	;# 
   582  0398                     	;# 
   583  0399                     	;# 
   584  039A                     	;# 
   585  039C                     	;# 
   586  039D                     	;# 
   587  039E                     	;# 
   588  039F                     	;# 
   589  0411                     	;# 
   590  0411                     	;# 
   591  0412                     	;# 
   592  0413                     	;# 
   593  0414                     	;# 
   594  0415                     	;# 
   595  0416                     	;# 
   596  0417                     	;# 
   597  0418                     	;# 
   598  0418                     	;# 
   599  0419                     	;# 
   600  041A                     	;# 
   601  041B                     	;# 
   602  041C                     	;# 
   603  041D                     	;# 
   604  041E                     	;# 
   605  041F                     	;# 
   606  0498                     	;# 
   607  0498                     	;# 
   608  0499                     	;# 
   609  049A                     	;# 
   610  049B                     	;# 
   611  049B                     	;# 
   612  049C                     	;# 
   613  049D                     	;# 
   614  049E                     	;# 
   615  049F                     	;# 
   616  0617                     	;# 
   617  0618                     	;# 
   618  0619                     	;# 
   619  0619                     	;# 
   620  061A                     	;# 
   621  061B                     	;# 
   622  061C                     	;# 
   623  061C                     	;# 
   624  061F                     	;# 
   625  0691                     	;# 
   626  0692                     	;# 
   627  0693                     	;# 
   628  0694                     	;# 
   629  0695                     	;# 
   630  0696                     	;# 
   631  0697                     	;# 
   632  0698                     	;# 
   633  0699                     	;# 
   634  0711                     	;# 
   635  0712                     	;# 
   636  0713                     	;# 
   637  0714                     	;# 
   638  0715                     	;# 
   639  0716                     	;# 
   640  0717                     	;# 
   641  0718                     	;# 
   642  0719                     	;# 
   643  0891                     	;# 
   644  0891                     	;# 
   645  0891                     	;# 
   646  0891                     	;# 
   647  0891                     	;# 
   648  0891                     	;# 
   649  0892                     	;# 
   650  0892                     	;# 
   651  0892                     	;# 
   652  0893                     	;# 
   653  0893                     	;# 
   654  0893                     	;# 
   655  0893                     	;# 
   656  0893                     	;# 
   657  0893                     	;# 
   658  0894                     	;# 
   659  0894                     	;# 
   660  0894                     	;# 
   661  0895                     	;# 
   662  0895                     	;# 
   663  0895                     	;# 
   664  0896                     	;# 
   665  0896                     	;# 
   666  0896                     	;# 
   667  089B                     	;# 
   668  0911                     	;# 
   669  0912                     	;# 
   670  0913                     	;# 
   671  0914                     	;# 
   672  0915                     	;# 
   673  0916                     	;# 
   674  0918                     	;# 
   675  0919                     	;# 
   676  091A                     	;# 
   677  091B                     	;# 
   678  091C                     	;# 
   679  091D                     	;# 
   680  091E                     	;# 
   681  091F                     	;# 
   682  0E0F                     	;# 
   683  0E10                     	;# 
   684  0E11                     	;# 
   685  0E12                     	;# 
   686  0E13                     	;# 
   687  0E14                     	;# 
   688  0E15                     	;# 
   689  0E16                     	;# 
   690  0E17                     	;# 
   691  0E18                     	;# 
   692  0E19                     	;# 
   693  0E1A                     	;# 
   694  0E1B                     	;# 
   695  0E1C                     	;# 
   696  0E1D                     	;# 
   697  0E1E                     	;# 
   698  0E1F                     	;# 
   699  0E20                     	;# 
   700  0E21                     	;# 
   701  0E22                     	;# 
   702  0E24                     	;# 
   703  0E25                     	;# 
   704  0E28                     	;# 
   705  0E29                     	;# 
   706  0E2A                     	;# 
   707  0E2B                     	;# 
   708  0E2C                     	;# 
   709  0E2D                     	;# 
   710  0E2E                     	;# 
   711  0E2F                     	;# 
   712  0E90                     	;# 
   713  0E91                     	;# 
   714  0E92                     	;# 
   715  0E94                     	;# 
   716  0E95                     	;# 
   717  0E9C                     	;# 
   718  0E9D                     	;# 
   719  0E9E                     	;# 
   720  0E9F                     	;# 
   721  0EA0                     	;# 
   722  0EA1                     	;# 
   723  0EA2                     	;# 
   724  0EA3                     	;# 
   725  0EA4                     	;# 
   726  0EA5                     	;# 
   727  0EA6                     	;# 
   728  0EA7                     	;# 
   729  0F0F                     	;# 
   730  0F10                     	;# 
   731  0F11                     	;# 
   732  0F12                     	;# 
   733  0F13                     	;# 
   734  0F14                     	;# 
   735  0F15                     	;# 
   736  0F16                     	;# 
   737  0F17                     	;# 
   738  0F18                     	;# 
   739  0F19                     	;# 
   740  0F1A                     	;# 
   741  0F1B                     	;# 
   742  0F1C                     	;# 
   743  0F1D                     	;# 
   744  0F1E                     	;# 
   745  0F1F                     	;# 
   746  0F20                     	;# 
   747  0F21                     	;# 
   748  0F22                     	;# 
   749  0F23                     	;# 
   750  0F24                     	;# 
   751  0F25                     	;# 
   752  0F26                     	;# 
   753  0F27                     	;# 
   754  0F28                     	;# 
   755  0F29                     	;# 
   756  0F2A                     	;# 
   757  0F2B                     	;# 
   758  0F2C                     	;# 
   759  0F2D                     	;# 
   760  0F2E                     	;# 
   761  0F2F                     	;# 
   762  0F30                     	;# 
   763  0F31                     	;# 
   764  0F32                     	;# 
   765  0F33                     	;# 
   766  0F34                     	;# 
   767  0F35                     	;# 
   768  0F36                     	;# 
   769  0F37                     	;# 
   770  0FE4                     	;# 
   771  0FE5                     	;# 
   772  0FE6                     	;# 
   773  0FE7                     	;# 
   774  0FE8                     	;# 
   775  0FE9                     	;# 
   776  0FEA                     	;# 
   777  0FEB                     	;# 
   778  0FED                     	;# 
   779  0FEE                     	;# 
   780  0FEF                     	;# 
   781  0000                     	;# 
   782  0001                     	;# 
   783  0002                     	;# 
   784  0003                     	;# 
   785  0004                     	;# 
   786  0005                     	;# 
   787  0006                     	;# 
   788  0007                     	;# 
   789  0008                     	;# 
   790  0009                     	;# 
   791  000A                     	;# 
   792  000B                     	;# 
   793  000C                     	;# 
   794  000D                     	;# 
   795  000E                     	;# 
   796  0010                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0013                     	;# 
   800  0014                     	;# 
   801  0015                     	;# 
   802  0015                     	;# 
   803  0016                     	;# 
   804  0016                     	;# 
   805  0017                     	;# 
   806  0018                     	;# 
   807  0019                     	;# 
   808  0019                     	;# 
   809  001A                     	;# 
   810  001B                     	;# 
   811  001C                     	;# 
   812  001D                     	;# 
   813  001E                     	;# 
   814  001F                     	;# 
   815  008C                     	;# 
   816  008D                     	;# 
   817  008E                     	;# 
   818  0090                     	;# 
   819  0091                     	;# 
   820  0092                     	;# 
   821  0093                     	;# 
   822  0094                     	;# 
   823  0097                     	;# 
   824  009B                     	;# 
   825  009B                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009E                     	;# 
   829  009F                     	;# 
   830  010C                     	;# 
   831  010D                     	;# 
   832  010E                     	;# 
   833  0111                     	;# 
   834  0112                     	;# 
   835  0113                     	;# 
   836  0114                     	;# 
   837  0115                     	;# 
   838  0116                     	;# 
   839  0117                     	;# 
   840  0118                     	;# 
   841  0119                     	;# 
   842  018C                     	;# 
   843  018D                     	;# 
   844  018E                     	;# 
   845  0197                     	;# 
   846  0199                     	;# 
   847  0199                     	;# 
   848  0199                     	;# 
   849  019A                     	;# 
   850  019A                     	;# 
   851  019A                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019C                     	;# 
   858  019C                     	;# 
   859  019C                     	;# 
   860  019D                     	;# 
   861  019D                     	;# 
   862  019D                     	;# 
   863  019E                     	;# 
   864  019E                     	;# 
   865  019E                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  019F                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  020C                     	;# 
   872  020D                     	;# 
   873  020E                     	;# 
   874  0211                     	;# 
   875  0211                     	;# 
   876  0212                     	;# 
   877  0212                     	;# 
   878  0213                     	;# 
   879  0213                     	;# 
   880  0214                     	;# 
   881  0214                     	;# 
   882  0215                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0216                     	;# 
   887  0216                     	;# 
   888  0217                     	;# 
   889  0217                     	;# 
   890  0219                     	;# 
   891  021A                     	;# 
   892  021B                     	;# 
   893  021C                     	;# 
   894  021D                     	;# 
   895  021D                     	;# 
   896  021E                     	;# 
   897  021F                     	;# 
   898  028C                     	;# 
   899  028D                     	;# 
   900  028E                     	;# 
   901  0291                     	;# 
   902  0291                     	;# 
   903  0292                     	;# 
   904  0293                     	;# 
   905  0294                     	;# 
   906  0295                     	;# 
   907  0295                     	;# 
   908  0296                     	;# 
   909  0297                     	;# 
   910  0298                     	;# 
   911  029F                     	;# 
   912  030C                     	;# 
   913  030D                     	;# 
   914  030E                     	;# 
   915  0311                     	;# 
   916  0311                     	;# 
   917  0312                     	;# 
   918  0313                     	;# 
   919  0314                     	;# 
   920  0315                     	;# 
   921  0315                     	;# 
   922  0316                     	;# 
   923  0317                     	;# 
   924  0318                     	;# 
   925  038C                     	;# 
   926  038D                     	;# 
   927  038E                     	;# 
   928  0391                     	;# 
   929  0392                     	;# 
   930  0393                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0397                     	;# 
   935  0398                     	;# 
   936  0399                     	;# 
   937  039A                     	;# 
   938  039C                     	;# 
   939  039D                     	;# 
   940  039E                     	;# 
   941  039F                     	;# 
   942  0411                     	;# 
   943  0411                     	;# 
   944  0412                     	;# 
   945  0413                     	;# 
   946  0414                     	;# 
   947  0415                     	;# 
   948  0416                     	;# 
   949  0417                     	;# 
   950  0418                     	;# 
   951  0418                     	;# 
   952  0419                     	;# 
   953  041A                     	;# 
   954  041B                     	;# 
   955  041C                     	;# 
   956  041D                     	;# 
   957  041E                     	;# 
   958  041F                     	;# 
   959  0498                     	;# 
   960  0498                     	;# 
   961  0499                     	;# 
   962  049A                     	;# 
   963  049B                     	;# 
   964  049B                     	;# 
   965  049C                     	;# 
   966  049D                     	;# 
   967  049E                     	;# 
   968  049F                     	;# 
   969  0617                     	;# 
   970  0618                     	;# 
   971  0619                     	;# 
   972  0619                     	;# 
   973  061A                     	;# 
   974  061B                     	;# 
   975  061C                     	;# 
   976  061C                     	;# 
   977  061F                     	;# 
   978  0691                     	;# 
   979  0692                     	;# 
   980  0693                     	;# 
   981  0694                     	;# 
   982  0695                     	;# 
   983  0696                     	;# 
   984  0697                     	;# 
   985  0698                     	;# 
   986  0699                     	;# 
   987  0711                     	;# 
   988  0712                     	;# 
   989  0713                     	;# 
   990  0714                     	;# 
   991  0715                     	;# 
   992  0716                     	;# 
   993  0717                     	;# 
   994  0718                     	;# 
   995  0719                     	;# 
   996  0891                     	;# 
   997  0891                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0892                     	;# 
  1003  0892                     	;# 
  1004  0892                     	;# 
  1005  0893                     	;# 
  1006  0893                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0894                     	;# 
  1012  0894                     	;# 
  1013  0894                     	;# 
  1014  0895                     	;# 
  1015  0895                     	;# 
  1016  0895                     	;# 
  1017  0896                     	;# 
  1018  0896                     	;# 
  1019  0896                     	;# 
  1020  089B                     	;# 
  1021  0911                     	;# 
  1022  0912                     	;# 
  1023  0913                     	;# 
  1024  0914                     	;# 
  1025  0915                     	;# 
  1026  0916                     	;# 
  1027  0918                     	;# 
  1028  0919                     	;# 
  1029  091A                     	;# 
  1030  091B                     	;# 
  1031  091C                     	;# 
  1032  091D                     	;# 
  1033  091E                     	;# 
  1034  091F                     	;# 
  1035  0E0F                     	;# 
  1036  0E10                     	;# 
  1037  0E11                     	;# 
  1038  0E12                     	;# 
  1039  0E13                     	;# 
  1040  0E14                     	;# 
  1041  0E15                     	;# 
  1042  0E16                     	;# 
  1043  0E17                     	;# 
  1044  0E18                     	;# 
  1045  0E19                     	;# 
  1046  0E1A                     	;# 
  1047  0E1B                     	;# 
  1048  0E1C                     	;# 
  1049  0E1D                     	;# 
  1050  0E1E                     	;# 
  1051  0E1F                     	;# 
  1052  0E20                     	;# 
  1053  0E21                     	;# 
  1054  0E22                     	;# 
  1055  0E24                     	;# 
  1056  0E25                     	;# 
  1057  0E28                     	;# 
  1058  0E29                     	;# 
  1059  0E2A                     	;# 
  1060  0E2B                     	;# 
  1061  0E2C                     	;# 
  1062  0E2D                     	;# 
  1063  0E2E                     	;# 
  1064  0E2F                     	;# 
  1065  0E90                     	;# 
  1066  0E91                     	;# 
  1067  0E92                     	;# 
  1068  0E94                     	;# 
  1069  0E95                     	;# 
  1070  0E9C                     	;# 
  1071  0E9D                     	;# 
  1072  0E9E                     	;# 
  1073  0E9F                     	;# 
  1074  0EA0                     	;# 
  1075  0EA1                     	;# 
  1076  0EA2                     	;# 
  1077  0EA3                     	;# 
  1078  0EA4                     	;# 
  1079  0EA5                     	;# 
  1080  0EA6                     	;# 
  1081  0EA7                     	;# 
  1082  0F0F                     	;# 
  1083  0F10                     	;# 
  1084  0F11                     	;# 
  1085  0F12                     	;# 
  1086  0F13                     	;# 
  1087  0F14                     	;# 
  1088  0F15                     	;# 
  1089  0F16                     	;# 
  1090  0F17                     	;# 
  1091  0F18                     	;# 
  1092  0F19                     	;# 
  1093  0F1A                     	;# 
  1094  0F1B                     	;# 
  1095  0F1C                     	;# 
  1096  0F1D                     	;# 
  1097  0F1E                     	;# 
  1098  0F1F                     	;# 
  1099  0F20                     	;# 
  1100  0F21                     	;# 
  1101  0F22                     	;# 
  1102  0F23                     	;# 
  1103  0F24                     	;# 
  1104  0F25                     	;# 
  1105  0F26                     	;# 
  1106  0F27                     	;# 
  1107  0F28                     	;# 
  1108  0F29                     	;# 
  1109  0F2A                     	;# 
  1110  0F2B                     	;# 
  1111  0F2C                     	;# 
  1112  0F2D                     	;# 
  1113  0F2E                     	;# 
  1114  0F2F                     	;# 
  1115  0F30                     	;# 
  1116  0F31                     	;# 
  1117  0F32                     	;# 
  1118  0F33                     	;# 
  1119  0F34                     	;# 
  1120  0F35                     	;# 
  1121  0F36                     	;# 
  1122  0F37                     	;# 
  1123  0FE4                     	;# 
  1124  0FE5                     	;# 
  1125  0FE6                     	;# 
  1126  0FE7                     	;# 
  1127  0FE8                     	;# 
  1128  0FE9                     	;# 
  1129  0FEA                     	;# 
  1130  0FEB                     	;# 
  1131  0FED                     	;# 
  1132  0FEE                     	;# 
  1133  0FEF                     	;# 
  1134  0000                     	;# 
  1135  0001                     	;# 
  1136  0002                     	;# 
  1137  0003                     	;# 
  1138  0004                     	;# 
  1139  0005                     	;# 
  1140  0006                     	;# 
  1141  0007                     	;# 
  1142  0008                     	;# 
  1143  0009                     	;# 
  1144  000A                     	;# 
  1145  000B                     	;# 
  1146  000C                     	;# 
  1147  000D                     	;# 
  1148  000E                     	;# 
  1149  0010                     	;# 
  1150  0011                     	;# 
  1151  0012                     	;# 
  1152  0013                     	;# 
  1153  0014                     	;# 
  1154  0015                     	;# 
  1155  0015                     	;# 
  1156  0016                     	;# 
  1157  0016                     	;# 
  1158  0017                     	;# 
  1159  0018                     	;# 
  1160  0019                     	;# 
  1161  0019                     	;# 
  1162  001A                     	;# 
  1163  001B                     	;# 
  1164  001C                     	;# 
  1165  001D                     	;# 
  1166  001E                     	;# 
  1167  001F                     	;# 
  1168  008C                     	;# 
  1169  008D                     	;# 
  1170  008E                     	;# 
  1171  0090                     	;# 
  1172  0091                     	;# 
  1173  0092                     	;# 
  1174  0093                     	;# 
  1175  0094                     	;# 
  1176  0097                     	;# 
  1177  009B                     	;# 
  1178  009B                     	;# 
  1179  009C                     	;# 
  1180  009D                     	;# 
  1181  009E                     	;# 
  1182  009F                     	;# 
  1183  010C                     	;# 
  1184  010D                     	;# 
  1185  010E                     	;# 
  1186  0111                     	;# 
  1187  0112                     	;# 
  1188  0113                     	;# 
  1189  0114                     	;# 
  1190  0115                     	;# 
  1191  0116                     	;# 
  1192  0117                     	;# 
  1193  0118                     	;# 
  1194  0119                     	;# 
  1195  018C                     	;# 
  1196  018D                     	;# 
  1197  018E                     	;# 
  1198  0197                     	;# 
  1199  0199                     	;# 
  1200  0199                     	;# 
  1201  0199                     	;# 
  1202  019A                     	;# 
  1203  019A                     	;# 
  1204  019A                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019C                     	;# 
  1211  019C                     	;# 
  1212  019C                     	;# 
  1213  019D                     	;# 
  1214  019D                     	;# 
  1215  019D                     	;# 
  1216  019E                     	;# 
  1217  019E                     	;# 
  1218  019E                     	;# 
  1219  019F                     	;# 
  1220  019F                     	;# 
  1221  019F                     	;# 
  1222  019F                     	;# 
  1223  019F                     	;# 
  1224  020C                     	;# 
  1225  020D                     	;# 
  1226  020E                     	;# 
  1227  0211                     	;# 
  1228  0211                     	;# 
  1229  0212                     	;# 
  1230  0212                     	;# 
  1231  0213                     	;# 
  1232  0213                     	;# 
  1233  0214                     	;# 
  1234  0214                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0216                     	;# 
  1240  0216                     	;# 
  1241  0217                     	;# 
  1242  0217                     	;# 
  1243  0219                     	;# 
  1244  021A                     	;# 
  1245  021B                     	;# 
  1246  021C                     	;# 
  1247  021D                     	;# 
  1248  021D                     	;# 
  1249  021E                     	;# 
  1250  021F                     	;# 
  1251  028C                     	;# 
  1252  028D                     	;# 
  1253  028E                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0294                     	;# 
  1259  0295                     	;# 
  1260  0295                     	;# 
  1261  0296                     	;# 
  1262  0297                     	;# 
  1263  0298                     	;# 
  1264  029F                     	;# 
  1265  030C                     	;# 
  1266  030D                     	;# 
  1267  030E                     	;# 
  1268  0311                     	;# 
  1269  0311                     	;# 
  1270  0312                     	;# 
  1271  0313                     	;# 
  1272  0314                     	;# 
  1273  0315                     	;# 
  1274  0315                     	;# 
  1275  0316                     	;# 
  1276  0317                     	;# 
  1277  0318                     	;# 
  1278  038C                     	;# 
  1279  038D                     	;# 
  1280  038E                     	;# 
  1281  0391                     	;# 
  1282  0392                     	;# 
  1283  0393                     	;# 
  1284  0394                     	;# 
  1285  0395                     	;# 
  1286  0396                     	;# 
  1287  0397                     	;# 
  1288  0398                     	;# 
  1289  0399                     	;# 
  1290  039A                     	;# 
  1291  039C                     	;# 
  1292  039D                     	;# 
  1293  039E                     	;# 
  1294  039F                     	;# 
  1295  0411                     	;# 
  1296  0411                     	;# 
  1297  0412                     	;# 
  1298  0413                     	;# 
  1299  0414                     	;# 
  1300  0415                     	;# 
  1301  0416                     	;# 
  1302  0417                     	;# 
  1303  0418                     	;# 
  1304  0418                     	;# 
  1305  0419                     	;# 
  1306  041A                     	;# 
  1307  041B                     	;# 
  1308  041C                     	;# 
  1309  041D                     	;# 
  1310  041E                     	;# 
  1311  041F                     	;# 
  1312  0498                     	;# 
  1313  0498                     	;# 
  1314  0499                     	;# 
  1315  049A                     	;# 
  1316  049B                     	;# 
  1317  049B                     	;# 
  1318  049C                     	;# 
  1319  049D                     	;# 
  1320  049E                     	;# 
  1321  049F                     	;# 
  1322  0617                     	;# 
  1323  0618                     	;# 
  1324  0619                     	;# 
  1325  0619                     	;# 
  1326  061A                     	;# 
  1327  061B                     	;# 
  1328  061C                     	;# 
  1329  061C                     	;# 
  1330  061F                     	;# 
  1331  0691                     	;# 
  1332  0692                     	;# 
  1333  0693                     	;# 
  1334  0694                     	;# 
  1335  0695                     	;# 
  1336  0696                     	;# 
  1337  0697                     	;# 
  1338  0698                     	;# 
  1339  0699                     	;# 
  1340  0711                     	;# 
  1341  0712                     	;# 
  1342  0713                     	;# 
  1343  0714                     	;# 
  1344  0715                     	;# 
  1345  0716                     	;# 
  1346  0717                     	;# 
  1347  0718                     	;# 
  1348  0719                     	;# 
  1349  0891                     	;# 
  1350  0891                     	;# 
  1351  0891                     	;# 
  1352  0891                     	;# 
  1353  0891                     	;# 
  1354  0891                     	;# 
  1355  0892                     	;# 
  1356  0892                     	;# 
  1357  0892                     	;# 
  1358  0893                     	;# 
  1359  0893                     	;# 
  1360  0893                     	;# 
  1361  0893                     	;# 
  1362  0893                     	;# 
  1363  0893                     	;# 
  1364  0894                     	;# 
  1365  0894                     	;# 
  1366  0894                     	;# 
  1367  0895                     	;# 
  1368  0895                     	;# 
  1369  0895                     	;# 
  1370  0896                     	;# 
  1371  0896                     	;# 
  1372  0896                     	;# 
  1373  089B                     	;# 
  1374  0911                     	;# 
  1375  0912                     	;# 
  1376  0913                     	;# 
  1377  0914                     	;# 
  1378  0915                     	;# 
  1379  0916                     	;# 
  1380  0918                     	;# 
  1381  0919                     	;# 
  1382  091A                     	;# 
  1383  091B                     	;# 
  1384  091C                     	;# 
  1385  091D                     	;# 
  1386  091E                     	;# 
  1387  091F                     	;# 
  1388  0E0F                     	;# 
  1389  0E10                     	;# 
  1390  0E11                     	;# 
  1391  0E12                     	;# 
  1392  0E13                     	;# 
  1393  0E14                     	;# 
  1394  0E15                     	;# 
  1395  0E16                     	;# 
  1396  0E17                     	;# 
  1397  0E18                     	;# 
  1398  0E19                     	;# 
  1399  0E1A                     	;# 
  1400  0E1B                     	;# 
  1401  0E1C                     	;# 
  1402  0E1D                     	;# 
  1403  0E1E                     	;# 
  1404  0E1F                     	;# 
  1405  0E20                     	;# 
  1406  0E21                     	;# 
  1407  0E22                     	;# 
  1408  0E24                     	;# 
  1409  0E25                     	;# 
  1410  0E28                     	;# 
  1411  0E29                     	;# 
  1412  0E2A                     	;# 
  1413  0E2B                     	;# 
  1414  0E2C                     	;# 
  1415  0E2D                     	;# 
  1416  0E2E                     	;# 
  1417  0E2F                     	;# 
  1418  0E90                     	;# 
  1419  0E91                     	;# 
  1420  0E92                     	;# 
  1421  0E94                     	;# 
  1422  0E95                     	;# 
  1423  0E9C                     	;# 
  1424  0E9D                     	;# 
  1425  0E9E                     	;# 
  1426  0E9F                     	;# 
  1427  0EA0                     	;# 
  1428  0EA1                     	;# 
  1429  0EA2                     	;# 
  1430  0EA3                     	;# 
  1431  0EA4                     	;# 
  1432  0EA5                     	;# 
  1433  0EA6                     	;# 
  1434  0EA7                     	;# 
  1435  0F0F                     	;# 
  1436  0F10                     	;# 
  1437  0F11                     	;# 
  1438  0F12                     	;# 
  1439  0F13                     	;# 
  1440  0F14                     	;# 
  1441  0F15                     	;# 
  1442  0F16                     	;# 
  1443  0F17                     	;# 
  1444  0F18                     	;# 
  1445  0F19                     	;# 
  1446  0F1A                     	;# 
  1447  0F1B                     	;# 
  1448  0F1C                     	;# 
  1449  0F1D                     	;# 
  1450  0F1E                     	;# 
  1451  0F1F                     	;# 
  1452  0F20                     	;# 
  1453  0F21                     	;# 
  1454  0F22                     	;# 
  1455  0F23                     	;# 
  1456  0F24                     	;# 
  1457  0F25                     	;# 
  1458  0F26                     	;# 
  1459  0F27                     	;# 
  1460  0F28                     	;# 
  1461  0F29                     	;# 
  1462  0F2A                     	;# 
  1463  0F2B                     	;# 
  1464  0F2C                     	;# 
  1465  0F2D                     	;# 
  1466  0F2E                     	;# 
  1467  0F2F                     	;# 
  1468  0F30                     	;# 
  1469  0F31                     	;# 
  1470  0F32                     	;# 
  1471  0F33                     	;# 
  1472  0F34                     	;# 
  1473  0F35                     	;# 
  1474  0F36                     	;# 
  1475  0F37                     	;# 
  1476  0FE4                     	;# 
  1477  0FE5                     	;# 
  1478  0FE6                     	;# 
  1479  0FE7                     	;# 
  1480  0FE8                     	;# 
  1481  0FE9                     	;# 
  1482  0FEA                     	;# 
  1483  0FEB                     	;# 
  1484  0FED                     	;# 
  1485  0FEE                     	;# 
  1486  0FEF                     	;# 
  1487  0000                     	;# 
  1488  0001                     	;# 
  1489  0002                     	;# 
  1490  0003                     	;# 
  1491  0004                     	;# 
  1492  0005                     	;# 
  1493  0006                     	;# 
  1494  0007                     	;# 
  1495  0008                     	;# 
  1496  0009                     	;# 
  1497  000A                     	;# 
  1498  000B                     	;# 
  1499  000C                     	;# 
  1500  000D                     	;# 
  1501  000E                     	;# 
  1502  0010                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0013                     	;# 
  1506  0014                     	;# 
  1507  0015                     	;# 
  1508  0015                     	;# 
  1509  0016                     	;# 
  1510  0016                     	;# 
  1511  0017                     	;# 
  1512  0018                     	;# 
  1513  0019                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  001D                     	;# 
  1519  001E                     	;# 
  1520  001F                     	;# 
  1521  008C                     	;# 
  1522  008D                     	;# 
  1523  008E                     	;# 
  1524  0090                     	;# 
  1525  0091                     	;# 
  1526  0092                     	;# 
  1527  0093                     	;# 
  1528  0094                     	;# 
  1529  0097                     	;# 
  1530  009B                     	;# 
  1531  009B                     	;# 
  1532  009C                     	;# 
  1533  009D                     	;# 
  1534  009E                     	;# 
  1535  009F                     	;# 
  1536  010C                     	;# 
  1537  010D                     	;# 
  1538  010E                     	;# 
  1539  0111                     	;# 
  1540  0112                     	;# 
  1541  0113                     	;# 
  1542  0114                     	;# 
  1543  0115                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  0118                     	;# 
  1547  0119                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  0199                     	;# 
  1554  0199                     	;# 
  1555  019A                     	;# 
  1556  019A                     	;# 
  1557  019A                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019C                     	;# 
  1566  019D                     	;# 
  1567  019D                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019E                     	;# 
  1571  019E                     	;# 
  1572  019F                     	;# 
  1573  019F                     	;# 
  1574  019F                     	;# 
  1575  019F                     	;# 
  1576  019F                     	;# 
  1577  020C                     	;# 
  1578  020D                     	;# 
  1579  020E                     	;# 
  1580  0211                     	;# 
  1581  0211                     	;# 
  1582  0212                     	;# 
  1583  0212                     	;# 
  1584  0213                     	;# 
  1585  0213                     	;# 
  1586  0214                     	;# 
  1587  0214                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0216                     	;# 
  1593  0216                     	;# 
  1594  0217                     	;# 
  1595  0217                     	;# 
  1596  0219                     	;# 
  1597  021A                     	;# 
  1598  021B                     	;# 
  1599  021C                     	;# 
  1600  021D                     	;# 
  1601  021D                     	;# 
  1602  021E                     	;# 
  1603  021F                     	;# 
  1604  028C                     	;# 
  1605  028D                     	;# 
  1606  028E                     	;# 
  1607  0291                     	;# 
  1608  0291                     	;# 
  1609  0292                     	;# 
  1610  0293                     	;# 
  1611  0294                     	;# 
  1612  0295                     	;# 
  1613  0295                     	;# 
  1614  0296                     	;# 
  1615  0297                     	;# 
  1616  0298                     	;# 
  1617  029F                     	;# 
  1618  030C                     	;# 
  1619  030D                     	;# 
  1620  030E                     	;# 
  1621  0311                     	;# 
  1622  0311                     	;# 
  1623  0312                     	;# 
  1624  0313                     	;# 
  1625  0314                     	;# 
  1626  0315                     	;# 
  1627  0315                     	;# 
  1628  0316                     	;# 
  1629  0317                     	;# 
  1630  0318                     	;# 
  1631  038C                     	;# 
  1632  038D                     	;# 
  1633  038E                     	;# 
  1634  0391                     	;# 
  1635  0392                     	;# 
  1636  0393                     	;# 
  1637  0394                     	;# 
  1638  0395                     	;# 
  1639  0396                     	;# 
  1640  0397                     	;# 
  1641  0398                     	;# 
  1642  0399                     	;# 
  1643  039A                     	;# 
  1644  039C                     	;# 
  1645  039D                     	;# 
  1646  039E                     	;# 
  1647  039F                     	;# 
  1648  0411                     	;# 
  1649  0411                     	;# 
  1650  0412                     	;# 
  1651  0413                     	;# 
  1652  0414                     	;# 
  1653  0415                     	;# 
  1654  0416                     	;# 
  1655  0417                     	;# 
  1656  0418                     	;# 
  1657  0418                     	;# 
  1658  0419                     	;# 
  1659  041A                     	;# 
  1660  041B                     	;# 
  1661  041C                     	;# 
  1662  041D                     	;# 
  1663  041E                     	;# 
  1664  041F                     	;# 
  1665  0498                     	;# 
  1666  0498                     	;# 
  1667  0499                     	;# 
  1668  049A                     	;# 
  1669  049B                     	;# 
  1670  049B                     	;# 
  1671  049C                     	;# 
  1672  049D                     	;# 
  1673  049E                     	;# 
  1674  049F                     	;# 
  1675  0617                     	;# 
  1676  0618                     	;# 
  1677  0619                     	;# 
  1678  0619                     	;# 
  1679  061A                     	;# 
  1680  061B                     	;# 
  1681  061C                     	;# 
  1682  061C                     	;# 
  1683  061F                     	;# 
  1684  0691                     	;# 
  1685  0692                     	;# 
  1686  0693                     	;# 
  1687  0694                     	;# 
  1688  0695                     	;# 
  1689  0696                     	;# 
  1690  0697                     	;# 
  1691  0698                     	;# 
  1692  0699                     	;# 
  1693  0711                     	;# 
  1694  0712                     	;# 
  1695  0713                     	;# 
  1696  0714                     	;# 
  1697  0715                     	;# 
  1698  0716                     	;# 
  1699  0717                     	;# 
  1700  0718                     	;# 
  1701  0719                     	;# 
  1702  0891                     	;# 
  1703  0891                     	;# 
  1704  0891                     	;# 
  1705  0891                     	;# 
  1706  0891                     	;# 
  1707  0891                     	;# 
  1708  0892                     	;# 
  1709  0892                     	;# 
  1710  0892                     	;# 
  1711  0893                     	;# 
  1712  0893                     	;# 
  1713  0893                     	;# 
  1714  0893                     	;# 
  1715  0893                     	;# 
  1716  0893                     	;# 
  1717  0894                     	;# 
  1718  0894                     	;# 
  1719  0894                     	;# 
  1720  0895                     	;# 
  1721  0895                     	;# 
  1722  0895                     	;# 
  1723  0896                     	;# 
  1724  0896                     	;# 
  1725  0896                     	;# 
  1726  089B                     	;# 
  1727  0911                     	;# 
  1728  0912                     	;# 
  1729  0913                     	;# 
  1730  0914                     	;# 
  1731  0915                     	;# 
  1732  0916                     	;# 
  1733  0918                     	;# 
  1734  0919                     	;# 
  1735  091A                     	;# 
  1736  091B                     	;# 
  1737  091C                     	;# 
  1738  091D                     	;# 
  1739  091E                     	;# 
  1740  091F                     	;# 
  1741  0E0F                     	;# 
  1742  0E10                     	;# 
  1743  0E11                     	;# 
  1744  0E12                     	;# 
  1745  0E13                     	;# 
  1746  0E14                     	;# 
  1747  0E15                     	;# 
  1748  0E16                     	;# 
  1749  0E17                     	;# 
  1750  0E18                     	;# 
  1751  0E19                     	;# 
  1752  0E1A                     	;# 
  1753  0E1B                     	;# 
  1754  0E1C                     	;# 
  1755  0E1D                     	;# 
  1756  0E1E                     	;# 
  1757  0E1F                     	;# 
  1758  0E20                     	;# 
  1759  0E21                     	;# 
  1760  0E22                     	;# 
  1761  0E24                     	;# 
  1762  0E25                     	;# 
  1763  0E28                     	;# 
  1764  0E29                     	;# 
  1765  0E2A                     	;# 
  1766  0E2B                     	;# 
  1767  0E2C                     	;# 
  1768  0E2D                     	;# 
  1769  0E2E                     	;# 
  1770  0E2F                     	;# 
  1771  0E90                     	;# 
  1772  0E91                     	;# 
  1773  0E92                     	;# 
  1774  0E94                     	;# 
  1775  0E95                     	;# 
  1776  0E9C                     	;# 
  1777  0E9D                     	;# 
  1778  0E9E                     	;# 
  1779  0E9F                     	;# 
  1780  0EA0                     	;# 
  1781  0EA1                     	;# 
  1782  0EA2                     	;# 
  1783  0EA3                     	;# 
  1784  0EA4                     	;# 
  1785  0EA5                     	;# 
  1786  0EA6                     	;# 
  1787  0EA7                     	;# 
  1788  0F0F                     	;# 
  1789  0F10                     	;# 
  1790  0F11                     	;# 
  1791  0F12                     	;# 
  1792  0F13                     	;# 
  1793  0F14                     	;# 
  1794  0F15                     	;# 
  1795  0F16                     	;# 
  1796  0F17                     	;# 
  1797  0F18                     	;# 
  1798  0F19                     	;# 
  1799  0F1A                     	;# 
  1800  0F1B                     	;# 
  1801  0F1C                     	;# 
  1802  0F1D                     	;# 
  1803  0F1E                     	;# 
  1804  0F1F                     	;# 
  1805  0F20                     	;# 
  1806  0F21                     	;# 
  1807  0F22                     	;# 
  1808  0F23                     	;# 
  1809  0F24                     	;# 
  1810  0F25                     	;# 
  1811  0F26                     	;# 
  1812  0F27                     	;# 
  1813  0F28                     	;# 
  1814  0F29                     	;# 
  1815  0F2A                     	;# 
  1816  0F2B                     	;# 
  1817  0F2C                     	;# 
  1818  0F2D                     	;# 
  1819  0F2E                     	;# 
  1820  0F2F                     	;# 
  1821  0F30                     	;# 
  1822  0F31                     	;# 
  1823  0F32                     	;# 
  1824  0F33                     	;# 
  1825  0F34                     	;# 
  1826  0F35                     	;# 
  1827  0F36                     	;# 
  1828  0F37                     	;# 
  1829  0FE4                     	;# 
  1830  0FE5                     	;# 
  1831  0FE6                     	;# 
  1832  0FE7                     	;# 
  1833  0FE8                     	;# 
  1834  0FE9                     	;# 
  1835  0FEA                     	;# 
  1836  0FEB                     	;# 
  1837  0FED                     	;# 
  1838  0FEE                     	;# 
  1839  0FEF                     	;# 
  1840  0000                     	;# 
  1841  0001                     	;# 
  1842  0002                     	;# 
  1843  0003                     	;# 
  1844  0004                     	;# 
  1845  0005                     	;# 
  1846  0006                     	;# 
  1847  0007                     	;# 
  1848  0008                     	;# 
  1849  0009                     	;# 
  1850  000A                     	;# 
  1851  000B                     	;# 
  1852  000C                     	;# 
  1853  000D                     	;# 
  1854  000E                     	;# 
  1855  0010                     	;# 
  1856  0011                     	;# 
  1857  0012                     	;# 
  1858  0013                     	;# 
  1859  0014                     	;# 
  1860  0015                     	;# 
  1861  0015                     	;# 
  1862  0016                     	;# 
  1863  0016                     	;# 
  1864  0017                     	;# 
  1865  0018                     	;# 
  1866  0019                     	;# 
  1867  0019                     	;# 
  1868  001A                     	;# 
  1869  001B                     	;# 
  1870  001C                     	;# 
  1871  001D                     	;# 
  1872  001E                     	;# 
  1873  001F                     	;# 
  1874  008C                     	;# 
  1875  008D                     	;# 
  1876  008E                     	;# 
  1877  0090                     	;# 
  1878  0091                     	;# 
  1879  0092                     	;# 
  1880  0093                     	;# 
  1881  0094                     	;# 
  1882  0097                     	;# 
  1883  009B                     	;# 
  1884  009B                     	;# 
  1885  009C                     	;# 
  1886  009D                     	;# 
  1887  009E                     	;# 
  1888  009F                     	;# 
  1889  010C                     	;# 
  1890  010D                     	;# 
  1891  010E                     	;# 
  1892  0111                     	;# 
  1893  0112                     	;# 
  1894  0113                     	;# 
  1895  0114                     	;# 
  1896  0115                     	;# 
  1897  0116                     	;# 
  1898  0117                     	;# 
  1899  0118                     	;# 
  1900  0119                     	;# 
  1901  018C                     	;# 
  1902  018D                     	;# 
  1903  018E                     	;# 
  1904  0197                     	;# 
  1905  0199                     	;# 
  1906  0199                     	;# 
  1907  0199                     	;# 
  1908  019A                     	;# 
  1909  019A                     	;# 
  1910  019A                     	;# 
  1911  019B                     	;# 
  1912  019B                     	;# 
  1913  019B                     	;# 
  1914  019B                     	;# 
  1915  019B                     	;# 
  1916  019C                     	;# 
  1917  019C                     	;# 
  1918  019C                     	;# 
  1919  019D                     	;# 
  1920  019D                     	;# 
  1921  019D                     	;# 
  1922  019E                     	;# 
  1923  019E                     	;# 
  1924  019E                     	;# 
  1925  019F                     	;# 
  1926  019F                     	;# 
  1927  019F                     	;# 
  1928  019F                     	;# 
  1929  019F                     	;# 
  1930  020C                     	;# 
  1931  020D                     	;# 
  1932  020E                     	;# 
  1933  0211                     	;# 
  1934  0211                     	;# 
  1935  0212                     	;# 
  1936  0212                     	;# 
  1937  0213                     	;# 
  1938  0213                     	;# 
  1939  0214                     	;# 
  1940  0214                     	;# 
  1941  0215                     	;# 
  1942  0215                     	;# 
  1943  0215                     	;# 
  1944  0215                     	;# 
  1945  0216                     	;# 
  1946  0216                     	;# 
  1947  0217                     	;# 
  1948  0217                     	;# 
  1949  0219                     	;# 
  1950  021A                     	;# 
  1951  021B                     	;# 
  1952  021C                     	;# 
  1953  021D                     	;# 
  1954  021D                     	;# 
  1955  021E                     	;# 
  1956  021F                     	;# 
  1957  028C                     	;# 
  1958  028D                     	;# 
  1959  028E                     	;# 
  1960  0291                     	;# 
  1961  0291                     	;# 
  1962  0292                     	;# 
  1963  0293                     	;# 
  1964  0294                     	;# 
  1965  0295                     	;# 
  1966  0295                     	;# 
  1967  0296                     	;# 
  1968  0297                     	;# 
  1969  0298                     	;# 
  1970  029F                     	;# 
  1971  030C                     	;# 
  1972  030D                     	;# 
  1973  030E                     	;# 
  1974  0311                     	;# 
  1975  0311                     	;# 
  1976  0312                     	;# 
  1977  0313                     	;# 
  1978  0314                     	;# 
  1979  0315                     	;# 
  1980  0315                     	;# 
  1981  0316                     	;# 
  1982  0317                     	;# 
  1983  0318                     	;# 
  1984  038C                     	;# 
  1985  038D                     	;# 
  1986  038E                     	;# 
  1987  0391                     	;# 
  1988  0392                     	;# 
  1989  0393                     	;# 
  1990  0394                     	;# 
  1991  0395                     	;# 
  1992  0396                     	;# 
  1993  0397                     	;# 
  1994  0398                     	;# 
  1995  0399                     	;# 
  1996  039A                     	;# 
  1997  039C                     	;# 
  1998  039D                     	;# 
  1999  039E                     	;# 
  2000  039F                     	;# 
  2001  0411                     	;# 
  2002  0411                     	;# 
  2003  0412                     	;# 
  2004  0413                     	;# 
  2005  0414                     	;# 
  2006  0415                     	;# 
  2007  0416                     	;# 
  2008  0417                     	;# 
  2009  0418                     	;# 
  2010  0418                     	;# 
  2011  0419                     	;# 
  2012  041A                     	;# 
  2013  041B                     	;# 
  2014  041C                     	;# 
  2015  041D                     	;# 
  2016  041E                     	;# 
  2017  041F                     	;# 
  2018  0498                     	;# 
  2019  0498                     	;# 
  2020  0499                     	;# 
  2021  049A                     	;# 
  2022  049B                     	;# 
  2023  049B                     	;# 
  2024  049C                     	;# 
  2025  049D                     	;# 
  2026  049E                     	;# 
  2027  049F                     	;# 
  2028  0617                     	;# 
  2029  0618                     	;# 
  2030  0619                     	;# 
  2031  0619                     	;# 
  2032  061A                     	;# 
  2033  061B                     	;# 
  2034  061C                     	;# 
  2035  061C                     	;# 
  2036  061F                     	;# 
  2037  0691                     	;# 
  2038  0692                     	;# 
  2039  0693                     	;# 
  2040  0694                     	;# 
  2041  0695                     	;# 
  2042  0696                     	;# 
  2043  0697                     	;# 
  2044  0698                     	;# 
  2045  0699                     	;# 
  2046  0711                     	;# 
  2047  0712                     	;# 
  2048  0713                     	;# 
  2049  0714                     	;# 
  2050  0715                     	;# 
  2051  0716                     	;# 
  2052  0717                     	;# 
  2053  0718                     	;# 
  2054  0719                     	;# 
  2055  0891                     	;# 
  2056  0891                     	;# 
  2057  0891                     	;# 
  2058  0891                     	;# 
  2059  0891                     	;# 
  2060  0891                     	;# 
  2061  0892                     	;# 
  2062  0892                     	;# 
  2063  0892                     	;# 
  2064  0893                     	;# 
  2065  0893                     	;# 
  2066  0893                     	;# 
  2067  0893                     	;# 
  2068  0893                     	;# 
  2069  0893                     	;# 
  2070  0894                     	;# 
  2071  0894                     	;# 
  2072  0894                     	;# 
  2073  0895                     	;# 
  2074  0895                     	;# 
  2075  0895                     	;# 
  2076  0896                     	;# 
  2077  0896                     	;# 
  2078  0896                     	;# 
  2079  089B                     	;# 
  2080  0911                     	;# 
  2081  0912                     	;# 
  2082  0913                     	;# 
  2083  0914                     	;# 
  2084  0915                     	;# 
  2085  0916                     	;# 
  2086  0918                     	;# 
  2087  0919                     	;# 
  2088  091A                     	;# 
  2089  091B                     	;# 
  2090  091C                     	;# 
  2091  091D                     	;# 
  2092  091E                     	;# 
  2093  091F                     	;# 
  2094  0E0F                     	;# 
  2095  0E10                     	;# 
  2096  0E11                     	;# 
  2097  0E12                     	;# 
  2098  0E13                     	;# 
  2099  0E14                     	;# 
  2100  0E15                     	;# 
  2101  0E16                     	;# 
  2102  0E17                     	;# 
  2103  0E18                     	;# 
  2104  0E19                     	;# 
  2105  0E1A                     	;# 
  2106  0E1B                     	;# 
  2107  0E1C                     	;# 
  2108  0E1D                     	;# 
  2109  0E1E                     	;# 
  2110  0E1F                     	;# 
  2111  0E20                     	;# 
  2112  0E21                     	;# 
  2113  0E22                     	;# 
  2114  0E24                     	;# 
  2115  0E25                     	;# 
  2116  0E28                     	;# 
  2117  0E29                     	;# 
  2118  0E2A                     	;# 
  2119  0E2B                     	;# 
  2120  0E2C                     	;# 
  2121  0E2D                     	;# 
  2122  0E2E                     	;# 
  2123  0E2F                     	;# 
  2124  0E90                     	;# 
  2125  0E91                     	;# 
  2126  0E92                     	;# 
  2127  0E94                     	;# 
  2128  0E95                     	;# 
  2129  0E9C                     	;# 
  2130  0E9D                     	;# 
  2131  0E9E                     	;# 
  2132  0E9F                     	;# 
  2133  0EA0                     	;# 
  2134  0EA1                     	;# 
  2135  0EA2                     	;# 
  2136  0EA3                     	;# 
  2137  0EA4                     	;# 
  2138  0EA5                     	;# 
  2139  0EA6                     	;# 
  2140  0EA7                     	;# 
  2141  0F0F                     	;# 
  2142  0F10                     	;# 
  2143  0F11                     	;# 
  2144  0F12                     	;# 
  2145  0F13                     	;# 
  2146  0F14                     	;# 
  2147  0F15                     	;# 
  2148  0F16                     	;# 
  2149  0F17                     	;# 
  2150  0F18                     	;# 
  2151  0F19                     	;# 
  2152  0F1A                     	;# 
  2153  0F1B                     	;# 
  2154  0F1C                     	;# 
  2155  0F1D                     	;# 
  2156  0F1E                     	;# 
  2157  0F1F                     	;# 
  2158  0F20                     	;# 
  2159  0F21                     	;# 
  2160  0F22                     	;# 
  2161  0F23                     	;# 
  2162  0F24                     	;# 
  2163  0F25                     	;# 
  2164  0F26                     	;# 
  2165  0F27                     	;# 
  2166  0F28                     	;# 
  2167  0F29                     	;# 
  2168  0F2A                     	;# 
  2169  0F2B                     	;# 
  2170  0F2C                     	;# 
  2171  0F2D                     	;# 
  2172  0F2E                     	;# 
  2173  0F2F                     	;# 
  2174  0F30                     	;# 
  2175  0F31                     	;# 
  2176  0F32                     	;# 
  2177  0F33                     	;# 
  2178  0F34                     	;# 
  2179  0F35                     	;# 
  2180  0F36                     	;# 
  2181  0F37                     	;# 
  2182  0FE4                     	;# 
  2183  0FE5                     	;# 
  2184  0FE6                     	;# 
  2185  0FE7                     	;# 
  2186  0FE8                     	;# 
  2187  0FE9                     	;# 
  2188  0FEA                     	;# 
  2189  0FEB                     	;# 
  2190  0FED                     	;# 
  2191  0FEE                     	;# 
  2192  0FEF                     	;# 
  2193  0000                     	;# 
  2194  0001                     	;# 
  2195  0002                     	;# 
  2196  0003                     	;# 
  2197  0004                     	;# 
  2198  0005                     	;# 
  2199  0006                     	;# 
  2200  0007                     	;# 
  2201  0008                     	;# 
  2202  0009                     	;# 
  2203  000A                     	;# 
  2204  000B                     	;# 
  2205  000C                     	;# 
  2206  000D                     	;# 
  2207  000E                     	;# 
  2208  0010                     	;# 
  2209  0011                     	;# 
  2210  0012                     	;# 
  2211  0013                     	;# 
  2212  0014                     	;# 
  2213  0015                     	;# 
  2214  0015                     	;# 
  2215  0016                     	;# 
  2216  0016                     	;# 
  2217  0017                     	;# 
  2218  0018                     	;# 
  2219  0019                     	;# 
  2220  0019                     	;# 
  2221  001A                     	;# 
  2222  001B                     	;# 
  2223  001C                     	;# 
  2224  001D                     	;# 
  2225  001E                     	;# 
  2226  001F                     	;# 
  2227  008C                     	;# 
  2228  008D                     	;# 
  2229  008E                     	;# 
  2230  0090                     	;# 
  2231  0091                     	;# 
  2232  0092                     	;# 
  2233  0093                     	;# 
  2234  0094                     	;# 
  2235  0097                     	;# 
  2236  009B                     	;# 
  2237  009B                     	;# 
  2238  009C                     	;# 
  2239  009D                     	;# 
  2240  009E                     	;# 
  2241  009F                     	;# 
  2242  010C                     	;# 
  2243  010D                     	;# 
  2244  010E                     	;# 
  2245  0111                     	;# 
  2246  0112                     	;# 
  2247  0113                     	;# 
  2248  0114                     	;# 
  2249  0115                     	;# 
  2250  0116                     	;# 
  2251  0117                     	;# 
  2252  0118                     	;# 
  2253  0119                     	;# 
  2254  018C                     	;# 
  2255  018D                     	;# 
  2256  018E                     	;# 
  2257  0197                     	;# 
  2258  0199                     	;# 
  2259  0199                     	;# 
  2260  0199                     	;# 
  2261  019A                     	;# 
  2262  019A                     	;# 
  2263  019A                     	;# 
  2264  019B                     	;# 
  2265  019B                     	;# 
  2266  019B                     	;# 
  2267  019B                     	;# 
  2268  019B                     	;# 
  2269  019C                     	;# 
  2270  019C                     	;# 
  2271  019C                     	;# 
  2272  019D                     	;# 
  2273  019D                     	;# 
  2274  019D                     	;# 
  2275  019E                     	;# 
  2276  019E                     	;# 
  2277  019E                     	;# 
  2278  019F                     	;# 
  2279  019F                     	;# 
  2280  019F                     	;# 
  2281  019F                     	;# 
  2282  019F                     	;# 
  2283  020C                     	;# 
  2284  020D                     	;# 
  2285  020E                     	;# 
  2286  0211                     	;# 
  2287  0211                     	;# 
  2288  0212                     	;# 
  2289  0212                     	;# 
  2290  0213                     	;# 
  2291  0213                     	;# 
  2292  0214                     	;# 
  2293  0214                     	;# 
  2294  0215                     	;# 
  2295  0215                     	;# 
  2296  0215                     	;# 
  2297  0215                     	;# 
  2298  0216                     	;# 
  2299  0216                     	;# 
  2300  0217                     	;# 
  2301  0217                     	;# 
  2302  0219                     	;# 
  2303  021A                     	;# 
  2304  021B                     	;# 
  2305  021C                     	;# 
  2306  021D                     	;# 
  2307  021D                     	;# 
  2308  021E                     	;# 
  2309  021F                     	;# 
  2310  028C                     	;# 
  2311  028D                     	;# 
  2312  028E                     	;# 
  2313  0291                     	;# 
  2314  0291                     	;# 
  2315  0292                     	;# 
  2316  0293                     	;# 
  2317  0294                     	;# 
  2318  0295                     	;# 
  2319  0295                     	;# 
  2320  0296                     	;# 
  2321  0297                     	;# 
  2322  0298                     	;# 
  2323  029F                     	;# 
  2324  030C                     	;# 
  2325  030D                     	;# 
  2326  030E                     	;# 
  2327  0311                     	;# 
  2328  0311                     	;# 
  2329  0312                     	;# 
  2330  0313                     	;# 
  2331  0314                     	;# 
  2332  0315                     	;# 
  2333  0315                     	;# 
  2334  0316                     	;# 
  2335  0317                     	;# 
  2336  0318                     	;# 
  2337  038C                     	;# 
  2338  038D                     	;# 
  2339  038E                     	;# 
  2340  0391                     	;# 
  2341  0392                     	;# 
  2342  0393                     	;# 
  2343  0394                     	;# 
  2344  0395                     	;# 
  2345  0396                     	;# 
  2346  0397                     	;# 
  2347  0398                     	;# 
  2348  0399                     	;# 
  2349  039A                     	;# 
  2350  039C                     	;# 
  2351  039D                     	;# 
  2352  039E                     	;# 
  2353  039F                     	;# 
  2354  0411                     	;# 
  2355  0411                     	;# 
  2356  0412                     	;# 
  2357  0413                     	;# 
  2358  0414                     	;# 
  2359  0415                     	;# 
  2360  0416                     	;# 
  2361  0417                     	;# 
  2362  0418                     	;# 
  2363  0418                     	;# 
  2364  0419                     	;# 
  2365  041A                     	;# 
  2366  041B                     	;# 
  2367  041C                     	;# 
  2368  041D                     	;# 
  2369  041E                     	;# 
  2370  041F                     	;# 
  2371  0498                     	;# 
  2372  0498                     	;# 
  2373  0499                     	;# 
  2374  049A                     	;# 
  2375  049B                     	;# 
  2376  049B                     	;# 
  2377  049C                     	;# 
  2378  049D                     	;# 
  2379  049E                     	;# 
  2380  049F                     	;# 
  2381  0617                     	;# 
  2382  0618                     	;# 
  2383  0619                     	;# 
  2384  0619                     	;# 
  2385  061A                     	;# 
  2386  061B                     	;# 
  2387  061C                     	;# 
  2388  061C                     	;# 
  2389  061F                     	;# 
  2390  0691                     	;# 
  2391  0692                     	;# 
  2392  0693                     	;# 
  2393  0694                     	;# 
  2394  0695                     	;# 
  2395  0696                     	;# 
  2396  0697                     	;# 
  2397  0698                     	;# 
  2398  0699                     	;# 
  2399  0711                     	;# 
  2400  0712                     	;# 
  2401  0713                     	;# 
  2402  0714                     	;# 
  2403  0715                     	;# 
  2404  0716                     	;# 
  2405  0717                     	;# 
  2406  0718                     	;# 
  2407  0719                     	;# 
  2408  0891                     	;# 
  2409  0891                     	;# 
  2410  0891                     	;# 
  2411  0891                     	;# 
  2412  0891                     	;# 
  2413  0891                     	;# 
  2414  0892                     	;# 
  2415  0892                     	;# 
  2416  0892                     	;# 
  2417  0893                     	;# 
  2418  0893                     	;# 
  2419  0893                     	;# 
  2420  0893                     	;# 
  2421  0893                     	;# 
  2422  0893                     	;# 
  2423  0894                     	;# 
  2424  0894                     	;# 
  2425  0894                     	;# 
  2426  0895                     	;# 
  2427  0895                     	;# 
  2428  0895                     	;# 
  2429  0896                     	;# 
  2430  0896                     	;# 
  2431  0896                     	;# 
  2432  089B                     	;# 
  2433  0911                     	;# 
  2434  0912                     	;# 
  2435  0913                     	;# 
  2436  0914                     	;# 
  2437  0915                     	;# 
  2438  0916                     	;# 
  2439  0918                     	;# 
  2440  0919                     	;# 
  2441  091A                     	;# 
  2442  091B                     	;# 
  2443  091C                     	;# 
  2444  091D                     	;# 
  2445  091E                     	;# 
  2446  091F                     	;# 
  2447  0E0F                     	;# 
  2448  0E10                     	;# 
  2449  0E11                     	;# 
  2450  0E12                     	;# 
  2451  0E13                     	;# 
  2452  0E14                     	;# 
  2453  0E15                     	;# 
  2454  0E16                     	;# 
  2455  0E17                     	;# 
  2456  0E18                     	;# 
  2457  0E19                     	;# 
  2458  0E1A                     	;# 
  2459  0E1B                     	;# 
  2460  0E1C                     	;# 
  2461  0E1D                     	;# 
  2462  0E1E                     	;# 
  2463  0E1F                     	;# 
  2464  0E20                     	;# 
  2465  0E21                     	;# 
  2466  0E22                     	;# 
  2467  0E24                     	;# 
  2468  0E25                     	;# 
  2469  0E28                     	;# 
  2470  0E29                     	;# 
  2471  0E2A                     	;# 
  2472  0E2B                     	;# 
  2473  0E2C                     	;# 
  2474  0E2D                     	;# 
  2475  0E2E                     	;# 
  2476  0E2F                     	;# 
  2477  0E90                     	;# 
  2478  0E91                     	;# 
  2479  0E92                     	;# 
  2480  0E94                     	;# 
  2481  0E95                     	;# 
  2482  0E9C                     	;# 
  2483  0E9D                     	;# 
  2484  0E9E                     	;# 
  2485  0E9F                     	;# 
  2486  0EA0                     	;# 
  2487  0EA1                     	;# 
  2488  0EA2                     	;# 
  2489  0EA3                     	;# 
  2490  0EA4                     	;# 
  2491  0EA5                     	;# 
  2492  0EA6                     	;# 
  2493  0EA7                     	;# 
  2494  0F0F                     	;# 
  2495  0F10                     	;# 
  2496  0F11                     	;# 
  2497  0F12                     	;# 
  2498  0F13                     	;# 
  2499  0F14                     	;# 
  2500  0F15                     	;# 
  2501  0F16                     	;# 
  2502  0F17                     	;# 
  2503  0F18                     	;# 
  2504  0F19                     	;# 
  2505  0F1A                     	;# 
  2506  0F1B                     	;# 
  2507  0F1C                     	;# 
  2508  0F1D                     	;# 
  2509  0F1E                     	;# 
  2510  0F1F                     	;# 
  2511  0F20                     	;# 
  2512  0F21                     	;# 
  2513  0F22                     	;# 
  2514  0F23                     	;# 
  2515  0F24                     	;# 
  2516  0F25                     	;# 
  2517  0F26                     	;# 
  2518  0F27                     	;# 
  2519  0F28                     	;# 
  2520  0F29                     	;# 
  2521  0F2A                     	;# 
  2522  0F2B                     	;# 
  2523  0F2C                     	;# 
  2524  0F2D                     	;# 
  2525  0F2E                     	;# 
  2526  0F2F                     	;# 
  2527  0F30                     	;# 
  2528  0F31                     	;# 
  2529  0F32                     	;# 
  2530  0F33                     	;# 
  2531  0F34                     	;# 
  2532  0F35                     	;# 
  2533  0F36                     	;# 
  2534  0F37                     	;# 
  2535  0FE4                     	;# 
  2536  0FE5                     	;# 
  2537  0FE6                     	;# 
  2538  0FE7                     	;# 
  2539  0FE8                     	;# 
  2540  0FE9                     	;# 
  2541  0FEA                     	;# 
  2542  0FEB                     	;# 
  2543  0FED                     	;# 
  2544  0FEE                     	;# 
  2545  0FEF                     	;# 
  2546  0000                     	;# 
  2547  0001                     	;# 
  2548  0002                     	;# 
  2549  0003                     	;# 
  2550  0004                     	;# 
  2551  0005                     	;# 
  2552  0006                     	;# 
  2553  0007                     	;# 
  2554  0008                     	;# 
  2555  0009                     	;# 
  2556  000A                     	;# 
  2557  000B                     	;# 
  2558  000C                     	;# 
  2559  000D                     	;# 
  2560  000E                     	;# 
  2561  0010                     	;# 
  2562  0011                     	;# 
  2563  0012                     	;# 
  2564  0013                     	;# 
  2565  0014                     	;# 
  2566  0015                     	;# 
  2567  0015                     	;# 
  2568  0016                     	;# 
  2569  0016                     	;# 
  2570  0017                     	;# 
  2571  0018                     	;# 
  2572  0019                     	;# 
  2573  0019                     	;# 
  2574  001A                     	;# 
  2575  001B                     	;# 
  2576  001C                     	;# 
  2577  001D                     	;# 
  2578  001E                     	;# 
  2579  001F                     	;# 
  2580  008C                     	;# 
  2581  008D                     	;# 
  2582  008E                     	;# 
  2583  0090                     	;# 
  2584  0091                     	;# 
  2585  0092                     	;# 
  2586  0093                     	;# 
  2587  0094                     	;# 
  2588  0097                     	;# 
  2589  009B                     	;# 
  2590  009B                     	;# 
  2591  009C                     	;# 
  2592  009D                     	;# 
  2593  009E                     	;# 
  2594  009F                     	;# 
  2595  010C                     	;# 
  2596  010D                     	;# 
  2597  010E                     	;# 
  2598  0111                     	;# 
  2599  0112                     	;# 
  2600  0113                     	;# 
  2601  0114                     	;# 
  2602  0115                     	;# 
  2603  0116                     	;# 
  2604  0117                     	;# 
  2605  0118                     	;# 
  2606  0119                     	;# 
  2607  018C                     	;# 
  2608  018D                     	;# 
  2609  018E                     	;# 
  2610  0197                     	;# 
  2611  0199                     	;# 
  2612  0199                     	;# 
  2613  0199                     	;# 
  2614  019A                     	;# 
  2615  019A                     	;# 
  2616  019A                     	;# 
  2617  019B                     	;# 
  2618  019B                     	;# 
  2619  019B                     	;# 
  2620  019B                     	;# 
  2621  019B                     	;# 
  2622  019C                     	;# 
  2623  019C                     	;# 
  2624  019C                     	;# 
  2625  019D                     	;# 
  2626  019D                     	;# 
  2627  019D                     	;# 
  2628  019E                     	;# 
  2629  019E                     	;# 
  2630  019E                     	;# 
  2631  019F                     	;# 
  2632  019F                     	;# 
  2633  019F                     	;# 
  2634  019F                     	;# 
  2635  019F                     	;# 
  2636  020C                     	;# 
  2637  020D                     	;# 
  2638  020E                     	;# 
  2639  0211                     	;# 
  2640  0211                     	;# 
  2641  0212                     	;# 
  2642  0212                     	;# 
  2643  0213                     	;# 
  2644  0213                     	;# 
  2645  0214                     	;# 
  2646  0214                     	;# 
  2647  0215                     	;# 
  2648  0215                     	;# 
  2649  0215                     	;# 
  2650  0215                     	;# 
  2651  0216                     	;# 
  2652  0216                     	;# 
  2653  0217                     	;# 
  2654  0217                     	;# 
  2655  0219                     	;# 
  2656  021A                     	;# 
  2657  021B                     	;# 
  2658  021C                     	;# 
  2659  021D                     	;# 
  2660  021D                     	;# 
  2661  021E                     	;# 
  2662  021F                     	;# 
  2663  028C                     	;# 
  2664  028D                     	;# 
  2665  028E                     	;# 
  2666  0291                     	;# 
  2667  0291                     	;# 
  2668  0292                     	;# 
  2669  0293                     	;# 
  2670  0294                     	;# 
  2671  0295                     	;# 
  2672  0295                     	;# 
  2673  0296                     	;# 
  2674  0297                     	;# 
  2675  0298                     	;# 
  2676  029F                     	;# 
  2677  030C                     	;# 
  2678  030D                     	;# 
  2679  030E                     	;# 
  2680  0311                     	;# 
  2681  0311                     	;# 
  2682  0312                     	;# 
  2683  0313                     	;# 
  2684  0314                     	;# 
  2685  0315                     	;# 
  2686  0315                     	;# 
  2687  0316                     	;# 
  2688  0317                     	;# 
  2689  0318                     	;# 
  2690  038C                     	;# 
  2691  038D                     	;# 
  2692  038E                     	;# 
  2693  0391                     	;# 
  2694  0392                     	;# 
  2695  0393                     	;# 
  2696  0394                     	;# 
  2697  0395                     	;# 
  2698  0396                     	;# 
  2699  0397                     	;# 
  2700  0398                     	;# 
  2701  0399                     	;# 
  2702  039A                     	;# 
  2703  039C                     	;# 
  2704  039D                     	;# 
  2705  039E                     	;# 
  2706  039F                     	;# 
  2707  0411                     	;# 
  2708  0411                     	;# 
  2709  0412                     	;# 
  2710  0413                     	;# 
  2711  0414                     	;# 
  2712  0415                     	;# 
  2713  0416                     	;# 
  2714  0417                     	;# 
  2715  0418                     	;# 
  2716  0418                     	;# 
  2717  0419                     	;# 
  2718  041A                     	;# 
  2719  041B                     	;# 
  2720  041C                     	;# 
  2721  041D                     	;# 
  2722  041E                     	;# 
  2723  041F                     	;# 
  2724  0498                     	;# 
  2725  0498                     	;# 
  2726  0499                     	;# 
  2727  049A                     	;# 
  2728  049B                     	;# 
  2729  049B                     	;# 
  2730  049C                     	;# 
  2731  049D                     	;# 
  2732  049E                     	;# 
  2733  049F                     	;# 
  2734  0617                     	;# 
  2735  0618                     	;# 
  2736  0619                     	;# 
  2737  0619                     	;# 
  2738  061A                     	;# 
  2739  061B                     	;# 
  2740  061C                     	;# 
  2741  061C                     	;# 
  2742  061F                     	;# 
  2743  0691                     	;# 
  2744  0692                     	;# 
  2745  0693                     	;# 
  2746  0694                     	;# 
  2747  0695                     	;# 
  2748  0696                     	;# 
  2749  0697                     	;# 
  2750  0698                     	;# 
  2751  0699                     	;# 
  2752  0711                     	;# 
  2753  0712                     	;# 
  2754  0713                     	;# 
  2755  0714                     	;# 
  2756  0715                     	;# 
  2757  0716                     	;# 
  2758  0717                     	;# 
  2759  0718                     	;# 
  2760  0719                     	;# 
  2761  0891                     	;# 
  2762  0891                     	;# 
  2763  0891                     	;# 
  2764  0891                     	;# 
  2765  0891                     	;# 
  2766  0891                     	;# 
  2767  0892                     	;# 
  2768  0892                     	;# 
  2769  0892                     	;# 
  2770  0893                     	;# 
  2771  0893                     	;# 
  2772  0893                     	;# 
  2773  0893                     	;# 
  2774  0893                     	;# 
  2775  0893                     	;# 
  2776  0894                     	;# 
  2777  0894                     	;# 
  2778  0894                     	;# 
  2779  0895                     	;# 
  2780  0895                     	;# 
  2781  0895                     	;# 
  2782  0896                     	;# 
  2783  0896                     	;# 
  2784  0896                     	;# 
  2785  089B                     	;# 
  2786  0911                     	;# 
  2787  0912                     	;# 
  2788  0913                     	;# 
  2789  0914                     	;# 
  2790  0915                     	;# 
  2791  0916                     	;# 
  2792  0918                     	;# 
  2793  0919                     	;# 
  2794  091A                     	;# 
  2795  091B                     	;# 
  2796  091C                     	;# 
  2797  091D                     	;# 
  2798  091E                     	;# 
  2799  091F                     	;# 
  2800  0E0F                     	;# 
  2801  0E10                     	;# 
  2802  0E11                     	;# 
  2803  0E12                     	;# 
  2804  0E13                     	;# 
  2805  0E14                     	;# 
  2806  0E15                     	;# 
  2807  0E16                     	;# 
  2808  0E17                     	;# 
  2809  0E18                     	;# 
  2810  0E19                     	;# 
  2811  0E1A                     	;# 
  2812  0E1B                     	;# 
  2813  0E1C                     	;# 
  2814  0E1D                     	;# 
  2815  0E1E                     	;# 
  2816  0E1F                     	;# 
  2817  0E20                     	;# 
  2818  0E21                     	;# 
  2819  0E22                     	;# 
  2820  0E24                     	;# 
  2821  0E25                     	;# 
  2822  0E28                     	;# 
  2823  0E29                     	;# 
  2824  0E2A                     	;# 
  2825  0E2B                     	;# 
  2826  0E2C                     	;# 
  2827  0E2D                     	;# 
  2828  0E2E                     	;# 
  2829  0E2F                     	;# 
  2830  0E90                     	;# 
  2831  0E91                     	;# 
  2832  0E92                     	;# 
  2833  0E94                     	;# 
  2834  0E95                     	;# 
  2835  0E9C                     	;# 
  2836  0E9D                     	;# 
  2837  0E9E                     	;# 
  2838  0E9F                     	;# 
  2839  0EA0                     	;# 
  2840  0EA1                     	;# 
  2841  0EA2                     	;# 
  2842  0EA3                     	;# 
  2843  0EA4                     	;# 
  2844  0EA5                     	;# 
  2845  0EA6                     	;# 
  2846  0EA7                     	;# 
  2847  0F0F                     	;# 
  2848  0F10                     	;# 
  2849  0F11                     	;# 
  2850  0F12                     	;# 
  2851  0F13                     	;# 
  2852  0F14                     	;# 
  2853  0F15                     	;# 
  2854  0F16                     	;# 
  2855  0F17                     	;# 
  2856  0F18                     	;# 
  2857  0F19                     	;# 
  2858  0F1A                     	;# 
  2859  0F1B                     	;# 
  2860  0F1C                     	;# 
  2861  0F1D                     	;# 
  2862  0F1E                     	;# 
  2863  0F1F                     	;# 
  2864  0F20                     	;# 
  2865  0F21                     	;# 
  2866  0F22                     	;# 
  2867  0F23                     	;# 
  2868  0F24                     	;# 
  2869  0F25                     	;# 
  2870  0F26                     	;# 
  2871  0F27                     	;# 
  2872  0F28                     	;# 
  2873  0F29                     	;# 
  2874  0F2A                     	;# 
  2875  0F2B                     	;# 
  2876  0F2C                     	;# 
  2877  0F2D                     	;# 
  2878  0F2E                     	;# 
  2879  0F2F                     	;# 
  2880  0F30                     	;# 
  2881  0F31                     	;# 
  2882  0F32                     	;# 
  2883  0F33                     	;# 
  2884  0F34                     	;# 
  2885  0F35                     	;# 
  2886  0F36                     	;# 
  2887  0F37                     	;# 
  2888  0FE4                     	;# 
  2889  0FE5                     	;# 
  2890  0FE6                     	;# 
  2891  0FE7                     	;# 
  2892  0FE8                     	;# 
  2893  0FE9                     	;# 
  2894  0FEA                     	;# 
  2895  0FEB                     	;# 
  2896  0FED                     	;# 
  2897  0FEE                     	;# 
  2898  0FEF                     	;# 
  2899  0000                     	;# 
  2900  0001                     	;# 
  2901  0002                     	;# 
  2902  0003                     	;# 
  2903  0004                     	;# 
  2904  0005                     	;# 
  2905  0006                     	;# 
  2906  0007                     	;# 
  2907  0008                     	;# 
  2908  0009                     	;# 
  2909  000A                     	;# 
  2910  000B                     	;# 
  2911  000C                     	;# 
  2912  000D                     	;# 
  2913  000E                     	;# 
  2914  0010                     	;# 
  2915  0011                     	;# 
  2916  0012                     	;# 
  2917  0013                     	;# 
  2918  0014                     	;# 
  2919  0015                     	;# 
  2920  0015                     	;# 
  2921  0016                     	;# 
  2922  0016                     	;# 
  2923  0017                     	;# 
  2924  0018                     	;# 
  2925  0019                     	;# 
  2926  0019                     	;# 
  2927  001A                     	;# 
  2928  001B                     	;# 
  2929  001C                     	;# 
  2930  001D                     	;# 
  2931  001E                     	;# 
  2932  001F                     	;# 
  2933  008C                     	;# 
  2934  008D                     	;# 
  2935  008E                     	;# 
  2936  0090                     	;# 
  2937  0091                     	;# 
  2938  0092                     	;# 
  2939  0093                     	;# 
  2940  0094                     	;# 
  2941  0097                     	;# 
  2942  009B                     	;# 
  2943  009B                     	;# 
  2944  009C                     	;# 
  2945  009D                     	;# 
  2946  009E                     	;# 
  2947  009F                     	;# 
  2948  010C                     	;# 
  2949  010D                     	;# 
  2950  010E                     	;# 
  2951  0111                     	;# 
  2952  0112                     	;# 
  2953  0113                     	;# 
  2954  0114                     	;# 
  2955  0115                     	;# 
  2956  0116                     	;# 
  2957  0117                     	;# 
  2958  0118                     	;# 
  2959  0119                     	;# 
  2960  018C                     	;# 
  2961  018D                     	;# 
  2962  018E                     	;# 
  2963  0197                     	;# 
  2964  0199                     	;# 
  2965  0199                     	;# 
  2966  0199                     	;# 
  2967  019A                     	;# 
  2968  019A                     	;# 
  2969  019A                     	;# 
  2970  019B                     	;# 
  2971  019B                     	;# 
  2972  019B                     	;# 
  2973  019B                     	;# 
  2974  019B                     	;# 
  2975  019C                     	;# 
  2976  019C                     	;# 
  2977  019C                     	;# 
  2978  019D                     	;# 
  2979  019D                     	;# 
  2980  019D                     	;# 
  2981  019E                     	;# 
  2982  019E                     	;# 
  2983  019E                     	;# 
  2984  019F                     	;# 
  2985  019F                     	;# 
  2986  019F                     	;# 
  2987  019F                     	;# 
  2988  019F                     	;# 
  2989  020C                     	;# 
  2990  020D                     	;# 
  2991  020E                     	;# 
  2992  0211                     	;# 
  2993  0211                     	;# 
  2994  0212                     	;# 
  2995  0212                     	;# 
  2996  0213                     	;# 
  2997  0213                     	;# 
  2998  0214                     	;# 
  2999  0214                     	;# 
  3000  0215                     	;# 
  3001  0215                     	;# 
  3002  0215                     	;# 
  3003  0215                     	;# 
  3004  0216                     	;# 
  3005  0216                     	;# 
  3006  0217                     	;# 
  3007  0217                     	;# 
  3008  0219                     	;# 
  3009  021A                     	;# 
  3010  021B                     	;# 
  3011  021C                     	;# 
  3012  021D                     	;# 
  3013  021D                     	;# 
  3014  021E                     	;# 
  3015  021F                     	;# 
  3016  028C                     	;# 
  3017  028D                     	;# 
  3018  028E                     	;# 
  3019  0291                     	;# 
  3020  0291                     	;# 
  3021  0292                     	;# 
  3022  0293                     	;# 
  3023  0294                     	;# 
  3024  0295                     	;# 
  3025  0295                     	;# 
  3026  0296                     	;# 
  3027  0297                     	;# 
  3028  0298                     	;# 
  3029  029F                     	;# 
  3030  030C                     	;# 
  3031  030D                     	;# 
  3032  030E                     	;# 
  3033  0311                     	;# 
  3034  0311                     	;# 
  3035  0312                     	;# 
  3036  0313                     	;# 
  3037  0314                     	;# 
  3038  0315                     	;# 
  3039  0315                     	;# 
  3040  0316                     	;# 
  3041  0317                     	;# 
  3042  0318                     	;# 
  3043  038C                     	;# 
  3044  038D                     	;# 
  3045  038E                     	;# 
  3046  0391                     	;# 
  3047  0392                     	;# 
  3048  0393                     	;# 
  3049  0394                     	;# 
  3050  0395                     	;# 
  3051  0396                     	;# 
  3052  0397                     	;# 
  3053  0398                     	;# 
  3054  0399                     	;# 
  3055  039A                     	;# 
  3056  039C                     	;# 
  3057  039D                     	;# 
  3058  039E                     	;# 
  3059  039F                     	;# 
  3060  0411                     	;# 
  3061  0411                     	;# 
  3062  0412                     	;# 
  3063  0413                     	;# 
  3064  0414                     	;# 
  3065  0415                     	;# 
  3066  0416                     	;# 
  3067  0417                     	;# 
  3068  0418                     	;# 
  3069  0418                     	;# 
  3070  0419                     	;# 
  3071  041A                     	;# 
  3072  041B                     	;# 
  3073  041C                     	;# 
  3074  041D                     	;# 
  3075  041E                     	;# 
  3076  041F                     	;# 
  3077  0498                     	;# 
  3078  0498                     	;# 
  3079  0499                     	;# 
  3080  049A                     	;# 
  3081  049B                     	;# 
  3082  049B                     	;# 
  3083  049C                     	;# 
  3084  049D                     	;# 
  3085  049E                     	;# 
  3086  049F                     	;# 
  3087  0617                     	;# 
  3088  0618                     	;# 
  3089  0619                     	;# 
  3090  0619                     	;# 
  3091  061A                     	;# 
  3092  061B                     	;# 
  3093  061C                     	;# 
  3094  061C                     	;# 
  3095  061F                     	;# 
  3096  0691                     	;# 
  3097  0692                     	;# 
  3098  0693                     	;# 
  3099  0694                     	;# 
  3100  0695                     	;# 
  3101  0696                     	;# 
  3102  0697                     	;# 
  3103  0698                     	;# 
  3104  0699                     	;# 
  3105  0711                     	;# 
  3106  0712                     	;# 
  3107  0713                     	;# 
  3108  0714                     	;# 
  3109  0715                     	;# 
  3110  0716                     	;# 
  3111  0717                     	;# 
  3112  0718                     	;# 
  3113  0719                     	;# 
  3114  0891                     	;# 
  3115  0891                     	;# 
  3116  0891                     	;# 
  3117  0891                     	;# 
  3118  0891                     	;# 
  3119  0891                     	;# 
  3120  0892                     	;# 
  3121  0892                     	;# 
  3122  0892                     	;# 
  3123  0893                     	;# 
  3124  0893                     	;# 
  3125  0893                     	;# 
  3126  0893                     	;# 
  3127  0893                     	;# 
  3128  0893                     	;# 
  3129  0894                     	;# 
  3130  0894                     	;# 
  3131  0894                     	;# 
  3132  0895                     	;# 
  3133  0895                     	;# 
  3134  0895                     	;# 
  3135  0896                     	;# 
  3136  0896                     	;# 
  3137  0896                     	;# 
  3138  089B                     	;# 
  3139  0911                     	;# 
  3140  0912                     	;# 
  3141  0913                     	;# 
  3142  0914                     	;# 
  3143  0915                     	;# 
  3144  0916                     	;# 
  3145  0918                     	;# 
  3146  0919                     	;# 
  3147  091A                     	;# 
  3148  091B                     	;# 
  3149  091C                     	;# 
  3150  091D                     	;# 
  3151  091E                     	;# 
  3152  091F                     	;# 
  3153  0E0F                     	;# 
  3154  0E10                     	;# 
  3155  0E11                     	;# 
  3156  0E12                     	;# 
  3157  0E13                     	;# 
  3158  0E14                     	;# 
  3159  0E15                     	;# 
  3160  0E16                     	;# 
  3161  0E17                     	;# 
  3162  0E18                     	;# 
  3163  0E19                     	;# 
  3164  0E1A                     	;# 
  3165  0E1B                     	;# 
  3166  0E1C                     	;# 
  3167  0E1D                     	;# 
  3168  0E1E                     	;# 
  3169  0E1F                     	;# 
  3170  0E20                     	;# 
  3171  0E21                     	;# 
  3172  0E22                     	;# 
  3173  0E24                     	;# 
  3174  0E25                     	;# 
  3175  0E28                     	;# 
  3176  0E29                     	;# 
  3177  0E2A                     	;# 
  3178  0E2B                     	;# 
  3179  0E2C                     	;# 
  3180  0E2D                     	;# 
  3181  0E2E                     	;# 
  3182  0E2F                     	;# 
  3183  0E90                     	;# 
  3184  0E91                     	;# 
  3185  0E92                     	;# 
  3186  0E94                     	;# 
  3187  0E95                     	;# 
  3188  0E9C                     	;# 
  3189  0E9D                     	;# 
  3190  0E9E                     	;# 
  3191  0E9F                     	;# 
  3192  0EA0                     	;# 
  3193  0EA1                     	;# 
  3194  0EA2                     	;# 
  3195  0EA3                     	;# 
  3196  0EA4                     	;# 
  3197  0EA5                     	;# 
  3198  0EA6                     	;# 
  3199  0EA7                     	;# 
  3200  0F0F                     	;# 
  3201  0F10                     	;# 
  3202  0F11                     	;# 
  3203  0F12                     	;# 
  3204  0F13                     	;# 
  3205  0F14                     	;# 
  3206  0F15                     	;# 
  3207  0F16                     	;# 
  3208  0F17                     	;# 
  3209  0F18                     	;# 
  3210  0F19                     	;# 
  3211  0F1A                     	;# 
  3212  0F1B                     	;# 
  3213  0F1C                     	;# 
  3214  0F1D                     	;# 
  3215  0F1E                     	;# 
  3216  0F1F                     	;# 
  3217  0F20                     	;# 
  3218  0F21                     	;# 
  3219  0F22                     	;# 
  3220  0F23                     	;# 
  3221  0F24                     	;# 
  3222  0F25                     	;# 
  3223  0F26                     	;# 
  3224  0F27                     	;# 
  3225  0F28                     	;# 
  3226  0F29                     	;# 
  3227  0F2A                     	;# 
  3228  0F2B                     	;# 
  3229  0F2C                     	;# 
  3230  0F2D                     	;# 
  3231  0F2E                     	;# 
  3232  0F2F                     	;# 
  3233  0F30                     	;# 
  3234  0F31                     	;# 
  3235  0F32                     	;# 
  3236  0F33                     	;# 
  3237  0F34                     	;# 
  3238  0F35                     	;# 
  3239  0F36                     	;# 
  3240  0F37                     	;# 
  3241  0FE4                     	;# 
  3242  0FE5                     	;# 
  3243  0FE6                     	;# 
  3244  0FE7                     	;# 
  3245  0FE8                     	;# 
  3246  0FE9                     	;# 
  3247  0FEA                     	;# 
  3248  0FEB                     	;# 
  3249  0FED                     	;# 
  3250  0FEE                     	;# 
  3251  0FEF                     	;# 
  3252  0000                     	;# 
  3253  0001                     	;# 
  3254  0002                     	;# 
  3255  0003                     	;# 
  3256  0004                     	;# 
  3257  0005                     	;# 
  3258  0006                     	;# 
  3259  0007                     	;# 
  3260  0008                     	;# 
  3261  0009                     	;# 
  3262  000A                     	;# 
  3263  000B                     	;# 
  3264  000C                     	;# 
  3265  000D                     	;# 
  3266  000E                     	;# 
  3267  0010                     	;# 
  3268  0011                     	;# 
  3269  0012                     	;# 
  3270  0013                     	;# 
  3271  0014                     	;# 
  3272  0015                     	;# 
  3273  0015                     	;# 
  3274  0016                     	;# 
  3275  0016                     	;# 
  3276  0017                     	;# 
  3277  0018                     	;# 
  3278  0019                     	;# 
  3279  0019                     	;# 
  3280  001A                     	;# 
  3281  001B                     	;# 
  3282  001C                     	;# 
  3283  001D                     	;# 
  3284  001E                     	;# 
  3285  001F                     	;# 
  3286  008C                     	;# 
  3287  008D                     	;# 
  3288  008E                     	;# 
  3289  0090                     	;# 
  3290  0091                     	;# 
  3291  0092                     	;# 
  3292  0093                     	;# 
  3293  0094                     	;# 
  3294  0097                     	;# 
  3295  009B                     	;# 
  3296  009B                     	;# 
  3297  009C                     	;# 
  3298  009D                     	;# 
  3299  009E                     	;# 
  3300  009F                     	;# 
  3301  010C                     	;# 
  3302  010D                     	;# 
  3303  010E                     	;# 
  3304  0111                     	;# 
  3305  0112                     	;# 
  3306  0113                     	;# 
  3307  0114                     	;# 
  3308  0115                     	;# 
  3309  0116                     	;# 
  3310  0117                     	;# 
  3311  0118                     	;# 
  3312  0119                     	;# 
  3313  018C                     	;# 
  3314  018D                     	;# 
  3315  018E                     	;# 
  3316  0197                     	;# 
  3317  0199                     	;# 
  3318  0199                     	;# 
  3319  0199                     	;# 
  3320  019A                     	;# 
  3321  019A                     	;# 
  3322  019A                     	;# 
  3323  019B                     	;# 
  3324  019B                     	;# 
  3325  019B                     	;# 
  3326  019B                     	;# 
  3327  019B                     	;# 
  3328  019C                     	;# 
  3329  019C                     	;# 
  3330  019C                     	;# 
  3331  019D                     	;# 
  3332  019D                     	;# 
  3333  019D                     	;# 
  3334  019E                     	;# 
  3335  019E                     	;# 
  3336  019E                     	;# 
  3337  019F                     	;# 
  3338  019F                     	;# 
  3339  019F                     	;# 
  3340  019F                     	;# 
  3341  019F                     	;# 
  3342  020C                     	;# 
  3343  020D                     	;# 
  3344  020E                     	;# 
  3345  0211                     	;# 
  3346  0211                     	;# 
  3347  0212                     	;# 
  3348  0212                     	;# 
  3349  0213                     	;# 
  3350  0213                     	;# 
  3351  0214                     	;# 
  3352  0214                     	;# 
  3353  0215                     	;# 
  3354  0215                     	;# 
  3355  0215                     	;# 
  3356  0215                     	;# 
  3357  0216                     	;# 
  3358  0216                     	;# 
  3359  0217                     	;# 
  3360  0217                     	;# 
  3361  0219                     	;# 
  3362  021A                     	;# 
  3363  021B                     	;# 
  3364  021C                     	;# 
  3365  021D                     	;# 
  3366  021D                     	;# 
  3367  021E                     	;# 
  3368  021F                     	;# 
  3369  028C                     	;# 
  3370  028D                     	;# 
  3371  028E                     	;# 
  3372  0291                     	;# 
  3373  0291                     	;# 
  3374  0292                     	;# 
  3375  0293                     	;# 
  3376  0294                     	;# 
  3377  0295                     	;# 
  3378  0295                     	;# 
  3379  0296                     	;# 
  3380  0297                     	;# 
  3381  0298                     	;# 
  3382  029F                     	;# 
  3383  030C                     	;# 
  3384  030D                     	;# 
  3385  030E                     	;# 
  3386  0311                     	;# 
  3387  0311                     	;# 
  3388  0312                     	;# 
  3389  0313                     	;# 
  3390  0314                     	;# 
  3391  0315                     	;# 
  3392  0315                     	;# 
  3393  0316                     	;# 
  3394  0317                     	;# 
  3395  0318                     	;# 
  3396  038C                     	;# 
  3397  038D                     	;# 
  3398  038E                     	;# 
  3399  0391                     	;# 
  3400  0392                     	;# 
  3401  0393                     	;# 
  3402  0394                     	;# 
  3403  0395                     	;# 
  3404  0396                     	;# 
  3405  0397                     	;# 
  3406  0398                     	;# 
  3407  0399                     	;# 
  3408  039A                     	;# 
  3409  039C                     	;# 
  3410  039D                     	;# 
  3411  039E                     	;# 
  3412  039F                     	;# 
  3413  0411                     	;# 
  3414  0411                     	;# 
  3415  0412                     	;# 
  3416  0413                     	;# 
  3417  0414                     	;# 
  3418  0415                     	;# 
  3419  0416                     	;# 
  3420  0417                     	;# 
  3421  0418                     	;# 
  3422  0418                     	;# 
  3423  0419                     	;# 
  3424  041A                     	;# 
  3425  041B                     	;# 
  3426  041C                     	;# 
  3427  041D                     	;# 
  3428  041E                     	;# 
  3429  041F                     	;# 
  3430  0498                     	;# 
  3431  0498                     	;# 
  3432  0499                     	;# 
  3433  049A                     	;# 
  3434  049B                     	;# 
  3435  049B                     	;# 
  3436  049C                     	;# 
  3437  049D                     	;# 
  3438  049E                     	;# 
  3439  049F                     	;# 
  3440  0617                     	;# 
  3441  0618                     	;# 
  3442  0619                     	;# 
  3443  0619                     	;# 
  3444  061A                     	;# 
  3445  061B                     	;# 
  3446  061C                     	;# 
  3447  061C                     	;# 
  3448  061F                     	;# 
  3449  0691                     	;# 
  3450  0692                     	;# 
  3451  0693                     	;# 
  3452  0694                     	;# 
  3453  0695                     	;# 
  3454  0696                     	;# 
  3455  0697                     	;# 
  3456  0698                     	;# 
  3457  0699                     	;# 
  3458  0711                     	;# 
  3459  0712                     	;# 
  3460  0713                     	;# 
  3461  0714                     	;# 
  3462  0715                     	;# 
  3463  0716                     	;# 
  3464  0717                     	;# 
  3465  0718                     	;# 
  3466  0719                     	;# 
  3467  0891                     	;# 
  3468  0891                     	;# 
  3469  0891                     	;# 
  3470  0891                     	;# 
  3471  0891                     	;# 
  3472  0891                     	;# 
  3473  0892                     	;# 
  3474  0892                     	;# 
  3475  0892                     	;# 
  3476  0893                     	;# 
  3477  0893                     	;# 
  3478  0893                     	;# 
  3479  0893                     	;# 
  3480  0893                     	;# 
  3481  0893                     	;# 
  3482  0894                     	;# 
  3483  0894                     	;# 
  3484  0894                     	;# 
  3485  0895                     	;# 
  3486  0895                     	;# 
  3487  0895                     	;# 
  3488  0896                     	;# 
  3489  0896                     	;# 
  3490  0896                     	;# 
  3491  089B                     	;# 
  3492  0911                     	;# 
  3493  0912                     	;# 
  3494  0913                     	;# 
  3495  0914                     	;# 
  3496  0915                     	;# 
  3497  0916                     	;# 
  3498  0918                     	;# 
  3499  0919                     	;# 
  3500  091A                     	;# 
  3501  091B                     	;# 
  3502  091C                     	;# 
  3503  091D                     	;# 
  3504  091E                     	;# 
  3505  091F                     	;# 
  3506  0E0F                     	;# 
  3507  0E10                     	;# 
  3508  0E11                     	;# 
  3509  0E12                     	;# 
  3510  0E13                     	;# 
  3511  0E14                     	;# 
  3512  0E15                     	;# 
  3513  0E16                     	;# 
  3514  0E17                     	;# 
  3515  0E18                     	;# 
  3516  0E19                     	;# 
  3517  0E1A                     	;# 
  3518  0E1B                     	;# 
  3519  0E1C                     	;# 
  3520  0E1D                     	;# 
  3521  0E1E                     	;# 
  3522  0E1F                     	;# 
  3523  0E20                     	;# 
  3524  0E21                     	;# 
  3525  0E22                     	;# 
  3526  0E24                     	;# 
  3527  0E25                     	;# 
  3528  0E28                     	;# 
  3529  0E29                     	;# 
  3530  0E2A                     	;# 
  3531  0E2B                     	;# 
  3532  0E2C                     	;# 
  3533  0E2D                     	;# 
  3534  0E2E                     	;# 
  3535  0E2F                     	;# 
  3536  0E90                     	;# 
  3537  0E91                     	;# 
  3538  0E92                     	;# 
  3539  0E94                     	;# 
  3540  0E95                     	;# 
  3541  0E9C                     	;# 
  3542  0E9D                     	;# 
  3543  0E9E                     	;# 
  3544  0E9F                     	;# 
  3545  0EA0                     	;# 
  3546  0EA1                     	;# 
  3547  0EA2                     	;# 
  3548  0EA3                     	;# 
  3549  0EA4                     	;# 
  3550  0EA5                     	;# 
  3551  0EA6                     	;# 
  3552  0EA7                     	;# 
  3553  0F0F                     	;# 
  3554  0F10                     	;# 
  3555  0F11                     	;# 
  3556  0F12                     	;# 
  3557  0F13                     	;# 
  3558  0F14                     	;# 
  3559  0F15                     	;# 
  3560  0F16                     	;# 
  3561  0F17                     	;# 
  3562  0F18                     	;# 
  3563  0F19                     	;# 
  3564  0F1A                     	;# 
  3565  0F1B                     	;# 
  3566  0F1C                     	;# 
  3567  0F1D                     	;# 
  3568  0F1E                     	;# 
  3569  0F1F                     	;# 
  3570  0F20                     	;# 
  3571  0F21                     	;# 
  3572  0F22                     	;# 
  3573  0F23                     	;# 
  3574  0F24                     	;# 
  3575  0F25                     	;# 
  3576  0F26                     	;# 
  3577  0F27                     	;# 
  3578  0F28                     	;# 
  3579  0F29                     	;# 
  3580  0F2A                     	;# 
  3581  0F2B                     	;# 
  3582  0F2C                     	;# 
  3583  0F2D                     	;# 
  3584  0F2E                     	;# 
  3585  0F2F                     	;# 
  3586  0F30                     	;# 
  3587  0F31                     	;# 
  3588  0F32                     	;# 
  3589  0F33                     	;# 
  3590  0F34                     	;# 
  3591  0F35                     	;# 
  3592  0F36                     	;# 
  3593  0F37                     	;# 
  3594  0FE4                     	;# 
  3595  0FE5                     	;# 
  3596  0FE6                     	;# 
  3597  0FE7                     	;# 
  3598  0FE8                     	;# 
  3599  0FE9                     	;# 
  3600  0FEA                     	;# 
  3601  0FEB                     	;# 
  3602  0FED                     	;# 
  3603  0FEE                     	;# 
  3604  0FEF                     	;# 
  3605  0000                     	;# 
  3606  0001                     	;# 
  3607  0002                     	;# 
  3608  0003                     	;# 
  3609  0004                     	;# 
  3610  0005                     	;# 
  3611  0006                     	;# 
  3612  0007                     	;# 
  3613  0008                     	;# 
  3614  0009                     	;# 
  3615  000A                     	;# 
  3616  000B                     	;# 
  3617  000C                     	;# 
  3618  000D                     	;# 
  3619  000E                     	;# 
  3620  0010                     	;# 
  3621  0011                     	;# 
  3622  0012                     	;# 
  3623  0013                     	;# 
  3624  0014                     	;# 
  3625  0015                     	;# 
  3626  0015                     	;# 
  3627  0016                     	;# 
  3628  0016                     	;# 
  3629  0017                     	;# 
  3630  0018                     	;# 
  3631  0019                     	;# 
  3632  0019                     	;# 
  3633  001A                     	;# 
  3634  001B                     	;# 
  3635  001C                     	;# 
  3636  001D                     	;# 
  3637  001E                     	;# 
  3638  001F                     	;# 
  3639  008C                     	;# 
  3640  008D                     	;# 
  3641  008E                     	;# 
  3642  0090                     	;# 
  3643  0091                     	;# 
  3644  0092                     	;# 
  3645  0093                     	;# 
  3646  0094                     	;# 
  3647  0097                     	;# 
  3648  009B                     	;# 
  3649  009B                     	;# 
  3650  009C                     	;# 
  3651  009D                     	;# 
  3652  009E                     	;# 
  3653  009F                     	;# 
  3654  010C                     	;# 
  3655  010D                     	;# 
  3656  010E                     	;# 
  3657  0111                     	;# 
  3658  0112                     	;# 
  3659  0113                     	;# 
  3660  0114                     	;# 
  3661  0115                     	;# 
  3662  0116                     	;# 
  3663  0117                     	;# 
  3664  0118                     	;# 
  3665  0119                     	;# 
  3666  018C                     	;# 
  3667  018D                     	;# 
  3668  018E                     	;# 
  3669  0197                     	;# 
  3670  0199                     	;# 
  3671  0199                     	;# 
  3672  0199                     	;# 
  3673  019A                     	;# 
  3674  019A                     	;# 
  3675  019A                     	;# 
  3676  019B                     	;# 
  3677  019B                     	;# 
  3678  019B                     	;# 
  3679  019B                     	;# 
  3680  019B                     	;# 
  3681  019C                     	;# 
  3682  019C                     	;# 
  3683  019C                     	;# 
  3684  019D                     	;# 
  3685  019D                     	;# 
  3686  019D                     	;# 
  3687  019E                     	;# 
  3688  019E                     	;# 
  3689  019E                     	;# 
  3690  019F                     	;# 
  3691  019F                     	;# 
  3692  019F                     	;# 
  3693  019F                     	;# 
  3694  019F                     	;# 
  3695  020C                     	;# 
  3696  020D                     	;# 
  3697  020E                     	;# 
  3698  0211                     	;# 
  3699  0211                     	;# 
  3700  0212                     	;# 
  3701  0212                     	;# 
  3702  0213                     	;# 
  3703  0213                     	;# 
  3704  0214                     	;# 
  3705  0214                     	;# 
  3706  0215                     	;# 
  3707  0215                     	;# 
  3708  0215                     	;# 
  3709  0215                     	;# 
  3710  0216                     	;# 
  3711  0216                     	;# 
  3712  0217                     	;# 
  3713  0217                     	;# 
  3714  0219                     	;# 
  3715  021A                     	;# 
  3716  021B                     	;# 
  3717  021C                     	;# 
  3718  021D                     	;# 
  3719  021D                     	;# 
  3720  021E                     	;# 
  3721  021F                     	;# 
  3722  028C                     	;# 
  3723  028D                     	;# 
  3724  028E                     	;# 
  3725  0291                     	;# 
  3726  0291                     	;# 
  3727  0292                     	;# 
  3728  0293                     	;# 
  3729  0294                     	;# 
  3730  0295                     	;# 
  3731  0295                     	;# 
  3732  0296                     	;# 
  3733  0297                     	;# 
  3734  0298                     	;# 
  3735  029F                     	;# 
  3736  030C                     	;# 
  3737  030D                     	;# 
  3738  030E                     	;# 
  3739  0311                     	;# 
  3740  0311                     	;# 
  3741  0312                     	;# 
  3742  0313                     	;# 
  3743  0314                     	;# 
  3744  0315                     	;# 
  3745  0315                     	;# 
  3746  0316                     	;# 
  3747  0317                     	;# 
  3748  0318                     	;# 
  3749  038C                     	;# 
  3750  038D                     	;# 
  3751  038E                     	;# 
  3752  0391                     	;# 
  3753  0392                     	;# 
  3754  0393                     	;# 
  3755  0394                     	;# 
  3756  0395                     	;# 
  3757  0396                     	;# 
  3758  0397                     	;# 
  3759  0398                     	;# 
  3760  0399                     	;# 
  3761  039A                     	;# 
  3762  039C                     	;# 
  3763  039D                     	;# 
  3764  039E                     	;# 
  3765  039F                     	;# 
  3766  0411                     	;# 
  3767  0411                     	;# 
  3768  0412                     	;# 
  3769  0413                     	;# 
  3770  0414                     	;# 
  3771  0415                     	;# 
  3772  0416                     	;# 
  3773  0417                     	;# 
  3774  0418                     	;# 
  3775  0418                     	;# 
  3776  0419                     	;# 
  3777  041A                     	;# 
  3778  041B                     	;# 
  3779  041C                     	;# 
  3780  041D                     	;# 
  3781  041E                     	;# 
  3782  041F                     	;# 
  3783  0498                     	;# 
  3784  0498                     	;# 
  3785  0499                     	;# 
  3786  049A                     	;# 
  3787  049B                     	;# 
  3788  049B                     	;# 
  3789  049C                     	;# 
  3790  049D                     	;# 
  3791  049E                     	;# 
  3792  049F                     	;# 
  3793  0617                     	;# 
  3794  0618                     	;# 
  3795  0619                     	;# 
  3796  0619                     	;# 
  3797  061A                     	;# 
  3798  061B                     	;# 
  3799  061C                     	;# 
  3800  061C                     	;# 
  3801  061F                     	;# 
  3802  0691                     	;# 
  3803  0692                     	;# 
  3804  0693                     	;# 
  3805  0694                     	;# 
  3806  0695                     	;# 
  3807  0696                     	;# 
  3808  0697                     	;# 
  3809  0698                     	;# 
  3810  0699                     	;# 
  3811  0711                     	;# 
  3812  0712                     	;# 
  3813  0713                     	;# 
  3814  0714                     	;# 
  3815  0715                     	;# 
  3816  0716                     	;# 
  3817  0717                     	;# 
  3818  0718                     	;# 
  3819  0719                     	;# 
  3820  0891                     	;# 
  3821  0891                     	;# 
  3822  0891                     	;# 
  3823  0891                     	;# 
  3824  0891                     	;# 
  3825  0891                     	;# 
  3826  0892                     	;# 
  3827  0892                     	;# 
  3828  0892                     	;# 
  3829  0893                     	;# 
  3830  0893                     	;# 
  3831  0893                     	;# 
  3832  0893                     	;# 
  3833  0893                     	;# 
  3834  0893                     	;# 
  3835  0894                     	;# 
  3836  0894                     	;# 
  3837  0894                     	;# 
  3838  0895                     	;# 
  3839  0895                     	;# 
  3840  0895                     	;# 
  3841  0896                     	;# 
  3842  0896                     	;# 
  3843  0896                     	;# 
  3844  089B                     	;# 
  3845  0911                     	;# 
  3846  0912                     	;# 
  3847  0913                     	;# 
  3848  0914                     	;# 
  3849  0915                     	;# 
  3850  0916                     	;# 
  3851  0918                     	;# 
  3852  0919                     	;# 
  3853  091A                     	;# 
  3854  091B                     	;# 
  3855  091C                     	;# 
  3856  091D                     	;# 
  3857  091E                     	;# 
  3858  091F                     	;# 
  3859  0E0F                     	;# 
  3860  0E10                     	;# 
  3861  0E11                     	;# 
  3862  0E12                     	;# 
  3863  0E13                     	;# 
  3864  0E14                     	;# 
  3865  0E15                     	;# 
  3866  0E16                     	;# 
  3867  0E17                     	;# 
  3868  0E18                     	;# 
  3869  0E19                     	;# 
  3870  0E1A                     	;# 
  3871  0E1B                     	;# 
  3872  0E1C                     	;# 
  3873  0E1D                     	;# 
  3874  0E1E                     	;# 
  3875  0E1F                     	;# 
  3876  0E20                     	;# 
  3877  0E21                     	;# 
  3878  0E22                     	;# 
  3879  0E24                     	;# 
  3880  0E25                     	;# 
  3881  0E28                     	;# 
  3882  0E29                     	;# 
  3883  0E2A                     	;# 
  3884  0E2B                     	;# 
  3885  0E2C                     	;# 
  3886  0E2D                     	;# 
  3887  0E2E                     	;# 
  3888  0E2F                     	;# 
  3889  0E90                     	;# 
  3890  0E91                     	;# 
  3891  0E92                     	;# 
  3892  0E94                     	;# 
  3893  0E95                     	;# 
  3894  0E9C                     	;# 
  3895  0E9D                     	;# 
  3896  0E9E                     	;# 
  3897  0E9F                     	;# 
  3898  0EA0                     	;# 
  3899  0EA1                     	;# 
  3900  0EA2                     	;# 
  3901  0EA3                     	;# 
  3902  0EA4                     	;# 
  3903  0EA5                     	;# 
  3904  0EA6                     	;# 
  3905  0EA7                     	;# 
  3906  0F0F                     	;# 
  3907  0F10                     	;# 
  3908  0F11                     	;# 
  3909  0F12                     	;# 
  3910  0F13                     	;# 
  3911  0F14                     	;# 
  3912  0F15                     	;# 
  3913  0F16                     	;# 
  3914  0F17                     	;# 
  3915  0F18                     	;# 
  3916  0F19                     	;# 
  3917  0F1A                     	;# 
  3918  0F1B                     	;# 
  3919  0F1C                     	;# 
  3920  0F1D                     	;# 
  3921  0F1E                     	;# 
  3922  0F1F                     	;# 
  3923  0F20                     	;# 
  3924  0F21                     	;# 
  3925  0F22                     	;# 
  3926  0F23                     	;# 
  3927  0F24                     	;# 
  3928  0F25                     	;# 
  3929  0F26                     	;# 
  3930  0F27                     	;# 
  3931  0F28                     	;# 
  3932  0F29                     	;# 
  3933  0F2A                     	;# 
  3934  0F2B                     	;# 
  3935  0F2C                     	;# 
  3936  0F2D                     	;# 
  3937  0F2E                     	;# 
  3938  0F2F                     	;# 
  3939  0F30                     	;# 
  3940  0F31                     	;# 
  3941  0F32                     	;# 
  3942  0F33                     	;# 
  3943  0F34                     	;# 
  3944  0F35                     	;# 
  3945  0F36                     	;# 
  3946  0F37                     	;# 
  3947  0FE4                     	;# 
  3948  0FE5                     	;# 
  3949  0FE6                     	;# 
  3950  0FE7                     	;# 
  3951  0FE8                     	;# 
  3952  0FE9                     	;# 
  3953  0FEA                     	;# 
  3954  0FEB                     	;# 
  3955  0FED                     	;# 
  3956  0FEE                     	;# 
  3957  0FEF                     	;# 
  3958  0000                     	;# 
  3959  0001                     	;# 
  3960  0002                     	;# 
  3961  0003                     	;# 
  3962  0004                     	;# 
  3963  0005                     	;# 
  3964  0006                     	;# 
  3965  0007                     	;# 
  3966  0008                     	;# 
  3967  0009                     	;# 
  3968  000A                     	;# 
  3969  000B                     	;# 
  3970  000C                     	;# 
  3971  000D                     	;# 
  3972  000E                     	;# 
  3973  0010                     	;# 
  3974  0011                     	;# 
  3975  0012                     	;# 
  3976  0013                     	;# 
  3977  0014                     	;# 
  3978  0015                     	;# 
  3979  0015                     	;# 
  3980  0016                     	;# 
  3981  0016                     	;# 
  3982  0017                     	;# 
  3983  0018                     	;# 
  3984  0019                     	;# 
  3985  0019                     	;# 
  3986  001A                     	;# 
  3987  001B                     	;# 
  3988  001C                     	;# 
  3989  001D                     	;# 
  3990  001E                     	;# 
  3991  001F                     	;# 
  3992  008C                     	;# 
  3993  008D                     	;# 
  3994  008E                     	;# 
  3995  0090                     	;# 
  3996  0091                     	;# 
  3997  0092                     	;# 
  3998  0093                     	;# 
  3999  0094                     	;# 
  4000  0097                     	;# 
  4001  009B                     	;# 
  4002  009B                     	;# 
  4003  009C                     	;# 
  4004  009D                     	;# 
  4005  009E                     	;# 
  4006  009F                     	;# 
  4007  010C                     	;# 
  4008  010D                     	;# 
  4009  010E                     	;# 
  4010  0111                     	;# 
  4011  0112                     	;# 
  4012  0113                     	;# 
  4013  0114                     	;# 
  4014  0115                     	;# 
  4015  0116                     	;# 
  4016  0117                     	;# 
  4017  0118                     	;# 
  4018  0119                     	;# 
  4019  018C                     	;# 
  4020  018D                     	;# 
  4021  018E                     	;# 
  4022  0197                     	;# 
  4023  0199                     	;# 
  4024  0199                     	;# 
  4025  0199                     	;# 
  4026  019A                     	;# 
  4027  019A                     	;# 
  4028  019A                     	;# 
  4029  019B                     	;# 
  4030  019B                     	;# 
  4031  019B                     	;# 
  4032  019B                     	;# 
  4033  019B                     	;# 
  4034  019C                     	;# 
  4035  019C                     	;# 
  4036  019C                     	;# 
  4037  019D                     	;# 
  4038  019D                     	;# 
  4039  019D                     	;# 
  4040  019E                     	;# 
  4041  019E                     	;# 
  4042  019E                     	;# 
  4043  019F                     	;# 
  4044  019F                     	;# 
  4045  019F                     	;# 
  4046  019F                     	;# 
  4047  019F                     	;# 
  4048  020C                     	;# 
  4049  020D                     	;# 
  4050  020E                     	;# 
  4051  0211                     	;# 
  4052  0211                     	;# 
  4053  0212                     	;# 
  4054  0212                     	;# 
  4055  0213                     	;# 
  4056  0213                     	;# 
  4057  0214                     	;# 
  4058  0214                     	;# 
  4059  0215                     	;# 
  4060  0215                     	;# 
  4061  0215                     	;# 
  4062  0215                     	;# 
  4063  0216                     	;# 
  4064  0216                     	;# 
  4065  0217                     	;# 
  4066  0217                     	;# 
  4067  0219                     	;# 
  4068  021A                     	;# 
  4069  021B                     	;# 
  4070  021C                     	;# 
  4071  021D                     	;# 
  4072  021D                     	;# 
  4073  021E                     	;# 
  4074  021F                     	;# 
  4075  028C                     	;# 
  4076  028D                     	;# 
  4077  028E                     	;# 
  4078  0291                     	;# 
  4079  0291                     	;# 
  4080  0292                     	;# 
  4081  0293                     	;# 
  4082  0294                     	;# 
  4083  0295                     	;# 
  4084  0295                     	;# 
  4085  0296                     	;# 
  4086  0297                     	;# 
  4087  0298                     	;# 
  4088  029F                     	;# 
  4089  030C                     	;# 
  4090  030D                     	;# 
  4091  030E                     	;# 
  4092  0311                     	;# 
  4093  0311                     	;# 
  4094  0312                     	;# 
  4095  0313                     	;# 
  4096  0314                     	;# 
  4097  0315                     	;# 
  4098  0315                     	;# 
  4099  0316                     	;# 
  4100  0317                     	;# 
  4101  0318                     	;# 
  4102  038C                     	;# 
  4103  038D                     	;# 
  4104  038E                     	;# 
  4105  0391                     	;# 
  4106  0392                     	;# 
  4107  0393                     	;# 
  4108  0394                     	;# 
  4109  0395                     	;# 
  4110  0396                     	;# 
  4111  0397                     	;# 
  4112  0398                     	;# 
  4113  0399                     	;# 
  4114  039A                     	;# 
  4115  039C                     	;# 
  4116  039D                     	;# 
  4117  039E                     	;# 
  4118  039F                     	;# 
  4119  0411                     	;# 
  4120  0411                     	;# 
  4121  0412                     	;# 
  4122  0413                     	;# 
  4123  0414                     	;# 
  4124  0415                     	;# 
  4125  0416                     	;# 
  4126  0417                     	;# 
  4127  0418                     	;# 
  4128  0418                     	;# 
  4129  0419                     	;# 
  4130  041A                     	;# 
  4131  041B                     	;# 
  4132  041C                     	;# 
  4133  041D                     	;# 
  4134  041E                     	;# 
  4135  041F                     	;# 
  4136  0498                     	;# 
  4137  0498                     	;# 
  4138  0499                     	;# 
  4139  049A                     	;# 
  4140  049B                     	;# 
  4141  049B                     	;# 
  4142  049C                     	;# 
  4143  049D                     	;# 
  4144  049E                     	;# 
  4145  049F                     	;# 
  4146  0617                     	;# 
  4147  0618                     	;# 
  4148  0619                     	;# 
  4149  0619                     	;# 
  4150  061A                     	;# 
  4151  061B                     	;# 
  4152  061C                     	;# 
  4153  061C                     	;# 
  4154  061F                     	;# 
  4155  0691                     	;# 
  4156  0692                     	;# 
  4157  0693                     	;# 
  4158  0694                     	;# 
  4159  0695                     	;# 
  4160  0696                     	;# 
  4161  0697                     	;# 
  4162  0698                     	;# 
  4163  0699                     	;# 
  4164  0711                     	;# 
  4165  0712                     	;# 
  4166  0713                     	;# 
  4167  0714                     	;# 
  4168  0715                     	;# 
  4169  0716                     	;# 
  4170  0717                     	;# 
  4171  0718                     	;# 
  4172  0719                     	;# 
  4173  0891                     	;# 
  4174  0891                     	;# 
  4175  0891                     	;# 
  4176  0891                     	;# 
  4177  0891                     	;# 
  4178  0891                     	;# 
  4179  0892                     	;# 
  4180  0892                     	;# 
  4181  0892                     	;# 
  4182  0893                     	;# 
  4183  0893                     	;# 
  4184  0893                     	;# 
  4185  0893                     	;# 
  4186  0893                     	;# 
  4187  0893                     	;# 
  4188  0894                     	;# 
  4189  0894                     	;# 
  4190  0894                     	;# 
  4191  0895                     	;# 
  4192  0895                     	;# 
  4193  0895                     	;# 
  4194  0896                     	;# 
  4195  0896                     	;# 
  4196  0896                     	;# 
  4197  089B                     	;# 
  4198  0911                     	;# 
  4199  0912                     	;# 
  4200  0913                     	;# 
  4201  0914                     	;# 
  4202  0915                     	;# 
  4203  0916                     	;# 
  4204  0918                     	;# 
  4205  0919                     	;# 
  4206  091A                     	;# 
  4207  091B                     	;# 
  4208  091C                     	;# 
  4209  091D                     	;# 
  4210  091E                     	;# 
  4211  091F                     	;# 
  4212  0E0F                     	;# 
  4213  0E10                     	;# 
  4214  0E11                     	;# 
  4215  0E12                     	;# 
  4216  0E13                     	;# 
  4217  0E14                     	;# 
  4218  0E15                     	;# 
  4219  0E16                     	;# 
  4220  0E17                     	;# 
  4221  0E18                     	;# 
  4222  0E19                     	;# 
  4223  0E1A                     	;# 
  4224  0E1B                     	;# 
  4225  0E1C                     	;# 
  4226  0E1D                     	;# 
  4227  0E1E                     	;# 
  4228  0E1F                     	;# 
  4229  0E20                     	;# 
  4230  0E21                     	;# 
  4231  0E22                     	;# 
  4232  0E24                     	;# 
  4233  0E25                     	;# 
  4234  0E28                     	;# 
  4235  0E29                     	;# 
  4236  0E2A                     	;# 
  4237  0E2B                     	;# 
  4238  0E2C                     	;# 
  4239  0E2D                     	;# 
  4240  0E2E                     	;# 
  4241  0E2F                     	;# 
  4242  0E90                     	;# 
  4243  0E91                     	;# 
  4244  0E92                     	;# 
  4245  0E94                     	;# 
  4246  0E95                     	;# 
  4247  0E9C                     	;# 
  4248  0E9D                     	;# 
  4249  0E9E                     	;# 
  4250  0E9F                     	;# 
  4251  0EA0                     	;# 
  4252  0EA1                     	;# 
  4253  0EA2                     	;# 
  4254  0EA3                     	;# 
  4255  0EA4                     	;# 
  4256  0EA5                     	;# 
  4257  0EA6                     	;# 
  4258  0EA7                     	;# 
  4259  0F0F                     	;# 
  4260  0F10                     	;# 
  4261  0F11                     	;# 
  4262  0F12                     	;# 
  4263  0F13                     	;# 
  4264  0F14                     	;# 
  4265  0F15                     	;# 
  4266  0F16                     	;# 
  4267  0F17                     	;# 
  4268  0F18                     	;# 
  4269  0F19                     	;# 
  4270  0F1A                     	;# 
  4271  0F1B                     	;# 
  4272  0F1C                     	;# 
  4273  0F1D                     	;# 
  4274  0F1E                     	;# 
  4275  0F1F                     	;# 
  4276  0F20                     	;# 
  4277  0F21                     	;# 
  4278  0F22                     	;# 
  4279  0F23                     	;# 
  4280  0F24                     	;# 
  4281  0F25                     	;# 
  4282  0F26                     	;# 
  4283  0F27                     	;# 
  4284  0F28                     	;# 
  4285  0F29                     	;# 
  4286  0F2A                     	;# 
  4287  0F2B                     	;# 
  4288  0F2C                     	;# 
  4289  0F2D                     	;# 
  4290  0F2E                     	;# 
  4291  0F2F                     	;# 
  4292  0F30                     	;# 
  4293  0F31                     	;# 
  4294  0F32                     	;# 
  4295  0F33                     	;# 
  4296  0F34                     	;# 
  4297  0F35                     	;# 
  4298  0F36                     	;# 
  4299  0F37                     	;# 
  4300  0FE4                     	;# 
  4301  0FE5                     	;# 
  4302  0FE6                     	;# 
  4303  0FE7                     	;# 
  4304  0FE8                     	;# 
  4305  0FE9                     	;# 
  4306  0FEA                     	;# 
  4307  0FEB                     	;# 
  4308  0FED                     	;# 
  4309  0FEE                     	;# 
  4310  0FEF                     	;_gLedPara
  4311                           
  4312                           	psect	idataBANK1
  4313  07D6                     __pidataBANK1:	
  4314                           
  4315                           ;initializer for Led_DynamicCloud@F8373
  4316  07D6  34C8               	retlw	200
  4317  07D7  3400               	retlw	0
  4318  07D8  34C8               	retlw	200
  4319  07D9  3400               	retlw	0
  4320  07DA  3490               	retlw	144
  4321  07DB  3401               	retlw	1
  4322  07DC  3440               	retlw	64
  4323  07DD  3401               	retlw	1
  4324  07DE  3490               	retlw	144
  4325  07DF  3401               	retlw	1
  4326                           
  4327                           ;initializer for Led_DynamicMoon@F8363
  4328  07E0  3400               	retlw	0
  4329  07E1  3400               	retlw	0
  4330  07E2  3400               	retlw	0
  4331  07E3  3400               	retlw	0
  4332  07E4  34E8               	retlw	232
  4333  07E5  3403               	retlw	3
  4334  07E6  34C8               	retlw	200
  4335  07E7  3400               	retlw	0
  4336  07E8  3400               	retlw	0
  4337  07E9  3400               	retlw	0
  4338                           
  4339                           ;initializer for Led_DynamicWave@F8353
  4340  07EA  34F4               	retlw	244
  4341  07EB  3401               	retlw	1
  4342  07EC  34F4               	retlw	244
  4343  07ED  3401               	retlw	1
  4344  07EE  34F4               	retlw	244
  4345  07EF  3401               	retlw	1
  4346  07F0  34C8               	retlw	200
  4347  07F1  3400               	retlw	0
  4348  07F2  34F4               	retlw	244
  4349  07F3  3401               	retlw	1
  4350                           
  4351                           ;initializer for _loadDuty
  4352  07F4  3407               	retlw	low _PWM5_LoadDutyValue
  4353  07F5  3408               	retlw	high _PWM5_LoadDutyValue
  4354  07F6  345A               	retlw	low _PWM2_LoadDutyValue
  4355  07F7  3411               	retlw	high _PWM2_LoadDutyValue
  4356  07F8  347E               	retlw	low _PWM4_LoadDutyValue
  4357  07F9  3411               	retlw	high _PWM4_LoadDutyValue
  4358  07FA  346C               	retlw	low _PWM3_LoadDutyValue
  4359  07FB  3411               	retlw	high _PWM3_LoadDutyValue
  4360  07FC  3448               	retlw	low _PWM1_LoadDutyValue
  4361  07FD  3411               	retlw	high _PWM1_LoadDutyValue
  4362                           
  4363                           	psect	idataBANK2
  4364  10F6                     __pidataBANK2:	
  4365                           
  4366                           ;initializer for Led_DynamicStorm@F8383
  4367  10F6  3400               	retlw	0
  4368  10F7  3400               	retlw	0
  4369  10F8  3400               	retlw	0
  4370  10F9  3400               	retlw	0
  4371  10FA  3458               	retlw	88
  4372  10FB  3402               	retlw	2
  4373  10FC  3440               	retlw	64
  4374  10FD  3400               	retlw	0
  4375  10FE  3400               	retlw	0
  4376  10FF  3400               	retlw	0
  4377                           
  4378                           	psect	stringtext
  4379  1800                     __pstringtext:	
  4380  1800                     _GAIN:	
  4381  1800  3407               	retlw	7
  4382  1801  3405               	retlw	5
  4383  1802  3403               	retlw	3
  4384  1803  3401               	retlw	1
  4385  1804  3400               	retlw	0
  4386  1805                     __end_of_GAIN:	
  4387  1805                     _VOLUME:	
  4388  1805  340E               	retlw	14
  4389  1806  3411               	retlw	17
  4390  1807  3414               	retlw	20
  4391  1808  3417               	retlw	23
  4392  1809  341A               	retlw	26
  4393  180A                     __end_of_VOLUME:	
  4394                           
  4395                           	psect	nvBANK0
  4396  0060                     __pnvBANK0:	
  4397  0060                     _txRemain:	
  4398  0060                     	ds	1
  4399                           
  4400                           	psect	nvBANK1
  4401  00E2                     __pnvBANK1:	
  4402  00E2                     _tmr4_isr_handler:	
  4403  00E2                     	ds	2
  4404  00E4                     _tmr2_isr_handler:	
  4405  00E4                     	ds	2
  4406  00E6                     _tmr1_gate_isr_handler:	
  4407  00E6                     	ds	2
  4408  00E8                     _tmr0_isr_handler:	
  4409  00E8                     	ds	2
  4410  0019                     _TMR1	set	25
  4411  0012                     _PIR2bits	set	18
  4412  001F                     _T2CONbits	set	31
  4413  001D                     _TMR2	set	29
  4414  001E                     _PR2	set	30
  4415  001F                     _T2CON	set	31
  4416  001B                     _T1CONbits	set	27
  4417  001C                     _T1GCON	set	28
  4418  001B                     _T1CON	set	27
  4419  0017                     _T0CON0bits	set	23
  4420  0010                     _PIR0bits	set	16
  4421  0015                     _TMR0L	set	21
  4422  0016                     _TMR0H	set	22
  4423  0018                     _T0CON1	set	24
  4424  0017                     _T0CON0	set	23
  4425  000B                     _INTCONbits	set	11
  4426  0011                     _PIR1bits	set	17
  4427  005F                     _GIE	set	95
  4428  009B                     _ADRES	set	155
  4429  008E                     _TRISC	set	142
  4430  008D                     _TRISB	set	141
  4431  008C                     _TRISA	set	140
  4432  0092                     _PIE2bits	set	146
  4433  0090                     _PIE0bits	set	144
  4434  0091                     _PIE1bits	set	145
  4435  009D                     _ADCON0bits	set	157
  4436  009B                     _ADRESL	set	155
  4437  009C                     _ADRESH	set	156
  4438  009F                     _ADACT	set	159
  4439  009E                     _ADCON1	set	158
  4440  009D                     _ADCON0	set	157
  4441  010E                     _LATC	set	270
  4442  010D                     _LATB	set	269
  4443  010C                     _LATA	set	268
  4444  019B                     _SP1BRG	set	411
  4445  018C                     _ANSELA	set	396
  4446  018D                     _ANSELB	set	397
  4447  018E                     _ANSELC	set	398
  4448  019A                     _TXREG	set	410
  4449  019E                     _TX1STA	set	414
  4450  019D                     _RC1STA	set	413
  4451  019F                     _BAUD1CON	set	415
  4452  020E                     _WPUC	set	526
  4453  020C                     _WPUA	set	524
  4454  020D                     _WPUB	set	525
  4455  0295                     _CCPR2	set	661
  4456  0291                     _CCPR1	set	657
  4457  028E                     _ODCONC	set	654
  4458  028D                     _ODCONB	set	653
  4459  028C                     _ODCONA	set	652
  4460  0297                     _CCP2CON	set	663
  4461  029F                     _CCPTMRSbits	set	671
  4462  0293                     _CCP1CON	set	659
  4463  0315                     _CCPR4	set	789
  4464  0311                     _CCPR3	set	785
  4465  0317                     _CCP4CON	set	791
  4466  0313                     _CCP3CON	set	787
  4467  0417                     _T4CONbits	set	1047
  4468  0415                     _TMR4	set	1045
  4469  0416                     _PR4	set	1046
  4470  0417                     _T4CON	set	1047
  4471  0617                     _PWM5DC	set	1559
  4472  061F                     _PWMTMRSbits	set	1567
  4473  0619                     _PWM5CON	set	1561
  4474  0896                     _NVMCON2	set	2198
  4475  0895                     _NVMCON1bits	set	2197
  4476  0893                     _NVMDATL	set	2195
  4477  0891                     _NVMADRL	set	2193
  4478  0892                     _NVMADRH	set	2194
  4479  091E                     _OSCTUNE	set	2334
  4480  091F                     _OSCFRQ	set	2335
  4481  091D                     _OSCEN	set	2333
  4482  091B                     _OSCCON3	set	2331
  4483  0919                     _OSCCON1	set	2329
  4484  0E13                     _T1GPPSbits	set	3603
  4485  0E0F                     _PPSLOCKbits	set	3599
  4486  0E0F                     _PPSLOCK	set	3599
  4487  0E9F                     _RB7PPSbits	set	3743
  4488  0EA7                     _RC7PPSbits	set	3751
  4489  0EA1                     _RC1PPSbits	set	3745
  4490  0E92                     _RA2PPSbits	set	3730
  4491  0EA3                     _RC3PPSbits	set	3747
  4492  0EA5                     _RC5PPSbits	set	3749
  4493                           
  4494                           ; #config settings
  4495  0000                     
  4496                           	psect	cinit
  4497  082B                     start_initialization:	
  4498  082B                     __initialization:		;BIGRAM
  4499                           
  4500                           ; Initialize objects allocated to BANK1
  4501  082B  30D6               	movlw	low __pidataBANK1
  4502  082C  0084               	movwf	4
  4503  082D  3087               	movlw	(high __pidataBANK1)| (0+128)
  4504  082E  0085               	movwf	5
  4505  082F  30A0               	movlw	low __pdataBANK1
  4506  0830  0086               	movwf	6
  4507  0831  3000               	movlw	high __pdataBANK1
  4508  0832  0087               	movwf	7
  4509  0833  3000               	movlw	0
  4510  0834  00FF               	movwf	127
  4511  0835  3028               	movlw	40
  4512  0836  3191  213C  3188   	fcall	init_ram
  4513                           
  4514                           ; Initialize objects allocated to BANK2
  4515  0839  30F6               	movlw	low __pidataBANK2
  4516  083A  0084               	movwf	4
  4517  083B  3090               	movlw	(high __pidataBANK2)| (0+128)
  4518  083C  0085               	movwf	5
  4519  083D  3054               	movlw	low __pdataBANK2
  4520  083E  0086               	movwf	6
  4521  083F  3001               	movlw	high __pdataBANK2
  4522  0840  0087               	movwf	7
  4523  0841  3000               	movlw	0
  4524  0842  00FF               	movwf	127
  4525  0843  300A               	movlw	10
  4526  0844  3191  213C  3188   	fcall	init_ram
  4527                           
  4528                           ; Clear objects allocated to BIGRAM
  4529  0847  307B               	movlw	123
  4530  0848  0084               	movwf	4
  4531  0849  3023               	movlw	35
  4532  084A  0085               	movwf	5
  4533  084B  3075               	movlw	117
  4534  084C  00FE               	movwf	126
  4535  084D  3000               	movlw	0
  4536  084E  00FF               	movwf	127
  4537  084F  3191  2130  3188   	fcall	clear_ram0
  4538                           
  4539                           ; Clear objects allocated to BANK0
  4540  0852  3020               	movlw	low __pbssBANK0
  4541  0853  0084               	movwf	4
  4542  0854  3000               	movlw	high __pbssBANK0
  4543  0855  0085               	movwf	5
  4544  0856  3020               	movlw	32
  4545  0857  00FE               	movwf	126
  4546  0858  3000               	movlw	0
  4547  0859  00FF               	movwf	127
  4548  085A  3191  2130  3188   	fcall	clear_ram0
  4549                           
  4550                           ; Clear objects allocated to BANK1
  4551  085D  30C8               	movlw	low __pbssBANK1
  4552  085E  0084               	movwf	4
  4553  085F  3000               	movlw	high __pbssBANK1
  4554  0860  0085               	movwf	5
  4555  0861  301A               	movlw	26
  4556  0862  00FE               	movwf	126
  4557  0863  3000               	movlw	0
  4558  0864  00FF               	movwf	127
  4559  0865  3191  2130  3188   	fcall	clear_ram0
  4560                           
  4561                           ; Clear objects allocated to BANK2
  4562  0868  3020               	movlw	low __pbssBANK2
  4563  0869  0084               	movwf	4
  4564  086A  3001               	movlw	high __pbssBANK2
  4565  086B  0085               	movwf	5
  4566  086C  3020               	movlw	32
  4567  086D  00FE               	movwf	126
  4568  086E  3000               	movlw	0
  4569  086F  00FF               	movwf	127
  4570  0870  3191  2130  3188   	fcall	clear_ram0
  4571  0873                     end_of_initialization:	
  4572                           ;End of C runtime variable initialization code
  4573                           
  4574  0873                     __end_of__initialization:	
  4575  0873  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4576  0874  0020               	movlb	0
  4577  0875  2876               	ljmp	_main	;jump to C main() function
  4578  0876                     __pmaintext:	
  4579                           ; 1 bytes @ 0x20
  4580 ;;
  4581 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4582 ;;
  4583 ;; *************** function _main *****************
  4584 ;; Defined at:
  4585 ;;		line 37 in file "user/src/main.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;		None
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  1    wreg      void 
  4592 ;; Registers used:
  4593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4594 ;; Tracked objects:
  4595 ;;		On entry : B1F/0
  4596 ;;		On exit  : 1E/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4603 ;;Total ram usage:        0 bytes
  4604 ;; Hardware stack levels required when called:   13
  4605 ;; This function calls:
  4606 ;;		_Audio_GetValue
  4607 ;;		_Audio_Initialize
  4608 ;;		_IR_KeyAtionIfPressed
  4609 ;;		_IR_ResetIfTMR1Overflow
  4610 ;;		_IR_UpdateSetStatus
  4611 ;;		_Interrupt_Initialize
  4612 ;;		_Led_AutoRun
  4613 ;;		_Led_CheckAutoStatus
  4614 ;;		_Led_InitPara
  4615 ;;		_Led_Initialize
  4616 ;;		_Led_SaveParaIfChanged
  4617 ;;		_RTC_HourReady
  4618 ;;		_RTC_MinuteReady
  4619 ;;		_RTC_SecondReady
  4620 ;;		_SYSTEM_Initialize
  4621 ;;		_TMR0_StartTimer
  4622 ;;		_TMR1_StartTimer
  4623 ;;		_TMR2_StartTimer
  4624 ;; This function is called by:
  4625 ;;		Startup code after reset
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           
  4630                           ;psect for function _main
  4631  0876                     _main:	
  4632                           
  4633                           ;main.c: 38: SYSTEM_Initialize();
  4634                           
  4635                           ;incstack = 0
  4636                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4637  0876  2310  3188         	fcall	_SYSTEM_Initialize
  4638                           
  4639                           ;main.c: 39: Interrupt_Initialize();
  4640  0878  22C7  3188         	fcall	_Interrupt_Initialize
  4641                           
  4642                           ;main.c: 40: (INTCONbits.GIE = 1);
  4643  087A  178B               	bsf	11,7	;volatile
  4644                           
  4645                           ;main.c: 41: (INTCONbits.PEIE = 1);
  4646  087B  170B               	bsf	11,6	;volatile
  4647                           
  4648                           ;main.c: 42: Led_InitPara();
  4649  087C  2342  3188         	fcall	_Led_InitPara
  4650                           
  4651                           ;main.c: 43: Audio_Initialize();
  4652  087E  213A  3188         	fcall	_Audio_Initialize
  4653                           
  4654                           ;main.c: 44: Led_Initialize();
  4655  0880  2187  3188         	fcall	_Led_Initialize
  4656                           
  4657                           ;main.c: 45: TMR0_StartTimer();
  4658  0882  25B4  3188         	fcall	_TMR0_StartTimer
  4659                           
  4660                           ;main.c: 46: TMR1_StartTimer();
  4661  0884  2277  3188         	fcall	_TMR1_StartTimer
  4662                           
  4663                           ;main.c: 47: TMR2_StartTimer();
  4664  0886  25B7               	fcall	_TMR2_StartTimer
  4665  0887                     l507:	
  4666                           ;main.c: 49: while (1) {
  4667                           
  4668  0887  0064               	clrwdt	;# 
  4669                           
  4670                           ;main.c: 52: if (!gLedPara.mAuto && gLedPara.mOn && gLedPara.mDyn) {
  4671  0888  3187  277C  3188   	fcall	PL110	;call to abstracted procedure
  4672  088B  1801               	btfsc	1,0
  4673  088C  2899               	goto	l7221
  4674  088D  307B               	movlw	123
  4675  088E  0086               	movwf	6
  4676  088F  3023               	movlw	35
  4677  0890  1C81               	btfss	1,1
  4678  0891  2899               	goto	l7221
  4679  0892  307B               	movlw	123
  4680  0893  0086               	movwf	6
  4681  0894  3023               	movlw	35
  4682  0895  1F81               	btfss	1,7
  4683  0896  2899               	goto	l7221
  4684                           
  4685                           ;main.c: 53: Audio_GetValue();
  4686  0897  20C8  3188         	fcall	_Audio_GetValue
  4687  0899                     l7221:	
  4688                           
  4689                           ;main.c: 54: }
  4690                           ;main.c: 55: IR_KeyAtionIfPressed();
  4691  0899  2272  3188         	fcall	_IR_KeyAtionIfPressed
  4692                           
  4693                           ;main.c: 56: IR_ResetIfTMR1Overflow();
  4694  089B  227A  3188         	fcall	_IR_ResetIfTMR1Overflow
  4695                           
  4696                           ;main.c: 57: Led_SaveParaIfChanged();
  4697  089D  22F2  3188         	fcall	_Led_SaveParaIfChanged
  4698                           
  4699                           ;main.c: 59: if (RTC_HourReady()) {
  4700  089F  2302  3188         	fcall	_RTC_HourReady
  4701                           
  4702                           ;main.c: 60: }
  4703                           ;main.c: 61: if (RTC_MinuteReady()) {
  4704  08A1  2307  3188         	fcall	_RTC_MinuteReady
  4705  08A3  3A00               	xorlw	0
  4706  08A4  1903               	skipnz
  4707  08A5  28AD               	goto	l7233
  4708                           
  4709                           ;main.c: 62: if (gLedPara.mAuto) {
  4710  08A6  3187  277C  3188   	fcall	PL110	;call to abstracted procedure
  4711  08A9  1C01               	btfss	1,0
  4712  08AA  28AD               	goto	l7233
  4713                           
  4714                           ;main.c: 63: Led_CheckAutoStatus();
  4715  08AB  24B9  3188         	fcall	_Led_CheckAutoStatus
  4716  08AD                     l7233:	
  4717                           
  4718                           ;main.c: 64: }
  4719                           ;main.c: 65: }
  4720                           ;main.c: 66: if (RTC_SecondReady()) {
  4721  08AD  230B  3188         	fcall	_RTC_SecondReady
  4722  08AF  3A00               	xorlw	0
  4723  08B0  1903               	skipnz
  4724  08B1  2887               	goto	l507
  4725                           
  4726                           ;main.c: 67: if (gLedPara.mAuto && ir_state.mState != 4 && ir_state.mState != 5) {
  4727  08B2  3187  277C  3188   	fcall	PL110	;call to abstracted procedure
  4728  08B5  1C01               	btfss	1,0
  4729  08B6  28C5               	goto	l7243
  4730  08B7  0C36               	rrf	_ir_state,w	;volatile
  4731  08B8  0C89               	rrf	9,f
  4732  08B9  3907               	andlw	7
  4733  08BA  3A04               	xorlw	4
  4734  08BB  1903               	skipnz
  4735  08BC  28C5               	goto	l7243
  4736  08BD  0C36               	rrf	_ir_state,w	;volatile
  4737  08BE  0C89               	rrf	9,f
  4738  08BF  3907               	andlw	7
  4739  08C0  3A05               	xorlw	5
  4740  08C1  1903               	skipnz
  4741  08C2  28C5               	goto	l7243
  4742                           
  4743                           ;main.c: 68: Led_AutoRun();
  4744  08C3  2436  3188         	fcall	_Led_AutoRun
  4745  08C5                     l7243:	
  4746                           
  4747                           ;main.c: 69: }
  4748                           ;main.c: 70: IR_UpdateSetStatus();
  4749  08C5  22BB  3188         	fcall	_IR_UpdateSetStatus
  4750  08C7  2887               	goto	l507
  4751  08C8                     __end_of_main:	
  4752  08C8                     __ptext66:	
  4753 ;; *************** function _Audio_GetValue *****************
  4754 ;; Defined at:
  4755 ;;		line 61 in file "user/src/audio.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;  value           2   23[BANK0 ] unsigned int 
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		wreg, status,2, status,0, pclath, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 1F/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4771 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4772 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4773 ;;Total ram usage:        6 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    8
  4776 ;; This function calls:
  4777 ;;		_ADC_Conversion
  4778 ;;		___wmul
  4779 ;; This function is called by:
  4780 ;;		_main
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           
  4785                           ;psect for function _Audio_GetValue
  4786  08C8                     _Audio_GetValue:	
  4787                           
  4788                           ;audio.c: 63: static uint16_t max = 0;
  4789                           ;audio.c: 64: static uint16_t min = 0;
  4790                           ;audio.c: 65: static uint16_t cnt = 0;
  4791                           ;audio.c: 66: uint16_t value;
  4792                           ;audio.c: 68: value = ADC_Conversion ( 0x12 );
  4793                           
  4794                           ;incstack = 0
  4795                           ; Regs used in _Audio_GetValue: [wreg+status,2+status,0+pclath+cstack]
  4796  08C8  3012               	movlw	18
  4797  08C9  2119  3188         	fcall	_ADC_Conversion
  4798  08CB  084E               	movf	?_ADC_Conversion+1,w
  4799  08CC  00D8               	movwf	Audio_GetValue@value+1
  4800  08CD  084D               	movf	?_ADC_Conversion,w
  4801  08CE  00D7               	movwf	Audio_GetValue@value
  4802                           
  4803                           ;audio.c: 69: if ( cnt == 0 )
  4804  08CF  0824               	movf	Audio_GetValue@cnt,w
  4805  08D0  0425               	iorwf	Audio_GetValue@cnt+1,w
  4806  08D1  1D03               	btfss	3,2
  4807  08D2  28D6               	goto	l6955
  4808                           
  4809                           ;audio.c: 70: {
  4810                           ;audio.c: 71: max = value;
  4811  08D3  268E  3188         	fcall	PL168	;call to abstracted procedure
  4812  08D5  28E8               	goto	l6959
  4813  08D6                     l6955:	
  4814                           ;audio.c: 73: }
  4815                           
  4816                           ;audio.c: 72: min = value;
  4817                           
  4818                           
  4819                           ;audio.c: 74: else
  4820                           ;audio.c: 75: {
  4821                           ;audio.c: 76: if ( max < value )
  4822  08D6  0858               	movf	Audio_GetValue@value+1,w
  4823  08D7  0229               	subwf	Audio_GetValue@max+1,w
  4824  08D8  1D03               	skipz
  4825  08D9  28DC               	goto	u6225
  4826  08DA  0857               	movf	Audio_GetValue@value,w
  4827  08DB  0228               	subwf	Audio_GetValue@max,w
  4828  08DC                     u6225:	
  4829  08DC  1803               	skipnc
  4830  08DD  28E0               	goto	l343
  4831                           
  4832                           ;audio.c: 77: {
  4833                           ;audio.c: 78: max = value;
  4834  08DE  268E  3188         	fcall	PL168	;call to abstracted procedure
  4835  08E0                     l343:	
  4836                           
  4837                           ;audio.c: 79: }
  4838                           ;audio.c: 80: if ( min > value )
  4839  08E0  0827               	movf	Audio_GetValue@min+1,w
  4840  08E1  0258               	subwf	Audio_GetValue@value+1,w
  4841  08E2  1D03               	skipz
  4842  08E3  28E6               	goto	u6235
  4843  08E4  0826               	movf	Audio_GetValue@min,w
  4844  08E5  0257               	subwf	Audio_GetValue@value,w
  4845  08E6                     u6235:	
  4846  08E6  1803               	skipnc
  4847  08E7  28EC               	goto	l6961
  4848  08E8                     l6959:	
  4849                           
  4850                           ;audio.c: 81: {
  4851                           ;audio.c: 82: min = value;
  4852  08E8  0858               	movf	Audio_GetValue@value+1,w
  4853  08E9  00A7               	movwf	Audio_GetValue@min+1
  4854  08EA  0857               	movf	Audio_GetValue@value,w
  4855  08EB  00A6               	movwf	Audio_GetValue@min
  4856  08EC                     l6961:	
  4857                           
  4858                           ;audio.c: 83: }
  4859                           ;audio.c: 84: }
  4860                           ;audio.c: 85: cnt++;
  4861  08EC  0AA4               	incf	Audio_GetValue@cnt,f
  4862  08ED  1903               	skipnz
  4863  08EE  0AA5               	incf	Audio_GetValue@cnt+1,f
  4864                           
  4865                           ;audio.c: 86: if ( cnt >= 256 )
  4866  08EF  3001               	movlw	1
  4867  08F0  0225               	subwf	Audio_GetValue@cnt+1,w
  4868  08F1  3000               	movlw	0
  4869  08F2  1903               	skipnz
  4870  08F3  0224               	subwf	Audio_GetValue@cnt,w
  4871  08F4  1C03               	skipc
  4872  08F5  0008               	return
  4873                           
  4874                           ;audio.c: 87: {
  4875                           ;audio.c: 88: cnt = 0;
  4876  08F6  01A4               	clrf	Audio_GetValue@cnt
  4877  08F7  01A5               	clrf	Audio_GetValue@cnt+1
  4878                           
  4879                           ;audio.c: 89: (INTCONbits.GIE = 0);
  4880  08F8  138B               	bcf	11,7	;volatile
  4881                           
  4882                           ;audio.c: 90: audio_value = ( audio_value * 15 + max - min ) >> 4;
  4883  08F9  082B               	movf	_audio_value+1,w	;volatile
  4884  08FA  00CE               	movwf	___wmul@multiplier+1
  4885  08FB  082A               	movf	_audio_value,w	;volatile
  4886  08FC  00CD               	movwf	___wmul@multiplier
  4887  08FD  300F               	movlw	15
  4888  08FE  00CF               	movwf	___wmul@multiplicand
  4889  08FF  01D0               	clrf	___wmul@multiplicand+1
  4890  0900  3195  2562         	fcall	___wmul
  4891  0902  0826               	movf	Audio_GetValue@min,w
  4892  0903  024D               	subwf	?___wmul,w
  4893  0904  00D3               	movwf	??_Audio_GetValue
  4894  0905  0827               	movf	Audio_GetValue@min+1,w
  4895  0906  3B4E               	subwfb	?___wmul+1,w
  4896  0907  00D4               	movwf	??_Audio_GetValue+1
  4897  0908  0828               	movf	Audio_GetValue@max,w
  4898  0909  0753               	addwf	??_Audio_GetValue,w
  4899  090A  00D5               	movwf	??_Audio_GetValue+2
  4900  090B  0829               	movf	Audio_GetValue@max+1,w
  4901  090C  3D54               	addwfc	??_Audio_GetValue+1,w
  4902  090D  00D6               	movwf	??_Audio_GetValue+3
  4903  090E  0E55               	swapf	??_Audio_GetValue+2,w
  4904  090F  390F               	andlw	15
  4905  0910  00AA               	movwf	_audio_value	;volatile
  4906  0911  0E56               	swapf	??_Audio_GetValue+3,w
  4907  0912  39F0               	andlw	240
  4908  0913  04AA               	iorwf	_audio_value,f	;volatile
  4909  0914  0E56               	swapf	??_Audio_GetValue+3,w
  4910  0915  390F               	andlw	15
  4911  0916  00AB               	movwf	_audio_value+1	;volatile
  4912                           
  4913                           ;audio.c: 91: (INTCONbits.GIE = 1);
  4914  0917  178B               	bsf	11,7	;volatile
  4915  0918  0008               	return
  4916  0919                     __end_of_Audio_GetValue:	
  4917  0919                     __ptext68:	
  4918 ;; *************** function _ADC_Conversion *****************
  4919 ;; Defined at:
  4920 ;;		line 23 in file "driver/src/adc.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;  chn             1    wreg     unsigned char 
  4923 ;; Auto vars:     Size  Location     Type
  4924 ;;  chn             1   16[BANK0 ] unsigned char 
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  2   13[BANK0 ] unsigned int 
  4927 ;; Registers used:
  4928 ;;		wreg, status,2, status,0
  4929 ;; Tracked objects:
  4930 ;;		On entry : 0/0
  4931 ;;		On exit  : 1F/0
  4932 ;;		Unchanged: 0/0
  4933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4934 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4938 ;;Total ram usage:        4 bytes
  4939 ;; Hardware stack levels used:    1
  4940 ;; Hardware stack levels required when called:    7
  4941 ;; This function calls:
  4942 ;;		Nothing
  4943 ;; This function is called by:
  4944 ;;		_Audio_GetValue
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           
  4949                           ;psect for function _ADC_Conversion
  4950  0919                     _ADC_Conversion:	
  4951                           
  4952                           ;incstack = 0
  4953                           ; Regs used in _ADC_Conversion: [wreg+status,2+status,0]
  4954                           ;ADC_Conversion@chn stored from wreg
  4955  0919  0020               	movlb	0	; select bank0
  4956  091A  00D0               	movwf	ADC_Conversion@chn
  4957                           
  4958                           ;adc.c: 25: ADCON0bits.CHS = chn;
  4959  091B  00CF               	movwf	??_ADC_Conversion
  4960  091C  0DCF               	rlf	??_ADC_Conversion,f
  4961  091D  0DCF               	rlf	??_ADC_Conversion,f
  4962  091E  0021               	movlb	1	; select bank1
  4963  091F  081D               	movf	29,w	;volatile
  4964  0920  0020               	movlb	0	; select bank0
  4965  0921  064F               	xorwf	??_ADC_Conversion,w
  4966  0922  3903               	andlw	-253
  4967  0923  064F               	xorwf	??_ADC_Conversion,w
  4968  0924  0021               	movlb	1	; select bank1
  4969  0925  009D               	movwf	29	;volatile
  4970                           
  4971                           ;adc.c: 26: ADCON0bits.ADON = 1;
  4972  0926  141D               	bsf	29,0	;volatile
  4973                           
  4974                           ;adc.c: 27: _delay((unsigned long)((4)*(16000000/4000000.0)));
  4975  0927  3005               	movlw	5
  4976  0928                     u6817:	
  4977  0928  0B89               	decfsz	9,f
  4978  0929  2928               	goto	u6817
  4979  092A  0000               	nop
  4980                           
  4981                           ;adc.c: 28: ADCON0bits.GO_nDONE = 1;
  4982  092B  0021               	movlb	1	; select bank1
  4983  092C  149D               	bsf	29,1	;volatile
  4984  092D                     l26:	
  4985                           ;adc.c: 29: while ( !PIR1bits.ADIF );
  4986                           
  4987  092D  0020               	movlb	0	; select bank0
  4988  092E  1F11               	btfss	17,6	;volatile
  4989  092F  292D               	goto	l26
  4990                           
  4991                           ;adc.c: 30: PIR1bits.ADIF = 0;
  4992  0930  1311               	bcf	17,6	;volatile
  4993                           
  4994                           ;adc.c: 31: return ADRES;
  4995  0931  0021               	movlb	1	; select bank1
  4996  0932  081C               	movf	28,w	;volatile
  4997  0933  0020               	movlb	0	; select bank0
  4998  0934  00CE               	movwf	?_ADC_Conversion+1
  4999  0935  0021               	movlb	1	; select bank1
  5000  0936  081B               	movf	27,w	;volatile
  5001  0937  0020               	movlb	0	; select bank0
  5002  0938  00CD               	movwf	?_ADC_Conversion
  5003  0939  0008               	return
  5004  093A                     __end_of_ADC_Conversion:	
  5005  093A                     __ptext61:	
  5006 ;; *************** function _Audio_Initialize *****************
  5007 ;; Defined at:
  5008 ;;		line 89 in file "user/src/led.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;		None
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;		None
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  1    wreg      void 
  5015 ;; Registers used:
  5016 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5017 ;; Tracked objects:
  5018 ;;		On entry : 1F/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5023 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5024 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5025 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;Total ram usage:        4 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; Hardware stack levels required when called:    9
  5029 ;; This function calls:
  5030 ;;		_Audio_SetPlayMode
  5031 ;;		_Audio_SetVolume
  5032 ;;		_Audio_StopSound
  5033 ;; This function is called by:
  5034 ;;		_main
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           
  5039                           ;psect for function _Audio_Initialize
  5040  093A                     _Audio_Initialize:	
  5041                           
  5042                           ;led.c: 90: _delay((unsigned long)((640)*(16000000/4000.0)));
  5043                           
  5044                           ;incstack = 0
  5045                           ; Regs used in _Audio_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5046  093A  300D               	movlw	13
  5047  093B  0020               	movlb	0	; select bank0
  5048  093C  00D1               	movwf	??_Audio_Initialize+1
  5049  093D  30FD               	movlw	253
  5050  093E  00D0               	movwf	??_Audio_Initialize
  5051  093F  30A2               	movlw	162
  5052  0940                     u6777:	
  5053  0940  0B89               	decfsz	9,f
  5054  0941  2940               	goto	u6777
  5055  0942  0BD0               	decfsz	??_Audio_Initialize,f
  5056  0943  2940               	goto	u6777
  5057  0944  0BD1               	decfsz	??_Audio_Initialize+1,f
  5058  0945  2940               	goto	u6777
  5059  0946  0000               	nop
  5060  0947  0064               	clrwdt	;# 
  5061                           
  5062                           ;led.c: 92: Audio_StopSound();
  5063  0948  3195  2577  3188   	fcall	_Audio_StopSound
  5064                           
  5065                           ;led.c: 93: _delay((unsigned long)((480)*(16000000/4000.0)));
  5066  094B  300A               	movlw	10
  5067  094C  0020               	movlb	0	; select bank0
  5068  094D  00D1               	movwf	??_Audio_Initialize+1
  5069  094E  30BE               	movlw	190
  5070  094F  00D0               	movwf	??_Audio_Initialize
  5071  0950  3079               	movlw	121
  5072  0951                     u6787:	
  5073  0951  0B89               	decfsz	9,f
  5074  0952  2951               	goto	u6787
  5075  0953  0BD0               	decfsz	??_Audio_Initialize,f
  5076  0954  2951               	goto	u6787
  5077  0955  0BD1               	decfsz	??_Audio_Initialize+1,f
  5078  0956  2951               	goto	u6787
  5079                           
  5080                           ;led.c: 94: Audio_SetVolume(gLedPara.mVolOn ? VOLUME[ gLedPara.mVolume ] : 0);
  5081  0957  3187  277C  3188   	fcall	PL110	;call to abstracted procedure
  5082  095A  1901               	btfsc	1,2
  5083  095B  295F               	goto	l7041
  5084  095C  0020               	movlb	0	; select bank0
  5085  095D  01D2               	clrf	_Audio_Initialize$1221
  5086  095E  2965               	goto	L20
  5087  095F                     l7041:	
  5088  095F  307B               	movlw	123
  5089  0960  3196  26ED  3188   	fcall	PL18	;call to abstracted procedure
  5090  0963  0020               	movlb	0	; select bank0
  5091  0964  00D2               	movwf	_Audio_Initialize$1221
  5092  0965                     L20:	
  5093  0965  01D3               	clrf	_Audio_Initialize$1221+1
  5094  0966  0852               	movf	_Audio_Initialize$1221,w
  5095  0967  3196  260C  3188   	fcall	_Audio_SetVolume
  5096                           
  5097                           ;led.c: 95: _delay((unsigned long)((480)*(16000000/4000.0)));
  5098  096A  300A               	movlw	10
  5099  096B  0020               	movlb	0	; select bank0
  5100  096C  00D1               	movwf	??_Audio_Initialize+1
  5101  096D  30BE               	movlw	190
  5102  096E  00D0               	movwf	??_Audio_Initialize
  5103  096F  3079               	movlw	121
  5104  0970                     u6797:	
  5105  0970  0B89               	decfsz	9,f
  5106  0971  2970               	goto	u6797
  5107  0972  0BD0               	decfsz	??_Audio_Initialize,f
  5108  0973  2970               	goto	u6797
  5109  0974  0BD1               	decfsz	??_Audio_Initialize+1,f
  5110  0975  2970               	goto	u6797
  5111                           
  5112                           ;led.c: 96: Audio_SetPlayMode(0x01);
  5113  0976  3001               	movlw	1
  5114  0977  3196  2622  3188   	fcall	_Audio_SetPlayMode
  5115                           
  5116                           ;led.c: 97: _delay((unsigned long)((480)*(16000000/4000.0)));
  5117  097A  300A               	movlw	10
  5118  097B  0020               	movlb	0	; select bank0
  5119  097C  00D1               	movwf	??_Audio_Initialize+1
  5120  097D  30BE               	movlw	190
  5121  097E  00D0               	movwf	??_Audio_Initialize
  5122  097F  3079               	movlw	121
  5123  0980                     u6807:	
  5124  0980  0B89               	decfsz	9,f
  5125  0981  2980               	goto	u6807
  5126  0982  0BD0               	decfsz	??_Audio_Initialize,f
  5127  0983  2980               	goto	u6807
  5128  0984  0BD1               	decfsz	??_Audio_Initialize+1,f
  5129  0985  2980               	goto	u6807
  5130  0986  0008               	return
  5131  0987                     __end_of_Audio_Initialize:	
  5132  0987                     __ptext51:	
  5133 ;; *************** function _Led_Initialize *****************
  5134 ;; Defined at:
  5135 ;;		line 100 in file "user/src/led.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;		None
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  i               1   26[BANK0 ] unsigned char 
  5140 ;;  result          1   23[BANK0 ] unsigned char 
  5141 ;;  ct              2   24[BANK0 ] unsigned int 
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      void 
  5144 ;; Registers used:
  5145 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 1E/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5152 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5153 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;Total ram usage:        8 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    9
  5158 ;; This function calls:
  5159 ;;		_Led_TurnOffRamp
  5160 ;;		_Led_TurnOnRamp
  5161 ;;		_Led_UpdateBright
  5162 ;;		_RTC_GetTime
  5163 ;;		___wmul
  5164 ;; This function is called by:
  5165 ;;		_main
  5166 ;;		_IR_ExitSet
  5167 ;;		_IR_ExitTimeout
  5168 ;;		_IR_KeyAction
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           
  5173                           ;psect for function _Led_Initialize
  5174  0987                     _Led_Initialize:	
  5175  0987                     l6079:	
  5176                           ;incstack = 0
  5177                           ; Regs used in _Led_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5178                           
  5179                           
  5180                           ;led.c: 101: uint16_t ct = RTC_GetTime()->hour * 60u + RTC_GetTime()->minute;
  5181  0987  2271  3188         	fcall	_RTC_GetTime
  5182  0989  264A               	fcall	PL114	;call to abstracted procedure
  5183  098A  3195  2562  3188   	fcall	___wmul
  5184  098D  084E               	movf	?___wmul+1,w
  5185  098E  00D9               	movwf	Led_Initialize@ct+1
  5186  098F  084D               	movf	?___wmul,w
  5187  0990  00D8               	movwf	Led_Initialize@ct
  5188  0991  2271               	fcall	_RTC_GetTime
  5189  0992  0020               	movlb	0	; select bank0
  5190  0993  00D3               	movwf	??_Led_Initialize
  5191  0994  3E01               	addlw	1
  5192  0995  0086               	movwf	6
  5193  0996  0187               	clrf	7
  5194  0997  0801               	movf	1,w
  5195  0998  07D8               	addwf	Led_Initialize@ct,f
  5196  0999  1803               	skipnc
  5197  099A  0AD9               	incf	Led_Initialize@ct+1,f
  5198                           
  5199                           ;led.c: 102: if (!gLedPara.mAuto) {
  5200  099B  3187  277C  3188   	fcall	PL110	;call to abstracted procedure
  5201  099E  1801               	btfsc	1,0
  5202  099F  2A07               	goto	l6107
  5203                           
  5204                           ;led.c: 103: if (!gLedPara.mOn) {
  5205  09A0  307B               	movlw	123
  5206  09A1  0086               	movwf	6
  5207  09A2  1881               	btfsc	1,1
  5208  09A3  29A5               	goto	l6087
  5209                           
  5210                           ;led.c: 104: Led_TurnOffRamp();
  5211  09A4  2ED3               	ljmp	l5989
  5212  09A5                     l6087:	
  5213                           ;led.c: 105: } else {
  5214                           
  5215                           
  5216                           ;led.c: 106: if (gLedPara.mMsc) {
  5217  09A5  307B               	movlw	123
  5218  09A6  0086               	movwf	6
  5219  09A7  3023               	movlw	35
  5220  09A8  0087               	movwf	7
  5221  09A9  267E  3188         	fcall	PL152	;call to abstracted procedure
  5222  09AB  1903               	skipnz
  5223  09AC  2A05               	goto	l6105
  5224                           
  5225                           ;led.c: 107: gLedRunPara.music_index = gLedPara.mMsc;
  5226  09AD  307B               	movlw	123
  5227  09AE  0086               	movwf	6
  5228  09AF  3023               	movlw	35
  5229  09B0  267E  3188         	fcall	PL152	;call to abstracted procedure
  5230  09B2  0021               	movlb	1	; select bank1
  5231  09B3  00E0               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
  5232                           
  5233                           ;led.c: 108: gLedRunPara.music_state = 1;
  5234  09B4  3001               	movlw	1
  5235  09B5  00E1               	movwf	(_gLedRunPara^(0+128)+25)	;volatile
  5236                           
  5237                           ;led.c: 109: switch (gLedPara.mMsc) {
  5238  09B6  307B               	movlw	123
  5239  09B7  0086               	movwf	6
  5240  09B8  3023               	movlw	35
  5241  09B9  0087               	movwf	7
  5242  09BA  0C01               	rrf	1,w
  5243  09BB  0020               	movlb	0	; select bank0
  5244  09BC  00D3               	movwf	??_Led_Initialize
  5245  09BD  0CD3               	rrf	??_Led_Initialize,f
  5246  09BE  0C53               	rrf	??_Led_Initialize,w
  5247  09BF  390F               	andlw	15
  5248                           
  5249                           ; Switch size 1, requested type "space"
  5250                           ; Number of cases is 4, Range of values is 1 to 4
  5251                           ; switch strategies available:
  5252                           ; Name         Instructions Cycles
  5253                           ; simple_byte           13     7 (average)
  5254                           ; direct_byte           17     9 (fixed)
  5255                           ; jumptable            263     9 (fixed)
  5256                           ;	Chosen strategy is simple_byte
  5257  09C0  3A01               	xorlw	1	; case 1
  5258  09C1  1903               	skipnz
  5259  09C2  29CD               	goto	l6093
  5260  09C3  3A03               	xorlw	3	; case 2
  5261  09C4  1903               	skipnz
  5262  09C5  29DB               	goto	l6095
  5263  09C6  3A01               	xorlw	1	; case 3
  5264  09C7  1903               	skipnz
  5265  09C8  29E9               	goto	l6097
  5266  09C9  3A07               	xorlw	7	; case 4
  5267  09CA  1903               	skipnz
  5268  09CB  29F7               	goto	l6099
  5269  09CC  2A06               	goto	l641
  5270  09CD                     l6093:	
  5271                           
  5272                           ;led.c: 111: gLedRunPara.mTargetBright[0] = gLedPara.mStaticDayBright[0];
  5273  09CD  30B0               	movlw	176
  5274  09CE  2607  3188         	fcall	PL48	;call to abstracted procedure
  5275                           
  5276                           ;led.c: 112: gLedRunPara.mTargetBright[1] = gLedPara.mStaticDayBright[1];
  5277  09D0  30B2               	movlw	178
  5278  09D1  2664  3188         	fcall	PL122	;call to abstracted procedure
  5279                           
  5280                           ;led.c: 113: gLedRunPara.mTargetBright[2] = gLedPara.mStaticDayBright[2];
  5281  09D3  30B4               	movlw	180
  5282  09D4  266A  3188         	fcall	PL124	;call to abstracted procedure
  5283                           
  5284                           ;led.c: 114: gLedRunPara.mTargetBright[3] = gLedPara.mStaticDayBright[3];
  5285  09D6  30B6               	movlw	182
  5286  09D7  265E  3188         	fcall	PL120	;call to abstracted procedure
  5287                           
  5288                           ;led.c: 115: gLedRunPara.mTargetBright[4] = gLedPara.mStaticDayBright[4];
  5289  09D9  30B8               	movlw	184
  5290                           
  5291                           ;led.c: 117: break;
  5292  09DA  2E34               	ljmp	PL96	;call to abstracted procedure
  5293  09DB                     l6095:	
  5294                           
  5295                           ;led.c: 119: gLedRunPara.mTargetBright[0] = gLedPara.mStaticNightBright[0];
  5296  09DB  30BA               	movlw	186
  5297  09DC  2607  3188         	fcall	PL48	;call to abstracted procedure
  5298                           
  5299                           ;led.c: 120: gLedRunPara.mTargetBright[1] = gLedPara.mStaticNightBright[1];
  5300  09DE  30BC               	movlw	188
  5301  09DF  2664  3188         	fcall	PL122	;call to abstracted procedure
  5302                           
  5303                           ;led.c: 121: gLedRunPara.mTargetBright[2] = gLedPara.mStaticNightBright[2];
  5304  09E1  30BE               	movlw	190
  5305  09E2  266A  3188         	fcall	PL124	;call to abstracted procedure
  5306                           
  5307                           ;led.c: 122: gLedRunPara.mTargetBright[3] = gLedPara.mStaticNightBright[3];
  5308  09E4  30C0               	movlw	192
  5309  09E5  265E  3188         	fcall	PL120	;call to abstracted procedure
  5310                           
  5311                           ;led.c: 123: gLedRunPara.mTargetBright[4] = gLedPara.mStaticNightBright[4];
  5312  09E7  30C2               	movlw	194
  5313                           
  5314                           ;led.c: 125: break;
  5315  09E8  2E34               	ljmp	PL96	;call to abstracted procedure
  5316  09E9                     l6097:	
  5317                           
  5318                           ;led.c: 127: gLedRunPara.mTargetBright[0] = gLedPara.mStaticFishBright[0];
  5319  09E9  30C4               	movlw	196
  5320  09EA  2607  3188         	fcall	PL48	;call to abstracted procedure
  5321                           
  5322                           ;led.c: 128: gLedRunPara.mTargetBright[1] = gLedPara.mStaticFishBright[1];
  5323  09EC  30C6               	movlw	198
  5324  09ED  2664  3188         	fcall	PL122	;call to abstracted procedure
  5325                           
  5326                           ;led.c: 129: gLedRunPara.mTargetBright[2] = gLedPara.mStaticFishBright[2];
  5327  09EF  30C8               	movlw	200
  5328  09F0  266A  3188         	fcall	PL124	;call to abstracted procedure
  5329                           
  5330                           ;led.c: 130: gLedRunPara.mTargetBright[3] = gLedPara.mStaticFishBright[3];
  5331  09F2  30CA               	movlw	202
  5332  09F3  265E  3188         	fcall	PL120	;call to abstracted procedure
  5333                           
  5334                           ;led.c: 131: gLedRunPara.mTargetBright[4] = gLedPara.mStaticFishBright[4];
  5335  09F5  30CC               	movlw	204
  5336                           
  5337                           ;led.c: 133: break;
  5338  09F6  2E34               	ljmp	PL96	;call to abstracted procedure
  5339  09F7                     l6099:	
  5340                           
  5341                           ;led.c: 135: gLedRunPara.mTargetBright[0] = gLedPara.mStaticPlantBright[0];
  5342  09F7  30CE               	movlw	206
  5343  09F8  2607  3188         	fcall	PL48	;call to abstracted procedure
  5344                           
  5345                           ;led.c: 136: gLedRunPara.mTargetBright[1] = gLedPara.mStaticPlantBright[1];
  5346  09FA  30D0               	movlw	208
  5347  09FB  2664  3188         	fcall	PL122	;call to abstracted procedure
  5348                           
  5349                           ;led.c: 137: gLedRunPara.mTargetBright[2] = gLedPara.mStaticPlantBright[2];
  5350  09FD  30D2               	movlw	210
  5351  09FE  266A  3188         	fcall	PL124	;call to abstracted procedure
  5352                           
  5353                           ;led.c: 138: gLedRunPara.mTargetBright[3] = gLedPara.mStaticPlantBright[3];
  5354  0A00  30D4               	movlw	212
  5355  0A01  265E  3188         	fcall	PL120	;call to abstracted procedure
  5356                           
  5357                           ;led.c: 139: gLedRunPara.mTargetBright[4] = gLedPara.mStaticPlantBright[4];
  5358  0A03  30D6               	movlw	214
  5359                           
  5360                           ;led.c: 141: break;
  5361  0A04  2E34               	ljmp	PL96	;call to abstracted procedure
  5362  0A05                     l6105:	
  5363                           
  5364                           ;led.c: 146: Led_TurnOnRamp();
  5365  0A05  26E6               	fcall	_Led_TurnOnRamp
  5366  0A06                     l641:	
  5367                           
  5368                           ;led.c: 147: }
  5369                           ;led.c: 148: }
  5370                           ;led.c: 149: } else {
  5371  0A06  0008               	return
  5372  0A07                     l6107:	
  5373  0A07  30E4               	movlw	228
  5374                           
  5375                           ;led.c: 150: bool result = 0;
  5376  0A08  01D7               	clrf	Led_Initialize@result
  5377                           
  5378                           ;led.c: 151: uint8_t i;
  5379                           ;led.c: 152: if (gLedPara.mSunrise < gLedPara.mSunset) {
  5380  0A09  262D  3188         	fcall	PL90	;call to abstracted procedure
  5381  0A0B  00D4               	movwf	??_Led_Initialize+1
  5382  0A0C  30D8               	movlw	216
  5383  0A0D  2621  3188         	fcall	PL88	;call to abstracted procedure
  5384                           
  5385                           ;led.c: 153: if (ct >= gLedPara.mSunrise && ct < gLedPara.mSunset) {
  5386  0A0F  30D8               	movlw	216
  5387  0A10  0086               	movwf	6
  5388  0A11  3023               	movlw	35
  5389  0A12  0087               	movwf	7
  5390  0A13  1803               	skipnc
  5391  0A14  2A21               	goto	L19
  5392  0A15  3F40               	moviw [0]fsr1
  5393  0A16  00D3               	movwf	??_Led_Initialize
  5394  0A17  3F41               	moviw [1]fsr1
  5395  0A18  00D4               	movwf	??_Led_Initialize+1
  5396  0A19  0259               	subwf	Led_Initialize@ct+1,w
  5397  0A1A  1D03               	skipz
  5398  0A1B  2A1E               	goto	u5275
  5399  0A1C  0853               	movf	??_Led_Initialize,w
  5400  0A1D  0258               	subwf	Led_Initialize@ct,w
  5401  0A1E                     u5275:	
  5402  0A1E  1C03               	skipc
  5403  0A1F  2A42               	goto	l6123
  5404  0A20  2A35               	goto	L36
  5405  0A21                     L19:	
  5406  0A21  3F40               	moviw [0]fsr1
  5407  0A22  00D3               	movwf	??_Led_Initialize
  5408  0A23  3F41               	moviw [1]fsr1
  5409  0A24  00D4               	movwf	??_Led_Initialize+1
  5410  0A25  30E4               	movlw	228
  5411  0A26  2621  3188         	fcall	PL88	;call to abstracted procedure
  5412  0A28  1803               	skipnc
  5413  0A29  2A42               	goto	l6123
  5414                           
  5415                           ;led.c: 157: if (ct >= gLedPara.mSunrise || ct < gLedPara.mSunset) {
  5416  0A2A  30D8               	movlw	216
  5417  0A2B  262D  3188         	fcall	PL90	;call to abstracted procedure
  5418  0A2D  00D4               	movwf	??_Led_Initialize+1
  5419  0A2E  0259               	subwf	Led_Initialize@ct+1,w
  5420  0A2F  1D03               	skipz
  5421  0A30  2A33               	goto	u5305
  5422  0A31  0853               	movf	??_Led_Initialize,w
  5423  0A32  0258               	subwf	Led_Initialize@ct,w
  5424  0A33                     u5305:	
  5425  0A33  1803               	skipnc
  5426  0A34  2A40               	goto	l6115
  5427  0A35                     L36:	
  5428  0A35  30E4               	movlw	228
  5429  0A36  262D  3188         	fcall	PL90	;call to abstracted procedure
  5430  0A38  00D4               	movwf	??_Led_Initialize+1
  5431  0A39  0259               	subwf	Led_Initialize@ct+1,w
  5432  0A3A  1D03               	skipz
  5433  0A3B  2A3E               	goto	u5315
  5434  0A3C  0853               	movf	??_Led_Initialize,w
  5435  0A3D  0258               	subwf	Led_Initialize@ct,w
  5436  0A3E                     u5315:	
  5437  0A3E  1803               	skipnc
  5438  0A3F  2A42               	goto	l6123
  5439  0A40                     l6115:	
  5440                           
  5441                           ;led.c: 154: result = 1;
  5442  0A40  01D7               	clrf	Led_Initialize@result
  5443  0A41  0AD7               	incf	Led_Initialize@result,f
  5444  0A42                     l6123:	
  5445                           
  5446                           ;led.c: 159: }
  5447                           ;led.c: 160: }
  5448                           ;led.c: 161: if (result) {
  5449  0A42  0857               	movf	Led_Initialize@result,w
  5450  0A43  1903               	btfsc	3,2
  5451  0A44  2A5B               	goto	l6137
  5452                           
  5453                           ;led.c: 162: for (i = 0; i < 5; i++) {
  5454  0A45  01DA               	clrf	Led_Initialize@i
  5455  0A46                     l6131:	
  5456                           
  5457                           ;led.c: 163: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
  5458  0A46  085A               	movf	Led_Initialize@i,w
  5459  0A47  00D3               	movwf	??_Led_Initialize
  5460  0A48  30DA               	movlw	218
  5461  0A49  25DD  3188         	fcall	PL20	;call to abstracted procedure
  5462  0A4B  25EB  3188         	fcall	PL22	;call to abstracted procedure
  5463                           
  5464                           ;led.c: 164: gLedRunPara.mCurrentBright[i] = gLedPara.mDayBright[i];
  5465  0A4D  085A               	movf	Led_Initialize@i,w
  5466  0A4E  00D3               	movwf	??_Led_Initialize
  5467  0A4F  30DA               	movlw	218
  5468  0A50  25DD  3188         	fcall	PL20	;call to abstracted procedure
  5469  0A52  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
  5470  0A53  0084               	movwf	4
  5471  0A54  2610  3188         	fcall	PL56	;call to abstracted procedure
  5472  0A56  0ADA               	incf	Led_Initialize@i,f
  5473  0A57  025A               	subwf	Led_Initialize@i,w
  5474  0A58  1803               	btfsc	3,0
  5475  0A59  2A70               	goto	l6149
  5476  0A5A  2A46               	goto	l6131
  5477  0A5B                     l6137:	
  5478                           
  5479                           ;led.c: 167: for (i = 0; i < 5; i++) {
  5480  0A5B  01DA               	clrf	Led_Initialize@i
  5481  0A5C                     l6143:	
  5482                           
  5483                           ;led.c: 168: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
  5484  0A5C  085A               	movf	Led_Initialize@i,w
  5485  0A5D  00D3               	movwf	??_Led_Initialize
  5486  0A5E  30E6               	movlw	230
  5487  0A5F  25DD  3188         	fcall	PL20	;call to abstracted procedure
  5488  0A61  25EB  3188         	fcall	PL22	;call to abstracted procedure
  5489                           
  5490                           ;led.c: 169: gLedRunPara.mCurrentBright[i] = gLedPara.mNightBright[i];
  5491  0A63  085A               	movf	Led_Initialize@i,w
  5492  0A64  00D3               	movwf	??_Led_Initialize
  5493  0A65  30E6               	movlw	230
  5494  0A66  25DD  3188         	fcall	PL20	;call to abstracted procedure
  5495  0A68  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
  5496  0A69  0084               	movwf	4
  5497  0A6A  2610  3188         	fcall	PL56	;call to abstracted procedure
  5498  0A6C  0ADA               	incf	Led_Initialize@i,f
  5499  0A6D  025A               	subwf	Led_Initialize@i,w
  5500  0A6E  1C03               	skipc
  5501  0A6F  2A5C               	goto	l6143
  5502  0A70                     l6149:	
  5503                           
  5504                           ;led.c: 170: }
  5505                           ;led.c: 171: }
  5506                           ;led.c: 172: Led_UpdateBright();
  5507  0A70  2CA0               	ljmp	l6017
  5508  0A71                     __end_of_Led_Initialize:	
  5509  0A71                     __ptext52:	
  5510 ;; *************** function _RTC_GetTime *****************
  5511 ;; Defined at:
  5512 ;;		line 14 in file "user/src/rtc.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;		None
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;		None
  5517 ;; Return value:  Size  Location     Type
  5518 ;;                  1    wreg      PTR struct .
  5519 ;; Registers used:
  5520 ;;		wreg
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/0
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5530 ;;Total ram usage:        0 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:    7
  5533 ;; This function calls:
  5534 ;;		Nothing
  5535 ;; This function is called by:
  5536 ;;		_Led_Initialize
  5537 ;;		_Led_CheckAutoStatus
  5538 ;;		_IR_KeyAction
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           
  5543                           ;psect for function _RTC_GetTime
  5544  0A71                     _RTC_GetTime:	
  5545                           
  5546                           ;rtc.c: 16: return &rtc_time;
  5547                           
  5548                           ;incstack = 0
  5549                           ; Regs used in _RTC_GetTime: [wreg]
  5550  0A71  343D               	retlw	(low (_rtc_time| 0))& (0+255)
  5551  0A72                     __end_of_RTC_GetTime:	
  5552  0A72                     __ptext39:	
  5553 ;; *************** function _IR_KeyAtionIfPressed *****************
  5554 ;; Defined at:
  5555 ;;		line 739 in file "user/src/ir.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;		None
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;		None
  5560 ;; Return value:  Size  Location     Type
  5561 ;;                  1    wreg      void 
  5562 ;; Registers used:
  5563 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 1F/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5573 ;;Total ram usage:        0 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:   12
  5576 ;; This function calls:
  5577 ;;		_IR_KeyAction
  5578 ;; This function is called by:
  5579 ;;		_main
  5580 ;; This function uses a non-reentrant model
  5581 ;;
  5582                           
  5583                           
  5584                           ;psect for function _IR_KeyAtionIfPressed
  5585  0A72                     _IR_KeyAtionIfPressed:	
  5586                           
  5587                           ;ir.c: 740: if (ir_state.mKeyRcv) {
  5588                           
  5589                           ;incstack = 0
  5590                           ; Regs used in _IR_KeyAtionIfPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5591  0A72  0020               	movlb	0	; select bank0
  5592  0A73  1C36               	btfss	_ir_state,0	;volatile
  5593  0A74  0008               	return
  5594                           
  5595                           ;ir.c: 741: IR_KeyAction();
  5596  0A75  3191  29C5         	ljmp	l6529
  5597  0A77                     __end_of_IR_KeyAtionIfPressed:	
  5598  0A77                     __ptext38:	
  5599 ;; *************** function _TMR1_StartTimer *****************
  5600 ;; Defined at:
  5601 ;;		line 21 in file "driver/src/tmr1.c"
  5602 ;; Parameters:    Size  Location     Type
  5603 ;;		None
  5604 ;; Auto vars:     Size  Location     Type
  5605 ;;		None
  5606 ;; Return value:  Size  Location     Type
  5607 ;;                  1    wreg      void 
  5608 ;; Registers used:
  5609 ;;		None
  5610 ;; Tracked objects:
  5611 ;;		On entry : 1E/0
  5612 ;;		On exit  : 1F/0
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;Total ram usage:        0 bytes
  5620 ;; Hardware stack levels used:    1
  5621 ;; Hardware stack levels required when called:    7
  5622 ;; This function calls:
  5623 ;;		Nothing
  5624 ;; This function is called by:
  5625 ;;		_main
  5626 ;;		_IR_ResetIfTMR1Overflow
  5627 ;; This function uses a non-reentrant model
  5628 ;;
  5629                           
  5630                           
  5631                           ;psect for function _TMR1_StartTimer
  5632  0A77                     _TMR1_StartTimer:	
  5633  0A77                     l4863:	
  5634                           ;incstack = 0
  5635                           ; Regs used in _TMR1_StartTimer: []
  5636                           
  5637                           
  5638                           ;tmr1.c: 23: T1CONbits.TMR1ON = 1;
  5639  0A77  0020               	movlb	0	; select bank0
  5640  0A78  141B               	bsf	27,0	;volatile
  5641  0A79  0008               	return
  5642  0A7A                     __end_of_TMR1_StartTimer:	
  5643  0A7A                     __ptext36:	
  5644 ;; *************** function _IR_ResetIfTMR1Overflow *****************
  5645 ;; Defined at:
  5646 ;;		line 216 in file "user/src/ir.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;		None
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;		None
  5651 ;; Return value:  Size  Location     Type
  5652 ;;                  1    wreg      void 
  5653 ;; Registers used:
  5654 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5655 ;; Tracked objects:
  5656 ;;		On entry : 1F/0
  5657 ;;		On exit  : 1F/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5664 ;;Total ram usage:        0 bytes
  5665 ;; Hardware stack levels used:    1
  5666 ;; Hardware stack levels required when called:    8
  5667 ;; This function calls:
  5668 ;;		_TMR1_StartTimer
  5669 ;;		_TMR1_StopTimer
  5670 ;;		_TMR2_EnableInterrupt
  5671 ;; This function is called by:
  5672 ;;		_main
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           
  5677                           ;psect for function _IR_ResetIfTMR1Overflow
  5678  0A7A                     _IR_ResetIfTMR1Overflow:	
  5679                           
  5680                           ;ir.c: 217: if (PIR1bits.TMR1IF) {
  5681                           
  5682                           ;incstack = 0
  5683                           ; Regs used in _IR_ResetIfTMR1Overflow: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5684  0A7A  1C11               	btfss	17,0	;volatile
  5685  0A7B  0008               	return
  5686                           
  5687                           ;ir.c: 218: PIR1bits.TMR1IF = 0;
  5688  0A7C  1011               	bcf	17,0	;volatile
  5689                           
  5690                           ;ir.c: 219: TMR1_StopTimer();
  5691  0A7D  22B9  3188         	fcall	_TMR1_StopTimer
  5692                           
  5693                           ;ir.c: 220: TMR1 = 0;
  5694  0A7F  0199               	clrf	25	;volatile
  5695  0A80  019A               	clrf	26	;volatile
  5696                           
  5697                           ;ir.c: 221: ir_state.mState = 0;
  5698  0A81  30E3               	movlw	-29
  5699  0A82  05B6               	andwf	_ir_state,f	;volatile
  5700                           
  5701                           ;ir.c: 222: if (!ir_state.mKeyRpt) {
  5702  0A83  1CB6               	btfss	_ir_state,1	;volatile
  5703  0A84  2A88               	goto	l7071
  5704  0A85  2AB4               	goto	l1042
  5705  0A86                     l1047:	
  5706  0A86                     l1057:	
  5707                           
  5708                           ;ir.c: 225: case 0x59:
  5709                           ;ir.c: 226: case 0x45:
  5710                           ;ir.c: 227: case 0x44:
  5711                           ;ir.c: 228: case 0x41:
  5712                           ;ir.c: 229: case 0x54:
  5713                           ;ir.c: 230: case 0x55:
  5714                           ;ir.c: 231: case 0x49:
  5715                           ;ir.c: 232: case 0x48:
  5716                           ;ir.c: 233: case 0x40:
  5717                           ;ir.c: 234: case 0x50:
  5718                           ;ir.c: 235: case 0x51:
  5719                           ;ir.c: 236: case 0x4D:
  5720                           ;ir.c: 237: case 0x4C:
  5721                           ;ir.c: 238: ir_state.mKeyRcv = 1;
  5722  0A86  1436               	bsf	_ir_state,0	;volatile
  5723                           
  5724                           ;ir.c: 239: break;
  5725  0A87  2AB5               	goto	l7073
  5726  0A88                     l7071:	
  5727  0A88  0830               	movf	_keyValue,w	;volatile
  5728                           
  5729                           ; Switch size 1, requested type "space"
  5730                           ; Number of cases is 14, Range of values is 64 to 89
  5731                           ; switch strategies available:
  5732                           ; Name         Instructions Cycles
  5733                           ; simple_byte           43    22 (average)
  5734                           ; direct_byte           61     9 (fixed)
  5735                           ; jumptable            263     9 (fixed)
  5736                           ;	Chosen strategy is simple_byte
  5737  0A89  3A40               	xorlw	64	; case 64
  5738  0A8A  1903               	skipnz
  5739  0A8B  2A86               	goto	l1057
  5740  0A8C  3A01               	xorlw	1	; case 65
  5741  0A8D  1903               	skipnz
  5742  0A8E  2A86               	goto	l1057
  5743  0A8F  3A05               	xorlw	5	; case 68
  5744  0A90  1903               	skipnz
  5745  0A91  2A86               	goto	l1057
  5746  0A92  3A01               	xorlw	1	; case 69
  5747  0A93  1903               	skipnz
  5748  0A94  2A86               	goto	l1047
  5749  0A95  3A0D               	xorlw	13	; case 72
  5750  0A96  1903               	skipnz
  5751  0A97  2A86               	goto	l1057
  5752  0A98  3A01               	xorlw	1	; case 73
  5753  0A99  1903               	skipnz
  5754  0A9A  2A86               	goto	l1057
  5755  0A9B  3A05               	xorlw	5	; case 76
  5756  0A9C  1903               	skipnz
  5757  0A9D  2A86               	goto	l1057
  5758  0A9E  3A01               	xorlw	1	; case 77
  5759  0A9F  1903               	skipnz
  5760  0AA0  2A86               	goto	l1057
  5761  0AA1  3A1D               	xorlw	29	; case 80
  5762  0AA2  1903               	skipnz
  5763  0AA3  2A86               	goto	l1057
  5764  0AA4  3A01               	xorlw	1	; case 81
  5765  0AA5  1903               	skipnz
  5766  0AA6  2A86               	goto	l1057
  5767  0AA7  3A05               	xorlw	5	; case 84
  5768  0AA8  1903               	skipnz
  5769  0AA9  2A86               	goto	l1057
  5770  0AAA  3A01               	xorlw	1	; case 85
  5771  0AAB  1903               	skipnz
  5772  0AAC  2A86               	goto	l1057
  5773  0AAD  3A0D               	xorlw	13	; case 88
  5774  0AAE  1903               	skipnz
  5775  0AAF  2A86               	goto	l1047
  5776  0AB0  3A01               	xorlw	1	; case 89
  5777  0AB1  1903               	skipnz
  5778  0AB2  2A86               	goto	l1047
  5779  0AB3  2AB5               	goto	l7073
  5780  0AB4                     l1042:	
  5781                           
  5782                           ;ir.c: 244: ir_state.mKeyRpt = 0;
  5783  0AB4  10B6               	bcf	_ir_state,1	;volatile
  5784  0AB5                     l7073:	
  5785                           
  5786                           ;ir.c: 245: }
  5787                           ;ir.c: 246: TMR2_EnableInterrupt();
  5788  0AB5  3196  26C6  3188   	fcall	_TMR2_EnableInterrupt
  5789                           
  5790                           ;ir.c: 247: TMR1_StartTimer();
  5791  0AB8  2A77               	ljmp	l4863
  5792  0AB9                     __end_of_IR_ResetIfTMR1Overflow:	
  5793  0AB9                     __ptext37:	
  5794 ;; *************** function _TMR1_StopTimer *****************
  5795 ;; Defined at:
  5796 ;;		line 26 in file "driver/src/tmr1.c"
  5797 ;; Parameters:    Size  Location     Type
  5798 ;;		None
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;		None
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  1    wreg      void 
  5803 ;; Registers used:
  5804 ;;		None
  5805 ;; Tracked objects:
  5806 ;;		On entry : 1F/0
  5807 ;;		On exit  : 1F/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5814 ;;Total ram usage:        0 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    7
  5817 ;; This function calls:
  5818 ;;		Nothing
  5819 ;; This function is called by:
  5820 ;;		_IR_ResetIfTMR1Overflow
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           
  5825                           ;psect for function _TMR1_StopTimer
  5826  0AB9                     _TMR1_StopTimer:	
  5827                           
  5828                           ;tmr1.c: 28: T1CONbits.TMR1ON = 0;
  5829                           
  5830                           ;incstack = 0
  5831                           ; Regs used in _TMR1_StopTimer: []
  5832  0AB9  101B               	bcf	27,0	;volatile
  5833  0ABA  0008               	return
  5834  0ABB                     __end_of_TMR1_StopTimer:	
  5835  0ABB                     __ptext34:	
  5836 ;; *************** function _IR_UpdateSetStatus *****************
  5837 ;; Defined at:
  5838 ;;		line 748 in file "user/src/ir.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;		None
  5841 ;; Auto vars:     Size  Location     Type
  5842 ;;		None
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  1    wreg      void 
  5845 ;; Registers used:
  5846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5847 ;; Tracked objects:
  5848 ;;		On entry : 1F/0
  5849 ;;		On exit  : 1E/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5856 ;;Total ram usage:        0 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; Hardware stack levels required when called:   11
  5859 ;; This function calls:
  5860 ;;		_IR_ExitTimeout
  5861 ;; This function is called by:
  5862 ;;		_main
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           
  5867                           ;psect for function _IR_UpdateSetStatus
  5868  0ABB                     _IR_UpdateSetStatus:	
  5869                           
  5870                           ;ir.c: 749: if (ir_state.mSet) {
  5871                           
  5872                           ;incstack = 0
  5873                           ; Regs used in _IR_UpdateSetStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5874  0ABB  0E36               	swapf	_ir_state,w	;volatile
  5875  0ABC  0C89               	rrf	9,f
  5876  0ABD  3907               	andlw	7
  5877  0ABE  1903               	skipnz
  5878  0ABF  0008               	return
  5879                           
  5880                           ;ir.c: 750: ir_state.mSetDelay++;
  5881  0AC0  0ABC               	incf	_ir_state+6,f	;volatile
  5882                           
  5883                           ;ir.c: 751: if (ir_state.mSetDelay > 10) {
  5884  0AC1  300B               	movlw	11
  5885  0AC2  023C               	subwf	_ir_state+6,w	;volatile
  5886  0AC3  1C03               	skipc
  5887  0AC4  0008               	return
  5888                           
  5889                           ;ir.c: 752: IR_ExitTimeout();
  5890  0AC5  3191  29BD         	ljmp	l6519
  5891  0AC7                     __end_of_IR_UpdateSetStatus:	
  5892  0AC7                     __ptext29:	
  5893 ;; *************** function _Interrupt_Initialize *****************
  5894 ;; Defined at:
  5895 ;;		line 160 in file "user/src/main.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;		None
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;		None
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  1    wreg      void 
  5902 ;; Registers used:
  5903 ;;		wreg, status,2, status,0, pclath, cstack
  5904 ;; Tracked objects:
  5905 ;;		On entry : 1F/1
  5906 ;;		On exit  : 1F/1
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5913 ;;Total ram usage:        0 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    8
  5916 ;; This function calls:
  5917 ;;		_TMR0_SetInterruptHandler
  5918 ;;		_TMR1_Gate_SetInterruptHandler
  5919 ;;		_TMR2_SetInterruptHandler
  5920 ;;		_TMR4_SetInterruptHandler
  5921 ;; This function is called by:
  5922 ;;		_main
  5923 ;; This function uses a non-reentrant model
  5924 ;;
  5925                           
  5926                           
  5927                           ;psect for function _Interrupt_Initialize
  5928  0AC7                     _Interrupt_Initialize:	
  5929                           
  5930                           ;main.c: 161: TMR1_Gate_SetInterruptHandler(IR_Decode);
  5931                           
  5932                           ;incstack = 0
  5933                           ; Regs used in _Interrupt_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5934  0AC7  3082               	movlw	low _IR_Decode
  5935  0AC8  0020               	movlb	0	; select bank0
  5936  0AC9  00CD               	movwf	TMR1_Gate_SetInterruptHandler@handler
  5937  0ACA  3005               	movlw	high _IR_Decode
  5938  0ACB  00CE               	movwf	TMR1_Gate_SetInterruptHandler@handler+1
  5939  0ACC  22EA  3188         	fcall	_TMR1_Gate_SetInterruptHandler
  5940                           
  5941                           ;main.c: 162: TMR0_SetInterruptHandler(RTC_OnSecond);
  5942  0ACE  3090               	movlw	low _RTC_OnSecond
  5943  0ACF  0020               	movlb	0	; select bank0
  5944  0AD0  00CD               	movwf	TMR0_SetInterruptHandler@handler
  5945  0AD1  3011               	movlw	high _RTC_OnSecond
  5946  0AD2  00CE               	movwf	TMR0_SetInterruptHandler@handler+1
  5947  0AD3  22E2  3188         	fcall	_TMR0_SetInterruptHandler
  5948                           
  5949                           ;main.c: 163: TMR2_SetInterruptHandler(Led_Run);
  5950  0AD5  3030               	movlw	low _Led_Run
  5951  0AD6  0020               	movlb	0	; select bank0
  5952  0AD7  00CD               	movwf	TMR2_SetInterruptHandler@handler
  5953  0AD8  3000               	movlw	high _Led_Run
  5954  0AD9  00CE               	movwf	TMR2_SetInterruptHandler@handler+1
  5955  0ADA  2707  3188         	fcall	_TMR2_SetInterruptHandler
  5956                           
  5957                           ;main.c: 164: TMR4_SetInterruptHandler(Led_Notice);
  5958  0ADC  309A               	movlw	low _Led_Notice
  5959  0ADD  0020               	movlb	0	; select bank0
  5960  0ADE  00CD               	movwf	TMR4_SetInterruptHandler@handler
  5961  0ADF  3007               	movlw	high _Led_Notice
  5962  0AE0  00CE               	movwf	TMR4_SetInterruptHandler@handler+1
  5963  0AE1  2F0F               	ljmp	l4887
  5964  0AE2                     __end_of_Interrupt_Initialize:	
  5965  0AE2                     __ptext33:	
  5966 ;; *************** function _TMR0_SetInterruptHandler *****************
  5967 ;; Defined at:
  5968 ;;		line 37 in file "driver/src/tmr0.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;  handler         2   13[BANK0 ] PTR FTN()void 
  5971 ;;		 -> RTC_OnSecond(1), 
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;		None
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  1    wreg      void 
  5976 ;; Registers used:
  5977 ;;		wreg
  5978 ;; Tracked objects:
  5979 ;;		On entry : 1F/0
  5980 ;;		On exit  : 1F/1
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5983 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5986 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5987 ;;Total ram usage:        2 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    7
  5990 ;; This function calls:
  5991 ;;		Nothing
  5992 ;; This function is called by:
  5993 ;;		_Interrupt_Initialize
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           
  5998                           ;psect for function _TMR0_SetInterruptHandler
  5999  0AE2                     _TMR0_SetInterruptHandler:	
  6000                           
  6001                           ;tmr0.c: 39: tmr0_isr_handler = handler;
  6002                           
  6003                           ;incstack = 0
  6004                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  6005  0AE2  084E               	movf	TMR0_SetInterruptHandler@handler+1,w
  6006  0AE3  0021               	movlb	1	; select bank1
  6007  0AE4  00E9               	movwf	(_tmr0_isr_handler+1)^(0+128)
  6008  0AE5  0020               	movlb	0	; select bank0
  6009  0AE6  084D               	movf	TMR0_SetInterruptHandler@handler,w
  6010  0AE7  0021               	movlb	1	; select bank1
  6011  0AE8  00E8               	movwf	_tmr0_isr_handler^(0+128)
  6012  0AE9  0008               	return
  6013  0AEA                     __end_of_TMR0_SetInterruptHandler:	
  6014  0AEA                     __ptext32:	
  6015 ;; *************** function _TMR1_Gate_SetInterruptHandler *****************
  6016 ;; Defined at:
  6017 ;;		line 54 in file "driver/src/tmr1.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;  handler         2   13[BANK0 ] PTR FTN()void 
  6020 ;;		 -> IR_Decode(1), 
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;		None
  6023 ;; Return value:  Size  Location     Type
  6024 ;;                  1    wreg      void 
  6025 ;; Registers used:
  6026 ;;		wreg
  6027 ;; Tracked objects:
  6028 ;;		On entry : 1F/0
  6029 ;;		On exit  : 1F/1
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6032 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6035 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6036 ;;Total ram usage:        2 bytes
  6037 ;; Hardware stack levels used:    1
  6038 ;; Hardware stack levels required when called:    7
  6039 ;; This function calls:
  6040 ;;		Nothing
  6041 ;; This function is called by:
  6042 ;;		_Interrupt_Initialize
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           
  6047                           ;psect for function _TMR1_Gate_SetInterruptHandler
  6048  0AEA                     _TMR1_Gate_SetInterruptHandler:	
  6049                           
  6050                           ;tmr1.c: 56: tmr1_gate_isr_handler = handler;
  6051                           
  6052                           ;incstack = 0
  6053                           ; Regs used in _TMR1_Gate_SetInterruptHandler: [wreg]
  6054  0AEA  084E               	movf	TMR1_Gate_SetInterruptHandler@handler+1,w
  6055  0AEB  0021               	movlb	1	; select bank1
  6056  0AEC  00E7               	movwf	(_tmr1_gate_isr_handler+1)^(0+128)
  6057  0AED  0020               	movlb	0	; select bank0
  6058  0AEE  084D               	movf	TMR1_Gate_SetInterruptHandler@handler,w
  6059  0AEF  0021               	movlb	1	; select bank1
  6060  0AF0  00E6               	movwf	_tmr1_gate_isr_handler^(0+128)
  6061  0AF1  0008               	return
  6062  0AF2                     __end_of_TMR1_Gate_SetInterruptHandler:	
  6063  0AF2                     __ptext20:	
  6064 ;; *************** function _Led_SaveParaIfChanged *****************
  6065 ;; Defined at:
  6066 ;;		line 176 in file "user/src/led.c"
  6067 ;; Parameters:    Size  Location     Type
  6068 ;;		None
  6069 ;; Auto vars:     Size  Location     Type
  6070 ;;		None
  6071 ;; Return value:  Size  Location     Type
  6072 ;;                  1    wreg      void 
  6073 ;; Registers used:
  6074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6075 ;; Tracked objects:
  6076 ;;		On entry : 1F/0
  6077 ;;		On exit  : 1E/0
  6078 ;;		Unchanged: 0/0
  6079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;Total ram usage:        0 bytes
  6085 ;; Hardware stack levels used:    1
  6086 ;; Hardware stack levels required when called:    9
  6087 ;; This function calls:
  6088 ;;		_DATAEE_WriteBuffer
  6089 ;; This function is called by:
  6090 ;;		_main
  6091 ;; This function uses a non-reentrant model
  6092 ;;
  6093                           
  6094                           
  6095                           ;psect for function _Led_SaveParaIfChanged
  6096  0AF2                     _Led_SaveParaIfChanged:	
  6097                           
  6098                           ;led.c: 177: if (gLedRunPara.mParaChanged) {
  6099                           
  6100                           ;incstack = 0
  6101                           ; Regs used in _Led_SaveParaIfChanged: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6102  0AF2  0021               	movlb	1	; select bank1
  6103  0AF3  1C5C               	btfss	(_gLedRunPara^(0+128)+20),0	;volatile
  6104  0AF4  0008               	return
  6105                           
  6106                           ;led.c: 178: gLedRunPara.mParaChanged = 0;
  6107  0AF5  105C               	bcf	(_gLedRunPara^(0+128)+20),0	;volatile
  6108                           
  6109                           ;led.c: 179: DATAEE_WriteBuffer(0x7010, (uint8_t *) & gLedPara, sizeof ( gLedPara));
  6110  0AF6  3010               	movlw	16
  6111  0AF7  0020               	movlb	0	; select bank0
  6112  0AF8  00D1               	movwf	DATAEE_WriteBuffer@addr
  6113  0AF9  3070               	movlw	112
  6114  0AFA  00D2               	movwf	DATAEE_WriteBuffer@addr+1
  6115  0AFB  307B               	movlw	123
  6116  0AFC  00D3               	movwf	DATAEE_WriteBuffer@buf
  6117  0AFD  3023               	movlw	35
  6118  0AFE  00D4               	movwf	DATAEE_WriteBuffer@buf+1
  6119  0AFF  3075               	movlw	117
  6120  0B00  00D5               	movwf	DATAEE_WriteBuffer@len
  6121  0B01  2FAA               	ljmp	l4767
  6122  0B02                     __end_of_Led_SaveParaIfChanged:	
  6123  0B02                     __ptext19:	
  6124 ;; *************** function _RTC_HourReady *****************
  6125 ;; Defined at:
  6126 ;;		line 61 in file "user/src/rtc.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;		None
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;		None
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      unsigned char 
  6133 ;; Registers used:
  6134 ;;		wreg
  6135 ;; Tracked objects:
  6136 ;;		On entry : 1E/0
  6137 ;;		On exit  : 1F/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6144 ;;Total ram usage:        0 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    7
  6147 ;; This function calls:
  6148 ;;		Nothing
  6149 ;; This function is called by:
  6150 ;;		_main
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           
  6155                           ;psect for function _RTC_HourReady
  6156  0B02                     _RTC_HourReady:	
  6157                           
  6158                           ;rtc.c: 63: if( rtc_status.mHour )
  6159                           
  6160                           ;incstack = 0
  6161                           ; Regs used in _RTC_HourReady: [wreg]
  6162  0B02  0020               	movlb	0	; select bank0
  6163  0B03  1D31               	btfss	_rtc_status,2	;volatile
  6164  0B04  3400               	retlw	0
  6165                           
  6166                           ;rtc.c: 64: {
  6167                           ;rtc.c: 65: rtc_status.mHour = 0;
  6168  0B05  1131               	bcf	_rtc_status,2	;volatile
  6169                           
  6170                           ;rtc.c: 66: return 1;
  6171  0B06  3401               	retlw	1
  6172  0B07                     __end_of_RTC_HourReady:	
  6173                           ;rtc.c: 67: }
  6174                           ;rtc.c: 68: return 0;
  6175                           
  6176  0B07                     __ptext18:	
  6177 ;; *************** function _RTC_MinuteReady *****************
  6178 ;; Defined at:
  6179 ;;		line 51 in file "user/src/rtc.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;		None
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;		None
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  1    wreg      unsigned char 
  6186 ;; Registers used:
  6187 ;;		wreg
  6188 ;; Tracked objects:
  6189 ;;		On entry : 1F/0
  6190 ;;		On exit  : 1F/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;Total ram usage:        0 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    7
  6200 ;; This function calls:
  6201 ;;		Nothing
  6202 ;; This function is called by:
  6203 ;;		_main
  6204 ;; This function uses a non-reentrant model
  6205 ;;
  6206                           
  6207                           
  6208                           ;psect for function _RTC_MinuteReady
  6209  0B07                     _RTC_MinuteReady:	
  6210                           
  6211                           ;rtc.c: 53: if( rtc_status.mMin )
  6212                           
  6213                           ;incstack = 0
  6214                           ; Regs used in _RTC_MinuteReady: [wreg]
  6215  0B07  1CB1               	btfss	_rtc_status,1	;volatile
  6216  0B08  3400               	retlw	0
  6217                           
  6218                           ;rtc.c: 54: {
  6219                           ;rtc.c: 55: rtc_status.mMin = 0;
  6220  0B09  10B1               	bcf	_rtc_status,1	;volatile
  6221                           
  6222                           ;rtc.c: 56: return 1;
  6223  0B0A  3401               	retlw	1
  6224  0B0B                     __end_of_RTC_MinuteReady:	
  6225                           ;rtc.c: 57: }
  6226                           ;rtc.c: 58: return 0;
  6227                           
  6228  0B0B                     __ptext17:	
  6229 ;; *************** function _RTC_SecondReady *****************
  6230 ;; Defined at:
  6231 ;;		line 41 in file "user/src/rtc.c"
  6232 ;; Parameters:    Size  Location     Type
  6233 ;;		None
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;		None
  6236 ;; Return value:  Size  Location     Type
  6237 ;;                  1    wreg      unsigned char 
  6238 ;; Registers used:
  6239 ;;		wreg
  6240 ;; Tracked objects:
  6241 ;;		On entry : 1E/0
  6242 ;;		On exit  : 1F/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;Total ram usage:        0 bytes
  6250 ;; Hardware stack levels used:    1
  6251 ;; Hardware stack levels required when called:    7
  6252 ;; This function calls:
  6253 ;;		Nothing
  6254 ;; This function is called by:
  6255 ;;		_main
  6256 ;; This function uses a non-reentrant model
  6257 ;;
  6258                           
  6259                           
  6260                           ;psect for function _RTC_SecondReady
  6261  0B0B                     _RTC_SecondReady:	
  6262                           
  6263                           ;rtc.c: 43: if( rtc_status.mSec )
  6264                           
  6265                           ;incstack = 0
  6266                           ; Regs used in _RTC_SecondReady: [wreg]
  6267  0B0B  0020               	movlb	0	; select bank0
  6268  0B0C  1C31               	btfss	_rtc_status,0	;volatile
  6269  0B0D  3400               	retlw	0
  6270                           
  6271                           ;rtc.c: 44: {
  6272                           ;rtc.c: 45: rtc_status.mSec = 0;
  6273  0B0E  1031               	bcf	_rtc_status,0	;volatile
  6274                           
  6275                           ;rtc.c: 46: return 1;
  6276  0B0F  3401               	retlw	1
  6277  0B10                     __end_of_RTC_SecondReady:	
  6278                           ;rtc.c: 47: }
  6279                           ;rtc.c: 48: return 0;
  6280                           
  6281  0B10                     __ptext3:	
  6282 ;; *************** function _SYSTEM_Initialize *****************
  6283 ;; Defined at:
  6284 ;;		line 144 in file "user/src/main.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;		None
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;		None
  6289 ;; Return value:  Size  Location     Type
  6290 ;;                  1    wreg      void 
  6291 ;; Registers used:
  6292 ;;		wreg, status,2, status,0, pclath, cstack
  6293 ;; Tracked objects:
  6294 ;;		On entry : B1F/0
  6295 ;;		On exit  : 1F/1
  6296 ;;		Unchanged: 0/0
  6297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;Total ram usage:        0 bytes
  6303 ;; Hardware stack levels used:    1
  6304 ;; Hardware stack levels required when called:    8
  6305 ;; This function calls:
  6306 ;;		_ADC_Initialize_Default
  6307 ;;		_EUSART_Initialize_Default
  6308 ;;		_OSCILLATOR_Initialize
  6309 ;;		_PIN_Initialize
  6310 ;;		_PWM1_Initialize
  6311 ;;		_PWM2_Initialize
  6312 ;;		_PWM3_Initialize
  6313 ;;		_PWM4_Initialize
  6314 ;;		_PWM5_Initialize
  6315 ;;		_TMR0_Initialize_Default
  6316 ;;		_TMR1_Initialize_Default
  6317 ;;		_TMR2_Initialize_Default
  6318 ;;		_TMR4_Initialize_Default
  6319 ;; This function is called by:
  6320 ;;		_main
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           
  6325                           ;psect for function _SYSTEM_Initialize
  6326  0B10                     _SYSTEM_Initialize:	
  6327                           
  6328                           ;main.c: 145: PIN_Initialize();
  6329                           
  6330                           ;incstack = 0
  6331                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6332  0B10  255C  3188         	fcall	_PIN_Initialize
  6333                           
  6334                           ;main.c: 146: OSCILLATOR_Initialize();
  6335  0B12  2329  3188         	fcall	_OSCILLATOR_Initialize
  6336                           
  6337                           ;main.c: 147: TMR0_Initialize_Default();
  6338  0B14  26A4  3188         	fcall	_TMR0_Initialize_Default
  6339                           
  6340                           ;main.c: 148: TMR1_Initialize_Default();
  6341  0B16  26AF  3188         	fcall	_TMR1_Initialize_Default
  6342                           
  6343                           ;main.c: 149: TMR2_Initialize_Default();
  6344  0B18  26BE  3188         	fcall	_TMR2_Initialize_Default
  6345                           
  6346                           ;main.c: 150: TMR4_Initialize_Default();
  6347  0B1A  26C8  3188         	fcall	_TMR4_Initialize_Default
  6348                           
  6349                           ;main.c: 151: PWM1_Initialize();
  6350  0B1C  2333  3188         	fcall	_PWM1_Initialize
  6351                           
  6352                           ;main.c: 152: PWM2_Initialize();
  6353  0B1E  2339  3188         	fcall	_PWM2_Initialize
  6354                           
  6355                           ;main.c: 153: PWM3_Initialize();
  6356  0B20  25A9  3188         	fcall	_PWM3_Initialize
  6357                           
  6358                           ;main.c: 154: PWM4_Initialize();
  6359  0B22  2693  3188         	fcall	_PWM4_Initialize
  6360                           
  6361                           ;main.c: 155: PWM5_Initialize();
  6362  0B24  269E  3188         	fcall	_PWM5_Initialize
  6363                           
  6364                           ;main.c: 156: EUSART_Initialize_Default();
  6365  0B26  27EC  3188         	fcall	_EUSART_Initialize_Default
  6366                           
  6367                           ;main.c: 157: ADC_Initialize_Default();
  6368  0B28  2FE4               	ljmp	l4745
  6369  0B29                     __end_of_SYSTEM_Initialize:	
  6370  0B29                     __ptext14:	
  6371 ;; *************** function _OSCILLATOR_Initialize *****************
  6372 ;; Defined at:
  6373 ;;		line 89 in file "user/src/main.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;		None
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;		None
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  1    wreg      void 
  6380 ;; Registers used:
  6381 ;;		wreg, status,2
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 1F/12
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;Total ram usage:        0 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:    7
  6394 ;; This function calls:
  6395 ;;		Nothing
  6396 ;; This function is called by:
  6397 ;;		_SYSTEM_Initialize
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           
  6402                           ;psect for function _OSCILLATOR_Initialize
  6403  0B29                     _OSCILLATOR_Initialize:	
  6404                           
  6405                           ;main.c: 91: OSCCON1 = 0x60;
  6406                           
  6407                           ;incstack = 0
  6408                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6409  0B29  3060               	movlw	96
  6410  0B2A  0032               	movlb	18	; select bank18
  6411  0B2B  0099               	movwf	25	;volatile
  6412                           
  6413                           ;main.c: 93: OSCCON3 = 0x00;
  6414  0B2C  019B               	clrf	27	;volatile
  6415                           
  6416                           ;main.c: 95: OSCEN = 0x48;
  6417  0B2D  3048               	movlw	72
  6418  0B2E  009D               	movwf	29	;volatile
  6419                           
  6420                           ;main.c: 97: OSCFRQ = 0x06;
  6421  0B2F  3006               	movlw	6
  6422  0B30  009F               	movwf	31	;volatile
  6423                           
  6424                           ;main.c: 99: OSCTUNE = 0x00;
  6425  0B31  019E               	clrf	30	;volatile
  6426  0B32  0008               	return
  6427  0B33                     __end_of_OSCILLATOR_Initialize:	
  6428  0B33                     __ptext12:	
  6429 ;; *************** function _PWM1_Initialize *****************
  6430 ;; Defined at:
  6431 ;;		line 6 in file "driver/src/pwm.c"
  6432 ;; Parameters:    Size  Location     Type
  6433 ;;		None
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;		None
  6436 ;; Return value:  Size  Location     Type
  6437 ;;                  1    wreg      void 
  6438 ;; Registers used:
  6439 ;;		wreg, status,2, status,0
  6440 ;; Tracked objects:
  6441 ;;		On entry : 1F/1
  6442 ;;		On exit  : 1F/5
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;Total ram usage:        0 bytes
  6450 ;; Hardware stack levels used:    1
  6451 ;; Hardware stack levels required when called:    7
  6452 ;; This function calls:
  6453 ;;		Nothing
  6454 ;; This function is called by:
  6455 ;;		_SYSTEM_Initialize
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           
  6460                           ;psect for function _PWM1_Initialize
  6461  0B33                     _PWM1_Initialize:	
  6462                           
  6463                           ;pwm.c: 8: CCP1CON = 0x8F;
  6464                           
  6465                           ;incstack = 0
  6466                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
  6467  0B33  308F               	movlw	143
  6468  0B34  0025               	movlb	5	; select bank5
  6469  0B35  0093               	movwf	19	;volatile
  6470                           
  6471                           ;pwm.c: 9: CCPR1 = 0;
  6472  0B36  0191               	clrf	17	;volatile
  6473  0B37  0192               	clrf	18	;volatile
  6474                           
  6475                           ;pwm.c: 10: CCPTMRSbits.C1TSEL = 0x1;
  6476  0B38  2E84               	ljmp	PL154	;call to abstracted procedure
  6477  0B39                     __end_of_PWM1_Initialize:	
  6478  0B39                     __ptext11:	
  6479 ;; *************** function _PWM2_Initialize *****************
  6480 ;; Defined at:
  6481 ;;		line 18 in file "driver/src/pwm.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;		None
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  1    wreg      void 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2, status,0
  6490 ;; Tracked objects:
  6491 ;;		On entry : 1F/5
  6492 ;;		On exit  : 1F/5
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;Total ram usage:        0 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    7
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_SYSTEM_Initialize
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           
  6510                           ;psect for function _PWM2_Initialize
  6511  0B39                     _PWM2_Initialize:	
  6512                           
  6513                           ;pwm.c: 20: CCP2CON = 0x8F;
  6514                           
  6515                           ;incstack = 0
  6516                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
  6517  0B39  308F               	movlw	143
  6518  0B3A  0097               	movwf	23	;volatile
  6519                           
  6520                           ;pwm.c: 21: CCPR2 = 0;
  6521  0B3B  0195               	clrf	21	;volatile
  6522  0B3C  0196               	clrf	22	;volatile
  6523                           
  6524                           ;pwm.c: 22: CCPTMRSbits.C2TSEL = 0x1;
  6525  0B3D  081F               	movf	31,w	;volatile
  6526  0B3E  39F3               	andlw	-13
  6527  0B3F  3804               	iorlw	4
  6528  0B40  009F               	movwf	31	;volatile
  6529  0B41  0008               	return
  6530  0B42                     __end_of_PWM2_Initialize:	
  6531  0B42                     __ptext23:	
  6532 ;; *************** function _Led_InitPara *****************
  6533 ;; Defined at:
  6534 ;;		line 39 in file "user/src/led.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;		None
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;  j               1   30[BANK0 ] unsigned char 
  6539 ;;  i               1   31[BANK0 ] unsigned char 
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  1    wreg      void 
  6542 ;; Registers used:
  6543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 1F/1
  6546 ;;		On exit  : 1F/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;Total ram usage:       10 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    9
  6556 ;; This function calls:
  6557 ;;		_DATAEE_ReadBuffer
  6558 ;;		_Led_FirstPowerUp
  6559 ;;		___wmul
  6560 ;; This function is called by:
  6561 ;;		_main
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           
  6566                           ;psect for function _Led_InitPara
  6567  0B42                     _Led_InitPara:	
  6568                           
  6569                           ;led.c: 40: DATAEE_ReadBuffer(0x7010, (uint8_t *) & gLedPara, sizeof ( gLedPara));
  6570                           
  6571                           ;incstack = 0
  6572                           ; Regs used in _Led_InitPara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6573  0B42  3010               	movlw	16
  6574  0B43  0020               	movlb	0	; select bank0
  6575  0B44  00CF               	movwf	DATAEE_ReadBuffer@addr
  6576  0B45  3070               	movlw	112
  6577  0B46  00D0               	movwf	DATAEE_ReadBuffer@addr+1
  6578  0B47  307B               	movlw	123
  6579  0B48  00D1               	movwf	DATAEE_ReadBuffer@buf
  6580  0B49  3023               	movlw	35
  6581  0B4A  00D2               	movwf	DATAEE_ReadBuffer@buf+1
  6582  0B4B  3075               	movlw	117
  6583  0B4C  00D3               	movwf	DATAEE_ReadBuffer@len
  6584  0B4D  2533  3188         	fcall	_DATAEE_ReadBuffer
  6585                           
  6586                           ;led.c: 41: for (uint8_t i = 0; i < 5; i++) {
  6587  0B4F  01DF               	clrf	Led_InitPara@i
  6588  0B50                     l6983:	
  6589                           
  6590                           ;led.c: 42: if (gLedPara.mBright[i] > 1000) {
  6591  0B50  085F               	movf	Led_InitPara@i,w
  6592  0B51  00D6               	movwf	??_Led_InitPara
  6593  0B52  307E               	movlw	126
  6594  0B53  25B9  3188         	fcall	PL2	;call to abstracted procedure
  6595  0B55  1903               	skipnz
  6596  0B56  025A               	subwf	??_Led_InitPara+4,w
  6597  0B57  1C03               	skipc
  6598  0B58  2B5E               	goto	l615
  6599                           
  6600                           ;led.c: 43: gLedPara.mBright[i] = 1000;
  6601  0B59  2600  3188         	fcall	PL40	;call to abstracted procedure
  6602  0B5B  307E               	movlw	126
  6603  0B5C  25CC  3188         	fcall	PL4	;call to abstracted procedure
  6604  0B5E                     l615:	
  6605                           
  6606                           ;led.c: 44: }
  6607                           ;led.c: 45: if (gLedPara.mDayBright[i] > 1000) {
  6608  0B5E  085F               	movf	Led_InitPara@i,w
  6609  0B5F  00D6               	movwf	??_Led_InitPara
  6610  0B60  30DA               	movlw	218
  6611  0B61  25B9  3188         	fcall	PL2	;call to abstracted procedure
  6612  0B63  1903               	skipnz
  6613  0B64  025A               	subwf	??_Led_InitPara+4,w
  6614  0B65  1C03               	skipc
  6615  0B66  2B6C               	goto	l616
  6616                           
  6617                           ;led.c: 46: gLedPara.mDayBright[i] = 1000;
  6618  0B67  2600  3188         	fcall	PL40	;call to abstracted procedure
  6619  0B69  30DA               	movlw	218
  6620  0B6A  25CC  3188         	fcall	PL4	;call to abstracted procedure
  6621  0B6C                     l616:	
  6622                           
  6623                           ;led.c: 47: }
  6624                           ;led.c: 48: if (gLedPara.mNightBright[i] > 1000) {
  6625  0B6C  085F               	movf	Led_InitPara@i,w
  6626  0B6D  00D6               	movwf	??_Led_InitPara
  6627  0B6E  30E6               	movlw	230
  6628  0B6F  25B9  3188         	fcall	PL2	;call to abstracted procedure
  6629  0B71  1903               	skipnz
  6630  0B72  025A               	subwf	??_Led_InitPara+4,w
  6631  0B73  1C03               	skipc
  6632  0B74  2B7A               	goto	l617
  6633                           
  6634                           ;led.c: 49: gLedPara.mNightBright[i] = 1000;
  6635  0B75  2600  3188         	fcall	PL40	;call to abstracted procedure
  6636  0B77  30E6               	movlw	230
  6637  0B78  25CC  3188         	fcall	PL4	;call to abstracted procedure
  6638  0B7A                     l617:	
  6639                           
  6640                           ;led.c: 50: }
  6641                           ;led.c: 51: if (gLedPara.mStaticDayBright[i] > 1000) {
  6642  0B7A  085F               	movf	Led_InitPara@i,w
  6643  0B7B  00D6               	movwf	??_Led_InitPara
  6644  0B7C  30B0               	movlw	176
  6645  0B7D  25B9  3188         	fcall	PL2	;call to abstracted procedure
  6646  0B7F  1903               	skipnz
  6647  0B80  025A               	subwf	??_Led_InitPara+4,w
  6648  0B81  1C03               	skipc
  6649  0B82  2B88               	goto	l618
  6650                           
  6651                           ;led.c: 52: gLedPara.mStaticDayBright[i] = 1000;
  6652  0B83  2600  3188         	fcall	PL40	;call to abstracted procedure
  6653  0B85  30B0               	movlw	176
  6654  0B86  25CC  3188         	fcall	PL4	;call to abstracted procedure
  6655  0B88                     l618:	
  6656                           
  6657                           ;led.c: 53: }
  6658                           ;led.c: 54: if (gLedPara.mStaticNightBright[i] > 1000) {
  6659  0B88  085F               	movf	Led_InitPara@i,w
  6660  0B89  00D6               	movwf	??_Led_InitPara
  6661  0B8A  30BA               	movlw	186
  6662  0B8B  25B9  3188         	fcall	PL2	;call to abstracted procedure
  6663  0B8D  1903               	skipnz
  6664  0B8E  025A               	subwf	??_Led_InitPara+4,w
  6665  0B8F  1C03               	skipc
  6666  0B90  2B96               	goto	l619
  6667                           
  6668                           ;led.c: 55: gLedPara.mStaticNightBright[i] = 1000;
  6669  0B91  2600  3188         	fcall	PL40	;call to abstracted procedure
  6670  0B93  30BA               	movlw	186
  6671  0B94  25CC  3188         	fcall	PL4	;call to abstracted procedure
  6672  0B96                     l619:	
  6673                           
  6674                           ;led.c: 56: }
  6675                           ;led.c: 57: if (gLedPara.mStaticFishBright[i] > 1000) {
  6676  0B96  085F               	movf	Led_InitPara@i,w
  6677  0B97  00D6               	movwf	??_Led_InitPara
  6678  0B98  30C4               	movlw	196
  6679  0B99  25B9  3188         	fcall	PL2	;call to abstracted procedure
  6680  0B9B  1903               	skipnz
  6681  0B9C  025A               	subwf	??_Led_InitPara+4,w
  6682  0B9D  1C03               	skipc
  6683  0B9E  2BA4               	goto	l620
  6684                           
  6685                           ;led.c: 58: gLedPara.mStaticFishBright[i] = 1000;
  6686  0B9F  2600  3188         	fcall	PL40	;call to abstracted procedure
  6687  0BA1  30C4               	movlw	196
  6688  0BA2  25CC  3188         	fcall	PL4	;call to abstracted procedure
  6689  0BA4                     l620:	
  6690                           
  6691                           ;led.c: 59: }
  6692                           ;led.c: 60: if (gLedPara.mStaticPlantBright[i] > 1000) {
  6693  0BA4  085F               	movf	Led_InitPara@i,w
  6694  0BA5  00D6               	movwf	??_Led_InitPara
  6695  0BA6  30CE               	movlw	206
  6696  0BA7  25B9  3188         	fcall	PL2	;call to abstracted procedure
  6697  0BA9  1903               	skipnz
  6698  0BAA  025A               	subwf	??_Led_InitPara+4,w
  6699  0BAB  1C03               	skipc
  6700  0BAC  2BB2               	goto	l6999
  6701                           
  6702                           ;led.c: 61: gLedPara.mStaticPlantBright[i] = 1000;
  6703  0BAD  2600  3188         	fcall	PL40	;call to abstracted procedure
  6704  0BAF  30CE               	movlw	206
  6705  0BB0  25CC  3188         	fcall	PL4	;call to abstracted procedure
  6706  0BB2                     l6999:	
  6707                           
  6708                           ;led.c: 62: }
  6709                           ;led.c: 63: for (uint8_t j = 0; j < 4; j++) {
  6710  0BB2  01DE               	clrf	Led_InitPara@j
  6711  0BB3                     l7005:	
  6712                           
  6713                           ;led.c: 64: if (gLedPara.mCustom[j][i] > 1000) {
  6714  0BB3  085F               	movf	Led_InitPara@i,w
  6715  0BB4  00D6               	movwf	??_Led_InitPara
  6716  0BB5  01D7               	clrf	??_Led_InitPara+1
  6717  0BB6  35D6               	lslf	??_Led_InitPara,f
  6718  0BB7  0DD7               	rlf	??_Led_InitPara+1,f
  6719  0BB8  085E               	movf	Led_InitPara@j,w
  6720  0BB9  263A               	fcall	PL102	;call to abstracted procedure
  6721  0BBA  3195  2562  3188   	fcall	___wmul
  6722  0BBD  3088               	movlw	136
  6723  0BBE  00D8               	movwf	??_Led_InitPara+2
  6724  0BBF  3023               	movlw	35
  6725  0BC0  00D9               	movwf	??_Led_InitPara+3
  6726  0BC1  084D               	movf	?___wmul,w
  6727  0BC2  0758               	addwf	??_Led_InitPara+2,w
  6728  0BC3  00DA               	movwf	??_Led_InitPara+4
  6729  0BC4  084E               	movf	?___wmul+1,w
  6730  0BC5  3D59               	addwfc	??_Led_InitPara+3,w
  6731  0BC6  00DB               	movwf	??_Led_InitPara+5
  6732  0BC7  0856               	movf	??_Led_InitPara,w
  6733  0BC8  075A               	addwf	??_Led_InitPara+4,w
  6734  0BC9  0086               	movwf	6
  6735  0BCA  0857               	movf	??_Led_InitPara+1,w
  6736  0BCB  3D5B               	addwfc	??_Led_InitPara+5,w
  6737  0BCC  0087               	movwf	7
  6738  0BCD  3F40               	moviw [0]fsr1
  6739  0BCE  00DC               	movwf	??_Led_InitPara+6
  6740  0BCF  3F41               	moviw [1]fsr1
  6741  0BD0  00DD               	movwf	??_Led_InitPara+7
  6742  0BD1  3003               	movlw	3
  6743  0BD2  025D               	subwf	??_Led_InitPara+7,w
  6744  0BD3  30E9               	movlw	233
  6745  0BD4  1903               	skipnz
  6746  0BD5  025C               	subwf	??_Led_InitPara+6,w
  6747  0BD6  1C03               	skipc
  6748  0BD7  2BF6               	goto	l7009
  6749                           
  6750                           ;led.c: 65: gLedPara.mCustom[j][i] = 1000;
  6751  0BD8  2600  3188         	fcall	PL40	;call to abstracted procedure
  6752  0BDA  01D9               	clrf	??_Led_InitPara+3
  6753  0BDB  35D8               	lslf	??_Led_InitPara+2,f
  6754  0BDC  0DD9               	rlf	??_Led_InitPara+3,f
  6755  0BDD  085E               	movf	Led_InitPara@j,w
  6756  0BDE  263A               	fcall	PL102	;call to abstracted procedure
  6757  0BDF  3195  2562  3188   	fcall	___wmul
  6758  0BE2  3088               	movlw	136
  6759  0BE3  00DA               	movwf	??_Led_InitPara+4
  6760  0BE4  3023               	movlw	35
  6761  0BE5  00DB               	movwf	??_Led_InitPara+5
  6762  0BE6  084D               	movf	?___wmul,w
  6763  0BE7  075A               	addwf	??_Led_InitPara+4,w
  6764  0BE8  00DC               	movwf	??_Led_InitPara+6
  6765  0BE9  084E               	movf	?___wmul+1,w
  6766  0BEA  3D5B               	addwfc	??_Led_InitPara+5,w
  6767  0BEB  00DD               	movwf	??_Led_InitPara+7
  6768  0BEC  0858               	movf	??_Led_InitPara+2,w
  6769  0BED  075C               	addwf	??_Led_InitPara+6,w
  6770  0BEE  0086               	movwf	6
  6771  0BEF  0859               	movf	??_Led_InitPara+3,w
  6772  0BF0  3D5D               	addwfc	??_Led_InitPara+7,w
  6773  0BF1  0087               	movwf	7
  6774  0BF2  0856               	movf	??_Led_InitPara,w
  6775  0BF3  3FC0               	movwi [0]fsr1
  6776  0BF4  0857               	movf	??_Led_InitPara+1,w
  6777  0BF5  3FC1               	movwi [1]fsr1
  6778  0BF6                     l7009:	
  6779  0BF6  3004               	movlw	4
  6780  0BF7  0ADE               	incf	Led_InitPara@j,f
  6781  0BF8  025E               	subwf	Led_InitPara@j,w
  6782  0BF9  1C03               	skipc
  6783  0BFA  2BB3               	goto	l7005
  6784                           
  6785                           ;led.c: 66: }
  6786                           ;led.c: 67: }
  6787                           ;led.c: 68: if (gLedPara.mMsc > 8) {
  6788  0BFB  307B               	movlw	123
  6789  0BFC  0086               	movwf	6
  6790  0BFD  3023               	movlw	35
  6791  0BFE  0087               	movwf	7
  6792  0BFF  0C01               	rrf	1,w
  6793  0C00  00D6               	movwf	??_Led_InitPara
  6794  0C01  0CD6               	rrf	??_Led_InitPara,f
  6795  0C02  0C56               	rrf	??_Led_InitPara,w
  6796  0C03  390F               	andlw	15
  6797  0C04  00D7               	movwf	??_Led_InitPara+1
  6798  0C05  3009               	movlw	9
  6799  0C06  0257               	subwf	??_Led_InitPara+1,w
  6800  0C07  1C03               	skipc
  6801  0C08  2C0D               	goto	l625
  6802                           
  6803                           ;led.c: 69: gLedPara.mMsc = 0;
  6804  0C09  307B               	movlw	123
  6805  0C0A  0086               	movwf	6
  6806  0C0B  3087               	movlw	-121
  6807  0C0C  0581               	andwf	1,f
  6808  0C0D                     l625:	
  6809                           
  6810                           ;led.c: 70: }
  6811                           ;led.c: 71: if (gLedPara.mSunrise > 1439) {
  6812  0C0D  30D8               	movlw	216
  6813  0C0E  2640  3188         	fcall	PL106	;call to abstracted procedure
  6814  0C10  1903               	skipnz
  6815  0C11  0256               	subwf	??_Led_InitPara,w
  6816  0C12  1C03               	skipc
  6817  0C13  2C17               	goto	l626
  6818                           
  6819                           ;led.c: 72: gLedPara.mSunrise = 0;
  6820  0C14  30D8               	movlw	216
  6821  0C15  2689  3188         	fcall	PL162	;call to abstracted procedure
  6822  0C17                     l626:	
  6823                           
  6824                           ;led.c: 73: }
  6825                           ;led.c: 74: if (gLedPara.mSunset > 1439) {
  6826  0C17  30E4               	movlw	228
  6827  0C18  2640  3188         	fcall	PL106	;call to abstracted procedure
  6828  0C1A  1903               	skipnz
  6829  0C1B  0256               	subwf	??_Led_InitPara,w
  6830  0C1C  1C03               	skipc
  6831  0C1D  2C21               	goto	l7021
  6832                           
  6833                           ;led.c: 75: gLedPara.mSunset = 0;
  6834  0C1E  30E4               	movlw	228
  6835  0C1F  2689  3188         	fcall	PL162	;call to abstracted procedure
  6836  0C21                     l7021:	
  6837                           
  6838                           ;led.c: 76: }
  6839                           ;led.c: 77: if (gLedPara.mVolume > 4) {
  6840  0C21  307B               	movlw	123
  6841  0C22  0086               	movwf	6
  6842  0C23  3023               	movlw	35
  6843  0C24  0087               	movwf	7
  6844  0C25  3005               	movlw	5
  6845  0C26  3142               	addfsr 1,2
  6846  0C27  0201               	subwf	1,w
  6847  0C28  1C03               	skipc
  6848  0C29  2C30               	goto	l7025
  6849                           
  6850                           ;led.c: 78: gLedPara.mVolume = 4;
  6851  0C2A  307D               	movlw	125
  6852  0C2B  0086               	movwf	6
  6853  0C2C  3023               	movlw	35
  6854  0C2D  0087               	movwf	7
  6855  0C2E  3004               	movlw	4
  6856  0C2F  0081               	movwf	1
  6857  0C30                     l7025:	
  6858  0C30  3005               	movlw	5
  6859  0C31  0ADF               	incf	Led_InitPara@i,f
  6860  0C32  025F               	subwf	Led_InitPara@i,w
  6861  0C33  1C03               	skipc
  6862  0C34  2B50               	goto	l6983
  6863                           
  6864                           ;led.c: 79: }
  6865                           ;led.c: 85: }
  6866                           ;led.c: 86: Led_FirstPowerUp();
  6867  0C35  2F17               	ljmp	l4955
  6868  0C36                     __end_of_Led_InitPara:	
  6869  0C36                     __ptext28:	
  6870 ;; *************** function _Led_AutoRun *****************
  6871 ;; Defined at:
  6872 ;;		line 371 in file "user/src/led.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;		None
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;  i               1   27[BANK0 ] unsigned char 
  6877 ;; Return value:  Size  Location     Type
  6878 ;;                  1    wreg      void 
  6879 ;; Registers used:
  6880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6881 ;; Tracked objects:
  6882 ;;		On entry : 1F/0
  6883 ;;		On exit  : 1F/0
  6884 ;;		Unchanged: 0/0
  6885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6887 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6888 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6889 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6890 ;;Total ram usage:        5 bytes
  6891 ;; Hardware stack levels used:    1
  6892 ;; Hardware stack levels required when called:    9
  6893 ;; This function calls:
  6894 ;;		_Led_UpdateBright
  6895 ;;		_Util_IncValue
  6896 ;; This function is called by:
  6897 ;;		_main
  6898 ;; This function uses a non-reentrant model
  6899 ;;
  6900                           
  6901                           
  6902                           ;psect for function _Led_AutoRun
  6903  0C36                     _Led_AutoRun:	
  6904                           
  6905                           ;led.c: 372: if (gLedRunPara.auto_state == 1 && gLedRunPara.auto_num < 250) {
  6906                           
  6907                           ;incstack = 0
  6908                           ; Regs used in _Led_AutoRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6909  0C36  0021               	movlb	1	; select bank1
  6910  0C37  0B5D               	decfsz	(_gLedRunPara^(0+128)+21),w	;volatile
  6911  0C38  2C48               	goto	l7147
  6912  0C39  3000               	movlw	0
  6913  0C3A  025F               	subwf	((_gLedRunPara+1)^(0+128)+22),w	;volatile
  6914  0C3B  30FA               	movlw	250
  6915  0C3C  1903               	skipnz
  6916  0C3D  025E               	subwf	(_gLedRunPara^(0+128)+22),w	;volatile
  6917  0C3E  1803               	skipnc
  6918  0C3F  2C48               	goto	l7147
  6919                           
  6920                           ;led.c: 373: Util_IncValue((uint16_t *) & gLedRunPara.mCurrentBright[0], 1000, 4);
  6921  0C40  2654               	fcall	PL116	;call to abstracted procedure
  6922  0C41  3004               	movlw	4
  6923  0C42  00D1               	movwf	Util_IncValue@delta
  6924  0C43  01D2               	clrf	Util_IncValue@delta+1
  6925  0C44  3195  253C  3188   	fcall	_Util_IncValue
  6926                           
  6927                           ;led.c: 374: } else if (gLedRunPara.auto_state == 2 && gLedRunPara.auto_num < 1000) {
  6928  0C47  2C74               	goto	l7163
  6929  0C48                     l7147:	
  6930  0C48  3002               	movlw	2
  6931  0C49  065D               	xorwf	(_gLedRunPara^(0+128)+21),w	;volatile
  6932  0C4A  1D03               	btfss	3,2
  6933  0C4B  2C5B               	goto	l7153
  6934  0C4C  3003               	movlw	3
  6935  0C4D  025F               	subwf	((_gLedRunPara+1)^(0+128)+22),w	;volatile
  6936  0C4E  30E8               	movlw	232
  6937  0C4F  1903               	skipnz
  6938  0C50  025E               	subwf	(_gLedRunPara^(0+128)+22),w	;volatile
  6939  0C51  1803               	skipnc
  6940  0C52  2C5B               	goto	l7153
  6941                           
  6942                           ;led.c: 375: Util_IncValue((uint16_t *) & gLedRunPara.mCurrentBright[0], 1000, 1);
  6943  0C53  2654               	fcall	PL116	;call to abstracted procedure
  6944  0C54  01D1               	clrf	Util_IncValue@delta
  6945  0C55  0AD1               	incf	Util_IncValue@delta,f
  6946  0C56  01D2               	clrf	Util_IncValue@delta+1
  6947  0C57  3195  253C  3188   	fcall	_Util_IncValue
  6948                           
  6949                           ;led.c: 376: } else {
  6950  0C5A  2C74               	goto	l7163
  6951  0C5B                     l7153:	
  6952                           
  6953                           ;led.c: 377: gLedRunPara.auto_state = 0;
  6954  0C5B  01DD               	clrf	(_gLedRunPara^(0+128)+21)	;volatile
  6955                           
  6956                           ;led.c: 378: if (gLedRunPara.mCurrentBright[0] < gLedRunPara.mTargetBright[0]) {
  6957  0C5C  0853               	movf	((_gLedRunPara+1)^(0+128)+10),w	;volatile
  6958  0C5D  0249               	subwf	(_gLedRunPara+1)^(0+128),w	;volatile
  6959  0C5E  1D03               	skipz
  6960  0C5F  2C62               	goto	u6535
  6961  0C60  0852               	movf	(_gLedRunPara^(0+128)+10),w	;volatile
  6962  0C61  0248               	subwf	_gLedRunPara^(0+128),w	;volatile
  6963  0C62                     u6535:	
  6964  0C62  1803               	skipnc
  6965  0C63  2C68               	goto	l7159
  6966                           
  6967                           ;led.c: 379: gLedRunPara.mCurrentBright[0]++;
  6968  0C64  0AC8               	incf	_gLedRunPara^(0+128),f	;volatile
  6969  0C65  1903               	skipnz
  6970  0C66  0AC9               	incf	(_gLedRunPara+1)^(0+128),f	;volatile
  6971                           
  6972                           ;led.c: 380: } else if (gLedRunPara.mCurrentBright[0] > gLedRunPara.mTargetBright[0]) {
  6973  0C67  2C74               	goto	l7163
  6974  0C68                     l7159:	
  6975  0C68  0849               	movf	(_gLedRunPara+1)^(0+128),w	;volatile
  6976  0C69  0253               	subwf	((_gLedRunPara+1)^(0+128)+10),w	;volatile
  6977  0C6A  1D03               	skipz
  6978  0C6B  2C6E               	goto	u6545
  6979  0C6C  0848               	movf	_gLedRunPara^(0+128),w	;volatile
  6980  0C6D  0252               	subwf	(_gLedRunPara^(0+128)+10),w	;volatile
  6981  0C6E                     u6545:	
  6982  0C6E  1803               	skipnc
  6983  0C6F  2C74               	goto	l7163
  6984                           
  6985                           ;led.c: 381: gLedRunPara.mCurrentBright[0]--;
  6986  0C70  3001               	movlw	1
  6987  0C71  02C8               	subwf	_gLedRunPara^(0+128),f	;volatile
  6988  0C72  3000               	movlw	0
  6989  0C73  3BC9               	subwfb	(_gLedRunPara+1)^(0+128),f	;volatile
  6990  0C74                     l7163:	
  6991                           
  6992                           ;led.c: 382: }
  6993                           ;led.c: 383: }
  6994                           ;led.c: 384: gLedRunPara.auto_num++;
  6995  0C74  0021               	movlb	1	; select bank1
  6996  0C75  0ADE               	incf	(_gLedRunPara^(0+128)+22),f	;volatile
  6997  0C76  1903               	skipnz
  6998  0C77  0ADF               	incf	((_gLedRunPara+1)^(0+128)+22),f	;volatile
  6999                           
  7000                           ;led.c: 385: if ((gLedRunPara.auto_num & 0x01) == 0) {
  7001  0C78  185E               	btfsc	(_gLedRunPara^(0+128)+22),0	;volatile
  7002  0C79  2C9F               	goto	l7185
  7003                           
  7004                           ;led.c: 386: for (uint8_t i = 1; i < 5; i++) {
  7005  0C7A  0020               	movlb	0	; select bank0
  7006  0C7B  01DB               	clrf	Led_AutoRun@i
  7007  0C7C  0ADB               	incf	Led_AutoRun@i,f
  7008  0C7D                     l7173:	
  7009                           
  7010                           ;led.c: 387: if (gLedRunPara.mCurrentBright[i] < gLedRunPara.mTargetBright[i]) {
  7011  0C7D  355B               	lslf	Led_AutoRun@i,w
  7012  0C7E  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  7013  0C7F  2670  3188         	fcall	PL134	;call to abstracted procedure
  7014  0C81  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
  7015  0C82  2615  3188         	fcall	PL82	;call to abstracted procedure
  7016  0C84  1803               	skipnc
  7017  0C85  2C8D               	goto	l7177
  7018                           
  7019                           ;led.c: 388: gLedRunPara.mCurrentBright[i]++;
  7020  0C86  355B               	lslf	Led_AutoRun@i,w
  7021  0C87  3184  24E7  3188   	fcall	PL52	;call to abstracted procedure
  7022  0C8A  1803               	skipnc
  7023  0C8B  0A81               	incf	1,f
  7024                           
  7025                           ;led.c: 389: } else if (gLedRunPara.mCurrentBright[i] > gLedRunPara.mTargetBright[i]) {
  7026  0C8C  2C9A               	goto	l7181
  7027  0C8D                     l7177:	
  7028  0C8D  355B               	lslf	Led_AutoRun@i,w
  7029  0C8E  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
  7030  0C8F  2670  3188         	fcall	PL134	;call to abstracted procedure
  7031  0C91  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  7032  0C92  2615  3188         	fcall	PL82	;call to abstracted procedure
  7033  0C94  1803               	skipnc
  7034  0C95  2C9A               	goto	l7181
  7035                           
  7036                           ;led.c: 390: gLedRunPara.mCurrentBright[i]--;
  7037  0C96  355B               	lslf	Led_AutoRun@i,w
  7038  0C97  3184  24CB  3188   	fcall	PL24	;call to abstracted procedure
  7039  0C9A                     l7181:	
  7040  0C9A  3005               	movlw	5
  7041  0C9B  0ADB               	incf	Led_AutoRun@i,f
  7042  0C9C  025B               	subwf	Led_AutoRun@i,w
  7043  0C9D  1C03               	skipc
  7044  0C9E  2C7D               	goto	l7173
  7045  0C9F                     l7185:	
  7046                           
  7047                           ;led.c: 391: }
  7048                           ;led.c: 392: }
  7049                           ;led.c: 393: }
  7050                           ;led.c: 394: Led_UpdateBright();
  7051  0C9F  2CA0               	ljmp	l6017
  7052  0CA0                     __end_of_Led_AutoRun:	
  7053  0CA0                     __ptext53:	
  7054 ;; *************** function _Led_UpdateBright *****************
  7055 ;; Defined at:
  7056 ;;		line 183 in file "user/src/led.c"
  7057 ;; Parameters:    Size  Location     Type
  7058 ;;		None
  7059 ;; Auto vars:     Size  Location     Type
  7060 ;;  i               1   17[BANK0 ] unsigned char 
  7061 ;; Return value:  Size  Location     Type
  7062 ;;                  1    wreg      void 
  7063 ;; Registers used:
  7064 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7065 ;; Tracked objects:
  7066 ;;		On entry : 1E/1
  7067 ;;		On exit  : 1F/0
  7068 ;;		Unchanged: 0/0
  7069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;Total ram usage:        1 bytes
  7075 ;; Hardware stack levels used:    1
  7076 ;; Hardware stack levels required when called:    8
  7077 ;; This function calls:
  7078 ;;		_PWM1_LoadDutyValue
  7079 ;;		_PWM2_LoadDutyValue
  7080 ;;		_PWM3_LoadDutyValue
  7081 ;;		_PWM4_LoadDutyValue
  7082 ;;		_PWM5_LoadDutyValue
  7083 ;; This function is called by:
  7084 ;;		_Led_Initialize
  7085 ;;		_Led_CheckAutoStatus
  7086 ;;		_Led_AutoRun
  7087 ;; This function uses a non-reentrant model
  7088 ;;
  7089                           
  7090                           
  7091                           ;psect for function _Led_UpdateBright
  7092  0CA0                     _Led_UpdateBright:	
  7093  0CA0                     l6017:	
  7094                           ;incstack = 0
  7095                           ; Regs used in _Led_UpdateBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7096                           
  7097                           
  7098                           ;led.c: 184: for (uint8_t i = 0; i < 5; i++) {
  7099  0CA0  0020               	movlb	0	; select bank0
  7100  0CA1  01D1               	clrf	Led_UpdateBright@i
  7101  0CA2                     l6023:	
  7102                           
  7103                           ;led.c: 185: loadDuty[i](gLedRunPara.mCurrentBright[i]);
  7104  0CA2  3551               	lslf	Led_UpdateBright@i,w
  7105  0CA3  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
  7106  0CA4  0086               	movwf	6
  7107  0CA5  0187               	clrf	7
  7108  0CA6  3F40               	moviw [0]fsr1
  7109  0CA7  00CD               	movwf	PWM5_LoadDutyValue@dutyValue
  7110  0CA8  3F41               	moviw [1]fsr1
  7111  0CA9  00CE               	movwf	PWM5_LoadDutyValue@dutyValue+1
  7112  0CAA  3551               	lslf	Led_UpdateBright@i,w
  7113  0CAB  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
  7114  0CAC  0086               	movwf	6
  7115  0CAD  3F41               	moviw [1]fsr1
  7116  0CAE  008A               	movwf	10
  7117  0CAF  3F40               	moviw [0]fsr1
  7118  0CB0  000A               	callw
  7119  0CB1  3188               	pagesel	$
  7120  0CB2  0020               	movlb	0	; select bank0
  7121  0CB3  3005               	movlw	5
  7122  0CB4  0AD1               	incf	Led_UpdateBright@i,f
  7123  0CB5  0251               	subwf	Led_UpdateBright@i,w
  7124  0CB6  1803               	btfsc	3,0
  7125  0CB7  0008               	return
  7126  0CB8  2CA2               	goto	l6023
  7127  0CB9                     __end_of_Led_UpdateBright:	
  7128  0CB9                     __ptext27:	
  7129 ;; *************** function _Led_CheckAutoStatus *****************
  7130 ;; Defined at:
  7131 ;;		line 339 in file "user/src/led.c"
  7132 ;; Parameters:    Size  Location     Type
  7133 ;;		None
  7134 ;; Auto vars:     Size  Location     Type
  7135 ;;  i               1   30[BANK0 ] unsigned char 
  7136 ;;  i               1   29[BANK0 ] unsigned char 
  7137 ;;  i               1   31[BANK0 ] unsigned char 
  7138 ;;  ct              2   27[BANK0 ] unsigned int 
  7139 ;;  sunset          2   25[BANK0 ] unsigned int 
  7140 ;;  sunrise         2   23[BANK0 ] unsigned int 
  7141 ;; Return value:  Size  Location     Type
  7142 ;;                  1    wreg      void 
  7143 ;; Registers used:
  7144 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7145 ;; Tracked objects:
  7146 ;;		On entry : 1F/0
  7147 ;;		On exit  : 1E/0
  7148 ;;		Unchanged: 0/0
  7149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7152 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;Total ram usage:       13 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; Hardware stack levels required when called:    9
  7157 ;; This function calls:
  7158 ;;		_Led_UpdateBright
  7159 ;;		_RTC_GetTime
  7160 ;;		___wmul
  7161 ;; This function is called by:
  7162 ;;		_main
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           
  7167                           ;psect for function _Led_CheckAutoStatus
  7168  0CB9                     _Led_CheckAutoStatus:	
  7169                           
  7170                           ;led.c: 340: uint16_t ct = RTC_GetTime()->hour * 60u + RTC_GetTime()->minute;
  7171                           
  7172                           ;incstack = 0
  7173                           ; Regs used in _Led_CheckAutoStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7174  0CB9  2271  3188         	fcall	_RTC_GetTime
  7175  0CBB  264A               	fcall	PL114	;call to abstracted procedure
  7176  0CBC  3195  2562  3188   	fcall	___wmul
  7177  0CBF  084E               	movf	?___wmul+1,w
  7178  0CC0  00DC               	movwf	Led_CheckAutoStatus@ct+1
  7179  0CC1  084D               	movf	?___wmul,w
  7180  0CC2  00DB               	movwf	Led_CheckAutoStatus@ct
  7181  0CC3  2271  3188         	fcall	_RTC_GetTime
  7182  0CC5  0020               	movlb	0	; select bank0
  7183  0CC6  00D3               	movwf	??_Led_CheckAutoStatus
  7184  0CC7  3E01               	addlw	1
  7185  0CC8  0086               	movwf	6
  7186  0CC9  0187               	clrf	7
  7187  0CCA  0801               	movf	1,w
  7188  0CCB  07DB               	addwf	Led_CheckAutoStatus@ct,f
  7189  0CCC  1803               	skipnc
  7190  0CCD  0ADC               	incf	Led_CheckAutoStatus@ct+1,f
  7191                           
  7192                           ;led.c: 341: uint16_t sunrise = gLedPara.mSunrise;
  7193  0CCE  30D8               	movlw	216
  7194  0CCF  0086               	movwf	6
  7195  0CD0  3023               	movlw	35
  7196  0CD1  0087               	movwf	7
  7197  0CD2  3F40               	moviw [0]fsr1
  7198  0CD3  00D7               	movwf	Led_CheckAutoStatus@sunrise
  7199  0CD4  3F41               	moviw [1]fsr1
  7200  0CD5  00D8               	movwf	Led_CheckAutoStatus@sunrise+1
  7201                           
  7202                           ;led.c: 342: uint16_t sunset = gLedPara.mSunset;
  7203  0CD6  30E4               	movlw	228
  7204  0CD7  0086               	movwf	6
  7205  0CD8  3F40               	moviw [0]fsr1
  7206  0CD9  00D9               	movwf	Led_CheckAutoStatus@sunset
  7207  0CDA  3F41               	moviw [1]fsr1
  7208  0CDB  00DA               	movwf	Led_CheckAutoStatus@sunset+1
  7209                           
  7210                           ;led.c: 343: if (sunrise == sunset) {
  7211  0CDC  0658               	xorwf	Led_CheckAutoStatus@sunrise+1,w
  7212  0CDD  1D03               	skipz
  7213  0CDE  2CE1               	goto	u6435
  7214  0CDF  0859               	movf	Led_CheckAutoStatus@sunset,w
  7215  0CE0  0657               	xorwf	Led_CheckAutoStatus@sunrise,w
  7216  0CE1                     u6435:	
  7217  0CE1  1D03               	skipz
  7218  0CE2  2CFF               	goto	l7101
  7219                           
  7220                           ;led.c: 344: for (uint8_t i = 0; i < 5; i++) {
  7221  0CE3  01DF               	clrf	Led_CheckAutoStatus@i
  7222  0CE4                     l7089:	
  7223                           
  7224                           ;led.c: 345: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
  7225  0CE4  085F               	movf	Led_CheckAutoStatus@i,w
  7226  0CE5  00D3               	movwf	??_Led_CheckAutoStatus
  7227  0CE6  30E6               	movlw	230
  7228  0CE7  25F3  3188         	fcall	PL26	;call to abstracted procedure
  7229  0CE9  355F               	lslf	Led_CheckAutoStatus@i,w
  7230  0CEA  25EB  3188         	fcall	PL22	;call to abstracted procedure
  7231                           
  7232                           ;led.c: 346: gLedRunPara.mCurrentBright[i] = gLedPara.mNightBright[i];
  7233  0CEC  085F               	movf	Led_CheckAutoStatus@i,w
  7234  0CED  00D3               	movwf	??_Led_CheckAutoStatus
  7235  0CEE  30E6               	movlw	230
  7236  0CEF  25F3  3188         	fcall	PL26	;call to abstracted procedure
  7237  0CF1  355F               	lslf	Led_CheckAutoStatus@i,w
  7238  0CF2  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
  7239  0CF3  0084               	movwf	4
  7240  0CF4  2610  3188         	fcall	PL56	;call to abstracted procedure
  7241  0CF6  0ADF               	incf	Led_CheckAutoStatus@i,f
  7242  0CF7  025F               	subwf	Led_CheckAutoStatus@i,w
  7243  0CF8  1C03               	skipc
  7244  0CF9  2CE4               	goto	l7089
  7245                           
  7246                           ;led.c: 347: }
  7247                           ;led.c: 348: gLedRunPara.auto_state = 0;
  7248  0CFA  0021               	movlb	1	; select bank1
  7249  0CFB  01DD               	clrf	(_gLedRunPara^(0+128)+21)	;volatile
  7250                           
  7251                           ;led.c: 349: gLedRunPara.auto_num = 0;
  7252  0CFC  01DE               	clrf	(_gLedRunPara^(0+128)+22)	;volatile
  7253  0CFD  01DF               	clrf	((_gLedRunPara+1)^(0+128)+22)	;volatile
  7254                           
  7255                           ;led.c: 350: Led_UpdateBright();
  7256  0CFE  2CA0               	ljmp	l6017
  7257  0CFF                     l7101:	
  7258                           
  7259                           ;led.c: 352: }
  7260                           ;led.c: 353: if (ct == sunrise) {
  7261  0CFF  0858               	movf	Led_CheckAutoStatus@sunrise+1,w
  7262  0D00  065C               	xorwf	Led_CheckAutoStatus@ct+1,w
  7263  0D01  1D03               	skipz
  7264  0D02  2D05               	goto	u6455
  7265  0D03  0857               	movf	Led_CheckAutoStatus@sunrise,w
  7266  0D04  065B               	xorwf	Led_CheckAutoStatus@ct,w
  7267  0D05                     u6455:	
  7268  0D05  1D03               	skipz
  7269  0D06  2D1B               	goto	l7121
  7270                           
  7271                           ;led.c: 354: for (uint8_t i = 0; i < 5; i++) {
  7272  0D07  01DD               	clrf	Led_CheckAutoStatus@i_1252
  7273  0D08                     l7109:	
  7274                           
  7275                           ;led.c: 355: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
  7276  0D08  085D               	movf	Led_CheckAutoStatus@i_1252,w
  7277  0D09  00D3               	movwf	??_Led_CheckAutoStatus
  7278  0D0A  30DA               	movlw	218
  7279  0D0B  25F3  3188         	fcall	PL26	;call to abstracted procedure
  7280  0D0D  355D               	lslf	Led_CheckAutoStatus@i_1252,w
  7281  0D0E  25EB  3188         	fcall	PL22	;call to abstracted procedure
  7282  0D10  3005               	movlw	5
  7283  0D11  0ADD               	incf	Led_CheckAutoStatus@i_1252,f
  7284  0D12  025D               	subwf	Led_CheckAutoStatus@i_1252,w
  7285  0D13  1C03               	skipc
  7286  0D14  2D08               	goto	l7109
  7287                           
  7288                           ;led.c: 356: }
  7289                           ;led.c: 357: gLedRunPara.auto_state = 1;
  7290  0D15  3001               	movlw	1
  7291  0D16                     L1:	
  7292  0D16  0021               	movlb	1	; select bank1
  7293  0D17  00DD               	movwf	(_gLedRunPara^(0+128)+21)	;volatile
  7294                           
  7295                           ;led.c: 358: gLedRunPara.auto_num = 0;
  7296  0D18  01DE               	clrf	(_gLedRunPara^(0+128)+22)	;volatile
  7297  0D19  01DF               	clrf	((_gLedRunPara+1)^(0+128)+22)	;volatile
  7298  0D1A  0008               	return
  7299  0D1B                     l7121:	
  7300                           
  7301                           ;led.c: 360: }
  7302                           ;led.c: 361: if (ct == sunset) {
  7303  0D1B  085A               	movf	Led_CheckAutoStatus@sunset+1,w
  7304  0D1C  065C               	xorwf	Led_CheckAutoStatus@ct+1,w
  7305  0D1D  1D03               	skipz
  7306  0D1E  2D21               	goto	u6475
  7307  0D1F  0859               	movf	Led_CheckAutoStatus@sunset,w
  7308  0D20  065B               	xorwf	Led_CheckAutoStatus@ct,w
  7309  0D21                     u6475:	
  7310  0D21  1D03               	skipz
  7311  0D22  0008               	return
  7312                           
  7313                           ;led.c: 362: for (uint8_t i = 0; i < 5; i++) {
  7314  0D23  01DE               	clrf	Led_CheckAutoStatus@i_1253
  7315  0D24                     l7129:	
  7316                           
  7317                           ;led.c: 363: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
  7318  0D24  085E               	movf	Led_CheckAutoStatus@i_1253,w
  7319  0D25  00D3               	movwf	??_Led_CheckAutoStatus
  7320  0D26  30E6               	movlw	230
  7321  0D27  25F3  3188         	fcall	PL26	;call to abstracted procedure
  7322  0D29  355E               	lslf	Led_CheckAutoStatus@i_1253,w
  7323  0D2A  25EB  3188         	fcall	PL22	;call to abstracted procedure
  7324  0D2C  3005               	movlw	5
  7325  0D2D  0ADE               	incf	Led_CheckAutoStatus@i_1253,f
  7326  0D2E  025E               	subwf	Led_CheckAutoStatus@i_1253,w
  7327  0D2F  1C03               	skipc
  7328  0D30  2D24               	goto	l7129
  7329                           
  7330                           ;led.c: 364: }
  7331                           ;led.c: 365: gLedRunPara.auto_state = 2;
  7332  0D31  3002               	movlw	2
  7333  0D32  2D16               	goto	L1
  7334  0D33                     __end_of_Led_CheckAutoStatus:	
  7335  0D33                     __ptext25:	
  7336 ;; *************** function _DATAEE_ReadBuffer *****************
  7337 ;; Defined at:
  7338 ;;		line 55 in file "driver/src/eeprom.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;  addr            2   15[BANK0 ] unsigned int 
  7341 ;;  buf             2   17[BANK0 ] PTR unsigned char 
  7342 ;;		 -> gLedPara(117), 
  7343 ;;  len             1   19[BANK0 ] unsigned char 
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  i               1   21[BANK0 ] unsigned char 
  7346 ;; Return value:  Size  Location     Type
  7347 ;;                  1    wreg      void 
  7348 ;; Registers used:
  7349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7350 ;; Tracked objects:
  7351 ;;		On entry : 1F/0
  7352 ;;		On exit  : 1F/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7355 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;Total ram usage:        7 bytes
  7360 ;; Hardware stack levels used:    1
  7361 ;; Hardware stack levels required when called:    8
  7362 ;; This function calls:
  7363 ;;		_DATAEE_ReadByte
  7364 ;; This function is called by:
  7365 ;;		_Led_InitPara
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           
  7370                           ;psect for function _DATAEE_ReadBuffer
  7371  0D33                     _DATAEE_ReadBuffer:	
  7372                           
  7373                           ;eeprom.c: 57: for ( uint8_t i = len; i != 0; i-- )
  7374                           
  7375                           ;incstack = 0
  7376                           ; Regs used in _DATAEE_ReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7377  0D33  0853               	movf	DATAEE_ReadBuffer@len,w
  7378  0D34  00D5               	movwf	DATAEE_ReadBuffer@i
  7379  0D35                     l4785:	
  7380  0D35  0855               	movf	DATAEE_ReadBuffer@i,w
  7381  0D36  1903               	btfsc	3,2
  7382  0D37  0008               	return
  7383                           
  7384                           ;eeprom.c: 58: {
  7385                           ;eeprom.c: 59: *buf++ = DATAEE_ReadByte ( addr++ );
  7386  0D38  0850               	movf	DATAEE_ReadBuffer@addr+1,w
  7387  0D39  00CE               	movwf	DATAEE_ReadByte@addr+1
  7388  0D3A  084F               	movf	DATAEE_ReadBuffer@addr,w
  7389  0D3B  00CD               	movwf	DATAEE_ReadByte@addr
  7390  0D3C  254E  3188         	fcall	_DATAEE_ReadByte
  7391  0D3E  0020               	movlb	0	; select bank0
  7392  0D3F  00D4               	movwf	??_DATAEE_ReadBuffer
  7393  0D40  0851               	movf	DATAEE_ReadBuffer@buf,w
  7394  0D41  0086               	movwf	6
  7395  0D42  0852               	movf	DATAEE_ReadBuffer@buf+1,w
  7396  0D43  0087               	movwf	7
  7397  0D44  0854               	movf	??_DATAEE_ReadBuffer,w
  7398  0D45  0081               	movwf	1
  7399  0D46  0ACF               	incf	DATAEE_ReadBuffer@addr,f
  7400  0D47  1903               	skipnz
  7401  0D48  0AD0               	incf	DATAEE_ReadBuffer@addr+1,f
  7402  0D49  0AD1               	incf	DATAEE_ReadBuffer@buf,f
  7403  0D4A  1903               	skipnz
  7404  0D4B  0AD2               	incf	DATAEE_ReadBuffer@buf+1,f
  7405  0D4C  03D5               	decf	DATAEE_ReadBuffer@i,f
  7406  0D4D  2D35               	goto	l4785
  7407  0D4E                     __end_of_DATAEE_ReadBuffer:	
  7408  0D4E                     __ptext26:	
  7409 ;; *************** function _DATAEE_ReadByte *****************
  7410 ;; Defined at:
  7411 ;;		line 23 in file "driver/src/eeprom.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;  addr            2   13[BANK0 ] unsigned int 
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;		None
  7416 ;; Return value:  Size  Location     Type
  7417 ;;                  1    wreg      unsigned char 
  7418 ;; Registers used:
  7419 ;;		wreg
  7420 ;; Tracked objects:
  7421 ;;		On entry : 1F/0
  7422 ;;		On exit  : 1F/11
  7423 ;;		Unchanged: 0/0
  7424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7425 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7428 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7429 ;;Total ram usage:        2 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; Hardware stack levels required when called:    7
  7432 ;; This function calls:
  7433 ;;		Nothing
  7434 ;; This function is called by:
  7435 ;;		_DATAEE_ReadBuffer
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439                           
  7440                           ;psect for function _DATAEE_ReadByte
  7441  0D4E                     _DATAEE_ReadByte:	
  7442                           
  7443                           ;eeprom.c: 25: NVMADRH = addr >> 8;
  7444                           
  7445                           ;incstack = 0
  7446                           ; Regs used in _DATAEE_ReadByte: [wreg]
  7447  0D4E  084E               	movf	DATAEE_ReadByte@addr+1,w
  7448  0D4F  0031               	movlb	17	; select bank17
  7449  0D50  0092               	movwf	18	;volatile
  7450                           
  7451                           ;eeprom.c: 26: NVMADRL = addr & 0xFF;
  7452  0D51  0020               	movlb	0	; select bank0
  7453  0D52  084D               	movf	DATAEE_ReadByte@addr,w
  7454  0D53  0031               	movlb	17	; select bank17
  7455  0D54  0091               	movwf	17	;volatile
  7456                           
  7457                           ;eeprom.c: 27: NVMCON1bits.NVMREGS = 1;
  7458  0D55  1715               	bsf	21,6	;volsfr
  7459                           
  7460                           ;eeprom.c: 28: NVMCON1bits.RD = 1;
  7461  0D56  1415               	bsf	21,0	;volsfr
  7462                           
  7463                           ;eeprom.c: 29: __nop();
  7464  0D57  0000               	nop
  7465                           
  7466                           ;eeprom.c: 30: __nop();
  7467  0D58  0000               	nop
  7468                           
  7469                           ;eeprom.c: 32: return ( NVMDATL );
  7470  0D59  0031               	movlb	17	; select bank17
  7471  0D5A  0813               	movf	19,w	;volatile
  7472  0D5B  0008               	return
  7473  0D5C                     __end_of_DATAEE_ReadByte:	
  7474  0D5C                     __ptext13:	
  7475 ;; *************** function _PIN_Initialize *****************
  7476 ;; Defined at:
  7477 ;;		line 102 in file "user/src/main.c"
  7478 ;; Parameters:    Size  Location     Type
  7479 ;;		None
  7480 ;; Auto vars:     Size  Location     Type
  7481 ;;  state           1   13[BANK0 ] unsigned char 
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  1    wreg      void 
  7484 ;; Registers used:
  7485 ;;		wreg, status,2, status,0
  7486 ;; Tracked objects:
  7487 ;;		On entry : B1F/0
  7488 ;;		On exit  : 0/0
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7494 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7495 ;;Total ram usage:        1 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; Hardware stack levels required when called:    7
  7498 ;; This function calls:
  7499 ;;		Nothing
  7500 ;; This function is called by:
  7501 ;;		_SYSTEM_Initialize
  7502 ;; This function uses a non-reentrant model
  7503 ;;
  7504                           
  7505                           
  7506                           ;psect for function _PIN_Initialize
  7507  0D5C                     _PIN_Initialize:	
  7508                           
  7509                           ;main.c: 103: LATA = 0x00;
  7510                           
  7511                           ;incstack = 0
  7512                           ; Regs used in _PIN_Initialize: [wreg+status,2+status,0]
  7513  0D5C  0022               	movlb	2	; select bank2
  7514  0D5D  018C               	clrf	12	;volatile
  7515                           
  7516                           ;main.c: 104: LATB = 0x80;
  7517  0D5E  3080               	movlw	128
  7518  0D5F  008D               	movwf	13	;volatile
  7519                           
  7520                           ;main.c: 105: LATC = 0x00;
  7521  0D60  018E               	clrf	14	;volatile
  7522                           
  7523                           ;main.c: 107: TRISA = 0x30;
  7524  0D61  3030               	movlw	48
  7525  0D62  0021               	movlb	1	; select bank1
  7526  0D63  008C               	movwf	12	;volatile
  7527                           
  7528                           ;main.c: 108: TRISB = 0x60;
  7529  0D64  3060               	movlw	96
  7530  0D65  008D               	movwf	13	;volatile
  7531                           
  7532                           ;main.c: 109: TRISC = 0x05;
  7533  0D66  3005               	movlw	5
  7534  0D67  008E               	movwf	14	;volatile
  7535                           
  7536                           ;main.c: 111: ANSELC = 0x04;
  7537  0D68  3004               	movlw	4
  7538  0D69  0023               	movlb	3	; select bank3
  7539  0D6A  008E               	movwf	14	;volatile
  7540                           
  7541                           ;main.c: 112: ANSELB = 0x00;
  7542  0D6B  018D               	clrf	13	;volatile
  7543                           
  7544                           ;main.c: 113: ANSELA = 0x00;
  7545  0D6C  018C               	clrf	12	;volatile
  7546                           
  7547                           ;main.c: 115: WPUB = 0x60;
  7548  0D6D  3060               	movlw	96
  7549  0D6E  0024               	movlb	4	; select bank4
  7550  0D6F  008D               	movwf	13	;volatile
  7551                           
  7552                           ;main.c: 116: WPUA = 0x00;
  7553  0D70  018C               	clrf	12	;volatile
  7554                           
  7555                           ;main.c: 117: WPUC = 0x01;
  7556  0D71  3001               	movlw	1
  7557  0D72  008E               	movwf	14	;volatile
  7558                           
  7559                           ;main.c: 119: ODCONA = 0x00;
  7560  0D73  0025               	movlb	5	; select bank5
  7561  0D74  018C               	clrf	12	;volatile
  7562                           
  7563                           ;main.c: 120: ODCONB = 0x00;
  7564  0D75  018D               	clrf	13	;volatile
  7565                           
  7566                           ;main.c: 121: ODCONC = 0x00;
  7567  0D76  018E               	clrf	14	;volatile
  7568                           
  7569                           ;main.c: 123: uint8_t state = GIE;
  7570  0D77  3000               	movlw	0
  7571  0D78  1B8B               	btfsc	11,7	;volatile
  7572  0D79  3001               	movlw	1
  7573  0D7A  0020               	movlb	0	; select bank0
  7574  0D7B  00CD               	movwf	PIN_Initialize@state
  7575                           
  7576                           ;main.c: 124: GIE = 0;
  7577  0D7C  138B               	bcf	11,7	;volatile
  7578                           
  7579                           ;main.c: 125: PPSLOCK = 0x55;
  7580                           
  7581                           ;main.c: 126: PPSLOCK = 0xAA;
  7582  0D7D  2678  3188         	fcall	PL150	;call to abstracted procedure
  7583                           
  7584                           ;main.c: 127: PPSLOCKbits.PPSLOCKED = 0x00;
  7585  0D7F  100F               	bcf	15,0	;volatile
  7586                           
  7587                           ;main.c: 129: RC5PPSbits.RC5PPS = 0x0C;
  7588  0D80  003D               	movlb	29	; select bank29
  7589  0D81  0825               	movf	37,w	;volatile
  7590  0D82  39E0               	andlw	-32
  7591  0D83  380C               	iorlw	12
  7592  0D84  00A5               	movwf	37	;volatile
  7593                           
  7594                           ;main.c: 130: RC3PPSbits.RC3PPS = 0x0D;
  7595  0D85  0823               	movf	35,w	;volatile
  7596  0D86  39E0               	andlw	-32
  7597  0D87  380D               	iorlw	13
  7598  0D88  00A3               	movwf	35	;volatile
  7599                           
  7600                           ;main.c: 131: RA2PPSbits.RA2PPS = 0x0E;
  7601  0D89  0812               	movf	18,w	;volatile
  7602  0D8A  39E0               	andlw	-32
  7603  0D8B  380E               	iorlw	14
  7604  0D8C  0092               	movwf	18	;volatile
  7605                           
  7606                           ;main.c: 132: RC1PPSbits.RC1PPS = 0x0F;
  7607  0D8D  0821               	movf	33,w	;volatile
  7608  0D8E  39E0               	andlw	-32
  7609  0D8F  380F               	iorlw	15
  7610  0D90  00A1               	movwf	33	;volatile
  7611                           
  7612                           ;main.c: 133: RC7PPSbits.RC7PPS = 0x02;
  7613  0D91  0827               	movf	39,w	;volatile
  7614  0D92  39E0               	andlw	-32
  7615  0D93  3802               	iorlw	2
  7616  0D94  00A7               	movwf	39	;volatile
  7617                           
  7618                           ;main.c: 134: T1GPPSbits.T1GPPS = 0x10;
  7619  0D95  003C               	movlb	28	; select bank28
  7620  0D96  0813               	movf	19,w	;volatile
  7621  0D97  39E0               	andlw	-32
  7622  0D98  3810               	iorlw	16
  7623  0D99  0093               	movwf	19	;volatile
  7624                           
  7625                           ;main.c: 135: RB7PPSbits.RB7PPS = 0x14;
  7626  0D9A  003D               	movlb	29	; select bank29
  7627  0D9B  081F               	movf	31,w	;volatile
  7628  0D9C  39E0               	andlw	-32
  7629  0D9D  3814               	iorlw	20
  7630  0D9E  009F               	movwf	31	;volatile
  7631                           
  7632                           ;main.c: 137: PPSLOCK = 0x55;
  7633                           
  7634                           ;main.c: 138: PPSLOCK = 0xAA;
  7635  0D9F  2678  3188         	fcall	PL150	;call to abstracted procedure
  7636                           
  7637                           ;main.c: 139: PPSLOCKbits.PPSLOCKED = 0x01;
  7638  0DA1  140F               	bsf	15,0	;volatile
  7639                           
  7640                           ;main.c: 141: GIE = state;
  7641  0DA2  0020               	movlb	0	; select bank0
  7642  0DA3  1C4D               	btfss	PIN_Initialize@state,0
  7643  0DA4  2DA7               	goto	u3720
  7644  0DA5  178B               	bsf	11,7	;volatile
  7645  0DA6  0008               	return
  7646  0DA7                     u3720:	
  7647  0DA7  138B               	bcf	11,7	;volatile
  7648  0DA8  0008               	return
  7649  0DA9                     __end_of_PIN_Initialize:	
  7650  0DA9                     __ptext10:	
  7651 ;; *************** function _PWM3_Initialize *****************
  7652 ;; Defined at:
  7653 ;;		line 30 in file "driver/src/pwm.c"
  7654 ;; Parameters:    Size  Location     Type
  7655 ;;		None
  7656 ;; Auto vars:     Size  Location     Type
  7657 ;;		None
  7658 ;; Return value:  Size  Location     Type
  7659 ;;                  1    wreg      void 
  7660 ;; Registers used:
  7661 ;;		wreg, status,2, status,0
  7662 ;; Tracked objects:
  7663 ;;		On entry : 1F/5
  7664 ;;		On exit  : 1F/5
  7665 ;;		Unchanged: 0/0
  7666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7671 ;;Total ram usage:        0 bytes
  7672 ;; Hardware stack levels used:    1
  7673 ;; Hardware stack levels required when called:    7
  7674 ;; This function calls:
  7675 ;;		Nothing
  7676 ;; This function is called by:
  7677 ;;		_SYSTEM_Initialize
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           
  7682                           ;psect for function _PWM3_Initialize
  7683  0DA9                     _PWM3_Initialize:	
  7684                           
  7685                           ;pwm.c: 32: CCP3CON = 0x8F;
  7686                           
  7687                           ;incstack = 0
  7688                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  7689  0DA9  308F               	movlw	143
  7690  0DAA  0026               	movlb	6	; select bank6
  7691  0DAB  0093               	movwf	19	;volatile
  7692                           
  7693                           ;pwm.c: 33: CCPR3 = 0;
  7694  0DAC  0191               	clrf	17	;volatile
  7695  0DAD  0192               	clrf	18	;volatile
  7696                           
  7697                           ;pwm.c: 34: CCPTMRSbits.C3TSEL = 0x1;
  7698  0DAE  0025               	movlb	5	; select bank5
  7699  0DAF  081F               	movf	31,w	;volatile
  7700  0DB0  39CF               	andlw	-49
  7701  0DB1  3810               	iorlw	16
  7702  0DB2  009F               	movwf	31	;volatile
  7703  0DB3  0008               	return
  7704  0DB4                     __end_of_PWM3_Initialize:	
  7705  0DB4                     __ptext2:	
  7706 ;; *************** function _TMR0_StartTimer *****************
  7707 ;; Defined at:
  7708 ;;		line 17 in file "driver/src/tmr0.c"
  7709 ;; Parameters:    Size  Location     Type
  7710 ;;		None
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;		None
  7713 ;; Return value:  Size  Location     Type
  7714 ;;                  1    wreg      void 
  7715 ;; Registers used:
  7716 ;;		None
  7717 ;; Tracked objects:
  7718 ;;		On entry : 1E/0
  7719 ;;		On exit  : 1F/0
  7720 ;;		Unchanged: 0/0
  7721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7726 ;;Total ram usage:        0 bytes
  7727 ;; Hardware stack levels used:    1
  7728 ;; Hardware stack levels required when called:    7
  7729 ;; This function calls:
  7730 ;;		Nothing
  7731 ;; This function is called by:
  7732 ;;		_main
  7733 ;; This function uses a non-reentrant model
  7734 ;;
  7735                           
  7736                           
  7737                           ;psect for function _TMR0_StartTimer
  7738  0DB4                     _TMR0_StartTimer:	
  7739                           
  7740                           ;tmr0.c: 19: T0CON0bits.T0EN = 1;
  7741                           
  7742                           ;incstack = 0
  7743                           ; Regs used in _TMR0_StartTimer: []
  7744  0DB4  0020               	movlb	0	; select bank0
  7745  0DB5  1797               	bsf	23,7	;volatile
  7746  0DB6  0008               	return
  7747  0DB7                     __end_of_TMR0_StartTimer:	
  7748  0DB7                     __ptext1:	
  7749 ;; *************** function _TMR2_StartTimer *****************
  7750 ;; Defined at:
  7751 ;;		line 16 in file "driver/src/tmr2.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;		None
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;		None
  7756 ;; Return value:  Size  Location     Type
  7757 ;;                  1    wreg      void 
  7758 ;; Registers used:
  7759 ;;		None
  7760 ;; Tracked objects:
  7761 ;;		On entry : 1F/0
  7762 ;;		On exit  : 1F/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;Total ram usage:        0 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; Hardware stack levels required when called:    7
  7772 ;; This function calls:
  7773 ;;		Nothing
  7774 ;; This function is called by:
  7775 ;;		_main
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           
  7780                           ;psect for function _TMR2_StartTimer
  7781  0DB7                     _TMR2_StartTimer:	
  7782                           
  7783                           ;tmr2.c: 18: T2CONbits.TMR2ON = 1;
  7784                           
  7785                           ;incstack = 0
  7786                           ; Regs used in _TMR2_StartTimer: []
  7787  0DB7  151F               	bsf	31,2	;volatile
  7788  0DB8  0008               	return
  7789  0DB9                     __end_of_TMR2_StartTimer:	
  7790  0DB9                     PL2:	
  7791  0DB9  01D7               	clrf	??_Led_InitPara+1
  7792  0DBA  35D6               	lslf	??_Led_InitPara,f
  7793  0DBB  0DD7               	rlf	??_Led_InitPara+1,f
  7794  0DBC  00D8               	movwf	??_Led_InitPara+2
  7795  0DBD  3023               	movlw	35
  7796  0DBE  00D9               	movwf	??_Led_InitPara+3
  7797  0DBF  0856               	movf	??_Led_InitPara,w
  7798  0DC0  0758               	addwf	??_Led_InitPara+2,w
  7799  0DC1  0086               	movwf	6
  7800  0DC2  0857               	movf	??_Led_InitPara+1,w
  7801  0DC3  3D59               	addwfc	??_Led_InitPara+3,w
  7802  0DC4  0087               	movwf	7
  7803  0DC5  3F40               	moviw [0]fsr1
  7804  0DC6  00DA               	movwf	??_Led_InitPara+4
  7805  0DC7  3F41               	moviw [1]fsr1
  7806  0DC8  00DB               	movwf	??_Led_InitPara+5
  7807  0DC9  3003               	movlw	3
  7808  0DCA  025B               	subwf	??_Led_InitPara+5,w
  7809  0DCB  34E9               	retlw	233
  7810  0DCC                     __end_ofPL2:	
  7811  0DCC                     PL4:	
  7812  0DCC  01D9               	clrf	??_Led_InitPara+3
  7813  0DCD  35D8               	lslf	??_Led_InitPara+2,f
  7814  0DCE  0DD9               	rlf	??_Led_InitPara+3,f
  7815  0DCF  00DA               	movwf	??_Led_InitPara+4
  7816  0DD0  3023               	movlw	35
  7817  0DD1  00DB               	movwf	??_Led_InitPara+5
  7818  0DD2  0858               	movf	??_Led_InitPara+2,w
  7819  0DD3  075A               	addwf	??_Led_InitPara+4,w
  7820  0DD4  0086               	movwf	6
  7821  0DD5  0859               	movf	??_Led_InitPara+3,w
  7822  0DD6  3D5B               	addwfc	??_Led_InitPara+5,w
  7823  0DD7  0087               	movwf	7
  7824  0DD8  0856               	movf	??_Led_InitPara,w
  7825  0DD9  3FC0               	movwi [0]fsr1
  7826  0DDA  0857               	movf	??_Led_InitPara+1,w
  7827  0DDB  3FC1               	movwi [1]fsr1
  7828  0DDC  0008               	return
  7829  0DDD                     __end_ofPL4:	
  7830  0DDD                     PL20:	
  7831  0DDD  01D4               	clrf	??_Led_Initialize+1
  7832  0DDE  35D3               	lslf	??_Led_Initialize,f
  7833  0DDF  0DD4               	rlf	??_Led_Initialize+1,f
  7834  0DE0  00D5               	movwf	??_Led_Initialize+2
  7835  0DE1  3023               	movlw	35
  7836  0DE2  00D6               	movwf	??_Led_Initialize+3
  7837  0DE3  0853               	movf	??_Led_Initialize,w
  7838  0DE4  0755               	addwf	??_Led_Initialize+2,w
  7839  0DE5  0086               	movwf	6
  7840  0DE6  0854               	movf	??_Led_Initialize+1,w
  7841  0DE7  3D56               	addwfc	??_Led_Initialize+3,w
  7842  0DE8  0087               	movwf	7
  7843  0DE9  355A               	lslf	Led_Initialize@i,w
  7844  0DEA  0008               	return
  7845  0DEB                     __end_ofPL20:	
  7846  0DEB                     PL22:	
  7847  0DEB  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  7848  0DEC  0084               	movwf	4
  7849  0DED  0185               	clrf	5
  7850  0DEE  3F40               	moviw [0]fsr1
  7851  0DEF  3F80               	movwi [0]fsr0
  7852  0DF0  3F41               	moviw [1]fsr1
  7853  0DF1  3F81               	movwi [1]fsr0
  7854  0DF2  0008               	return
  7855  0DF3                     __end_ofPL22:	
  7856  0DF3                     PL26:	
  7857  0DF3  01D4               	clrf	??_Led_CheckAutoStatus+1
  7858  0DF4  35D3               	lslf	??_Led_CheckAutoStatus,f
  7859  0DF5  0DD4               	rlf	??_Led_CheckAutoStatus+1,f
  7860  0DF6  00D5               	movwf	??_Led_CheckAutoStatus+2
  7861  0DF7  3023               	movlw	35
  7862  0DF8  00D6               	movwf	??_Led_CheckAutoStatus+3
  7863  0DF9  0853               	movf	??_Led_CheckAutoStatus,w
  7864  0DFA  0755               	addwf	??_Led_CheckAutoStatus+2,w
  7865  0DFB  0086               	movwf	6
  7866  0DFC  0854               	movf	??_Led_CheckAutoStatus+1,w
  7867  0DFD  3D56               	addwfc	??_Led_CheckAutoStatus+3,w
  7868  0DFE  0087               	movwf	7
  7869  0DFF  0008               	return
  7870  0E00                     __end_ofPL26:	
  7871  0E00                     PL40:	
  7872  0E00  30E8               	movlw	232
  7873  0E01  00D6               	movwf	??_Led_InitPara
  7874  0E02  3003               	movlw	3
  7875  0E03  00D7               	movwf	??_Led_InitPara+1
  7876  0E04  085F               	movf	Led_InitPara@i,w
  7877  0E05  00D8               	movwf	??_Led_InitPara+2
  7878  0E06  0008               	return
  7879  0E07                     __end_ofPL40:	
  7880  0E07                     PL48:	
  7881  0E07  0086               	movwf	6
  7882  0E08  3023               	movlw	35
  7883  0E09  0087               	movwf	7
  7884  0E0A  3F40               	moviw [0]fsr1
  7885  0E0B  0021               	movlb	1	; select bank1
  7886  0E0C  00D2               	movwf	(_gLedRunPara^(0+128)+10)	;volatile
  7887  0E0D  3F41               	moviw [1]fsr1
  7888  0E0E  00D3               	movwf	((_gLedRunPara+1)^(0+128)+10)	;volatile
  7889  0E0F  0008               	return
  7890  0E10                     __end_ofPL48:	
  7891  0E10                     PL56:	
  7892  0E10  3F40               	moviw [0]fsr1
  7893  0E11  3F80               	movwi [0]fsr0
  7894  0E12  3F41               	moviw [1]fsr1
  7895  0E13  3F81               	movwi [1]fsr0
  7896  0E14  3405               	retlw	5
  7897  0E15                     __end_ofPL56:	
  7898  0E15                     PL82:	
  7899  0E15  0086               	movwf	6
  7900  0E16  3F40               	moviw [0]fsr1
  7901  0E17  00D9               	movwf	??_Led_AutoRun+2
  7902  0E18  3F41               	moviw [1]fsr1
  7903  0E19  00DA               	movwf	??_Led_AutoRun+3
  7904  0E1A  0858               	movf	??_Led_AutoRun+1,w
  7905  0E1B  025A               	subwf	??_Led_AutoRun+3,w
  7906  0E1C  1D03               	skipz
  7907  0E1D  0008               	return
  7908  0E1E  0857               	movf	??_Led_AutoRun,w
  7909  0E1F  0259               	subwf	??_Led_AutoRun+2,w
  7910  0E20  0008               	return
  7911  0E21                     __end_ofPL82:	
  7912  0E21                     PL88:	
  7913  0E21  0086               	movwf	6
  7914  0E22  3F40               	moviw [0]fsr1
  7915  0E23  00D5               	movwf	??_Led_Initialize+2
  7916  0E24  3F41               	moviw [1]fsr1
  7917  0E25  00D6               	movwf	??_Led_Initialize+3
  7918  0E26  0854               	movf	??_Led_Initialize+1,w
  7919  0E27  0256               	subwf	??_Led_Initialize+3,w
  7920  0E28  1D03               	skipz
  7921  0E29  0008               	return
  7922  0E2A  0853               	movf	??_Led_Initialize,w
  7923  0E2B  0255               	subwf	??_Led_Initialize+2,w
  7924  0E2C  0008               	return
  7925  0E2D                     __end_ofPL88:	
  7926  0E2D                     PL90:	
  7927  0E2D  0086               	movwf	6
  7928  0E2E  3023               	movlw	35
  7929  0E2F  0087               	movwf	7
  7930  0E30  3F40               	moviw [0]fsr1
  7931  0E31  00D3               	movwf	??_Led_Initialize
  7932  0E32  3F41               	moviw [1]fsr1
  7933  0E33  0008               	return
  7934  0E34                     __end_ofPL90:	
  7935  0E34                     PL96:	
  7936  0E34  0086               	movwf	6
  7937  0E35  3F40               	moviw [0]fsr1
  7938  0E36  00DA               	movwf	(_gLedRunPara^(0+128)+18)	;volatile
  7939  0E37  3F41               	moviw [1]fsr1
  7940  0E38  00DB               	movwf	((_gLedRunPara+1)^(0+128)+18)	;volatile
  7941  0E39  0008               	return
  7942  0E3A                     __end_ofPL96:	
  7943  0E3A                     PL102:	
  7944  0E3A  00CD               	movwf	___wmul@multiplier
  7945  0E3B  300A               	movlw	10
  7946  0E3C  01CE               	clrf	___wmul@multiplier+1
  7947  0E3D  00CF               	movwf	___wmul@multiplicand
  7948  0E3E  01D0               	clrf	___wmul@multiplicand+1
  7949  0E3F  0008               	return
  7950  0E40                     __end_ofPL102:	
  7951  0E40                     PL106:	
  7952  0E40  0086               	movwf	6
  7953  0E41  3023               	movlw	35
  7954  0E42  0087               	movwf	7
  7955  0E43  3F40               	moviw [0]fsr1
  7956  0E44  00D6               	movwf	??_Led_InitPara
  7957  0E45  3F41               	moviw [1]fsr1
  7958  0E46  00D7               	movwf	??_Led_InitPara+1
  7959  0E47  3005               	movlw	5
  7960  0E48  0257               	subwf	??_Led_InitPara+1,w
  7961  0E49  34A0               	retlw	160
  7962  0E4A                     __end_ofPL106:	
  7963  0E4A                     PL114:	
  7964  0E4A  0086               	movwf	6
  7965  0E4B  0187               	clrf	7
  7966  0E4C  0801               	movf	1,w
  7967  0E4D  0020               	movlb	0	; select bank0
  7968  0E4E  00CD               	movwf	___wmul@multiplier
  7969  0E4F  303C               	movlw	60
  7970  0E50  01CE               	clrf	___wmul@multiplier+1
  7971  0E51  00CF               	movwf	___wmul@multiplicand
  7972  0E52  01D0               	clrf	___wmul@multiplicand+1
  7973  0E53  0008               	return
  7974  0E54                     __end_ofPL114:	
  7975  0E54                     PL116:	
  7976  0E54  30C8               	movlw	low _gLedRunPara
  7977  0E55  0020               	movlb	0	; select bank0
  7978  0E56  00CD               	movwf	Util_IncValue@pSrc
  7979  0E57  3000               	movlw	high _gLedRunPara
  7980  0E58  00CE               	movwf	Util_IncValue@pSrc+1
  7981  0E59  30E8               	movlw	232
  7982  0E5A  00CF               	movwf	Util_IncValue@max
  7983  0E5B  3003               	movlw	3
  7984  0E5C  00D0               	movwf	Util_IncValue@max+1
  7985  0E5D  0008               	return
  7986  0E5E                     __end_ofPL116:	
  7987  0E5E                     PL120:	
  7988  0E5E  0086               	movwf	6
  7989  0E5F  3F40               	moviw [0]fsr1
  7990  0E60  00D8               	movwf	(_gLedRunPara^(0+128)+16)	;volatile
  7991  0E61  3F41               	moviw [1]fsr1
  7992  0E62  00D9               	movwf	((_gLedRunPara+1)^(0+128)+16)	;volatile
  7993  0E63  0008               	return
  7994  0E64                     __end_ofPL120:	
  7995  0E64                     PL122:	
  7996  0E64  0086               	movwf	6
  7997  0E65  3F40               	moviw [0]fsr1
  7998  0E66  00D4               	movwf	(_gLedRunPara^(0+128)+12)	;volatile
  7999  0E67  3F41               	moviw [1]fsr1
  8000  0E68  00D5               	movwf	((_gLedRunPara+1)^(0+128)+12)	;volatile
  8001  0E69  0008               	return
  8002  0E6A                     __end_ofPL122:	
  8003  0E6A                     PL124:	
  8004  0E6A  0086               	movwf	6
  8005  0E6B  3F40               	moviw [0]fsr1
  8006  0E6C  00D6               	movwf	(_gLedRunPara^(0+128)+14)	;volatile
  8007  0E6D  3F41               	moviw [1]fsr1
  8008  0E6E  00D7               	movwf	((_gLedRunPara+1)^(0+128)+14)	;volatile
  8009  0E6F  0008               	return
  8010  0E70                     __end_ofPL124:	
  8011  0E70                     PL134:	
  8012  0E70  0086               	movwf	6
  8013  0E71  0187               	clrf	7
  8014  0E72  3F40               	moviw [0]fsr1
  8015  0E73  00D7               	movwf	??_Led_AutoRun
  8016  0E74  3F41               	moviw [1]fsr1
  8017  0E75  00D8               	movwf	??_Led_AutoRun+1
  8018  0E76  355B               	lslf	Led_AutoRun@i,w
  8019  0E77  0008               	return
  8020  0E78                     __end_ofPL134:	
  8021  0E78                     PL150:	
  8022  0E78  3055               	movlw	85
  8023  0E79  003C               	movlb	28	; select bank28
  8024  0E7A  008F               	movwf	15	;volatile
  8025  0E7B  30AA               	movlw	170
  8026  0E7C  008F               	movwf	15	;volatile
  8027  0E7D  0008               	return
  8028  0E7E                     __end_ofPL150:	
  8029  0E7E                     PL152:	
  8030  0E7E  0C01               	rrf	1,w
  8031  0E7F  00D3               	movwf	??_Led_Initialize
  8032  0E80  0CD3               	rrf	??_Led_Initialize,f
  8033  0E81  0C53               	rrf	??_Led_Initialize,w
  8034  0E82  390F               	andlw	15
  8035  0E83  0008               	return
  8036  0E84                     __end_ofPL152:	
  8037  0E84                     PL154:	
  8038  0E84  081F               	movf	31,w	;volatile
  8039  0E85  39FC               	andlw	-4
  8040  0E86  3801               	iorlw	1
  8041  0E87  009F               	movwf	31	;volatile
  8042  0E88  0008               	return
  8043  0E89                     __end_ofPL154:	
  8044  0E89                     PL162:	
  8045  0E89  0086               	movwf	6
  8046  0E8A  3000               	movlw	0
  8047  0E8B  3FC0               	movwi [0]fsr1
  8048  0E8C  3FC1               	movwi [1]fsr1
  8049  0E8D  0008               	return
  8050  0E8E                     __end_ofPL162:	
  8051  0E8E                     PL168:	
  8052  0E8E  0858               	movf	Audio_GetValue@value+1,w
  8053  0E8F  00A9               	movwf	Audio_GetValue@max+1
  8054  0E90  0857               	movf	Audio_GetValue@value,w
  8055  0E91  00A8               	movwf	Audio_GetValue@max
  8056  0E92  0008               	return
  8057  0E93                     __end_ofPL168:	
  8058  0E93                     __ptext9:	
  8059 ;; *************** function _PWM4_Initialize *****************
  8060 ;; Defined at:
  8061 ;;		line 42 in file "driver/src/pwm.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;		None
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;		None
  8066 ;; Return value:  Size  Location     Type
  8067 ;;                  1    wreg      void 
  8068 ;; Registers used:
  8069 ;;		wreg, status,2, status,0
  8070 ;; Tracked objects:
  8071 ;;		On entry : 1F/5
  8072 ;;		On exit  : 1F/5
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;Total ram usage:        0 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:    7
  8082 ;; This function calls:
  8083 ;;		Nothing
  8084 ;; This function is called by:
  8085 ;;		_SYSTEM_Initialize
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           
  8090                           ;psect for function _PWM4_Initialize
  8091  0E93                     _PWM4_Initialize:	
  8092                           
  8093                           ;pwm.c: 44: CCP4CON = 0x8F;
  8094                           
  8095                           ;incstack = 0
  8096                           ; Regs used in _PWM4_Initialize: [wreg+status,2+status,0]
  8097  0E93  308F               	movlw	143
  8098  0E94  0026               	movlb	6	; select bank6
  8099  0E95  0097               	movwf	23	;volatile
  8100                           
  8101                           ;pwm.c: 45: CCPR4 = 0;
  8102  0E96  0195               	clrf	21	;volatile
  8103  0E97  0196               	clrf	22	;volatile
  8104                           
  8105                           ;pwm.c: 46: CCPTMRSbits.C4TSEL = 0x1;
  8106  0E98  0025               	movlb	5	; select bank5
  8107  0E99  081F               	movf	31,w	;volatile
  8108  0E9A  393F               	andlw	-193
  8109  0E9B  3840               	iorlw	64
  8110  0E9C  009F               	movwf	31	;volatile
  8111  0E9D  0008               	return
  8112  0E9E                     __end_of_PWM4_Initialize:	
  8113  0E9E                     __ptext8:	
  8114 ;; *************** function _PWM5_Initialize *****************
  8115 ;; Defined at:
  8116 ;;		line 54 in file "driver/src/pwm.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;		None
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;		None
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  1    wreg      void 
  8123 ;; Registers used:
  8124 ;;		wreg, status,2, status,0
  8125 ;; Tracked objects:
  8126 ;;		On entry : 1F/5
  8127 ;;		On exit  : 1F/C
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8134 ;;Total ram usage:        0 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; Hardware stack levels required when called:    7
  8137 ;; This function calls:
  8138 ;;		Nothing
  8139 ;; This function is called by:
  8140 ;;		_SYSTEM_Initialize
  8141 ;; This function uses a non-reentrant model
  8142 ;;
  8143                           
  8144                           
  8145                           ;psect for function _PWM5_Initialize
  8146  0E9E                     _PWM5_Initialize:	
  8147                           
  8148                           ;pwm.c: 56: PWM5CON = 0x80;
  8149                           
  8150                           ;incstack = 0
  8151                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
  8152  0E9E  3080               	movlw	128
  8153  0E9F  002C               	movlb	12	; select bank12
  8154  0EA0  0099               	movwf	25	;volatile
  8155                           
  8156                           ;pwm.c: 57: PWM5DC = 0;
  8157  0EA1  0197               	clrf	23	;volatile
  8158  0EA2  0198               	clrf	24	;volatile
  8159                           
  8160                           ;pwm.c: 58: PWMTMRSbits.P5TSEL = 0x1;
  8161  0EA3  2E84               	ljmp	PL154	;call to abstracted procedure
  8162  0EA4                     __end_of_PWM5_Initialize:	
  8163  0EA4                     __ptext7:	
  8164 ;; *************** function _TMR0_Initialize_Default *****************
  8165 ;; Defined at:
  8166 ;;		line 5 in file "driver/src/tmr0.c"
  8167 ;; Parameters:    Size  Location     Type
  8168 ;;		None
  8169 ;; Auto vars:     Size  Location     Type
  8170 ;;		None
  8171 ;; Return value:  Size  Location     Type
  8172 ;;                  1    wreg      void 
  8173 ;; Registers used:
  8174 ;;		wreg, status,2
  8175 ;; Tracked objects:
  8176 ;;		On entry : 1F/12
  8177 ;;		On exit  : 1F/1
  8178 ;;		Unchanged: 0/0
  8179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8184 ;;Total ram usage:        0 bytes
  8185 ;; Hardware stack levels used:    1
  8186 ;; Hardware stack levels required when called:    7
  8187 ;; This function calls:
  8188 ;;		Nothing
  8189 ;; This function is called by:
  8190 ;;		_SYSTEM_Initialize
  8191 ;; This function uses a non-reentrant model
  8192 ;;
  8193                           
  8194                           
  8195                           ;psect for function _TMR0_Initialize_Default
  8196  0EA4                     _TMR0_Initialize_Default:	
  8197                           
  8198                           ;tmr0.c: 7: T0CON0 = 0x00;
  8199                           
  8200                           ;incstack = 0
  8201                           ; Regs used in _TMR0_Initialize_Default: [wreg+status,2]
  8202  0EA4  0020               	movlb	0	; select bank0
  8203  0EA5  0197               	clrf	23	;volatile
  8204                           
  8205                           ;tmr0.c: 8: T0CON1 = 0xC0 | 0x10 | 0x07;
  8206  0EA6  30D7               	movlw	215
  8207  0EA7  0098               	movwf	24	;volatile
  8208                           
  8209                           ;tmr0.c: 10: TMR0H = 0xFF;
  8210  0EA8  30FF               	movlw	255
  8211  0EA9  0096               	movwf	22	;volatile
  8212                           
  8213                           ;tmr0.c: 11: TMR0L = 0x00;
  8214  0EAA  0195               	clrf	21	;volatile
  8215                           
  8216                           ;tmr0.c: 13: PIR0bits.TMR0IF = 0;
  8217  0EAB  1290               	bcf	16,5	;volatile
  8218                           
  8219                           ;tmr0.c: 14: PIE0bits.TMR0IE = 1;
  8220  0EAC  0021               	movlb	1	; select bank1
  8221  0EAD  1690               	bsf	16,5	;volatile
  8222  0EAE  0008               	return
  8223  0EAF                     __end_of_TMR0_Initialize_Default:	
  8224  0EAF                     __ptext6:	
  8225 ;; *************** function _TMR1_Initialize_Default *****************
  8226 ;; Defined at:
  8227 ;;		line 9 in file "driver/src/tmr1.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;		None
  8230 ;; Auto vars:     Size  Location     Type
  8231 ;;		None
  8232 ;; Return value:  Size  Location     Type
  8233 ;;                  1    wreg      void 
  8234 ;; Registers used:
  8235 ;;		wreg, status,2
  8236 ;; Tracked objects:
  8237 ;;		On entry : 1F/1
  8238 ;;		On exit  : 1F/1
  8239 ;;		Unchanged: 0/0
  8240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;Total ram usage:        0 bytes
  8246 ;; Hardware stack levels used:    1
  8247 ;; Hardware stack levels required when called:    7
  8248 ;; This function calls:
  8249 ;;		Nothing
  8250 ;; This function is called by:
  8251 ;;		_SYSTEM_Initialize
  8252 ;; This function uses a non-reentrant model
  8253 ;;
  8254                           
  8255                           
  8256                           ;psect for function _TMR1_Initialize_Default
  8257  0EAF                     _TMR1_Initialize_Default:	
  8258                           
  8259                           ;tmr1.c: 11: T1CON = 0x30 | 0x04 | 0x00;
  8260                           
  8261                           ;incstack = 0
  8262                           ; Regs used in _TMR1_Initialize_Default: [wreg+status,2]
  8263  0EAF  3034               	movlw	52
  8264  0EB0  0020               	movlb	0	; select bank0
  8265  0EB1  009B               	movwf	27	;volatile
  8266                           
  8267                           ;tmr1.c: 12: T1GCON = 0x00 | 0x80 | 0x40 | 0x08;
  8268  0EB2  30C8               	movlw	200
  8269  0EB3  009C               	movwf	28	;volatile
  8270                           
  8271                           ;tmr1.c: 14: TMR1 = 0x00;
  8272  0EB4  0199               	clrf	25	;volatile
  8273  0EB5  019A               	clrf	26	;volatile
  8274                           
  8275                           ;tmr1.c: 15: PIR1bits.TMR1IF = 0;
  8276  0EB6  1011               	bcf	17,0	;volatile
  8277                           
  8278                           ;tmr1.c: 16: PIE1bits.TMR1IE = 0;
  8279  0EB7  0021               	movlb	1	; select bank1
  8280  0EB8  1011               	bcf	17,0	;volatile
  8281                           
  8282                           ;tmr1.c: 17: PIR1bits.TMR1GIF = 0;
  8283  0EB9  0020               	movlb	0	; select bank0
  8284  0EBA  1391               	bcf	17,7	;volatile
  8285                           
  8286                           ;tmr1.c: 18: PIE1bits.TMR1GIE = 1;
  8287  0EBB  0021               	movlb	1	; select bank1
  8288  0EBC  1791               	bsf	17,7	;volatile
  8289  0EBD  0008               	return
  8290  0EBE                     __end_of_TMR1_Initialize_Default:	
  8291  0EBE                     __ptext5:	
  8292 ;; *************** function _TMR2_Initialize_Default *****************
  8293 ;; Defined at:
  8294 ;;		line 7 in file "driver/src/tmr2.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;		None
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;		None
  8299 ;; Return value:  Size  Location     Type
  8300 ;;                  1    wreg      void 
  8301 ;; Registers used:
  8302 ;;		wreg, status,2
  8303 ;; Tracked objects:
  8304 ;;		On entry : 1F/1
  8305 ;;		On exit  : 1F/1
  8306 ;;		Unchanged: 0/0
  8307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8312 ;;Total ram usage:        0 bytes
  8313 ;; Hardware stack levels used:    1
  8314 ;; Hardware stack levels required when called:    7
  8315 ;; This function calls:
  8316 ;;		Nothing
  8317 ;; This function is called by:
  8318 ;;		_SYSTEM_Initialize
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           
  8323                           ;psect for function _TMR2_Initialize_Default
  8324  0EBE                     _TMR2_Initialize_Default:	
  8325                           
  8326                           ;tmr2.c: 9: T2CON = 0x00 | 0x78;
  8327                           
  8328                           ;incstack = 0
  8329                           ; Regs used in _TMR2_Initialize_Default: [wreg+status,2]
  8330  0EBE  3078               	movlw	120
  8331  0EBF  0020               	movlb	0	; select bank0
  8332  0EC0  009F               	movwf	31	;volatile
  8333                           
  8334                           ;tmr2.c: 10: PR2 = 0xF9;
  8335  0EC1  30F9               	movlw	249
  8336  0EC2  009E               	movwf	30	;volatile
  8337                           
  8338                           ;tmr2.c: 11: TMR2 = 0x00;
  8339  0EC3  019D               	clrf	29	;volatile
  8340                           
  8341                           ;tmr2.c: 12: PIR1bits.TMR2IF = 0;
  8342  0EC4  1091               	bcf	17,1	;volatile
  8343                           
  8344                           ;tmr2.c: 13: PIE1bits.TMR2IE = 1;
  8345  0EC5  0021               	movlb	1	; select bank1
  8346  0EC6  1491               	bsf	17,1	;volatile
  8347  0EC7  0008               	return
  8348  0EC8                     __end_of_TMR2_Initialize_Default:	
  8349  0EC8                     __ptext4:	
  8350 ;; *************** function _TMR4_Initialize_Default *****************
  8351 ;; Defined at:
  8352 ;;		line 7 in file "driver/src/tmr4.c"
  8353 ;; Parameters:    Size  Location     Type
  8354 ;;		None
  8355 ;; Auto vars:     Size  Location     Type
  8356 ;;		None
  8357 ;; Return value:  Size  Location     Type
  8358 ;;                  1    wreg      void 
  8359 ;; Registers used:
  8360 ;;		wreg, status,2
  8361 ;; Tracked objects:
  8362 ;;		On entry : 1F/1
  8363 ;;		On exit  : 1F/1
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8370 ;;Total ram usage:        0 bytes
  8371 ;; Hardware stack levels used:    1
  8372 ;; Hardware stack levels required when called:    7
  8373 ;; This function calls:
  8374 ;;		Nothing
  8375 ;; This function is called by:
  8376 ;;		_SYSTEM_Initialize
  8377 ;; This function uses a non-reentrant model
  8378 ;;
  8379                           
  8380                           
  8381                           ;psect for function _TMR4_Initialize_Default
  8382  0EC8                     _TMR4_Initialize_Default:	
  8383                           
  8384                           ;tmr4.c: 9: T4CON = 0x03 | 0x78;
  8385                           
  8386                           ;incstack = 0
  8387                           ; Regs used in _TMR4_Initialize_Default: [wreg+status,2]
  8388  0EC8  307B               	movlw	123
  8389  0EC9  0028               	movlb	8	; select bank8
  8390  0ECA  0097               	movwf	23	;volatile
  8391                           
  8392                           ;tmr4.c: 10: PR4 = 0xF9;
  8393  0ECB  30F9               	movlw	249
  8394  0ECC  0096               	movwf	22	;volatile
  8395                           
  8396                           ;tmr4.c: 11: TMR4 = 0x00;
  8397  0ECD  0195               	clrf	21	;volatile
  8398                           
  8399                           ;tmr4.c: 13: PIR2bits.TMR4IF = 0;
  8400  0ECE  0020               	movlb	0	; select bank0
  8401  0ECF  1092               	bcf	18,1	;volatile
  8402                           
  8403                           ;tmr4.c: 14: PIE2bits.TMR4IE = 1;
  8404  0ED0  0021               	movlb	1	; select bank1
  8405  0ED1  1492               	bsf	18,1	;volatile
  8406  0ED2  0008               	return
  8407  0ED3                     __end_of_TMR4_Initialize_Default:	
  8408  0ED3                     __ptext60:	
  8409 ;; *************** function _Led_TurnOffRamp *****************
  8410 ;; Defined at:
  8411 ;;		line 212 in file "user/src/led.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;		None
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;  i               1   13[BANK0 ] unsigned char 
  8416 ;; Return value:  Size  Location     Type
  8417 ;;                  1    wreg      void 
  8418 ;; Registers used:
  8419 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8420 ;; Tracked objects:
  8421 ;;		On entry : 1F/0
  8422 ;;		On exit  : 1F/0
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8426 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;Total ram usage:        1 bytes
  8430 ;; Hardware stack levels used:    1
  8431 ;; Hardware stack levels required when called:    7
  8432 ;; This function calls:
  8433 ;;		Nothing
  8434 ;; This function is called by:
  8435 ;;		_Led_Initialize
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           
  8440                           ;psect for function _Led_TurnOffRamp
  8441  0ED3                     _Led_TurnOffRamp:	
  8442  0ED3                     l5989:	
  8443                           ;incstack = 0
  8444                           ; Regs used in _Led_TurnOffRamp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8445                           
  8446                           
  8447                           ;led.c: 213: gLedPara.mOn = 0;
  8448  0ED3  307B               	movlw	123
  8449  0ED4  0086               	movwf	6
  8450  0ED5  3023               	movlw	35
  8451  0ED6  0087               	movwf	7
  8452  0ED7  1081               	bcf	1,1
  8453                           
  8454                           ;led.c: 214: for (uint8_t i = 0; i < 5; i++) {
  8455  0ED8  01CD               	clrf	Led_TurnOffRamp@i
  8456  0ED9                     l5997:	
  8457                           
  8458                           ;led.c: 215: gLedRunPara.mTargetBright[i] = 0;
  8459  0ED9  354D               	lslf	Led_TurnOffRamp@i,w
  8460  0EDA  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  8461  0EDB  0086               	movwf	6
  8462  0EDC  3000               	movlw	0
  8463  0EDD  0187               	clrf	7
  8464  0EDE  3FC0               	movwi [0]fsr1
  8465  0EDF  3FC1               	movwi [1]fsr1
  8466  0EE0  3005               	movlw	5
  8467  0EE1  0ACD               	incf	Led_TurnOffRamp@i,f
  8468  0EE2  024D               	subwf	Led_TurnOffRamp@i,w
  8469  0EE3  1803               	btfsc	3,0
  8470  0EE4  0008               	return
  8471  0EE5  2ED9               	goto	l5997
  8472  0EE6                     __end_of_Led_TurnOffRamp:	
  8473  0EE6                     __ptext59:	
  8474 ;; *************** function _Led_TurnOnRamp *****************
  8475 ;; Defined at:
  8476 ;;		line 205 in file "user/src/led.c"
  8477 ;; Parameters:    Size  Location     Type
  8478 ;;		None
  8479 ;; Auto vars:     Size  Location     Type
  8480 ;;  i               1   17[BANK0 ] unsigned char 
  8481 ;; Return value:  Size  Location     Type
  8482 ;;                  1    wreg      void 
  8483 ;; Registers used:
  8484 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8485 ;; Tracked objects:
  8486 ;;		On entry : 1F/0
  8487 ;;		On exit  : 1F/0
  8488 ;;		Unchanged: 0/0
  8489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8493 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8494 ;;Total ram usage:        5 bytes
  8495 ;; Hardware stack levels used:    1
  8496 ;; Hardware stack levels required when called:    7
  8497 ;; This function calls:
  8498 ;;		Nothing
  8499 ;; This function is called by:
  8500 ;;		_Led_Initialize
  8501 ;; This function uses a non-reentrant model
  8502 ;;
  8503                           
  8504                           
  8505                           ;psect for function _Led_TurnOnRamp
  8506  0EE6                     _Led_TurnOnRamp:	
  8507                           
  8508                           ;led.c: 206: gLedPara.mOn = 1;
  8509                           
  8510                           ;incstack = 0
  8511                           ; Regs used in _Led_TurnOnRamp: [wreg-fsr1h+status,2+status,0]
  8512  0EE6  2701  3188         	fcall	PL148	;call to abstracted procedure
  8513                           
  8514                           ;led.c: 207: for (uint8_t i = 0; i < 5; i++) {
  8515  0EE8  01D1               	clrf	Led_TurnOnRamp@i
  8516  0EE9                     l6011:	
  8517                           
  8518                           ;led.c: 208: gLedRunPara.mTargetBright[i] = gLedPara.mBright[i];
  8519  0EE9  0851               	movf	Led_TurnOnRamp@i,w
  8520  0EEA  00CD               	movwf	??_Led_TurnOnRamp
  8521  0EEB  307E               	movlw	126
  8522  0EEC  01CE               	clrf	??_Led_TurnOnRamp+1
  8523  0EED  35CD               	lslf	??_Led_TurnOnRamp,f
  8524  0EEE  0DCE               	rlf	??_Led_TurnOnRamp+1,f
  8525  0EEF  00CF               	movwf	??_Led_TurnOnRamp+2
  8526  0EF0  3023               	movlw	35
  8527  0EF1  00D0               	movwf	??_Led_TurnOnRamp+3
  8528  0EF2  084D               	movf	??_Led_TurnOnRamp,w
  8529  0EF3  074F               	addwf	??_Led_TurnOnRamp+2,w
  8530  0EF4  0086               	movwf	6
  8531  0EF5  084E               	movf	??_Led_TurnOnRamp+1,w
  8532  0EF6  3D50               	addwfc	??_Led_TurnOnRamp+3,w
  8533  0EF7  0087               	movwf	7
  8534  0EF8  3551               	lslf	Led_TurnOnRamp@i,w
  8535  0EF9  25EB  3188         	fcall	PL22	;call to abstracted procedure
  8536  0EFB  3005               	movlw	5
  8537  0EFC  0AD1               	incf	Led_TurnOnRamp@i,f
  8538  0EFD  0251               	subwf	Led_TurnOnRamp@i,w
  8539  0EFE  1803               	btfsc	3,0
  8540  0EFF  0008               	return
  8541  0F00  2EE9               	goto	l6011
  8542  0F01                     __end_of_Led_TurnOnRamp:	
  8543  0F01                     PL148:	
  8544  0F01  307B               	movlw	123
  8545  0F02  0086               	movwf	6
  8546  0F03  3023               	movlw	35
  8547  0F04  0087               	movwf	7
  8548  0F05  1481               	bsf	1,1
  8549  0F06  0008               	return
  8550  0F07                     __end_ofPL148:	
  8551  0F07                     __ptext31:	
  8552 ;; *************** function _TMR2_SetInterruptHandler *****************
  8553 ;; Defined at:
  8554 ;;		line 35 in file "driver/src/tmr2.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;  handler         2   13[BANK0 ] PTR FTN()void 
  8557 ;;		 -> Led_Run(1), 
  8558 ;; Auto vars:     Size  Location     Type
  8559 ;;		None
  8560 ;; Return value:  Size  Location     Type
  8561 ;;                  1    wreg      void 
  8562 ;; Registers used:
  8563 ;;		wreg
  8564 ;; Tracked objects:
  8565 ;;		On entry : 1F/0
  8566 ;;		On exit  : 1F/1
  8567 ;;		Unchanged: 0/0
  8568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8569 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8572 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8573 ;;Total ram usage:        2 bytes
  8574 ;; Hardware stack levels used:    1
  8575 ;; Hardware stack levels required when called:    7
  8576 ;; This function calls:
  8577 ;;		Nothing
  8578 ;; This function is called by:
  8579 ;;		_Interrupt_Initialize
  8580 ;; This function uses a non-reentrant model
  8581 ;;
  8582                           
  8583                           
  8584                           ;psect for function _TMR2_SetInterruptHandler
  8585  0F07                     _TMR2_SetInterruptHandler:	
  8586                           
  8587                           ;tmr2.c: 37: tmr2_isr_handler = handler;
  8588                           
  8589                           ;incstack = 0
  8590                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  8591  0F07  084E               	movf	TMR2_SetInterruptHandler@handler+1,w
  8592  0F08  0021               	movlb	1	; select bank1
  8593  0F09  00E5               	movwf	(_tmr2_isr_handler+1)^(0+128)
  8594  0F0A  0020               	movlb	0	; select bank0
  8595  0F0B  084D               	movf	TMR2_SetInterruptHandler@handler,w
  8596  0F0C  0021               	movlb	1	; select bank1
  8597  0F0D  00E4               	movwf	_tmr2_isr_handler^(0+128)
  8598  0F0E  0008               	return
  8599  0F0F                     __end_of_TMR2_SetInterruptHandler:	
  8600  0F0F                     __ptext30:	
  8601 ;; *************** function _TMR4_SetInterruptHandler *****************
  8602 ;; Defined at:
  8603 ;;		line 37 in file "driver/src/tmr4.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;  handler         2   13[BANK0 ] PTR FTN()void 
  8606 ;;		 -> Led_Notice(1), 
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;		None
  8609 ;; Return value:  Size  Location     Type
  8610 ;;                  1    wreg      void 
  8611 ;; Registers used:
  8612 ;;		wreg
  8613 ;; Tracked objects:
  8614 ;;		On entry : 1F/0
  8615 ;;		On exit  : 1F/1
  8616 ;;		Unchanged: 0/0
  8617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8618 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;Total ram usage:        2 bytes
  8623 ;; Hardware stack levels used:    1
  8624 ;; Hardware stack levels required when called:    7
  8625 ;; This function calls:
  8626 ;;		Nothing
  8627 ;; This function is called by:
  8628 ;;		_Interrupt_Initialize
  8629 ;; This function uses a non-reentrant model
  8630 ;;
  8631                           
  8632                           
  8633                           ;psect for function _TMR4_SetInterruptHandler
  8634  0F0F                     _TMR4_SetInterruptHandler:	
  8635  0F0F                     l4887:	
  8636                           ;incstack = 0
  8637                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  8638                           
  8639                           
  8640                           ;tmr4.c: 39: tmr4_isr_handler = handler;
  8641  0F0F  084E               	movf	TMR4_SetInterruptHandler@handler+1,w
  8642  0F10  0021               	movlb	1	; select bank1
  8643  0F11  00E3               	movwf	(_tmr4_isr_handler+1)^(0+128)
  8644  0F12  0020               	movlb	0	; select bank0
  8645  0F13  084D               	movf	TMR4_SetInterruptHandler@handler,w
  8646  0F14  0021               	movlb	1	; select bank1
  8647  0F15  00E2               	movwf	_tmr4_isr_handler^(0+128)
  8648  0F16  0008               	return
  8649  0F17                     __end_of_TMR4_SetInterruptHandler:	
  8650  0F17                     __ptext24:	
  8651 ;; *************** function _Led_FirstPowerUp *****************
  8652 ;; Defined at:
  8653 ;;		line 17 in file "user/src/led.c"
  8654 ;; Parameters:    Size  Location     Type
  8655 ;;		None
  8656 ;; Auto vars:     Size  Location     Type
  8657 ;;  i               1   19[BANK0 ] unsigned char 
  8658 ;; Return value:  Size  Location     Type
  8659 ;;                  1    wreg      void 
  8660 ;; Registers used:
  8661 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8662 ;; Tracked objects:
  8663 ;;		On entry : 1F/0
  8664 ;;		On exit  : 1F/0
  8665 ;;		Unchanged: 0/0
  8666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8668 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8669 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8670 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8671 ;;Total ram usage:        7 bytes
  8672 ;; Hardware stack levels used:    1
  8673 ;; Hardware stack levels required when called:    7
  8674 ;; This function calls:
  8675 ;;		Nothing
  8676 ;; This function is called by:
  8677 ;;		_Led_InitPara
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           
  8682                           ;psect for function _Led_FirstPowerUp
  8683  0F17                     _Led_FirstPowerUp:	
  8684  0F17                     l4955:	
  8685                           ;incstack = 0
  8686                           ; Regs used in _Led_FirstPowerUp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8687                           
  8688                           
  8689                           ;led.c: 19: if(gLedPara.mFirstPowerUp != 0x55){
  8690  0F17  307B               	movlw	123
  8691  0F18  0086               	movwf	6
  8692  0F19  3023               	movlw	35
  8693  0F1A  0087               	movwf	7
  8694  0F1B  3055               	movlw	85
  8695  0F1C  3141               	addfsr 1,1
  8696  0F1D  0601               	xorwf	1,w
  8697  0F1E  1903               	btfsc	3,2
  8698  0F1F  0008               	return
  8699                           
  8700                           ;led.c: 20: gLedPara.mFirstPowerUp = 0x55;
  8701  0F20  307C               	movlw	124
  8702  0F21  0086               	movwf	6
  8703  0F22  3023               	movlw	35
  8704  0F23  0087               	movwf	7
  8705  0F24  3055               	movlw	85
  8706  0F25  0081               	movwf	1
  8707                           
  8708                           ;led.c: 21: for (uint8_t i = 0; i < 5; i++) {
  8709  0F26  01D3               	clrf	Led_FirstPowerUp@i
  8710  0F27                     l4965:	
  8711                           
  8712                           ;led.c: 22: gLedPara.mDayBright[i] = 1000;
  8713  0F27  27A3  3188         	fcall	PL78	;call to abstracted procedure
  8714  0F29  30DA               	movlw	218
  8715  0F2A  2773  3188         	fcall	PL10	;call to abstracted procedure
  8716                           
  8717                           ;led.c: 23: gLedPara.mNightBright[i] = 0;
  8718  0F2C  0853               	movf	Led_FirstPowerUp@i,w
  8719  0F2D  00CD               	movwf	??_Led_FirstPowerUp
  8720  0F2E  30E6               	movlw	230
  8721                           
  8722                           ;led.c: 24: gLedPara.mStaticDayBright[i] = 1000;
  8723  0F2F  2784  3188         	fcall	PL42	;call to abstracted procedure
  8724  0F31  30B0               	movlw	176
  8725  0F32  2773  3188         	fcall	PL10	;call to abstracted procedure
  8726                           
  8727                           ;led.c: 25: gLedPara.mStaticNightBright[i] = 0;
  8728  0F34  0853               	movf	Led_FirstPowerUp@i,w
  8729  0F35  00CD               	movwf	??_Led_FirstPowerUp
  8730  0F36  30BA               	movlw	186
  8731                           
  8732                           ;led.c: 26: gLedPara.mStaticFishBright[i] = 1000;
  8733  0F37  2784  3188         	fcall	PL42	;call to abstracted procedure
  8734  0F39  30C4               	movlw	196
  8735  0F3A  2773  3188         	fcall	PL10	;call to abstracted procedure
  8736                           
  8737                           ;led.c: 27: gLedPara.mStaticPlantBright[i] = 1000;
  8738  0F3C  27A3  3188         	fcall	PL78	;call to abstracted procedure
  8739  0F3E  30CE               	movlw	206
  8740  0F3F  2773  3188         	fcall	PL10	;call to abstracted procedure
  8741  0F41  3005               	movlw	5
  8742  0F42  0AD3               	incf	Led_FirstPowerUp@i,f
  8743  0F43  0253               	subwf	Led_FirstPowerUp@i,w
  8744  0F44  1C03               	skipc
  8745  0F45  2F27               	goto	l4965
  8746                           
  8747                           ;led.c: 28: }
  8748                           ;led.c: 29: gLedPara.mSunrise = 390;
  8749  0F46  3086               	movlw	134
  8750  0F47  00CD               	movwf	??_Led_FirstPowerUp
  8751  0F48  3001               	movlw	1
  8752  0F49  00CE               	movwf	??_Led_FirstPowerUp+1
  8753  0F4A  30D8               	movlw	216
  8754  0F4B  0086               	movwf	6
  8755  0F4C  3023               	movlw	35
  8756  0F4D  0087               	movwf	7
  8757  0F4E  084D               	movf	??_Led_FirstPowerUp,w
  8758  0F4F  3FC0               	movwi [0]fsr1
  8759  0F50  084E               	movf	??_Led_FirstPowerUp+1,w
  8760  0F51  3FC1               	movwi [1]fsr1
  8761                           
  8762                           ;led.c: 30: gLedPara.mSunset = 1110;
  8763  0F52  3056               	movlw	86
  8764  0F53  00CD               	movwf	??_Led_FirstPowerUp
  8765  0F54  3004               	movlw	4
  8766  0F55  00CE               	movwf	??_Led_FirstPowerUp+1
  8767  0F56  30E4               	movlw	228
  8768  0F57  0086               	movwf	6
  8769                           
  8770                           ;led.c: 31: gLedPara.mNightBright[2] = 1000;
  8771  0F58  279A  3188         	fcall	PL68	;call to abstracted procedure
  8772  0F5A  30EA               	movlw	234
  8773  0F5B  0086               	movwf	6
  8774                           
  8775                           ;led.c: 32: gLedPara.mStaticNightBright[2] = 1000;
  8776  0F5C  279A               	fcall	PL68	;call to abstracted procedure
  8777  0F5D  30BE               	movlw	190
  8778  0F5E  0086               	movwf	6
  8779  0F5F  084D               	movf	??_Led_FirstPowerUp,w
  8780  0F60  3FC0               	movwi [0]fsr1
  8781  0F61  084E               	movf	??_Led_FirstPowerUp+1,w
  8782  0F62  3FC1               	movwi [1]fsr1
  8783                           
  8784                           ;led.c: 33: gLedPara.mStaticFishBright[0] = 0;
  8785  0F63  30C4               	movlw	196
  8786  0F64  0086               	movwf	6
  8787  0F65  3000               	movlw	0
  8788  0F66  3FC0               	movwi [0]fsr1
  8789  0F67  3FC1               	movwi [1]fsr1
  8790                           
  8791                           ;led.c: 34: gLedPara.mStaticFishBright[1] = 0;
  8792  0F68  30C6               	movlw	198
  8793  0F69  0086               	movwf	6
  8794  0F6A  3000               	movlw	0
  8795  0F6B  3FC0               	movwi [0]fsr1
  8796  0F6C  3FC1               	movwi [1]fsr1
  8797                           
  8798                           ;led.c: 35: gLedPara.mStaticPlantBright[1] = 0;
  8799  0F6D  30D0               	movlw	208
  8800  0F6E  0086               	movwf	6
  8801  0F6F  3000               	movlw	0
  8802  0F70  3FC0               	movwi [0]fsr1
  8803  0F71  3FC1               	movwi [1]fsr1
  8804  0F72  0008               	return
  8805  0F73                     __end_of_Led_FirstPowerUp:	
  8806  0F73                     PL10:	
  8807  0F73  01D0               	clrf	??_Led_FirstPowerUp+3
  8808  0F74  35CF               	lslf	??_Led_FirstPowerUp+2,f
  8809  0F75  0DD0               	rlf	??_Led_FirstPowerUp+3,f
  8810  0F76  00D1               	movwf	??_Led_FirstPowerUp+4
  8811  0F77  3023               	movlw	35
  8812  0F78  00D2               	movwf	??_Led_FirstPowerUp+5
  8813  0F79  084F               	movf	??_Led_FirstPowerUp+2,w
  8814  0F7A  0751               	addwf	??_Led_FirstPowerUp+4,w
  8815  0F7B  0086               	movwf	6
  8816  0F7C  0850               	movf	??_Led_FirstPowerUp+3,w
  8817  0F7D  3D52               	addwfc	??_Led_FirstPowerUp+5,w
  8818  0F7E  0087               	movwf	7
  8819  0F7F  084D               	movf	??_Led_FirstPowerUp,w
  8820  0F80  3FC0               	movwi [0]fsr1
  8821  0F81  084E               	movf	??_Led_FirstPowerUp+1,w
  8822  0F82  3FC1               	movwi [1]fsr1
  8823  0F83  0008               	return
  8824  0F84                     __end_ofPL10:	
  8825  0F84                     PL42:	
  8826  0F84  01CE               	clrf	??_Led_FirstPowerUp+1
  8827  0F85  35CD               	lslf	??_Led_FirstPowerUp,f
  8828  0F86  0DCE               	rlf	??_Led_FirstPowerUp+1,f
  8829  0F87  00CF               	movwf	??_Led_FirstPowerUp+2
  8830  0F88  3023               	movlw	35
  8831  0F89  00D0               	movwf	??_Led_FirstPowerUp+3
  8832  0F8A  084D               	movf	??_Led_FirstPowerUp,w
  8833  0F8B  074F               	addwf	??_Led_FirstPowerUp+2,w
  8834  0F8C  0086               	movwf	6
  8835  0F8D  084E               	movf	??_Led_FirstPowerUp+1,w
  8836  0F8E  3D50               	addwfc	??_Led_FirstPowerUp+3,w
  8837  0F8F  0087               	movwf	7
  8838  0F90  3000               	movlw	0
  8839  0F91  3FC0               	movwi [0]fsr1
  8840  0F92  3FC1               	movwi [1]fsr1
  8841  0F93  30E8               	movlw	232
  8842  0F94  00CD               	movwf	??_Led_FirstPowerUp
  8843  0F95  3003               	movlw	3
  8844  0F96  00CE               	movwf	??_Led_FirstPowerUp+1
  8845  0F97  0853               	movf	Led_FirstPowerUp@i,w
  8846  0F98  00CF               	movwf	??_Led_FirstPowerUp+2
  8847  0F99  0008               	return
  8848  0F9A                     __end_ofPL42:	
  8849  0F9A                     PL68:	
  8850  0F9A  084D               	movf	??_Led_FirstPowerUp,w
  8851  0F9B  3FC0               	movwi [0]fsr1
  8852  0F9C  084E               	movf	??_Led_FirstPowerUp+1,w
  8853  0F9D  3FC1               	movwi [1]fsr1
  8854  0F9E  30E8               	movlw	232
  8855  0F9F  00CD               	movwf	??_Led_FirstPowerUp
  8856  0FA0  3003               	movlw	3
  8857  0FA1  00CE               	movwf	??_Led_FirstPowerUp+1
  8858  0FA2  0008               	return
  8859  0FA3                     __end_ofPL68:	
  8860  0FA3                     PL78:	
  8861  0FA3  30E8               	movlw	232
  8862  0FA4  00CD               	movwf	??_Led_FirstPowerUp
  8863  0FA5  3003               	movlw	3
  8864  0FA6  00CE               	movwf	??_Led_FirstPowerUp+1
  8865  0FA7  0853               	movf	Led_FirstPowerUp@i,w
  8866  0FA8  00CF               	movwf	??_Led_FirstPowerUp+2
  8867  0FA9  0008               	return
  8868  0FAA                     __end_ofPL78:	
  8869  0FAA                     __ptext21:	
  8870 ;; *************** function _DATAEE_WriteBuffer *****************
  8871 ;; Defined at:
  8872 ;;		line 41 in file "driver/src/eeprom.c"
  8873 ;; Parameters:    Size  Location     Type
  8874 ;;  addr            2   17[BANK0 ] unsigned int 
  8875 ;;  buf             2   19[BANK0 ] PTR unsigned char 
  8876 ;;		 -> gLedPara(117), 
  8877 ;;  len             1   21[BANK0 ] unsigned char 
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;  i               1   22[BANK0 ] unsigned char 
  8880 ;; Return value:  Size  Location     Type
  8881 ;;                  1    wreg      void 
  8882 ;; Registers used:
  8883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8884 ;; Tracked objects:
  8885 ;;		On entry : 1F/0
  8886 ;;		On exit  : 1F/0
  8887 ;;		Unchanged: 0/0
  8888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8889 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;Total ram usage:        6 bytes
  8894 ;; Hardware stack levels used:    1
  8895 ;; Hardware stack levels required when called:    8
  8896 ;; This function calls:
  8897 ;;		_DATAEE_WriteByte
  8898 ;; This function is called by:
  8899 ;;		_Led_SaveParaIfChanged
  8900 ;; This function uses a non-reentrant model
  8901 ;;
  8902                           
  8903                           
  8904                           ;psect for function _DATAEE_WriteBuffer
  8905  0FAA                     _DATAEE_WriteBuffer:	
  8906  0FAA                     l4767:	
  8907                           ;incstack = 0
  8908                           ; Regs used in _DATAEE_WriteBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8909                           
  8910                           
  8911                           ;eeprom.c: 43: for ( uint8_t i = len; i != 0; i-- )
  8912  0FAA  0855               	movf	DATAEE_WriteBuffer@len,w
  8913  0FAB  00D6               	movwf	DATAEE_WriteBuffer@i
  8914  0FAC                     l4769:	
  8915  0FAC  0856               	movf	DATAEE_WriteBuffer@i,w
  8916  0FAD  1903               	btfsc	3,2
  8917  0FAE  0008               	return
  8918                           
  8919                           ;eeprom.c: 44: {
  8920                           ;eeprom.c: 45: DATAEE_WriteByte ( addr++, *buf++ );
  8921  0FAF  0852               	movf	DATAEE_WriteBuffer@addr+1,w
  8922  0FB0  00CE               	movwf	DATAEE_WriteByte@addr+1
  8923  0FB1  0851               	movf	DATAEE_WriteBuffer@addr,w
  8924  0FB2  00CD               	movwf	DATAEE_WriteByte@addr
  8925  0FB3  0853               	movf	DATAEE_WriteBuffer@buf,w
  8926  0FB4  0086               	movwf	6
  8927  0FB5  0854               	movf	DATAEE_WriteBuffer@buf+1,w
  8928  0FB6  0087               	movwf	7
  8929  0FB7  0801               	movf	1,w
  8930  0FB8  00CF               	movwf	DATAEE_WriteByte@byte
  8931  0FB9  27C3  3188         	fcall	_DATAEE_WriteByte
  8932  0FBB  0AD3               	incf	DATAEE_WriteBuffer@buf,f
  8933  0FBC  1903               	skipnz
  8934  0FBD  0AD4               	incf	DATAEE_WriteBuffer@buf+1,f
  8935  0FBE  0AD1               	incf	DATAEE_WriteBuffer@addr,f
  8936  0FBF  1903               	skipnz
  8937  0FC0  0AD2               	incf	DATAEE_WriteBuffer@addr+1,f
  8938  0FC1  03D6               	decf	DATAEE_WriteBuffer@i,f
  8939  0FC2  2FAC               	goto	l4769
  8940  0FC3                     __end_of_DATAEE_WriteBuffer:	
  8941  0FC3                     __ptext22:	
  8942 ;; *************** function _DATAEE_WriteByte *****************
  8943 ;; Defined at:
  8944 ;;		line 3 in file "driver/src/eeprom.c"
  8945 ;; Parameters:    Size  Location     Type
  8946 ;;  addr            2   13[BANK0 ] unsigned int 
  8947 ;;  byte            1   15[BANK0 ] unsigned char 
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;  GIEBitValue     1   16[BANK0 ] unsigned char 
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  1    wreg      void 
  8952 ;; Registers used:
  8953 ;;		wreg, status,2, status,0
  8954 ;; Tracked objects:
  8955 ;;		On entry : 1F/0
  8956 ;;		On exit  : 1F/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8959 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;Total ram usage:        4 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    7
  8966 ;; This function calls:
  8967 ;;		Nothing
  8968 ;; This function is called by:
  8969 ;;		_DATAEE_WriteBuffer
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           
  8973                           
  8974                           ;psect for function _DATAEE_WriteByte
  8975  0FC3                     _DATAEE_WriteByte:	
  8976                           
  8977                           ;eeprom.c: 5: uint8_t GIEBitValue = INTCONbits.GIE;
  8978                           
  8979                           ;incstack = 0
  8980                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  8981  0FC3  3000               	movlw	0
  8982  0FC4  1B8B               	btfsc	11,7	;volatile
  8983  0FC5  3001               	movlw	1
  8984  0FC6  00D0               	movwf	DATAEE_WriteByte@GIEBitValue
  8985                           
  8986                           ;eeprom.c: 7: NVMADRH = addr >> 8;
  8987  0FC7  084E               	movf	DATAEE_WriteByte@addr+1,w
  8988  0FC8  0031               	movlb	17	; select bank17
  8989  0FC9  0092               	movwf	18	;volatile
  8990                           
  8991                           ;eeprom.c: 8: NVMADRL = addr & 0xFF;
  8992  0FCA  0020               	movlb	0	; select bank0
  8993  0FCB  084D               	movf	DATAEE_WriteByte@addr,w
  8994  0FCC  0031               	movlb	17	; select bank17
  8995  0FCD  0091               	movwf	17	;volatile
  8996                           
  8997                           ;eeprom.c: 9: NVMDATL = byte;
  8998  0FCE  0020               	movlb	0	; select bank0
  8999  0FCF  084F               	movf	DATAEE_WriteByte@byte,w
  9000  0FD0  0031               	movlb	17	; select bank17
  9001  0FD1  0093               	movwf	19	;volatile
  9002                           
  9003                           ;eeprom.c: 10: NVMCON1bits.NVMREGS = 1;
  9004  0FD2  1715               	bsf	21,6	;volsfr
  9005                           
  9006                           ;eeprom.c: 11: NVMCON1bits.WREN = 1;
  9007  0FD3  1515               	bsf	21,2	;volsfr
  9008                           
  9009                           ;eeprom.c: 12: INTCONbits.GIE = 0;
  9010  0FD4  138B               	bcf	11,7	;volatile
  9011                           
  9012                           ;eeprom.c: 13: NVMCON2 = 0x55;
  9013  0FD5  3055               	movlw	85
  9014  0FD6  0096               	movwf	22	;volsfr
  9015                           
  9016                           ;eeprom.c: 14: NVMCON2 = 0xAA;
  9017  0FD7  30AA               	movlw	170
  9018  0FD8  0096               	movwf	22	;volsfr
  9019                           
  9020                           ;eeprom.c: 15: NVMCON1bits.WR = 1;
  9021  0FD9  1495               	bsf	21,1	;volsfr
  9022  0FDA                     l46:	
  9023                           ;eeprom.c: 17: while ( NVMCON1bits.WR );
  9024                           
  9025  0FDA  1895               	btfsc	21,1	;volsfr
  9026  0FDB  2FDA               	goto	l46
  9027                           
  9028                           ;eeprom.c: 19: NVMCON1bits.WREN = 0;
  9029  0FDC  1115               	bcf	21,2	;volsfr
  9030                           
  9031                           ;eeprom.c: 20: INTCONbits.GIE = GIEBitValue;
  9032  0FDD  0020               	movlb	0	; select bank0
  9033  0FDE  0C50               	rrf	DATAEE_WriteByte@GIEBitValue,w
  9034  0FDF  1C03               	skipc
  9035  0FE0  138B               	bcf	11,7	;volatile
  9036  0FE1  1803               	skipnc
  9037  0FE2  178B               	bsf	11,7	;volatile
  9038  0FE3  0008               	return
  9039  0FE4                     __end_of_DATAEE_WriteByte:	
  9040  0FE4                     __ptext16:	
  9041 ;; *************** function _ADC_Initialize_Default *****************
  9042 ;; Defined at:
  9043 ;;		line 14 in file "driver/src/adc.c"
  9044 ;; Parameters:    Size  Location     Type
  9045 ;;		None
  9046 ;; Auto vars:     Size  Location     Type
  9047 ;;		None
  9048 ;; Return value:  Size  Location     Type
  9049 ;;                  1    wreg      void 
  9050 ;; Registers used:
  9051 ;;		wreg, status,2
  9052 ;; Tracked objects:
  9053 ;;		On entry : 1F/0
  9054 ;;		On exit  : 1F/1
  9055 ;;		Unchanged: 0/0
  9056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;Total ram usage:        0 bytes
  9062 ;; Hardware stack levels used:    1
  9063 ;; Hardware stack levels required when called:    7
  9064 ;; This function calls:
  9065 ;;		Nothing
  9066 ;; This function is called by:
  9067 ;;		_SYSTEM_Initialize
  9068 ;; This function uses a non-reentrant model
  9069 ;;
  9070                           
  9071                           
  9072                           ;psect for function _ADC_Initialize_Default
  9073  0FE4                     _ADC_Initialize_Default:	
  9074  0FE4                     l4745:	
  9075                           ;incstack = 0
  9076                           ; Regs used in _ADC_Initialize_Default: [wreg+status,2]
  9077                           
  9078                           
  9079                           ;adc.c: 16: ADCON0 = 0x00;
  9080  0FE4  0021               	movlb	1	; select bank1
  9081  0FE5  019D               	clrf	29	;volatile
  9082                           
  9083                           ;adc.c: 17: ADCON1 = 0x80 | 0x50;
  9084  0FE6  30D0               	movlw	208
  9085  0FE7  009E               	movwf	30	;volatile
  9086                           
  9087                           ;adc.c: 18: ADACT = 0x00;
  9088  0FE8  019F               	clrf	31	;volatile
  9089                           
  9090                           ;adc.c: 19: ADRESH = 0x00;
  9091  0FE9  019C               	clrf	28	;volatile
  9092                           
  9093                           ;adc.c: 20: ADRESL = 0x00;
  9094  0FEA  019B               	clrf	27	;volatile
  9095  0FEB  0008               	return
  9096  0FEC                     __end_of_ADC_Initialize_Default:	
  9097  0FEC                     __ptext15:	
  9098 ;; *************** function _EUSART_Initialize_Default *****************
  9099 ;; Defined at:
  9100 ;;		line 17 in file "driver/src/eusart.c"
  9101 ;; Parameters:    Size  Location     Type
  9102 ;;		None
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;		None
  9105 ;; Return value:  Size  Location     Type
  9106 ;;                  1    wreg      void 
  9107 ;; Registers used:
  9108 ;;		wreg, status,2
  9109 ;; Tracked objects:
  9110 ;;		On entry : 1F/C
  9111 ;;		On exit  : 1F/0
  9112 ;;		Unchanged: 0/0
  9113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9118 ;;Total ram usage:        0 bytes
  9119 ;; Hardware stack levels used:    1
  9120 ;; Hardware stack levels required when called:    7
  9121 ;; This function calls:
  9122 ;;		Nothing
  9123 ;; This function is called by:
  9124 ;;		_SYSTEM_Initialize
  9125 ;; This function uses a non-reentrant model
  9126 ;;
  9127                           
  9128                           
  9129                           ;psect for function _EUSART_Initialize_Default
  9130  0FEC                     _EUSART_Initialize_Default:	
  9131                           
  9132                           ;eusart.c: 19: PIE1bits.RCIE = 0;
  9133                           
  9134                           ;incstack = 0
  9135                           ; Regs used in _EUSART_Initialize_Default: [wreg+status,2]
  9136  0FEC  0021               	movlb	1	; select bank1
  9137  0FED  1291               	bcf	17,5	;volatile
  9138                           
  9139                           ;eusart.c: 20: PIE1bits.TXIE = 0;
  9140  0FEE  1211               	bcf	17,4	;volatile
  9141                           
  9142                           ;eusart.c: 21: BAUD1CON = 0x08;
  9143  0FEF  3008               	movlw	8
  9144  0FF0  0023               	movlb	3	; select bank3
  9145  0FF1  009F               	movwf	31	;volatile
  9146                           
  9147                           ;eusart.c: 22: RC1STA = 0x80 | 0x10;
  9148  0FF2  3090               	movlw	144
  9149  0FF3  009D               	movwf	29	;volatile
  9150                           
  9151                           ;eusart.c: 23: TX1STA = 0x20 | 0x04;
  9152  0FF4  3024               	movlw	36
  9153  0FF5  009E               	movwf	30	;volatile
  9154                           
  9155                           ;eusart.c: 24: SP1BRG = 0x01A0;
  9156  0FF6  3001               	movlw	1
  9157  0FF7  009C               	movwf	28	;volatile
  9158  0FF8  30A0               	movlw	160
  9159  0FF9  009B               	movwf	27	;volatile
  9160                           
  9161                           ;eusart.c: 27: txTail = 0;
  9162  0FFA  0020               	movlb	0	; select bank0
  9163  0FFB  3020               	movlw	32
  9164  0FFC  01B5               	clrf	_txTail
  9165  0FFD  01B4               	clrf	_txHead
  9166                           
  9167                           ;eusart.c: 29: txRemain = sizeof (txBuf );
  9168  0FFE  00E0               	movwf	_txRemain
  9169  0FFF  0008               	return
  9170  1000                     __end_of_EUSART_Initialize_Default:	
  9171                           
  9172                           	psect	bssBANK0
  9173  0020                     __pbssBANK0:	
  9174  0020                     IR_ScanLongPress@cnt:	
  9175  0020                     	ds	2
  9176  0022                     IR_Decode@codeVal:	
  9177  0022                     	ds	2
  9178  0024                     Audio_GetValue@cnt:	
  9179  0024                     	ds	2
  9180  0026                     Audio_GetValue@min:	
  9181  0026                     	ds	2
  9182  0028                     Audio_GetValue@max:	
  9183  0028                     	ds	2
  9184  002A                     _audio_value:	
  9185  002A                     	ds	2
  9186  002C                     _adc_result:	
  9187  002C                     	ds	2
  9188  002E                     IR_Decode@rptCnt:	
  9189  002E                     	ds	1
  9190  002F                     IR_Decode@nBit:	
  9191  002F                     	ds	1
  9192  0030                     _keyValue:	
  9193  0030                     	ds	1
  9194  0031                     _rtc_status:	
  9195  0031                     	ds	1
  9196  0032                     Led_Run@cnt:	
  9197  0032                     	ds	1
  9198  0033                     Led_Notice@cnt:	
  9199  0033                     	ds	1
  9200  0034                     _txHead:	
  9201  0034                     	ds	1
  9202  0035                     _txTail:	
  9203  0035                     	ds	1
  9204  0036                     _ir_state:	
  9205  0036                     	ds	7
  9206  003D                     _rtc_time:	
  9207  003D                     	ds	3
  9208                           
  9209                           	psect	bssBANK1
  9210  00C8                     __pbssBANK1:	
  9211  00C8                     _gLedRunPara:	
  9212  00C8                     	ds	26
  9213                           
  9214                           	psect	dataBANK1
  9215  00A0                     __pdataBANK1:	
  9216  00A0                     Led_DynamicCloud@F8373:	
  9217  00A0                     	ds	10
  9218  00AA                     Led_DynamicMoon@F8363:	
  9219  00AA                     	ds	10
  9220  00B4                     Led_DynamicWave@F8353:	
  9221  00B4                     	ds	10
  9222  00BE                     _loadDuty:	
  9223  00BE                     	ds	10
  9224                           
  9225                           	psect	bssBANK2
  9226  0120                     __pbssBANK2:	
  9227  0120                     _txBuf:	
  9228  0120                     	ds	32
  9229                           
  9230                           	psect	dataBANK2
  9231  0154                     __pdataBANK2:	
  9232  0154                     Led_DynamicStorm@F8383:	
  9233  0154                     	ds	10
  9234                           
  9235                           	psect	inittext
  9236  113C                     init_ram:	
  9237  113C  00FE               	movwf	126
  9238  113D                     initloop:	
  9239  113D  0012               	moviw fsr0++
  9240  113E  001E               	movwi fsr1++
  9241  113F  3001               	movlw	1
  9242  1140  02FE               	subwf	126,f
  9243  1141  3000               	movlw	0
  9244  1142  3BFF               	subwfb	127,f
  9245  1143  087F               	movf	127,w
  9246  1144  047E               	iorwf	126,w
  9247  1145  1903               	btfsc	3,2
  9248  1146  3400               	retlw	0
  9249  1147  293D               	goto	initloop
  9250                           
  9251                           	psect	clrtext
  9252  1130                     clear_ram0:	
  9253                           ;	Called with FSR0 containing the base address, and
  9254                           ;	btemp/btemp+1 has the size to clear
  9255                           
  9256  1130  0064               	clrwdt	;clear the watchdog before getting into this loop
  9257  1131                     clrloop0:	
  9258  1131  3001               	movlw	1
  9259  1132  0180               	clrf	0	;clear RAM location pointed to by FSR
  9260  1133  3101               	addfsr 0,1
  9261  1134  02FE               	subwf	126,f
  9262  1135  3000               	movlw	0
  9263  1136  3BFF               	subwfb	127,f
  9264  1137  087F               	movf	127,w
  9265  1138  047E               	iorwf	126,w
  9266  1139  1903               	btfsc	3,2
  9267  113A  3400               	retlw	0	;all done for this memory range, return
  9268  113B  2931               	goto	clrloop0	;have we reached the end yet?
  9269                           
  9270                           	psect	cstackBANK2
  9271  0140                     __pcstackBANK2:	
  9272  0140                     ??_IR_KeyAction:	
  9273                           
  9274                           ; 1 bytes @ 0x0
  9275  0140                     	ds	10
  9276  014A                     IR_KeyAction@i:	
  9277                           
  9278                           ; 1 bytes @ 0xA
  9279  014A                     	ds	1
  9280  014B                     IR_KeyAction@i_1447:	
  9281                           
  9282                           ; 1 bytes @ 0xB
  9283  014B                     	ds	1
  9284  014C                     IR_KeyAction@i_1448:	
  9285                           
  9286                           ; 1 bytes @ 0xC
  9287  014C                     	ds	1
  9288  014D                     IR_KeyAction@i_1455:	
  9289                           
  9290                           ; 1 bytes @ 0xD
  9291  014D                     	ds	1
  9292  014E                     IR_KeyAction@i_1456:	
  9293                           
  9294                           ; 1 bytes @ 0xE
  9295  014E                     	ds	1
  9296  014F                     IR_KeyAction@i_1449:	
  9297                           
  9298                           ; 1 bytes @ 0xF
  9299  014F                     	ds	1
  9300  0150                     IR_KeyAction@i_1450:	
  9301                           
  9302                           ; 1 bytes @ 0x10
  9303  0150                     	ds	1
  9304  0151                     IR_KeyAction@i_1451:	
  9305                           
  9306                           ; 1 bytes @ 0x11
  9307  0151                     	ds	1
  9308  0152                     IR_KeyAction@i_1452:	
  9309                           
  9310                           ; 1 bytes @ 0x12
  9311  0152                     	ds	1
  9312  0153                     IR_KeyAction@idx:	
  9313                           
  9314                           ; 1 bytes @ 0x13
  9315  0153                     	ds	1
  9316                           
  9317                           	psect	cstackCOMMON
  9318  0070                     __pcstackCOMMON:	
  9319  0070                     ?_SYSTEM_Initialize:	
  9320  0070                     ?_Interrupt_Initialize:	
  9321                           ; 1 bytes @ 0x0
  9322                           
  9323  0070                     ?_Led_InitPara:	
  9324                           ; 1 bytes @ 0x0
  9325                           
  9326  0070                     ?_Audio_Initialize:	
  9327                           ; 1 bytes @ 0x0
  9328                           
  9329  0070                     ?_Led_Initialize:	
  9330                           ; 1 bytes @ 0x0
  9331                           
  9332  0070                     ?_IR_KeyAtionIfPressed:	
  9333                           ; 1 bytes @ 0x0
  9334                           
  9335  0070                     ?_IR_ResetIfTMR1Overflow:	
  9336                           ; 1 bytes @ 0x0
  9337                           
  9338  0070                     ?_Led_SaveParaIfChanged:	
  9339                           ; 1 bytes @ 0x0
  9340                           
  9341  0070                     ?_RTC_HourReady:	
  9342                           ; 1 bytes @ 0x0
  9343                           
  9344  0070                     ?_RTC_MinuteReady:	
  9345                           ; 1 bytes @ 0x0
  9346                           
  9347  0070                     ?_Led_CheckAutoStatus:	
  9348                           ; 1 bytes @ 0x0
  9349                           
  9350  0070                     ?_RTC_SecondReady:	
  9351                           ; 1 bytes @ 0x0
  9352                           
  9353  0070                     ?_Led_AutoRun:	
  9354                           ; 1 bytes @ 0x0
  9355                           
  9356  0070                     ?_IR_UpdateSetStatus:	
  9357                           ; 1 bytes @ 0x0
  9358                           
  9359  0070                     ?_IR_Decode:	
  9360                           ; 1 bytes @ 0x0
  9361                           
  9362  0070                     ?_RTC_OnSecond:	
  9363                           ; 1 bytes @ 0x0
  9364                           
  9365  0070                     ??_RTC_OnSecond:	
  9366                           ; 1 bytes @ 0x0
  9367                           
  9368  0070                     ?_Led_Run:	
  9369                           ; 1 bytes @ 0x0
  9370                           
  9371  0070                     ?_Led_Notice:	
  9372                           ; 1 bytes @ 0x0
  9373                           
  9374  0070                     ??_Led_Notice:	
  9375                           ; 1 bytes @ 0x0
  9376                           
  9377  0070                     ?_RTC_GetTime:	
  9378                           ; 1 bytes @ 0x0
  9379                           
  9380  0070                     ?_Led_TurnOffRamp:	
  9381                           ; 1 bytes @ 0x0
  9382                           
  9383  0070                     ?_Led_TurnOnRamp:	
  9384                           ; 1 bytes @ 0x0
  9385                           
  9386  0070                     ?_Led_UpdateBright:	
  9387                           ; 1 bytes @ 0x0
  9388                           
  9389  0070                     ?_IR_ScanLongPress:	
  9390                           ; 1 bytes @ 0x0
  9391                           
  9392  0070                     ?_ADC_Initialize_Default:	
  9393                           ; 1 bytes @ 0x0
  9394                           
  9395  0070                     ?_EUSART_Initialize_Default:	
  9396                           ; 1 bytes @ 0x0
  9397                           
  9398  0070                     ?_EUSART_Write:	
  9399                           ; 1 bytes @ 0x0
  9400                           
  9401  0070                     ?_EUSART_Transmit_ISR:	
  9402                           ; 1 bytes @ 0x0
  9403                           
  9404  0070                     ??_EUSART_Transmit_ISR:	
  9405                           ; 1 bytes @ 0x0
  9406                           
  9407  0070                     ?_PWM1_Initialize:	
  9408                           ; 1 bytes @ 0x0
  9409                           
  9410  0070                     ?_PWM2_Initialize:	
  9411                           ; 1 bytes @ 0x0
  9412                           
  9413  0070                     ?_PWM3_Initialize:	
  9414                           ; 1 bytes @ 0x0
  9415                           
  9416  0070                     ?_PWM4_Initialize:	
  9417                           ; 1 bytes @ 0x0
  9418                           
  9419  0070                     ?_PWM5_Initialize:	
  9420                           ; 1 bytes @ 0x0
  9421                           
  9422  0070                     ?_TMR0_Initialize_Default:	
  9423                           ; 1 bytes @ 0x0
  9424                           
  9425  0070                     ?_TMR0_StartTimer:	
  9426                           ; 1 bytes @ 0x0
  9427                           
  9428  0070                     ?_TMR0_ISR:	
  9429                           ; 1 bytes @ 0x0
  9430                           
  9431  0070                     ??_TMR0_ISR:	
  9432                           ; 1 bytes @ 0x0
  9433                           
  9434  0070                     ?_TMR1_Initialize_Default:	
  9435                           ; 1 bytes @ 0x0
  9436                           
  9437  0070                     ?_TMR1_StartTimer:	
  9438                           ; 1 bytes @ 0x0
  9439                           
  9440  0070                     ?_TMR1_StopTimer:	
  9441                           ; 1 bytes @ 0x0
  9442                           
  9443  0070                     ?_TMR1_GATE_ISR:	
  9444                           ; 1 bytes @ 0x0
  9445                           
  9446  0070                     ?_TMR2_Initialize_Default:	
  9447                           ; 1 bytes @ 0x0
  9448                           
  9449  0070                     ?_TMR2_StartTimer:	
  9450                           ; 1 bytes @ 0x0
  9451                           
  9452  0070                     ?_TMR2_ISR:	
  9453                           ; 1 bytes @ 0x0
  9454                           
  9455  0070                     ?_TMR2_DisableInterrupt:	
  9456                           ; 1 bytes @ 0x0
  9457                           
  9458  0070                     ?_TMR2_EnableInterrupt:	
  9459                           ; 1 bytes @ 0x0
  9460                           
  9461  0070                     ?_TMR4_Initialize_Default:	
  9462                           ; 1 bytes @ 0x0
  9463                           
  9464  0070                     ?_TMR4_StartTimer:	
  9465                           ; 1 bytes @ 0x0
  9466                           
  9467  0070                     ?_TMR4_StopTimer:	
  9468                           ; 1 bytes @ 0x0
  9469                           
  9470  0070                     ??_TMR4_StopTimer:	
  9471                           ; 1 bytes @ 0x0
  9472                           
  9473  0070                     ?_TMR4_ISR:	
  9474                           ; 1 bytes @ 0x0
  9475                           
  9476  0070                     ?_Audio_StopSound:	
  9477                           ; 1 bytes @ 0x0
  9478                           
  9479  0070                     ?_Audio_SelectSound:	
  9480                           ; 1 bytes @ 0x0
  9481                           
  9482  0070                     ?_Audio_SetPlayMode:	
  9483                           ; 1 bytes @ 0x0
  9484                           
  9485  0070                     ?_Audio_SetVolume:	
  9486                           ; 1 bytes @ 0x0
  9487                           
  9488  0070                     ?_Audio_GetValue:	
  9489                           ; 1 bytes @ 0x0
  9490                           
  9491  0070                     ?_main:	
  9492                           ; 1 bytes @ 0x0
  9493                           
  9494  0070                     ?_ISR:	
  9495                           ; 1 bytes @ 0x0
  9496                           
  9497  0070                     ?_OSCILLATOR_Initialize:	
  9498                           ; 1 bytes @ 0x0
  9499                           
  9500  0070                     ?_PIN_Initialize:	
  9501                           ; 1 bytes @ 0x0
  9502                           
  9503  0070                     ?_Led_FirstPowerUp:	
  9504                           ; 1 bytes @ 0x0
  9505                           
  9506  0070                     ?_Led_TurnOnDirect:	
  9507                           ; 1 bytes @ 0x0
  9508                           
  9509  0070                     ??_Led_TurnOnDirect:	
  9510                           ; 1 bytes @ 0x0
  9511                           
  9512  0070                     ?_Led_TurnOffDirect:	
  9513                           ; 1 bytes @ 0x0
  9514                           
  9515  0070                     ??_Led_TurnOffDirect:	
  9516                           ; 1 bytes @ 0x0
  9517                           
  9518  0070                     ?_Led_Ramp:	
  9519                           ; 1 bytes @ 0x0
  9520                           
  9521  0070                     ?_Led_StartNotice:	
  9522                           ; 1 bytes @ 0x0
  9523                           
  9524  0070                     ?_Led_RunMusic:	
  9525                           ; 1 bytes @ 0x0
  9526                           
  9527  0070                     ?_IR_GetIndex:	
  9528                           ; 1 bytes @ 0x0
  9529                           
  9530  0070                     ?_IR_GetKeyType:	
  9531                           ; 1 bytes @ 0x0
  9532                           
  9533  0070                     ??_IR_GetKeyType:	
  9534                           ; 1 bytes @ 0x0
  9535                           
  9536  0070                     ?_IR_ExitSet:	
  9537                           ; 1 bytes @ 0x0
  9538                           
  9539  0070                     ?_IR_ExitTimeout:	
  9540                           ; 1 bytes @ 0x0
  9541                           
  9542  0070                     ?_IR_KeyAction:	
  9543                           ; 1 bytes @ 0x0
  9544                           
  9545  0070                     ?i1_EUSART_Write:	
  9546                           ; 1 bytes @ 0x0
  9547                           
  9548  0070                     ??i1_EUSART_Write:	
  9549                           ; 1 bytes @ 0x0
  9550                           
  9551  0070                     ?i1_PWM1_LoadDutyValue:	
  9552                           ; 1 bytes @ 0x0
  9553                           
  9554  0070                     ?i1_PWM2_LoadDutyValue:	
  9555                           ; 1 bytes @ 0x0
  9556                           
  9557  0070                     ?i1_PWM3_LoadDutyValue:	
  9558                           ; 1 bytes @ 0x0
  9559                           
  9560  0070                     ?i1_PWM4_LoadDutyValue:	
  9561                           ; 1 bytes @ 0x0
  9562                           
  9563  0070                     ?i1_PWM5_LoadDutyValue:	
  9564                           ; 1 bytes @ 0x0
  9565                           
  9566  0070                     ?i1_TMR2_DisableInterrupt:	
  9567                           ; 1 bytes @ 0x0
  9568                           
  9569  0070                     ??i1_TMR2_DisableInterrupt:	
  9570                           ; 1 bytes @ 0x0
  9571                           
  9572  0070                     ?i1_TMR2_EnableInterrupt:	
  9573                           ; 1 bytes @ 0x0
  9574                           
  9575  0070                     ??i1_TMR2_EnableInterrupt:	
  9576                           ; 1 bytes @ 0x0
  9577                           
  9578  0070                     ?i1_TMR4_StartTimer:	
  9579                           ; 1 bytes @ 0x0
  9580                           
  9581  0070                     ??i1_TMR4_StartTimer:	
  9582                           ; 1 bytes @ 0x0
  9583                           
  9584  0070                     ?i1_Led_UpdateBright:	
  9585                           ; 1 bytes @ 0x0
  9586                           
  9587  0070                     ?i1_Led_StartNotice:	
  9588                           ; 1 bytes @ 0x0
  9589                           
  9590  0070                     ??i1_Led_StartNotice:	
  9591                           ; 1 bytes @ 0x0
  9592                           
  9593  0070                     ?i1_IR_GetIndex:	
  9594                           ; 1 bytes @ 0x0
  9595                           
  9596  0070                     ??i1_IR_GetIndex:	
  9597                           ; 1 bytes @ 0x0
  9598                           
  9599  0070                     ?i1_Util_IncValue:	
  9600                           ; 1 bytes @ 0x0
  9601                           
  9602  0070                     ?i1_Util_DecValue:	
  9603                           ; 1 bytes @ 0x0
  9604                           
  9605  0070                     ?i1___wmul:	
  9606                           ; 1 bytes @ 0x0
  9607                           
  9608  0070                     i1EUSART_Write@byte:	
  9609                           ; 2 bytes @ 0x0
  9610                           
  9611  0070                     i1IR_GetIndex@idx:	
  9612                           ; 1 bytes @ 0x0
  9613                           
  9614  0070                     i1PWM1_LoadDutyValue@dutyValue:	
  9615                           ; 1 bytes @ 0x0
  9616                           
  9617  0070                     i1PWM2_LoadDutyValue@dutyValue:	
  9618                           ; 2 bytes @ 0x0
  9619                           
  9620  0070                     i1PWM3_LoadDutyValue@dutyValue:	
  9621                           ; 2 bytes @ 0x0
  9622                           
  9623  0070                     i1PWM4_LoadDutyValue@dutyValue:	
  9624                           ; 2 bytes @ 0x0
  9625                           
  9626  0070                     i1PWM5_LoadDutyValue@dutyValue:	
  9627                           ; 2 bytes @ 0x0
  9628                           
  9629  0070                     i1Util_IncValue@pSrc:	
  9630                           ; 2 bytes @ 0x0
  9631                           
  9632  0070                     i1Util_DecValue@pSrc:	
  9633                           ; 2 bytes @ 0x0
  9634                           
  9635  0070                     i1___wmul@multiplier:	
  9636                           ; 2 bytes @ 0x0
  9637                           
  9638                           
  9639                           ; 2 bytes @ 0x0
  9640  0070                     	ds	1
  9641  0071                     ??_TMR4_ISR:	
  9642  0071                     ??_Audio_SelectSound:	
  9643                           ; 1 bytes @ 0x1
  9644                           
  9645  0071                     Audio_SelectSound@index:	
  9646                           ; 1 bytes @ 0x1
  9647                           
  9648  0071                     IR_GetKeyType@result:	
  9649                           ; 1 bytes @ 0x1
  9650                           
  9651  0071                     i1Led_StartNotice@cnt:	
  9652                           ; 1 bytes @ 0x1
  9653                           
  9654  0071                     i1IR_GetIndex@keynum:	
  9655                           ; 1 bytes @ 0x1
  9656                           
  9657                           
  9658                           ; 1 bytes @ 0x1
  9659  0071                     	ds	1
  9660  0072                     ??i1_PWM1_LoadDutyValue:	
  9661  0072                     ??i1_PWM2_LoadDutyValue:	
  9662                           ; 1 bytes @ 0x2
  9663                           
  9664  0072                     ??i1_PWM3_LoadDutyValue:	
  9665                           ; 1 bytes @ 0x2
  9666                           
  9667  0072                     ??i1_PWM4_LoadDutyValue:	
  9668                           ; 1 bytes @ 0x2
  9669                           
  9670  0072                     ??i1_PWM5_LoadDutyValue:	
  9671                           ; 1 bytes @ 0x2
  9672                           
  9673  0072                     Audio_SelectSound@checksum:	
  9674                           ; 1 bytes @ 0x2
  9675                           
  9676  0072                     IR_GetKeyType@keynum:	
  9677                           ; 1 bytes @ 0x2
  9678                           
  9679  0072                     i1Util_IncValue@max:	
  9680                           ; 1 bytes @ 0x2
  9681                           
  9682  0072                     i1Util_DecValue@min:	
  9683                           ; 2 bytes @ 0x2
  9684                           
  9685  0072                     i1___wmul@multiplicand:	
  9686                           ; 2 bytes @ 0x2
  9687                           
  9688                           
  9689                           ; 2 bytes @ 0x2
  9690  0072                     	ds	1
  9691  0073                     ??_IR_Decode:	
  9692                           
  9693                           ; 1 bytes @ 0x3
  9694  0073                     	ds	1
  9695  0074                     ??_Led_Ramp:	
  9696  0074                     ??i1_Led_UpdateBright:	
  9697                           ; 1 bytes @ 0x4
  9698                           
  9699  0074                     ??i1___wmul:	
  9700                           ; 1 bytes @ 0x4
  9701                           
  9702  0074                     i1Led_UpdateBright@i:	
  9703                           ; 1 bytes @ 0x4
  9704                           
  9705  0074                     i1Util_IncValue@delta:	
  9706                           ; 1 bytes @ 0x4
  9707                           
  9708  0074                     i1Util_DecValue@delta:	
  9709                           ; 2 bytes @ 0x4
  9710                           
  9711  0074                     i1___wmul@product:	
  9712                           ; 2 bytes @ 0x4
  9713                           
  9714                           
  9715                           ; 2 bytes @ 0x4
  9716  0074                     	ds	2
  9717  0076                     ?_Led_SetCustom:	
  9718  0076                     ?_Led_DynamicWave:	
  9719                           ; 1 bytes @ 0x6
  9720                           
  9721  0076                     ?_Led_DynamicMoon:	
  9722                           ; 1 bytes @ 0x6
  9723                           
  9724  0076                     ?_Led_DynamicCloud:	
  9725                           ; 1 bytes @ 0x6
  9726                           
  9727  0076                     ?_Led_DynamicStorm:	
  9728                           ; 1 bytes @ 0x6
  9729                           
  9730  0076                     ??i1_Util_IncValue:	
  9731                           ; 1 bytes @ 0x6
  9732                           
  9733  0076                     ??i1_Util_DecValue:	
  9734                           ; 1 bytes @ 0x6
  9735                           
  9736  0076                     Led_SetCustom@pValue:	
  9737                           ; 1 bytes @ 0x6
  9738                           
  9739  0076                     Led_DynamicWave@ptp:	
  9740                           ; 1 bytes @ 0x6
  9741                           
  9742  0076                     Led_DynamicMoon@ptp:	
  9743                           ; 2 bytes @ 0x6
  9744                           
  9745  0076                     Led_DynamicCloud@ptp:	
  9746                           ; 2 bytes @ 0x6
  9747                           
  9748  0076                     Led_DynamicStorm@ptp:	
  9749                           ; 2 bytes @ 0x6
  9750                           
  9751                           
  9752                           ; 2 bytes @ 0x6
  9753  0076                     	ds	1
  9754  0077                     ??_Led_SetCustom:	
  9755  0077                     IR_Decode@revKeyNum:	
  9756                           ; 1 bytes @ 0x7
  9757                           
  9758                           
  9759                           ; 1 bytes @ 0x7
  9760  0077                     	ds	1
  9761  0078                     ??_Led_DynamicWave:	
  9762  0078                     ??_Led_DynamicMoon:	
  9763                           ; 1 bytes @ 0x8
  9764                           
  9765  0078                     ??_Led_DynamicCloud:	
  9766                           ; 1 bytes @ 0x8
  9767                           
  9768  0078                     ??_Led_DynamicStorm:	
  9769                           ; 1 bytes @ 0x8
  9770                           
  9771  0078                     IR_Decode@type:	
  9772                           ; 1 bytes @ 0x8
  9773                           
  9774                           
  9775                           ; 1 bytes @ 0x8
  9776  0078                     	ds	1
  9777  0079                     IR_Decode@keyNum:	
  9778                           
  9779                           ; 1 bytes @ 0x9
  9780  0079                     	ds	1
  9781  007A                     Led_Ramp@i:	
  9782  007A                     IR_Decode@hVal:	
  9783                           ; 1 bytes @ 0xA
  9784                           
  9785                           
  9786                           ; 2 bytes @ 0xA
  9787  007A                     	ds	2
  9788  007C                     ??_TMR1_GATE_ISR:	
  9789  007C                     ??_Led_RunMusic:	
  9790                           ; 1 bytes @ 0xC
  9791                           
  9792                           
  9793                           ; 1 bytes @ 0xC
  9794  007C                     	ds	1
  9795  007D                     ??_Led_Run:	
  9796                           
  9797                           ; 1 bytes @ 0xD
  9798  007D                     	ds	1
  9799  007E                     ??_TMR2_ISR:	
  9800  007E                     ??_ISR:	
  9801                           ; 1 bytes @ 0xE
  9802                           
  9803                           
  9804                           	psect	cstackBANK0
  9805  0040                     __pcstackBANK0:	
  9806                           ; 1 bytes @ 0xE
  9807                           
  9808  0040                     Led_SetCustom@value:	
  9809  0040                     Led_DynamicWave@duty:	
  9810                           ; 2 bytes @ 0x0
  9811                           
  9812  0040                     Led_DynamicMoon@duty:	
  9813                           ; 10 bytes @ 0x0
  9814                           
  9815  0040                     Led_DynamicCloud@duty:	
  9816                           ; 10 bytes @ 0x0
  9817                           
  9818  0040                     Led_DynamicStorm@duty:	
  9819                           ; 10 bytes @ 0x0
  9820                           
  9821                           
  9822                           ; 10 bytes @ 0x0
  9823  0040                     	ds	2
  9824  0042                     Led_SetCustom@idx:	
  9825                           
  9826                           ; 1 bytes @ 0x2
  9827  0042                     	ds	1
  9828  0043                     Led_SetCustom@i:	
  9829                           
  9830                           ; 1 bytes @ 0x3
  9831  0043                     	ds	1
  9832  0044                     ??_IR_ScanLongPress:	
  9833                           
  9834                           ; 1 bytes @ 0x4
  9835  0044                     	ds	4
  9836  0048                     IR_ScanLongPress@i:	
  9837                           
  9838                           ; 1 bytes @ 0x8
  9839  0048                     	ds	1
  9840  0049                     IR_ScanLongPress@i_1441:	
  9841                           
  9842                           ; 1 bytes @ 0x9
  9843  0049                     	ds	1
  9844  004A                     IR_ScanLongPress@idx:	
  9845  004A                     Led_DynamicWave@val:	
  9846                           ; 1 bytes @ 0xA
  9847                           
  9848  004A                     Led_DynamicMoon@val:	
  9849                           ; 2 bytes @ 0xA
  9850                           
  9851  004A                     Led_DynamicCloud@val:	
  9852                           ; 2 bytes @ 0xA
  9853                           
  9854  004A                     Led_DynamicStorm@val:	
  9855                           ; 2 bytes @ 0xA
  9856                           
  9857                           
  9858                           ; 2 bytes @ 0xA
  9859  004A                     	ds	2
  9860  004C                     Led_DynamicWave@i:	
  9861  004C                     Led_DynamicMoon@i:	
  9862                           ; 1 bytes @ 0xC
  9863                           
  9864  004C                     Led_DynamicCloud@i:	
  9865                           ; 1 bytes @ 0xC
  9866                           
  9867  004C                     Led_DynamicStorm@i:	
  9868                           ; 1 bytes @ 0xC
  9869                           
  9870                           
  9871                           ; 1 bytes @ 0xC
  9872  004C                     	ds	1
  9873  004D                     ??_IR_ResetIfTMR1Overflow:	
  9874  004D                     ??_RTC_HourReady:	
  9875                           ; 1 bytes @ 0xD
  9876                           
  9877  004D                     ??_RTC_MinuteReady:	
  9878                           ; 1 bytes @ 0xD
  9879                           
  9880  004D                     ??_RTC_SecondReady:	
  9881                           ; 1 bytes @ 0xD
  9882                           
  9883  004D                     ??_RTC_GetTime:	
  9884                           ; 1 bytes @ 0xD
  9885                           
  9886  004D                     ??_Led_TurnOffRamp:	
  9887                           ; 1 bytes @ 0xD
  9888                           
  9889  004D                     ??_Led_TurnOnRamp:	
  9890                           ; 1 bytes @ 0xD
  9891                           
  9892  004D                     ?_Util_IncValue:	
  9893                           ; 1 bytes @ 0xD
  9894                           
  9895  004D                     ?_Util_DecValue:	
  9896                           ; 1 bytes @ 0xD
  9897                           
  9898  004D                     ??_ADC_Initialize_Default:	
  9899                           ; 1 bytes @ 0xD
  9900                           
  9901  004D                     ?_DATAEE_WriteByte:	
  9902                           ; 1 bytes @ 0xD
  9903                           
  9904  004D                     ?_DATAEE_ReadByte:	
  9905                           ; 1 bytes @ 0xD
  9906                           
  9907  004D                     ??_EUSART_Initialize_Default:	
  9908                           ; 1 bytes @ 0xD
  9909                           
  9910  004D                     ??_EUSART_Write:	
  9911                           ; 1 bytes @ 0xD
  9912                           
  9913  004D                     ??_PWM1_Initialize:	
  9914                           ; 1 bytes @ 0xD
  9915                           
  9916  004D                     ?_PWM1_LoadDutyValue:	
  9917                           ; 1 bytes @ 0xD
  9918                           
  9919  004D                     ??_PWM2_Initialize:	
  9920                           ; 1 bytes @ 0xD
  9921                           
  9922  004D                     ?_PWM2_LoadDutyValue:	
  9923                           ; 1 bytes @ 0xD
  9924                           
  9925  004D                     ??_PWM3_Initialize:	
  9926                           ; 1 bytes @ 0xD
  9927                           
  9928  004D                     ?_PWM3_LoadDutyValue:	
  9929                           ; 1 bytes @ 0xD
  9930                           
  9931  004D                     ??_PWM4_Initialize:	
  9932                           ; 1 bytes @ 0xD
  9933                           
  9934  004D                     ?_PWM4_LoadDutyValue:	
  9935                           ; 1 bytes @ 0xD
  9936                           
  9937  004D                     ??_PWM5_Initialize:	
  9938                           ; 1 bytes @ 0xD
  9939                           
  9940  004D                     ?_PWM5_LoadDutyValue:	
  9941                           ; 1 bytes @ 0xD
  9942                           
  9943  004D                     ??_TMR0_Initialize_Default:	
  9944                           ; 1 bytes @ 0xD
  9945                           
  9946  004D                     ??_TMR0_StartTimer:	
  9947                           ; 1 bytes @ 0xD
  9948                           
  9949  004D                     ?_TMR0_SetInterruptHandler:	
  9950                           ; 1 bytes @ 0xD
  9951                           
  9952  004D                     ??_TMR1_Initialize_Default:	
  9953                           ; 1 bytes @ 0xD
  9954                           
  9955  004D                     ??_TMR1_StartTimer:	
  9956                           ; 1 bytes @ 0xD
  9957                           
  9958  004D                     ??_TMR1_StopTimer:	
  9959                           ; 1 bytes @ 0xD
  9960                           
  9961  004D                     ?_TMR1_Gate_SetInterruptHandler:	
  9962                           ; 1 bytes @ 0xD
  9963                           
  9964  004D                     ??_TMR2_Initialize_Default:	
  9965                           ; 1 bytes @ 0xD
  9966                           
  9967  004D                     ??_TMR2_StartTimer:	
  9968                           ; 1 bytes @ 0xD
  9969                           
  9970  004D                     ?_TMR2_SetInterruptHandler:	
  9971                           ; 1 bytes @ 0xD
  9972                           
  9973  004D                     ??_TMR2_DisableInterrupt:	
  9974                           ; 1 bytes @ 0xD
  9975                           
  9976  004D                     ??_TMR2_EnableInterrupt:	
  9977                           ; 1 bytes @ 0xD
  9978                           
  9979  004D                     ??_TMR4_Initialize_Default:	
  9980                           ; 1 bytes @ 0xD
  9981                           
  9982  004D                     ??_TMR4_StartTimer:	
  9983                           ; 1 bytes @ 0xD
  9984                           
  9985  004D                     ?_TMR4_SetInterruptHandler:	
  9986                           ; 1 bytes @ 0xD
  9987                           
  9988  004D                     ??_OSCILLATOR_Initialize:	
  9989                           ; 1 bytes @ 0xD
  9990                           
  9991  004D                     ??_PIN_Initialize:	
  9992                           ; 1 bytes @ 0xD
  9993                           
  9994  004D                     ??_Led_FirstPowerUp:	
  9995                           ; 1 bytes @ 0xD
  9996                           
  9997  004D                     ??_Led_StartNotice:	
  9998                           ; 1 bytes @ 0xD
  9999                           
 10000  004D                     ??_IR_GetIndex:	
 10001                           ; 1 bytes @ 0xD
 10002                           
 10003  004D                     ?___bmul:	
 10004                           ; 1 bytes @ 0xD
 10005                           
 10006  004D                     ?_ADC_Conversion:	
 10007                           ; 1 bytes @ 0xD
 10008                           
 10009  004D                     ?___wmul:	
 10010                           ; 2 bytes @ 0xD
 10011                           
 10012  004D                     EUSART_Write@byte:	
 10013                           ; 2 bytes @ 0xD
 10014                           
 10015  004D                     PIN_Initialize@state:	
 10016                           ; 1 bytes @ 0xD
 10017                           
 10018  004D                     Led_TurnOffRamp@i:	
 10019                           ; 1 bytes @ 0xD
 10020                           
 10021  004D                     IR_GetIndex@idx:	
 10022                           ; 1 bytes @ 0xD
 10023                           
 10024  004D                     ___bmul@multiplicand:	
 10025                           ; 1 bytes @ 0xD
 10026                           
 10027  004D                     DATAEE_WriteByte@addr:	
 10028                           ; 1 bytes @ 0xD
 10029                           
 10030  004D                     DATAEE_ReadByte@addr:	
 10031                           ; 2 bytes @ 0xD
 10032                           
 10033  004D                     PWM1_LoadDutyValue@dutyValue:	
 10034                           ; 2 bytes @ 0xD
 10035                           
 10036  004D                     PWM2_LoadDutyValue@dutyValue:	
 10037                           ; 2 bytes @ 0xD
 10038                           
 10039  004D                     PWM3_LoadDutyValue@dutyValue:	
 10040                           ; 2 bytes @ 0xD
 10041                           
 10042  004D                     PWM4_LoadDutyValue@dutyValue:	
 10043                           ; 2 bytes @ 0xD
 10044                           
 10045  004D                     PWM5_LoadDutyValue@dutyValue:	
 10046                           ; 2 bytes @ 0xD
 10047                           
 10048  004D                     TMR0_SetInterruptHandler@handler:	
 10049                           ; 2 bytes @ 0xD
 10050                           
 10051  004D                     TMR1_Gate_SetInterruptHandler@handler:	
 10052                           ; 2 bytes @ 0xD
 10053                           
 10054  004D                     TMR2_SetInterruptHandler@handler:	
 10055                           ; 2 bytes @ 0xD
 10056                           
 10057  004D                     TMR4_SetInterruptHandler@handler:	
 10058                           ; 2 bytes @ 0xD
 10059                           
 10060  004D                     Util_IncValue@pSrc:	
 10061                           ; 2 bytes @ 0xD
 10062                           
 10063  004D                     Util_DecValue@pSrc:	
 10064                           ; 2 bytes @ 0xD
 10065                           
 10066  004D                     ___wmul@multiplier:	
 10067                           ; 2 bytes @ 0xD
 10068                           
 10069                           
 10070                           ; 2 bytes @ 0xD
 10071  004D                     	ds	1
 10072  004E                     ??_SYSTEM_Initialize:	
 10073  004E                     ??_Audio_StopSound:	
 10074                           ; 1 bytes @ 0xE
 10075                           
 10076  004E                     ??_Audio_SetPlayMode:	
 10077                           ; 1 bytes @ 0xE
 10078                           
 10079  004E                     ??_Audio_SetVolume:	
 10080                           ; 1 bytes @ 0xE
 10081                           
 10082  004E                     ??___bmul:	
 10083                           ; 1 bytes @ 0xE
 10084                           
 10085  004E                     Audio_StopSound@checksum:	
 10086                           ; 1 bytes @ 0xE
 10087                           
 10088  004E                     Audio_SetPlayMode@type:	
 10089                           ; 1 bytes @ 0xE
 10090                           
 10091  004E                     Audio_SetVolume@vol:	
 10092                           ; 1 bytes @ 0xE
 10093                           
 10094  004E                     Led_StartNotice@cnt:	
 10095                           ; 1 bytes @ 0xE
 10096                           
 10097  004E                     IR_GetIndex@keynum:	
 10098                           ; 1 bytes @ 0xE
 10099                           
 10100  004E                     ___bmul@product:	
 10101                           ; 1 bytes @ 0xE
 10102                           
 10103                           
 10104                           ; 1 bytes @ 0xE
 10105  004E                     	ds	1
 10106  004F                     ??_Interrupt_Initialize:	
 10107  004F                     ??_ADC_Conversion:	
 10108                           ; 1 bytes @ 0xF
 10109                           
 10110  004F                     ??_DATAEE_ReadByte:	
 10111                           ; 1 bytes @ 0xF
 10112                           
 10113  004F                     ?_DATAEE_ReadBuffer:	
 10114                           ; 1 bytes @ 0xF
 10115                           
 10116  004F                     ??_PWM1_LoadDutyValue:	
 10117                           ; 1 bytes @ 0xF
 10118                           
 10119  004F                     ??_PWM2_LoadDutyValue:	
 10120                           ; 1 bytes @ 0xF
 10121                           
 10122  004F                     ??_PWM3_LoadDutyValue:	
 10123                           ; 1 bytes @ 0xF
 10124                           
 10125  004F                     ??_PWM4_LoadDutyValue:	
 10126                           ; 1 bytes @ 0xF
 10127                           
 10128  004F                     ??_PWM5_LoadDutyValue:	
 10129                           ; 1 bytes @ 0xF
 10130                           
 10131  004F                     ??_TMR0_SetInterruptHandler:	
 10132                           ; 1 bytes @ 0xF
 10133                           
 10134  004F                     ??_TMR1_Gate_SetInterruptHandler:	
 10135                           ; 1 bytes @ 0xF
 10136                           
 10137  004F                     ??_TMR2_SetInterruptHandler:	
 10138                           ; 1 bytes @ 0xF
 10139                           
 10140  004F                     ??_TMR4_SetInterruptHandler:	
 10141                           ; 1 bytes @ 0xF
 10142                           
 10143  004F                     DATAEE_WriteByte@byte:	
 10144                           ; 1 bytes @ 0xF
 10145                           
 10146  004F                     Audio_SetPlayMode@checksum:	
 10147                           ; 1 bytes @ 0xF
 10148                           
 10149  004F                     Audio_SetVolume@checksum:	
 10150                           ; 1 bytes @ 0xF
 10151                           
 10152  004F                     ___bmul@multiplier:	
 10153                           ; 1 bytes @ 0xF
 10154                           
 10155  004F                     DATAEE_ReadBuffer@addr:	
 10156                           ; 1 bytes @ 0xF
 10157                           
 10158  004F                     Util_IncValue@max:	
 10159                           ; 2 bytes @ 0xF
 10160                           
 10161  004F                     Util_DecValue@min:	
 10162                           ; 2 bytes @ 0xF
 10163                           
 10164  004F                     ___wmul@multiplicand:	
 10165                           ; 2 bytes @ 0xF
 10166                           
 10167                           
 10168                           ; 2 bytes @ 0xF
 10169  004F                     	ds	1
 10170  0050                     ??_Audio_Initialize:	
 10171  0050                     ??_DATAEE_WriteByte:	
 10172                           ; 1 bytes @ 0x10
 10173                           
 10174  0050                     ?_IR_IsValidTime:	
 10175                           ; 1 bytes @ 0x10
 10176                           
 10177  0050                     ADC_Conversion@chn:	
 10178                           ; 1 bytes @ 0x10
 10179                           
 10180  0050                     DATAEE_WriteByte@GIEBitValue:	
 10181                           ; 1 bytes @ 0x10
 10182                           
 10183  0050                     IR_IsValidTime@len:	
 10184                           ; 1 bytes @ 0x10
 10185                           
 10186                           
 10187                           ; 1 bytes @ 0x10
 10188  0050                     	ds	1
 10189  0051                     ??_Led_UpdateBright:	
 10190  0051                     ?_DATAEE_WriteBuffer:	
 10191                           ; 1 bytes @ 0x11
 10192                           
 10193  0051                     ??_IR_IsValidTime:	
 10194                           ; 1 bytes @ 0x11
 10195                           
 10196  0051                     ??___wmul:	
 10197                           ; 1 bytes @ 0x11
 10198                           
 10199  0051                     Led_UpdateBright@i:	
 10200                           ; 1 bytes @ 0x11
 10201                           
 10202  0051                     Led_TurnOnRamp@i:	
 10203                           ; 1 bytes @ 0x11
 10204                           
 10205  0051                     IR_IsValidTime@min:	
 10206                           ; 1 bytes @ 0x11
 10207                           
 10208  0051                     DATAEE_WriteBuffer@addr:	
 10209                           ; 1 bytes @ 0x11
 10210                           
 10211  0051                     DATAEE_ReadBuffer@buf:	
 10212                           ; 2 bytes @ 0x11
 10213                           
 10214  0051                     Util_IncValue@delta:	
 10215                           ; 2 bytes @ 0x11
 10216                           
 10217  0051                     Util_DecValue@delta:	
 10218                           ; 2 bytes @ 0x11
 10219                           
 10220  0051                     ___wmul@product:	
 10221                           ; 2 bytes @ 0x11
 10222                           
 10223                           
 10224                           ; 2 bytes @ 0x11
 10225  0051                     	ds	1
 10226  0052                     IR_IsValidTime@result:	
 10227  0052                     _Audio_Initialize$1221:	
 10228                           ; 1 bytes @ 0x12
 10229                           
 10230                           
 10231                           ; 2 bytes @ 0x12
 10232  0052                     	ds	1
 10233  0053                     ??_Led_Initialize:	
 10234  0053                     ??_Led_CheckAutoStatus:	
 10235                           ; 1 bytes @ 0x13
 10236                           
 10237  0053                     ??_Util_IncValue:	
 10238                           ; 1 bytes @ 0x13
 10239                           
 10240  0053                     ??_Util_DecValue:	
 10241                           ; 1 bytes @ 0x13
 10242                           
 10243  0053                     ??_Audio_GetValue:	
 10244                           ; 1 bytes @ 0x13
 10245                           
 10246  0053                     DATAEE_ReadBuffer@len:	
 10247                           ; 1 bytes @ 0x13
 10248                           
 10249  0053                     Led_FirstPowerUp@i:	
 10250                           ; 1 bytes @ 0x13
 10251                           
 10252  0053                     IR_IsValidTime@hour:	
 10253                           ; 1 bytes @ 0x13
 10254                           
 10255  0053                     DATAEE_WriteBuffer@buf:	
 10256                           ; 1 bytes @ 0x13
 10257                           
 10258                           
 10259                           ; 2 bytes @ 0x13
 10260  0053                     	ds	1
 10261  0054                     ??_DATAEE_ReadBuffer:	
 10262  0054                     IR_IsValidTime@tm:	
 10263                           ; 1 bytes @ 0x14
 10264                           
 10265                           
 10266                           ; 1 bytes @ 0x14
 10267  0054                     	ds	1
 10268  0055                     DATAEE_WriteBuffer@len:	
 10269  0055                     DATAEE_ReadBuffer@i:	
 10270                           ; 1 bytes @ 0x15
 10271                           
 10272                           
 10273                           ; 1 bytes @ 0x15
 10274  0055                     	ds	1
 10275  0056                     ??_Led_InitPara:	
 10276  0056                     ??_DATAEE_WriteBuffer:	
 10277                           ; 1 bytes @ 0x16
 10278                           
 10279  0056                     DATAEE_WriteBuffer@i:	
 10280                           ; 1 bytes @ 0x16
 10281                           
 10282                           
 10283                           ; 1 bytes @ 0x16
 10284  0056                     	ds	1
 10285  0057                     ??_Led_SaveParaIfChanged:	
 10286  0057                     ??_Led_AutoRun:	
 10287                           ; 1 bytes @ 0x17
 10288                           
 10289  0057                     Led_Initialize@result:	
 10290                           ; 1 bytes @ 0x17
 10291                           
 10292  0057                     Audio_GetValue@value:	
 10293                           ; 1 bytes @ 0x17
 10294                           
 10295  0057                     Led_CheckAutoStatus@sunrise:	
 10296                           ; 2 bytes @ 0x17
 10297                           
 10298                           
 10299                           ; 2 bytes @ 0x17
 10300  0057                     	ds	1
 10301  0058                     Led_Initialize@ct:	
 10302                           
 10303                           ; 2 bytes @ 0x18
 10304  0058                     	ds	1
 10305  0059                     Led_CheckAutoStatus@sunset:	
 10306                           
 10307                           ; 2 bytes @ 0x19
 10308  0059                     	ds	1
 10309  005A                     Led_Initialize@i:	
 10310                           
 10311                           ; 1 bytes @ 0x1A
 10312  005A                     	ds	1
 10313  005B                     ??_IR_KeyAtionIfPressed:	
 10314  005B                     ??_IR_UpdateSetStatus:	
 10315                           ; 1 bytes @ 0x1B
 10316                           
 10317  005B                     ??_IR_ExitSet:	
 10318                           ; 1 bytes @ 0x1B
 10319                           
 10320  005B                     ??_IR_ExitTimeout:	
 10321                           ; 1 bytes @ 0x1B
 10322                           
 10323  005B                     Led_AutoRun@i:	
 10324                           ; 1 bytes @ 0x1B
 10325                           
 10326  005B                     Led_CheckAutoStatus@ct:	
 10327                           ; 1 bytes @ 0x1B
 10328                           
 10329                           
 10330                           ; 2 bytes @ 0x1B
 10331  005B                     	ds	2
 10332  005D                     Led_CheckAutoStatus@i_1252:	
 10333                           
 10334                           ; 1 bytes @ 0x1D
 10335  005D                     	ds	1
 10336  005E                     Led_InitPara@j:	
 10337  005E                     Led_CheckAutoStatus@i_1253:	
 10338                           ; 1 bytes @ 0x1E
 10339                           
 10340                           
 10341                           ; 1 bytes @ 0x1E
 10342  005E                     	ds	1
 10343  005F                     Led_InitPara@i:	
 10344  005F                     Led_CheckAutoStatus@i:	
 10345                           ; 1 bytes @ 0x1F
 10346                           
 10347                           
 10348                           ; 1 bytes @ 0x1F
 10349  005F                     	ds	1
 10350  0060                     ??_main:	
 10351                           
 10352                           	psect	text35
 10353  11BD                     __ptext35:	
 10354 ;; *************** function _IR_ExitTimeout *****************
 10355 ;; Defined at:
 10356 ;;		line 443 in file "user/src/ir.c"
 10357 ;; Parameters:    Size  Location     Type
 10358 ;;		None
 10359 ;; Auto vars:     Size  Location     Type
 10360 ;;		None
 10361 ;; Return value:  Size  Location     Type
 10362 ;;                  1    wreg      void 
 10363 ;; Registers used:
 10364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10365 ;; Tracked objects:
 10366 ;;		On entry : 1F/0
 10367 ;;		On exit  : 1E/0
 10368 ;;		Unchanged: 0/0
 10369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;Total ram usage:        0 bytes
 10375 ;; Hardware stack levels used:    1
 10376 ;; Hardware stack levels required when called:   10
 10377 ;; This function calls:
 10378 ;;		_Led_Initialize
 10379 ;;		_Led_StartNotice
 10380 ;; This function is called by:
 10381 ;;		_IR_UpdateSetStatus
 10382 ;; This function uses a non-reentrant model
 10383 ;;
 10384                           
 10385                           
 10386                           ;psect for function _IR_ExitTimeout
 10387  11BD                     _IR_ExitTimeout:	
 10388  11BD                     l6519:	
 10389                           ;incstack = 0
 10390                           ; Regs used in _IR_ExitTimeout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10391                           
 10392                           
 10393                           ;ir.c: 444: ir_state.mSet = 0;
 10394  11BD  301F               	movlw	-225
 10395  11BE  05B6               	andwf	_ir_state,f	;volatile
 10396                           
 10397                           ;ir.c: 445: ir_state.tmIdx = 0;
 10398  11BF  01B7               	clrf	_ir_state+1	;volatile
 10399                           
 10400                           ;ir.c: 446: ir_state.mSetDelay = 0;
 10401  11C0  01BC               	clrf	_ir_state+6	;volatile
 10402                           
 10403                           ;ir.c: 447: Led_StartNotice(2);
 10404  11C1  3002               	movlw	2
 10405  11C2  26AA               	fcall	_Led_StartNotice
 10406                           
 10407                           ;ir.c: 448: Led_Initialize();
 10408  11C3  3189  2987         	ljmp	l6079
 10409  11C5                     __end_of_IR_ExitTimeout:	
 10410  11C5                     __ptext40:	
 10411 ;; *************** function _IR_KeyAction *****************
 10412 ;; Defined at:
 10413 ;;		line 451 in file "user/src/ir.c"
 10414 ;; Parameters:    Size  Location     Type
 10415 ;;		None
 10416 ;; Auto vars:     Size  Location     Type
 10417 ;;  i               1   18[BANK2 ] unsigned char 
 10418 ;;  i               1   16[BANK2 ] unsigned char 
 10419 ;;  i               1   14[BANK2 ] unsigned char 
 10420 ;;  i               1   13[BANK2 ] unsigned char 
 10421 ;;  i               1   17[BANK2 ] unsigned char 
 10422 ;;  i               1   15[BANK2 ] unsigned char 
 10423 ;;  i               1   12[BANK2 ] unsigned char 
 10424 ;;  i               1   10[BANK2 ] unsigned char 
 10425 ;;  i               1   11[BANK2 ] unsigned char 
 10426 ;;  idx             1   19[BANK2 ] unsigned char 
 10427 ;; Return value:  Size  Location     Type
 10428 ;;                  1    wreg      void 
 10429 ;; Registers used:
 10430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10431 ;; Tracked objects:
 10432 ;;		On entry : 1F/0
 10433 ;;		On exit  : 1F/0
 10434 ;;		Unchanged: 0/0
 10435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Temps:          0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;Total ram usage:       20 bytes
 10441 ;; Hardware stack levels used:    1
 10442 ;; Hardware stack levels required when called:   11
 10443 ;; This function calls:
 10444 ;;		_Audio_SetVolume
 10445 ;;		_Audio_StopSound
 10446 ;;		_IR_ExitSet
 10447 ;;		_IR_GetIndex
 10448 ;;		_IR_IsValidTime
 10449 ;;		_Led_Initialize
 10450 ;;		_Led_StartNotice
 10451 ;;		_RTC_GetTime
 10452 ;;		_TMR2_DisableInterrupt
 10453 ;;		_TMR2_EnableInterrupt
 10454 ;;		_Util_DecValue
 10455 ;;		_Util_IncValue
 10456 ;;		___bmul
 10457 ;;		___wmul
 10458 ;; This function is called by:
 10459 ;;		_IR_KeyAtionIfPressed
 10460 ;; This function uses a non-reentrant model
 10461 ;;
 10462                           
 10463                           
 10464                           ;psect for function _IR_KeyAction
 10465  11C5                     _IR_KeyAction:	
 10466  11C5                     l6529:	
 10467                           ;incstack = 0
 10468                           ; Regs used in _IR_KeyAction: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10469                           
 10470                           
 10471                           ;ir.c: 452: uint8_t idx;
 10472                           ;ir.c: 453: ir_state.mKeyRcv = 0;
 10473  11C5  1036               	bcf	_ir_state,0	;volatile
 10474                           
 10475                           ;ir.c: 454: TMR2_DisableInterrupt();
 10476  11C6  26C0  3191         	fcall	_TMR2_DisableInterrupt
 10477                           
 10478                           ;ir.c: 455: switch (keyValue) {
 10479  11C8  2C97               	goto	l6937
 10480  11C9                     l6533:	
 10481                           
 10482                           ;ir.c: 458: gLedPara.mMsc = 1;
 10483  11C9  27B8               	fcall	PL76	;call to abstracted procedure
 10484  11CA  3808               	iorlw	8
 10485  11CB  0081               	movwf	1
 10486                           
 10487                           ;ir.c: 459: gLedPara.mDyn = 0;
 10488  11CC  3001               	movlw	1
 10489  11CD                     L6:	
 10490  11CD  1381               	bcf	1,7
 10491                           
 10492                           ;ir.c: 460: gLedPara.mAuto = 0;
 10493  11CE  1001               	bcf	1,0
 10494                           
 10495                           ;ir.c: 461: gLedRunPara.music_index = 1;
 10496  11CF  0021               	movlb	1	; select bank1
 10497  11D0  00E0               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
 10498  11D1                     l6541:	
 10499                           
 10500                           ;ir.c: 462: gLedRunPara.mParaChanged = 1;
 10501  11D1  0021               	movlb	1	; select bank1
 10502  11D2  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 10503  11D3                     l6543:	
 10504                           
 10505                           ;ir.c: 463: Led_Initialize();
 10506  11D3  3189  2187  3191   	fcall	_Led_Initialize
 10507                           
 10508                           ;ir.c: 464: break;
 10509  11D6  2D12               	goto	l6939
 10510  11D7                     l6545:	
 10511                           
 10512                           ;ir.c: 467: gLedPara.mMsc = 2;
 10513  11D7  27B8  3191         	fcall	PL76	;call to abstracted procedure
 10514  11D9  3810               	iorlw	16
 10515  11DA  0081               	movwf	1
 10516                           
 10517                           ;ir.c: 468: gLedPara.mDyn = 0;
 10518  11DB  3002               	movlw	2
 10519  11DC  29CD               	goto	L6
 10520  11DD                     l6557:	
 10521                           ;ir.c: 470: gLedRunPara.music_index = 2;
 10522                           
 10523                           ;ir.c: 469: gLedPara.mAuto = 0;
 10524                           
 10525                           
 10526                           ;ir.c: 476: gLedPara.mMsc = 3;
 10527  11DD  27B8  3191         	fcall	PL76	;call to abstracted procedure
 10528  11DF  3818               	iorlw	24
 10529  11E0  0081               	movwf	1
 10530                           
 10531                           ;ir.c: 477: gLedPara.mDyn = 0;
 10532  11E1  3003               	movlw	3
 10533  11E2  29CD               	goto	L6
 10534  11E3                     l6569:	
 10535                           ;ir.c: 479: gLedRunPara.music_index = 3;
 10536                           
 10537                           ;ir.c: 478: gLedPara.mAuto = 0;
 10538                           
 10539                           
 10540                           ;ir.c: 485: gLedPara.mMsc = 4;
 10541  11E3  27B8  3191         	fcall	PL76	;call to abstracted procedure
 10542  11E5  3820               	iorlw	32
 10543  11E6  0081               	movwf	1
 10544                           
 10545                           ;ir.c: 486: gLedPara.mDyn = 0;
 10546  11E7  3004               	movlw	4
 10547  11E8  29CD               	goto	L6
 10548  11E9                     l1158:	
 10549                           ;ir.c: 488: gLedRunPara.music_index = 4;
 10550                           
 10551                           ;ir.c: 487: gLedPara.mAuto = 0;
 10552                           
 10553  11E9                     l6581:	
 10554                           
 10555                           ;ir.c: 493: case 0x15:
 10556                           ;ir.c: 494: case 0x16:
 10557                           ;ir.c: 495: case 0x17:
 10558                           ;ir.c: 497: gLedPara.mMsc = IR_GetIndex(keyValue);
 10559  11E9  0830               	movf	_keyValue,w	;volatile
 10560  11EA  2589  3191         	fcall	_IR_GetIndex
 10561  11EC  0022               	movlb	2	; select bank2
 10562  11ED  00C0               	movwf	??_IR_KeyAction^(0+256)
 10563  11EE  307B               	movlw	123
 10564  11EF  0086               	movwf	6
 10565  11F0  3023               	movlw	35
 10566  11F1  0087               	movwf	7
 10567  11F2  0DC0               	rlf	??_IR_KeyAction^(0+256),f
 10568  11F3  0DC0               	rlf	??_IR_KeyAction^(0+256),f
 10569  11F4  0DC0               	rlf	??_IR_KeyAction^(0+256),f
 10570  11F5  0801               	movf	1,w
 10571  11F6  0640               	xorwf	??_IR_KeyAction^(0+256),w
 10572  11F7  3987               	andlw	-121
 10573  11F8  0640               	xorwf	??_IR_KeyAction^(0+256),w
 10574  11F9  0081               	movwf	1
 10575                           
 10576                           ;ir.c: 498: gLedPara.mDyn = 1;
 10577  11FA  1781               	bsf	1,7
 10578                           
 10579                           ;ir.c: 499: gLedPara.mAuto = 0;
 10580  11FB  1001               	bcf	1,0
 10581                           
 10582                           ;ir.c: 500: gLedRunPara.mParaChanged = 1;
 10583  11FC  0021               	movlb	1	; select bank1
 10584  11FD  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 10585                           
 10586                           ;ir.c: 501: gLedRunPara.music_index = gLedPara.mMsc;
 10587  11FE  3023               	movlw	35
 10588  11FF  0C01               	rrf	1,w
 10589  1200  0022               	movlb	2	; select bank2
 10590  1201  00C0               	movwf	??_IR_KeyAction^(0+256)
 10591  1202  0CC0               	rrf	??_IR_KeyAction^(0+256),f
 10592  1203  0C40               	rrf	??_IR_KeyAction^(0+256),w
 10593  1204  390F               	andlw	15
 10594  1205  0021               	movlb	1	; select bank1
 10595  1206  00E0               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
 10596  1207  29D3               	goto	l6543
 10597  1208                     l6593:	
 10598                           
 10599                           ;ir.c: 505: Audio_StopSound();
 10600  1208  2577  3191         	fcall	_Audio_StopSound
 10601                           
 10602                           ;ir.c: 506: gLedPara.mOn = !gLedPara.mOn;
 10603  120A  307B               	movlw	123
 10604  120B  0086               	movwf	6
 10605  120C  3023               	movlw	35
 10606  120D  0087               	movwf	7
 10607  120E  1003               	clrc
 10608  120F  1C81               	btfss	1,1
 10609  1210  1403               	setc
 10610  1211  3000               	movlw	0
 10611  1212  3D09               	addwfc	9,w
 10612  1213  0022               	movlb	2	; select bank2
 10613  1214  00C0               	movwf	??_IR_KeyAction^(0+256)
 10614  1215  3023               	movlw	35
 10615  1216  0DC0               	rlf	??_IR_KeyAction^(0+256),f
 10616  1217  0801               	movf	1,w
 10617  1218  0640               	xorwf	??_IR_KeyAction^(0+256),w
 10618  1219  39FD               	andlw	-3
 10619  121A  0640               	xorwf	??_IR_KeyAction^(0+256),w
 10620  121B  0081               	movwf	1
 10621                           
 10622                           ;ir.c: 507: gLedPara.mAuto = 0;
 10623  121C  3023               	movlw	35
 10624  121D  1001               	bcf	1,0
 10625  121E  29D1               	goto	l6541
 10626  121F                     l6603:	
 10627                           
 10628                           ;ir.c: 512: if(!gLedPara.mAuto)
 10629  121F  3187  277C  3191   	fcall	PL110	;call to abstracted procedure
 10630  1222  1801               	btfsc	1,0
 10631  1223  2D12               	goto	l6939
 10632                           
 10633                           ;ir.c: 513: {
 10634                           ;ir.c: 514: Audio_StopSound();
 10635  1224  2577               	fcall	_Audio_StopSound
 10636                           
 10637                           ;ir.c: 515: gLedPara.mOn = 1;
 10638  1225  318F  2701  3191   	fcall	PL148	;call to abstracted procedure
 10639                           
 10640                           ;ir.c: 516: gLedPara.mAuto = 1;
 10641  1228  1401               	bsf	1,0
 10642                           
 10643                           ;ir.c: 517: gLedRunPara.mParaChanged = 1;
 10644  1229  0021               	movlb	1	; select bank1
 10645  122A  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 10646                           
 10647                           ;ir.c: 518: Led_Initialize();
 10648  122B  3189  2187  3191   	fcall	_Led_Initialize
 10649                           
 10650                           ;ir.c: 519: for (uint8_t i = 0; i < 5; i++) {
 10651  122E  0022               	movlb	2	; select bank2
 10652  122F  01CA               	clrf	IR_KeyAction@i^(0+256)
 10653  1230                     l6621:	
 10654                           
 10655                           ;ir.c: 520: gLedRunPara.mCurrentBright[i] = gLedRunPara.mTargetBright[i];
 10656  1230  354A               	lslf	IR_KeyAction@i^(0+256),w
 10657  1231  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 10658  1232  0086               	movwf	6
 10659  1233  0187               	clrf	7
 10660  1234  354A               	lslf	IR_KeyAction@i^(0+256),w
 10661  1235  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 10662  1236  26FA  3191         	fcall	PL28	;call to abstracted procedure
 10663  1238  3005               	movlw	5
 10664  1239  0ACA               	incf	IR_KeyAction@i^(0+256),f
 10665  123A  024A               	subwf	IR_KeyAction@i^(0+256),w
 10666  123B  1803               	btfsc	3,0
 10667  123C  2D12               	goto	l6939
 10668  123D  2A30               	goto	l6621
 10669  123E                     l1168:	
 10670  123E                     l6627:	
 10671                           
 10672                           ;ir.c: 525: case 0x59:
 10673                           ;ir.c: 526: case 0x45:
 10674                           ;ir.c: 527: case 0x44:
 10675                           ;ir.c: 528: case 0x41:
 10676                           ;ir.c: 529: Audio_StopSound();
 10677  123E  2577  3191         	fcall	_Audio_StopSound
 10678                           
 10679                           ;ir.c: 530: idx = IR_GetIndex(keyValue);
 10680  1240  0830               	movf	_keyValue,w	;volatile
 10681  1241  2589  3191         	fcall	_IR_GetIndex
 10682  1243  0022               	movlb	2	; select bank2
 10683  1244  00D3               	movwf	IR_KeyAction@idx^(0+256)
 10684                           
 10685                           ;ir.c: 531: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 1000, 200);
 10686  1245  3553               	lslf	IR_KeyAction@idx^(0+256),w
 10687  1246  2758  3191         	fcall	PL44	;call to abstracted procedure
 10688  1248  2701  3191         	fcall	PL30	;call to abstracted procedure
 10689  124A  253C  3191         	fcall	_Util_IncValue
 10690  124C                     L4:	
 10691                           
 10692                           ;ir.c: 532: if (ir_state.mSet == 0) {
 10693  124C  0E36               	swapf	_ir_state,w	;volatile
 10694  124D  0C89               	rrf	9,f
 10695  124E  3907               	andlw	7
 10696  124F  1D03               	skipz
 10697  1250  2A5F               	goto	l6645
 10698                           
 10699                           ;ir.c: 533: gLedPara.mAuto = 0;
 10700                           
 10701                           ;ir.c: 534: gLedPara.mMsc = 0;
 10702                           
 10703                           ;ir.c: 535: gLedPara.mDyn = 0;
 10704                           
 10705                           ;ir.c: 536: gLedPara.mBright[idx] = gLedRunPara.mTargetBright[idx];
 10706  1251  27CF  3191         	fcall	PL94	;call to abstracted procedure
 10707  1253  3553               	lslf	IR_KeyAction@idx^(0+256),w
 10708  1254  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 10709  1255  0086               	movwf	6
 10710  1256  0187               	clrf	7
 10711  1257  0853               	movf	IR_KeyAction@idx^(0+256),w
 10712  1258  00C0               	movwf	??_IR_KeyAction^(0+256)
 10713  1259  307E               	movlw	126
 10714  125A  26C9  3191         	fcall	PL6	;call to abstracted procedure
 10715  125C                     l6643:	
 10716                           
 10717                           ;ir.c: 537: gLedRunPara.mParaChanged = 1;
 10718  125C  0021               	movlb	1	; select bank1
 10719  125D  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 10720                           
 10721                           ;ir.c: 538: } else {
 10722  125E  2D12               	goto	l6939
 10723  125F                     l6645:	
 10724                           
 10725                           ;ir.c: 539: ir_state.mSetDelay = 0;
 10726  125F  0020               	movlb	0	; select bank0
 10727  1260  01BC               	clrf	_ir_state+6	;volatile
 10728  1261  2D12               	goto	l6939
 10729  1262                     l1175:	
 10730  1262                     l6647:	
 10731                           
 10732                           ;ir.c: 543: case 0x55:
 10733                           ;ir.c: 544: case 0x49:
 10734                           ;ir.c: 545: case 0x48:
 10735                           ;ir.c: 546: case 0x40:
 10736                           ;ir.c: 547: Audio_StopSound();
 10737  1262  2577  3191         	fcall	_Audio_StopSound
 10738                           
 10739                           ;ir.c: 548: idx = IR_GetIndex(keyValue);
 10740  1264  0830               	movf	_keyValue,w	;volatile
 10741  1265  2589  3191         	fcall	_IR_GetIndex
 10742  1267  0022               	movlb	2	; select bank2
 10743  1268  00D3               	movwf	IR_KeyAction@idx^(0+256)
 10744                           
 10745                           ;ir.c: 549: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 0, 200);
 10746  1269  3553               	lslf	IR_KeyAction@idx^(0+256),w
 10747  126A  27D9  3191         	fcall	PL112	;call to abstracted procedure
 10748  126C  2516  3191         	fcall	_Util_DecValue
 10749  126E  2A4C               	goto	L4
 10750  126F                     l1181:	
 10751                           ;ir.c: 553: gLedPara.mDyn = 0;
 10752                           
 10753                           ;ir.c: 552: gLedPara.mMsc = 0;
 10754                           
 10755                           ;ir.c: 551: gLedPara.mAuto = 0;
 10756                           
 10757                           ;ir.c: 550: if (ir_state.mSet == 0) {
 10758                           
 10759  126F                     l6667:	
 10760                           
 10761                           ;ir.c: 561: case 0x51:
 10762                           ;ir.c: 562: case 0x4D:
 10763                           ;ir.c: 563: case 0x4C:
 10764                           ;ir.c: 564: Audio_StopSound();
 10765  126F  2577  3191         	fcall	_Audio_StopSound
 10766                           
 10767                           ;ir.c: 565: idx = IR_GetIndex(keyValue);
 10768  1271  0830               	movf	_keyValue,w	;volatile
 10769  1272  2589  3191         	fcall	_IR_GetIndex
 10770  1274  0022               	movlb	2	; select bank2
 10771  1275  00D3               	movwf	IR_KeyAction@idx^(0+256)
 10772                           
 10773                           ;ir.c: 566: for (uint8_t i = 0; i < 5; i++) {
 10774  1276  01CB               	clrf	IR_KeyAction@i_1447^(0+256)
 10775  1277                     l6673:	
 10776  1277  3005               	movlw	5
 10777  1278  024B               	subwf	IR_KeyAction@i_1447^(0+256),w
 10778  1279  1803               	btfsc	3,0
 10779  127A  2A87               	goto	l6683
 10780                           
 10781                           ;ir.c: 567: gLedRunPara.mTargetBright[i] = gLedPara.mCustom[idx][i];
 10782  127B  084B               	movf	IR_KeyAction@i_1447^(0+256),w
 10783  127C  27BF  3191         	fcall	PL86	;call to abstracted procedure
 10784  127E  2562  3191         	fcall	___wmul
 10785  1280  272C               	fcall	PL36	;call to abstracted procedure
 10786  1281  354B               	lslf	IR_KeyAction@i_1447^(0+256),w
 10787  1282  318D  25EB  3191   	fcall	PL22	;call to abstracted procedure
 10788  1285  0ACB               	incf	IR_KeyAction@i_1447^(0+256),f
 10789  1286  2A77               	goto	l6673
 10790  1287                     l6683:	
 10791                           
 10792                           ;ir.c: 568: }
 10793                           ;ir.c: 569: if (ir_state.mSet == 0) {
 10794  1287  0020               	movlb	0	; select bank0
 10795  1288  0E36               	swapf	_ir_state,w	;volatile
 10796  1289  0C89               	rrf	9,f
 10797  128A  3907               	andlw	7
 10798  128B  1D03               	skipz
 10799  128C  2A5F               	goto	l6645
 10800                           
 10801                           ;ir.c: 570: gLedPara.mAuto = 0;
 10802                           
 10803                           ;ir.c: 571: gLedPara.mMsc = 0;
 10804                           
 10805                           ;ir.c: 572: gLedPara.mDyn = 0;
 10806                           
 10807                           ;ir.c: 573: for (uint8_t i = 0; i < 5; i++) {
 10808  128D  27CF  3191         	fcall	PL94	;call to abstracted procedure
 10809  128F  01CC               	clrf	IR_KeyAction@i_1448^(0+256)
 10810  1290                     l6693:	
 10811  1290  3005               	movlw	5
 10812  1291  024C               	subwf	IR_KeyAction@i_1448^(0+256),w
 10813  1292  1803               	btfsc	3,0
 10814  1293  2A5C               	goto	l6643
 10815                           
 10816                           ;ir.c: 574: gLedPara.mBright[i] = gLedPara.mCustom[idx][i];
 10817  1294  084C               	movf	IR_KeyAction@i_1448^(0+256),w
 10818  1295  27BF  3191         	fcall	PL86	;call to abstracted procedure
 10819  1297  2562  3191         	fcall	___wmul
 10820  1299  272C  3191         	fcall	PL36	;call to abstracted procedure
 10821  129B  084C               	movf	IR_KeyAction@i_1448^(0+256),w
 10822  129C  00C6               	movwf	(??_IR_KeyAction+6)^(0+256)
 10823  129D  307E               	movlw	126
 10824  129E  01C7               	clrf	((??_IR_KeyAction+6)^(0+256)+1)
 10825  129F  35C6               	lslf	(??_IR_KeyAction+6)^(0+256),f
 10826  12A0  0DC7               	rlf	((??_IR_KeyAction+6)^(0+256)+1),f
 10827  12A1  00C8               	movwf	(??_IR_KeyAction+8)^(0+256)
 10828  12A2  3023               	movlw	35
 10829  12A3  00C9               	movwf	((??_IR_KeyAction+8)^(0+256)+1)
 10830  12A4  0846               	movf	(??_IR_KeyAction+6)^(0+256),w
 10831  12A5  0748               	addwf	(??_IR_KeyAction+8)^(0+256),w
 10832  12A6  0084               	movwf	4
 10833  12A7  0847               	movf	(??_IR_KeyAction+7)^(0+256),w
 10834  12A8  3D49               	addwfc	(??_IR_KeyAction+9)^(0+256),w
 10835  12A9  2767  3191         	fcall	PL58	;call to abstracted procedure
 10836  12AB  0ACC               	incf	IR_KeyAction@i_1448^(0+256),f
 10837  12AC  2A90               	goto	l6693
 10838  12AD                     l6705:	
 10839                           
 10840                           ;ir.c: 583: if(gLedPara.mMsc == 0) {
 10841  12AD  307B               	movlw	123
 10842  12AE  27E3  3191         	fcall	PL118	;call to abstracted procedure
 10843  12B0  1D03               	skipz
 10844  12B1  2ACA               	goto	l6721
 10845                           
 10846                           ;ir.c: 584: for (uint8_t i = 0; i < 5; i++) {
 10847  12B2  01CF               	clrf	IR_KeyAction@i_1449^(0+256)
 10848  12B3                     l6709:	
 10849  12B3  3005               	movlw	5
 10850  12B4  024F               	subwf	IR_KeyAction@i_1449^(0+256),w
 10851  12B5  1803               	btfsc	3,0
 10852  12B6  2BC2               	goto	l6831
 10853                           
 10854                           ;ir.c: 585: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[i], 1000, 200);
 10855  12B7  354F               	lslf	IR_KeyAction@i_1449^(0+256),w
 10856  12B8  2758  3191         	fcall	PL44	;call to abstracted procedure
 10857  12BA  2701  3191         	fcall	PL30	;call to abstracted procedure
 10858  12BC  253C  3191         	fcall	_Util_IncValue
 10859                           
 10860                           ;ir.c: 586: gLedPara.mBright[i] = gLedRunPara.mTargetBright[i];
 10861  12BE  0022               	movlb	2	; select bank2
 10862  12BF  354F               	lslf	IR_KeyAction@i_1449^(0+256),w
 10863  12C0  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 10864  12C1  0086               	movwf	6
 10865  12C2  0187               	clrf	7
 10866  12C3  084F               	movf	IR_KeyAction@i_1449^(0+256),w
 10867  12C4  00C0               	movwf	??_IR_KeyAction^(0+256)
 10868  12C5  307E               	movlw	126
 10869  12C6  26C9  3191         	fcall	PL6	;call to abstracted procedure
 10870  12C8  0ACF               	incf	IR_KeyAction@i_1449^(0+256),f
 10871  12C9  2AB3               	goto	l6709
 10872  12CA                     l6721:	
 10873                           
 10874                           ;ir.c: 589: if(gLedPara.mMsc == 1) {
 10875  12CA  26DA  3191         	fcall	PL8	;call to abstracted procedure
 10876  12CC  3A01               	xorlw	1
 10877  12CD  1D03               	skipz
 10878  12CE  2AE7               	goto	l6737
 10879                           
 10880                           ;ir.c: 590: for(uint8_t i = 0;i < 5; i++) {
 10881  12CF  01D0               	clrf	IR_KeyAction@i_1450^(0+256)
 10882  12D0                     l6725:	
 10883  12D0  3005               	movlw	5
 10884  12D1  0250               	subwf	IR_KeyAction@i_1450^(0+256),w
 10885  12D2  1803               	btfsc	3,0
 10886  12D3  2BC2               	goto	l6831
 10887                           
 10888                           ;ir.c: 591: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[i], 1000, 200);
 10889  12D4  3550               	lslf	IR_KeyAction@i_1450^(0+256),w
 10890  12D5  2758  3191         	fcall	PL44	;call to abstracted procedure
 10891  12D7  2701  3191         	fcall	PL30	;call to abstracted procedure
 10892  12D9  253C  3191         	fcall	_Util_IncValue
 10893                           
 10894                           ;ir.c: 592: gLedPara.mStaticDayBright[i] = gLedRunPara.mTargetBright[i];
 10895  12DB  0022               	movlb	2	; select bank2
 10896  12DC  3550               	lslf	IR_KeyAction@i_1450^(0+256),w
 10897  12DD  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 10898  12DE  0086               	movwf	6
 10899  12DF  0187               	clrf	7
 10900  12E0  0850               	movf	IR_KeyAction@i_1450^(0+256),w
 10901  12E1  00C0               	movwf	??_IR_KeyAction^(0+256)
 10902  12E2  30B0               	movlw	176
 10903  12E3  26C9  3191         	fcall	PL6	;call to abstracted procedure
 10904  12E5  0AD0               	incf	IR_KeyAction@i_1450^(0+256),f
 10905  12E6  2AD0               	goto	l6725
 10906  12E7                     l6737:	
 10907  12E7  26DA  3191         	fcall	PL8	;call to abstracted procedure
 10908  12E9  3A02               	xorlw	2
 10909  12EA  1D03               	skipz
 10910  12EB  2AF6               	goto	l6743
 10911                           
 10912                           ;ir.c: 595: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[2],1000,200);
 10913  12EC  27B4  3191         	fcall	PL74	;call to abstracted procedure
 10914  12EE  26E4  3191         	fcall	PL14	;call to abstracted procedure
 10915  12F0  253C  3191         	fcall	_Util_IncValue
 10916                           
 10917                           ;ir.c: 596: gLedPara.mStaticNightBright[2] = gLedRunPara.mTargetBright[2];
 10918  12F2  30BE               	movlw	190
 10919  12F3  275E  3191         	fcall	PL46	;call to abstracted procedure
 10920                           
 10921                           ;ir.c: 597: } else if (gLedPara.mMsc == 3) {
 10922  12F5  2BC2               	goto	l6831
 10923  12F6                     l6743:	
 10924  12F6  26DA  3191         	fcall	PL8	;call to abstracted procedure
 10925  12F8  3A03               	xorlw	3
 10926  12F9  1D03               	skipz
 10927  12FA  2B12               	goto	l6753
 10928                           
 10929                           ;ir.c: 598: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[2],1000,200);
 10930  12FB  27B4  3191         	fcall	PL74	;call to abstracted procedure
 10931  12FD  26E4  3191         	fcall	PL14	;call to abstracted procedure
 10932  12FF  253C  3191         	fcall	_Util_IncValue
 10933                           
 10934                           ;ir.c: 599: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[3],1000,200);
 10935  1301  30D8               	movlw	low (_gLedRunPara+16)
 10936  1302  00CD               	movwf	Util_IncValue@pSrc
 10937  1303  3000               	movlw	high (_gLedRunPara+16)
 10938  1304  26E4  3191         	fcall	PL14	;call to abstracted procedure
 10939  1306  253C  3191         	fcall	_Util_IncValue
 10940                           
 10941                           ;ir.c: 600: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[4],1000,200);
 10942  1308  30DA               	movlw	low (_gLedRunPara+18)
 10943  1309  00CD               	movwf	Util_IncValue@pSrc
 10944  130A  3000               	movlw	high (_gLedRunPara+18)
 10945  130B  26E4  3191         	fcall	PL14	;call to abstracted procedure
 10946  130D  253C  3191         	fcall	_Util_IncValue
 10947                           
 10948                           ;ir.c: 601: gLedPara.mStaticFishBright[2] = gLedRunPara.mTargetBright[2];
 10949                           
 10950                           ;ir.c: 602: gLedPara.mStaticFishBright[3] = gLedRunPara.mTargetBright[3];
 10951                           
 10952                           ;ir.c: 603: gLedPara.mStaticFishBright[4] = gLedRunPara.mTargetBright[4];
 10953  130F  2742  3191         	fcall	PL38	;call to abstracted procedure
 10954                           
 10955                           ;ir.c: 604: } else if (gLedPara.mMsc == 4) {
 10956  1311  2BC2               	goto	l6831
 10957  1312                     l6753:	
 10958  1312  26DA  3191         	fcall	PL8	;call to abstracted procedure
 10959  1314  3A04               	xorlw	4
 10960  1315  1D03               	skipz
 10961  1316  2BC2               	goto	l6831
 10962                           
 10963                           ;ir.c: 605: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[0],1000,200);
 10964  1317  30D2               	movlw	low (_gLedRunPara+10)
 10965  1318  0020               	movlb	0	; select bank0
 10966  1319  00CD               	movwf	Util_IncValue@pSrc
 10967  131A  3000               	movlw	high (_gLedRunPara+10)
 10968  131B  26E4  3191         	fcall	PL14	;call to abstracted procedure
 10969  131D  253C  3191         	fcall	_Util_IncValue
 10970                           
 10971                           ;ir.c: 606: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[2],1000,200);
 10972  131F  30D6               	movlw	low (_gLedRunPara+14)
 10973  1320  00CD               	movwf	Util_IncValue@pSrc
 10974  1321  3000               	movlw	high (_gLedRunPara+14)
 10975  1322  26E4  3191         	fcall	PL14	;call to abstracted procedure
 10976  1324  253C  3191         	fcall	_Util_IncValue
 10977                           
 10978                           ;ir.c: 607: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[3],1000,200);
 10979  1326  30D8               	movlw	low (_gLedRunPara+16)
 10980  1327  00CD               	movwf	Util_IncValue@pSrc
 10981  1328  3000               	movlw	high (_gLedRunPara+16)
 10982  1329  26E4  3191         	fcall	PL14	;call to abstracted procedure
 10983  132B  253C  3191         	fcall	_Util_IncValue
 10984                           
 10985                           ;ir.c: 608: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[4],1000,200);
 10986  132D  30DA               	movlw	low (_gLedRunPara+18)
 10987  132E  00CD               	movwf	Util_IncValue@pSrc
 10988  132F  3000               	movlw	high (_gLedRunPara+18)
 10989  1330  26E4  3191         	fcall	PL14	;call to abstracted procedure
 10990  1332  253C  3191         	fcall	_Util_IncValue
 10991  1334  2BC0               	goto	L34
 10992  1335                     l6771:	
 10993                           ;ir.c: 617: gLedPara.mDyn = 0;
 10994                           
 10995                           ;ir.c: 613: }
 10996                           ;ir.c: 614: }
 10997                           ;ir.c: 615: gLedPara.mAuto = 0;
 10998                           
 10999                           ;ir.c: 609: gLedPara.mStaticPlantBright[0] = gLedRunPara.mTargetBright[0];
 11000                           
 11001                           ;ir.c: 610: gLedPara.mStaticPlantBright[2] = gLedRunPara.mTargetBright[2];
 11002                           
 11003                           ;ir.c: 611: gLedPara.mStaticPlantBright[3] = gLedRunPara.mTargetBright[3];
 11004                           
 11005                           ;ir.c: 612: gLedPara.mStaticPlantBright[4] = gLedRunPara.mTargetBright[4];
 11006                           
 11007                           
 11008                           ;ir.c: 622: if(gLedPara.mMsc == 0) {
 11009  1335  307B               	movlw	123
 11010  1336  27E3  3191         	fcall	PL118	;call to abstracted procedure
 11011  1338  1D03               	skipz
 11012  1339  2B50               	goto	l6787
 11013                           
 11014                           ;ir.c: 623: for(uint8_t i = 0;i < 5; i++) {
 11015  133A  01D1               	clrf	IR_KeyAction@i_1451^(0+256)
 11016  133B                     l6775:	
 11017  133B  3005               	movlw	5
 11018  133C  0251               	subwf	IR_KeyAction@i_1451^(0+256),w
 11019  133D  1803               	btfsc	3,0
 11020  133E  2BC2               	goto	l6831
 11021                           
 11022                           ;ir.c: 624: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[i], 0, 200);
 11023  133F  3551               	lslf	IR_KeyAction@i_1451^(0+256),w
 11024  1340  27D9  3191         	fcall	PL112	;call to abstracted procedure
 11025  1342  2516  3191         	fcall	_Util_DecValue
 11026                           
 11027                           ;ir.c: 625: gLedPara.mBright[i] = gLedRunPara.mTargetBright[i];
 11028  1344  0022               	movlb	2	; select bank2
 11029  1345  3551               	lslf	IR_KeyAction@i_1451^(0+256),w
 11030  1346  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11031  1347  0086               	movwf	6
 11032  1348  0187               	clrf	7
 11033  1349  0851               	movf	IR_KeyAction@i_1451^(0+256),w
 11034  134A  00C0               	movwf	??_IR_KeyAction^(0+256)
 11035  134B  307E               	movlw	126
 11036  134C  26C9  3191         	fcall	PL6	;call to abstracted procedure
 11037  134E  0AD1               	incf	IR_KeyAction@i_1451^(0+256),f
 11038  134F  2B3B               	goto	l6775
 11039  1350                     l6787:	
 11040                           
 11041                           ;ir.c: 628: if(gLedPara.mMsc == 1) {
 11042  1350  26DA  3191         	fcall	PL8	;call to abstracted procedure
 11043  1352  3A01               	xorlw	1
 11044  1353  1D03               	skipz
 11045  1354  2B73               	goto	l6803
 11046                           
 11047                           ;ir.c: 629: for(uint8_t i = 0;i < 5; i++) {
 11048  1355  01D2               	clrf	IR_KeyAction@i_1452^(0+256)
 11049  1356                     l6791:	
 11050  1356  3005               	movlw	5
 11051  1357  0252               	subwf	IR_KeyAction@i_1452^(0+256),w
 11052  1358  1803               	btfsc	3,0
 11053  1359  2BC2               	goto	l6831
 11054                           
 11055                           ;ir.c: 630: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[i], 100, 200);
 11056  135A  3552               	lslf	IR_KeyAction@i_1452^(0+256),w
 11057  135B  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11058  135C  0020               	movlb	0	; select bank0
 11059  135D  00CD               	movwf	Util_DecValue@pSrc
 11060  135E  3064               	movlw	100
 11061  135F  01CE               	clrf	Util_DecValue@pSrc+1
 11062  1360  00CF               	movwf	Util_DecValue@min
 11063  1361  30C8               	movlw	200
 11064  1362  01D0               	clrf	Util_DecValue@min+1
 11065  1363  00D1               	movwf	Util_DecValue@delta
 11066  1364  01D2               	clrf	Util_DecValue@delta+1
 11067  1365  2516  3191         	fcall	_Util_DecValue
 11068                           
 11069                           ;ir.c: 631: gLedPara.mStaticDayBright[i] = gLedRunPara.mTargetBright[i];
 11070  1367  0022               	movlb	2	; select bank2
 11071  1368  3552               	lslf	IR_KeyAction@i_1452^(0+256),w
 11072  1369  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11073  136A  0086               	movwf	6
 11074  136B  0187               	clrf	7
 11075  136C  0852               	movf	IR_KeyAction@i_1452^(0+256),w
 11076  136D  00C0               	movwf	??_IR_KeyAction^(0+256)
 11077  136E  30B0               	movlw	176
 11078  136F  26C9  3191         	fcall	PL6	;call to abstracted procedure
 11079  1371  0AD2               	incf	IR_KeyAction@i_1452^(0+256),f
 11080  1372  2B56               	goto	l6791
 11081  1373                     l6803:	
 11082  1373  26DA  3191         	fcall	PL8	;call to abstracted procedure
 11083  1375  3A02               	xorlw	2
 11084  1376  1D03               	skipz
 11085  1377  2B82               	goto	l6809
 11086                           
 11087                           ;ir.c: 634: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[2], 100, 200);
 11088  1378  27CB  3191         	fcall	PL92	;call to abstracted procedure
 11089  137A  2708  3191         	fcall	PL32	;call to abstracted procedure
 11090  137C  2516  3191         	fcall	_Util_DecValue
 11091                           
 11092                           ;ir.c: 635: gLedPara.mStaticNightBright[2] = gLedRunPara.mTargetBright[2];
 11093  137E  30BE               	movlw	190
 11094  137F  275E  3191         	fcall	PL46	;call to abstracted procedure
 11095                           
 11096                           ;ir.c: 636: } else if (gLedPara.mMsc == 3) {
 11097  1381  2BC2               	goto	l6831
 11098  1382                     l6809:	
 11099  1382  26DA  3191         	fcall	PL8	;call to abstracted procedure
 11100  1384  3A03               	xorlw	3
 11101  1385  1D03               	skipz
 11102  1386  2B9E               	goto	l6819
 11103                           
 11104                           ;ir.c: 637: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[2], 100, 200);
 11105  1387  27CB  3191         	fcall	PL92	;call to abstracted procedure
 11106  1389  2708  3191         	fcall	PL32	;call to abstracted procedure
 11107  138B  2516  3191         	fcall	_Util_DecValue
 11108                           
 11109                           ;ir.c: 638: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[3], 100, 200);
 11110  138D  30D8               	movlw	low (_gLedRunPara+16)
 11111  138E  00CD               	movwf	Util_DecValue@pSrc
 11112  138F  3000               	movlw	high (_gLedRunPara+16)
 11113  1390  2708  3191         	fcall	PL32	;call to abstracted procedure
 11114  1392  2516  3191         	fcall	_Util_DecValue
 11115                           
 11116                           ;ir.c: 639: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[4], 100, 200);
 11117  1394  30DA               	movlw	low (_gLedRunPara+18)
 11118  1395  00CD               	movwf	Util_DecValue@pSrc
 11119  1396  3000               	movlw	high (_gLedRunPara+18)
 11120  1397  2708  3191         	fcall	PL32	;call to abstracted procedure
 11121  1399  2516  3191         	fcall	_Util_DecValue
 11122                           
 11123                           ;ir.c: 640: gLedPara.mStaticFishBright[2] = gLedRunPara.mTargetBright[2];
 11124                           
 11125                           ;ir.c: 641: gLedPara.mStaticFishBright[3] = gLedRunPara.mTargetBright[3];
 11126                           
 11127                           ;ir.c: 642: gLedPara.mStaticFishBright[4] = gLedRunPara.mTargetBright[4];
 11128  139B  2742  3191         	fcall	PL38	;call to abstracted procedure
 11129                           
 11130                           ;ir.c: 643: } else if (gLedPara.mMsc == 4) {
 11131  139D  2BC2               	goto	l6831
 11132  139E                     l6819:	
 11133  139E  26DA  3191         	fcall	PL8	;call to abstracted procedure
 11134  13A0  3A04               	xorlw	4
 11135  13A1  1D03               	skipz
 11136  13A2  2BC2               	goto	l6831
 11137                           
 11138                           ;ir.c: 644: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[0], 100, 200);
 11139  13A3  30D2               	movlw	low (_gLedRunPara+10)
 11140  13A4  0020               	movlb	0	; select bank0
 11141  13A5  00CD               	movwf	Util_DecValue@pSrc
 11142  13A6  3000               	movlw	high (_gLedRunPara+10)
 11143  13A7  2708  3191         	fcall	PL32	;call to abstracted procedure
 11144  13A9  2516  3191         	fcall	_Util_DecValue
 11145                           
 11146                           ;ir.c: 645: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[2], 100, 200);
 11147  13AB  30D6               	movlw	low (_gLedRunPara+14)
 11148  13AC  00CD               	movwf	Util_DecValue@pSrc
 11149  13AD  3000               	movlw	high (_gLedRunPara+14)
 11150  13AE  2708  3191         	fcall	PL32	;call to abstracted procedure
 11151  13B0  2516  3191         	fcall	_Util_DecValue
 11152                           
 11153                           ;ir.c: 646: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[3], 100, 200);
 11154  13B2  30D8               	movlw	low (_gLedRunPara+16)
 11155  13B3  00CD               	movwf	Util_DecValue@pSrc
 11156  13B4  3000               	movlw	high (_gLedRunPara+16)
 11157  13B5  2708  3191         	fcall	PL32	;call to abstracted procedure
 11158  13B7  2516  3191         	fcall	_Util_DecValue
 11159                           
 11160                           ;ir.c: 647: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[4], 100, 200);
 11161  13B9  30DA               	movlw	low (_gLedRunPara+18)
 11162  13BA  00CD               	movwf	Util_DecValue@pSrc
 11163  13BB  3000               	movlw	high (_gLedRunPara+18)
 11164  13BC  2708  3191         	fcall	PL32	;call to abstracted procedure
 11165  13BE  2516  3191         	fcall	_Util_DecValue
 11166  13C0                     L34:	
 11167                           
 11168                           ;ir.c: 648: gLedPara.mStaticPlantBright[0] = gLedRunPara.mTargetBright[0];
 11169                           
 11170                           ;ir.c: 649: gLedPara.mStaticPlantBright[2] = gLedRunPara.mTargetBright[2];
 11171                           
 11172                           ;ir.c: 650: gLedPara.mStaticPlantBright[3] = gLedRunPara.mTargetBright[3];
 11173                           
 11174                           ;ir.c: 651: gLedPara.mStaticPlantBright[4] = gLedRunPara.mTargetBright[4];
 11175  13C0  2710  3191         	fcall	PL34	;call to abstracted procedure
 11176  13C2                     l6831:	
 11177                           
 11178                           ;ir.c: 652: }
 11179                           ;ir.c: 653: }
 11180                           ;ir.c: 654: gLedPara.mAuto = 0;
 11181  13C2  307B               	movlw	123
 11182  13C3  0086               	movwf	6
 11183  13C4  3023               	movlw	35
 11184  13C5  0087               	movwf	7
 11185  13C6  1001               	bcf	1,0
 11186                           
 11187                           ;ir.c: 656: gLedPara.mDyn = 0;
 11188  13C7  1381               	bcf	1,7
 11189  13C8  2A5C               	goto	l6643
 11190  13C9                     l6837:	
 11191                           
 11192                           ;ir.c: 660: Util_DecValue((uint16_t*) & gLedPara.mVolume, 0, 1);
 11193  13C9  307D               	movlw	125
 11194  13CA  00CD               	movwf	Util_DecValue@pSrc
 11195  13CB  3023               	movlw	35
 11196  13CC  00CE               	movwf	Util_DecValue@pSrc+1
 11197  13CD  01CF               	clrf	Util_DecValue@min
 11198  13CE  01D0               	clrf	Util_DecValue@min+1
 11199  13CF  01D1               	clrf	Util_DecValue@delta
 11200  13D0  0AD1               	incf	Util_DecValue@delta,f
 11201  13D1  01D2               	clrf	Util_DecValue@delta+1
 11202  13D2  2516  3191         	fcall	_Util_DecValue
 11203                           
 11204                           ;ir.c: 661: Audio_SetVolume(VOLUME[ gLedPara.mVolume ]);
 11205  13D4  307B               	movlw	123
 11206  13D5  26ED  3191         	fcall	PL18	;call to abstracted procedure
 11207  13D7  260C  3191         	fcall	_Audio_SetVolume
 11208  13D9  2A5C               	goto	l6643
 11209  13DA                     l6843:	
 11210                           
 11211                           ;ir.c: 665: Util_IncValue((uint16_t*) & gLedPara.mVolume, 4, 1);
 11212  13DA  307D               	movlw	125
 11213  13DB  00CD               	movwf	Util_IncValue@pSrc
 11214  13DC  3023               	movlw	35
 11215  13DD  00CE               	movwf	Util_IncValue@pSrc+1
 11216  13DE  3004               	movlw	4
 11217  13DF  00CF               	movwf	Util_IncValue@max
 11218  13E0  01D0               	clrf	Util_IncValue@max+1
 11219  13E1  01D1               	clrf	Util_IncValue@delta
 11220  13E2  0AD1               	incf	Util_IncValue@delta,f
 11221  13E3  01D2               	clrf	Util_IncValue@delta+1
 11222  13E4  253C  3191         	fcall	_Util_IncValue
 11223                           
 11224                           ;ir.c: 666: Audio_SetVolume(VOLUME[ gLedPara.mVolume ]);
 11225  13E6  307B               	movlw	123
 11226  13E7  26ED  3191         	fcall	PL18	;call to abstracted procedure
 11227  13E9  260C  3191         	fcall	_Audio_SetVolume
 11228  13EB  2A5C               	goto	l6643
 11229  13EC                     l1222:	
 11230  13EC                     l6849:	
 11231                           
 11232                           ;ir.c: 670: case 0x0D:
 11233                           ;ir.c: 671: case 0x0E:
 11234                           ;ir.c: 672: case 0x0F:
 11235                           ;ir.c: 673: case 0x08:
 11236                           ;ir.c: 674: case 0x09:
 11237                           ;ir.c: 675: case 0x0A:
 11238                           ;ir.c: 676: case 0x0B:
 11239                           ;ir.c: 677: case 0x04:
 11240                           ;ir.c: 678: case 0x05:
 11241                           ;ir.c: 679: if (ir_state.tmIdx < 4) {
 11242  13EC  3004               	movlw	4
 11243  13ED  0237               	subwf	_ir_state+1,w	;volatile
 11244  13EE  1803               	skipnc
 11245  13EF  2BFA               	goto	l6855
 11246                           
 11247                           ;ir.c: 680: ir_state.time[ir_state.tmIdx++] = IR_GetIndex(keyValue);
 11248  13F0  0837               	movf	_ir_state+1,w	;volatile
 11249  13F1  3E38               	addlw	(low ((_ir_state| 0+2)))& (0+255)
 11250  13F2  0086               	movwf	6
 11251  13F3  0187               	clrf	7
 11252  13F4  0830               	movf	_keyValue,w	;volatile
 11253  13F5  2589  3191         	fcall	_IR_GetIndex
 11254  13F7  0081               	movwf	1
 11255  13F8  0AB7               	incf	_ir_state+1,f	;volatile
 11256                           
 11257                           ;ir.c: 681: } else {
 11258  13F9  2BFB               	goto	l6857
 11259  13FA                     l6855:	
 11260                           
 11261                           ;ir.c: 682: ir_state.tmIdx = 0;
 11262  13FA  01B7               	clrf	_ir_state+1	;volatile
 11263  13FB                     l6857:	
 11264                           
 11265                           ;ir.c: 683: }
 11266                           ;ir.c: 684: if (IR_IsValidTime((uint8_t*) & ir_state.time[0], ir_state.tmIdx) == 0) {
 11267  13FB  0837               	movf	_ir_state+1,w	;volatile
 11268  13FC  00D0               	movwf	IR_IsValidTime@len
 11269  13FD  3038               	movlw	(low ((_ir_state| 0+2)))& (0+255)
 11270  13FE  2650  3191         	fcall	_IR_IsValidTime
 11271  1400  3A00               	xorlw	0
 11272  1401  1D03               	skipz
 11273  1402  2C09               	goto	l6863
 11274                           
 11275                           ;ir.c: 685: Led_StartNotice(3);
 11276  1403  3003               	movlw	3
 11277  1404  26AA  3191         	fcall	_Led_StartNotice
 11278  1406                     l6861:	
 11279                           
 11280                           ;ir.c: 686: IR_ExitSet();
 11281  1406  26B7  3191         	fcall	_IR_ExitSet
 11282                           
 11283                           ;ir.c: 687: } else if (ir_state.tmIdx == 4) {
 11284  1408  2A5F               	goto	l6645
 11285  1409                     l6863:	
 11286  1409  3004               	movlw	4
 11287  140A  0637               	xorwf	_ir_state+1,w	;volatile
 11288  140B  1D03               	btfss	3,2
 11289  140C  2A5F               	goto	l6645
 11290                           
 11291                           ;ir.c: 688: if (ir_state.mSet == 1) {
 11292  140D  3187  278B  3191   	fcall	PL166	;call to abstracted procedure
 11293  1410  1D03               	skipz
 11294  1411  2C30               	goto	l6873
 11295                           
 11296                           ;ir.c: 689: RTC_GetTime()->hour = ir_state.time[0]*10 + ir_state.time[1];
 11297  1412  318A  2271  3191   	fcall	_RTC_GetTime
 11298  1415  27F5  3191         	fcall	PL156	;call to abstracted procedure
 11299  1417  0838               	movf	_ir_state+2,w	;volatile
 11300  1418  269E               	fcall	___bmul
 11301  1419  0739               	addwf	_ir_state+3,w	;volatile
 11302  141A  0081               	movwf	1
 11303                           
 11304                           ;ir.c: 690: RTC_GetTime()->minute = ir_state.time[2]*10 + ir_state.time[3];
 11305  141B  318A  2271  3191   	fcall	_RTC_GetTime
 11306  141E  0022               	movlb	2	; select bank2
 11307  141F  00C0               	movwf	??_IR_KeyAction^(0+256)
 11308  1420  3E01               	addlw	1
 11309  1421  27F5  3191         	fcall	PL156	;call to abstracted procedure
 11310  1423  083A               	movf	_ir_state+4,w	;volatile
 11311  1424  269E               	fcall	___bmul
 11312  1425  073B               	addwf	_ir_state+5,w	;volatile
 11313  1426  0081               	movwf	1
 11314  1427                     L3:	
 11315                           
 11316                           ;ir.c: 691: if (gLedPara.mAuto) {
 11317  1427  3187  277C  3191   	fcall	PL110	;call to abstracted procedure
 11318  142A  1C01               	btfss	1,0
 11319  142B  2C06               	goto	l6861
 11320                           
 11321                           ;ir.c: 692: Led_Initialize();
 11322  142C  3189  2187  3191   	fcall	_Led_Initialize
 11323  142F  2C06               	goto	l6861
 11324  1430                     l6873:	
 11325  1430  3187  2790  3191   	fcall	PL170	;call to abstracted procedure
 11326  1433  1D03               	skipz
 11327  1434  2C45               	goto	l6883
 11328                           
 11329                           ;ir.c: 695: gLedPara.mSunrise = ir_state.time[0]*600 + ir_state.time[1]*60 + ir_state.ti
      +                          me[2]*10 + ir_state.time[3];
 11330  1435  27A7  3191         	fcall	PL72	;call to abstracted procedure
 11331  1437  2562  3191         	fcall	___wmul
 11332  1439  2798  3191         	fcall	PL66	;call to abstracted procedure
 11333  143B  2562  3191         	fcall	___wmul
 11334  143D  2787  3191         	fcall	PL64	;call to abstracted procedure
 11335  143F  2562  3191         	fcall	___wmul
 11336  1441  276D  3191         	fcall	PL60	;call to abstracted procedure
 11337  1443  30D8               	movlw	216
 11338  1444  2C59               	goto	L35
 11339  1445                     l6883:	
 11340                           ;ir.c: 697: if (gLedPara.mAuto) {
 11341                           
 11342                           ;ir.c: 696: gLedRunPara.mParaChanged = 1;
 11343                           
 11344  1445  3187  2795  3191   	fcall	PL172	;call to abstracted procedure
 11345  1448  1D03               	skipz
 11346  1449  2C06               	goto	l6861
 11347                           
 11348                           ;ir.c: 701: gLedPara.mSunset = ir_state.time[0]*600 + ir_state.time[1]*60 + ir_state.tim
      +                          e[2]*10 + ir_state.time[3];
 11349  144A  27A7  3191         	fcall	PL72	;call to abstracted procedure
 11350  144C  2562  3191         	fcall	___wmul
 11351  144E  2798  3191         	fcall	PL66	;call to abstracted procedure
 11352  1450  2562  3191         	fcall	___wmul
 11353  1452  2787  3191         	fcall	PL64	;call to abstracted procedure
 11354  1454  2562  3191         	fcall	___wmul
 11355  1456  276D  3191         	fcall	PL60	;call to abstracted procedure
 11356  1458  30E4               	movlw	228
 11357  1459                     L35:	
 11358  1459  27ED  3191         	fcall	PL138	;call to abstracted procedure
 11359                           
 11360                           ;ir.c: 702: gLedRunPara.mParaChanged = 1;
 11361  145B  0021               	movlb	1	; select bank1
 11362  145C  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 11363  145D  2C27               	goto	L3
 11364  145E                     l6895:	
 11365                           ;ir.c: 703: if (gLedPara.mAuto) {
 11366                           
 11367                           
 11368                           ;ir.c: 712: if (ir_state.mSet == 4) {
 11369  145E  3187  2786  3191   	fcall	PL160	;call to abstracted procedure
 11370  1461  1D03               	skipz
 11371  1462  2C79               	goto	l6911
 11372                           
 11373                           ;ir.c: 713: for (uint8_t i = 0; i < 5; i++) {
 11374  1463  0022               	movlb	2	; select bank2
 11375  1464  01CD               	clrf	IR_KeyAction@i_1455^(0+256)
 11376  1465                     l6899:	
 11377  1465  3005               	movlw	5
 11378  1466  024D               	subwf	IR_KeyAction@i_1455^(0+256),w
 11379  1467  1803               	btfsc	3,0
 11380  1468  2C74               	goto	l1245
 11381                           
 11382                           ;ir.c: 714: gLedPara.mDayBright[i] = gLedRunPara.mTargetBright[i];
 11383  1469  354D               	lslf	IR_KeyAction@i_1455^(0+256),w
 11384  146A  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11385  146B  0086               	movwf	6
 11386  146C  0187               	clrf	7
 11387  146D  084D               	movf	IR_KeyAction@i_1455^(0+256),w
 11388  146E  00C0               	movwf	??_IR_KeyAction^(0+256)
 11389  146F  30DA               	movlw	218
 11390  1470  26C9  3191         	fcall	PL6	;call to abstracted procedure
 11391  1472  0ACD               	incf	IR_KeyAction@i_1455^(0+256),f
 11392  1473  2C65               	goto	l6899
 11393  1474                     l1245:	
 11394                           
 11395                           ;ir.c: 715: }
 11396                           ;ir.c: 716: gLedRunPara.mParaChanged = 1;
 11397  1474  0021               	movlb	1	; select bank1
 11398  1475  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 11399                           
 11400                           ;ir.c: 717: IR_ExitSet();
 11401  1476  26B7  3191         	fcall	_IR_ExitSet
 11402                           
 11403                           ;ir.c: 718: } else if (ir_state.mSet == 5) {
 11404  1478  2D12               	goto	l6939
 11405  1479                     l6911:	
 11406  1479  3187  2781  3191   	fcall	PL158	;call to abstracted procedure
 11407  147C  1D03               	skipz
 11408  147D  2D12               	goto	l6939
 11409                           
 11410                           ;ir.c: 719: for (uint8_t i = 0; i < 5; i++) {
 11411  147E  0022               	movlb	2	; select bank2
 11412  147F  01CE               	clrf	IR_KeyAction@i_1456^(0+256)
 11413  1480                     l6915:	
 11414  1480  3005               	movlw	5
 11415  1481  024E               	subwf	IR_KeyAction@i_1456^(0+256),w
 11416  1482  1803               	btfsc	3,0
 11417  1483  2C74               	goto	l1245
 11418                           
 11419                           ;ir.c: 720: gLedPara.mNightBright[i] = gLedRunPara.mTargetBright[i];
 11420  1484  354E               	lslf	IR_KeyAction@i_1456^(0+256),w
 11421  1485  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11422  1486  0086               	movwf	6
 11423  1487  0187               	clrf	7
 11424  1488  084E               	movf	IR_KeyAction@i_1456^(0+256),w
 11425  1489  00C0               	movwf	??_IR_KeyAction^(0+256)
 11426  148A  30E6               	movlw	230
 11427  148B  26C9  3191         	fcall	PL6	;call to abstracted procedure
 11428  148D  0ACE               	incf	IR_KeyAction@i_1456^(0+256),f
 11429  148E  2C80               	goto	l6915
 11430  148F                     l6927:	
 11431                           
 11432                           ;ir.c: 727: ir_state.mSet = 0;
 11433  148F  301F               	movlw	-225
 11434  1490  05B6               	andwf	_ir_state,f	;volatile
 11435                           
 11436                           ;ir.c: 728: ir_state.tmIdx = 0;
 11437  1491  01B7               	clrf	_ir_state+1	;volatile
 11438                           
 11439                           ;ir.c: 729: ir_state.mSetDelay = 0;
 11440  1492  01BC               	clrf	_ir_state+6	;volatile
 11441                           
 11442                           ;ir.c: 730: Led_StartNotice(3);
 11443  1493  3003               	movlw	3
 11444  1494  26AA  3191         	fcall	_Led_StartNotice
 11445                           
 11446                           ;ir.c: 731: break;
 11447  1496  2D12               	goto	l6939
 11448  1497                     l6937:	
 11449  1497  0020               	movlb	0	; select bank0
 11450  1498  0830               	movf	_keyValue,w	;volatile
 11451                           
 11452                           ; Switch size 1, requested type "space"
 11453                           ; Number of cases is 40, Range of values is 4 to 255
 11454                           ; switch strategies available:
 11455                           ; Name         Instructions Cycles
 11456                           ; simple_byte          121    61 (average)
 11457                           ; jumptable            263     9 (fixed)
 11458                           ;	Chosen strategy is simple_byte
 11459  1499  3A04               	xorlw	4	; case 4
 11460  149A  1903               	skipnz
 11461  149B  2BEC               	goto	l6849
 11462  149C  3A01               	xorlw	1	; case 5
 11463  149D  1903               	skipnz
 11464  149E  2BEC               	goto	l6849
 11465  149F  3A02               	xorlw	2	; case 7
 11466  14A0  1903               	skipnz
 11467  14A1  2C5E               	goto	l6895
 11468  14A2  3A0F               	xorlw	15	; case 8
 11469  14A3  1903               	skipnz
 11470  14A4  2BEC               	goto	l6849
 11471  14A5  3A01               	xorlw	1	; case 9
 11472  14A6  1903               	skipnz
 11473  14A7  2BEC               	goto	l6849
 11474  14A8  3A03               	xorlw	3	; case 10
 11475  14A9  1903               	skipnz
 11476  14AA  2BEC               	goto	l6849
 11477  14AB  3A01               	xorlw	1	; case 11
 11478  14AC  1903               	skipnz
 11479  14AD  2BEC               	goto	l6849
 11480  14AE  3A07               	xorlw	7	; case 12
 11481  14AF  1903               	skipnz
 11482  14B0  2BEC               	goto	l1222
 11483  14B1  3A01               	xorlw	1	; case 13
 11484  14B2  1903               	skipnz
 11485  14B3  2BEC               	goto	l1222
 11486  14B4  3A03               	xorlw	3	; case 14
 11487  14B5  1903               	skipnz
 11488  14B6  2BEC               	goto	l6849
 11489  14B7  3A01               	xorlw	1	; case 15
 11490  14B8  1903               	skipnz
 11491  14B9  2BEC               	goto	l6849
 11492  14BA  3A1B               	xorlw	27	; case 20
 11493  14BB  1903               	skipnz
 11494  14BC  29E9               	goto	l1158
 11495  14BD  3A01               	xorlw	1	; case 21
 11496  14BE  1903               	skipnz
 11497  14BF  29E9               	goto	l6581
 11498  14C0  3A03               	xorlw	3	; case 22
 11499  14C1  1903               	skipnz
 11500  14C2  29E9               	goto	l6581
 11501  14C3  3A01               	xorlw	1	; case 23
 11502  14C4  1903               	skipnz
 11503  14C5  29E9               	goto	l6581
 11504  14C6  3A0F               	xorlw	15	; case 24
 11505  14C7  1903               	skipnz
 11506  14C8  2B35               	goto	l6771
 11507  14C9  3A01               	xorlw	1	; case 25
 11508  14CA  1903               	skipnz
 11509  14CB  2AAD               	goto	l6705
 11510  14CC  3A03               	xorlw	3	; case 26
 11511  14CD  1903               	skipnz
 11512  14CE  2BC9               	goto	l6837
 11513  14CF  3A01               	xorlw	1	; case 27
 11514  14D0  1903               	skipnz
 11515  14D1  2BDA               	goto	l6843
 11516  14D2  3A07               	xorlw	7	; case 28
 11517  14D3  1903               	skipnz
 11518  14D4  29C9               	goto	l6533
 11519  14D5  3A01               	xorlw	1	; case 29
 11520  14D6  1903               	skipnz
 11521  14D7  29D7               	goto	l6545
 11522  14D8  3A03               	xorlw	3	; case 30
 11523  14D9  1903               	skipnz
 11524  14DA  29DD               	goto	l6557
 11525  14DB  3A01               	xorlw	1	; case 31
 11526  14DC  1903               	skipnz
 11527  14DD  29E3               	goto	l6569
 11528  14DE  3A5F               	xorlw	95	; case 64
 11529  14DF  1903               	skipnz
 11530  14E0  2A62               	goto	l6647
 11531  14E1  3A01               	xorlw	1	; case 65
 11532  14E2  1903               	skipnz
 11533  14E3  2A3E               	goto	l6627
 11534  14E4  3A05               	xorlw	5	; case 68
 11535  14E5  1903               	skipnz
 11536  14E6  2A3E               	goto	l6627
 11537  14E7  3A01               	xorlw	1	; case 69
 11538  14E8  1903               	skipnz
 11539  14E9  2A3E               	goto	l6627
 11540  14EA  3A0D               	xorlw	13	; case 72
 11541  14EB  1903               	skipnz
 11542  14EC  2A62               	goto	l6647
 11543  14ED  3A01               	xorlw	1	; case 73
 11544  14EE  1903               	skipnz
 11545  14EF  2A62               	goto	l6647
 11546  14F0  3A05               	xorlw	5	; case 76
 11547  14F1  1903               	skipnz
 11548  14F2  2A6F               	goto	l6667
 11549  14F3  3A01               	xorlw	1	; case 77
 11550  14F4  1903               	skipnz
 11551  14F5  2A6F               	goto	l6667
 11552  14F6  3A1D               	xorlw	29	; case 80
 11553  14F7  1903               	skipnz
 11554  14F8  2A6F               	goto	l1181
 11555  14F9  3A01               	xorlw	1	; case 81
 11556  14FA  1903               	skipnz
 11557  14FB  2A6F               	goto	l6667
 11558  14FC  3A05               	xorlw	5	; case 84
 11559  14FD  1903               	skipnz
 11560  14FE  2A62               	goto	l1175
 11561  14FF  3A01               	xorlw	1	; case 85
 11562  1500  1903               	skipnz
 11563  1501  2A62               	goto	l6647
 11564  1502  3A0D               	xorlw	13	; case 88
 11565  1503  1903               	skipnz
 11566  1504  2A3E               	goto	l1168
 11567  1505  3A01               	xorlw	1	; case 89
 11568  1506  1903               	skipnz
 11569  1507  2A3E               	goto	l6627
 11570  1508  3A05               	xorlw	5	; case 92
 11571  1509  1903               	skipnz
 11572  150A  2A08               	goto	l6593
 11573  150B  3A01               	xorlw	1	; case 93
 11574  150C  1903               	skipnz
 11575  150D  2A1F               	goto	l6603
 11576  150E  3AA2               	xorlw	162	; case 255
 11577  150F  1903               	skipnz
 11578  1510  2C8F               	goto	l6927
 11579  1511  2D12               	goto	l6939
 11580  1512                     l6939:	
 11581                           
 11582                           ;ir.c: 735: TMR2_EnableInterrupt();
 11583  1512  26C6               	fcall	_TMR2_EnableInterrupt
 11584                           
 11585                           ;ir.c: 736: keyValue = 0x00;
 11586  1513  0020               	movlb	0	; select bank0
 11587  1514  01B0               	clrf	_keyValue	;volatile
 11588  1515  0008               	return
 11589  1516                     __end_of_IR_KeyAction:	
 11590  1516                     __ptext42:	
 11591 ;; *************** function _Util_DecValue *****************
 11592 ;; Defined at:
 11593 ;;		line 15 in file "user/src/util.c"
 11594 ;; Parameters:    Size  Location     Type
 11595 ;;  pSrc            2   13[BANK0 ] PTR unsigned int 
 11596 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), gLedPara(117), 
 11597 ;;  min             2   15[BANK0 ] unsigned int 
 11598 ;;  delta           2   17[BANK0 ] unsigned int 
 11599 ;; Auto vars:     Size  Location     Type
 11600 ;;		None
 11601 ;; Return value:  Size  Location     Type
 11602 ;;                  1    wreg      void 
 11603 ;; Registers used:
 11604 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11605 ;; Tracked objects:
 11606 ;;		On entry : 1F/0
 11607 ;;		On exit  : 1F/0
 11608 ;;		Unchanged: 0/0
 11609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11610 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11612 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11613 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11614 ;;Total ram usage:       10 bytes
 11615 ;; Hardware stack levels used:    1
 11616 ;; Hardware stack levels required when called:    7
 11617 ;; This function calls:
 11618 ;;		Nothing
 11619 ;; This function is called by:
 11620 ;;		_IR_KeyAction
 11621 ;; This function uses a non-reentrant model
 11622 ;;
 11623                           
 11624                           
 11625                           ;psect for function _Util_DecValue
 11626  1516                     _Util_DecValue:	
 11627                           
 11628                           ;util.c: 17: if( *pSrc > min + delta )
 11629                           
 11630                           ;incstack = 0
 11631                           ; Regs used in _Util_DecValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 11632  1516  084D               	movf	Util_DecValue@pSrc,w
 11633  1517  0086               	movwf	6
 11634  1518  084E               	movf	Util_DecValue@pSrc+1,w
 11635  1519  0087               	movwf	7
 11636  151A  3F40               	moviw [0]fsr1
 11637  151B  00D3               	movwf	??_Util_DecValue
 11638  151C  3F41               	moviw [1]fsr1
 11639  151D  00D4               	movwf	??_Util_DecValue+1
 11640  151E  0851               	movf	Util_DecValue@delta,w
 11641  151F  074F               	addwf	Util_DecValue@min,w
 11642  1520  00D5               	movwf	??_Util_DecValue+2
 11643  1521  0852               	movf	Util_DecValue@delta+1,w
 11644  1522  3D50               	addwfc	Util_DecValue@min+1,w
 11645  1523  00D6               	movwf	??_Util_DecValue+3
 11646  1524  0854               	movf	??_Util_DecValue+1,w
 11647  1525  0256               	subwf	??_Util_DecValue+3,w
 11648  1526  1D03               	skipz
 11649  1527  2D2A               	goto	u5755
 11650  1528  0853               	movf	??_Util_DecValue,w
 11651  1529  0255               	subwf	??_Util_DecValue+2,w
 11652  152A                     u5755:	
 11653                           
 11654                           ;util.c: 18: {
 11655                           ;util.c: 19: (*pSrc) -= delta;
 11656  152A  084D               	movf	Util_DecValue@pSrc,w
 11657  152B  0086               	movwf	6
 11658  152C  084E               	movf	Util_DecValue@pSrc+1,w
 11659  152D  0087               	movwf	7
 11660  152E  1803               	skipnc
 11661  152F  2D37               	goto	L8
 11662  1530  0851               	movf	Util_DecValue@delta,w
 11663  1531  0281               	subwf	1,f
 11664  1532  3141               	addfsr 1,1
 11665  1533  0852               	movf	Util_DecValue@delta+1,w
 11666  1534  3B81               	subwfb	1,f
 11667  1535  317F               	addfsr 1,-1
 11668                           
 11669                           ;util.c: 20: }
 11670  1536  0008               	return
 11671  1537                     L8:	
 11672                           ;util.c: 21: else
 11673                           ;util.c: 22: {
 11674                           ;util.c: 23: *pSrc = min;
 11675                           
 11676  1537  084F               	movf	Util_DecValue@min,w
 11677  1538  3FC0               	movwi [0]fsr1
 11678  1539  0850               	movf	Util_DecValue@min+1,w
 11679  153A  3FC1               	movwi [1]fsr1
 11680  153B  0008               	return
 11681  153C                     __end_of_Util_DecValue:	
 11682  153C                     __ptext41:	
 11683 ;; *************** function _Util_IncValue *****************
 11684 ;; Defined at:
 11685 ;;		line 3 in file "user/src/util.c"
 11686 ;; Parameters:    Size  Location     Type
 11687 ;;  pSrc            2   13[BANK0 ] PTR unsigned int 
 11688 ;;		 -> gLedRunPara.mCurrentBright(10), gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), 
 11689 ;;		 -> gLedPara(117), 
 11690 ;;  max             2   15[BANK0 ] unsigned int 
 11691 ;;  delta           2   17[BANK0 ] unsigned int 
 11692 ;; Auto vars:     Size  Location     Type
 11693 ;;		None
 11694 ;; Return value:  Size  Location     Type
 11695 ;;                  1    wreg      void 
 11696 ;; Registers used:
 11697 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11698 ;; Tracked objects:
 11699 ;;		On entry : 1F/0
 11700 ;;		On exit  : 1F/0
 11701 ;;		Unchanged: 0/0
 11702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11703 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11705 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11706 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11707 ;;Total ram usage:       10 bytes
 11708 ;; Hardware stack levels used:    1
 11709 ;; Hardware stack levels required when called:    7
 11710 ;; This function calls:
 11711 ;;		Nothing
 11712 ;; This function is called by:
 11713 ;;		_Led_AutoRun
 11714 ;;		_IR_KeyAction
 11715 ;; This function uses a non-reentrant model
 11716 ;;
 11717                           
 11718                           
 11719                           ;psect for function _Util_IncValue
 11720  153C                     _Util_IncValue:	
 11721                           
 11722                           ;util.c: 5: if( *pSrc + delta < max )
 11723                           
 11724                           ;incstack = 0
 11725                           ; Regs used in _Util_IncValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 11726  153C  084D               	movf	Util_IncValue@pSrc,w
 11727  153D  0086               	movwf	6
 11728  153E  084E               	movf	Util_IncValue@pSrc+1,w
 11729  153F  0087               	movwf	7
 11730  1540  3F40               	moviw [0]fsr1
 11731  1541  00D3               	movwf	??_Util_IncValue
 11732  1542  3F41               	moviw [1]fsr1
 11733  1543  00D4               	movwf	??_Util_IncValue+1
 11734  1544  0851               	movf	Util_IncValue@delta,w
 11735  1545  0753               	addwf	??_Util_IncValue,w
 11736  1546  00D5               	movwf	??_Util_IncValue+2
 11737  1547  0852               	movf	Util_IncValue@delta+1,w
 11738  1548  3D54               	addwfc	??_Util_IncValue+1,w
 11739  1549  00D6               	movwf	??_Util_IncValue+3
 11740  154A  0850               	movf	Util_IncValue@max+1,w
 11741  154B  0256               	subwf	??_Util_IncValue+3,w
 11742  154C  1D03               	skipz
 11743  154D  2D50               	goto	u5635
 11744  154E  084F               	movf	Util_IncValue@max,w
 11745  154F  0255               	subwf	??_Util_IncValue+2,w
 11746  1550                     u5635:	
 11747                           
 11748                           ;util.c: 6: {
 11749                           ;util.c: 7: (*pSrc) += delta;
 11750  1550  084D               	movf	Util_IncValue@pSrc,w
 11751  1551  0086               	movwf	6
 11752  1552  084E               	movf	Util_IncValue@pSrc+1,w
 11753  1553  0087               	movwf	7
 11754  1554  1803               	skipnc
 11755  1555  2D5D               	goto	L7
 11756  1556  0851               	movf	Util_IncValue@delta,w
 11757  1557  0781               	addwf	1,f
 11758  1558  3141               	addfsr 1,1
 11759  1559  0852               	movf	Util_IncValue@delta+1,w
 11760  155A  3D81               	addwfc	1,f
 11761  155B  317F               	addfsr 1,-1
 11762                           
 11763                           ;util.c: 8: }
 11764  155C  0008               	return
 11765  155D                     L7:	
 11766                           ;util.c: 9: else
 11767                           ;util.c: 10: {
 11768                           ;util.c: 11: *pSrc = max;
 11769                           
 11770  155D  084F               	movf	Util_IncValue@max,w
 11771  155E  3FC0               	movwi [0]fsr1
 11772  155F  0850               	movf	Util_IncValue@max+1,w
 11773  1560  3FC1               	movwi [1]fsr1
 11774  1561  0008               	return
 11775  1562                     __end_of_Util_IncValue:	
 11776  1562                     __ptext67:	
 11777 ;; *************** function ___wmul *****************
 11778 ;; Defined at:
 11779 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11780 ;; Parameters:    Size  Location     Type
 11781 ;;  multiplier      2   13[BANK0 ] unsigned int 
 11782 ;;  multiplicand    2   15[BANK0 ] unsigned int 
 11783 ;; Auto vars:     Size  Location     Type
 11784 ;;  product         2   17[BANK0 ] unsigned int 
 11785 ;; Return value:  Size  Location     Type
 11786 ;;                  2   13[BANK0 ] unsigned int 
 11787 ;; Registers used:
 11788 ;;		wreg, status,2, status,0
 11789 ;; Tracked objects:
 11790 ;;		On entry : 1F/0
 11791 ;;		On exit  : 1F/0
 11792 ;;		Unchanged: 0/0
 11793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11794 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11795 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11797 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11798 ;;Total ram usage:        6 bytes
 11799 ;; Hardware stack levels used:    1
 11800 ;; Hardware stack levels required when called:    7
 11801 ;; This function calls:
 11802 ;;		Nothing
 11803 ;; This function is called by:
 11804 ;;		_Audio_GetValue
 11805 ;;		_Led_InitPara
 11806 ;;		_Led_Initialize
 11807 ;;		_Led_CheckAutoStatus
 11808 ;;		_IR_KeyAction
 11809 ;; This function uses a non-reentrant model
 11810 ;;
 11811                           
 11812                           
 11813                           ;psect for function ___wmul
 11814  1562                     ___wmul:	
 11815                           
 11816                           ;incstack = 0
 11817                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11818  1562  01D1               	clrf	___wmul@product
 11819  1563  01D2               	clrf	___wmul@product+1
 11820  1564                     l6031:	
 11821  1564  1C4D               	btfss	___wmul@multiplier,0
 11822  1565  2D6A               	goto	l6035
 11823  1566  084F               	movf	___wmul@multiplicand,w
 11824  1567  07D1               	addwf	___wmul@product,f
 11825  1568  0850               	movf	___wmul@multiplicand+1,w
 11826  1569  3DD2               	addwfc	___wmul@product+1,f
 11827  156A                     l6035:	
 11828  156A  35CF               	lslf	___wmul@multiplicand,f
 11829  156B  0DD0               	rlf	___wmul@multiplicand+1,f
 11830  156C  36CE               	lsrf	___wmul@multiplier+1,f
 11831  156D  0CCD               	rrf	___wmul@multiplier,f
 11832  156E  084D               	movf	___wmul@multiplier,w
 11833  156F  044E               	iorwf	___wmul@multiplier+1,w
 11834  1570  1D03               	btfss	3,2
 11835  1571  2D64               	goto	l6031
 11836  1572  0852               	movf	___wmul@product+1,w
 11837  1573  00CE               	movwf	?___wmul+1
 11838  1574  0851               	movf	___wmul@product,w
 11839  1575  00CD               	movwf	?___wmul
 11840  1576  0008               	return
 11841  1577                     __end_of___wmul:	
 11842  1577                     __ptext62:	
 11843 ;; *************** function _Audio_StopSound *****************
 11844 ;; Defined at:
 11845 ;;		line 15 in file "user/src/audio.c"
 11846 ;; Parameters:    Size  Location     Type
 11847 ;;		None
 11848 ;; Auto vars:     Size  Location     Type
 11849 ;;  checksum        1   14[BANK0 ] unsigned char 
 11850 ;; Return value:  Size  Location     Type
 11851 ;;                  1    wreg      void 
 11852 ;; Registers used:
 11853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11854 ;; Tracked objects:
 11855 ;;		On entry : 0/0
 11856 ;;		On exit  : 1F/0
 11857 ;;		Unchanged: 0/0
 11858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11862 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11863 ;;Total ram usage:        1 bytes
 11864 ;; Hardware stack levels used:    1
 11865 ;; Hardware stack levels required when called:    8
 11866 ;; This function calls:
 11867 ;;		_EUSART_Write
 11868 ;; This function is called by:
 11869 ;;		_Audio_Initialize
 11870 ;;		_IR_KeyAction
 11871 ;; This function uses a non-reentrant model
 11872 ;;
 11873                           
 11874                           
 11875                           ;psect for function _Audio_StopSound
 11876  1577                     _Audio_StopSound:	
 11877                           
 11878                           ;audio.c: 17: uint8_t checksum = 0x00;
 11879                           
 11880                           ;incstack = 0
 11881                           ; Regs used in _Audio_StopSound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11882  1577  0020               	movlb	0	; select bank0
 11883  1578  307E               	movlw	126
 11884  1579  01CE               	clrf	Audio_StopSound@checksum
 11885                           
 11886                           ;audio.c: 18: EUSART_Write ( 0x7E );
 11887  157A  2639  3191         	fcall	_EUSART_Write
 11888                           
 11889                           ;audio.c: 19: checksum += EUSART_Write ( 0x03 );
 11890  157C  3003               	movlw	3
 11891  157D  2639  3191         	fcall	_EUSART_Write
 11892  157F  07CE               	addwf	Audio_StopSound@checksum,f
 11893                           
 11894                           ;audio.c: 20: checksum += EUSART_Write ( 0xAB );
 11895  1580  30AB               	movlw	171
 11896  1581  2639  3191         	fcall	_EUSART_Write
 11897  1583  07CE               	addwf	Audio_StopSound@checksum,f
 11898                           
 11899                           ;audio.c: 21: EUSART_Write ( checksum );
 11900  1584  084E               	movf	Audio_StopSound@checksum,w
 11901  1585  2639  3191         	fcall	_EUSART_Write
 11902                           
 11903                           ;audio.c: 22: EUSART_Write ( 0xEF );
 11904  1587  30EF               	movlw	239
 11905  1588  2E39               	ljmp	_EUSART_Write
 11906  1589                     __end_of_Audio_StopSound:	
 11907  1589                     __ptext47:	
 11908 ;; *************** function _IR_GetIndex *****************
 11909 ;; Defined at:
 11910 ;;		line 10 in file "user/src/ir.c"
 11911 ;; Parameters:    Size  Location     Type
 11912 ;;  keynum          1    wreg     unsigned char 
 11913 ;; Auto vars:     Size  Location     Type
 11914 ;;  keynum          1   14[BANK0 ] unsigned char 
 11915 ;;  idx             1   13[BANK0 ] unsigned char 
 11916 ;; Return value:  Size  Location     Type
 11917 ;;                  1    wreg      unsigned char 
 11918 ;; Registers used:
 11919 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11920 ;; Tracked objects:
 11921 ;;		On entry : 1F/0
 11922 ;;		On exit  : 1F/0
 11923 ;;		Unchanged: 0/0
 11924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;Total ram usage:        2 bytes
 11930 ;; Hardware stack levels used:    1
 11931 ;; Hardware stack levels required when called:    7
 11932 ;; This function calls:
 11933 ;;		Nothing
 11934 ;; This function is called by:
 11935 ;;		_IR_KeyAction
 11936 ;; This function uses a non-reentrant model
 11937 ;;
 11938                           
 11939                           
 11940                           ;psect for function _IR_GetIndex
 11941  1589                     _IR_GetIndex:	
 11942                           
 11943                           ;incstack = 0
 11944                           ; Regs used in _IR_GetIndex: [wreg-fsr0h+status,2+status,0]
 11945                           ;IR_GetIndex@keynum stored from wreg
 11946  1589  00CE               	movwf	IR_GetIndex@keynum
 11947                           
 11948                           ;ir.c: 11: uint8_t idx = 0xFF;
 11949  158A  30FF               	movlw	255
 11950  158B  00CD               	movwf	IR_GetIndex@idx
 11951                           
 11952                           ;ir.c: 12: switch (keynum) {
 11953  158C  2DA8               	goto	l6417
 11954  158D                     l6397:	
 11955                           
 11956                           ;ir.c: 14: case 0x54:
 11957                           ;ir.c: 15: case 0x50:
 11958                           ;ir.c: 16: idx = 0;
 11959  158D  01CD               	clrf	IR_GetIndex@idx
 11960                           
 11961                           ;ir.c: 17: break;
 11962  158E  2E0A               	goto	l6419
 11963  158F                     l904:	
 11964                           
 11965                           ;ir.c: 19: case 0x55:
 11966                           ;ir.c: 20: case 0x51:
 11967                           ;ir.c: 21: idx = 1;
 11968  158F  01CD               	clrf	IR_GetIndex@idx
 11969  1590  0ACD               	incf	IR_GetIndex@idx,f
 11970                           
 11971                           ;ir.c: 22: break;
 11972  1591  2E0A               	goto	l6419
 11973  1592                     l6399:	
 11974                           
 11975                           ;ir.c: 24: case 0x49:
 11976                           ;ir.c: 25: case 0x4D:
 11977                           ;ir.c: 26: idx = 2;
 11978  1592  3002               	movlw	2
 11979  1593  2DA6               	goto	L17
 11980  1594                     l6401:	
 11981                           ;ir.c: 27: break;
 11982                           
 11983                           
 11984                           ;ir.c: 29: case 0x44:
 11985                           ;ir.c: 30: case 0x4C:
 11986                           ;ir.c: 31: idx = 3;
 11987  1594  3003               	movlw	3
 11988  1595  2DA6               	goto	L17
 11989  1596                     l6403:	
 11990                           ;ir.c: 32: break;
 11991                           
 11992                           
 11993                           ;ir.c: 34: case 0x40:
 11994                           ;ir.c: 35: idx = 4;
 11995  1596  3004               	movlw	4
 11996  1597  2DA6               	goto	L17
 11997  1598                     l915:	
 11998                           ;ir.c: 36: break;
 11999                           
 12000  1598                     l6405:	
 12001                           
 12002                           ;ir.c: 38: case 0x1D:
 12003                           ;ir.c: 39: case 0x1E:
 12004                           ;ir.c: 40: case 0x1F:
 12005                           ;ir.c: 41: idx = keynum - 0x1C + 1;
 12006  1598  084E               	movf	IR_GetIndex@keynum,w
 12007  1599  3EE5               	addlw	229
 12008  159A  2DA6               	goto	L17
 12009  159B                     l919:	
 12010                           ;ir.c: 42: break;
 12011                           
 12012  159B                     l6407:	
 12013                           
 12014                           ;ir.c: 44: case 0x15:
 12015                           ;ir.c: 45: case 0x16:
 12016                           ;ir.c: 46: case 0x17:
 12017                           ;ir.c: 47: idx = keynum - 0x14 + 5;
 12018  159B  084E               	movf	IR_GetIndex@keynum,w
 12019  159C  3EF1               	addlw	241
 12020  159D  2DA6               	goto	L17
 12021  159E                     l923:	
 12022                           ;ir.c: 48: break;
 12023                           
 12024  159E                     l6409:	
 12025                           
 12026                           ;ir.c: 50: case 0x0D:
 12027                           ;ir.c: 51: case 0x0E:
 12028                           ;ir.c: 52: case 0x0F:
 12029                           ;ir.c: 53: idx = keynum - 0x0C;
 12030  159E  084E               	movf	IR_GetIndex@keynum,w
 12031  159F  3EF4               	addlw	244
 12032  15A0  2DA6               	goto	L17
 12033  15A1                     l927:	
 12034                           ;ir.c: 54: break;
 12035                           
 12036  15A1                     l6411:	
 12037                           
 12038                           ;ir.c: 56: case 0x09:
 12039                           ;ir.c: 57: case 0x0A:
 12040                           ;ir.c: 58: case 0x0B:
 12041                           ;ir.c: 59: idx = keynum - 0x08 + 4;
 12042  15A1  084E               	movf	IR_GetIndex@keynum,w
 12043  15A2  3EFC               	addlw	252
 12044  15A3  2DA6               	goto	L17
 12045  15A4                     l6413:	
 12046                           ;ir.c: 60: break;
 12047                           
 12048                           
 12049                           ;ir.c: 62: case 0x05:
 12050                           ;ir.c: 63: idx = keynum - 0x04 + 8;
 12051  15A4  084E               	movf	IR_GetIndex@keynum,w
 12052  15A5  3E04               	addlw	4
 12053  15A6                     L17:	
 12054  15A6  00CD               	movwf	IR_GetIndex@idx
 12055                           
 12056                           ;ir.c: 64: break;
 12057  15A7  2E0A               	goto	l6419
 12058  15A8                     l6417:	
 12059  15A8  084E               	movf	IR_GetIndex@keynum,w
 12060                           
 12061                           ; Switch size 1, requested type "space"
 12062                           ; Number of cases is 32, Range of values is 4 to 89
 12063                           ; switch strategies available:
 12064                           ; Name         Instructions Cycles
 12065                           ; simple_byte           97    49 (average)
 12066                           ; direct_byte          181     9 (fixed)
 12067                           ; jumptable            263     9 (fixed)
 12068                           ;	Chosen strategy is simple_byte
 12069  15A9  3A04               	xorlw	4	; case 4
 12070  15AA  1903               	skipnz
 12071  15AB  2DA4               	goto	l6413
 12072  15AC  3A01               	xorlw	1	; case 5
 12073  15AD  1903               	skipnz
 12074  15AE  2DA4               	goto	l6413
 12075  15AF  3A0D               	xorlw	13	; case 8
 12076  15B0  1903               	skipnz
 12077  15B1  2DA1               	goto	l927
 12078  15B2  3A01               	xorlw	1	; case 9
 12079  15B3  1903               	skipnz
 12080  15B4  2DA1               	goto	l6411
 12081  15B5  3A03               	xorlw	3	; case 10
 12082  15B6  1903               	skipnz
 12083  15B7  2DA1               	goto	l6411
 12084  15B8  3A01               	xorlw	1	; case 11
 12085  15B9  1903               	skipnz
 12086  15BA  2DA1               	goto	l6411
 12087  15BB  3A07               	xorlw	7	; case 12
 12088  15BC  1903               	skipnz
 12089  15BD  2D9E               	goto	l923
 12090  15BE  3A01               	xorlw	1	; case 13
 12091  15BF  1903               	skipnz
 12092  15C0  2D9E               	goto	l6409
 12093  15C1  3A03               	xorlw	3	; case 14
 12094  15C2  1903               	skipnz
 12095  15C3  2D9E               	goto	l6409
 12096  15C4  3A01               	xorlw	1	; case 15
 12097  15C5  1903               	skipnz
 12098  15C6  2D9E               	goto	l6409
 12099  15C7  3A1B               	xorlw	27	; case 20
 12100  15C8  1903               	skipnz
 12101  15C9  2D9B               	goto	l919
 12102  15CA  3A01               	xorlw	1	; case 21
 12103  15CB  1903               	skipnz
 12104  15CC  2D9B               	goto	l6407
 12105  15CD  3A03               	xorlw	3	; case 22
 12106  15CE  1903               	skipnz
 12107  15CF  2D9B               	goto	l6407
 12108  15D0  3A01               	xorlw	1	; case 23
 12109  15D1  1903               	skipnz
 12110  15D2  2D9B               	goto	l6407
 12111  15D3  3A0B               	xorlw	11	; case 28
 12112  15D4  1903               	skipnz
 12113  15D5  2D98               	goto	l915
 12114  15D6  3A01               	xorlw	1	; case 29
 12115  15D7  1903               	skipnz
 12116  15D8  2D98               	goto	l6405
 12117  15D9  3A03               	xorlw	3	; case 30
 12118  15DA  1903               	skipnz
 12119  15DB  2D98               	goto	l6405
 12120  15DC  3A01               	xorlw	1	; case 31
 12121  15DD  1903               	skipnz
 12122  15DE  2D98               	goto	l6405
 12123  15DF  3A5F               	xorlw	95	; case 64
 12124  15E0  1903               	skipnz
 12125  15E1  2D96               	goto	l6403
 12126  15E2  3A01               	xorlw	1	; case 65
 12127  15E3  1903               	skipnz
 12128  15E4  2D96               	goto	l6403
 12129  15E5  3A05               	xorlw	5	; case 68
 12130  15E6  1903               	skipnz
 12131  15E7  2D94               	goto	l6401
 12132  15E8  3A01               	xorlw	1	; case 69
 12133  15E9  1903               	skipnz
 12134  15EA  2D92               	goto	l6399
 12135  15EB  3A0D               	xorlw	13	; case 72
 12136  15EC  1903               	skipnz
 12137  15ED  2D94               	goto	l6401
 12138  15EE  3A01               	xorlw	1	; case 73
 12139  15EF  1903               	skipnz
 12140  15F0  2D92               	goto	l6399
 12141  15F1  3A05               	xorlw	5	; case 76
 12142  15F2  1903               	skipnz
 12143  15F3  2D94               	goto	l6401
 12144  15F4  3A01               	xorlw	1	; case 77
 12145  15F5  1903               	skipnz
 12146  15F6  2D92               	goto	l6399
 12147  15F7  3A1D               	xorlw	29	; case 80
 12148  15F8  1903               	skipnz
 12149  15F9  2D8D               	goto	l6397
 12150  15FA  3A01               	xorlw	1	; case 81
 12151  15FB  1903               	skipnz
 12152  15FC  2D8F               	goto	l904
 12153  15FD  3A05               	xorlw	5	; case 84
 12154  15FE  1903               	skipnz
 12155  15FF  2D8D               	goto	l6397
 12156  1600  3A01               	xorlw	1	; case 85
 12157  1601  1903               	skipnz
 12158  1602  2D8F               	goto	l904
 12159  1603  3A0D               	xorlw	13	; case 88
 12160  1604  1903               	skipnz
 12161  1605  2D8D               	goto	l6397
 12162  1606  3A01               	xorlw	1	; case 89
 12163  1607  1903               	skipnz
 12164  1608  2D8F               	goto	l904
 12165  1609  2E0A               	goto	l6419
 12166  160A                     l6419:	
 12167                           
 12168                           ;ir.c: 68: return idx;
 12169  160A  084D               	movf	IR_GetIndex@idx,w
 12170  160B  0008               	return
 12171  160C                     __end_of_IR_GetIndex:	
 12172  160C                     __ptext63:	
 12173 ;; *************** function _Audio_SetVolume *****************
 12174 ;; Defined at:
 12175 ;;		line 50 in file "user/src/audio.c"
 12176 ;; Parameters:    Size  Location     Type
 12177 ;;  vol             1    wreg     unsigned char 
 12178 ;; Auto vars:     Size  Location     Type
 12179 ;;  vol             1   14[BANK0 ] unsigned char 
 12180 ;;  checksum        1   15[BANK0 ] unsigned char 
 12181 ;; Return value:  Size  Location     Type
 12182 ;;                  1    wreg      void 
 12183 ;; Registers used:
 12184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12185 ;; Tracked objects:
 12186 ;;		On entry : 1F/0
 12187 ;;		On exit  : 1F/0
 12188 ;;		Unchanged: 0/0
 12189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12191 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;Total ram usage:        2 bytes
 12195 ;; Hardware stack levels used:    1
 12196 ;; Hardware stack levels required when called:    8
 12197 ;; This function calls:
 12198 ;;		_EUSART_Write
 12199 ;; This function is called by:
 12200 ;;		_Audio_Initialize
 12201 ;;		_IR_KeyAction
 12202 ;; This function uses a non-reentrant model
 12203 ;;
 12204                           
 12205                           
 12206                           ;psect for function _Audio_SetVolume
 12207  160C                     _Audio_SetVolume:	
 12208                           
 12209                           ;incstack = 0
 12210                           ; Regs used in _Audio_SetVolume: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12211                           ;Audio_SetVolume@vol stored from wreg
 12212  160C  00CE               	movwf	Audio_SetVolume@vol
 12213  160D  307E               	movlw	126
 12214                           
 12215                           ;audio.c: 52: uint8_t checksum = 0x00;
 12216  160E  01CF               	clrf	Audio_SetVolume@checksum
 12217                           
 12218                           ;audio.c: 53: EUSART_Write ( 0x7E );
 12219  160F  2639  3191         	fcall	_EUSART_Write
 12220                           
 12221                           ;audio.c: 54: checksum += EUSART_Write ( 0x04 );
 12222  1611  3004               	movlw	4
 12223  1612  2639  3191         	fcall	_EUSART_Write
 12224  1614  07CF               	addwf	Audio_SetVolume@checksum,f
 12225                           
 12226                           ;audio.c: 55: checksum += EUSART_Write ( 0xAE );
 12227  1615  30AE               	movlw	174
 12228  1616  2639  3191         	fcall	_EUSART_Write
 12229  1618  07CF               	addwf	Audio_SetVolume@checksum,f
 12230                           
 12231                           ;audio.c: 56: checksum += EUSART_Write ( vol );
 12232  1619  084E               	movf	Audio_SetVolume@vol,w
 12233  161A  2639  3191         	fcall	_EUSART_Write
 12234  161C  07CF               	addwf	Audio_SetVolume@checksum,f
 12235                           
 12236                           ;audio.c: 57: EUSART_Write ( checksum );
 12237  161D  084F               	movf	Audio_SetVolume@checksum,w
 12238  161E  2639  3191         	fcall	_EUSART_Write
 12239                           
 12240                           ;audio.c: 58: EUSART_Write ( 0xEF );
 12241  1620  30EF               	movlw	239
 12242  1621  2E39               	ljmp	_EUSART_Write
 12243  1622                     __end_of_Audio_SetVolume:	
 12244  1622                     __ptext64:	
 12245 ;; *************** function _Audio_SetPlayMode *****************
 12246 ;; Defined at:
 12247 ;;		line 39 in file "user/src/audio.c"
 12248 ;; Parameters:    Size  Location     Type
 12249 ;;  type            1    wreg     unsigned char 
 12250 ;; Auto vars:     Size  Location     Type
 12251 ;;  type            1   14[BANK0 ] unsigned char 
 12252 ;;  checksum        1   15[BANK0 ] unsigned char 
 12253 ;; Return value:  Size  Location     Type
 12254 ;;                  1    wreg      void 
 12255 ;; Registers used:
 12256 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12257 ;; Tracked objects:
 12258 ;;		On entry : 0/0
 12259 ;;		On exit  : 1F/0
 12260 ;;		Unchanged: 0/0
 12261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12266 ;;Total ram usage:        2 bytes
 12267 ;; Hardware stack levels used:    1
 12268 ;; Hardware stack levels required when called:    8
 12269 ;; This function calls:
 12270 ;;		_EUSART_Write
 12271 ;; This function is called by:
 12272 ;;		_Audio_Initialize
 12273 ;; This function uses a non-reentrant model
 12274 ;;
 12275                           
 12276                           
 12277                           ;psect for function _Audio_SetPlayMode
 12278  1622                     _Audio_SetPlayMode:	
 12279                           
 12280                           ;incstack = 0
 12281                           ; Regs used in _Audio_SetPlayMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12282                           ;Audio_SetPlayMode@type stored from wreg
 12283  1622  0020               	movlb	0	; select bank0
 12284  1623  00CE               	movwf	Audio_SetPlayMode@type
 12285  1624  307E               	movlw	126
 12286                           
 12287                           ;audio.c: 41: uint8_t checksum = 0x00;
 12288  1625  01CF               	clrf	Audio_SetPlayMode@checksum
 12289                           
 12290                           ;audio.c: 42: EUSART_Write ( 0x7E );
 12291  1626  2639  3191         	fcall	_EUSART_Write
 12292                           
 12293                           ;audio.c: 43: checksum += EUSART_Write ( 0x04 );
 12294  1628  3004               	movlw	4
 12295  1629  2639  3191         	fcall	_EUSART_Write
 12296  162B  07CF               	addwf	Audio_SetPlayMode@checksum,f
 12297                           
 12298                           ;audio.c: 44: checksum += EUSART_Write ( 0xAF );
 12299  162C  30AF               	movlw	175
 12300  162D  2639  3191         	fcall	_EUSART_Write
 12301  162F  07CF               	addwf	Audio_SetPlayMode@checksum,f
 12302                           
 12303                           ;audio.c: 45: checksum += EUSART_Write ( type );
 12304  1630  084E               	movf	Audio_SetPlayMode@type,w
 12305  1631  2639  3191         	fcall	_EUSART_Write
 12306  1633  07CF               	addwf	Audio_SetPlayMode@checksum,f
 12307                           
 12308                           ;audio.c: 46: EUSART_Write ( checksum );
 12309  1634  084F               	movf	Audio_SetPlayMode@checksum,w
 12310  1635  2639  3191         	fcall	_EUSART_Write
 12311                           
 12312                           ;audio.c: 47: EUSART_Write ( 0xEF );
 12313  1637  30EF               	movlw	239
 12314  1638  2E39               	ljmp	_EUSART_Write
 12315  1639                     __end_of_Audio_SetPlayMode:	
 12316  1639                     __ptext65:	
 12317 ;; *************** function _EUSART_Write *****************
 12318 ;; Defined at:
 12319 ;;		line 32 in file "driver/src/eusart.c"
 12320 ;; Parameters:    Size  Location     Type
 12321 ;;  byte            1    wreg     unsigned char 
 12322 ;; Auto vars:     Size  Location     Type
 12323 ;;  byte            1   13[BANK0 ] unsigned char 
 12324 ;; Return value:  Size  Location     Type
 12325 ;;                  1    wreg      unsigned char 
 12326 ;; Registers used:
 12327 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12328 ;; Tracked objects:
 12329 ;;		On entry : 1F/0
 12330 ;;		On exit  : 1F/0
 12331 ;;		Unchanged: 0/0
 12332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12336 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12337 ;;Total ram usage:        1 bytes
 12338 ;; Hardware stack levels used:    1
 12339 ;; Hardware stack levels required when called:    7
 12340 ;; This function calls:
 12341 ;;		Nothing
 12342 ;; This function is called by:
 12343 ;;		_Audio_StopSound
 12344 ;;		_Audio_SetPlayMode
 12345 ;;		_Audio_SetVolume
 12346 ;; This function uses a non-reentrant model
 12347 ;;
 12348                           
 12349                           
 12350                           ;psect for function _EUSART_Write
 12351  1639                     _EUSART_Write:	
 12352                           
 12353                           ;incstack = 0
 12354                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 12355                           ;EUSART_Write@byte stored from wreg
 12356  1639  00CD               	movwf	EUSART_Write@byte
 12357  163A                     l6059:	
 12358                           ;eusart.c: 34: while ( 0 == txRemain );
 12359                           
 12360  163A  0860               	movf	_txRemain,w
 12361  163B  1903               	btfsc	3,2
 12362  163C  2E3A               	goto	l6059
 12363                           
 12364                           ;eusart.c: 36: if ( !PIE1bits.TXIE )
 12365  163D  0021               	movlb	1	; select bank1
 12366  163E  1A11               	btfsc	17,4	;volatile
 12367  163F  2E45               	goto	l95
 12368                           
 12369                           ;eusart.c: 37: {
 12370                           ;eusart.c: 38: TXREG = byte;
 12371  1640  0020               	movlb	0	; select bank0
 12372  1641  084D               	movf	EUSART_Write@byte,w
 12373  1642  0023               	movlb	3	; select bank3
 12374  1643  009A               	movwf	26	;volatile
 12375                           
 12376                           ;eusart.c: 39: }
 12377  1644  2E4B               	goto	l6073
 12378  1645                     l95:	
 12379                           
 12380                           ;eusart.c: 40: else
 12381                           ;eusart.c: 41: {
 12382                           ;eusart.c: 42: PIE1bits.TXIE = 0;
 12383                           
 12384                           ;eusart.c: 43: txBuf[txHead++] = byte;
 12385  1645  3185  2544  3191   	fcall	PL128	;call to abstracted procedure
 12386  1648  084D               	movf	EUSART_Write@byte,w
 12387                           
 12388                           ;eusart.c: 44: if ( sizeof (txBuf ) <= txHead )
 12389                           
 12390                           ;eusart.c: 45: {
 12391                           ;eusart.c: 46: txHead = 0;
 12392                           
 12393                           ;eusart.c: 47: }
 12394                           ;eusart.c: 48: txRemain--;
 12395  1649  3185  256C         	fcall	PL142	;call to abstracted procedure
 12396  164B                     l6073:	
 12397                           
 12398                           ;eusart.c: 49: }
 12399                           ;eusart.c: 50: PIE1bits.TXIE = 1;
 12400  164B  0021               	movlb	1	; select bank1
 12401  164C  1611               	bsf	17,4	;volatile
 12402                           
 12403                           ;eusart.c: 51: return byte;
 12404  164D  0020               	movlb	0	; select bank0
 12405  164E  084D               	movf	EUSART_Write@byte,w
 12406  164F  0008               	return
 12407  1650                     __end_of_EUSART_Write:	
 12408  1650                     __ptext45:	
 12409 ;; *************** function _IR_IsValidTime *****************
 12410 ;; Defined at:
 12411 ;;		line 71 in file "user/src/ir.c"
 12412 ;; Parameters:    Size  Location     Type
 12413 ;;  tm              1    wreg     PTR unsigned char 
 12414 ;;		 -> ir_state.time(4), ir_state(7), 
 12415 ;;  len             1   16[BANK0 ] unsigned char 
 12416 ;; Auto vars:     Size  Location     Type
 12417 ;;  tm              1   20[BANK0 ] PTR unsigned char 
 12418 ;;		 -> ir_state.time(4), ir_state(7), 
 12419 ;;  hour            1   19[BANK0 ] unsigned char 
 12420 ;;  result          1   18[BANK0 ] unsigned char 
 12421 ;;  min             1   17[BANK0 ] unsigned char 
 12422 ;; Return value:  Size  Location     Type
 12423 ;;                  1    wreg      unsigned char 
 12424 ;; Registers used:
 12425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12426 ;; Tracked objects:
 12427 ;;		On entry : 1F/0
 12428 ;;		On exit  : 1F/0
 12429 ;;		Unchanged: 0/0
 12430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12431 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12432 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12434 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;Total ram usage:        5 bytes
 12436 ;; Hardware stack levels used:    1
 12437 ;; Hardware stack levels required when called:    8
 12438 ;; This function calls:
 12439 ;;		___bmul
 12440 ;; This function is called by:
 12441 ;;		_IR_KeyAction
 12442 ;; This function uses a non-reentrant model
 12443 ;;
 12444                           
 12445                           
 12446                           ;psect for function _IR_IsValidTime
 12447  1650                     _IR_IsValidTime:	
 12448                           
 12449                           ;incstack = 0
 12450                           ; Regs used in _IR_IsValidTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12451                           ;IR_IsValidTime@tm stored from wreg
 12452  1650  00D4               	movwf	IR_IsValidTime@tm
 12453                           
 12454                           ;ir.c: 72: bool result = 0;
 12455  1651  01D2               	clrf	IR_IsValidTime@result
 12456                           
 12457                           ;ir.c: 74: uint8_t min = 0;
 12458  1652  01D1               	clrf	IR_IsValidTime@min
 12459                           
 12460                           ;ir.c: 76: switch (len) {
 12461  1653  2E8E               	goto	l6453
 12462  1654                     l6425:	
 12463                           
 12464                           ;ir.c: 78: if ((*tm) < 3) {
 12465  1654  0854               	movf	IR_IsValidTime@tm,w
 12466  1655  0086               	movwf	6
 12467  1656  3003               	movlw	3
 12468  1657                     L10:	
 12469  1657  0187               	clrf	7
 12470  1658  0201               	subwf	1,w
 12471  1659                     L9:	
 12472  1659  1803               	skipnc
 12473  165A  2E9C               	goto	l6455
 12474                           
 12475                           ;ir.c: 79: result = 1;
 12476  165B  01D2               	clrf	IR_IsValidTime@result
 12477  165C  0AD2               	incf	IR_IsValidTime@result,f
 12478  165D  2E9C               	goto	l6455
 12479  165E                     l6429:	
 12480                           
 12481                           ;ir.c: 83: hour = (*tm)*10 + (*(tm + 1));
 12482  165E  277D  3191         	fcall	PL62	;call to abstracted procedure
 12483  1660  269E  3191         	fcall	___bmul
 12484                           
 12485                           ;ir.c: 84: if (hour < 24) {
 12486  1662  27FB  3191         	fcall	PL164	;call to abstracted procedure
 12487  1664  2E59               	goto	L9
 12488  1665                     l6435:	
 12489                           
 12490                           ;ir.c: 89: hour = (*tm)*10 + (*(tm + 1));
 12491  1665  277D  3191         	fcall	PL62	;call to abstracted procedure
 12492  1667  269E  3191         	fcall	___bmul
 12493                           
 12494                           ;ir.c: 90: if (hour < 24 && (*(tm + 2)) < 6) {
 12495  1669  27FB  3191         	fcall	PL164	;call to abstracted procedure
 12496  166B  1803               	skipnc
 12497  166C  2E9C               	goto	l6455
 12498  166D  0854               	movf	IR_IsValidTime@tm,w
 12499  166E  3E02               	addlw	2
 12500  166F  0086               	movwf	6
 12501  1670  3006               	movlw	6
 12502  1671  2E57               	goto	L10
 12503  1672                     l6443:	
 12504                           
 12505                           ;ir.c: 95: hour = (*tm)*10 + (*(tm + 1));
 12506  1672  277D  3191         	fcall	PL62	;call to abstracted procedure
 12507  1674  269E  3191         	fcall	___bmul
 12508  1676  0701               	addwf	1,w
 12509  1677  00D3               	movwf	IR_IsValidTime@hour
 12510                           
 12511                           ;ir.c: 96: min = (*(tm + 2))*10 + (*(tm + 3));
 12512  1678  0854               	movf	IR_IsValidTime@tm,w
 12513  1679  3E03               	addlw	3
 12514  167A  0086               	movwf	6
 12515  167B  300A               	movlw	10
 12516  167C  0187               	clrf	7
 12517  167D  00CD               	movwf	___bmul@multiplicand
 12518  167E  0854               	movf	IR_IsValidTime@tm,w
 12519  167F  3E02               	addlw	2
 12520  1680  0084               	movwf	4
 12521  1681  0185               	clrf	5
 12522  1682  0800               	movf	0,w
 12523  1683  269E  3191         	fcall	___bmul
 12524  1685  0701               	addwf	1,w
 12525  1686  00D1               	movwf	IR_IsValidTime@min
 12526                           
 12527                           ;ir.c: 97: if (hour < 24 && min < 60) {
 12528  1687  3018               	movlw	24
 12529  1688  0253               	subwf	IR_IsValidTime@hour,w
 12530  1689  1803               	skipnc
 12531  168A  2E9C               	goto	l6455
 12532  168B  303C               	movlw	60
 12533  168C  0251               	subwf	IR_IsValidTime@min,w
 12534  168D  2E59               	goto	L9
 12535  168E                     l6453:	
 12536  168E  0850               	movf	IR_IsValidTime@len,w
 12537                           
 12538                           ; Switch size 1, requested type "space"
 12539                           ; Number of cases is 4, Range of values is 1 to 4
 12540                           ; switch strategies available:
 12541                           ; Name         Instructions Cycles
 12542                           ; simple_byte           13     7 (average)
 12543                           ; direct_byte           17     9 (fixed)
 12544                           ; jumptable            263     9 (fixed)
 12545                           ;	Chosen strategy is simple_byte
 12546  168F  3A01               	xorlw	1	; case 1
 12547  1690  1903               	skipnz
 12548  1691  2E54               	goto	l6425
 12549  1692  3A03               	xorlw	3	; case 2
 12550  1693  1903               	skipnz
 12551  1694  2E5E               	goto	l6429
 12552  1695  3A01               	xorlw	1	; case 3
 12553  1696  1903               	skipnz
 12554  1697  2E65               	goto	l6435
 12555  1698  3A07               	xorlw	7	; case 4
 12556  1699  1903               	skipnz
 12557  169A  2E72               	goto	l6443
 12558  169B  2E9C               	goto	l6455
 12559  169C                     l6455:	
 12560                           
 12561                           ;ir.c: 104: return result;
 12562  169C  0852               	movf	IR_IsValidTime@result,w
 12563  169D  0008               	return
 12564  169E                     __end_of_IR_IsValidTime:	
 12565  169E                     __ptext46:	
 12566 ;; *************** function ___bmul *****************
 12567 ;; Defined at:
 12568 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul8.c"
 12569 ;; Parameters:    Size  Location     Type
 12570 ;;  multiplier      1    wreg     unsigned char 
 12571 ;;  multiplicand    1   13[BANK0 ] unsigned char 
 12572 ;; Auto vars:     Size  Location     Type
 12573 ;;  multiplier      1   15[BANK0 ] unsigned char 
 12574 ;;  product         1   14[BANK0 ] unsigned char 
 12575 ;; Return value:  Size  Location     Type
 12576 ;;                  1    wreg      unsigned char 
 12577 ;; Registers used:
 12578 ;;		wreg, status,2, status,0
 12579 ;; Tracked objects:
 12580 ;;		On entry : 1F/0
 12581 ;;		On exit  : 1F/0
 12582 ;;		Unchanged: 0/0
 12583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12584 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12585 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12587 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12588 ;;Total ram usage:        3 bytes
 12589 ;; Hardware stack levels used:    1
 12590 ;; Hardware stack levels required when called:    7
 12591 ;; This function calls:
 12592 ;;		Nothing
 12593 ;; This function is called by:
 12594 ;;		_IR_IsValidTime
 12595 ;;		_IR_KeyAction
 12596 ;; This function uses a non-reentrant model
 12597 ;;
 12598                           
 12599                           
 12600                           ;psect for function ___bmul
 12601  169E                     ___bmul:	
 12602                           
 12603                           ;incstack = 0
 12604                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 12605                           ;___bmul@multiplier stored from wreg
 12606  169E  00CF               	movwf	___bmul@multiplier
 12607  169F  01CE               	clrf	___bmul@product
 12608  16A0                     l6291:	
 12609  16A0  084D               	movf	___bmul@multiplicand,w
 12610  16A1  184F               	btfsc	___bmul@multiplier,0
 12611  16A2  07CE               	addwf	___bmul@product,f
 12612  16A3  35CD               	lslf	___bmul@multiplicand,f
 12613  16A4  36CF               	lsrf	___bmul@multiplier,f
 12614  16A5  084F               	movf	___bmul@multiplier,w
 12615  16A6  1D03               	btfss	3,2
 12616  16A7  2EA0               	goto	l6291
 12617  16A8  084E               	movf	___bmul@product,w
 12618  16A9  0008               	return
 12619  16AA                     __end_of___bmul:	
 12620  16AA                     __ptext49:	
 12621 ;; *************** function _Led_StartNotice *****************
 12622 ;; Defined at:
 12623 ;;		line 419 in file "user/src/led.c"
 12624 ;; Parameters:    Size  Location     Type
 12625 ;;  cnt             1    wreg     unsigned char 
 12626 ;; Auto vars:     Size  Location     Type
 12627 ;;  cnt             1   14[BANK0 ] unsigned char 
 12628 ;; Return value:  Size  Location     Type
 12629 ;;                  1    wreg      void 
 12630 ;; Registers used:
 12631 ;;		wreg, status,2, status,0, pclath, cstack
 12632 ;; Tracked objects:
 12633 ;;		On entry : 1F/0
 12634 ;;		On exit  : 1F/8
 12635 ;;		Unchanged: 0/0
 12636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12640 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12641 ;;Total ram usage:        2 bytes
 12642 ;; Hardware stack levels used:    1
 12643 ;; Hardware stack levels required when called:    8
 12644 ;; This function calls:
 12645 ;;		_TMR4_StartTimer
 12646 ;; This function is called by:
 12647 ;;		_IR_ExitSet
 12648 ;;		_IR_ExitTimeout
 12649 ;;		_IR_KeyAction
 12650 ;; This function uses a non-reentrant model
 12651 ;;
 12652                           
 12653                           
 12654                           ;psect for function _Led_StartNotice
 12655  16AA                     _Led_StartNotice:	
 12656                           
 12657                           ;incstack = 0
 12658                           ; Regs used in _Led_StartNotice: [wreg+status,2+status,0+pclath+cstack]
 12659                           ;Led_StartNotice@cnt stored from wreg
 12660  16AA  00CE               	movwf	Led_StartNotice@cnt
 12661                           
 12662                           ;led.c: 420: gLedRunPara.mNoticeCount = cnt;
 12663  16AB  00CD               	movwf	??_Led_StartNotice
 12664  16AC  0DCD               	rlf	??_Led_StartNotice,f
 12665  16AD  0DCD               	rlf	??_Led_StartNotice,f
 12666  16AE  0021               	movlb	1	; select bank1
 12667  16AF  085C               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
 12668  16B0  0020               	movlb	0	; select bank0
 12669  16B1  064D               	xorwf	??_Led_StartNotice,w
 12670  16B2  3903               	andlw	-253
 12671  16B3  064D               	xorwf	??_Led_StartNotice,w
 12672  16B4  0021               	movlb	1	; select bank1
 12673  16B5  00DC               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
 12674                           
 12675                           ;led.c: 421: TMR4_StartTimer();
 12676  16B6  2EC3               	ljmp	l5983
 12677  16B7                     __end_of_Led_StartNotice:	
 12678  16B7                     __ptext48:	
 12679 ;; *************** function _IR_ExitSet *****************
 12680 ;; Defined at:
 12681 ;;		line 435 in file "user/src/ir.c"
 12682 ;; Parameters:    Size  Location     Type
 12683 ;;		None
 12684 ;; Auto vars:     Size  Location     Type
 12685 ;;		None
 12686 ;; Return value:  Size  Location     Type
 12687 ;;                  1    wreg      void 
 12688 ;; Registers used:
 12689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12690 ;; Tracked objects:
 12691 ;;		On entry : 16/8
 12692 ;;		On exit  : 1E/0
 12693 ;;		Unchanged: 0/0
 12694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12699 ;;Total ram usage:        0 bytes
 12700 ;; Hardware stack levels used:    1
 12701 ;; Hardware stack levels required when called:   10
 12702 ;; This function calls:
 12703 ;;		_Led_Initialize
 12704 ;;		_Led_StartNotice
 12705 ;; This function is called by:
 12706 ;;		_IR_KeyAction
 12707 ;; This function uses a non-reentrant model
 12708 ;;
 12709                           
 12710                           
 12711                           ;psect for function _IR_ExitSet
 12712  16B7                     _IR_ExitSet:	
 12713                           
 12714                           ;ir.c: 436: ir_state.mSet = 0;
 12715                           
 12716                           ;incstack = 0
 12717                           ; Regs used in _IR_ExitSet: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12718  16B7  301F               	movlw	-225
 12719  16B8  0020               	movlb	0	; select bank0
 12720  16B9  05B6               	andwf	_ir_state,f	;volatile
 12721                           
 12722                           ;ir.c: 437: ir_state.tmIdx = 0;
 12723  16BA  01B7               	clrf	_ir_state+1	;volatile
 12724                           
 12725                           ;ir.c: 438: ir_state.mSetDelay = 0;
 12726  16BB  01BC               	clrf	_ir_state+6	;volatile
 12727                           
 12728                           ;ir.c: 439: Led_StartNotice(1);
 12729  16BC  3001               	movlw	1
 12730  16BD  26AA               	fcall	_Led_StartNotice
 12731                           
 12732                           ;ir.c: 440: Led_Initialize();
 12733  16BE  3189  2987         	ljmp	l6079
 12734  16C0                     __end_of_IR_ExitSet:	
 12735  16C0                     __ptext44:	
 12736 ;; *************** function _TMR2_DisableInterrupt *****************
 12737 ;; Defined at:
 12738 ;;		line 40 in file "driver/src/tmr2.c"
 12739 ;; Parameters:    Size  Location     Type
 12740 ;;		None
 12741 ;; Auto vars:     Size  Location     Type
 12742 ;;		None
 12743 ;; Return value:  Size  Location     Type
 12744 ;;                  1    wreg      void 
 12745 ;; Registers used:
 12746 ;;		None
 12747 ;; Tracked objects:
 12748 ;;		On entry : 1F/0
 12749 ;;		On exit  : 1F/1
 12750 ;;		Unchanged: 0/0
 12751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12756 ;;Total ram usage:        0 bytes
 12757 ;; Hardware stack levels used:    1
 12758 ;; Hardware stack levels required when called:    7
 12759 ;; This function calls:
 12760 ;;		Nothing
 12761 ;; This function is called by:
 12762 ;;		_IR_KeyAction
 12763 ;; This function uses a non-reentrant model
 12764 ;;
 12765                           
 12766                           
 12767                           ;psect for function _TMR2_DisableInterrupt
 12768  16C0                     _TMR2_DisableInterrupt:	
 12769                           
 12770                           ;tmr2.c: 42: PIE1bits.TMR2IE = 0;
 12771                           
 12772                           ;incstack = 0
 12773                           ; Regs used in _TMR2_DisableInterrupt: []
 12774  16C0  0021               	movlb	1	; select bank1
 12775  16C1  1091               	bcf	17,1	;volatile
 12776  16C2  0008               	return
 12777  16C3                     __end_of_TMR2_DisableInterrupt:	
 12778  16C3                     __ptext50:	
 12779 ;; *************** function _TMR4_StartTimer *****************
 12780 ;; Defined at:
 12781 ;;		line 17 in file "driver/src/tmr4.c"
 12782 ;; Parameters:    Size  Location     Type
 12783 ;;		None
 12784 ;; Auto vars:     Size  Location     Type
 12785 ;;		None
 12786 ;; Return value:  Size  Location     Type
 12787 ;;                  1    wreg      void 
 12788 ;; Registers used:
 12789 ;;		None
 12790 ;; Tracked objects:
 12791 ;;		On entry : 1F/1
 12792 ;;		On exit  : 1F/8
 12793 ;;		Unchanged: 0/0
 12794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12799 ;;Total ram usage:        0 bytes
 12800 ;; Hardware stack levels used:    1
 12801 ;; Hardware stack levels required when called:    7
 12802 ;; This function calls:
 12803 ;;		Nothing
 12804 ;; This function is called by:
 12805 ;;		_Led_StartNotice
 12806 ;; This function uses a non-reentrant model
 12807 ;;
 12808                           
 12809                           
 12810                           ;psect for function _TMR4_StartTimer
 12811  16C3                     _TMR4_StartTimer:	
 12812  16C3                     l5983:	
 12813                           ;incstack = 0
 12814                           ; Regs used in _TMR4_StartTimer: []
 12815                           
 12816                           
 12817                           ;tmr4.c: 19: T4CONbits.TMR4ON = 1;
 12818  16C3  0028               	movlb	8	; select bank8
 12819  16C4  1517               	bsf	23,2	;volatile
 12820  16C5  0008               	return
 12821  16C6                     __end_of_TMR4_StartTimer:	
 12822  16C6                     __ptext43:	
 12823 ;; *************** function _TMR2_EnableInterrupt *****************
 12824 ;; Defined at:
 12825 ;;		line 45 in file "driver/src/tmr2.c"
 12826 ;; Parameters:    Size  Location     Type
 12827 ;;		None
 12828 ;; Auto vars:     Size  Location     Type
 12829 ;;		None
 12830 ;; Return value:  Size  Location     Type
 12831 ;;                  1    wreg      void 
 12832 ;; Registers used:
 12833 ;;		None
 12834 ;; Tracked objects:
 12835 ;;		On entry : 14/0
 12836 ;;		On exit  : 1F/1
 12837 ;;		Unchanged: 0/0
 12838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12843 ;;Total ram usage:        0 bytes
 12844 ;; Hardware stack levels used:    1
 12845 ;; Hardware stack levels required when called:    7
 12846 ;; This function calls:
 12847 ;;		Nothing
 12848 ;; This function is called by:
 12849 ;;		_IR_ResetIfTMR1Overflow
 12850 ;;		_IR_KeyAction
 12851 ;; This function uses a non-reentrant model
 12852 ;;
 12853                           
 12854                           
 12855                           ;psect for function _TMR2_EnableInterrupt
 12856  16C6                     _TMR2_EnableInterrupt:	
 12857                           
 12858                           ;tmr2.c: 47: PIE1bits.TMR2IE = 1;
 12859                           
 12860                           ;incstack = 0
 12861                           ; Regs used in _TMR2_EnableInterrupt: []
 12862  16C6  0021               	movlb	1	; select bank1
 12863  16C7  1491               	bsf	17,1	;volatile
 12864  16C8  0008               	return
 12865  16C9                     __end_of_TMR2_EnableInterrupt:	
 12866  16C9                     PL6:	
 12867  16C9  01C1               	clrf	(??_IR_KeyAction^(0+256)+1)
 12868  16CA  35C0               	lslf	??_IR_KeyAction^(0+256),f
 12869  16CB  0DC1               	rlf	(??_IR_KeyAction^(0+256)+1),f
 12870  16CC  00C2               	movwf	(??_IR_KeyAction+2)^(0+256)
 12871  16CD  3023               	movlw	35
 12872  16CE  00C3               	movwf	((??_IR_KeyAction+2)^(0+256)+1)
 12873  16CF  0840               	movf	??_IR_KeyAction^(0+256),w
 12874  16D0  0742               	addwf	(??_IR_KeyAction+2)^(0+256),w
 12875  16D1  0084               	movwf	4
 12876  16D2  0841               	movf	(??_IR_KeyAction+1)^(0+256),w
 12877  16D3  3D43               	addwfc	(??_IR_KeyAction+3)^(0+256),w
 12878  16D4  0085               	movwf	5
 12879  16D5  3F40               	moviw [0]fsr1
 12880  16D6  3F80               	movwi [0]fsr0
 12881  16D7  3F41               	moviw [1]fsr1
 12882  16D8  3F81               	movwi [1]fsr0
 12883  16D9  0008               	return
 12884  16DA                     __end_ofPL6:	
 12885  16DA                     PL8:	
 12886  16DA  307B               	movlw	123
 12887  16DB  0086               	movwf	6
 12888  16DC  3023               	movlw	35
 12889  16DD  0087               	movwf	7
 12890  16DE  0C01               	rrf	1,w
 12891  16DF  00C0               	movwf	??_IR_KeyAction^(0+256)
 12892  16E0  0CC0               	rrf	??_IR_KeyAction^(0+256),f
 12893  16E1  0C40               	rrf	??_IR_KeyAction^(0+256),w
 12894  16E2  390F               	andlw	15
 12895  16E3  0008               	return
 12896  16E4                     __end_ofPL8:	
 12897  16E4                     PL14:	
 12898  16E4  00CE               	movwf	Util_IncValue@pSrc+1
 12899  16E5  30E8               	movlw	232
 12900  16E6  00CF               	movwf	Util_IncValue@max
 12901  16E7  3003               	movlw	3
 12902  16E8  00D0               	movwf	Util_IncValue@max+1
 12903  16E9  30C8               	movlw	200
 12904  16EA  00D1               	movwf	Util_IncValue@delta
 12905  16EB  01D2               	clrf	Util_IncValue@delta+1
 12906  16EC  0008               	return
 12907  16ED                     __end_ofPL14:	
 12908  16ED                     PL18:	
 12909  16ED  0086               	movwf	6
 12910  16EE  3023               	movlw	35
 12911  16EF  0087               	movwf	7
 12912  16F0  3142               	addfsr 1,2
 12913  16F1  0801               	movf	1,w
 12914  16F2  3E05               	addlw	low (_VOLUME| (0+32768))
 12915  16F3  0084               	movwf	4
 12916  16F4  3098               	movlw	high (_VOLUME| (0+32768))
 12917  16F5  1803               	skipnc
 12918  16F6  3E01               	addlw	1
 12919  16F7  0085               	movwf	5
 12920  16F8  0800               	movf	0,w	;code access
 12921  16F9  0008               	return
 12922  16FA                     __end_ofPL18:	
 12923  16FA                     PL28:	
 12924  16FA  0084               	movwf	4
 12925  16FB  0185               	clrf	5
 12926  16FC  3F40               	moviw [0]fsr1
 12927  16FD  3F80               	movwi [0]fsr0
 12928  16FE  3F41               	moviw [1]fsr1
 12929  16FF  3F81               	movwi [1]fsr0
 12930  1700  0008               	return
 12931  1701                     __end_ofPL28:	
 12932  1701                     PL30:	
 12933  1701  00CF               	movwf	Util_IncValue@max
 12934  1702  3003               	movlw	3
 12935  1703  00D0               	movwf	Util_IncValue@max+1
 12936  1704  30C8               	movlw	200
 12937  1705  00D1               	movwf	Util_IncValue@delta
 12938  1706  01D2               	clrf	Util_IncValue@delta+1
 12939  1707  0008               	return
 12940  1708                     __end_ofPL30:	
 12941  1708                     PL32:	
 12942  1708  00CE               	movwf	Util_DecValue@pSrc+1
 12943  1709  3064               	movlw	100
 12944  170A  00CF               	movwf	Util_DecValue@min
 12945  170B  30C8               	movlw	200
 12946  170C  01D0               	clrf	Util_DecValue@min+1
 12947  170D  00D1               	movwf	Util_DecValue@delta
 12948  170E  01D2               	clrf	Util_DecValue@delta+1
 12949  170F  0008               	return
 12950  1710                     __end_ofPL32:	
 12951  1710                     PL34:	
 12952  1710  30CE               	movlw	206
 12953  1711  0086               	movwf	6
 12954  1712  3023               	movlw	35
 12955  1713  0087               	movwf	7
 12956  1714  0021               	movlb	1	; select bank1
 12957  1715  0852               	movf	(_gLedRunPara^(0+128)+10),w	;volatile
 12958  1716  3FC0               	movwi [0]fsr1
 12959  1717  0853               	movf	((_gLedRunPara+1)^(0+128)+10),w	;volatile
 12960  1718  3FC1               	movwi [1]fsr1
 12961  1719  30D2               	movlw	210
 12962  171A  0086               	movwf	6
 12963  171B  0856               	movf	(_gLedRunPara^(0+128)+14),w	;volatile
 12964  171C  3FC0               	movwi [0]fsr1
 12965  171D  0857               	movf	((_gLedRunPara+1)^(0+128)+14),w	;volatile
 12966  171E  3FC1               	movwi [1]fsr1
 12967  171F  30D4               	movlw	212
 12968  1720  0086               	movwf	6
 12969  1721  0858               	movf	(_gLedRunPara^(0+128)+16),w	;volatile
 12970  1722  3FC0               	movwi [0]fsr1
 12971  1723  0859               	movf	((_gLedRunPara+1)^(0+128)+16),w	;volatile
 12972  1724  3FC1               	movwi [1]fsr1
 12973  1725  30D6               	movlw	214
 12974  1726  0086               	movwf	6
 12975  1727  085A               	movf	(_gLedRunPara^(0+128)+18),w	;volatile
 12976  1728  3FC0               	movwi [0]fsr1
 12977  1729  085B               	movf	((_gLedRunPara+1)^(0+128)+18),w	;volatile
 12978  172A  3FC1               	movwi [1]fsr1
 12979  172B  0008               	return
 12980  172C                     __end_ofPL34:	
 12981  172C                     PL36:	
 12982  172C  3088               	movlw	136
 12983  172D  0022               	movlb	2	; select bank2
 12984  172E  00C2               	movwf	(??_IR_KeyAction+2)^(0+256)
 12985  172F  3023               	movlw	35
 12986  1730  00C3               	movwf	((??_IR_KeyAction+2)^(0+256)+1)
 12987  1731  0020               	movlb	0	; select bank0
 12988  1732  084D               	movf	?___wmul,w
 12989  1733  0022               	movlb	2	; select bank2
 12990  1734  0742               	addwf	(??_IR_KeyAction+2)^(0+256),w
 12991  1735  00C4               	movwf	(??_IR_KeyAction+4)^(0+256)
 12992  1736  0020               	movlb	0	; select bank0
 12993  1737  084E               	movf	?___wmul+1,w
 12994  1738  0022               	movlb	2	; select bank2
 12995  1739  3D43               	addwfc	(??_IR_KeyAction+3)^(0+256),w
 12996  173A  00C5               	movwf	(??_IR_KeyAction+5)^(0+256)
 12997  173B  0840               	movf	??_IR_KeyAction^(0+256),w
 12998  173C  0744               	addwf	(??_IR_KeyAction+4)^(0+256),w
 12999  173D  0086               	movwf	6
 13000  173E  0841               	movf	(??_IR_KeyAction+1)^(0+256),w
 13001  173F  3D45               	addwfc	(??_IR_KeyAction+5)^(0+256),w
 13002  1740  0087               	movwf	7
 13003  1741  0008               	return
 13004  1742                     __end_ofPL36:	
 13005  1742                     PL38:	
 13006  1742  30C8               	movlw	200
 13007  1743  0086               	movwf	6
 13008  1744  3023               	movlw	35
 13009  1745  0087               	movwf	7
 13010  1746  0021               	movlb	1	; select bank1
 13011  1747  0856               	movf	(_gLedRunPara^(0+128)+14),w	;volatile
 13012  1748  3FC0               	movwi [0]fsr1
 13013  1749  0857               	movf	((_gLedRunPara+1)^(0+128)+14),w	;volatile
 13014  174A  3FC1               	movwi [1]fsr1
 13015  174B  30CA               	movlw	202
 13016  174C  0086               	movwf	6
 13017  174D  0858               	movf	(_gLedRunPara^(0+128)+16),w	;volatile
 13018  174E  3FC0               	movwi [0]fsr1
 13019  174F  0859               	movf	((_gLedRunPara+1)^(0+128)+16),w	;volatile
 13020  1750  3FC1               	movwi [1]fsr1
 13021  1751  30CC               	movlw	204
 13022  1752  0086               	movwf	6
 13023  1753  085A               	movf	(_gLedRunPara^(0+128)+18),w	;volatile
 13024  1754  3FC0               	movwi [0]fsr1
 13025  1755  085B               	movf	((_gLedRunPara+1)^(0+128)+18),w	;volatile
 13026  1756  3FC1               	movwi [1]fsr1
 13027  1757  0008               	return
 13028  1758                     __end_ofPL38:	
 13029  1758                     PL44:	
 13030  1758  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 13031  1759  0020               	movlb	0	; select bank0
 13032  175A  00CD               	movwf	Util_IncValue@pSrc
 13033  175B  30E8               	movlw	232
 13034  175C  01CE               	clrf	Util_IncValue@pSrc+1
 13035  175D  0008               	return
 13036  175E                     __end_ofPL44:	
 13037  175E                     PL46:	
 13038  175E  0086               	movwf	6
 13039  175F  3023               	movlw	35
 13040  1760  0087               	movwf	7
 13041  1761  0021               	movlb	1	; select bank1
 13042  1762  0856               	movf	(_gLedRunPara^(0+128)+14),w	;volatile
 13043  1763  3FC0               	movwi [0]fsr1
 13044  1764  0857               	movf	((_gLedRunPara+1)^(0+128)+14),w	;volatile
 13045  1765  3FC1               	movwi [1]fsr1
 13046  1766  0008               	return
 13047  1767                     __end_ofPL46:	
 13048  1767                     PL58:	
 13049  1767  0085               	movwf	5
 13050  1768  3F40               	moviw [0]fsr1
 13051  1769  3F80               	movwi [0]fsr0
 13052  176A  3F41               	moviw [1]fsr1
 13053  176B  3F81               	movwi [1]fsr0
 13054  176C  0008               	return
 13055  176D                     __end_ofPL58:	
 13056  176D                     PL60:	
 13057  176D  084D               	movf	?___wmul,w
 13058  176E  0022               	movlb	2	; select bank2
 13059  176F  0744               	addwf	(??_IR_KeyAction+4)^(0+256),w
 13060  1770  00C6               	movwf	(??_IR_KeyAction+6)^(0+256)
 13061  1771  0020               	movlb	0	; select bank0
 13062  1772  084E               	movf	?___wmul+1,w
 13063  1773  0022               	movlb	2	; select bank2
 13064  1774  3D45               	addwfc	(??_IR_KeyAction+5)^(0+256),w
 13065  1775  00C7               	movwf	(??_IR_KeyAction+7)^(0+256)
 13066  1776  0840               	movf	??_IR_KeyAction^(0+256),w
 13067  1777  0746               	addwf	(??_IR_KeyAction+6)^(0+256),w
 13068  1778  00C8               	movwf	(??_IR_KeyAction+8)^(0+256)
 13069  1779  0841               	movf	(??_IR_KeyAction+1)^(0+256),w
 13070  177A  3D47               	addwfc	(??_IR_KeyAction+7)^(0+256),w
 13071  177B  00C9               	movwf	(??_IR_KeyAction+9)^(0+256)
 13072  177C  0008               	return
 13073  177D                     __end_ofPL60:	
 13074  177D                     PL62:	
 13075  177D  0A54               	incf	IR_IsValidTime@tm,w
 13076  177E  0086               	movwf	6
 13077  177F  300A               	movlw	10
 13078  1780  0187               	clrf	7
 13079  1781  00CD               	movwf	___bmul@multiplicand
 13080  1782  0854               	movf	IR_IsValidTime@tm,w
 13081  1783  0084               	movwf	4
 13082  1784  0185               	clrf	5
 13083  1785  0800               	movf	0,w
 13084  1786  0008               	return
 13085  1787                     __end_ofPL62:	
 13086  1787                     PL64:	
 13087  1787  084D               	movf	?___wmul,w
 13088  1788  0022               	movlb	2	; select bank2
 13089  1789  0742               	addwf	(??_IR_KeyAction+2)^(0+256),w
 13090  178A  00C4               	movwf	(??_IR_KeyAction+4)^(0+256)
 13091  178B  0020               	movlb	0	; select bank0
 13092  178C  084E               	movf	?___wmul+1,w
 13093  178D  0022               	movlb	2	; select bank2
 13094  178E  3D43               	addwfc	(??_IR_KeyAction+3)^(0+256),w
 13095  178F  00C5               	movwf	(??_IR_KeyAction+5)^(0+256)
 13096  1790  0020               	movlb	0	; select bank0
 13097  1791  083A               	movf	_ir_state+4,w	;volatile
 13098  1792  00CD               	movwf	___wmul@multiplier
 13099  1793  300A               	movlw	10
 13100  1794  01CE               	clrf	___wmul@multiplier+1
 13101  1795  00CF               	movwf	___wmul@multiplicand
 13102  1796  01D0               	clrf	___wmul@multiplicand+1
 13103  1797  0008               	return
 13104  1798                     __end_ofPL64:	
 13105  1798                     PL66:	
 13106  1798  084D               	movf	?___wmul,w
 13107  1799  0022               	movlb	2	; select bank2
 13108  179A  00C2               	movwf	(??_IR_KeyAction+2)^(0+256)
 13109  179B  0020               	movlb	0	; select bank0
 13110  179C  084E               	movf	?___wmul+1,w
 13111  179D  0022               	movlb	2	; select bank2
 13112  179E  00C3               	movwf	((??_IR_KeyAction+2)^(0+256)+1)
 13113  179F  0020               	movlb	0	; select bank0
 13114  17A0  0839               	movf	_ir_state+3,w	;volatile
 13115  17A1  00CD               	movwf	___wmul@multiplier
 13116  17A2  303C               	movlw	60
 13117  17A3  01CE               	clrf	___wmul@multiplier+1
 13118  17A4  00CF               	movwf	___wmul@multiplicand
 13119  17A5  01D0               	clrf	___wmul@multiplicand+1
 13120  17A6  0008               	return
 13121  17A7                     __end_ofPL66:	
 13122  17A7                     PL72:	
 13123  17A7  083B               	movf	_ir_state+5,w	;volatile
 13124  17A8  0022               	movlb	2	; select bank2
 13125  17A9  00C0               	movwf	??_IR_KeyAction^(0+256)
 13126  17AA  01C1               	clrf	(??_IR_KeyAction^(0+256)+1)
 13127  17AB  0020               	movlb	0	; select bank0
 13128  17AC  0838               	movf	_ir_state+2,w	;volatile
 13129  17AD  00CD               	movwf	___wmul@multiplier
 13130  17AE  3058               	movlw	88
 13131  17AF  01CE               	clrf	___wmul@multiplier+1
 13132  17B0  00CF               	movwf	___wmul@multiplicand
 13133  17B1  3002               	movlw	2
 13134  17B2  00D0               	movwf	___wmul@multiplicand+1
 13135  17B3  0008               	return
 13136  17B4                     __end_ofPL72:	
 13137  17B4                     PL74:	
 13138  17B4  30D6               	movlw	low (_gLedRunPara+14)
 13139  17B5  0020               	movlb	0	; select bank0
 13140  17B6  00CD               	movwf	Util_IncValue@pSrc
 13141  17B7  3400               	retlw	high (_gLedRunPara+14)
 13142  17B8                     __end_ofPL74:	
 13143  17B8                     PL76:	
 13144  17B8  307B               	movlw	123
 13145  17B9  0086               	movwf	6
 13146  17BA  3023               	movlw	35
 13147  17BB  0087               	movwf	7
 13148  17BC  0801               	movf	1,w
 13149  17BD  3987               	andlw	-121
 13150  17BE  0008               	return
 13151  17BF                     __end_ofPL76:	
 13152  17BF                     PL86:	
 13153  17BF  00C0               	movwf	??_IR_KeyAction^(0+256)
 13154  17C0  01C1               	clrf	(??_IR_KeyAction^(0+256)+1)
 13155  17C1  35C0               	lslf	??_IR_KeyAction^(0+256),f
 13156  17C2  0DC1               	rlf	(??_IR_KeyAction^(0+256)+1),f
 13157  17C3  0853               	movf	IR_KeyAction@idx^(0+256),w
 13158  17C4  0020               	movlb	0	; select bank0
 13159  17C5  00CD               	movwf	___wmul@multiplier
 13160  17C6  300A               	movlw	10
 13161  17C7  01CE               	clrf	___wmul@multiplier+1
 13162  17C8  00CF               	movwf	___wmul@multiplicand
 13163  17C9  01D0               	clrf	___wmul@multiplicand+1
 13164  17CA  0008               	return
 13165  17CB                     __end_ofPL86:	
 13166  17CB                     PL92:	
 13167  17CB  30D6               	movlw	low (_gLedRunPara+14)
 13168  17CC  0020               	movlb	0	; select bank0
 13169  17CD  00CD               	movwf	Util_DecValue@pSrc
 13170  17CE  3400               	retlw	high (_gLedRunPara+14)
 13171  17CF                     __end_ofPL92:	
 13172  17CF                     PL94:	
 13173  17CF  307B               	movlw	123
 13174  17D0  0086               	movwf	6
 13175  17D1  3023               	movlw	35
 13176  17D2  0087               	movwf	7
 13177  17D3  3087               	movlw	-121
 13178  17D4  1001               	bcf	1,0
 13179  17D5  0581               	andwf	1,f
 13180  17D6  1381               	bcf	1,7
 13181  17D7  0022               	movlb	2	; select bank2
 13182  17D8  0008               	return
 13183  17D9                     __end_ofPL94:	
 13184  17D9                     PL112:	
 13185  17D9  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 13186  17DA  0020               	movlb	0	; select bank0
 13187  17DB  00CD               	movwf	Util_DecValue@pSrc
 13188  17DC  30C8               	movlw	200
 13189  17DD  01CE               	clrf	Util_DecValue@pSrc+1
 13190  17DE  01CF               	clrf	Util_DecValue@min
 13191  17DF  01D0               	clrf	Util_DecValue@min+1
 13192  17E0  00D1               	movwf	Util_DecValue@delta
 13193  17E1  01D2               	clrf	Util_DecValue@delta+1
 13194  17E2  0008               	return
 13195  17E3                     __end_ofPL112:	
 13196  17E3                     PL118:	
 13197  17E3  0086               	movwf	6
 13198  17E4  3023               	movlw	35
 13199  17E5  0087               	movwf	7
 13200  17E6  0C01               	rrf	1,w
 13201  17E7  0022               	movlb	2	; select bank2
 13202  17E8  00C0               	movwf	??_IR_KeyAction^(0+256)
 13203  17E9  0CC0               	rrf	??_IR_KeyAction^(0+256),f
 13204  17EA  0C40               	rrf	??_IR_KeyAction^(0+256),w
 13205  17EB  390F               	andlw	15
 13206  17EC  0008               	return
 13207  17ED                     __end_ofPL118:	
 13208  17ED                     PL138:	
 13209  17ED  0086               	movwf	6
 13210  17EE  3023               	movlw	35
 13211  17EF  0087               	movwf	7
 13212  17F0  0848               	movf	(??_IR_KeyAction+8)^(0+256),w
 13213  17F1  3FC0               	movwi [0]fsr1
 13214  17F2  0849               	movf	((??_IR_KeyAction+8)^(0+256)+1),w
 13215  17F3  3FC1               	movwi [1]fsr1
 13216  17F4  0008               	return
 13217  17F5                     __end_ofPL138:	
 13218  17F5                     PL156:	
 13219  17F5  0086               	movwf	6
 13220  17F6  300A               	movlw	10
 13221  17F7  0187               	clrf	7
 13222  17F8  0020               	movlb	0	; select bank0
 13223  17F9  00CD               	movwf	___bmul@multiplicand
 13224  17FA  0008               	return
 13225  17FB                     __end_ofPL156:	
 13226  17FB                     PL164:	
 13227  17FB  0701               	addwf	1,w
 13228  17FC  00D3               	movwf	IR_IsValidTime@hour
 13229  17FD  3018               	movlw	24
 13230  17FE  0253               	subwf	IR_IsValidTime@hour,w
 13231  17FF  0008               	return
 13232  1800                     __end_ofPL164:	
 13233                           
 13234                           	psect	text54
 13235  117E                     __ptext54:	
 13236 ;; *************** function _PWM4_LoadDutyValue *****************
 13237 ;; Defined at:
 13238 ;;		line 49 in file "driver/src/pwm.c"
 13239 ;; Parameters:    Size  Location     Type
 13240 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13241 ;; Auto vars:     Size  Location     Type
 13242 ;;		None
 13243 ;; Return value:  Size  Location     Type
 13244 ;;                  1    wreg      void 
 13245 ;; Registers used:
 13246 ;;		wreg
 13247 ;; Tracked objects:
 13248 ;;		On entry : 10/0
 13249 ;;		On exit  : 1F/6
 13250 ;;		Unchanged: 0/0
 13251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13252 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13255 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13256 ;;Total ram usage:        2 bytes
 13257 ;; Hardware stack levels used:    1
 13258 ;; Hardware stack levels required when called:    7
 13259 ;; This function calls:
 13260 ;;		Nothing
 13261 ;; This function is called by:
 13262 ;;		_Led_UpdateBright
 13263 ;;		i1_Led_UpdateBright
 13264 ;;		_Led_Ramp
 13265 ;; This function uses a non-reentrant model
 13266 ;;
 13267                           
 13268                           
 13269                           ;psect for function _PWM4_LoadDutyValue
 13270  117E                     _PWM4_LoadDutyValue:	
 13271                           
 13272                           ;Skip over the trampoline to the duplicate function for level 1
 13273  117E  1C7E               	btfss	126,0
 13274  117F  2981               	goto	l5979
 13275  1180  298A               	ljmp	i1l3871
 13276  1181                     _PWM4_LoadDutyValue$intlevel0:	
 13277  1181                     l5979:	
 13278                           ;incstack = 0
 13279                           ; Regs used in _PWM4_LoadDutyValue: [wreg]
 13280                           
 13281                           
 13282                           ;pwm.c: 51: CCPR4 = dutyValue;
 13283  1181  0020               	movlb	0	; select bank0
 13284  1182  084E               	movf	PWM4_LoadDutyValue@dutyValue+1,w
 13285  1183  0026               	movlb	6	; select bank6
 13286  1184  0096               	movwf	22	;volatile
 13287  1185  0020               	movlb	0	; select bank0
 13288  1186  084D               	movf	PWM4_LoadDutyValue@dutyValue,w
 13289  1187  0026               	movlb	6	; select bank6
 13290  1188  0095               	movwf	21	;volatile
 13291  1189  0008               	return
 13292  118A                     __end_of_PWM4_LoadDutyValue:	
 13293  118A                     __ptext86:	
 13294 ;; *************** function i1_PWM4_LoadDutyValue *****************
 13295 ;; Defined at:
 13296 ;;		line 49 in file "driver/src/pwm.c"
 13297 ;; Parameters:    Size  Location     Type
 13298 ;;  dutyValue       2    0[COMMON] unsigned int 
 13299 ;; Auto vars:     Size  Location     Type
 13300 ;;		None
 13301 ;; Return value:  Size  Location     Type
 13302 ;;                  1    wreg      void 
 13303 ;; Registers used:
 13304 ;;		wreg
 13305 ;; Tracked objects:
 13306 ;;		On entry : 0/0
 13307 ;;		On exit  : 1F/6
 13308 ;;		Unchanged: 0/0
 13309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13310 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;Total ram usage:        2 bytes
 13315 ;; Hardware stack levels used:    1
 13316 ;; This function calls:
 13317 ;;		Nothing
 13318 ;; This function is called by:
 13319 ;; This function uses a non-reentrant model
 13320 ;;
 13321                           
 13322                           
 13323                           ;psect for function i1_PWM4_LoadDutyValue
 13324  118A                     i1_PWM4_LoadDutyValue:	
 13325  118A                     i1l3871:	
 13326                           ;incstack = 0
 13327                           ; Regs used in i1_PWM4_LoadDutyValue: [wreg]
 13328                           
 13329                           
 13330                           ;pwm.c: 51: CCPR4 = dutyValue;
 13331  118A  0871               	movf	i1PWM4_LoadDutyValue@dutyValue+1,w
 13332  118B  0026               	movlb	6	; select bank6
 13333  118C  0096               	movwf	22	;volatile
 13334  118D  0870               	movf	i1PWM4_LoadDutyValue@dutyValue,w
 13335  118E  0095               	movwf	21	;volatile
 13336  118F  0008               	return
 13337  1190                     __end_ofi1_PWM4_LoadDutyValue:	
 13338                           
 13339                           	psect	text55
 13340  116C                     __ptext55:	
 13341 ;; *************** function _PWM3_LoadDutyValue *****************
 13342 ;; Defined at:
 13343 ;;		line 37 in file "driver/src/pwm.c"
 13344 ;; Parameters:    Size  Location     Type
 13345 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13346 ;; Auto vars:     Size  Location     Type
 13347 ;;		None
 13348 ;; Return value:  Size  Location     Type
 13349 ;;                  1    wreg      void 
 13350 ;; Registers used:
 13351 ;;		wreg
 13352 ;; Tracked objects:
 13353 ;;		On entry : 10/0
 13354 ;;		On exit  : 1F/6
 13355 ;;		Unchanged: 0/0
 13356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13357 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13360 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13361 ;;Total ram usage:        2 bytes
 13362 ;; Hardware stack levels used:    1
 13363 ;; Hardware stack levels required when called:    7
 13364 ;; This function calls:
 13365 ;;		Nothing
 13366 ;; This function is called by:
 13367 ;;		_Led_UpdateBright
 13368 ;;		i1_Led_UpdateBright
 13369 ;;		_Led_Ramp
 13370 ;; This function uses a non-reentrant model
 13371 ;;
 13372                           
 13373                           
 13374                           ;psect for function _PWM3_LoadDutyValue
 13375  116C                     _PWM3_LoadDutyValue:	
 13376                           
 13377                           ;Skip over the trampoline to the duplicate function for level 1
 13378  116C  1C7E               	btfss	126,0
 13379  116D  296F               	goto	l5977
 13380  116E  2978               	ljmp	i1l3869
 13381  116F                     _PWM3_LoadDutyValue$intlevel0:	
 13382  116F                     l5977:	
 13383                           ;incstack = 0
 13384                           ; Regs used in _PWM3_LoadDutyValue: [wreg]
 13385                           
 13386                           
 13387                           ;pwm.c: 39: CCPR3 = dutyValue;
 13388  116F  0020               	movlb	0	; select bank0
 13389  1170  084E               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 13390  1171  0026               	movlb	6	; select bank6
 13391  1172  0092               	movwf	18	;volatile
 13392  1173  0020               	movlb	0	; select bank0
 13393  1174  084D               	movf	PWM3_LoadDutyValue@dutyValue,w
 13394  1175  0026               	movlb	6	; select bank6
 13395  1176  0091               	movwf	17	;volatile
 13396  1177  0008               	return
 13397  1178                     __end_of_PWM3_LoadDutyValue:	
 13398  1178                     __ptext87:	
 13399 ;; *************** function i1_PWM3_LoadDutyValue *****************
 13400 ;; Defined at:
 13401 ;;		line 37 in file "driver/src/pwm.c"
 13402 ;; Parameters:    Size  Location     Type
 13403 ;;  dutyValue       2    0[COMMON] unsigned int 
 13404 ;; Auto vars:     Size  Location     Type
 13405 ;;		None
 13406 ;; Return value:  Size  Location     Type
 13407 ;;                  1    wreg      void 
 13408 ;; Registers used:
 13409 ;;		wreg
 13410 ;; Tracked objects:
 13411 ;;		On entry : 0/0
 13412 ;;		On exit  : 1F/6
 13413 ;;		Unchanged: 0/0
 13414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13415 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13418 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13419 ;;Total ram usage:        2 bytes
 13420 ;; Hardware stack levels used:    1
 13421 ;; This function calls:
 13422 ;;		Nothing
 13423 ;; This function is called by:
 13424 ;; This function uses a non-reentrant model
 13425 ;;
 13426                           
 13427                           
 13428                           ;psect for function i1_PWM3_LoadDutyValue
 13429  1178                     i1_PWM3_LoadDutyValue:	
 13430  1178                     i1l3869:	
 13431                           ;incstack = 0
 13432                           ; Regs used in i1_PWM3_LoadDutyValue: [wreg]
 13433                           
 13434                           
 13435                           ;pwm.c: 39: CCPR3 = dutyValue;
 13436  1178  0871               	movf	i1PWM3_LoadDutyValue@dutyValue+1,w
 13437  1179  0026               	movlb	6	; select bank6
 13438  117A  0092               	movwf	18	;volatile
 13439  117B  0870               	movf	i1PWM3_LoadDutyValue@dutyValue,w
 13440  117C  0091               	movwf	17	;volatile
 13441  117D  0008               	return
 13442  117E                     __end_ofi1_PWM3_LoadDutyValue:	
 13443                           
 13444                           	psect	text56
 13445  115A                     __ptext56:	
 13446 ;; *************** function _PWM2_LoadDutyValue *****************
 13447 ;; Defined at:
 13448 ;;		line 25 in file "driver/src/pwm.c"
 13449 ;; Parameters:    Size  Location     Type
 13450 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13451 ;; Auto vars:     Size  Location     Type
 13452 ;;		None
 13453 ;; Return value:  Size  Location     Type
 13454 ;;                  1    wreg      void 
 13455 ;; Registers used:
 13456 ;;		wreg
 13457 ;; Tracked objects:
 13458 ;;		On entry : 10/0
 13459 ;;		On exit  : 1F/5
 13460 ;;		Unchanged: 0/0
 13461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13462 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13466 ;;Total ram usage:        2 bytes
 13467 ;; Hardware stack levels used:    1
 13468 ;; Hardware stack levels required when called:    7
 13469 ;; This function calls:
 13470 ;;		Nothing
 13471 ;; This function is called by:
 13472 ;;		_Led_UpdateBright
 13473 ;;		i1_Led_UpdateBright
 13474 ;;		_Led_Ramp
 13475 ;; This function uses a non-reentrant model
 13476 ;;
 13477                           
 13478                           
 13479                           ;psect for function _PWM2_LoadDutyValue
 13480  115A                     _PWM2_LoadDutyValue:	
 13481                           
 13482                           ;Skip over the trampoline to the duplicate function for level 1
 13483  115A  1C7E               	btfss	126,0
 13484  115B  295D               	goto	l5975
 13485  115C  2966               	ljmp	i1l3867
 13486  115D                     _PWM2_LoadDutyValue$intlevel0:	
 13487  115D                     l5975:	
 13488                           ;incstack = 0
 13489                           ; Regs used in _PWM2_LoadDutyValue: [wreg]
 13490                           
 13491                           
 13492                           ;pwm.c: 27: CCPR2 = dutyValue;
 13493  115D  0020               	movlb	0	; select bank0
 13494  115E  084E               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 13495  115F  0025               	movlb	5	; select bank5
 13496  1160  0096               	movwf	22	;volatile
 13497  1161  0020               	movlb	0	; select bank0
 13498  1162  084D               	movf	PWM2_LoadDutyValue@dutyValue,w
 13499  1163  0025               	movlb	5	; select bank5
 13500  1164  0095               	movwf	21	;volatile
 13501  1165  0008               	return
 13502  1166                     __end_of_PWM2_LoadDutyValue:	
 13503  1166                     __ptext88:	
 13504 ;; *************** function i1_PWM2_LoadDutyValue *****************
 13505 ;; Defined at:
 13506 ;;		line 25 in file "driver/src/pwm.c"
 13507 ;; Parameters:    Size  Location     Type
 13508 ;;  dutyValue       2    0[COMMON] unsigned int 
 13509 ;; Auto vars:     Size  Location     Type
 13510 ;;		None
 13511 ;; Return value:  Size  Location     Type
 13512 ;;                  1    wreg      void 
 13513 ;; Registers used:
 13514 ;;		wreg
 13515 ;; Tracked objects:
 13516 ;;		On entry : 0/0
 13517 ;;		On exit  : 1F/5
 13518 ;;		Unchanged: 0/0
 13519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13520 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13523 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13524 ;;Total ram usage:        2 bytes
 13525 ;; Hardware stack levels used:    1
 13526 ;; This function calls:
 13527 ;;		Nothing
 13528 ;; This function is called by:
 13529 ;; This function uses a non-reentrant model
 13530 ;;
 13531                           
 13532                           
 13533                           ;psect for function i1_PWM2_LoadDutyValue
 13534  1166                     i1_PWM2_LoadDutyValue:	
 13535  1166                     i1l3867:	
 13536                           ;incstack = 0
 13537                           ; Regs used in i1_PWM2_LoadDutyValue: [wreg]
 13538                           
 13539                           
 13540                           ;pwm.c: 27: CCPR2 = dutyValue;
 13541  1166  0871               	movf	i1PWM2_LoadDutyValue@dutyValue+1,w
 13542  1167  0025               	movlb	5	; select bank5
 13543  1168  0096               	movwf	22	;volatile
 13544  1169  0870               	movf	i1PWM2_LoadDutyValue@dutyValue,w
 13545  116A  0095               	movwf	21	;volatile
 13546  116B  0008               	return
 13547  116C                     __end_ofi1_PWM2_LoadDutyValue:	
 13548                           
 13549                           	psect	text57
 13550  1148                     __ptext57:	
 13551 ;; *************** function _PWM1_LoadDutyValue *****************
 13552 ;; Defined at:
 13553 ;;		line 13 in file "driver/src/pwm.c"
 13554 ;; Parameters:    Size  Location     Type
 13555 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13556 ;; Auto vars:     Size  Location     Type
 13557 ;;		None
 13558 ;; Return value:  Size  Location     Type
 13559 ;;                  1    wreg      void 
 13560 ;; Registers used:
 13561 ;;		wreg
 13562 ;; Tracked objects:
 13563 ;;		On entry : 10/0
 13564 ;;		On exit  : 1F/5
 13565 ;;		Unchanged: 0/0
 13566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13567 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13570 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13571 ;;Total ram usage:        2 bytes
 13572 ;; Hardware stack levels used:    1
 13573 ;; Hardware stack levels required when called:    7
 13574 ;; This function calls:
 13575 ;;		Nothing
 13576 ;; This function is called by:
 13577 ;;		_Led_UpdateBright
 13578 ;;		i1_Led_UpdateBright
 13579 ;;		_Led_Ramp
 13580 ;; This function uses a non-reentrant model
 13581 ;;
 13582                           
 13583                           
 13584                           ;psect for function _PWM1_LoadDutyValue
 13585  1148                     _PWM1_LoadDutyValue:	
 13586                           
 13587                           ;Skip over the trampoline to the duplicate function for level 1
 13588  1148  1C7E               	btfss	126,0
 13589  1149  294B               	goto	l5973
 13590  114A  2954               	ljmp	i1l3865
 13591  114B                     _PWM1_LoadDutyValue$intlevel0:	
 13592  114B                     l5973:	
 13593                           ;incstack = 0
 13594                           ; Regs used in _PWM1_LoadDutyValue: [wreg]
 13595                           
 13596                           
 13597                           ;pwm.c: 15: CCPR1 = dutyValue;
 13598  114B  0020               	movlb	0	; select bank0
 13599  114C  084E               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 13600  114D  0025               	movlb	5	; select bank5
 13601  114E  0092               	movwf	18	;volatile
 13602  114F  0020               	movlb	0	; select bank0
 13603  1150  084D               	movf	PWM1_LoadDutyValue@dutyValue,w
 13604  1151  0025               	movlb	5	; select bank5
 13605  1152  0091               	movwf	17	;volatile
 13606  1153  0008               	return
 13607  1154                     __end_of_PWM1_LoadDutyValue:	
 13608  1154                     __ptext89:	
 13609 ;; *************** function i1_PWM1_LoadDutyValue *****************
 13610 ;; Defined at:
 13611 ;;		line 13 in file "driver/src/pwm.c"
 13612 ;; Parameters:    Size  Location     Type
 13613 ;;  dutyValue       2    0[COMMON] unsigned int 
 13614 ;; Auto vars:     Size  Location     Type
 13615 ;;		None
 13616 ;; Return value:  Size  Location     Type
 13617 ;;                  1    wreg      void 
 13618 ;; Registers used:
 13619 ;;		wreg
 13620 ;; Tracked objects:
 13621 ;;		On entry : 0/0
 13622 ;;		On exit  : 1F/5
 13623 ;;		Unchanged: 0/0
 13624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13625 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13628 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13629 ;;Total ram usage:        2 bytes
 13630 ;; Hardware stack levels used:    1
 13631 ;; This function calls:
 13632 ;;		Nothing
 13633 ;; This function is called by:
 13634 ;; This function uses a non-reentrant model
 13635 ;;
 13636                           
 13637                           
 13638                           ;psect for function i1_PWM1_LoadDutyValue
 13639  1154                     i1_PWM1_LoadDutyValue:	
 13640  1154                     i1l3865:	
 13641                           ;incstack = 0
 13642                           ; Regs used in i1_PWM1_LoadDutyValue: [wreg]
 13643                           
 13644                           
 13645                           ;pwm.c: 15: CCPR1 = dutyValue;
 13646  1154  0871               	movf	i1PWM1_LoadDutyValue@dutyValue+1,w
 13647  1155  0025               	movlb	5	; select bank5
 13648  1156  0092               	movwf	18	;volatile
 13649  1157  0870               	movf	i1PWM1_LoadDutyValue@dutyValue,w
 13650  1158  0091               	movwf	17	;volatile
 13651  1159  0008               	return
 13652  115A                     __end_ofi1_PWM1_LoadDutyValue:	
 13653                           
 13654                           	psect	text58
 13655  0807                     __ptext58:	
 13656 ;; *************** function _PWM5_LoadDutyValue *****************
 13657 ;; Defined at:
 13658 ;;		line 61 in file "driver/src/pwm.c"
 13659 ;; Parameters:    Size  Location     Type
 13660 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13661 ;; Auto vars:     Size  Location     Type
 13662 ;;		None
 13663 ;; Return value:  Size  Location     Type
 13664 ;;                  1    wreg      void 
 13665 ;; Registers used:
 13666 ;;		wreg
 13667 ;; Tracked objects:
 13668 ;;		On entry : 10/0
 13669 ;;		On exit  : 1F/C
 13670 ;;		Unchanged: 0/0
 13671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13672 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13676 ;;Total ram usage:        4 bytes
 13677 ;; Hardware stack levels used:    1
 13678 ;; Hardware stack levels required when called:    7
 13679 ;; This function calls:
 13680 ;;		Nothing
 13681 ;; This function is called by:
 13682 ;;		_Led_UpdateBright
 13683 ;;		i1_Led_UpdateBright
 13684 ;;		_Led_Ramp
 13685 ;; This function uses a non-reentrant model
 13686 ;;
 13687                           
 13688                           
 13689                           ;psect for function _PWM5_LoadDutyValue
 13690  0807                     _PWM5_LoadDutyValue:	
 13691                           
 13692                           ;Skip over the trampoline to the duplicate function for level 1
 13693  0807  1C7E               	btfss	126,0
 13694  0808  280A               	goto	l5981
 13695  0809  281C               	ljmp	i1l3873
 13696  080A                     _PWM5_LoadDutyValue$intlevel0:	
 13697  080A                     l5981:	
 13698                           ;incstack = 0
 13699                           ; Regs used in _PWM5_LoadDutyValue: [wreg]
 13700                           
 13701                           
 13702                           ;pwm.c: 63: PWM5DC = dutyValue << 6;
 13703  080A  0020               	movlb	0	; select bank0
 13704  080B  084E               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 13705  080C  00D0               	movwf	??_PWM5_LoadDutyValue+1
 13706  080D  084D               	movf	PWM5_LoadDutyValue@dutyValue,w
 13707  080E  00CF               	movwf	??_PWM5_LoadDutyValue
 13708  080F  3006               	movlw	6
 13709  0810                     u5135:	
 13710  0810  35CF               	lslf	??_PWM5_LoadDutyValue,f
 13711  0811  0DD0               	rlf	??_PWM5_LoadDutyValue+1,f
 13712  0812  0B89               	decfsz	9,f
 13713  0813  2810               	goto	u5135
 13714  0814  084F               	movf	??_PWM5_LoadDutyValue,w
 13715  0815  002C               	movlb	12	; select bank12
 13716  0816  0097               	movwf	23	;volatile
 13717  0817  0020               	movlb	0	; select bank0
 13718  0818  0850               	movf	??_PWM5_LoadDutyValue+1,w
 13719  0819  002C               	movlb	12	; select bank12
 13720  081A  0098               	movwf	24	;volatile
 13721  081B  0008               	return
 13722  081C                     __end_of_PWM5_LoadDutyValue:	
 13723  081C                     __ptext90:	
 13724 ;; *************** function i1_PWM5_LoadDutyValue *****************
 13725 ;; Defined at:
 13726 ;;		line 61 in file "driver/src/pwm.c"
 13727 ;; Parameters:    Size  Location     Type
 13728 ;;  dutyValue       2    0[COMMON] unsigned int 
 13729 ;; Auto vars:     Size  Location     Type
 13730 ;;		None
 13731 ;; Return value:  Size  Location     Type
 13732 ;;                  1    wreg      void 
 13733 ;; Registers used:
 13734 ;;		wreg
 13735 ;; Tracked objects:
 13736 ;;		On entry : 0/0
 13737 ;;		On exit  : 1F/C
 13738 ;;		Unchanged: 0/0
 13739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13740 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13742 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13743 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13744 ;;Total ram usage:        4 bytes
 13745 ;; Hardware stack levels used:    1
 13746 ;; This function calls:
 13747 ;;		Nothing
 13748 ;; This function is called by:
 13749 ;; This function uses a non-reentrant model
 13750 ;;
 13751                           
 13752                           
 13753                           ;psect for function i1_PWM5_LoadDutyValue
 13754  081C                     i1_PWM5_LoadDutyValue:	
 13755  081C                     i1l3873:	
 13756                           ;incstack = 0
 13757                           ; Regs used in i1_PWM5_LoadDutyValue: [wreg]
 13758                           
 13759                           
 13760                           ;pwm.c: 63: PWM5DC = dutyValue << 6;
 13761  081C  0871               	movf	i1PWM5_LoadDutyValue@dutyValue+1,w
 13762  081D  00F3               	movwf	??i1_PWM5_LoadDutyValue+1
 13763  081E  0870               	movf	i1PWM5_LoadDutyValue@dutyValue,w
 13764  081F  00F2               	movwf	??i1_PWM5_LoadDutyValue
 13765  0820  3006               	movlw	6
 13766  0821                     u258_25:	
 13767  0821  35F2               	lslf	??i1_PWM5_LoadDutyValue,f
 13768  0822  0DF3               	rlf	??i1_PWM5_LoadDutyValue+1,f
 13769  0823  0B89               	decfsz	9,f
 13770  0824  2821               	goto	u258_25
 13771  0825  0872               	movf	??i1_PWM5_LoadDutyValue,w
 13772  0826  002C               	movlb	12	; select bank12
 13773  0827  0097               	movwf	23	;volatile
 13774  0828  0873               	movf	??i1_PWM5_LoadDutyValue+1,w
 13775  0829  0098               	movwf	24	;volatile
 13776  082A  0008               	return
 13777  082B                     __end_ofi1_PWM5_LoadDutyValue:	
 13778                           
 13779                           	psect	intentry
 13780  0004                     __pintentry:	
 13781 ;; *************** function _ISR *****************
 13782 ;; Defined at:
 13783 ;;		line 75 in file "user/src/main.c"
 13784 ;; Parameters:    Size  Location     Type
 13785 ;;		None
 13786 ;; Auto vars:     Size  Location     Type
 13787 ;;		None
 13788 ;; Return value:  Size  Location     Type
 13789 ;;                  1    wreg      void 
 13790 ;; Registers used:
 13791 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13792 ;; Tracked objects:
 13793 ;;		On entry : 0/0
 13794 ;;		On exit  : 0/0
 13795 ;;		Unchanged: 0/0
 13796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;Total ram usage:        0 bytes
 13802 ;; Hardware stack levels used:    1
 13803 ;; Hardware stack levels required when called:    6
 13804 ;; This function calls:
 13805 ;;		_EUSART_Transmit_ISR
 13806 ;;		_TMR0_ISR
 13807 ;;		_TMR1_GATE_ISR
 13808 ;;		_TMR2_ISR
 13809 ;;		_TMR4_ISR
 13810 ;; This function is called by:
 13811 ;;		Interrupt level 1
 13812 ;; This function uses a non-reentrant model
 13813 ;;
 13814                           
 13815  0004                     _ISR:	
 13816                           
 13817                           ;incstack = 0
 13818  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13819                           
 13820                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13821  0005  3180               	pagesel	$
 13822                           
 13823                           ;main.c: 76: if (PIR1bits.TMR1GIF) {
 13824  0006  0020               	movlb	0	; select bank0
 13825  0007  1F91               	btfss	17,7	;volatile
 13826  0008  280D               	goto	i1l519
 13827                           
 13828                           ;main.c: 77: TMR1_GATE_ISR();
 13829  0009  3191  210C  3180   	fcall	_TMR1_GATE_ISR
 13830                           
 13831                           ;main.c: 78: } else if (PIE1bits.TMR2IE && PIR1bits.TMR2IF) {
 13832  000C  282C               	goto	i1l528
 13833  000D                     i1l519:	
 13834  000D  0021               	movlb	1	; select bank1
 13835  000E  1C91               	btfss	17,1	;volatile
 13836  000F  2817               	goto	i1l521
 13837  0010  0020               	movlb	0	; select bank0
 13838  0011  1C91               	btfss	17,1	;volatile
 13839  0012  2817               	goto	i1l521
 13840                           
 13841                           ;main.c: 79: TMR2_ISR();
 13842  0013  3191  2118  3180   	fcall	_TMR2_ISR
 13843                           
 13844                           ;main.c: 80: } else if (PIR0bits.TMR0IF) {
 13845  0016  282C               	goto	i1l528
 13846  0017                     i1l521:	
 13847  0017  0020               	movlb	0	; select bank0
 13848  0018  1E90               	btfss	16,5	;volatile
 13849  0019  281E               	goto	i1l523
 13850                           
 13851                           ;main.c: 81: TMR0_ISR();
 13852  001A  3191  2100  3180   	fcall	_TMR0_ISR
 13853                           
 13854                           ;main.c: 82: } else if (PIR2bits.TMR4IF) {
 13855  001D  282C               	goto	i1l528
 13856  001E                     i1l523:	
 13857  001E  1C92               	btfss	18,1	;volatile
 13858  001F  2824               	goto	i1l525
 13859                           
 13860                           ;main.c: 83: TMR4_ISR();
 13861  0020  3191  2124  3180   	fcall	_TMR4_ISR
 13862                           
 13863                           ;main.c: 84: } else if (PIE1bits.TXIE && PIR1bits.TXIF) {
 13864  0023  282C               	goto	i1l528
 13865  0024                     i1l525:	
 13866  0024  0021               	movlb	1	; select bank1
 13867  0025  1E11               	btfss	17,4	;volatile
 13868  0026  282C               	goto	i1l528
 13869  0027  0020               	movlb	0	; select bank0
 13870  0028  1E11               	btfss	17,4	;volatile
 13871  0029  282C               	goto	i1l528
 13872                           
 13873                           ;main.c: 85: EUSART_Transmit_ISR();
 13874  002A  3191  21A6         	fcall	_EUSART_Transmit_ISR
 13875  002C                     i1l528:	
 13876  002C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13877  002D  0009               	retfie
 13878  002E                     __end_of_ISR:	
 13879                           
 13880                           	psect	text70
 13881  1124                     __ptext70:	
 13882 ;; *************** function _TMR4_ISR *****************
 13883 ;; Defined at:
 13884 ;;		line 27 in file "driver/src/tmr4.c"
 13885 ;; Parameters:    Size  Location     Type
 13886 ;;		None
 13887 ;; Auto vars:     Size  Location     Type
 13888 ;;		None
 13889 ;; Return value:  Size  Location     Type
 13890 ;;                  1    wreg      void 
 13891 ;; Registers used:
 13892 ;;		wreg, status,2, status,0, pclath, cstack
 13893 ;; Tracked objects:
 13894 ;;		On entry : 1F/0
 13895 ;;		On exit  : 0/0
 13896 ;;		Unchanged: 0/0
 13897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13902 ;;Total ram usage:        0 bytes
 13903 ;; Hardware stack levels used:    1
 13904 ;; Hardware stack levels required when called:    2
 13905 ;; This function calls:
 13906 ;;		Absolute function
 13907 ;;		_Led_Notice
 13908 ;; This function is called by:
 13909 ;;		_ISR
 13910 ;; This function uses a non-reentrant model
 13911 ;;
 13912                           
 13913                           
 13914                           ;psect for function _TMR4_ISR
 13915  1124                     _TMR4_ISR:	
 13916                           
 13917                           ;tmr4.c: 29: PIR2bits.TMR4IF = 0;
 13918                           
 13919                           ;incstack = 0
 13920                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 13921  1124  1092               	bcf	18,1	;volatile
 13922                           
 13923                           ;tmr4.c: 31: if ( tmr4_isr_handler )
 13924  1125  0021               	movlb	1	; select bank1
 13925  1126  0862               	movf	_tmr4_isr_handler^(0+128),w
 13926  1127  0463               	iorwf	(_tmr4_isr_handler+1)^(0+128),w
 13927  1128  1903               	btfsc	3,2
 13928  1129  0008               	return
 13929                           
 13930                           ;tmr4.c: 32: {
 13931                           ;tmr4.c: 33: tmr4_isr_handler ( );
 13932  112A  0863               	movf	(_tmr4_isr_handler+1)^(0+128),w
 13933  112B  008A               	movwf	10
 13934  112C  0862               	movf	_tmr4_isr_handler^(0+128),w
 13935  112D  000A               	callw
 13936  112E  3191               	pagesel	$
 13937  112F  0008               	return
 13938  1130                     __end_of_TMR4_ISR:	
 13939                           
 13940                           	psect	text71
 13941  079A                     __ptext71:	
 13942 ;; *************** function _Led_Notice *****************
 13943 ;; Defined at:
 13944 ;;		line 424 in file "user/src/led.c"
 13945 ;; Parameters:    Size  Location     Type
 13946 ;;		None
 13947 ;; Auto vars:     Size  Location     Type
 13948 ;;		None
 13949 ;; Return value:  Size  Location     Type
 13950 ;;                  1    wreg      void 
 13951 ;; Registers used:
 13952 ;;		wreg, status,2, status,0, pclath, cstack
 13953 ;; Tracked objects:
 13954 ;;		On entry : 1F/1
 13955 ;;		On exit  : 1E/0
 13956 ;;		Unchanged: 0/0
 13957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13960 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13961 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13962 ;;Total ram usage:        1 bytes
 13963 ;; Hardware stack levels used:    1
 13964 ;; Hardware stack levels required when called:    1
 13965 ;; This function calls:
 13966 ;;		_Led_TurnOffDirect
 13967 ;;		_Led_TurnOnDirect
 13968 ;;		_TMR4_StopTimer
 13969 ;; This function is called by:
 13970 ;;		_Interrupt_Initialize
 13971 ;;		_TMR4_ISR
 13972 ;; This function uses a non-reentrant model
 13973 ;;
 13974                           
 13975                           
 13976                           ;psect for function _Led_Notice
 13977  079A                     _Led_Notice:	
 13978                           
 13979                           ;led.c: 425: static uint8_t cnt = 0;
 13980                           ;led.c: 426: if (gLedRunPara.mNoticeCount) {
 13981                           
 13982                           ;incstack = 0
 13983                           ; Regs used in _Led_Notice: [wreg+status,2+status,0+pclath+cstack]
 13984  079A  0C5C               	rrf	(_gLedRunPara^(0+128)+20),w	;volatile
 13985  079B  0C89               	rrf	9,f
 13986  079C  393F               	andlw	63
 13987  079D  1903               	skipnz
 13988  079E  2FBD               	goto	i1l4991
 13989                           
 13990                           ;led.c: 427: cnt++;
 13991  079F  0020               	movlb	0	; select bank0
 13992  07A0  0AB3               	incf	Led_Notice@cnt,f
 13993                           
 13994                           ;led.c: 428: if ((cnt & 0x07) == 0) {
 13995  07A1  0833               	movf	Led_Notice@cnt,w
 13996  07A2  3907               	andlw	7
 13997  07A3  1D03               	btfss	3,2
 13998  07A4  0008               	return
 13999                           
 14000                           ;led.c: 429: if (gLedRunPara.mNoticeStatus) {
 14001  07A5  0021               	movlb	1	; select bank1
 14002  07A6  1CDC               	btfss	(_gLedRunPara^(0+128)+20),1	;volatile
 14003  07A7  2FB9               	goto	i1l4987
 14004                           
 14005                           ;led.c: 430: Led_TurnOnDirect();
 14006  07A8  27CA               	fcall	_Led_TurnOnDirect
 14007                           
 14008                           ;led.c: 431: gLedRunPara.mNoticeCount--;
 14009  07A9  0021               	movlb	1	; select bank1
 14010  07AA  0C5C               	rrf	(_gLedRunPara^(0+128)+20),w	;volatile
 14011  07AB  00F0               	movwf	??_Led_Notice
 14012  07AC  0C70               	rrf	??_Led_Notice,w
 14013  07AD  393F               	andlw	63
 14014  07AE  00F0               	movwf	??_Led_Notice
 14015  07AF  03F0               	decf	??_Led_Notice,f
 14016  07B0  0DF0               	rlf	??_Led_Notice,f
 14017  07B1  0DF0               	rlf	??_Led_Notice,f
 14018  07B2  085C               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
 14019  07B3  0670               	xorwf	??_Led_Notice,w
 14020  07B4  3903               	andlw	-253
 14021  07B5  0670               	xorwf	??_Led_Notice,w
 14022  07B6  00DC               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
 14023                           
 14024                           ;led.c: 432: gLedRunPara.mNoticeStatus = 0;
 14025  07B7  10DC               	bcf	(_gLedRunPara^(0+128)+20),1	;volatile
 14026                           
 14027                           ;led.c: 433: } else {
 14028  07B8  0008               	return
 14029  07B9                     i1l4987:	
 14030                           
 14031                           ;led.c: 434: Led_TurnOffDirect();
 14032  07B9  27C1               	fcall	_Led_TurnOffDirect
 14033                           
 14034                           ;led.c: 435: gLedRunPara.mNoticeStatus = 1;
 14035  07BA  0021               	movlb	1	; select bank1
 14036  07BB  14DC               	bsf	(_gLedRunPara^(0+128)+20),1	;volatile
 14037  07BC  0008               	return
 14038  07BD                     i1l4991:	
 14039                           
 14040                           ;led.c: 439: TMR4_StopTimer();
 14041  07BD  27D3               	fcall	_TMR4_StopTimer
 14042                           
 14043                           ;led.c: 440: cnt = 0;
 14044  07BE  0020               	movlb	0	; select bank0
 14045  07BF  01B3               	clrf	Led_Notice@cnt
 14046  07C0  0008               	return
 14047  07C1                     __end_of_Led_Notice:	
 14048  07C1                     __ptext74:	
 14049 ;; *************** function _Led_TurnOffDirect *****************
 14050 ;; Defined at:
 14051 ;;		line 197 in file "user/src/led.c"
 14052 ;; Parameters:    Size  Location     Type
 14053 ;;		None
 14054 ;; Auto vars:     Size  Location     Type
 14055 ;;		None
 14056 ;; Return value:  Size  Location     Type
 14057 ;;                  1    wreg      void 
 14058 ;; Registers used:
 14059 ;;		None
 14060 ;; Tracked objects:
 14061 ;;		On entry : 1F/1
 14062 ;;		On exit  : 1F/C
 14063 ;;		Unchanged: 0/0
 14064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14069 ;;Total ram usage:        0 bytes
 14070 ;; Hardware stack levels used:    1
 14071 ;; This function calls:
 14072 ;;		Nothing
 14073 ;; This function is called by:
 14074 ;;		_Led_Notice
 14075 ;; This function uses a non-reentrant model
 14076 ;;
 14077                           
 14078                           
 14079                           ;psect for function _Led_TurnOffDirect
 14080  07C1                     _Led_TurnOffDirect:	
 14081                           
 14082                           ;led.c: 198: CCP1CON &= 0x7F;
 14083                           
 14084                           ;incstack = 0
 14085                           ; Regs used in _Led_TurnOffDirect: []
 14086  07C1  0025               	movlb	5	; select bank5
 14087  07C2  1393               	bcf	19,7	;volatile
 14088                           
 14089                           ;led.c: 199: CCP2CON &= 0x7F;
 14090  07C3  1397               	bcf	23,7	;volatile
 14091                           
 14092                           ;led.c: 200: CCP3CON &= 0x7F;
 14093  07C4  0026               	movlb	6	; select bank6
 14094  07C5  1393               	bcf	19,7	;volatile
 14095                           
 14096                           ;led.c: 201: CCP4CON &= 0x7F;
 14097  07C6  1397               	bcf	23,7	;volatile
 14098                           
 14099                           ;led.c: 202: PWM5CON &= 0x7F;
 14100  07C7  002C               	movlb	12	; select bank12
 14101  07C8  1399               	bcf	25,7	;volatile
 14102  07C9  0008               	return
 14103  07CA                     __end_of_Led_TurnOffDirect:	
 14104  07CA                     __ptext73:	
 14105 ;; *************** function _Led_TurnOnDirect *****************
 14106 ;; Defined at:
 14107 ;;		line 189 in file "user/src/led.c"
 14108 ;; Parameters:    Size  Location     Type
 14109 ;;		None
 14110 ;; Auto vars:     Size  Location     Type
 14111 ;;		None
 14112 ;; Return value:  Size  Location     Type
 14113 ;;                  1    wreg      void 
 14114 ;; Registers used:
 14115 ;;		None
 14116 ;; Tracked objects:
 14117 ;;		On entry : 1F/1
 14118 ;;		On exit  : 1F/C
 14119 ;;		Unchanged: 0/0
 14120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14125 ;;Total ram usage:        0 bytes
 14126 ;; Hardware stack levels used:    1
 14127 ;; This function calls:
 14128 ;;		Nothing
 14129 ;; This function is called by:
 14130 ;;		_Led_Notice
 14131 ;; This function uses a non-reentrant model
 14132 ;;
 14133                           
 14134                           
 14135                           ;psect for function _Led_TurnOnDirect
 14136  07CA                     _Led_TurnOnDirect:	
 14137                           
 14138                           ;led.c: 190: CCP1CON |= 0x80;
 14139                           
 14140                           ;incstack = 0
 14141                           ; Regs used in _Led_TurnOnDirect: []
 14142  07CA  0025               	movlb	5	; select bank5
 14143  07CB  1793               	bsf	19,7	;volatile
 14144                           
 14145                           ;led.c: 191: CCP2CON |= 0x80;
 14146  07CC  1797               	bsf	23,7	;volatile
 14147                           
 14148                           ;led.c: 192: CCP3CON |= 0x80;
 14149  07CD  0026               	movlb	6	; select bank6
 14150  07CE  1793               	bsf	19,7	;volatile
 14151                           
 14152                           ;led.c: 193: CCP4CON |= 0x80;
 14153  07CF  1797               	bsf	23,7	;volatile
 14154                           
 14155                           ;led.c: 194: PWM5CON |= 0x80;
 14156  07D0  002C               	movlb	12	; select bank12
 14157  07D1  1799               	bsf	25,7	;volatile
 14158  07D2  0008               	return
 14159  07D3                     __end_of_Led_TurnOnDirect:	
 14160  07D3                     __ptext72:	
 14161 ;; *************** function _TMR4_StopTimer *****************
 14162 ;; Defined at:
 14163 ;;		line 22 in file "driver/src/tmr4.c"
 14164 ;; Parameters:    Size  Location     Type
 14165 ;;		None
 14166 ;; Auto vars:     Size  Location     Type
 14167 ;;		None
 14168 ;; Return value:  Size  Location     Type
 14169 ;;                  1    wreg      void 
 14170 ;; Registers used:
 14171 ;;		None
 14172 ;; Tracked objects:
 14173 ;;		On entry : 1F/1
 14174 ;;		On exit  : 1F/8
 14175 ;;		Unchanged: 0/0
 14176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14181 ;;Total ram usage:        0 bytes
 14182 ;; Hardware stack levels used:    1
 14183 ;; This function calls:
 14184 ;;		Nothing
 14185 ;; This function is called by:
 14186 ;;		_Led_Notice
 14187 ;; This function uses a non-reentrant model
 14188 ;;
 14189                           
 14190                           
 14191                           ;psect for function _TMR4_StopTimer
 14192  07D3                     _TMR4_StopTimer:	
 14193                           
 14194                           ;tmr4.c: 24: T4CONbits.TMR4ON = 0;
 14195                           
 14196                           ;incstack = 0
 14197                           ; Regs used in _TMR4_StopTimer: []
 14198  07D3  0028               	movlb	8	; select bank8
 14199  07D4  1117               	bcf	23,2	;volatile
 14200  07D5  0008               	return
 14201  07D6                     __end_of_TMR4_StopTimer:	
 14202                           
 14203                           	psect	text75
 14204  1118                     __ptext75:	
 14205 ;; *************** function _TMR2_ISR *****************
 14206 ;; Defined at:
 14207 ;;		line 26 in file "driver/src/tmr2.c"
 14208 ;; Parameters:    Size  Location     Type
 14209 ;;		None
 14210 ;; Auto vars:     Size  Location     Type
 14211 ;;		None
 14212 ;; Return value:  Size  Location     Type
 14213 ;;                  1    wreg      void 
 14214 ;; Registers used:
 14215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14216 ;; Tracked objects:
 14217 ;;		On entry : 1F/0
 14218 ;;		On exit  : 0/0
 14219 ;;		Unchanged: 0/0
 14220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14225 ;;Total ram usage:        0 bytes
 14226 ;; Hardware stack levels used:    1
 14227 ;; Hardware stack levels required when called:    5
 14228 ;; This function calls:
 14229 ;;		Absolute function
 14230 ;;		_Led_Run
 14231 ;; This function is called by:
 14232 ;;		_ISR
 14233 ;; This function uses a non-reentrant model
 14234 ;;
 14235                           
 14236                           
 14237                           ;psect for function _TMR2_ISR
 14238  1118                     _TMR2_ISR:	
 14239                           
 14240                           ;tmr2.c: 28: PIR1bits.TMR2IF = 0;
 14241                           
 14242                           ;incstack = 0
 14243                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14244  1118  1091               	bcf	17,1	;volatile
 14245                           
 14246                           ;tmr2.c: 29: if ( tmr2_isr_handler )
 14247  1119  0021               	movlb	1	; select bank1
 14248  111A  0864               	movf	_tmr2_isr_handler^(0+128),w
 14249  111B  0465               	iorwf	(_tmr2_isr_handler+1)^(0+128),w
 14250  111C  1903               	btfsc	3,2
 14251  111D  0008               	return
 14252                           
 14253                           ;tmr2.c: 30: {
 14254                           ;tmr2.c: 31: tmr2_isr_handler ( );
 14255  111E  0865               	movf	(_tmr2_isr_handler+1)^(0+128),w
 14256  111F  008A               	movwf	10
 14257  1120  0864               	movf	_tmr2_isr_handler^(0+128),w
 14258  1121  000A               	callw
 14259  1122  3191               	pagesel	$
 14260  1123  0008               	return
 14261  1124                     __end_of_TMR2_ISR:	
 14262                           
 14263                           	psect	text76
 14264  0030                     __ptext76:	
 14265 ;; *************** function _Led_Run *****************
 14266 ;; Defined at:
 14267 ;;		line 564 in file "user/src/led.c"
 14268 ;; Parameters:    Size  Location     Type
 14269 ;;		None
 14270 ;; Auto vars:     Size  Location     Type
 14271 ;;		None
 14272 ;; Return value:  Size  Location     Type
 14273 ;;                  1    wreg      void 
 14274 ;; Registers used:
 14275 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14276 ;; Tracked objects:
 14277 ;;		On entry : 1F/1
 14278 ;;		On exit  : 10/0
 14279 ;;		Unchanged: 0/0
 14280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14283 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14284 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14285 ;;Total ram usage:        1 bytes
 14286 ;; Hardware stack levels used:    1
 14287 ;; Hardware stack levels required when called:    4
 14288 ;; This function calls:
 14289 ;;		_IR_ScanLongPress
 14290 ;;		_Led_Ramp
 14291 ;;		_Led_RunMusic
 14292 ;; This function is called by:
 14293 ;;		_Interrupt_Initialize
 14294 ;;		_TMR2_ISR
 14295 ;; This function uses a non-reentrant model
 14296 ;;
 14297                           
 14298                           
 14299                           ;psect for function _Led_Run
 14300  0030                     _Led_Run:	
 14301                           
 14302                           ;led.c: 565: static uint8_t cnt = 0;
 14303                           ;led.c: 566: cnt++;
 14304                           
 14305                           ;incstack = 0
 14306                           ; Regs used in _Led_Run: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14307  0030  0020               	movlb	0	; select bank0
 14308  0031  0AB2               	incf	Led_Run@cnt,f
 14309                           
 14310                           ;led.c: 567: if ((cnt & 0x03) == 0x00) {
 14311  0032  0832               	movf	Led_Run@cnt,w
 14312  0033  3903               	andlw	3
 14313  0034  1D03               	btfss	3,2
 14314  0035  2838               	goto	i1l6495
 14315                           
 14316                           ;led.c: 568: IR_ScanLongPress();
 14317  0036  2290  3180         	fcall	_IR_ScanLongPress
 14318  0038                     i1l6495:	
 14319                           
 14320                           ;led.c: 569: }
 14321                           ;led.c: 570: if ((ir_state.mSet == 4) || (ir_state.mSet == 5)) {
 14322  0038  0020               	movlb	0	; select bank0
 14323  0039  2786  3180         	fcall	PL160	;call to abstracted procedure
 14324  003B  1903               	skipnz
 14325  003C  2841               	goto	i1l6499
 14326  003D  2781  3180         	fcall	PL158	;call to abstracted procedure
 14327  003F  1D03               	skipz
 14328  0040  2842               	goto	i1l6501
 14329  0041                     i1l6499:	
 14330                           
 14331                           ;led.c: 571: Led_Ramp();
 14332  0041  2869               	ljmp	i1l6333
 14333  0042                     i1l6501:	
 14334                           ;led.c: 572: } else if (!gLedPara.mAuto) {
 14335                           
 14336  0042  277C  3180         	fcall	PL110	;call to abstracted procedure
 14337  0044  1801               	btfsc	1,0
 14338  0045  0008               	return
 14339                           
 14340                           ;led.c: 573: if (gLedPara.mOn && gLedPara.mMsc) {
 14341  0046  1C81               	btfss	1,1
 14342  0047  2841               	goto	i1l6499
 14343  0048  307B               	movlw	123
 14344  0049  0086               	movwf	6
 14345  004A  3023               	movlw	35
 14346  004B  2536  3180         	fcall	PL108	;call to abstracted procedure
 14347  004D  1903               	skipnz
 14348  004E  2841               	goto	i1l6499
 14349                           
 14350                           ;led.c: 574: if(gLedPara.mMsc == 1 || gLedPara.mMsc == 2 || gLedPara.mMsc == 3 || gLedPa
      +                          ra.mMsc == 4) {
 14351  004F  307B               	movlw	123
 14352  0050  0086               	movwf	6
 14353  0051  3023               	movlw	35
 14354  0052  2536  3180         	fcall	PL108	;call to abstracted procedure
 14355  0054  3A01               	xorlw	1
 14356  0055  1903               	skipnz
 14357  0056  2866               	goto	i1l6515
 14358  0057  252E  3180         	fcall	PL104	;call to abstracted procedure
 14359  0059  3A02               	xorlw	2
 14360  005A  1903               	skipnz
 14361  005B  2866               	goto	i1l6515
 14362  005C  252E  3180         	fcall	PL104	;call to abstracted procedure
 14363  005E  3A03               	xorlw	3
 14364  005F  1903               	skipnz
 14365  0060  2866               	goto	i1l6515
 14366  0061  252E  3180         	fcall	PL104	;call to abstracted procedure
 14367  0063  3A04               	xorlw	4
 14368  0064  1D03               	skipz
 14369  0065  2868               	goto	i1l827
 14370  0066                     i1l6515:	
 14371                           
 14372                           ;led.c: 575: Led_Ramp();
 14373  0066  2069  3180         	fcall	_Led_Ramp
 14374  0068                     i1l827:	
 14375                           
 14376                           ;led.c: 576: }
 14377                           ;led.c: 577: Led_RunMusic();
 14378  0068  289F               	ljmp	i1l6361
 14379  0069                     __end_of_Led_Run:	
 14380                           ;led.c: 578: } else {
 14381                           
 14382  0069                     __ptext85:	
 14383 ;; *************** function _Led_Ramp *****************
 14384 ;; Defined at:
 14385 ;;		line 297 in file "user/src/led.c"
 14386 ;; Parameters:    Size  Location     Type
 14387 ;;		None
 14388 ;; Auto vars:     Size  Location     Type
 14389 ;;  i               1   10[COMMON] unsigned char 
 14390 ;; Return value:  Size  Location     Type
 14391 ;;                  1    wreg      void 
 14392 ;; Registers used:
 14393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14394 ;; Tracked objects:
 14395 ;;		On entry : 1E/0
 14396 ;;		On exit  : 14/4
 14397 ;;		Unchanged: 0/0
 14398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14401 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14402 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14403 ;;Total ram usage:        7 bytes
 14404 ;; Hardware stack levels used:    1
 14405 ;; Hardware stack levels required when called:    1
 14406 ;; This function calls:
 14407 ;;		i1_PWM1_LoadDutyValue
 14408 ;;		i1_PWM2_LoadDutyValue
 14409 ;;		i1_PWM3_LoadDutyValue
 14410 ;;		i1_PWM4_LoadDutyValue
 14411 ;;		i1_PWM5_LoadDutyValue
 14412 ;; This function is called by:
 14413 ;;		_Led_Run
 14414 ;; This function uses a non-reentrant model
 14415 ;;
 14416                           
 14417                           
 14418                           ;psect for function _Led_Ramp
 14419  0069                     _Led_Ramp:	
 14420  0069                     i1l6333:	
 14421                           ;incstack = 0
 14422                           ; Regs used in _Led_Ramp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14423                           
 14424                           
 14425                           ;led.c: 298: for (uint8_t i = 0; i < 5; i++) {
 14426  0069  01FA               	clrf	Led_Ramp@i
 14427  006A                     i1l6339:	
 14428                           
 14429                           ;led.c: 299: if (gLedRunPara.mCurrentBright[i] + 1 < gLedRunPara.mTargetBright[i]) {
 14430  006A  357A               	lslf	Led_Ramp@i,w
 14431  006B  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14432  006C  2564  3180         	fcall	PL140	;call to abstracted procedure
 14433  006E  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14434  006F  24D5  3180         	fcall	PL50	;call to abstracted procedure
 14435  0071  1803               	skipnc
 14436  0072  2879               	goto	i1l6343
 14437                           
 14438                           ;led.c: 300: gLedRunPara.mCurrentBright[i] += 1;
 14439  0073  357A               	lslf	Led_Ramp@i,w
 14440  0074  24E7  3180         	fcall	PL52	;call to abstracted procedure
 14441  0076  1803               	skipnc
 14442  0077  0A81               	incf	1,f
 14443                           
 14444                           ;led.c: 301: } else if (gLedRunPara.mCurrentBright[i] > gLedRunPara.mTargetBright[i] + 1
      +                          ) {
 14445  0078  288F               	goto	i1l6349
 14446  0079                     i1l6343:	
 14447  0079  357A               	lslf	Led_Ramp@i,w
 14448  007A  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14449  007B  2564  3180         	fcall	PL140	;call to abstracted procedure
 14450  007D  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14451  007E  24D5  3180         	fcall	PL50	;call to abstracted procedure
 14452  0080  1803               	skipnc
 14453  0081  2886               	goto	i1l6347
 14454                           
 14455                           ;led.c: 302: gLedRunPara.mCurrentBright[i] -= 1;
 14456  0082  357A               	lslf	Led_Ramp@i,w
 14457  0083  24CB  3180         	fcall	PL24	;call to abstracted procedure
 14458                           
 14459                           ;led.c: 303: } else {
 14460  0085  288F               	goto	i1l6349
 14461  0086                     i1l6347:	
 14462                           
 14463                           ;led.c: 304: gLedRunPara.mCurrentBright[i] = gLedRunPara.mTargetBright[i];
 14464  0086  357A               	lslf	Led_Ramp@i,w
 14465  0087  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14466  0088  0086               	movwf	6
 14467  0089  0187               	clrf	7
 14468  008A  357A               	lslf	Led_Ramp@i,w
 14469  008B  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14470  008C  3196  26FA  3180   	fcall	PL28	;call to abstracted procedure
 14471  008F                     i1l6349:	
 14472                           
 14473                           ;led.c: 305: }
 14474                           ;led.c: 306: loadDuty[i](gLedRunPara.mCurrentBright[i]);
 14475  008F  357A               	lslf	Led_Ramp@i,w
 14476  0090  255C               	fcall	PL136	;call to abstracted procedure
 14477  0091  357A               	lslf	Led_Ramp@i,w
 14478  0092  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
 14479  0093  0086               	movwf	6
 14480  0094  3F41               	moviw [1]fsr1
 14481  0095  008A               	movwf	10
 14482  0096  3F40               	moviw [0]fsr1
 14483  0097  000A               	callw
 14484  0098  3005               	movlw	5
 14485  0099  3180               	pagesel	$
 14486  009A  0AFA               	incf	Led_Ramp@i,f
 14487  009B  027A               	subwf	Led_Ramp@i,w
 14488  009C  1803               	btfsc	3,0
 14489  009D  0008               	return
 14490  009E  286A               	goto	i1l6339
 14491  009F                     __end_of_Led_Ramp:	
 14492  009F                     __ptext77:	
 14493 ;; *************** function _Led_RunMusic *****************
 14494 ;; Defined at:
 14495 ;;		line 532 in file "user/src/led.c"
 14496 ;; Parameters:    Size  Location     Type
 14497 ;;		None
 14498 ;; Auto vars:     Size  Location     Type
 14499 ;;		None
 14500 ;; Return value:  Size  Location     Type
 14501 ;;                  1    wreg      void 
 14502 ;; Registers used:
 14503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14504 ;; Tracked objects:
 14505 ;;		On entry : 10/0
 14506 ;;		On exit  : 10/0
 14507 ;;		Unchanged: 0/0
 14508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14512 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14513 ;;Total ram usage:        1 bytes
 14514 ;; Hardware stack levels used:    1
 14515 ;; Hardware stack levels required when called:    3
 14516 ;; This function calls:
 14517 ;;		_Audio_SelectSound
 14518 ;;		_Led_DynamicCloud
 14519 ;;		_Led_DynamicMoon
 14520 ;;		_Led_DynamicStorm
 14521 ;;		_Led_DynamicWave
 14522 ;; This function is called by:
 14523 ;;		_Led_Run
 14524 ;; This function uses a non-reentrant model
 14525 ;;
 14526                           
 14527                           
 14528                           ;psect for function _Led_RunMusic
 14529  009F                     _Led_RunMusic:	
 14530  009F                     i1l6361:	
 14531                           ;incstack = 0
 14532                           ; Regs used in _Led_RunMusic: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14533                           
 14534                           
 14535                           ;led.c: 533: if (gLedRunPara.music_state < 32) {
 14536  009F  3020               	movlw	32
 14537  00A0  0021               	movlb	1	; select bank1
 14538  00A1  0261               	subwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14539  00A2  1C03               	btfss	3,0
 14540  00A3  28B9               	goto	i1l6363
 14541                           
 14542                           ;led.c: 535: } else if (gLedRunPara.music_state == 32) {
 14543  00A4  3020               	movlw	32
 14544  00A5  0661               	xorwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14545  00A6  1D03               	btfss	3,2
 14546  00A7  28B2               	goto	i1l6371
 14547                           
 14548                           ;led.c: 536: Audio_SelectSound(gLedPara.mMsc + 0x30);
 14549  00A8  307B               	movlw	123
 14550  00A9  0086               	movwf	6
 14551  00AA  3023               	movlw	35
 14552  00AB  0087               	movwf	7
 14553  00AC  257C  3180         	fcall	PL146	;call to abstracted procedure
 14554  00AE  3E30               	addlw	48
 14555  00AF  20E8  3180         	fcall	_Audio_SelectSound
 14556  00B1  28B9               	goto	i1l6363
 14557  00B2                     i1l6371:	
 14558  00B2  3040               	movlw	64
 14559  00B3  0261               	subwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14560  00B4  1C03               	btfss	3,0
 14561  00B5  28B9               	goto	i1l6363
 14562  00B6  3040               	movlw	64
 14563  00B7  0661               	xorwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14564  00B8  1903               	btfsc	3,2
 14565  00B9                     i1l6363:	
 14566                           
 14567                           ;led.c: 534: gLedRunPara.music_state++;
 14568  00B9  0AE1               	incf	(_gLedRunPara^(0+128)+25),f	;volatile
 14569                           
 14570                           ;led.c: 543: }
 14571                           ;led.c: 544: if (gLedPara.mDyn) {
 14572  00BA  307B               	movlw	123
 14573  00BB  0086               	movwf	6
 14574  00BC  3023               	movlw	35
 14575  00BD  0087               	movwf	7
 14576  00BE  1F81               	btfss	1,7
 14577  00BF  0008               	return
 14578                           
 14579                           ;led.c: 557: break;
 14580  00C0  257C  3180         	fcall	PL146	;call to abstracted procedure
 14581                           
 14582                           ; Switch size 1, requested type "space"
 14583                           ; Number of cases is 4, Range of values is 5 to 8
 14584                           ; switch strategies available:
 14585                           ; Name         Instructions Cycles
 14586                           ; simple_byte           13     7 (average)
 14587                           ; direct_byte           17     9 (fixed)
 14588                           ; jumptable            263     9 (fixed)
 14589                           ;	Chosen strategy is simple_byte
 14590  00C2  3A05               	xorlw	5	; case 5
 14591  00C3  1903               	skipnz
 14592  00C4  28CF               	goto	i1l6383
 14593  00C5  3A03               	xorlw	3	; case 6
 14594  00C6  1903               	skipnz
 14595  00C7  28D5               	goto	i1l6385
 14596  00C8  3A01               	xorlw	1	; case 7
 14597  00C9  1903               	skipnz
 14598  00CA  28DB               	goto	i1l6387
 14599  00CB  3A0F               	xorlw	15	; case 8
 14600  00CC  1903               	skipnz
 14601  00CD  28E1               	goto	i1l6389
 14602  00CE  28E7               	goto	i1l815
 14603  00CF                     i1l6383:	
 14604                           
 14605                           ;led.c: 547: Led_DynamicWave(audio_value);
 14606  00CF  0020               	movlb	0	; select bank0
 14607  00D0  082B               	movf	_audio_value+1,w	;volatile
 14608  00D1  00F7               	movwf	Led_DynamicWave@ptp+1
 14609  00D2  082A               	movf	_audio_value,w	;volatile
 14610  00D3  00F6               	movwf	Led_DynamicWave@ptp
 14611  00D4  2970               	ljmp	i1l6155
 14612  00D5                     i1l6385:	
 14613                           ;led.c: 548: break;
 14614                           
 14615                           
 14616                           ;led.c: 550: Led_DynamicMoon(audio_value);
 14617  00D5  0020               	movlb	0	; select bank0
 14618  00D6  082B               	movf	_audio_value+1,w	;volatile
 14619  00D7  00F7               	movwf	Led_DynamicMoon@ptp+1
 14620  00D8  082A               	movf	_audio_value,w	;volatile
 14621  00D9  00F6               	movwf	Led_DynamicMoon@ptp
 14622  00DA  291F               	ljmp	i1l6185
 14623  00DB                     i1l6387:	
 14624                           ;led.c: 551: break;
 14625                           
 14626                           
 14627                           ;led.c: 553: Led_DynamicCloud(audio_value);
 14628  00DB  0020               	movlb	0	; select bank0
 14629  00DC  082B               	movf	_audio_value+1,w	;volatile
 14630  00DD  00F7               	movwf	Led_DynamicCloud@ptp+1
 14631  00DE  082A               	movf	_audio_value,w	;volatile
 14632  00DF  00F6               	movwf	Led_DynamicCloud@ptp
 14633  00E0  2A21               	ljmp	i1l6213
 14634  00E1                     i1l6389:	
 14635                           ;led.c: 554: break;
 14636                           
 14637                           
 14638                           ;led.c: 556: Led_DynamicStorm(audio_value);
 14639  00E1  0020               	movlb	0	; select bank0
 14640  00E2  082B               	movf	_audio_value+1,w	;volatile
 14641  00E3  00F7               	movwf	Led_DynamicStorm@ptp+1
 14642  00E4  082A               	movf	_audio_value,w	;volatile
 14643  00E5  00F6               	movwf	Led_DynamicStorm@ptp
 14644  00E6  29C1               	ljmp	i1l6253
 14645  00E7                     i1l815:	
 14646  00E7  0008               	return
 14647  00E8                     __end_of_Led_RunMusic:	
 14648  00E8                     __ptext83:	
 14649 ;; *************** function _Audio_SelectSound *****************
 14650 ;; Defined at:
 14651 ;;		line 25 in file "user/src/audio.c"
 14652 ;; Parameters:    Size  Location     Type
 14653 ;;  index           1    wreg     unsigned char 
 14654 ;; Auto vars:     Size  Location     Type
 14655 ;;  index           1    1[COMMON] unsigned char 
 14656 ;;  checksum        1    2[COMMON] unsigned char 
 14657 ;; Return value:  Size  Location     Type
 14658 ;;                  1    wreg      void 
 14659 ;; Registers used:
 14660 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14661 ;; Tracked objects:
 14662 ;;		On entry : 1F/1
 14663 ;;		On exit  : 1F/1
 14664 ;;		Unchanged: 0/0
 14665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14667 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14669 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14670 ;;Total ram usage:        2 bytes
 14671 ;; Hardware stack levels used:    1
 14672 ;; Hardware stack levels required when called:    1
 14673 ;; This function calls:
 14674 ;;		i1_EUSART_Write
 14675 ;; This function is called by:
 14676 ;;		_Led_RunMusic
 14677 ;; This function uses a non-reentrant model
 14678 ;;
 14679                           
 14680                           
 14681                           ;psect for function _Audio_SelectSound
 14682  00E8                     _Audio_SelectSound:	
 14683                           
 14684                           ;incstack = 0
 14685                           ; Regs used in _Audio_SelectSound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14686                           ;Audio_SelectSound@index stored from wreg
 14687  00E8  00F1               	movwf	Audio_SelectSound@index
 14688  00E9  307E               	movlw	126
 14689                           
 14690                           ;audio.c: 27: uint8_t checksum = 0x00;
 14691  00EA  01F2               	clrf	Audio_SelectSound@checksum
 14692                           
 14693                           ;audio.c: 28: EUSART_Write ( 0x7E );
 14694  00EB  210B  3180         	fcall	i1_EUSART_Write
 14695                           
 14696                           ;audio.c: 29: checksum += EUSART_Write ( 0x07 );
 14697  00ED  3007               	movlw	7
 14698  00EE  210B  3180         	fcall	i1_EUSART_Write
 14699  00F0  07F2               	addwf	Audio_SelectSound@checksum,f
 14700                           
 14701                           ;audio.c: 30: checksum += EUSART_Write ( 0xA1 );
 14702  00F1  30A1               	movlw	161
 14703  00F2  210B  3180         	fcall	i1_EUSART_Write
 14704  00F4  07F2               	addwf	Audio_SelectSound@checksum,f
 14705                           
 14706                           ;audio.c: 31: checksum += EUSART_Write ( 0x30 );
 14707  00F5  3030               	movlw	48
 14708  00F6  210B  3180         	fcall	i1_EUSART_Write
 14709  00F8  07F2               	addwf	Audio_SelectSound@checksum,f
 14710                           
 14711                           ;audio.c: 32: checksum += EUSART_Write ( 0x30 );
 14712  00F9  3030               	movlw	48
 14713  00FA  210B  3180         	fcall	i1_EUSART_Write
 14714  00FC  07F2               	addwf	Audio_SelectSound@checksum,f
 14715                           
 14716                           ;audio.c: 33: checksum += EUSART_Write ( 0x30 );
 14717  00FD  3030               	movlw	48
 14718  00FE  210B  3180         	fcall	i1_EUSART_Write
 14719  0100  07F2               	addwf	Audio_SelectSound@checksum,f
 14720                           
 14721                           ;audio.c: 34: checksum += EUSART_Write ( index );
 14722  0101  0871               	movf	Audio_SelectSound@index,w
 14723  0102  210B  3180         	fcall	i1_EUSART_Write
 14724  0104  07F2               	addwf	Audio_SelectSound@checksum,f
 14725                           
 14726                           ;audio.c: 35: EUSART_Write ( checksum );
 14727  0105  0872               	movf	Audio_SelectSound@checksum,w
 14728  0106  210B  3180         	fcall	i1_EUSART_Write
 14729                           
 14730                           ;audio.c: 36: EUSART_Write ( 0xEF );
 14731  0108  30EF               	movlw	239
 14732  0109  210B               	fcall	i1_EUSART_Write
 14733  010A  0008               	return
 14734  010B                     __end_of_Audio_SelectSound:	
 14735  010B                     __ptext84:	
 14736 ;; *************** function i1_EUSART_Write *****************
 14737 ;; Defined at:
 14738 ;;		line 32 in file "driver/src/eusart.c"
 14739 ;; Parameters:    Size  Location     Type
 14740 ;;  byte            1    wreg     unsigned char 
 14741 ;; Auto vars:     Size  Location     Type
 14742 ;;  byte            1    0[COMMON] unsigned char 
 14743 ;; Return value:  Size  Location     Type
 14744 ;;                  1    wreg      unsigned char 
 14745 ;; Registers used:
 14746 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14747 ;; Tracked objects:
 14748 ;;		On entry : 1F/1
 14749 ;;		On exit  : 1F/1
 14750 ;;		Unchanged: 0/0
 14751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14753 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14755 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;Total ram usage:        1 bytes
 14757 ;; Hardware stack levels used:    1
 14758 ;; This function calls:
 14759 ;;		Nothing
 14760 ;; This function is called by:
 14761 ;;		_Audio_SelectSound
 14762 ;; This function uses a non-reentrant model
 14763 ;;
 14764                           
 14765                           
 14766                           ;psect for function i1_EUSART_Write
 14767  010B                     i1_EUSART_Write:	
 14768                           
 14769                           ;incstack = 0
 14770                           ; Regs used in i1_EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 14771                           ;i1EUSART_Write@byte stored from wreg
 14772  010B  00F0               	movwf	i1EUSART_Write@byte
 14773  010C                     i1l3939:	
 14774                           ;eusart.c: 34: while ( 0 == txRemain );
 14775                           
 14776  010C  0020               	movlb	0	; select bank0
 14777  010D  0860               	movf	_txRemain,w
 14778  010E  1903               	btfsc	3,2
 14779  010F  290C               	goto	i1l3939
 14780                           
 14781                           ;eusart.c: 36: if ( !PIE1bits.TXIE )
 14782  0110  0021               	movlb	1	; select bank1
 14783  0111  1A11               	btfsc	17,4	;volatile
 14784  0112  2917               	goto	i1l95
 14785                           
 14786                           ;eusart.c: 37: {
 14787                           ;eusart.c: 38: TXREG = byte;
 14788  0113  0870               	movf	i1EUSART_Write@byte,w
 14789  0114  0023               	movlb	3	; select bank3
 14790  0115  009A               	movwf	26	;volatile
 14791                           
 14792                           ;eusart.c: 39: }
 14793  0116  291B               	goto	i1l3953
 14794  0117                     i1l95:	
 14795                           
 14796                           ;eusart.c: 40: else
 14797                           ;eusart.c: 41: {
 14798                           ;eusart.c: 42: PIE1bits.TXIE = 0;
 14799                           
 14800                           ;eusart.c: 43: txBuf[txHead++] = byte;
 14801  0117  2544  3180         	fcall	PL128	;call to abstracted procedure
 14802  0119  0870               	movf	i1EUSART_Write@byte,w
 14803                           
 14804                           ;eusart.c: 44: if ( sizeof (txBuf ) <= txHead )
 14805                           
 14806                           ;eusart.c: 45: {
 14807                           ;eusart.c: 46: txHead = 0;
 14808                           
 14809                           ;eusart.c: 47: }
 14810                           ;eusart.c: 48: txRemain--;
 14811  011A  256C               	fcall	PL142	;call to abstracted procedure
 14812  011B                     i1l3953:	
 14813                           
 14814                           ;eusart.c: 49: }
 14815                           ;eusart.c: 50: PIE1bits.TXIE = 1;
 14816  011B  0021               	movlb	1	; select bank1
 14817  011C  1611               	bsf	17,4	;volatile
 14818                           
 14819                           ;eusart.c: 51: return byte;
 14820  011D  0870               	movf	i1EUSART_Write@byte,w
 14821  011E  0008               	return
 14822  011F                     __end_ofi1_EUSART_Write:	
 14823  011F                     __ptext80:	
 14824 ;; *************** function _Led_DynamicMoon *****************
 14825 ;; Defined at:
 14826 ;;		line 462 in file "user/src/led.c"
 14827 ;; Parameters:    Size  Location     Type
 14828 ;;  ptp             2    6[COMMON] unsigned int 
 14829 ;; Auto vars:     Size  Location     Type
 14830 ;;  duty           10    0[BANK0 ] unsigned int [5]
 14831 ;;  val             2   10[BANK0 ] unsigned int 
 14832 ;;  i               1   12[BANK0 ] unsigned char 
 14833 ;; Return value:  Size  Location     Type
 14834 ;;                  1    wreg      void 
 14835 ;; Registers used:
 14836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14837 ;; Tracked objects:
 14838 ;;		On entry : 1F/0
 14839 ;;		On exit  : 14/4
 14840 ;;		Unchanged: 0/0
 14841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14842 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14843 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14844 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14845 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14846 ;;Total ram usage:       19 bytes
 14847 ;; Hardware stack levels used:    1
 14848 ;; Hardware stack levels required when called:    2
 14849 ;; This function calls:
 14850 ;;		i1_Led_UpdateBright
 14851 ;;		i1___wmul
 14852 ;; This function is called by:
 14853 ;;		_Led_RunMusic
 14854 ;; This function uses a non-reentrant model
 14855 ;;
 14856                           
 14857                           
 14858                           ;psect for function _Led_DynamicMoon
 14859  011F                     _Led_DynamicMoon:	
 14860  011F                     i1l6185:	
 14861                           ;incstack = 0
 14862                           ; Regs used in _Led_DynamicMoon: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14863                           
 14864                           
 14865                           ;led.c: 463: uint8_t i;
 14866                           ;led.c: 464: uint16_t val = ptp * ( 5 + GAIN[gLedPara.mVolume] );
 14867  011F  24BC  3180         	fcall	PL16	;call to abstracted procedure
 14868  0121  3005               	movlw	5
 14869  0122  01F1               	clrf	i1___wmul@multiplier+1
 14870  0123  07F0               	addwf	i1___wmul@multiplier,f
 14871  0124  1803               	skipnc
 14872  0125  0AF1               	incf	i1___wmul@multiplier+1,f
 14873  0126  0877               	movf	Led_DynamicMoon@ptp+1,w
 14874  0127  00F3               	movwf	i1___wmul@multiplicand+1
 14875  0128  0876               	movf	Led_DynamicMoon@ptp,w
 14876  0129  00F2               	movwf	i1___wmul@multiplicand
 14877  012A  2447  3180         	fcall	i1___wmul
 14878  012C  0871               	movf	?i1___wmul+1,w
 14879  012D  00CB               	movwf	Led_DynamicMoon@val+1
 14880  012E  0870               	movf	?i1___wmul,w
 14881  012F  00CA               	movwf	Led_DynamicMoon@val
 14882                           
 14883                           ;led.c: 465: uint16_t duty[5] = {0, 0, 1000, 200, 0};
 14884  0130  30AA               	movlw	low Led_DynamicMoon@F8363
 14885  0131  0086               	movwf	6
 14886  0132  3000               	movlw	high Led_DynamicMoon@F8363
 14887  0133  0087               	movwf	7
 14888  0134  3040               	movlw	low Led_DynamicMoon@duty
 14889  0135  0084               	movwf	4
 14890  0136  3000               	movlw	high Led_DynamicMoon@duty
 14891  0137  0085               	movwf	5
 14892  0138  300A               	movlw	10
 14893  0139  00F8               	movwf	??_Led_DynamicMoon
 14894  013A                     u540_20:	
 14895  013A  0016               	moviw fsr1++
 14896  013B  001A               	movwi fsr0++
 14897  013C  0BF8               	decfsz	??_Led_DynamicMoon,f
 14898  013D  293A               	goto	u540_20
 14899                           
 14900                           ;led.c: 466: if (duty[3] > val) {
 14901  013E  0847               	movf	Led_DynamicMoon@duty+7,w
 14902  013F  024B               	subwf	Led_DynamicMoon@val+1,w
 14903  0140  1D03               	skipz
 14904  0141  2944               	goto	u541_25
 14905  0142  0846               	movf	Led_DynamicMoon@duty+6,w
 14906  0143  024A               	subwf	Led_DynamicMoon@val,w
 14907  0144                     u541_25:	
 14908  0144  1803               	skipnc
 14909  0145  294B               	goto	i1l6193
 14910                           
 14911                           ;led.c: 467: duty[3] -= val;
 14912  0146  084A               	movf	Led_DynamicMoon@val,w
 14913  0147  02C6               	subwf	Led_DynamicMoon@duty+6,f
 14914  0148  084B               	movf	Led_DynamicMoon@val+1,w
 14915  0149  3BC7               	subwfb	Led_DynamicMoon@duty+7,f
 14916                           
 14917                           ;led.c: 468: } else {
 14918  014A  294D               	goto	i1l764
 14919  014B                     i1l6193:	
 14920                           
 14921                           ;led.c: 469: duty[3] = 0;
 14922  014B  01C6               	clrf	Led_DynamicMoon@duty+6
 14923  014C  01C7               	clrf	Led_DynamicMoon@duty+7
 14924  014D                     i1l764:	
 14925                           
 14926                           ;led.c: 470: }
 14927                           ;led.c: 471: for (i = 0; i < 5; i++) {
 14928  014D  01CC               	clrf	Led_DynamicMoon@i
 14929  014E                     i1l6199:	
 14930                           
 14931                           ;led.c: 472: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 14932  014E  354C               	lslf	Led_DynamicMoon@i,w
 14933  014F  3E40               	addlw	(low (Led_DynamicMoon@duty| 0))& (0+255)
 14934  0150  253C  3180         	fcall	PL126	;call to abstracted procedure
 14935  0152  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14936  0153  250A  3180         	fcall	PL84	;call to abstracted procedure
 14937  0155  1803               	skipnc
 14938  0156  295D               	goto	i1l6203
 14939                           
 14940                           ;led.c: 473: gLedRunPara.mCurrentBright[i]++;
 14941  0157  354C               	lslf	Led_DynamicMoon@i,w
 14942  0158  24E7  3180         	fcall	PL52	;call to abstracted procedure
 14943  015A  1803               	skipnc
 14944  015B  0A81               	incf	1,f
 14945                           
 14946                           ;led.c: 474: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 14947  015C  2969               	goto	i1l6207
 14948  015D                     i1l6203:	
 14949  015D  354C               	lslf	Led_DynamicMoon@i,w
 14950  015E  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14951  015F  253C  3180         	fcall	PL126	;call to abstracted procedure
 14952  0161  3E40               	addlw	(low (Led_DynamicMoon@duty| 0))& (0+255)
 14953  0162  250A  3180         	fcall	PL84	;call to abstracted procedure
 14954  0164  1803               	skipnc
 14955  0165  2969               	goto	i1l6207
 14956                           
 14957                           ;led.c: 475: gLedRunPara.mCurrentBright[i]--;
 14958  0166  354C               	lslf	Led_DynamicMoon@i,w
 14959  0167  24CB  3180         	fcall	PL24	;call to abstracted procedure
 14960  0169                     i1l6207:	
 14961  0169  3005               	movlw	5
 14962  016A  0ACC               	incf	Led_DynamicMoon@i,f
 14963  016B  024C               	subwf	Led_DynamicMoon@i,w
 14964  016C  1C03               	skipc
 14965  016D  294E               	goto	i1l6199
 14966                           
 14967                           ;led.c: 476: }
 14968                           ;led.c: 477: }
 14969                           ;led.c: 478: Led_UpdateBright();
 14970  016E  24A8               	fcall	i1_Led_UpdateBright
 14971  016F  0008               	return
 14972  0170                     __end_of_Led_DynamicMoon:	
 14973  0170                     __ptext78:	
 14974 ;; *************** function _Led_DynamicWave *****************
 14975 ;; Defined at:
 14976 ;;		line 444 in file "user/src/led.c"
 14977 ;; Parameters:    Size  Location     Type
 14978 ;;  ptp             2    6[COMMON] unsigned int 
 14979 ;; Auto vars:     Size  Location     Type
 14980 ;;  duty           10    0[BANK0 ] unsigned int [5]
 14981 ;;  val             2   10[BANK0 ] unsigned int 
 14982 ;;  i               1   12[BANK0 ] unsigned char 
 14983 ;; Return value:  Size  Location     Type
 14984 ;;                  1    wreg      void 
 14985 ;; Registers used:
 14986 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14987 ;; Tracked objects:
 14988 ;;		On entry : 1F/0
 14989 ;;		On exit  : 14/4
 14990 ;;		Unchanged: 0/0
 14991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14992 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14993 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14994 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14995 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14996 ;;Total ram usage:       19 bytes
 14997 ;; Hardware stack levels used:    1
 14998 ;; Hardware stack levels required when called:    2
 14999 ;; This function calls:
 15000 ;;		i1_Led_UpdateBright
 15001 ;;		i1___wmul
 15002 ;; This function is called by:
 15003 ;;		_Led_RunMusic
 15004 ;; This function uses a non-reentrant model
 15005 ;;
 15006                           
 15007                           
 15008                           ;psect for function _Led_DynamicWave
 15009  0170                     _Led_DynamicWave:	
 15010  0170                     i1l6155:	
 15011                           ;incstack = 0
 15012                           ; Regs used in _Led_DynamicWave: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15013                           
 15014                           
 15015                           ;led.c: 445: uint8_t i;
 15016                           ;led.c: 446: uint16_t val = ptp * ( 6 + GAIN[gLedPara.mVolume] );
 15017  0170  24BC  3180         	fcall	PL16	;call to abstracted procedure
 15018  0172  3006               	movlw	6
 15019  0173  01F1               	clrf	i1___wmul@multiplier+1
 15020  0174  07F0               	addwf	i1___wmul@multiplier,f
 15021  0175  1803               	skipnc
 15022  0176  0AF1               	incf	i1___wmul@multiplier+1,f
 15023  0177  0877               	movf	Led_DynamicWave@ptp+1,w
 15024  0178  00F3               	movwf	i1___wmul@multiplicand+1
 15025  0179  0876               	movf	Led_DynamicWave@ptp,w
 15026  017A  00F2               	movwf	i1___wmul@multiplicand
 15027  017B  2447  3180         	fcall	i1___wmul
 15028  017D  0871               	movf	?i1___wmul+1,w
 15029  017E  00CB               	movwf	Led_DynamicWave@val+1
 15030  017F  0870               	movf	?i1___wmul,w
 15031  0180  00CA               	movwf	Led_DynamicWave@val
 15032                           
 15033                           ;led.c: 447: uint16_t duty[5] = {500, 500, 500, 200, 500};
 15034  0181  30B4               	movlw	low Led_DynamicWave@F8353
 15035  0182  0086               	movwf	6
 15036  0183  3000               	movlw	high Led_DynamicWave@F8353
 15037  0184  0087               	movwf	7
 15038  0185  3040               	movlw	low Led_DynamicWave@duty
 15039  0186  0084               	movwf	4
 15040  0187  3000               	movlw	high Led_DynamicWave@duty
 15041  0188  0085               	movwf	5
 15042  0189  300A               	movlw	10
 15043  018A  00F8               	movwf	??_Led_DynamicWave
 15044  018B                     u535_20:	
 15045  018B  0016               	moviw fsr1++
 15046  018C  001A               	movwi fsr0++
 15047  018D  0BF8               	decfsz	??_Led_DynamicWave,f
 15048  018E  298B               	goto	u535_20
 15049                           
 15050                           ;led.c: 448: duty[3] += val;
 15051  018F  084A               	movf	Led_DynamicWave@val,w
 15052  0190  07C6               	addwf	Led_DynamicWave@duty+6,f
 15053  0191  084B               	movf	Led_DynamicWave@val+1,w
 15054  0192  3DC7               	addwfc	Led_DynamicWave@duty+7,f
 15055                           
 15056                           ;led.c: 449: if (duty[3] > 1000) {
 15057  0193  3003               	movlw	3
 15058  0194  0247               	subwf	Led_DynamicWave@duty+7,w
 15059  0195  30E9               	movlw	233
 15060  0196  1903               	skipnz
 15061  0197  0246               	subwf	Led_DynamicWave@duty+6,w
 15062  0198  1C03               	skipc
 15063  0199  299E               	goto	i1l6165
 15064                           
 15065                           ;led.c: 450: duty[3] = 1000;
 15066  019A  30E8               	movlw	232
 15067  019B  00C6               	movwf	Led_DynamicWave@duty+6
 15068  019C  3003               	movlw	3
 15069  019D  00C7               	movwf	Led_DynamicWave@duty+7
 15070  019E                     i1l6165:	
 15071                           
 15072                           ;led.c: 451: }
 15073                           ;led.c: 452: for (i = 0; i < 5; i++) {
 15074  019E  01CC               	clrf	Led_DynamicWave@i
 15075  019F                     i1l6171:	
 15076                           
 15077                           ;led.c: 453: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 15078  019F  354C               	lslf	Led_DynamicWave@i,w
 15079  01A0  3E40               	addlw	(low (Led_DynamicWave@duty| 0))& (0+255)
 15080  01A1  254C  3180         	fcall	PL130	;call to abstracted procedure
 15081  01A3  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15082  01A4  2522  3180         	fcall	PL100	;call to abstracted procedure
 15083  01A6  1803               	skipnc
 15084  01A7  29AE               	goto	i1l6175
 15085                           
 15086                           ;led.c: 454: gLedRunPara.mCurrentBright[i]++;
 15087  01A8  354C               	lslf	Led_DynamicWave@i,w
 15088  01A9  24E7  3180         	fcall	PL52	;call to abstracted procedure
 15089  01AB  1803               	skipnc
 15090  01AC  0A81               	incf	1,f
 15091                           
 15092                           ;led.c: 455: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 15093  01AD  29BA               	goto	i1l6179
 15094  01AE                     i1l6175:	
 15095  01AE  354C               	lslf	Led_DynamicWave@i,w
 15096  01AF  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15097  01B0  254C  3180         	fcall	PL130	;call to abstracted procedure
 15098  01B2  3E40               	addlw	(low (Led_DynamicWave@duty| 0))& (0+255)
 15099  01B3  2522  3180         	fcall	PL100	;call to abstracted procedure
 15100  01B5  1803               	skipnc
 15101  01B6  29BA               	goto	i1l6179
 15102                           
 15103                           ;led.c: 456: gLedRunPara.mCurrentBright[i]--;
 15104  01B7  354C               	lslf	Led_DynamicWave@i,w
 15105  01B8  24CB  3180         	fcall	PL24	;call to abstracted procedure
 15106  01BA                     i1l6179:	
 15107  01BA  3005               	movlw	5
 15108  01BB  0ACC               	incf	Led_DynamicWave@i,f
 15109  01BC  024C               	subwf	Led_DynamicWave@i,w
 15110  01BD  1C03               	skipc
 15111  01BE  299F               	goto	i1l6171
 15112                           
 15113                           ;led.c: 457: }
 15114                           ;led.c: 458: }
 15115                           ;led.c: 459: Led_UpdateBright();
 15116  01BF  24A8               	fcall	i1_Led_UpdateBright
 15117  01C0  0008               	return
 15118  01C1                     __end_of_Led_DynamicWave:	
 15119  01C1                     __ptext79:	
 15120 ;; *************** function _Led_DynamicStorm *****************
 15121 ;; Defined at:
 15122 ;;		line 508 in file "user/src/led.c"
 15123 ;; Parameters:    Size  Location     Type
 15124 ;;  ptp             2    6[COMMON] unsigned int 
 15125 ;; Auto vars:     Size  Location     Type
 15126 ;;  duty           10    0[BANK0 ] unsigned int [5]
 15127 ;;  val             2   10[BANK0 ] unsigned int 
 15128 ;;  i               1   12[BANK0 ] unsigned char 
 15129 ;; Return value:  Size  Location     Type
 15130 ;;                  1    wreg      void 
 15131 ;; Registers used:
 15132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15133 ;; Tracked objects:
 15134 ;;		On entry : 1F/0
 15135 ;;		On exit  : 14/4
 15136 ;;		Unchanged: 0/0
 15137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15138 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15139 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15141 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15142 ;;Total ram usage:       19 bytes
 15143 ;; Hardware stack levels used:    1
 15144 ;; Hardware stack levels required when called:    2
 15145 ;; This function calls:
 15146 ;;		i1_Led_UpdateBright
 15147 ;;		i1___wmul
 15148 ;; This function is called by:
 15149 ;;		_Led_RunMusic
 15150 ;; This function uses a non-reentrant model
 15151 ;;
 15152                           
 15153                           
 15154                           ;psect for function _Led_DynamicStorm
 15155  01C1                     _Led_DynamicStorm:	
 15156  01C1                     i1l6253:	
 15157                           ;incstack = 0
 15158                           ; Regs used in _Led_DynamicStorm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15159                           
 15160                           
 15161                           ;led.c: 509: uint8_t i;
 15162                           ;led.c: 510: uint16_t val = ptp * ( 5 + GAIN[gLedPara.mVolume] );
 15163  01C1  24BC  3180         	fcall	PL16	;call to abstracted procedure
 15164  01C3  3005               	movlw	5
 15165  01C4  01F1               	clrf	i1___wmul@multiplier+1
 15166  01C5  07F0               	addwf	i1___wmul@multiplier,f
 15167  01C6  1803               	skipnc
 15168  01C7  0AF1               	incf	i1___wmul@multiplier+1,f
 15169  01C8  0877               	movf	Led_DynamicStorm@ptp+1,w
 15170  01C9  00F3               	movwf	i1___wmul@multiplicand+1
 15171  01CA  0876               	movf	Led_DynamicStorm@ptp,w
 15172  01CB  00F2               	movwf	i1___wmul@multiplicand
 15173  01CC  2447  3180         	fcall	i1___wmul
 15174  01CE  0871               	movf	?i1___wmul+1,w
 15175  01CF  00CB               	movwf	Led_DynamicStorm@val+1
 15176  01D0  0870               	movf	?i1___wmul,w
 15177  01D1  00CA               	movwf	Led_DynamicStorm@val
 15178                           
 15179                           ;led.c: 511: uint16_t duty[5] = {0, 0, 600, 64, 0};
 15180  01D2  3054               	movlw	low Led_DynamicStorm@F8383
 15181  01D3  0086               	movwf	6
 15182  01D4  3001               	movlw	high Led_DynamicStorm@F8383
 15183  01D5  0087               	movwf	7
 15184  01D6  3040               	movlw	low Led_DynamicStorm@duty
 15185  01D7  0084               	movwf	4
 15186  01D8  3000               	movlw	high Led_DynamicStorm@duty
 15187  01D9  0085               	movwf	5
 15188  01DA  300A               	movlw	10
 15189  01DB  00F8               	movwf	??_Led_DynamicStorm
 15190  01DC                     u552_20:	
 15191  01DC  0016               	moviw fsr1++
 15192  01DD  001A               	movwi fsr0++
 15193  01DE  0BF8               	decfsz	??_Led_DynamicStorm,f
 15194  01DF  29DC               	goto	u552_20
 15195                           
 15196                           ;led.c: 512: if (duty[2] > val) {
 15197  01E0  0845               	movf	Led_DynamicStorm@duty+5,w
 15198  01E1  024B               	subwf	Led_DynamicStorm@val+1,w
 15199  01E2  1D03               	skipz
 15200  01E3  29E6               	goto	u553_25
 15201  01E4  0844               	movf	Led_DynamicStorm@duty+4,w
 15202  01E5  024A               	subwf	Led_DynamicStorm@val,w
 15203  01E6                     u553_25:	
 15204  01E6  1803               	skipnc
 15205  01E7  29ED               	goto	i1l6261
 15206                           
 15207                           ;led.c: 513: duty[2] -= val;
 15208  01E8  084A               	movf	Led_DynamicStorm@val,w
 15209  01E9  02C4               	subwf	Led_DynamicStorm@duty+4,f
 15210  01EA  084B               	movf	Led_DynamicStorm@val+1,w
 15211  01EB  3BC5               	subwfb	Led_DynamicStorm@duty+5,f
 15212                           
 15213                           ;led.c: 514: } else {
 15214  01EC  29EF               	goto	i1l6263
 15215  01ED                     i1l6261:	
 15216                           
 15217                           ;led.c: 515: duty[2] = 0;
 15218  01ED  01C4               	clrf	Led_DynamicStorm@duty+4
 15219  01EE  01C5               	clrf	Led_DynamicStorm@duty+5
 15220  01EF                     i1l6263:	
 15221                           
 15222                           ;led.c: 516: }
 15223                           ;led.c: 517: duty[3] += val;
 15224  01EF  084A               	movf	Led_DynamicStorm@val,w
 15225  01F0  07C6               	addwf	Led_DynamicStorm@duty+6,f
 15226  01F1  084B               	movf	Led_DynamicStorm@val+1,w
 15227  01F2  3DC7               	addwfc	Led_DynamicStorm@duty+7,f
 15228                           
 15229                           ;led.c: 518: if( duty[3] > 1000 )
 15230  01F3  3003               	movlw	3
 15231  01F4  0247               	subwf	Led_DynamicStorm@duty+7,w
 15232  01F5  30E9               	movlw	233
 15233  01F6  1903               	skipnz
 15234  01F7  0246               	subwf	Led_DynamicStorm@duty+6,w
 15235  01F8  1C03               	skipc
 15236  01F9  29FE               	goto	i1l6269
 15237                           
 15238                           ;led.c: 519: {
 15239                           ;led.c: 520: duty[3] = 1000;
 15240  01FA  30E8               	movlw	232
 15241  01FB  00C6               	movwf	Led_DynamicStorm@duty+6
 15242  01FC  3003               	movlw	3
 15243  01FD  00C7               	movwf	Led_DynamicStorm@duty+7
 15244  01FE                     i1l6269:	
 15245                           
 15246                           ;led.c: 521: }
 15247                           ;led.c: 522: for (i = 0; i < 5; i++) {
 15248  01FE  01CC               	clrf	Led_DynamicStorm@i
 15249  01FF                     i1l6275:	
 15250                           
 15251                           ;led.c: 523: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 15252  01FF  354C               	lslf	Led_DynamicStorm@i,w
 15253  0200  3E40               	addlw	(low (Led_DynamicStorm@duty| 0))& (0+255)
 15254  0201  2554  3180         	fcall	PL132	;call to abstracted procedure
 15255  0203  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15256  0204  24FE  3180         	fcall	PL80	;call to abstracted procedure
 15257  0206  1803               	skipnc
 15258  0207  2A0E               	goto	i1l6279
 15259                           
 15260                           ;led.c: 524: gLedRunPara.mCurrentBright[i]++;
 15261  0208  354C               	lslf	Led_DynamicStorm@i,w
 15262  0209  24E7  3180         	fcall	PL52	;call to abstracted procedure
 15263  020B  1803               	skipnc
 15264  020C  0A81               	incf	1,f
 15265                           
 15266                           ;led.c: 525: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 15267  020D  2A1A               	goto	i1l6283
 15268  020E                     i1l6279:	
 15269  020E  354C               	lslf	Led_DynamicStorm@i,w
 15270  020F  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15271  0210  2554  3180         	fcall	PL132	;call to abstracted procedure
 15272  0212  3E40               	addlw	(low (Led_DynamicStorm@duty| 0))& (0+255)
 15273  0213  24FE  3180         	fcall	PL80	;call to abstracted procedure
 15274  0215  1803               	skipnc
 15275  0216  2A1A               	goto	i1l6283
 15276                           
 15277                           ;led.c: 526: gLedRunPara.mCurrentBright[i]--;
 15278  0217  354C               	lslf	Led_DynamicStorm@i,w
 15279  0218  24CB  3180         	fcall	PL24	;call to abstracted procedure
 15280  021A                     i1l6283:	
 15281  021A  3005               	movlw	5
 15282  021B  0ACC               	incf	Led_DynamicStorm@i,f
 15283  021C  024C               	subwf	Led_DynamicStorm@i,w
 15284  021D  1C03               	skipc
 15285  021E  29FF               	goto	i1l6275
 15286                           
 15287                           ;led.c: 527: }
 15288                           ;led.c: 528: }
 15289                           ;led.c: 529: Led_UpdateBright();
 15290  021F  24A8               	fcall	i1_Led_UpdateBright
 15291  0220  0008               	return
 15292  0221                     __end_of_Led_DynamicStorm:	
 15293  0221                     __ptext81:	
 15294 ;; *************** function _Led_DynamicCloud *****************
 15295 ;; Defined at:
 15296 ;;		line 481 in file "user/src/led.c"
 15297 ;; Parameters:    Size  Location     Type
 15298 ;;  ptp             2    6[COMMON] unsigned int 
 15299 ;; Auto vars:     Size  Location     Type
 15300 ;;  duty           10    0[BANK0 ] unsigned int [5]
 15301 ;;  val             2   10[BANK0 ] unsigned int 
 15302 ;;  i               1   12[BANK0 ] unsigned char 
 15303 ;; Return value:  Size  Location     Type
 15304 ;;                  1    wreg      void 
 15305 ;; Registers used:
 15306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15307 ;; Tracked objects:
 15308 ;;		On entry : 1F/0
 15309 ;;		On exit  : 14/4
 15310 ;;		Unchanged: 0/0
 15311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15312 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15313 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15314 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15315 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15316 ;;Total ram usage:       19 bytes
 15317 ;; Hardware stack levels used:    1
 15318 ;; Hardware stack levels required when called:    2
 15319 ;; This function calls:
 15320 ;;		i1_Led_UpdateBright
 15321 ;;		i1___wmul
 15322 ;; This function is called by:
 15323 ;;		_Led_RunMusic
 15324 ;; This function uses a non-reentrant model
 15325 ;;
 15326                           
 15327                           
 15328                           ;psect for function _Led_DynamicCloud
 15329  0221                     _Led_DynamicCloud:	
 15330  0221                     i1l6213:	
 15331                           ;incstack = 0
 15332                           ; Regs used in _Led_DynamicCloud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15333                           
 15334                           
 15335                           ;led.c: 482: uint8_t i;
 15336                           ;led.c: 483: uint16_t val = ptp * ( 16 + GAIN[gLedPara.mVolume] );
 15337  0221  24BC  3180         	fcall	PL16	;call to abstracted procedure
 15338  0223  3010               	movlw	16
 15339  0224  01F1               	clrf	i1___wmul@multiplier+1
 15340  0225  07F0               	addwf	i1___wmul@multiplier,f
 15341  0226  1803               	skipnc
 15342  0227  0AF1               	incf	i1___wmul@multiplier+1,f
 15343  0228  0877               	movf	Led_DynamicCloud@ptp+1,w
 15344  0229  00F3               	movwf	i1___wmul@multiplicand+1
 15345  022A  0876               	movf	Led_DynamicCloud@ptp,w
 15346  022B  00F2               	movwf	i1___wmul@multiplicand
 15347  022C  2447  3180         	fcall	i1___wmul
 15348  022E  0871               	movf	?i1___wmul+1,w
 15349  022F  00CB               	movwf	Led_DynamicCloud@val+1
 15350  0230  0870               	movf	?i1___wmul,w
 15351  0231  00CA               	movwf	Led_DynamicCloud@val
 15352                           
 15353                           ;led.c: 484: uint16_t duty[5] = {200, 200, 400, 320, 400};
 15354  0232  30A0               	movlw	low Led_DynamicCloud@F8373
 15355  0233  0086               	movwf	6
 15356  0234  3000               	movlw	high Led_DynamicCloud@F8373
 15357  0235  0087               	movwf	7
 15358  0236  3040               	movlw	low Led_DynamicCloud@duty
 15359  0237  0084               	movwf	4
 15360  0238  3000               	movlw	high Led_DynamicCloud@duty
 15361  0239  0085               	movwf	5
 15362  023A  300A               	movlw	10
 15363  023B  00F8               	movwf	??_Led_DynamicCloud
 15364  023C                     u545_20:	
 15365  023C  0016               	moviw fsr1++
 15366  023D  001A               	movwi fsr0++
 15367  023E  0BF8               	decfsz	??_Led_DynamicCloud,f
 15368  023F  2A3C               	goto	u545_20
 15369                           
 15370                           ;led.c: 485: duty[2] += val;
 15371  0240  084A               	movf	Led_DynamicCloud@val,w
 15372  0241  07C4               	addwf	Led_DynamicCloud@duty+4,f
 15373  0242  084B               	movf	Led_DynamicCloud@val+1,w
 15374  0243  3DC5               	addwfc	Led_DynamicCloud@duty+5,f
 15375                           
 15376                           ;led.c: 486: if (duty[2] > 1000) {
 15377  0244  3003               	movlw	3
 15378  0245  0245               	subwf	Led_DynamicCloud@duty+5,w
 15379  0246  30E9               	movlw	233
 15380  0247  1903               	skipnz
 15381  0248  0244               	subwf	Led_DynamicCloud@duty+4,w
 15382  0249  1C03               	skipc
 15383  024A  2A4F               	goto	i1l775
 15384                           
 15385                           ;led.c: 487: duty[2] = 1000;
 15386  024B  30E8               	movlw	232
 15387  024C  00C4               	movwf	Led_DynamicCloud@duty+4
 15388  024D  3003               	movlw	3
 15389  024E  00C5               	movwf	Led_DynamicCloud@duty+5
 15390  024F                     i1l775:	
 15391                           
 15392                           ;led.c: 488: }
 15393                           ;led.c: 489: if (duty[3] > val) {
 15394  024F  0847               	movf	Led_DynamicCloud@duty+7,w
 15395  0250  024B               	subwf	Led_DynamicCloud@val+1,w
 15396  0251  1D03               	skipz
 15397  0252  2A55               	goto	u547_25
 15398  0253  0846               	movf	Led_DynamicCloud@duty+6,w
 15399  0254  024A               	subwf	Led_DynamicCloud@val,w
 15400  0255                     u547_25:	
 15401  0255  1803               	skipnc
 15402  0256  2A5C               	goto	i1l6225
 15403                           
 15404                           ;led.c: 490: duty[3] -= val;
 15405  0257  084A               	movf	Led_DynamicCloud@val,w
 15406  0258  02C6               	subwf	Led_DynamicCloud@duty+6,f
 15407  0259  084B               	movf	Led_DynamicCloud@val+1,w
 15408  025A  3BC7               	subwfb	Led_DynamicCloud@duty+7,f
 15409                           
 15410                           ;led.c: 491: } else {
 15411  025B  2A5E               	goto	i1l6227
 15412  025C                     i1l6225:	
 15413                           
 15414                           ;led.c: 492: duty[3] = 0;
 15415  025C  01C6               	clrf	Led_DynamicCloud@duty+6
 15416  025D  01C7               	clrf	Led_DynamicCloud@duty+7
 15417  025E                     i1l6227:	
 15418                           
 15419                           ;led.c: 493: }
 15420                           ;led.c: 494: duty[4] += val;
 15421  025E  084A               	movf	Led_DynamicCloud@val,w
 15422  025F  07C8               	addwf	Led_DynamicCloud@duty+8,f
 15423  0260  084B               	movf	Led_DynamicCloud@val+1,w
 15424  0261  3DC9               	addwfc	Led_DynamicCloud@duty+9,f
 15425                           
 15426                           ;led.c: 495: if (duty[4] > 1000) {
 15427  0262  3003               	movlw	3
 15428  0263  0249               	subwf	Led_DynamicCloud@duty+9,w
 15429  0264  30E9               	movlw	233
 15430  0265  1903               	skipnz
 15431  0266  0248               	subwf	Led_DynamicCloud@duty+8,w
 15432  0267  1C03               	skipc
 15433  0268  2A6D               	goto	i1l6233
 15434                           
 15435                           ;led.c: 496: duty[4] = 1000;
 15436  0269  30E8               	movlw	232
 15437  026A  00C8               	movwf	Led_DynamicCloud@duty+8
 15438  026B  3003               	movlw	3
 15439  026C  00C9               	movwf	Led_DynamicCloud@duty+9
 15440  026D                     i1l6233:	
 15441                           
 15442                           ;led.c: 497: }
 15443                           ;led.c: 498: for (i = 0; i < 5; i++) {
 15444  026D  01CC               	clrf	Led_DynamicCloud@i
 15445  026E                     i1l6239:	
 15446                           
 15447                           ;led.c: 499: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 15448  026E  354C               	lslf	Led_DynamicCloud@i,w
 15449  026F  3E40               	addlw	(low (Led_DynamicCloud@duty| 0))& (0+255)
 15450  0270  2574  3180         	fcall	PL144	;call to abstracted procedure
 15451  0272  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15452  0273  2516  3180         	fcall	PL98	;call to abstracted procedure
 15453  0275  1803               	skipnc
 15454  0276  2A7D               	goto	i1l6243
 15455                           
 15456                           ;led.c: 500: gLedRunPara.mCurrentBright[i]++;
 15457  0277  354C               	lslf	Led_DynamicCloud@i,w
 15458  0278  24E7  3180         	fcall	PL52	;call to abstracted procedure
 15459  027A  1803               	skipnc
 15460  027B  0A81               	incf	1,f
 15461                           
 15462                           ;led.c: 501: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 15463  027C  2A89               	goto	i1l6247
 15464  027D                     i1l6243:	
 15465  027D  354C               	lslf	Led_DynamicCloud@i,w
 15466  027E  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15467  027F  2574  3180         	fcall	PL144	;call to abstracted procedure
 15468  0281  3E40               	addlw	(low (Led_DynamicCloud@duty| 0))& (0+255)
 15469  0282  2516  3180         	fcall	PL98	;call to abstracted procedure
 15470  0284  1803               	skipnc
 15471  0285  2A89               	goto	i1l6247
 15472                           
 15473                           ;led.c: 502: gLedRunPara.mCurrentBright[i]--;
 15474  0286  354C               	lslf	Led_DynamicCloud@i,w
 15475  0287  24CB  3180         	fcall	PL24	;call to abstracted procedure
 15476  0289                     i1l6247:	
 15477  0289  3005               	movlw	5
 15478  028A  0ACC               	incf	Led_DynamicCloud@i,f
 15479  028B  024C               	subwf	Led_DynamicCloud@i,w
 15480  028C  1C03               	skipc
 15481  028D  2A6E               	goto	i1l6239
 15482                           
 15483                           ;led.c: 503: }
 15484                           ;led.c: 504: }
 15485                           ;led.c: 505: Led_UpdateBright();
 15486  028E  24A8               	fcall	i1_Led_UpdateBright
 15487  028F  0008               	return
 15488  0290                     __end_of_Led_DynamicCloud:	
 15489  0290                     __ptext91:	
 15490 ;; *************** function _IR_ScanLongPress *****************
 15491 ;; Defined at:
 15492 ;;		line 335 in file "user/src/ir.c"
 15493 ;; Parameters:    Size  Location     Type
 15494 ;;		None
 15495 ;; Auto vars:     Size  Location     Type
 15496 ;;  i               1    9[BANK0 ] unsigned char 
 15497 ;;  i               1    8[BANK0 ] unsigned char 
 15498 ;;  idx             1   10[BANK0 ] unsigned char 
 15499 ;; Return value:  Size  Location     Type
 15500 ;;                  1    wreg      void 
 15501 ;; Registers used:
 15502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15503 ;; Tracked objects:
 15504 ;;		On entry : 1F/0
 15505 ;;		On exit  : 16/0
 15506 ;;		Unchanged: 0/0
 15507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15509 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15510 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15512 ;;Total ram usage:        7 bytes
 15513 ;; Hardware stack levels used:    1
 15514 ;; Hardware stack levels required when called:    2
 15515 ;; This function calls:
 15516 ;;		_Led_SetCustom
 15517 ;;		i1_IR_GetIndex
 15518 ;;		i1_Led_StartNotice
 15519 ;;		i1_Util_DecValue
 15520 ;;		i1_Util_IncValue
 15521 ;; This function is called by:
 15522 ;;		_Led_Run
 15523 ;; This function uses a non-reentrant model
 15524 ;;
 15525                           
 15526                           
 15527                           ;psect for function _IR_ScanLongPress
 15528  0290                     _IR_ScanLongPress:	
 15529                           
 15530                           ;ir.c: 338: if (!ir_state.mKeyRpt) {
 15531                           
 15532                           ;incstack = 0
 15533                           ; Regs used in _IR_ScanLongPress: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15534  0290  18B6               	btfsc	_ir_state,1	;volatile
 15535  0291  2B3F               	goto	i1l4573
 15536                           
 15537                           ;ir.c: 339: cnt = 0;
 15538  0292  01A0               	clrf	IR_ScanLongPress@cnt
 15539  0293  01A1               	clrf	IR_ScanLongPress@cnt+1
 15540  0294  0008               	return
 15541  0295                     i1l1112:	
 15542  0295                     i1l4461:	
 15543                           
 15544                           ;ir.c: 344: case 0x59:
 15545                           ;ir.c: 345: case 0x45:
 15546                           ;ir.c: 346: case 0x44:
 15547                           ;ir.c: 347: case 0x41:
 15548                           ;ir.c: 348: idx = IR_GetIndex(keyValue);
 15549  0295  0830               	movf	_keyValue,w	;volatile
 15550  0296  237B  3180         	fcall	i1_IR_GetIndex
 15551  0298  00CA               	movwf	IR_ScanLongPress@idx
 15552                           
 15553                           ;ir.c: 349: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 1000, 1);
 15554  0299  354A               	lslf	IR_ScanLongPress@idx,w
 15555  029A  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15556  029B  00F0               	movwf	i1Util_IncValue@pSrc
 15557  029C  30E8               	movlw	232
 15558  029D  01F1               	clrf	i1Util_IncValue@pSrc+1
 15559  029E  00F2               	movwf	i1Util_IncValue@max
 15560  029F  3003               	movlw	3
 15561  02A0  00F3               	movwf	i1Util_IncValue@max+1
 15562  02A1  01F4               	clrf	i1Util_IncValue@delta
 15563  02A2  0AF4               	incf	i1Util_IncValue@delta,f
 15564  02A3  01F5               	clrf	i1Util_IncValue@delta+1
 15565  02A4  2482  3180         	fcall	i1_Util_IncValue
 15566  02A6                     L21:	
 15567                           
 15568                           ;ir.c: 350: if (ir_state.mSet == 0) {
 15569  02A6  0E36               	swapf	_ir_state,w	;volatile
 15570  02A7  0C89               	rrf	9,f
 15571  02A8  3907               	andlw	7
 15572  02A9  1D03               	skipz
 15573  02AA  0008               	return
 15574                           
 15575                           ;ir.c: 351: gLedPara.mBright[idx] = gLedRunPara.mTargetBright[idx];
 15576  02AB  354A               	lslf	IR_ScanLongPress@idx,w
 15577  02AC  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15578  02AD  0086               	movwf	6
 15579  02AE  0187               	clrf	7
 15580  02AF  084A               	movf	IR_ScanLongPress@idx,w
 15581  02B0  00C4               	movwf	??_IR_ScanLongPress
 15582  02B1  307E               	movlw	126
 15583  02B2  24F5               	fcall	PL70	;call to abstracted procedure
 15584  02B3  0084               	movwf	4
 15585  02B4  0845               	movf	??_IR_ScanLongPress+1,w
 15586  02B5  3D47               	addwfc	??_IR_ScanLongPress+3,w
 15587  02B6  3197  2767         	fcall	PL58	;call to abstracted procedure
 15588  02B8  0008               	return
 15589  02B9                     i1l1119:	
 15590  02B9                     i1l4469:	
 15591                           
 15592                           ;ir.c: 355: case 0x55:
 15593                           ;ir.c: 356: case 0x49:
 15594                           ;ir.c: 357: case 0x48:
 15595                           ;ir.c: 358: case 0x40:
 15596                           ;ir.c: 359: idx = IR_GetIndex(keyValue);
 15597  02B9  0830               	movf	_keyValue,w	;volatile
 15598  02BA  237B  3180         	fcall	i1_IR_GetIndex
 15599  02BC  00CA               	movwf	IR_ScanLongPress@idx
 15600                           
 15601                           ;ir.c: 360: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 0, 1);
 15602  02BD  354A               	lslf	IR_ScanLongPress@idx,w
 15603  02BE  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15604  02BF  00F0               	movwf	i1Util_DecValue@pSrc
 15605  02C0  01F1               	clrf	i1Util_DecValue@pSrc+1
 15606  02C1  01F2               	clrf	i1Util_DecValue@min
 15607  02C2  01F3               	clrf	i1Util_DecValue@min+1
 15608  02C3  01F4               	clrf	i1Util_DecValue@delta
 15609  02C4  0AF4               	incf	i1Util_DecValue@delta,f
 15610  02C5  01F5               	clrf	i1Util_DecValue@delta+1
 15611  02C6  245C  3180         	fcall	i1_Util_DecValue
 15612  02C8  2AA6               	goto	L21
 15613  02C9                     i1l1124:	
 15614                           ;ir.c: 361: if (ir_state.mSet == 0) {
 15615                           
 15616  02C9                     i1l4477:	
 15617                           
 15618                           ;ir.c: 366: case 0x51:
 15619                           ;ir.c: 367: case 0x4D:
 15620                           ;ir.c: 368: case 0x4C:
 15621                           ;ir.c: 369: cnt++;
 15622                           
 15623                           ;ir.c: 370: if (cnt == 0x200) {
 15624  02C9  24EE  3180         	fcall	PL54	;call to abstracted procedure
 15625  02CB  1D03               	btfss	3,2
 15626  02CC  0008               	return
 15627                           
 15628                           ;ir.c: 371: ir_state.mKeyRpt = 0;
 15629  02CD  10B6               	bcf	_ir_state,1	;volatile
 15630                           
 15631                           ;ir.c: 372: idx = IR_GetIndex(keyValue);
 15632  02CE  0830               	movf	_keyValue,w	;volatile
 15633  02CF  237B  3180         	fcall	i1_IR_GetIndex
 15634  02D1  00CA               	movwf	IR_ScanLongPress@idx
 15635                           
 15636                           ;ir.c: 373: Led_SetCustom(idx, (uint16_t*) gLedRunPara.mTargetBright);
 15637  02D2  30D2               	movlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15638  02D3  00F6               	movwf	Led_SetCustom@pValue
 15639  02D4  084A               	movf	IR_ScanLongPress@idx,w
 15640  02D5  240A  3180         	fcall	_Led_SetCustom
 15641                           
 15642                           ;ir.c: 374: Led_StartNotice(1);
 15643  02D7  3001               	movlw	1
 15644  02D8  23FE               	fcall	i1_Led_StartNotice
 15645                           
 15646                           ;ir.c: 375: gLedRunPara.mParaChanged = 1;
 15647  02D9  0021               	movlb	1	; select bank1
 15648  02DA  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 15649  02DB  0008               	return
 15650  02DC                     i1l4491:	
 15651                           
 15652                           ;ir.c: 380: cnt++;
 15653                           
 15654                           ;ir.c: 381: if (cnt == 0x200) {
 15655  02DC  24EE  3180         	fcall	PL54	;call to abstracted procedure
 15656  02DE  1D03               	btfss	3,2
 15657  02DF  0008               	return
 15658                           
 15659                           ;ir.c: 382: ir_state.mKeyRpt = 0;
 15660  02E0  10B6               	bcf	_ir_state,1	;volatile
 15661                           
 15662                           ;ir.c: 383: ir_state.mSet = 2;
 15663  02E1  0836               	movf	_ir_state,w	;volatile
 15664  02E2  391F               	andlw	-225
 15665  02E3  3840               	iorlw	64
 15666  02E4  00B6               	movwf	_ir_state	;volatile
 15667                           
 15668                           ;ir.c: 384: ir_state.tmIdx = 0;
 15669  02E5  01B7               	clrf	_ir_state+1	;volatile
 15670                           
 15671                           ;ir.c: 385: Led_StartNotice(1);
 15672  02E6  3001               	movlw	1
 15673  02E7  23FE               	fcall	i1_Led_StartNotice
 15674  02E8  0008               	return
 15675  02E9                     i1l4503:	
 15676                           
 15677                           ;ir.c: 390: cnt++;
 15678                           
 15679                           ;ir.c: 391: if (cnt == 0x200) {
 15680  02E9  24EE  3180         	fcall	PL54	;call to abstracted procedure
 15681  02EB  1D03               	btfss	3,2
 15682  02EC  0008               	return
 15683                           
 15684                           ;ir.c: 392: ir_state.mKeyRpt = 0;
 15685  02ED  10B6               	bcf	_ir_state,1	;volatile
 15686                           
 15687                           ;ir.c: 393: ir_state.mSet = 3;
 15688  02EE  0836               	movf	_ir_state,w	;volatile
 15689  02EF  391F               	andlw	-225
 15690  02F0  3860               	iorlw	96
 15691  02F1  00B6               	movwf	_ir_state	;volatile
 15692                           
 15693                           ;ir.c: 394: ir_state.tmIdx = 0;
 15694  02F2  01B7               	clrf	_ir_state+1	;volatile
 15695                           
 15696                           ;ir.c: 395: Led_StartNotice(1);
 15697  02F3  3001               	movlw	1
 15698  02F4  23FE               	fcall	i1_Led_StartNotice
 15699  02F5  0008               	return
 15700  02F6                     i1l4515:	
 15701                           
 15702                           ;ir.c: 400: cnt++;
 15703                           
 15704                           ;ir.c: 401: if (cnt == 0x200) {
 15705  02F6  24EE  3180         	fcall	PL54	;call to abstracted procedure
 15706  02F8  1D03               	btfss	3,2
 15707  02F9  0008               	return
 15708                           
 15709                           ;ir.c: 402: ir_state.mKeyRpt = 0;
 15710  02FA  10B6               	bcf	_ir_state,1	;volatile
 15711                           
 15712                           ;ir.c: 403: ir_state.mSet = 4;
 15713  02FB  0836               	movf	_ir_state,w	;volatile
 15714  02FC  391F               	andlw	-225
 15715  02FD  3880               	iorlw	128
 15716  02FE  00B6               	movwf	_ir_state	;volatile
 15717                           
 15718                           ;ir.c: 404: for (uint8_t i = 0; i < 5; i++) {
 15719  02FF  01C8               	clrf	IR_ScanLongPress@i
 15720  0300                     i1l4529:	
 15721                           
 15722                           ;ir.c: 405: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
 15723  0300  0848               	movf	IR_ScanLongPress@i,w
 15724  0301  00C4               	movwf	??_IR_ScanLongPress
 15725  0302  30DA               	movlw	218
 15726  0303  24F5               	fcall	PL70	;call to abstracted procedure
 15727  0304  0086               	movwf	6
 15728  0305  0845               	movf	??_IR_ScanLongPress+1,w
 15729  0306  3D47               	addwfc	??_IR_ScanLongPress+3,w
 15730  0307  0087               	movwf	7
 15731  0308  3548               	lslf	IR_ScanLongPress@i,w
 15732  0309  318D  25EB  3180   	fcall	PL22	;call to abstracted procedure
 15733  030C  3005               	movlw	5
 15734  030D  0AC8               	incf	IR_ScanLongPress@i,f
 15735  030E  0248               	subwf	IR_ScanLongPress@i,w
 15736  030F  1C03               	skipc
 15737  0310  2B00               	goto	i1l4529
 15738                           
 15739                           ;ir.c: 406: }
 15740                           ;ir.c: 407: Led_StartNotice(1);
 15741  0311  3001               	movlw	1
 15742  0312  23FE               	fcall	i1_Led_StartNotice
 15743  0313  0008               	return
 15744  0314                     i1l4537:	
 15745                           
 15746                           ;ir.c: 411: cnt++;
 15747                           
 15748                           ;ir.c: 412: if (cnt == 0x200) {
 15749  0314  24EE  3180         	fcall	PL54	;call to abstracted procedure
 15750  0316  1D03               	btfss	3,2
 15751  0317  0008               	return
 15752                           
 15753                           ;ir.c: 413: ir_state.mKeyRpt = 0;
 15754  0318  10B6               	bcf	_ir_state,1	;volatile
 15755                           
 15756                           ;ir.c: 414: ir_state.mSet = 5;
 15757  0319  0836               	movf	_ir_state,w	;volatile
 15758  031A  391F               	andlw	-225
 15759  031B  38A0               	iorlw	160
 15760  031C  00B6               	movwf	_ir_state	;volatile
 15761                           
 15762                           ;ir.c: 415: for (uint8_t i = 0; i < 5; i++) {
 15763  031D  01C9               	clrf	IR_ScanLongPress@i_1441
 15764  031E                     i1l4551:	
 15765                           
 15766                           ;ir.c: 416: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
 15767  031E  0849               	movf	IR_ScanLongPress@i_1441,w
 15768  031F  00C4               	movwf	??_IR_ScanLongPress
 15769  0320  30E6               	movlw	230
 15770  0321  24F5               	fcall	PL70	;call to abstracted procedure
 15771  0322  0086               	movwf	6
 15772  0323  0845               	movf	??_IR_ScanLongPress+1,w
 15773  0324  3D47               	addwfc	??_IR_ScanLongPress+3,w
 15774  0325  0087               	movwf	7
 15775  0326  3549               	lslf	IR_ScanLongPress@i_1441,w
 15776  0327  318D  25EB  3180   	fcall	PL22	;call to abstracted procedure
 15777  032A  3005               	movlw	5
 15778  032B  0AC9               	incf	IR_ScanLongPress@i_1441,f
 15779  032C  0249               	subwf	IR_ScanLongPress@i_1441,w
 15780  032D  1C03               	skipc
 15781  032E  2B1E               	goto	i1l4551
 15782                           
 15783                           ;ir.c: 417: }
 15784                           ;ir.c: 418: Led_StartNotice(1);
 15785  032F  3001               	movlw	1
 15786  0330  23FE               	fcall	i1_Led_StartNotice
 15787  0331  0008               	return
 15788  0332                     i1l4559:	
 15789                           
 15790                           ;ir.c: 422: cnt++;
 15791                           
 15792                           ;ir.c: 423: if (cnt == 0x200) {
 15793  0332  24EE  3180         	fcall	PL54	;call to abstracted procedure
 15794  0334  1D03               	btfss	3,2
 15795  0335  0008               	return
 15796                           
 15797                           ;ir.c: 424: ir_state.mKeyRpt = 0;
 15798  0336  10B6               	bcf	_ir_state,1	;volatile
 15799                           
 15800                           ;ir.c: 425: ir_state.mSet = 1;
 15801  0337  0836               	movf	_ir_state,w	;volatile
 15802  0338  391F               	andlw	-225
 15803  0339  3820               	iorlw	32
 15804  033A  00B6               	movwf	_ir_state	;volatile
 15805                           
 15806                           ;ir.c: 426: ir_state.tmIdx = 0;
 15807  033B  01B7               	clrf	_ir_state+1	;volatile
 15808                           
 15809                           ;ir.c: 427: Led_StartNotice(1);
 15810  033C  3001               	movlw	1
 15811  033D  23FE               	fcall	i1_Led_StartNotice
 15812  033E  0008               	return
 15813  033F                     i1l4573:	
 15814  033F  0830               	movf	_keyValue,w	;volatile
 15815                           
 15816                           ; Switch size 1, requested type "space"
 15817                           ; Number of cases is 19, Range of values is 6 to 89
 15818                           ; switch strategies available:
 15819                           ; Name         Instructions Cycles
 15820                           ; simple_byte           58    30 (average)
 15821                           ; direct_byte          177     9 (fixed)
 15822                           ; jumptable            263     9 (fixed)
 15823                           ;	Chosen strategy is simple_byte
 15824  0340  3A06               	xorlw	6	; case 6
 15825  0341  1903               	skipnz
 15826  0342  2B32               	goto	i1l4559
 15827  0343  3A16               	xorlw	22	; case 16
 15828  0344  1903               	skipnz
 15829  0345  2ADC               	goto	i1l4491
 15830  0346  3A01               	xorlw	1	; case 17
 15831  0347  1903               	skipnz
 15832  0348  2AF6               	goto	i1l4515
 15833  0349  3A03               	xorlw	3	; case 18
 15834  034A  1903               	skipnz
 15835  034B  2AE9               	goto	i1l4503
 15836  034C  3A01               	xorlw	1	; case 19
 15837  034D  1903               	skipnz
 15838  034E  2B14               	goto	i1l4537
 15839  034F  3A53               	xorlw	83	; case 64
 15840  0350  1903               	skipnz
 15841  0351  2AB9               	goto	i1l4469
 15842  0352  3A01               	xorlw	1	; case 65
 15843  0353  1903               	skipnz
 15844  0354  2A95               	goto	i1l4461
 15845  0355  3A05               	xorlw	5	; case 68
 15846  0356  1903               	skipnz
 15847  0357  2A95               	goto	i1l4461
 15848  0358  3A01               	xorlw	1	; case 69
 15849  0359  1903               	skipnz
 15850  035A  2A95               	goto	i1l4461
 15851  035B  3A0D               	xorlw	13	; case 72
 15852  035C  1903               	skipnz
 15853  035D  2AB9               	goto	i1l4469
 15854  035E  3A01               	xorlw	1	; case 73
 15855  035F  1903               	skipnz
 15856  0360  2AB9               	goto	i1l4469
 15857  0361  3A05               	xorlw	5	; case 76
 15858  0362  1903               	skipnz
 15859  0363  2AC9               	goto	i1l4477
 15860  0364  3A01               	xorlw	1	; case 77
 15861  0365  1903               	skipnz
 15862  0366  2AC9               	goto	i1l4477
 15863  0367  3A1D               	xorlw	29	; case 80
 15864  0368  1903               	skipnz
 15865  0369  2AC9               	goto	i1l1124
 15866  036A  3A01               	xorlw	1	; case 81
 15867  036B  1903               	skipnz
 15868  036C  2AC9               	goto	i1l4477
 15869  036D  3A05               	xorlw	5	; case 84
 15870  036E  1903               	skipnz
 15871  036F  2AB9               	goto	i1l1119
 15872  0370  3A01               	xorlw	1	; case 85
 15873  0371  1903               	skipnz
 15874  0372  2AB9               	goto	i1l4469
 15875  0373  3A0D               	xorlw	13	; case 88
 15876  0374  1903               	skipnz
 15877  0375  2A95               	goto	i1l1112
 15878  0376  3A01               	xorlw	1	; case 89
 15879  0377  1903               	skipnz
 15880  0378  2A95               	goto	i1l4461
 15881  0379  2B7A               	goto	i1l1107
 15882  037A                     i1l1107:	
 15883  037A  0008               	return
 15884  037B                     __end_of_IR_ScanLongPress:	
 15885  037B                     __ptext96:	
 15886 ;; *************** function i1_IR_GetIndex *****************
 15887 ;; Defined at:
 15888 ;;		line 10 in file "user/src/ir.c"
 15889 ;; Parameters:    Size  Location     Type
 15890 ;;  keynum          1    wreg     unsigned char 
 15891 ;; Auto vars:     Size  Location     Type
 15892 ;;  keynum          1    1[COMMON] unsigned char 
 15893 ;;  IR_GetIndex     1    0[COMMON] unsigned char 
 15894 ;; Return value:  Size  Location     Type
 15895 ;;                  1    wreg      unsigned char 
 15896 ;; Registers used:
 15897 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15898 ;; Tracked objects:
 15899 ;;		On entry : 1F/0
 15900 ;;		On exit  : 1F/0
 15901 ;;		Unchanged: 1F/0
 15902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15904 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15906 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15907 ;;Total ram usage:        2 bytes
 15908 ;; Hardware stack levels used:    1
 15909 ;; This function calls:
 15910 ;;		Nothing
 15911 ;; This function is called by:
 15912 ;;		_IR_ScanLongPress
 15913 ;; This function uses a non-reentrant model
 15914 ;;
 15915                           
 15916                           
 15917                           ;psect for function i1_IR_GetIndex
 15918  037B                     i1_IR_GetIndex:	
 15919                           
 15920                           ;incstack = 0
 15921                           ; Regs used in i1_IR_GetIndex: [wreg-fsr0h+status,2+status,0]
 15922                           ;i1IR_GetIndex@keynum stored from wreg
 15923  037B  00F1               	movwf	i1IR_GetIndex@keynum
 15924                           
 15925                           ;ir.c: 11: uint8_t idx = 0xFF;
 15926  037C  30FF               	movlw	255
 15927  037D  00F0               	movwf	i1IR_GetIndex@idx
 15928                           
 15929                           ;ir.c: 12: switch (keynum) {
 15930  037E  2B9A               	goto	i1l4303
 15931  037F                     i1l4283:	
 15932                           
 15933                           ;ir.c: 14: case 0x54:
 15934                           ;ir.c: 15: case 0x50:
 15935                           ;ir.c: 16: idx = 0;
 15936  037F  01F0               	clrf	i1IR_GetIndex@idx
 15937                           
 15938                           ;ir.c: 17: break;
 15939  0380  2BFC               	goto	i1l4305
 15940  0381                     i1l904:	
 15941                           
 15942                           ;ir.c: 19: case 0x55:
 15943                           ;ir.c: 20: case 0x51:
 15944                           ;ir.c: 21: idx = 1;
 15945  0381  01F0               	clrf	i1IR_GetIndex@idx
 15946  0382  0AF0               	incf	i1IR_GetIndex@idx,f
 15947                           
 15948                           ;ir.c: 22: break;
 15949  0383  2BFC               	goto	i1l4305
 15950  0384                     i1l4285:	
 15951                           
 15952                           ;ir.c: 24: case 0x49:
 15953                           ;ir.c: 25: case 0x4D:
 15954                           ;ir.c: 26: idx = 2;
 15955  0384  3002               	movlw	2
 15956  0385  2B98               	goto	L30
 15957  0386                     i1l4287:	
 15958                           ;ir.c: 27: break;
 15959                           
 15960                           
 15961                           ;ir.c: 29: case 0x44:
 15962                           ;ir.c: 30: case 0x4C:
 15963                           ;ir.c: 31: idx = 3;
 15964  0386  3003               	movlw	3
 15965  0387  2B98               	goto	L30
 15966  0388                     i1l4289:	
 15967                           ;ir.c: 32: break;
 15968                           
 15969                           
 15970                           ;ir.c: 34: case 0x40:
 15971                           ;ir.c: 35: idx = 4;
 15972  0388  3004               	movlw	4
 15973  0389  2B98               	goto	L30
 15974  038A                     i1l915:	
 15975                           ;ir.c: 36: break;
 15976                           
 15977  038A                     i1l4291:	
 15978                           
 15979                           ;ir.c: 38: case 0x1D:
 15980                           ;ir.c: 39: case 0x1E:
 15981                           ;ir.c: 40: case 0x1F:
 15982                           ;ir.c: 41: idx = keynum - 0x1C + 1;
 15983  038A  0871               	movf	i1IR_GetIndex@keynum,w
 15984  038B  3EE5               	addlw	229
 15985  038C  2B98               	goto	L30
 15986  038D                     i1l919:	
 15987                           ;ir.c: 42: break;
 15988                           
 15989  038D                     i1l4293:	
 15990                           
 15991                           ;ir.c: 44: case 0x15:
 15992                           ;ir.c: 45: case 0x16:
 15993                           ;ir.c: 46: case 0x17:
 15994                           ;ir.c: 47: idx = keynum - 0x14 + 5;
 15995  038D  0871               	movf	i1IR_GetIndex@keynum,w
 15996  038E  3EF1               	addlw	241
 15997  038F  2B98               	goto	L30
 15998  0390                     i1l923:	
 15999                           ;ir.c: 48: break;
 16000                           
 16001  0390                     i1l4295:	
 16002                           
 16003                           ;ir.c: 50: case 0x0D:
 16004                           ;ir.c: 51: case 0x0E:
 16005                           ;ir.c: 52: case 0x0F:
 16006                           ;ir.c: 53: idx = keynum - 0x0C;
 16007  0390  0871               	movf	i1IR_GetIndex@keynum,w
 16008  0391  3EF4               	addlw	244
 16009  0392  2B98               	goto	L30
 16010  0393                     i1l927:	
 16011                           ;ir.c: 54: break;
 16012                           
 16013  0393                     i1l4297:	
 16014                           
 16015                           ;ir.c: 56: case 0x09:
 16016                           ;ir.c: 57: case 0x0A:
 16017                           ;ir.c: 58: case 0x0B:
 16018                           ;ir.c: 59: idx = keynum - 0x08 + 4;
 16019  0393  0871               	movf	i1IR_GetIndex@keynum,w
 16020  0394  3EFC               	addlw	252
 16021  0395  2B98               	goto	L30
 16022  0396                     i1l4299:	
 16023                           ;ir.c: 60: break;
 16024                           
 16025                           
 16026                           ;ir.c: 62: case 0x05:
 16027                           ;ir.c: 63: idx = keynum - 0x04 + 8;
 16028  0396  0871               	movf	i1IR_GetIndex@keynum,w
 16029  0397  3E04               	addlw	4
 16030  0398                     L30:	
 16031  0398  00F0               	movwf	i1IR_GetIndex@idx
 16032                           
 16033                           ;ir.c: 64: break;
 16034  0399  2BFC               	goto	i1l4305
 16035  039A                     i1l4303:	
 16036  039A  0871               	movf	i1IR_GetIndex@keynum,w
 16037                           
 16038                           ; Switch size 1, requested type "space"
 16039                           ; Number of cases is 32, Range of values is 4 to 89
 16040                           ; switch strategies available:
 16041                           ; Name         Instructions Cycles
 16042                           ; simple_byte           97    49 (average)
 16043                           ; direct_byte          181     9 (fixed)
 16044                           ; jumptable            263     9 (fixed)
 16045                           ;	Chosen strategy is simple_byte
 16046  039B  3A04               	xorlw	4	; case 4
 16047  039C  1903               	skipnz
 16048  039D  2B96               	goto	i1l4299
 16049  039E  3A01               	xorlw	1	; case 5
 16050  039F  1903               	skipnz
 16051  03A0  2B96               	goto	i1l4299
 16052  03A1  3A0D               	xorlw	13	; case 8
 16053  03A2  1903               	skipnz
 16054  03A3  2B93               	goto	i1l927
 16055  03A4  3A01               	xorlw	1	; case 9
 16056  03A5  1903               	skipnz
 16057  03A6  2B93               	goto	i1l4297
 16058  03A7  3A03               	xorlw	3	; case 10
 16059  03A8  1903               	skipnz
 16060  03A9  2B93               	goto	i1l4297
 16061  03AA  3A01               	xorlw	1	; case 11
 16062  03AB  1903               	skipnz
 16063  03AC  2B93               	goto	i1l4297
 16064  03AD  3A07               	xorlw	7	; case 12
 16065  03AE  1903               	skipnz
 16066  03AF  2B90               	goto	i1l923
 16067  03B0  3A01               	xorlw	1	; case 13
 16068  03B1  1903               	skipnz
 16069  03B2  2B90               	goto	i1l4295
 16070  03B3  3A03               	xorlw	3	; case 14
 16071  03B4  1903               	skipnz
 16072  03B5  2B90               	goto	i1l4295
 16073  03B6  3A01               	xorlw	1	; case 15
 16074  03B7  1903               	skipnz
 16075  03B8  2B90               	goto	i1l4295
 16076  03B9  3A1B               	xorlw	27	; case 20
 16077  03BA  1903               	skipnz
 16078  03BB  2B8D               	goto	i1l919
 16079  03BC  3A01               	xorlw	1	; case 21
 16080  03BD  1903               	skipnz
 16081  03BE  2B8D               	goto	i1l4293
 16082  03BF  3A03               	xorlw	3	; case 22
 16083  03C0  1903               	skipnz
 16084  03C1  2B8D               	goto	i1l4293
 16085  03C2  3A01               	xorlw	1	; case 23
 16086  03C3  1903               	skipnz
 16087  03C4  2B8D               	goto	i1l4293
 16088  03C5  3A0B               	xorlw	11	; case 28
 16089  03C6  1903               	skipnz
 16090  03C7  2B8A               	goto	i1l915
 16091  03C8  3A01               	xorlw	1	; case 29
 16092  03C9  1903               	skipnz
 16093  03CA  2B8A               	goto	i1l4291
 16094  03CB  3A03               	xorlw	3	; case 30
 16095  03CC  1903               	skipnz
 16096  03CD  2B8A               	goto	i1l4291
 16097  03CE  3A01               	xorlw	1	; case 31
 16098  03CF  1903               	skipnz
 16099  03D0  2B8A               	goto	i1l4291
 16100  03D1  3A5F               	xorlw	95	; case 64
 16101  03D2  1903               	skipnz
 16102  03D3  2B88               	goto	i1l4289
 16103  03D4  3A01               	xorlw	1	; case 65
 16104  03D5  1903               	skipnz
 16105  03D6  2B88               	goto	i1l4289
 16106  03D7  3A05               	xorlw	5	; case 68
 16107  03D8  1903               	skipnz
 16108  03D9  2B86               	goto	i1l4287
 16109  03DA  3A01               	xorlw	1	; case 69
 16110  03DB  1903               	skipnz
 16111  03DC  2B84               	goto	i1l4285
 16112  03DD  3A0D               	xorlw	13	; case 72
 16113  03DE  1903               	skipnz
 16114  03DF  2B86               	goto	i1l4287
 16115  03E0  3A01               	xorlw	1	; case 73
 16116  03E1  1903               	skipnz
 16117  03E2  2B84               	goto	i1l4285
 16118  03E3  3A05               	xorlw	5	; case 76
 16119  03E4  1903               	skipnz
 16120  03E5  2B86               	goto	i1l4287
 16121  03E6  3A01               	xorlw	1	; case 77
 16122  03E7  1903               	skipnz
 16123  03E8  2B84               	goto	i1l4285
 16124  03E9  3A1D               	xorlw	29	; case 80
 16125  03EA  1903               	skipnz
 16126  03EB  2B7F               	goto	i1l4283
 16127  03EC  3A01               	xorlw	1	; case 81
 16128  03ED  1903               	skipnz
 16129  03EE  2B81               	goto	i1l904
 16130  03EF  3A05               	xorlw	5	; case 84
 16131  03F0  1903               	skipnz
 16132  03F1  2B7F               	goto	i1l4283
 16133  03F2  3A01               	xorlw	1	; case 85
 16134  03F3  1903               	skipnz
 16135  03F4  2B81               	goto	i1l904
 16136  03F5  3A0D               	xorlw	13	; case 88
 16137  03F6  1903               	skipnz
 16138  03F7  2B7F               	goto	i1l4283
 16139  03F8  3A01               	xorlw	1	; case 89
 16140  03F9  1903               	skipnz
 16141  03FA  2B81               	goto	i1l904
 16142  03FB  2BFC               	goto	i1l4305
 16143  03FC                     i1l4305:	
 16144                           
 16145                           ;ir.c: 68: return idx;
 16146  03FC  0870               	movf	i1IR_GetIndex@idx,w
 16147  03FD  0008               	return
 16148  03FE                     __end_ofi1_IR_GetIndex:	
 16149  03FE                     __ptext94:	
 16150 ;; *************** function i1_Led_StartNotice *****************
 16151 ;; Defined at:
 16152 ;;		line 419 in file "user/src/led.c"
 16153 ;; Parameters:    Size  Location     Type
 16154 ;;  cnt             1    wreg     unsigned char 
 16155 ;; Auto vars:     Size  Location     Type
 16156 ;;  cnt             1    1[COMMON] unsigned char 
 16157 ;; Return value:  Size  Location     Type
 16158 ;;                  1    wreg      void 
 16159 ;; Registers used:
 16160 ;;		wreg, status,2, status,0, pclath, cstack
 16161 ;; Tracked objects:
 16162 ;;		On entry : 1F/0
 16163 ;;		On exit  : 1F/8
 16164 ;;		Unchanged: 0/0
 16165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16167 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16169 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16170 ;;Total ram usage:        2 bytes
 16171 ;; Hardware stack levels used:    1
 16172 ;; Hardware stack levels required when called:    1
 16173 ;; This function calls:
 16174 ;;		i1_TMR4_StartTimer
 16175 ;; This function is called by:
 16176 ;;		_IR_ScanLongPress
 16177 ;; This function uses a non-reentrant model
 16178 ;;
 16179                           
 16180                           
 16181                           ;psect for function i1_Led_StartNotice
 16182  03FE                     i1_Led_StartNotice:	
 16183                           
 16184                           ;incstack = 0
 16185                           ; Regs used in i1_Led_StartNotice: [wreg+status,2+status,0+pclath+cstack]
 16186                           ;i1Led_StartNotice@cnt stored from wreg
 16187  03FE  00F1               	movwf	i1Led_StartNotice@cnt
 16188                           
 16189                           ;led.c: 420: gLedRunPara.mNoticeCount = cnt;
 16190  03FF  00F0               	movwf	??i1_Led_StartNotice
 16191  0400  0DF0               	rlf	??i1_Led_StartNotice,f
 16192  0401  0DF0               	rlf	??i1_Led_StartNotice,f
 16193  0402  0021               	movlb	1	; select bank1
 16194  0403  085C               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
 16195  0404  0670               	xorwf	??i1_Led_StartNotice,w
 16196  0405  3903               	andlw	-253
 16197  0406  0670               	xorwf	??i1_Led_StartNotice,w
 16198  0407  00DC               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
 16199                           
 16200                           ;led.c: 421: TMR4_StartTimer();
 16201  0408  24B9               	fcall	i1_TMR4_StartTimer
 16202  0409  0008               	return
 16203  040A                     __end_ofi1_Led_StartNotice:	
 16204  040A                     __ptext97:	
 16205 ;; *************** function _Led_SetCustom *****************
 16206 ;; Defined at:
 16207 ;;		line 279 in file "user/src/led.c"
 16208 ;; Parameters:    Size  Location     Type
 16209 ;;  idx             1    wreg     unsigned char 
 16210 ;;  pValue          1    6[COMMON] PTR unsigned int 
 16211 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), 
 16212 ;; Auto vars:     Size  Location     Type
 16213 ;;  idx             1    2[BANK0 ] unsigned char 
 16214 ;;  i               1    3[BANK0 ] unsigned char 
 16215 ;;  value           2    0[BANK0 ] unsigned int 
 16216 ;; Return value:  Size  Location     Type
 16217 ;;                  1    wreg      void 
 16218 ;; Registers used:
 16219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16220 ;; Tracked objects:
 16221 ;;		On entry : 1F/0
 16222 ;;		On exit  : 1F/0
 16223 ;;		Unchanged: 0/0
 16224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16225 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16226 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16227 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16228 ;;      Totals:         7       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16229 ;;Total ram usage:       11 bytes
 16230 ;; Hardware stack levels used:    1
 16231 ;; Hardware stack levels required when called:    1
 16232 ;; This function calls:
 16233 ;;		i1___wmul
 16234 ;; This function is called by:
 16235 ;;		_IR_ScanLongPress
 16236 ;; This function uses a non-reentrant model
 16237 ;;
 16238                           
 16239                           
 16240                           ;psect for function _Led_SetCustom
 16241  040A                     _Led_SetCustom:	
 16242                           
 16243                           ;incstack = 0
 16244                           ; Regs used in _Led_SetCustom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16245                           ;Led_SetCustom@idx stored from wreg
 16246  040A  00C2               	movwf	Led_SetCustom@idx
 16247                           
 16248                           ;led.c: 280: uint16_t value;
 16249                           ;led.c: 281: if (idx >= 4) {
 16250  040B  3004               	movlw	4
 16251  040C  0242               	subwf	Led_SetCustom@idx,w
 16252  040D  1803               	btfsc	3,0
 16253  040E  0008               	return
 16254                           
 16255                           ;led.c: 283: }
 16256                           ;led.c: 284: for (uint8_t i = 0; i < 5; i++) {
 16257  040F  01C3               	clrf	Led_SetCustom@i
 16258  0410                     i1l4113:	
 16259                           
 16260                           ;led.c: 285: value = *pValue++;
 16261  0410  0876               	movf	Led_SetCustom@pValue,w
 16262  0411  0086               	movwf	6
 16263  0412  0187               	clrf	7
 16264  0413  3F40               	moviw [0]fsr1
 16265  0414  00C0               	movwf	Led_SetCustom@value
 16266  0415  3F41               	moviw [1]fsr1
 16267  0416  00C1               	movwf	Led_SetCustom@value+1
 16268  0417  3003               	movlw	3
 16269  0418  0AF6               	incf	Led_SetCustom@pValue,f
 16270  0419  0AF6               	incf	Led_SetCustom@pValue,f
 16271                           
 16272                           ;led.c: 289: if (value <= 1000)
 16273  041A  0241               	subwf	Led_SetCustom@value+1,w
 16274  041B  30E9               	movlw	233
 16275  041C  1903               	skipnz
 16276  041D  0240               	subwf	Led_SetCustom@value,w
 16277  041E  1803               	skipnc
 16278  041F  2C41               	goto	i1l4121
 16279                           
 16280                           ;led.c: 291: {
 16281                           ;led.c: 292: gLedPara.mCustom[idx][i] = value;
 16282  0420  0843               	movf	Led_SetCustom@i,w
 16283  0421  00F7               	movwf	??_Led_SetCustom
 16284  0422  01F8               	clrf	??_Led_SetCustom+1
 16285  0423  35F7               	lslf	??_Led_SetCustom,f
 16286  0424  0DF8               	rlf	??_Led_SetCustom+1,f
 16287  0425  0842               	movf	Led_SetCustom@idx,w
 16288  0426  00F0               	movwf	i1___wmul@multiplier
 16289  0427  300A               	movlw	10
 16290  0428  01F1               	clrf	i1___wmul@multiplier+1
 16291  0429  00F2               	movwf	i1___wmul@multiplicand
 16292  042A  01F3               	clrf	i1___wmul@multiplicand+1
 16293  042B  2447  3180         	fcall	i1___wmul
 16294  042D  3088               	movlw	136
 16295  042E  00F9               	movwf	??_Led_SetCustom+2
 16296  042F  3023               	movlw	35
 16297  0430  00FA               	movwf	??_Led_SetCustom+3
 16298  0431  0870               	movf	?i1___wmul,w
 16299  0432  0779               	addwf	??_Led_SetCustom+2,w
 16300  0433  00FB               	movwf	??_Led_SetCustom+4
 16301  0434  0871               	movf	?i1___wmul+1,w
 16302  0435  3D7A               	addwfc	??_Led_SetCustom+3,w
 16303  0436  00FC               	movwf	??_Led_SetCustom+5
 16304  0437  0877               	movf	??_Led_SetCustom,w
 16305  0438  077B               	addwf	??_Led_SetCustom+4,w
 16306  0439  0086               	movwf	6
 16307  043A  0878               	movf	??_Led_SetCustom+1,w
 16308  043B  3D7C               	addwfc	??_Led_SetCustom+5,w
 16309  043C  0087               	movwf	7
 16310  043D  0840               	movf	Led_SetCustom@value,w
 16311  043E  3FC0               	movwi [0]fsr1
 16312  043F  0841               	movf	Led_SetCustom@value+1,w
 16313  0440  3FC1               	movwi [1]fsr1
 16314  0441                     i1l4121:	
 16315  0441  3005               	movlw	5
 16316  0442  0AC3               	incf	Led_SetCustom@i,f
 16317  0443  0243               	subwf	Led_SetCustom@i,w
 16318  0444  1803               	btfsc	3,0
 16319  0445  0008               	return
 16320  0446  2C10               	goto	i1l4113
 16321  0447                     __end_of_Led_SetCustom:	
 16322  0447                     __ptext98:	
 16323 ;; *************** function i1___wmul *****************
 16324 ;; Defined at:
 16325 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
 16326 ;; Parameters:    Size  Location     Type
 16327 ;;  multiplier      2    0[COMMON] unsigned int 
 16328 ;;  multiplicand    2    2[COMMON] unsigned int 
 16329 ;; Auto vars:     Size  Location     Type
 16330 ;;  __wmul          2    4[COMMON] unsigned int 
 16331 ;; Return value:  Size  Location     Type
 16332 ;;                  2    0[COMMON] unsigned int 
 16333 ;; Registers used:
 16334 ;;		wreg, status,2, status,0
 16335 ;; Tracked objects:
 16336 ;;		On entry : 1F/0
 16337 ;;		On exit  : 1F/0
 16338 ;;		Unchanged: 1F/0
 16339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16340 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16341 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16343 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16344 ;;Total ram usage:        6 bytes
 16345 ;; Hardware stack levels used:    1
 16346 ;; This function calls:
 16347 ;;		Nothing
 16348 ;; This function is called by:
 16349 ;;		_Led_SetCustom
 16350 ;;		_Led_DynamicWave
 16351 ;;		_Led_DynamicMoon
 16352 ;;		_Led_DynamicCloud
 16353 ;;		_Led_DynamicStorm
 16354 ;; This function uses a non-reentrant model
 16355 ;;
 16356                           
 16357                           
 16358                           ;psect for function i1___wmul
 16359  0447                     i1___wmul:	
 16360                           
 16361                           ;incstack = 0
 16362                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 16363  0447  01F4               	clrf	i1___wmul@product
 16364  0448  01F5               	clrf	i1___wmul@product+1
 16365  0449                     i1l3975:	
 16366  0449  1C70               	btfss	i1___wmul@multiplier,0
 16367  044A  2C4F               	goto	i1l3979
 16368  044B  0872               	movf	i1___wmul@multiplicand,w
 16369  044C  07F4               	addwf	i1___wmul@product,f
 16370  044D  0873               	movf	i1___wmul@multiplicand+1,w
 16371  044E  3DF5               	addwfc	i1___wmul@product+1,f
 16372  044F                     i1l3979:	
 16373  044F  35F2               	lslf	i1___wmul@multiplicand,f
 16374  0450  0DF3               	rlf	i1___wmul@multiplicand+1,f
 16375  0451  36F1               	lsrf	i1___wmul@multiplier+1,f
 16376  0452  0CF0               	rrf	i1___wmul@multiplier,f
 16377  0453  0870               	movf	i1___wmul@multiplier,w
 16378  0454  0471               	iorwf	i1___wmul@multiplier+1,w
 16379  0455  1D03               	btfss	3,2
 16380  0456  2C49               	goto	i1l3975
 16381  0457  0875               	movf	i1___wmul@product+1,w
 16382  0458  00F1               	movwf	?i1___wmul+1
 16383  0459  0874               	movf	i1___wmul@product,w
 16384  045A  00F0               	movwf	?i1___wmul
 16385  045B  0008               	return
 16386  045C                     __end_ofi1___wmul:	
 16387  045C                     __ptext93:	
 16388 ;; *************** function i1_Util_DecValue *****************
 16389 ;; Defined at:
 16390 ;;		line 15 in file "user/src/util.c"
 16391 ;; Parameters:    Size  Location     Type
 16392 ;;  pSrc            2    0[COMMON] PTR unsigned int 
 16393 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), gLedPara(117), 
 16394 ;;  min             2    2[COMMON] unsigned int 
 16395 ;;  delta           2    4[COMMON] unsigned int 
 16396 ;; Auto vars:     Size  Location     Type
 16397 ;;		None
 16398 ;; Return value:  Size  Location     Type
 16399 ;;                  1    wreg      void 
 16400 ;; Registers used:
 16401 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16402 ;; Tracked objects:
 16403 ;;		On entry : 1F/0
 16404 ;;		On exit  : 1F/0
 16405 ;;		Unchanged: 1F/0
 16406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16407 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16409 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16410 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16411 ;;Total ram usage:       10 bytes
 16412 ;; Hardware stack levels used:    1
 16413 ;; This function calls:
 16414 ;;		Nothing
 16415 ;; This function is called by:
 16416 ;;		_IR_ScanLongPress
 16417 ;; This function uses a non-reentrant model
 16418 ;;
 16419                           
 16420                           
 16421                           ;psect for function i1_Util_DecValue
 16422  045C                     i1_Util_DecValue:	
 16423                           
 16424                           ;util.c: 17: if( *pSrc > min + delta )
 16425                           
 16426                           ;incstack = 0
 16427                           ; Regs used in i1_Util_DecValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 16428  045C  0870               	movf	i1Util_DecValue@pSrc,w
 16429  045D  0086               	movwf	6
 16430  045E  0871               	movf	i1Util_DecValue@pSrc+1,w
 16431  045F  0087               	movwf	7
 16432  0460  3F40               	moviw [0]fsr1
 16433  0461  00F6               	movwf	??i1_Util_DecValue
 16434  0462  3F41               	moviw [1]fsr1
 16435  0463  00F7               	movwf	??i1_Util_DecValue+1
 16436  0464  0874               	movf	i1Util_DecValue@delta,w
 16437  0465  0772               	addwf	i1Util_DecValue@min,w
 16438  0466  00F8               	movwf	??i1_Util_DecValue+2
 16439  0467  0875               	movf	i1Util_DecValue@delta+1,w
 16440  0468  3D73               	addwfc	i1Util_DecValue@min+1,w
 16441  0469  00F9               	movwf	??i1_Util_DecValue+3
 16442  046A  0877               	movf	??i1_Util_DecValue+1,w
 16443  046B  0279               	subwf	??i1_Util_DecValue+3,w
 16444  046C  1D03               	skipz
 16445  046D  2C70               	goto	u314_25
 16446  046E  0876               	movf	??i1_Util_DecValue,w
 16447  046F  0278               	subwf	??i1_Util_DecValue+2,w
 16448  0470                     u314_25:	
 16449                           
 16450                           ;util.c: 18: {
 16451                           ;util.c: 19: (*pSrc) -= delta;
 16452  0470  0870               	movf	i1Util_DecValue@pSrc,w
 16453  0471  0086               	movwf	6
 16454  0472  0871               	movf	i1Util_DecValue@pSrc+1,w
 16455  0473  0087               	movwf	7
 16456  0474  1803               	skipnc
 16457  0475  2C7D               	goto	L23
 16458  0476  0874               	movf	i1Util_DecValue@delta,w
 16459  0477  0281               	subwf	1,f
 16460  0478  3141               	addfsr 1,1
 16461  0479  0875               	movf	i1Util_DecValue@delta+1,w
 16462  047A  3B81               	subwfb	1,f
 16463  047B  317F               	addfsr 1,-1
 16464                           
 16465                           ;util.c: 20: }
 16466  047C  0008               	return
 16467  047D                     L23:	
 16468                           ;util.c: 21: else
 16469                           ;util.c: 22: {
 16470                           ;util.c: 23: *pSrc = min;
 16471                           
 16472  047D  0872               	movf	i1Util_DecValue@min,w
 16473  047E  3FC0               	movwi [0]fsr1
 16474  047F  0873               	movf	i1Util_DecValue@min+1,w
 16475  0480  3FC1               	movwi [1]fsr1
 16476  0481  0008               	return
 16477  0482                     __end_ofi1_Util_DecValue:	
 16478  0482                     __ptext92:	
 16479 ;; *************** function i1_Util_IncValue *****************
 16480 ;; Defined at:
 16481 ;;		line 3 in file "user/src/util.c"
 16482 ;; Parameters:    Size  Location     Type
 16483 ;;  pSrc            2    0[COMMON] PTR unsigned int 
 16484 ;;		 -> gLedRunPara.mCurrentBright(10), gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), 
 16485 ;;		 -> gLedPara(117), 
 16486 ;;  max             2    2[COMMON] unsigned int 
 16487 ;;  delta           2    4[COMMON] unsigned int 
 16488 ;; Auto vars:     Size  Location     Type
 16489 ;;		None
 16490 ;; Return value:  Size  Location     Type
 16491 ;;                  1    wreg      void 
 16492 ;; Registers used:
 16493 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16494 ;; Tracked objects:
 16495 ;;		On entry : 1F/0
 16496 ;;		On exit  : 1F/0
 16497 ;;		Unchanged: 1F/0
 16498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16499 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16501 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16502 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16503 ;;Total ram usage:       10 bytes
 16504 ;; Hardware stack levels used:    1
 16505 ;; This function calls:
 16506 ;;		Nothing
 16507 ;; This function is called by:
 16508 ;;		_IR_ScanLongPress
 16509 ;; This function uses a non-reentrant model
 16510 ;;
 16511                           
 16512                           
 16513                           ;psect for function i1_Util_IncValue
 16514  0482                     i1_Util_IncValue:	
 16515                           
 16516                           ;util.c: 5: if( *pSrc + delta < max )
 16517                           
 16518                           ;incstack = 0
 16519                           ; Regs used in i1_Util_IncValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 16520  0482  0870               	movf	i1Util_IncValue@pSrc,w
 16521  0483  0086               	movwf	6
 16522  0484  0871               	movf	i1Util_IncValue@pSrc+1,w
 16523  0485  0087               	movwf	7
 16524  0486  3F40               	moviw [0]fsr1
 16525  0487  00F6               	movwf	??i1_Util_IncValue
 16526  0488  3F41               	moviw [1]fsr1
 16527  0489  00F7               	movwf	??i1_Util_IncValue+1
 16528  048A  0874               	movf	i1Util_IncValue@delta,w
 16529  048B  0776               	addwf	??i1_Util_IncValue,w
 16530  048C  00F8               	movwf	??i1_Util_IncValue+2
 16531  048D  0875               	movf	i1Util_IncValue@delta+1,w
 16532  048E  3D77               	addwfc	??i1_Util_IncValue+1,w
 16533  048F  00F9               	movwf	??i1_Util_IncValue+3
 16534  0490  0873               	movf	i1Util_IncValue@max+1,w
 16535  0491  0279               	subwf	??i1_Util_IncValue+3,w
 16536  0492  1D03               	skipz
 16537  0493  2C96               	goto	u313_25
 16538  0494  0872               	movf	i1Util_IncValue@max,w
 16539  0495  0278               	subwf	??i1_Util_IncValue+2,w
 16540  0496                     u313_25:	
 16541                           
 16542                           ;util.c: 6: {
 16543                           ;util.c: 7: (*pSrc) += delta;
 16544  0496  0870               	movf	i1Util_IncValue@pSrc,w
 16545  0497  0086               	movwf	6
 16546  0498  0871               	movf	i1Util_IncValue@pSrc+1,w
 16547  0499  0087               	movwf	7
 16548  049A  1803               	skipnc
 16549  049B  2CA3               	goto	L22
 16550  049C  0874               	movf	i1Util_IncValue@delta,w
 16551  049D  0781               	addwf	1,f
 16552  049E  3141               	addfsr 1,1
 16553  049F  0875               	movf	i1Util_IncValue@delta+1,w
 16554  04A0  3D81               	addwfc	1,f
 16555  04A1  317F               	addfsr 1,-1
 16556                           
 16557                           ;util.c: 8: }
 16558  04A2  0008               	return
 16559  04A3                     L22:	
 16560                           ;util.c: 9: else
 16561                           ;util.c: 10: {
 16562                           ;util.c: 11: *pSrc = max;
 16563                           
 16564  04A3  0872               	movf	i1Util_IncValue@max,w
 16565  04A4  3FC0               	movwi [0]fsr1
 16566  04A5  0873               	movf	i1Util_IncValue@max+1,w
 16567  04A6  3FC1               	movwi [1]fsr1
 16568  04A7  0008               	return
 16569  04A8                     __end_ofi1_Util_IncValue:	
 16570  04A8                     __ptext82:	
 16571 ;; *************** function i1_Led_UpdateBright *****************
 16572 ;; Defined at:
 16573 ;;		line 183 in file "user/src/led.c"
 16574 ;; Parameters:    Size  Location     Type
 16575 ;;		None
 16576 ;; Auto vars:     Size  Location     Type
 16577 ;;  Led_UpdateBr    1    4[COMMON] unsigned char 
 16578 ;; Return value:  Size  Location     Type
 16579 ;;                  1    wreg      void 
 16580 ;; Registers used:
 16581 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16582 ;; Tracked objects:
 16583 ;;		On entry : 1F/0
 16584 ;;		On exit  : 14/4
 16585 ;;		Unchanged: 0/0
 16586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;Total ram usage:        1 bytes
 16592 ;; Hardware stack levels used:    1
 16593 ;; Hardware stack levels required when called:    1
 16594 ;; This function calls:
 16595 ;;		i1_PWM1_LoadDutyValue
 16596 ;;		i1_PWM2_LoadDutyValue
 16597 ;;		i1_PWM3_LoadDutyValue
 16598 ;;		i1_PWM4_LoadDutyValue
 16599 ;;		i1_PWM5_LoadDutyValue
 16600 ;; This function is called by:
 16601 ;;		_Led_DynamicWave
 16602 ;;		_Led_DynamicMoon
 16603 ;;		_Led_DynamicCloud
 16604 ;;		_Led_DynamicStorm
 16605 ;; This function uses a non-reentrant model
 16606 ;;
 16607                           
 16608                           
 16609                           ;psect for function i1_Led_UpdateBright
 16610  04A8                     i1_Led_UpdateBright:	
 16611                           
 16612                           ;led.c: 184: for (uint8_t i = 0; i < 5; i++) {
 16613                           
 16614                           ;incstack = 0
 16615                           ; Regs used in i1_Led_UpdateBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16616  04A8  01F4               	clrf	i1Led_UpdateBright@i
 16617  04A9                     i1l6051:	
 16618                           
 16619                           ;led.c: 185: loadDuty[i](gLedRunPara.mCurrentBright[i]);
 16620  04A9  3574               	lslf	i1Led_UpdateBright@i,w
 16621  04AA  255C               	fcall	PL136	;call to abstracted procedure
 16622  04AB  3574               	lslf	i1Led_UpdateBright@i,w
 16623  04AC  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
 16624  04AD  0086               	movwf	6
 16625  04AE  3F41               	moviw [1]fsr1
 16626  04AF  008A               	movwf	10
 16627  04B0  3F40               	moviw [0]fsr1
 16628  04B1  000A               	callw
 16629  04B2  3005               	movlw	5
 16630  04B3  3180               	pagesel	$
 16631  04B4  0AF4               	incf	i1Led_UpdateBright@i,f
 16632  04B5  0274               	subwf	i1Led_UpdateBright@i,w
 16633  04B6  1803               	btfsc	3,0
 16634  04B7  0008               	return
 16635  04B8  2CA9               	goto	i1l6051
 16636  04B9                     __end_ofi1_Led_UpdateBright:	
 16637  04B9                     __ptext95:	
 16638 ;; *************** function i1_TMR4_StartTimer *****************
 16639 ;; Defined at:
 16640 ;;		line 17 in file "driver/src/tmr4.c"
 16641 ;; Parameters:    Size  Location     Type
 16642 ;;		None
 16643 ;; Auto vars:     Size  Location     Type
 16644 ;;		None
 16645 ;; Return value:  Size  Location     Type
 16646 ;;                  1    wreg      void 
 16647 ;; Registers used:
 16648 ;;		None
 16649 ;; Tracked objects:
 16650 ;;		On entry : 1F/1
 16651 ;;		On exit  : 1F/8
 16652 ;;		Unchanged: 0/0
 16653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16658 ;;Total ram usage:        0 bytes
 16659 ;; Hardware stack levels used:    1
 16660 ;; This function calls:
 16661 ;;		Nothing
 16662 ;; This function is called by:
 16663 ;;		i1_Led_StartNotice
 16664 ;; This function uses a non-reentrant model
 16665 ;;
 16666                           
 16667                           
 16668                           ;psect for function i1_TMR4_StartTimer
 16669  04B9                     i1_TMR4_StartTimer:	
 16670                           
 16671                           ;tmr4.c: 19: T4CONbits.TMR4ON = 1;
 16672                           
 16673                           ;incstack = 0
 16674                           ; Regs used in i1_TMR4_StartTimer: []
 16675  04B9  0028               	movlb	8	; select bank8
 16676  04BA  1517               	bsf	23,2	;volatile
 16677  04BB  0008               	return
 16678  04BC                     __end_ofi1_TMR4_StartTimer:	
 16679  04BC                     PL16:	
 16680  04BC  307B               	movlw	123
 16681  04BD  0086               	movwf	6
 16682  04BE  3023               	movlw	35
 16683  04BF  0087               	movwf	7
 16684  04C0  3142               	addfsr 1,2
 16685  04C1  0801               	movf	1,w
 16686  04C2  3E00               	addlw	low (_GAIN| (0+32768))
 16687  04C3  0084               	movwf	4
 16688  04C4  3098               	movlw	high (_GAIN| (0+32768))
 16689  04C5  1803               	skipnc
 16690  04C6  3E01               	addlw	1
 16691  04C7  0085               	movwf	5
 16692  04C8  0800               	movf	0,w	;code access
 16693  04C9  00F0               	movwf	i1___wmul@multiplier
 16694  04CA  0008               	return
 16695  04CB                     __end_ofPL16:	
 16696  04CB                     PL24:	
 16697  04CB  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 16698  04CC  0086               	movwf	6
 16699  04CD  3001               	movlw	1
 16700  04CE  0187               	clrf	7
 16701  04CF  0281               	subwf	1,f
 16702  04D0  3000               	movlw	0
 16703  04D1  3141               	addfsr 1,1
 16704  04D2  3B81               	subwfb	1,f
 16705  04D3  317F               	addfsr 1,-1
 16706  04D4  0008               	return
 16707  04D5                     __end_ofPL24:	
 16708  04D5                     PL50:	
 16709  04D5  0086               	movwf	6
 16710  04D6  3F40               	moviw [0]fsr1
 16711  04D7  00F6               	movwf	??_Led_Ramp+2
 16712  04D8  3F41               	moviw [1]fsr1
 16713  04D9  00F7               	movwf	??_Led_Ramp+3
 16714  04DA  0876               	movf	??_Led_Ramp+2,w
 16715  04DB  3E01               	addlw	1
 16716  04DC  00F8               	movwf	??_Led_Ramp+4
 16717  04DD  3000               	movlw	0
 16718  04DE  3D77               	addwfc	??_Led_Ramp+3,w
 16719  04DF  00F9               	movwf	??_Led_Ramp+5
 16720  04E0  0875               	movf	??_Led_Ramp+1,w
 16721  04E1  0279               	subwf	??_Led_Ramp+5,w
 16722  04E2  1D03               	skipz
 16723  04E3  0008               	return
 16724  04E4  0874               	movf	??_Led_Ramp,w
 16725  04E5  0278               	subwf	??_Led_Ramp+4,w
 16726  04E6  0008               	return
 16727  04E7                     __end_ofPL50:	
 16728  04E7                     PL52:	
 16729  04E7  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 16730  04E8  0086               	movwf	6
 16731  04E9  3001               	movlw	1
 16732  04EA  0187               	clrf	7
 16733  04EB  0781               	addwf	1,f
 16734  04EC  3141               	addfsr 1,1
 16735  04ED  0008               	return
 16736  04EE                     __end_ofPL52:	
 16737  04EE                     PL54:	
 16738  04EE  0AA0               	incf	IR_ScanLongPress@cnt,f
 16739  04EF  1903               	skipnz
 16740  04F0  0AA1               	incf	IR_ScanLongPress@cnt+1,f
 16741  04F1  3002               	movlw	2
 16742  04F2  0621               	xorwf	IR_ScanLongPress@cnt+1,w
 16743  04F3  0420               	iorwf	IR_ScanLongPress@cnt,w
 16744  04F4  0008               	return
 16745  04F5                     __end_ofPL54:	
 16746  04F5                     PL70:	
 16747  04F5  01C5               	clrf	??_IR_ScanLongPress+1
 16748  04F6  35C4               	lslf	??_IR_ScanLongPress,f
 16749  04F7  0DC5               	rlf	??_IR_ScanLongPress+1,f
 16750  04F8  00C6               	movwf	??_IR_ScanLongPress+2
 16751  04F9  3023               	movlw	35
 16752  04FA  00C7               	movwf	??_IR_ScanLongPress+3
 16753  04FB  0844               	movf	??_IR_ScanLongPress,w
 16754  04FC  0746               	addwf	??_IR_ScanLongPress+2,w
 16755  04FD  0008               	return
 16756  04FE                     __end_ofPL70:	
 16757  04FE                     PL80:	
 16758  04FE  0086               	movwf	6
 16759  04FF  3F40               	moviw [0]fsr1
 16760  0500  00FA               	movwf	??_Led_DynamicStorm+2
 16761  0501  3F41               	moviw [1]fsr1
 16762  0502  00FB               	movwf	??_Led_DynamicStorm+3
 16763  0503  0879               	movf	??_Led_DynamicStorm+1,w
 16764  0504  027B               	subwf	??_Led_DynamicStorm+3,w
 16765  0505  1D03               	skipz
 16766  0506  0008               	return
 16767  0507  0878               	movf	??_Led_DynamicStorm,w
 16768  0508  027A               	subwf	??_Led_DynamicStorm+2,w
 16769  0509  0008               	return
 16770  050A                     __end_ofPL80:	
 16771  050A                     PL84:	
 16772  050A  0086               	movwf	6
 16773  050B  3F40               	moviw [0]fsr1
 16774  050C  00FA               	movwf	??_Led_DynamicMoon+2
 16775  050D  3F41               	moviw [1]fsr1
 16776  050E  00FB               	movwf	??_Led_DynamicMoon+3
 16777  050F  0879               	movf	??_Led_DynamicMoon+1,w
 16778  0510  027B               	subwf	??_Led_DynamicMoon+3,w
 16779  0511  1D03               	skipz
 16780  0512  0008               	return
 16781  0513  0878               	movf	??_Led_DynamicMoon,w
 16782  0514  027A               	subwf	??_Led_DynamicMoon+2,w
 16783  0515  0008               	return
 16784  0516                     __end_ofPL84:	
 16785  0516                     PL98:	
 16786  0516  0086               	movwf	6
 16787  0517  3F40               	moviw [0]fsr1
 16788  0518  00FA               	movwf	??_Led_DynamicCloud+2
 16789  0519  3F41               	moviw [1]fsr1
 16790  051A  00FB               	movwf	??_Led_DynamicCloud+3
 16791  051B  0879               	movf	??_Led_DynamicCloud+1,w
 16792  051C  027B               	subwf	??_Led_DynamicCloud+3,w
 16793  051D  1D03               	skipz
 16794  051E  0008               	return
 16795  051F  0878               	movf	??_Led_DynamicCloud,w
 16796  0520  027A               	subwf	??_Led_DynamicCloud+2,w
 16797  0521  0008               	return
 16798  0522                     __end_ofPL98:	
 16799  0522                     PL100:	
 16800  0522  0086               	movwf	6
 16801  0523  3F40               	moviw [0]fsr1
 16802  0524  00FA               	movwf	??_Led_DynamicWave+2
 16803  0525  3F41               	moviw [1]fsr1
 16804  0526  00FB               	movwf	??_Led_DynamicWave+3
 16805  0527  0879               	movf	??_Led_DynamicWave+1,w
 16806  0528  027B               	subwf	??_Led_DynamicWave+3,w
 16807  0529  1D03               	skipz
 16808  052A  0008               	return
 16809  052B  0878               	movf	??_Led_DynamicWave,w
 16810  052C  027A               	subwf	??_Led_DynamicWave+2,w
 16811  052D  0008               	return
 16812  052E                     __end_ofPL100:	
 16813  052E                     PL104:	
 16814  052E  307B               	movlw	123
 16815  052F  0086               	movwf	6
 16816  0530  0C01               	rrf	1,w
 16817  0531  00FD               	movwf	??_Led_Run
 16818  0532  0CFD               	rrf	??_Led_Run,f
 16819  0533  0C7D               	rrf	??_Led_Run,w
 16820  0534  390F               	andlw	15
 16821  0535  0008               	return
 16822  0536                     __end_ofPL104:	
 16823  0536                     PL108:	
 16824  0536  0C01               	rrf	1,w
 16825  0537  00FD               	movwf	??_Led_Run
 16826  0538  0CFD               	rrf	??_Led_Run,f
 16827  0539  0C7D               	rrf	??_Led_Run,w
 16828  053A  390F               	andlw	15
 16829  053B  0008               	return
 16830  053C                     __end_ofPL108:	
 16831  053C                     PL126:	
 16832  053C  0086               	movwf	6
 16833  053D  0187               	clrf	7
 16834  053E  3F40               	moviw [0]fsr1
 16835  053F  00F8               	movwf	??_Led_DynamicMoon
 16836  0540  3F41               	moviw [1]fsr1
 16837  0541  00F9               	movwf	??_Led_DynamicMoon+1
 16838  0542  354C               	lslf	Led_DynamicMoon@i,w
 16839  0543  0008               	return
 16840  0544                     __end_ofPL126:	
 16841  0544                     PL128:	
 16842  0544  1211               	bcf	17,4	;volatile
 16843  0545  0020               	movlb	0	; select bank0
 16844  0546  0834               	movf	_txHead,w
 16845  0547  3E20               	addlw	(low (_txBuf| (0+256)))& (0+255)
 16846  0548  0086               	movwf	6
 16847  0549  3001               	movlw	1	; select bank2/3
 16848  054A  0087               	movwf	7
 16849  054B  0008               	return
 16850  054C                     __end_ofPL128:	
 16851  054C                     PL130:	
 16852  054C  0086               	movwf	6
 16853  054D  0187               	clrf	7
 16854  054E  3F40               	moviw [0]fsr1
 16855  054F  00F8               	movwf	??_Led_DynamicWave
 16856  0550  3F41               	moviw [1]fsr1
 16857  0551  00F9               	movwf	??_Led_DynamicWave+1
 16858  0552  354C               	lslf	Led_DynamicWave@i,w
 16859  0553  0008               	return
 16860  0554                     __end_ofPL130:	
 16861  0554                     PL132:	
 16862  0554  0086               	movwf	6
 16863  0555  0187               	clrf	7
 16864  0556  3F40               	moviw [0]fsr1
 16865  0557  00F8               	movwf	??_Led_DynamicStorm
 16866  0558  3F41               	moviw [1]fsr1
 16867  0559  00F9               	movwf	??_Led_DynamicStorm+1
 16868  055A  354C               	lslf	Led_DynamicStorm@i,w
 16869  055B  0008               	return
 16870  055C                     __end_ofPL132:	
 16871  055C                     PL136:	
 16872  055C  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 16873  055D  0086               	movwf	6
 16874  055E  0187               	clrf	7
 16875  055F  3F40               	moviw [0]fsr1
 16876  0560  00F0               	movwf	i1PWM5_LoadDutyValue@dutyValue
 16877  0561  3F41               	moviw [1]fsr1
 16878  0562  00F1               	movwf	i1PWM5_LoadDutyValue@dutyValue+1
 16879  0563  0008               	return
 16880  0564                     __end_ofPL136:	
 16881  0564                     PL140:	
 16882  0564  0086               	movwf	6
 16883  0565  0187               	clrf	7
 16884  0566  3F40               	moviw [0]fsr1
 16885  0567  00F4               	movwf	??_Led_Ramp
 16886  0568  3F41               	moviw [1]fsr1
 16887  0569  00F5               	movwf	??_Led_Ramp+1
 16888  056A  357A               	lslf	Led_Ramp@i,w
 16889  056B  0008               	return
 16890  056C                     __end_ofPL140:	
 16891  056C                     PL142:	
 16892  056C  0081               	movwf	1
 16893  056D  3020               	movlw	32
 16894  056E  0AB4               	incf	_txHead,f
 16895  056F  0234               	subwf	_txHead,w
 16896  0570  1803               	btfsc	3,0
 16897  0571  01B4               	clrf	_txHead
 16898  0572  03E0               	decf	_txRemain,f
 16899  0573  0008               	return
 16900  0574                     __end_ofPL142:	
 16901  0574                     PL144:	
 16902  0574  0086               	movwf	6
 16903  0575  0187               	clrf	7
 16904  0576  3F40               	moviw [0]fsr1
 16905  0577  00F8               	movwf	??_Led_DynamicCloud
 16906  0578  3F41               	moviw [1]fsr1
 16907  0579  00F9               	movwf	??_Led_DynamicCloud+1
 16908  057A  354C               	lslf	Led_DynamicCloud@i,w
 16909  057B  0008               	return
 16910  057C                     __end_ofPL144:	
 16911  057C                     PL146:	
 16912  057C  0C01               	rrf	1,w
 16913  057D  00FC               	movwf	??_Led_RunMusic
 16914  057E  0CFC               	rrf	??_Led_RunMusic,f
 16915  057F  0C7C               	rrf	??_Led_RunMusic,w
 16916  0580  390F               	andlw	15
 16917  0581  0008               	return
 16918  0582                     __end_ofPL146:	
 16919  0582                     __ptext100:	
 16920 ;; *************** function _IR_Decode *****************
 16921 ;; Defined at:
 16922 ;;		line 251 in file "user/src/ir.c"
 16923 ;; Parameters:    Size  Location     Type
 16924 ;;		None
 16925 ;; Auto vars:     Size  Location     Type
 16926 ;;  type            1    8[COMMON] unsigned char 
 16927 ;;  hVal            2   10[COMMON] unsigned int 
 16928 ;;  keyNum          1    9[COMMON] unsigned char 
 16929 ;;  revKeyNum       1    7[COMMON] unsigned char 
 16930 ;; Return value:  Size  Location     Type
 16931 ;;                  1    wreg      void 
 16932 ;; Registers used:
 16933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16934 ;; Tracked objects:
 16935 ;;		On entry : 1F/1
 16936 ;;		On exit  : 1E/0
 16937 ;;		Unchanged: 0/0
 16938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16941 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16942 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16943 ;;Total ram usage:        9 bytes
 16944 ;; Hardware stack levels used:    1
 16945 ;; Hardware stack levels required when called:    1
 16946 ;; This function calls:
 16947 ;;		_IR_GetKeyType
 16948 ;;		i1_TMR2_DisableInterrupt
 16949 ;;		i1_TMR2_EnableInterrupt
 16950 ;; This function is called by:
 16951 ;;		_Interrupt_Initialize
 16952 ;;		_TMR1_GATE_ISR
 16953 ;; This function uses a non-reentrant model
 16954 ;;
 16955                           
 16956                           
 16957                           ;psect for function _IR_Decode
 16958  0582                     _IR_Decode:	
 16959                           
 16960                           ;ir.c: 253: uint8_t revKeyNum = 0;
 16961                           
 16962                           ;incstack = 0
 16963                           ; Regs used in _IR_Decode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16964  0582  01F7               	clrf	IR_Decode@revKeyNum
 16965                           
 16966                           ;ir.c: 254: uint16_t hVal = TMR1;
 16967  0583  0020               	movlb	0	; select bank0
 16968  0584  081A               	movf	26,w	;volatile
 16969  0585  00FB               	movwf	IR_Decode@hVal+1
 16970  0586  0819               	movf	25,w	;volatile
 16971  0587  00FA               	movwf	IR_Decode@hVal
 16972                           
 16973                           ;ir.c: 255: static uint16_t codeVal = 0;
 16974                           ;ir.c: 256: static uint8_t nBit = 0;
 16975                           ;ir.c: 257: static uint8_t rptCnt = 0;
 16976                           ;ir.c: 259: TMR1 = 0;
 16977  0588  0199               	clrf	25	;volatile
 16978  0589  019A               	clrf	26	;volatile
 16979                           
 16980                           ;ir.c: 261: switch (ir_state.mState) {
 16981  058A  2E3B               	goto	i1l5151
 16982  058B                     i1l5055:	
 16983                           
 16984                           ;ir.c: 263: if (hVal > 2000 && hVal < 2500) {
 16985  058B  3007               	movlw	7
 16986  058C  027B               	subwf	IR_Decode@hVal+1,w
 16987  058D  30D1               	movlw	209
 16988  058E  1903               	skipnz
 16989  058F  027A               	subwf	IR_Decode@hVal,w
 16990  0590  1C03               	skipc
 16991  0591  0008               	return
 16992  0592  3009               	movlw	9
 16993  0593  027B               	subwf	IR_Decode@hVal+1,w
 16994  0594  30C4               	movlw	196
 16995  0595  1903               	skipnz
 16996  0596  027A               	subwf	IR_Decode@hVal,w
 16997  0597  1803               	skipnc
 16998  0598  0008               	return
 16999                           
 17000                           ;ir.c: 264: ir_state.mState = 1;
 17001  0599  0836               	movf	_ir_state,w	;volatile
 17002  059A  39E3               	andlw	-29
 17003  059B  3804               	iorlw	4
 17004  059C  00B6               	movwf	_ir_state	;volatile
 17005                           
 17006                           ;ir.c: 265: codeVal = 0;
 17007  059D  01A2               	clrf	IR_Decode@codeVal
 17008  059E  01A3               	clrf	IR_Decode@codeVal+1
 17009                           
 17010                           ;ir.c: 266: nBit = 0;
 17011  059F  01AF               	clrf	IR_Decode@nBit
 17012                           
 17013                           ;ir.c: 267: TMR2_DisableInterrupt();
 17014  05A0  2770               	fcall	i1_TMR2_DisableInterrupt
 17015  05A1  0008               	return
 17016  05A2                     i1l5067:	
 17017                           
 17018                           ;ir.c: 272: case 2:
 17019                           ;ir.c: 273: if (hVal > 220 && hVal < 340) {
 17020  05A2  3000               	movlw	0
 17021  05A3  027B               	subwf	IR_Decode@hVal+1,w
 17022  05A4  30DD               	movlw	221
 17023  05A5  1903               	skipnz
 17024  05A6  027A               	subwf	IR_Decode@hVal,w
 17025  05A7  1C03               	skipc
 17026  05A8  2DB2               	goto	i1l5073
 17027  05A9  3001               	movlw	1
 17028  05AA  027B               	subwf	IR_Decode@hVal+1,w
 17029  05AB  3054               	movlw	84
 17030  05AC  1903               	skipnz
 17031  05AD  027A               	subwf	IR_Decode@hVal,w
 17032  05AE  1803               	skipnc
 17033  05AF  2DB2               	goto	i1l5073
 17034  05B0                     i1l5071:	
 17035                           
 17036                           ;ir.c: 274: nBit++;
 17037  05B0  0AAF               	incf	IR_Decode@nBit,f
 17038                           
 17039                           ;ir.c: 275: } else if (hVal > 720 && hVal < 960) {
 17040  05B1  2DD0               	goto	i1l5083
 17041  05B2                     i1l5073:	
 17042  05B2  3002               	movlw	2
 17043  05B3  027B               	subwf	IR_Decode@hVal+1,w
 17044  05B4  30D1               	movlw	209
 17045  05B5  1903               	skipnz
 17046  05B6  027A               	subwf	IR_Decode@hVal,w
 17047  05B7  1C03               	skipc
 17048  05B8  2DCE               	goto	i1l5081
 17049  05B9  3003               	movlw	3
 17050  05BA  027B               	subwf	IR_Decode@hVal+1,w
 17051  05BB  30C0               	movlw	192
 17052  05BC  1903               	skipnz
 17053  05BD  027A               	subwf	IR_Decode@hVal,w
 17054  05BE  1803               	skipnc
 17055  05BF  2DCE               	goto	i1l5081
 17056                           
 17057                           ;ir.c: 276: codeVal |= (1 << nBit);
 17058  05C0  3001               	movlw	1
 17059  05C1  00F3               	movwf	??_IR_Decode
 17060  05C2  01F4               	clrf	??_IR_Decode+1
 17061  05C3  0A2F               	incf	IR_Decode@nBit,w
 17062  05C4  2DC7               	goto	u398_24
 17063  05C5                     u398_25:	
 17064  05C5  35F3               	lslf	??_IR_Decode,f
 17065  05C6  0DF4               	rlf	??_IR_Decode+1,f
 17066  05C7                     u398_24:	
 17067  05C7  0B89               	decfsz	9,f
 17068  05C8  2DC5               	goto	u398_25
 17069  05C9  0873               	movf	??_IR_Decode,w
 17070  05CA  04A2               	iorwf	IR_Decode@codeVal,f
 17071  05CB  0874               	movf	??_IR_Decode+1,w
 17072  05CC  04A3               	iorwf	IR_Decode@codeVal+1,f
 17073  05CD  2DB0               	goto	i1l5071
 17074  05CE                     i1l5081:	
 17075                           
 17076                           ;ir.c: 279: ir_state.mState = 0;
 17077  05CE  30E3               	movlw	-29
 17078  05CF  05B6               	andwf	_ir_state,f	;volatile
 17079  05D0                     i1l5083:	
 17080                           
 17081                           ;ir.c: 280: }
 17082                           ;ir.c: 281: if (nBit >= 16) {
 17083  05D0  3010               	movlw	16
 17084  05D1  022F               	subwf	IR_Decode@nBit,w
 17085  05D2  1C03               	skipc
 17086  05D3  0008               	return
 17087                           
 17088                           ;ir.c: 282: if (ir_state.mState == 1) {
 17089  05D4  0C36               	rrf	_ir_state,w	;volatile
 17090  05D5  0C89               	rrf	9,f
 17091  05D6  3907               	andlw	7
 17092  05D7  3A01               	xorlw	1
 17093  05D8  1D03               	skipz
 17094  05D9  2DE3               	goto	i1l5093
 17095                           
 17096                           ;ir.c: 283: if (codeVal == 0xFF00) {
 17097  05DA  0A23               	incf	IR_Decode@codeVal+1,w
 17098  05DB  0422               	iorwf	IR_Decode@codeVal,w
 17099  05DC  1D03               	btfss	3,2
 17100  05DD  2E1C               	goto	i1l5133
 17101                           
 17102                           ;ir.c: 284: ir_state.mState = 2;
 17103  05DE  0836               	movf	_ir_state,w	;volatile
 17104  05DF  39E3               	andlw	-29
 17105  05E0  3808               	iorlw	8
 17106  05E1  00B6               	movwf	_ir_state	;volatile
 17107                           
 17108                           ;ir.c: 285: } else {
 17109  05E2  2E1E               	goto	i1l5135
 17110  05E3                     i1l5093:	
 17111                           ;ir.c: 286: ir_state.mState = 0;
 17112                           
 17113  05E3  0C36               	rrf	_ir_state,w	;volatile
 17114  05E4  0C89               	rrf	9,f
 17115  05E5  3907               	andlw	7
 17116  05E6  3A02               	xorlw	2
 17117  05E7  1D03               	skipz
 17118  05E8  2E1E               	goto	i1l5135
 17119                           
 17120                           ;ir.c: 289: TMR2_EnableInterrupt();
 17121  05E9  276D  3180         	fcall	i1_TMR2_EnableInterrupt
 17122                           
 17123                           ;ir.c: 290: keyNum = codeVal & 0xFF;
 17124  05EB  0020               	movlb	0	; select bank0
 17125  05EC  0822               	movf	IR_Decode@codeVal,w
 17126  05ED  00F9               	movwf	IR_Decode@keyNum
 17127                           
 17128                           ;ir.c: 291: revKeyNum = codeVal >> 8;
 17129  05EE  0823               	movf	IR_Decode@codeVal+1,w
 17130  05EF  00F7               	movwf	IR_Decode@revKeyNum
 17131                           
 17132                           ;ir.c: 292: if (keyNum ^ revKeyNum == 0xFF)
 17133  05F0  0F77               	incfsz	IR_Decode@revKeyNum,w
 17134  05F1  2DF4               	goto	u403_20
 17135  05F2  3001               	movlw	1
 17136  05F3  2DF5               	goto	u404_20
 17137  05F4                     u403_20:	
 17138  05F4  3000               	movlw	0
 17139  05F5                     u404_20:	
 17140  05F5  00F3               	movwf	??_IR_Decode
 17141  05F6  01F4               	clrf	??_IR_Decode+1
 17142  05F7  0679               	xorwf	IR_Decode@keyNum,w
 17143  05F8  00F5               	movwf	??_IR_Decode+2
 17144  05F9  0874               	movf	??_IR_Decode+1,w
 17145  05FA  00F6               	movwf	??_IR_Decode+3
 17146  05FB  0475               	iorwf	??_IR_Decode+2,w
 17147  05FC  1903               	btfsc	3,2
 17148  05FD  2E1C               	goto	i1l5133
 17149                           
 17150                           ;ir.c: 293: {
 17151                           ;ir.c: 294: uint8_t type = IR_GetKeyType(keyNum);
 17152  05FE  0879               	movf	IR_Decode@keyNum,w
 17153  05FF  264B  3180         	fcall	_IR_GetKeyType
 17154  0601  00F8               	movwf	IR_Decode@type
 17155                           
 17156                           ;ir.c: 295: if (type == 255) {
 17157  0602  0F78               	incfsz	IR_Decode@type,w
 17158  0603  2E06               	goto	i1l5113
 17159                           
 17160                           ;ir.c: 296: keyValue = 255;
 17161  0604  30FF               	movlw	255
 17162  0605  2E09               	goto	L31
 17163  0606                     i1l5113:	
 17164                           ;ir.c: 299: } else if (type == 1) {
 17165                           
 17166                           ;ir.c: 298: ir_state.mState = 0;
 17167                           
 17168                           ;ir.c: 297: ir_state.mKeyRcv = 1;
 17169                           
 17170  0606  0B78               	decfsz	IR_Decode@type,w
 17171  0607  2E0C               	goto	i1l5121
 17172                           
 17173                           ;ir.c: 300: keyValue = keyNum;
 17174  0608  0879               	movf	IR_Decode@keyNum,w
 17175  0609                     L31:	
 17176  0609  00B0               	movwf	_keyValue	;volatile
 17177                           
 17178                           ;ir.c: 301: ir_state.mKeyRcv = 1;
 17179  060A  1436               	bsf	_ir_state,0	;volatile
 17180  060B  2E1C               	goto	i1l5133
 17181  060C                     i1l5121:	
 17182                           ;ir.c: 303: } else if (type == 3 || type == 2) {
 17183                           
 17184                           ;ir.c: 302: ir_state.mState = 0;
 17185                           
 17186  060C  3003               	movlw	3
 17187  060D  0678               	xorwf	IR_Decode@type,w
 17188  060E  1903               	btfsc	3,2
 17189  060F  2E14               	goto	i1l5125
 17190  0610  3002               	movlw	2
 17191  0611  0678               	xorwf	IR_Decode@type,w
 17192  0612  1D03               	btfss	3,2
 17193  0613  2E1C               	goto	i1l5133
 17194  0614                     i1l5125:	
 17195                           
 17196                           ;ir.c: 304: keyValue = keyNum;
 17197  0614  0879               	movf	IR_Decode@keyNum,w
 17198  0615  00B0               	movwf	_keyValue	;volatile
 17199                           
 17200                           ;ir.c: 305: ir_state.mState = 3;
 17201  0616  0836               	movf	_ir_state,w	;volatile
 17202  0617  39E3               	andlw	-29
 17203  0618  380C               	iorlw	12
 17204  0619  00B6               	movwf	_ir_state	;volatile
 17205                           
 17206                           ;ir.c: 306: rptCnt = 0;
 17207  061A  01AE               	clrf	IR_Decode@rptCnt
 17208                           
 17209                           ;ir.c: 307: } else {
 17210  061B  2E1E               	goto	i1l5135
 17211  061C                     i1l5133:	
 17212                           ;ir.c: 308: ir_state.mState = 0;
 17213                           
 17214                           
 17215                           ;ir.c: 311: ir_state.mState = 0;
 17216  061C  30E3               	movlw	-29
 17217  061D  05B6               	andwf	_ir_state,f	;volatile
 17218  061E                     i1l5135:	
 17219                           
 17220                           ;ir.c: 312: }
 17221                           ;ir.c: 313: }
 17222                           ;ir.c: 314: codeVal = 0;
 17223  061E  01A2               	clrf	IR_Decode@codeVal
 17224  061F  01A3               	clrf	IR_Decode@codeVal+1
 17225                           
 17226                           ;ir.c: 315: nBit = 0;
 17227  0620  01AF               	clrf	IR_Decode@nBit
 17228  0621  0008               	return
 17229  0622                     i1l5139:	
 17230                           
 17231                           ;ir.c: 320: if (hVal > 1000 && hVal < 1250) {
 17232  0622  3003               	movlw	3
 17233  0623  027B               	subwf	IR_Decode@hVal+1,w
 17234  0624  30E9               	movlw	233
 17235  0625  1903               	skipnz
 17236  0626  027A               	subwf	IR_Decode@hVal,w
 17237  0627  1C03               	skipc
 17238  0628  0008               	return
 17239  0629  3004               	movlw	4
 17240  062A  027B               	subwf	IR_Decode@hVal+1,w
 17241  062B  30E2               	movlw	226
 17242  062C  1903               	skipnz
 17243  062D  027A               	subwf	IR_Decode@hVal,w
 17244  062E  1803               	skipnc
 17245  062F  0008               	return
 17246                           
 17247                           ;ir.c: 321: if (rptCnt < 4) {
 17248  0630  3004               	movlw	4
 17249  0631  022E               	subwf	IR_Decode@rptCnt,w
 17250  0632  1803               	skipnc
 17251  0633  2E36               	goto	i1l1098
 17252                           
 17253                           ;ir.c: 322: rptCnt++;
 17254  0634  0AAE               	incf	IR_Decode@rptCnt,f
 17255                           
 17256                           ;ir.c: 323: } else {
 17257  0635  0008               	return
 17258  0636                     i1l1098:	
 17259                           
 17260                           ;ir.c: 324: ir_state.mKeyRpt = 1;
 17261  0636  14B6               	bsf	_ir_state,1	;volatile
 17262  0637  0008               	return
 17263  0638                     i1l5147:	
 17264                           
 17265                           ;ir.c: 330: ir_state.mState = 0;
 17266  0638  30E3               	movlw	-29
 17267  0639  05B6               	andwf	_ir_state,f	;volatile
 17268                           
 17269                           ;ir.c: 331: break;
 17270  063A  0008               	return
 17271  063B                     i1l5151:	
 17272  063B  0C36               	rrf	_ir_state,w	;volatile
 17273  063C  0C89               	rrf	9,f
 17274  063D  3907               	andlw	7
 17275                           
 17276                           ; Switch size 1, requested type "space"
 17277                           ; Number of cases is 4, Range of values is 0 to 3
 17278                           ; switch strategies available:
 17279                           ; Name         Instructions Cycles
 17280                           ; simple_byte           13     7 (average)
 17281                           ; direct_byte           14     6 (fixed)
 17282                           ; jumptable            260     6 (fixed)
 17283                           ;	Chosen strategy is simple_byte
 17284  063E  1903               	skipnz
 17285  063F  2D8B               	goto	i1l5055
 17286  0640  3A01               	xorlw	1	; case 1
 17287  0641  1903               	skipnz
 17288  0642  2DA2               	goto	i1l5067
 17289  0643  3A03               	xorlw	3	; case 2
 17290  0644  1903               	skipnz
 17291  0645  2DA2               	goto	i1l5067
 17292  0646  3A01               	xorlw	1	; case 3
 17293  0647  1903               	skipnz
 17294  0648  2E22               	goto	i1l5139
 17295  0649  2E38               	goto	i1l5147
 17296  064A  0008               	return
 17297  064B                     __end_of_IR_Decode:	
 17298  064B                     __ptext103:	
 17299 ;; *************** function _IR_GetKeyType *****************
 17300 ;; Defined at:
 17301 ;;		line 107 in file "user/src/ir.c"
 17302 ;; Parameters:    Size  Location     Type
 17303 ;;  keynum          1    wreg     unsigned char 
 17304 ;; Auto vars:     Size  Location     Type
 17305 ;;  keynum          1    2[COMMON] unsigned char 
 17306 ;;  result          1    1[COMMON] unsigned char 
 17307 ;; Return value:  Size  Location     Type
 17308 ;;                  1    wreg      unsigned char 
 17309 ;; Registers used:
 17310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 17311 ;; Tracked objects:
 17312 ;;		On entry : 1F/0
 17313 ;;		On exit  : 1F/0
 17314 ;;		Unchanged: 0/0
 17315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17317 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17318 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17319 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17320 ;;Total ram usage:        3 bytes
 17321 ;; Hardware stack levels used:    1
 17322 ;; This function calls:
 17323 ;;		Nothing
 17324 ;; This function is called by:
 17325 ;;		_IR_Decode
 17326 ;; This function uses a non-reentrant model
 17327 ;;
 17328                           
 17329                           
 17330                           ;psect for function _IR_GetKeyType
 17331  064B                     _IR_GetKeyType:	
 17332                           
 17333                           ;incstack = 0
 17334                           ; Regs used in _IR_GetKeyType: [wreg-fsr1h+status,2+status,0]
 17335                           ;IR_GetKeyType@keynum stored from wreg
 17336  064B  00F2               	movwf	IR_GetKeyType@keynum
 17337                           
 17338                           ;ir.c: 108: uint8_t result = 0;
 17339  064C  01F1               	clrf	IR_GetKeyType@result
 17340                           
 17341                           ;ir.c: 109: if (ir_state.mSet == 0) {
 17342  064D  0E36               	swapf	_ir_state,w	;volatile
 17343  064E  0C89               	rrf	9,f
 17344  064F  3907               	andlw	7
 17345  0650  1D03               	skipz
 17346  0651  2F03               	goto	i1l4697
 17347                           
 17348                           ;ir.c: 110: if (keynum == 0x5D || keynum == 0x5C) {
 17349  0652  305D               	movlw	93
 17350  0653  0672               	xorwf	IR_GetKeyType@keynum,w
 17351  0654  1903               	btfsc	3,2
 17352  0655  2E5A               	goto	i1l952
 17353  0656  305C               	movlw	92
 17354  0657  0672               	xorwf	IR_GetKeyType@keynum,w
 17355  0658  1D03               	btfss	3,2
 17356  0659  2E5D               	goto	i1l4647
 17357  065A                     i1l952:	
 17358                           
 17359                           ;ir.c: 111: result = 1;
 17360  065A  01F1               	clrf	IR_GetKeyType@result
 17361  065B  0AF1               	incf	IR_GetKeyType@result,f
 17362                           
 17363                           ;ir.c: 112: } else if (keynum == 0x10 || keynum == 0x11
 17364  065C  2F6B               	goto	i1l4721
 17365  065D                     i1l4647:	
 17366                           
 17367                           ;ir.c: 113: || keynum == 0x12 || keynum == 0x13
 17368                           ;ir.c: 114: || keynum == 0x06) {
 17369  065D  3010               	movlw	16
 17370  065E  0672               	xorwf	IR_GetKeyType@keynum,w
 17371  065F  1903               	btfsc	3,2
 17372  0660  2E71               	goto	i1l4657
 17373  0661  3011               	movlw	17
 17374  0662  0672               	xorwf	IR_GetKeyType@keynum,w
 17375  0663  1903               	btfsc	3,2
 17376  0664  2E71               	goto	i1l4657
 17377  0665  3012               	movlw	18
 17378  0666  0672               	xorwf	IR_GetKeyType@keynum,w
 17379  0667  1903               	btfsc	3,2
 17380  0668  2E71               	goto	i1l4657
 17381  0669  3013               	movlw	19
 17382  066A  0672               	xorwf	IR_GetKeyType@keynum,w
 17383  066B  1903               	btfsc	3,2
 17384  066C  2E71               	goto	i1l4657
 17385  066D  3006               	movlw	6
 17386  066E  0672               	xorwf	IR_GetKeyType@keynum,w
 17387  066F  1D03               	btfss	3,2
 17388  0670  2E73               	goto	i1l4659
 17389  0671                     i1l4657:	
 17390                           
 17391                           ;ir.c: 115: result = 3;
 17392  0671  3003               	movlw	3
 17393  0672  2F0E               	goto	L33
 17394  0673                     i1l4659:	
 17395                           ;ir.c: 116: } else if (gLedPara.mOn) {
 17396                           
 17397  0673  277C  3180         	fcall	PL110	;call to abstracted procedure
 17398  0675  1881               	btfsc	1,1
 17399  0676  2EB2               	goto	i1l4695
 17400  0677  2F6B               	goto	i1l4721
 17401  0678                     i1l963:	
 17402  0678  2E5A               	goto	i1l952
 17403  0679                     i1l4663:	
 17404                           
 17405                           ;ir.c: 129: case 0x18:
 17406                           ;ir.c: 130: if (gLedPara.mAuto || gLedPara.mMsc == 0 || gLedPara.mMsc == 1 || gLedPara.m
      +                          Msc == 2
 17407                           ;ir.c: 131: || gLedPara.mMsc == 3 || gLedPara.mMsc == 4) {
 17408  0679  277C  3180         	fcall	PL110	;call to abstracted procedure
 17409  067B  1801               	btfsc	1,0
 17410  067C  2E5A               	goto	i1l952
 17411  067D  2773  3180         	fcall	PL12	;call to abstracted procedure
 17412  067F  1903               	skipnz
 17413  0680  2E5A               	goto	i1l952
 17414  0681  2773  3180         	fcall	PL12	;call to abstracted procedure
 17415  0683  3A01               	xorlw	1
 17416  0684  1903               	skipnz
 17417  0685  2E5A               	goto	i1l952
 17418  0686  2773  3180         	fcall	PL12	;call to abstracted procedure
 17419  0688  3A02               	xorlw	2
 17420  0689  1903               	skipnz
 17421  068A  2E5A               	goto	i1l952
 17422  068B  2773  3180         	fcall	PL12	;call to abstracted procedure
 17423  068D  3A03               	xorlw	3
 17424  068E  1903               	skipnz
 17425  068F  2E5A               	goto	i1l952
 17426  0690  2773  3180         	fcall	PL12	;call to abstracted procedure
 17427  0692  3A04               	xorlw	4
 17428  0693  1903               	btfsc	3,2
 17429  0694  2E5A               	goto	i1l952
 17430  0695  2F6B               	goto	i1l4721
 17431  0696                     i1l4675:	
 17432                           
 17433                           ;ir.c: 136: case 0x1B:
 17434                           ;ir.c: 137: if (!gLedPara.mAuto && gLedPara.mMsc) {
 17435  0696  277C  3180         	fcall	PL110	;call to abstracted procedure
 17436  0698  1801               	btfsc	1,0
 17437  0699  2F6B               	goto	i1l4721
 17438  069A  2773  3180         	fcall	PL12	;call to abstracted procedure
 17439  069C  1D03               	btfss	3,2
 17440  069D  2E5A               	goto	i1l952
 17441  069E  2F6B               	goto	i1l4721
 17442  069F                     i1l979:	
 17443  069F                     i1l4681:	
 17444                           
 17445                           ;ir.c: 142: case 0x51:
 17446                           ;ir.c: 143: case 0x4D:
 17447                           ;ir.c: 144: case 0x4C:
 17448                           ;ir.c: 145: if (gLedPara.mAuto || gLedPara.mMsc) {
 17449  069F  277C  3180         	fcall	PL110	;call to abstracted procedure
 17450  06A1  1801               	btfsc	1,0
 17451  06A2  2E5A               	goto	i1l952
 17452  06A3  2773  3180         	fcall	PL12	;call to abstracted procedure
 17453  06A5  1D03               	btfss	3,2
 17454  06A6  2E5A               	goto	i1l952
 17455  06A7                     i1l4685:	
 17456                           
 17457                           ;ir.c: 148: result = 2;
 17458  06A7  3002               	movlw	2
 17459  06A8  2F0E               	goto	L33
 17460  06A9                     i1l988:	
 17461  06A9                     i1l4687:	
 17462                           
 17463                           ;ir.c: 152: case 0x59:
 17464                           ;ir.c: 153: case 0x45:
 17465                           ;ir.c: 154: case 0x44:
 17466                           ;ir.c: 155: case 0x41:
 17467                           ;ir.c: 156: case 0x54:
 17468                           ;ir.c: 157: case 0x55:
 17469                           ;ir.c: 158: case 0x49:
 17470                           ;ir.c: 159: case 0x48:
 17471                           ;ir.c: 160: case 0x40:
 17472                           ;ir.c: 161: if (gLedPara.mAuto || gLedPara.mMsc == 0) {
 17473  06A9  277C  3180         	fcall	PL110	;call to abstracted procedure
 17474  06AB  1801               	btfsc	1,0
 17475  06AC  2EA7               	goto	i1l4685
 17476  06AD  2773  3180         	fcall	PL12	;call to abstracted procedure
 17477  06AF  1903               	btfsc	3,2
 17478  06B0  2EA7               	goto	i1l4685
 17479  06B1  2F6B               	goto	i1l4721
 17480  06B2                     i1l4695:	
 17481  06B2  0872               	movf	IR_GetKeyType@keynum,w
 17482                           
 17483                           ; Switch size 1, requested type "space"
 17484                           ; Number of cases is 26, Range of values is 20 to 89
 17485                           ; switch strategies available:
 17486                           ; Name         Instructions Cycles
 17487                           ; simple_byte           79    40 (average)
 17488                           ; direct_byte          149     9 (fixed)
 17489                           ; jumptable            263     9 (fixed)
 17490                           ;	Chosen strategy is simple_byte
 17491  06B3  3A14               	xorlw	20	; case 20
 17492  06B4  1903               	skipnz
 17493  06B5  2E5A               	goto	i1l952
 17494  06B6  3A01               	xorlw	1	; case 21
 17495  06B7  1903               	skipnz
 17496  06B8  2E5A               	goto	i1l952
 17497  06B9  3A03               	xorlw	3	; case 22
 17498  06BA  1903               	skipnz
 17499  06BB  2E5A               	goto	i1l952
 17500  06BC  3A01               	xorlw	1	; case 23
 17501  06BD  1903               	skipnz
 17502  06BE  2E5A               	goto	i1l952
 17503  06BF  3A0F               	xorlw	15	; case 24
 17504  06C0  1903               	skipnz
 17505  06C1  2E79               	goto	i1l4663
 17506  06C2  3A01               	xorlw	1	; case 25
 17507  06C3  1903               	skipnz
 17508  06C4  2E79               	goto	i1l4663
 17509  06C5  3A03               	xorlw	3	; case 26
 17510  06C6  1903               	skipnz
 17511  06C7  2E96               	goto	i1l4675
 17512  06C8  3A01               	xorlw	1	; case 27
 17513  06C9  1903               	skipnz
 17514  06CA  2E96               	goto	i1l4675
 17515  06CB  3A07               	xorlw	7	; case 28
 17516  06CC  1903               	skipnz
 17517  06CD  2E78               	goto	i1l963
 17518  06CE  3A01               	xorlw	1	; case 29
 17519  06CF  1903               	skipnz
 17520  06D0  2E5A               	goto	i1l952
 17521  06D1  3A03               	xorlw	3	; case 30
 17522  06D2  1903               	skipnz
 17523  06D3  2E5A               	goto	i1l952
 17524  06D4  3A01               	xorlw	1	; case 31
 17525  06D5  1903               	skipnz
 17526  06D6  2E5A               	goto	i1l952
 17527  06D7  3A5F               	xorlw	95	; case 64
 17528  06D8  1903               	skipnz
 17529  06D9  2EA9               	goto	i1l4687
 17530  06DA  3A01               	xorlw	1	; case 65
 17531  06DB  1903               	skipnz
 17532  06DC  2EA9               	goto	i1l4687
 17533  06DD  3A05               	xorlw	5	; case 68
 17534  06DE  1903               	skipnz
 17535  06DF  2EA9               	goto	i1l4687
 17536  06E0  3A01               	xorlw	1	; case 69
 17537  06E1  1903               	skipnz
 17538  06E2  2EA9               	goto	i1l4687
 17539  06E3  3A0D               	xorlw	13	; case 72
 17540  06E4  1903               	skipnz
 17541  06E5  2EA9               	goto	i1l4687
 17542  06E6  3A01               	xorlw	1	; case 73
 17543  06E7  1903               	skipnz
 17544  06E8  2EA9               	goto	i1l4687
 17545  06E9  3A05               	xorlw	5	; case 76
 17546  06EA  1903               	skipnz
 17547  06EB  2E9F               	goto	i1l4681
 17548  06EC  3A01               	xorlw	1	; case 77
 17549  06ED  1903               	skipnz
 17550  06EE  2E9F               	goto	i1l4681
 17551  06EF  3A1D               	xorlw	29	; case 80
 17552  06F0  1903               	skipnz
 17553  06F1  2E9F               	goto	i1l979
 17554  06F2  3A01               	xorlw	1	; case 81
 17555  06F3  1903               	skipnz
 17556  06F4  2E9F               	goto	i1l4681
 17557  06F5  3A05               	xorlw	5	; case 84
 17558  06F6  1903               	skipnz
 17559  06F7  2EA9               	goto	i1l4687
 17560  06F8  3A01               	xorlw	1	; case 85
 17561  06F9  1903               	skipnz
 17562  06FA  2EA9               	goto	i1l4687
 17563  06FB  3A0D               	xorlw	13	; case 88
 17564  06FC  1903               	skipnz
 17565  06FD  2EA9               	goto	i1l988
 17566  06FE  3A01               	xorlw	1	; case 89
 17567  06FF  1903               	skipnz
 17568  0700  2EA9               	goto	i1l988
 17569  0701  2F02               	goto	i1l957
 17570  0702                     i1l957:	
 17571  0702  2F6B               	goto	i1l4721
 17572  0703                     i1l4697:	
 17573  0703  2786  3180         	fcall	PL160	;call to abstracted procedure
 17574  0705  1903               	skipnz
 17575  0706  2F10               	goto	i1l4707
 17576  0707  2781  3180         	fcall	PL158	;call to abstracted procedure
 17577  0709  1903               	btfsc	3,2
 17578  070A  2F10               	goto	i1l4707
 17579  070B  2F3F               	goto	i1l4709
 17580  070C                     i1l1007:	
 17581  070C  2EA7               	goto	i1l4685
 17582  070D                     i1l4703:	
 17583                           
 17584                           ;ir.c: 191: result = 255;
 17585  070D  30FF               	movlw	255
 17586  070E                     L33:	
 17587  070E  00F1               	movwf	IR_GetKeyType@result
 17588                           
 17589                           ;ir.c: 192: break;
 17590  070F  2F6B               	goto	i1l4721
 17591  0710                     i1l4707:	
 17592  0710  0872               	movf	IR_GetKeyType@keynum,w
 17593                           
 17594                           ; Switch size 1, requested type "space"
 17595                           ; Number of cases is 15, Range of values is 7 to 89
 17596                           ; switch strategies available:
 17597                           ; Name         Instructions Cycles
 17598                           ; simple_byte           46    24 (average)
 17599                           ; direct_byte          175     9 (fixed)
 17600                           ; jumptable            263     9 (fixed)
 17601                           ;	Chosen strategy is simple_byte
 17602  0711  3A07               	xorlw	7	; case 7
 17603  0712  1903               	skipnz
 17604  0713  2E5A               	goto	i1l952
 17605  0714  3A47               	xorlw	71	; case 64
 17606  0715  1903               	skipnz
 17607  0716  2EA7               	goto	i1l4685
 17608  0717  3A01               	xorlw	1	; case 65
 17609  0718  1903               	skipnz
 17610  0719  2EA7               	goto	i1l4685
 17611  071A  3A05               	xorlw	5	; case 68
 17612  071B  1903               	skipnz
 17613  071C  2EA7               	goto	i1l4685
 17614  071D  3A01               	xorlw	1	; case 69
 17615  071E  1903               	skipnz
 17616  071F  2EA7               	goto	i1l4685
 17617  0720  3A0D               	xorlw	13	; case 72
 17618  0721  1903               	skipnz
 17619  0722  2EA7               	goto	i1l4685
 17620  0723  3A01               	xorlw	1	; case 73
 17621  0724  1903               	skipnz
 17622  0725  2EA7               	goto	i1l4685
 17623  0726  3A05               	xorlw	5	; case 76
 17624  0727  1903               	skipnz
 17625  0728  2E5A               	goto	i1l952
 17626  0729  3A01               	xorlw	1	; case 77
 17627  072A  1903               	skipnz
 17628  072B  2E5A               	goto	i1l952
 17629  072C  3A1D               	xorlw	29	; case 80
 17630  072D  1903               	skipnz
 17631  072E  2E78               	goto	i1l963
 17632  072F  3A01               	xorlw	1	; case 81
 17633  0730  1903               	skipnz
 17634  0731  2E5A               	goto	i1l952
 17635  0732  3A05               	xorlw	5	; case 84
 17636  0733  1903               	skipnz
 17637  0734  2EA7               	goto	i1l4685
 17638  0735  3A01               	xorlw	1	; case 85
 17639  0736  1903               	skipnz
 17640  0737  2EA7               	goto	i1l4685
 17641  0738  3A0D               	xorlw	13	; case 88
 17642  0739  1903               	skipnz
 17643  073A  2F0C               	goto	i1l1007
 17644  073B  3A01               	xorlw	1	; case 89
 17645  073C  1903               	skipnz
 17646  073D  2F0C               	goto	i1l1007
 17647  073E  2F0D               	goto	i1l4703
 17648  073F                     i1l4709:	
 17649  073F  278B  3180         	fcall	PL166	;call to abstracted procedure
 17650  0741  1903               	skipnz
 17651  0742  2F4B               	goto	i1l4719
 17652  0743  2790  3180         	fcall	PL170	;call to abstracted procedure
 17653  0745  1903               	skipnz
 17654  0746  2F4B               	goto	i1l4719
 17655  0747  2795  3180         	fcall	PL172	;call to abstracted procedure
 17656  0749  1D03               	skipz
 17657  074A  2F6B               	goto	i1l4721
 17658  074B                     i1l4719:	
 17659  074B  0872               	movf	IR_GetKeyType@keynum,w
 17660                           
 17661                           ; Switch size 1, requested type "space"
 17662                           ; Number of cases is 10, Range of values is 4 to 15
 17663                           ; switch strategies available:
 17664                           ; Name         Instructions Cycles
 17665                           ; simple_byte           31    16 (average)
 17666                           ; direct_byte           33     9 (fixed)
 17667                           ; jumptable            263     9 (fixed)
 17668                           ;	Chosen strategy is simple_byte
 17669  074C  3A04               	xorlw	4	; case 4
 17670  074D  1903               	skipnz
 17671  074E  2E5A               	goto	i1l952
 17672  074F  3A01               	xorlw	1	; case 5
 17673  0750  1903               	skipnz
 17674  0751  2E5A               	goto	i1l952
 17675  0752  3A0D               	xorlw	13	; case 8
 17676  0753  1903               	skipnz
 17677  0754  2E5A               	goto	i1l952
 17678  0755  3A01               	xorlw	1	; case 9
 17679  0756  1903               	skipnz
 17680  0757  2E5A               	goto	i1l952
 17681  0758  3A03               	xorlw	3	; case 10
 17682  0759  1903               	skipnz
 17683  075A  2E5A               	goto	i1l952
 17684  075B  3A01               	xorlw	1	; case 11
 17685  075C  1903               	skipnz
 17686  075D  2E5A               	goto	i1l952
 17687  075E  3A07               	xorlw	7	; case 12
 17688  075F  1903               	skipnz
 17689  0760  2E78               	goto	i1l963
 17690  0761  3A01               	xorlw	1	; case 13
 17691  0762  1903               	skipnz
 17692  0763  2E5A               	goto	i1l952
 17693  0764  3A03               	xorlw	3	; case 14
 17694  0765  1903               	skipnz
 17695  0766  2E5A               	goto	i1l952
 17696  0767  3A01               	xorlw	1	; case 15
 17697  0768  1903               	skipnz
 17698  0769  2E5A               	goto	i1l952
 17699  076A  2F0D               	goto	i1l4703
 17700  076B                     i1l4721:	
 17701                           
 17702                           ;ir.c: 212: }
 17703                           ;ir.c: 213: return result;
 17704  076B  0871               	movf	IR_GetKeyType@result,w
 17705  076C  0008               	return
 17706  076D                     __end_of_IR_GetKeyType:	
 17707  076D                     __ptext101:	
 17708 ;; *************** function i1_TMR2_EnableInterrupt *****************
 17709 ;; Defined at:
 17710 ;;		line 45 in file "driver/src/tmr2.c"
 17711 ;; Parameters:    Size  Location     Type
 17712 ;;		None
 17713 ;; Auto vars:     Size  Location     Type
 17714 ;;		None
 17715 ;; Return value:  Size  Location     Type
 17716 ;;                  1    wreg      void 
 17717 ;; Registers used:
 17718 ;;		None
 17719 ;; Tracked objects:
 17720 ;;		On entry : 1F/0
 17721 ;;		On exit  : 1F/1
 17722 ;;		Unchanged: 0/0
 17723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17728 ;;Total ram usage:        0 bytes
 17729 ;; Hardware stack levels used:    1
 17730 ;; This function calls:
 17731 ;;		Nothing
 17732 ;; This function is called by:
 17733 ;;		_IR_Decode
 17734 ;; This function uses a non-reentrant model
 17735 ;;
 17736                           
 17737                           
 17738                           ;psect for function i1_TMR2_EnableInterrupt
 17739  076D                     i1_TMR2_EnableInterrupt:	
 17740                           
 17741                           ;tmr2.c: 47: PIE1bits.TMR2IE = 1;
 17742                           
 17743                           ;incstack = 0
 17744                           ; Regs used in i1_TMR2_EnableInterrupt: []
 17745  076D  0021               	movlb	1	; select bank1
 17746  076E  1491               	bsf	17,1	;volatile
 17747  076F  0008               	return
 17748  0770                     __end_ofi1_TMR2_EnableInterrupt:	
 17749  0770                     __ptext102:	
 17750 ;; *************** function i1_TMR2_DisableInterrupt *****************
 17751 ;; Defined at:
 17752 ;;		line 40 in file "driver/src/tmr2.c"
 17753 ;; Parameters:    Size  Location     Type
 17754 ;;		None
 17755 ;; Auto vars:     Size  Location     Type
 17756 ;;		None
 17757 ;; Return value:  Size  Location     Type
 17758 ;;                  1    wreg      void 
 17759 ;; Registers used:
 17760 ;;		None
 17761 ;; Tracked objects:
 17762 ;;		On entry : 1F/0
 17763 ;;		On exit  : 1F/1
 17764 ;;		Unchanged: 0/0
 17765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17770 ;;Total ram usage:        0 bytes
 17771 ;; Hardware stack levels used:    1
 17772 ;; This function calls:
 17773 ;;		Nothing
 17774 ;; This function is called by:
 17775 ;;		_IR_Decode
 17776 ;; This function uses a non-reentrant model
 17777 ;;
 17778                           
 17779                           
 17780                           ;psect for function i1_TMR2_DisableInterrupt
 17781  0770                     i1_TMR2_DisableInterrupt:	
 17782                           
 17783                           ;tmr2.c: 42: PIE1bits.TMR2IE = 0;
 17784                           
 17785                           ;incstack = 0
 17786                           ; Regs used in i1_TMR2_DisableInterrupt: []
 17787  0770  0021               	movlb	1	; select bank1
 17788  0771  1091               	bcf	17,1	;volatile
 17789  0772  0008               	return
 17790  0773                     __end_ofi1_TMR2_DisableInterrupt:	
 17791  0773                     PL12:	
 17792  0773  307B               	movlw	123
 17793  0774  0086               	movwf	6
 17794  0775  3023               	movlw	35
 17795  0776  0C01               	rrf	1,w
 17796  0777  00F0               	movwf	??_IR_GetKeyType
 17797  0778  0CF0               	rrf	??_IR_GetKeyType,f
 17798  0779  0C70               	rrf	??_IR_GetKeyType,w
 17799  077A  390F               	andlw	15
 17800  077B  0008               	return
 17801  077C                     __end_ofPL12:	
 17802  077C                     PL110:	
 17803  077C  307B               	movlw	123
 17804  077D  0086               	movwf	6
 17805  077E  3023               	movlw	35
 17806  077F  0087               	movwf	7
 17807  0780  0008               	return
 17808  0781                     __end_ofPL110:	
 17809  0781                     PL158:	
 17810  0781  0E36               	swapf	_ir_state,w	;volatile
 17811  0782  0C89               	rrf	9,f
 17812  0783  3907               	andlw	7
 17813  0784  3A05               	xorlw	5
 17814  0785  0008               	return
 17815  0786                     __end_ofPL158:	
 17816  0786                     PL160:	
 17817  0786  0E36               	swapf	_ir_state,w	;volatile
 17818  0787  0C89               	rrf	9,f
 17819  0788  3907               	andlw	7
 17820  0789  3A04               	xorlw	4
 17821  078A  0008               	return
 17822  078B                     __end_ofPL160:	
 17823  078B                     PL166:	
 17824  078B  0E36               	swapf	_ir_state,w	;volatile
 17825  078C  0C89               	rrf	9,f
 17826  078D  3907               	andlw	7
 17827  078E  3A01               	xorlw	1
 17828  078F  0008               	return
 17829  0790                     __end_ofPL166:	
 17830  0790                     PL170:	
 17831  0790  0E36               	swapf	_ir_state,w	;volatile
 17832  0791  0C89               	rrf	9,f
 17833  0792  3907               	andlw	7
 17834  0793  3A02               	xorlw	2
 17835  0794  0008               	return
 17836  0795                     __end_ofPL170:	
 17837  0795                     PL172:	
 17838  0795  0E36               	swapf	_ir_state,w	;volatile
 17839  0796  0C89               	rrf	9,f
 17840  0797  3907               	andlw	7
 17841  0798  3A03               	xorlw	3
 17842  0799  0008               	return
 17843  079A                     __end_ofPL172:	
 17844                           
 17845                           	psect	text99
 17846  110C                     __ptext99:	
 17847 ;; *************** function _TMR1_GATE_ISR *****************
 17848 ;; Defined at:
 17849 ;;		line 40 in file "driver/src/tmr1.c"
 17850 ;; Parameters:    Size  Location     Type
 17851 ;;		None
 17852 ;; Auto vars:     Size  Location     Type
 17853 ;;		None
 17854 ;; Return value:  Size  Location     Type
 17855 ;;                  1    wreg      void 
 17856 ;; Registers used:
 17857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17858 ;; Tracked objects:
 17859 ;;		On entry : 1F/0
 17860 ;;		On exit  : 0/0
 17861 ;;		Unchanged: 0/0
 17862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17867 ;;Total ram usage:        0 bytes
 17868 ;; Hardware stack levels used:    1
 17869 ;; Hardware stack levels required when called:    2
 17870 ;; This function calls:
 17871 ;;		Absolute function
 17872 ;;		_IR_Decode
 17873 ;; This function is called by:
 17874 ;;		_ISR
 17875 ;; This function uses a non-reentrant model
 17876 ;;
 17877                           
 17878                           
 17879                           ;psect for function _TMR1_GATE_ISR
 17880  110C                     _TMR1_GATE_ISR:	
 17881                           
 17882                           ;tmr1.c: 42: PIR1bits.TMR1GIF = 0;
 17883                           
 17884                           ;incstack = 0
 17885                           ; Regs used in _TMR1_GATE_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17886  110C  1391               	bcf	17,7	;volatile
 17887                           
 17888                           ;tmr1.c: 43: if ( tmr1_gate_isr_handler )
 17889  110D  0021               	movlb	1	; select bank1
 17890  110E  0866               	movf	_tmr1_gate_isr_handler^(0+128),w
 17891  110F  0467               	iorwf	(_tmr1_gate_isr_handler+1)^(0+128),w
 17892  1110  1903               	btfsc	3,2
 17893  1111  0008               	return
 17894                           
 17895                           ;tmr1.c: 44: {
 17896                           ;tmr1.c: 45: tmr1_gate_isr_handler ( );
 17897  1112  0867               	movf	(_tmr1_gate_isr_handler+1)^(0+128),w
 17898  1113  008A               	movwf	10
 17899  1114  0866               	movf	_tmr1_gate_isr_handler^(0+128),w
 17900  1115  000A               	callw
 17901  1116  3191               	pagesel	$
 17902  1117  0008               	return
 17903  1118                     __end_of_TMR1_GATE_ISR:	
 17904                           
 17905                           	psect	text104
 17906  1100                     __ptext104:	
 17907 ;; *************** function _TMR0_ISR *****************
 17908 ;; Defined at:
 17909 ;;		line 27 in file "driver/src/tmr0.c"
 17910 ;; Parameters:    Size  Location     Type
 17911 ;;		None
 17912 ;; Auto vars:     Size  Location     Type
 17913 ;;		None
 17914 ;; Return value:  Size  Location     Type
 17915 ;;                  1    wreg      void 
 17916 ;; Registers used:
 17917 ;;		wreg, status,2, status,0, pclath, cstack
 17918 ;; Tracked objects:
 17919 ;;		On entry : 1F/0
 17920 ;;		On exit  : 0/0
 17921 ;;		Unchanged: 0/0
 17922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17927 ;;Total ram usage:        0 bytes
 17928 ;; Hardware stack levels used:    1
 17929 ;; Hardware stack levels required when called:    1
 17930 ;; This function calls:
 17931 ;;		Absolute function
 17932 ;;		_RTC_OnSecond
 17933 ;; This function is called by:
 17934 ;;		_ISR
 17935 ;; This function uses a non-reentrant model
 17936 ;;
 17937                           
 17938                           
 17939                           ;psect for function _TMR0_ISR
 17940  1100                     _TMR0_ISR:	
 17941                           
 17942                           ;tmr0.c: 29: PIR0bits.TMR0IF = 0;
 17943                           
 17944                           ;incstack = 0
 17945                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 17946  1100  1290               	bcf	16,5	;volatile
 17947                           
 17948                           ;tmr0.c: 31: if ( tmr0_isr_handler )
 17949  1101  0021               	movlb	1	; select bank1
 17950  1102  0868               	movf	_tmr0_isr_handler^(0+128),w
 17951  1103  0469               	iorwf	(_tmr0_isr_handler+1)^(0+128),w
 17952  1104  1903               	btfsc	3,2
 17953  1105  0008               	return
 17954                           
 17955                           ;tmr0.c: 32: {
 17956                           ;tmr0.c: 33: tmr0_isr_handler ( );
 17957  1106  0869               	movf	(_tmr0_isr_handler+1)^(0+128),w
 17958  1107  008A               	movwf	10
 17959  1108  0868               	movf	_tmr0_isr_handler^(0+128),w
 17960  1109  000A               	callw
 17961  110A  3191               	pagesel	$
 17962  110B  0008               	return
 17963  110C                     __end_of_TMR0_ISR:	
 17964                           
 17965                           	psect	text105
 17966  1190                     __ptext105:	
 17967 ;; *************** function _RTC_OnSecond *****************
 17968 ;; Defined at:
 17969 ;;		line 19 in file "user/src/rtc.c"
 17970 ;; Parameters:    Size  Location     Type
 17971 ;;		None
 17972 ;; Auto vars:     Size  Location     Type
 17973 ;;		None
 17974 ;; Return value:  Size  Location     Type
 17975 ;;                  1    wreg      void 
 17976 ;; Registers used:
 17977 ;;		wreg, status,2, status,0
 17978 ;; Tracked objects:
 17979 ;;		On entry : 1F/1
 17980 ;;		On exit  : 1F/0
 17981 ;;		Unchanged: 0/0
 17982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17987 ;;Total ram usage:        0 bytes
 17988 ;; Hardware stack levels used:    1
 17989 ;; This function calls:
 17990 ;;		Nothing
 17991 ;; This function is called by:
 17992 ;;		_Interrupt_Initialize
 17993 ;;		_TMR0_ISR
 17994 ;; This function uses a non-reentrant model
 17995 ;;
 17996                           
 17997                           
 17998                           ;psect for function _RTC_OnSecond
 17999  1190                     _RTC_OnSecond:	
 18000                           
 18001                           ;rtc.c: 21: rtc_time.second++;
 18002                           
 18003                           ;incstack = 0
 18004                           ; Regs used in _RTC_OnSecond: [wreg+status,2+status,0]
 18005  1190  0020               	movlb	0	; select bank0
 18006  1191  303C               	movlw	60
 18007  1192  0ABF               	incf	_rtc_time+2,f
 18008                           
 18009                           ;rtc.c: 22: if( rtc_time.second > 59 )
 18010  1193  023F               	subwf	_rtc_time+2,w
 18011  1194  1C03               	skipc
 18012  1195  29A4               	goto	i1l5047
 18013  1196  303C               	movlw	60
 18014                           
 18015                           ;rtc.c: 23: {
 18016                           ;rtc.c: 24: rtc_time.second = 0;
 18017  1197  01BF               	clrf	_rtc_time+2
 18018                           
 18019                           ;rtc.c: 25: rtc_time.minute++;
 18020  1198  0ABE               	incf	_rtc_time+1,f
 18021                           
 18022                           ;rtc.c: 26: if( rtc_time.minute > 59 )
 18023  1199  023E               	subwf	_rtc_time+1,w
 18024  119A  1C03               	skipc
 18025  119B  29A3               	goto	i1l5045
 18026  119C  3018               	movlw	24
 18027                           
 18028                           ;rtc.c: 27: {
 18029                           ;rtc.c: 28: rtc_time.minute = 0;
 18030  119D  01BE               	clrf	_rtc_time+1
 18031                           
 18032                           ;rtc.c: 29: rtc_time.hour++;
 18033  119E  0ABD               	incf	_rtc_time,f
 18034                           
 18035                           ;rtc.c: 30: if( rtc_time.hour > 23 )
 18036  119F  023D               	subwf	_rtc_time,w
 18037  11A0  1803               	btfsc	3,0
 18038                           
 18039                           ;rtc.c: 31: {
 18040                           ;rtc.c: 32: rtc_time.hour = 0;
 18041  11A1  01BD               	clrf	_rtc_time
 18042                           
 18043                           ;rtc.c: 33: }
 18044                           ;rtc.c: 34: rtc_status.mHour = 1;
 18045  11A2  1531               	bsf	_rtc_status,2	;volatile
 18046  11A3                     i1l5045:	
 18047                           
 18048                           ;rtc.c: 35: }
 18049                           ;rtc.c: 36: rtc_status.mMin = 1;
 18050  11A3  14B1               	bsf	_rtc_status,1	;volatile
 18051  11A4                     i1l5047:	
 18052                           
 18053                           ;rtc.c: 37: }
 18054                           ;rtc.c: 38: rtc_status.mSec = 1;
 18055  11A4  1431               	bsf	_rtc_status,0	;volatile
 18056  11A5  0008               	return
 18057  11A6                     __end_of_RTC_OnSecond:	
 18058                           
 18059                           	psect	text106
 18060  11A6                     __ptext106:	
 18061 ;; *************** function _EUSART_Transmit_ISR *****************
 18062 ;; Defined at:
 18063 ;;		line 63 in file "driver/src/eusart.c"
 18064 ;; Parameters:    Size  Location     Type
 18065 ;;		None
 18066 ;; Auto vars:     Size  Location     Type
 18067 ;;		None
 18068 ;; Return value:  Size  Location     Type
 18069 ;;                  1    wreg      void 
 18070 ;; Registers used:
 18071 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18072 ;; Tracked objects:
 18073 ;;		On entry : 1F/0
 18074 ;;		On exit  : 1E/0
 18075 ;;		Unchanged: 0/0
 18076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18081 ;;Total ram usage:        0 bytes
 18082 ;; Hardware stack levels used:    1
 18083 ;; This function calls:
 18084 ;;		Nothing
 18085 ;; This function is called by:
 18086 ;;		_ISR
 18087 ;; This function uses a non-reentrant model
 18088 ;;
 18089                           
 18090                           
 18091                           ;psect for function _EUSART_Transmit_ISR
 18092  11A6                     _EUSART_Transmit_ISR:	
 18093                           
 18094                           ;eusart.c: 65: if ( sizeof (txBuf ) > txRemain )
 18095                           
 18096                           ;incstack = 0
 18097                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 18098  11A6  3020               	movlw	32
 18099  11A7  0260               	subwf	_txRemain,w
 18100  11A8  1803               	skipnc
 18101  11A9  29BA               	goto	i1l105
 18102                           
 18103                           ;eusart.c: 66: {
 18104                           ;eusart.c: 67: TXREG = txBuf[txTail++];
 18105  11AA  0835               	movf	_txTail,w
 18106  11AB  3E20               	addlw	(low (_txBuf| (0+256)))& (0+255)
 18107  11AC  0086               	movwf	6
 18108  11AD  3001               	movlw	1	; select bank2/3
 18109  11AE  0087               	movwf	7
 18110  11AF  0801               	movf	1,w
 18111  11B0  0023               	movlb	3	; select bank3
 18112  11B1  009A               	movwf	26	;volatile
 18113  11B2  0020               	movlb	0	; select bank0
 18114  11B3  3020               	movlw	32
 18115  11B4  0AB5               	incf	_txTail,f
 18116                           
 18117                           ;eusart.c: 68: if ( sizeof (txBuf ) <= txTail )
 18118  11B5  0235               	subwf	_txTail,w
 18119  11B6  1803               	btfsc	3,0
 18120                           
 18121                           ;eusart.c: 69: {
 18122                           ;eusart.c: 70: txTail = 0;
 18123  11B7  01B5               	clrf	_txTail
 18124                           
 18125                           ;eusart.c: 71: }
 18126                           ;eusart.c: 72: txRemain++;
 18127  11B8  0AE0               	incf	_txRemain,f
 18128                           
 18129                           ;eusart.c: 73: }
 18130  11B9  0008               	return
 18131  11BA                     i1l105:	
 18132                           
 18133                           ;eusart.c: 74: else
 18134                           ;eusart.c: 75: {
 18135                           ;eusart.c: 76: PIE1bits.TXIE = 0;
 18136  11BA  0021               	movlb	1	; select bank1
 18137  11BB  1211               	bcf	17,4	;volatile
 18138  11BC  0008               	return
 18139  11BD                     __end_of_EUSART_Transmit_ISR:	
 18140  007E                     btemp	set	126	;btemp
 18141  007E                     int$flags	set	126
 18142  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    10
    Data        50
    BSS         90
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      65
    BANK1            80      0      74
    BANK2            80     20      62
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           11      0       0
    BANK12            0      0       0

Pointer List with Targets:

    Util_DecValue@pSrc	PTR unsigned int  size(2) Largest target is 117
		 -> gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara(BANK1[26]), gLedPara.mVolume(BIGRAM[1]), gLedPara(BIGRAM[117]), 

    Util_IncValue@pSrc	PTR unsigned int  size(2) Largest target is 117
		 -> gLedRunPara.mCurrentBright(BANK1[10]), gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara(BANK1[26]), gLedPara.mVolume(BIGRAM[1]), 
		 -> gLedPara(BIGRAM[117]), 

    IR_IsValidTime@tm	PTR unsigned char  size(1) Largest target is 7
		 -> ir_state.time(BANK0[4]), ir_state(BANK0[7]), 

    Led_SetCustom@pValue	PTR unsigned int  size(1) Largest target is 26
		 -> gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara(BANK1[26]), 

    sp__RTC_GetTime	PTR struct . size(1) Largest target is 3
		 -> rtc_time(BANK0[3]), 

    loadDuty	PTR FTN(unsigned int ,)void [5] size(2) Largest target is 1
		 -> PWM5_LoadDutyValue(), PWM4_LoadDutyValue(), PWM3_LoadDutyValue(), PWM2_LoadDutyValue(), 
		 -> PWM1_LoadDutyValue(), 

    TMR4_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Notice(), 

    tmr4_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Notice(), Absolute function(), 

    TMR2_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Run(), 

    tmr2_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Run(), Absolute function(), 

    TMR1_Gate_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> IR_Decode(), 

    tmr1_gate_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> IR_Decode(), Absolute function(), 

    tmr1_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> RTC_OnSecond(), 

    tmr0_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> RTC_OnSecond(), Absolute function(), 

    eusart_rcv_isr_handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    DATAEE_ReadBuffer@buf	PTR unsigned char  size(2) Largest target is 117
		 -> gLedPara(BIGRAM[117]), 

    DATAEE_WriteBuffer@buf	PTR unsigned char  size(2) Largest target is 117
		 -> gLedPara(BIGRAM[117]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR4_ISR->_Led_Notice
    _TMR2_ISR->_Led_Run
    _Led_Run->_Led_RunMusic
    _Led_RunMusic->_Led_DynamicCloud
    _Led_RunMusic->_Led_DynamicMoon
    _Led_RunMusic->_Led_DynamicStorm
    _Led_RunMusic->_Led_DynamicWave
    _Led_DynamicWave->i1___wmul
    _Led_DynamicStorm->i1___wmul
    _Led_DynamicMoon->i1___wmul
    _Led_DynamicCloud->i1___wmul
    i1_Led_UpdateBright->i1_PWM5_LoadDutyValue
    _Audio_SelectSound->i1_EUSART_Write
    _Led_Ramp->i1_PWM5_LoadDutyValue
    _IR_ScanLongPress->_Led_SetCustom
    _Led_SetCustom->i1___wmul
    _TMR1_GATE_ISR->_IR_Decode
    _IR_Decode->_IR_GetKeyType

Critical Paths under _main in BANK0

    _main->_Led_CheckAutoStatus
    _main->_Led_InitPara
    _SYSTEM_Initialize->_PIN_Initialize
    _Led_SaveParaIfChanged->_DATAEE_WriteBuffer
    _DATAEE_WriteBuffer->_DATAEE_WriteByte
    _Led_InitPara->_DATAEE_ReadBuffer
    _DATAEE_ReadBuffer->_DATAEE_ReadByte
    _Led_CheckAutoStatus->___wmul
    _Led_AutoRun->_Util_IncValue
    _Interrupt_Initialize->_TMR0_SetInterruptHandler
    _Interrupt_Initialize->_TMR1_Gate_SetInterruptHandler
    _Interrupt_Initialize->_TMR2_SetInterruptHandler
    _Interrupt_Initialize->_TMR4_SetInterruptHandler
    _IR_ExitTimeout->_Led_Initialize
    _IR_KeyAction->_Led_Initialize
    _IR_IsValidTime->___bmul
    _IR_ExitSet->_Led_Initialize
    _Led_Initialize->___wmul
    _Led_UpdateBright->_PWM5_LoadDutyValue
    _Audio_Initialize->_Audio_SetPlayMode
    _Audio_Initialize->_Audio_SetVolume
    _Audio_StopSound->_EUSART_Write
    _Audio_SetVolume->_EUSART_Write
    _Audio_SetPlayMode->_EUSART_Write
    _Audio_GetValue->___wmul

Critical Paths under _ISR in BANK0

    _Led_RunMusic->_Led_DynamicCloud
    _Led_RunMusic->_Led_DynamicMoon
    _Led_RunMusic->_Led_DynamicStorm
    _Led_RunMusic->_Led_DynamicWave
    _IR_ScanLongPress->_Led_SetCustom

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _IR_KeyAtionIfPressed->_IR_KeyAction

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   51480
                     _Audio_GetValue
                   _Audio_Initialize
               _IR_KeyAtionIfPressed
             _IR_ResetIfTMR1Overflow
                 _IR_UpdateSetStatus
               _Interrupt_Initialize
                        _Led_AutoRun
                _Led_CheckAutoStatus
                       _Led_InitPara
                     _Led_Initialize
              _Led_SaveParaIfChanged
                      _RTC_HourReady
                    _RTC_MinuteReady
                    _RTC_SecondReady
                  _SYSTEM_Initialize
                    _TMR0_StartTimer
                    _TMR1_StartTimer
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
             _ADC_Initialize_Default
          _EUSART_Initialize_Default
              _OSCILLATOR_Initialize
                     _PIN_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM3_Initialize
                    _PWM4_Initialize
                    _PWM5_Initialize
            _TMR0_Initialize_Default
            _TMR1_Initialize_Default
            _TMR2_Initialize_Default
            _TMR4_Initialize_Default
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_Initialize                                       1     1      0      23
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize_Default                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize_Default                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_SecondReady                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_MinuteReady                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_HourReady                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_SaveParaIfChanged                                0     0      0     584
                 _DATAEE_WriteBuffer
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteBuffer                                   6     1      5     584
                                             17 BANK0      6     1      5
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     4     1      3     242
                                             13 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Led_InitPara                                        10    10      0    4581
                                             22 BANK0     10    10      0
                  _DATAEE_ReadBuffer
                   _Led_FirstPowerUp
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Led_FirstPowerUp                                     7     7      0     178
                                             13 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadBuffer                                    7     2      5     463
                                             15 BANK0      7     2      5
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      2     0      2     121
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Led_CheckAutoStatus                                 13    13      0    4276
                                             19 BANK0     13    13      0
                   _Led_UpdateBright
                        _RTC_GetTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Led_AutoRun                                          5     5      0    4796
                                             23 BANK0      5     5      0
                   _Led_UpdateBright
                      _Util_IncValue
 ---------------------------------------------------------------------------------
 (1) _Interrupt_Initialize                                 0     0      0     392
           _TMR0_SetInterruptHandler
      _TMR1_Gate_SetInterruptHandler
           _TMR2_SetInterruptHandler
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR4_SetInterruptHandler                             2     0      2      98
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2      98
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_Gate_SetInterruptHandler                        2     0      2      98
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2      98
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _IR_UpdateSetStatus                                   0     0      0    4440
                     _IR_ExitTimeout
 ---------------------------------------------------------------------------------
 (2) _IR_ExitTimeout                                       0     0      0    4440
                     _Led_Initialize
                    _Led_StartNotice
 ---------------------------------------------------------------------------------
 (1) _IR_ResetIfTMR1Overflow                               0     0      0       0
                    _TMR1_StartTimer
                     _TMR1_StopTimer
               _TMR2_EnableInterrupt
 ---------------------------------------------------------------------------------
 (2) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_KeyAtionIfPressed                                 0     0      0   24018
                       _IR_KeyAction
 ---------------------------------------------------------------------------------
 (2) _IR_KeyAction                                        20    20      0   24018
                                              0 BANK2     20    20      0
                    _Audio_SetVolume
                    _Audio_StopSound
                         _IR_ExitSet
                        _IR_GetIndex
                     _IR_IsValidTime
                     _Led_Initialize
                    _Led_StartNotice
                        _RTC_GetTime
              _TMR2_DisableInterrupt
               _TMR2_EnableInterrupt
                      _Util_DecValue
                      _Util_IncValue
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Util_IncValue                                       10     4      6    4162
                                             13 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (3) _Util_DecValue                                       10     4      6    3622
                                             13 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _TMR2_EnableInterrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_DisableInterrupt                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _IR_IsValidTime                                       5     4      1    1331
                                             16 BANK0      5     4      1
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     676
                                             13 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _IR_GetIndex                                          2     2      0     250
                                             13 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _IR_ExitSet                                           0     0      0    4440
                     _Led_Initialize
                    _Led_StartNotice
 ---------------------------------------------------------------------------------
 (3) _Led_StartNotice                                      2     2      0      31
                                             13 BANK0      2     2      0
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (4) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_Initialize                                       8     8      0    4409
                                             19 BANK0      8     8      0
                    _Led_TurnOffRamp
                     _Led_TurnOnRamp
                   _Led_UpdateBright
                        _RTC_GetTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _RTC_GetTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Led_UpdateBright                                     1     1      0     380
                                             17 BANK0      1     1      0
                 _PWM1_LoadDutyValue *
                 _PWM2_LoadDutyValue *
                 _PWM3_LoadDutyValue *
                 _PWM4_LoadDutyValue *
                 _PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (3) _PWM5_LoadDutyValue                                   4     2      2     126
                                             13 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _PWM4_LoadDutyValue                                   2     0      2      31
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM3_LoadDutyValue                                   2     0      2      31
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM2_LoadDutyValue                                   2     0      2      31
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM1_LoadDutyValue                                   2     0      2      31
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOnRamp                                       5     5      0     130
                                             13 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOffRamp                                      1     1      0      99
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Audio_Initialize                                     4     4      0     504
                                             16 BANK0      4     4      0
                  _Audio_SetPlayMode
                    _Audio_SetVolume
                    _Audio_StopSound
 ---------------------------------------------------------------------------------
 (3) _Audio_StopSound                                      1     1      0     133
                                             14 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _Audio_SetVolume                                      2     2      0     167
                                             14 BANK0      2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _Audio_SetPlayMode                                    2     2      0     167
                                             14 BANK0      2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      93
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Audio_GetValue                                       6     6      0    3457
                                             19 BANK0      6     6      0
                     _ADC_Conversion
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3246
                                             13 BANK0      6     2      4
                        _RTC_GetTime (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADC_Conversion                                       4     2      2      22
                                             13 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    8768
                _EUSART_Transmit_ISR
                           _TMR0_ISR
                      _TMR1_GATE_ISR
                           _TMR2_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR4_ISR                                             0     0      0       0
                   Absolute function *
                         _Led_Notice *
 ---------------------------------------------------------------------------------
 (9) _Led_Notice                                           1     1      0       0
                                              0 COMMON     1     1      0
                  _Led_TurnOffDirect
                   _Led_TurnOnDirect
                     _TMR4_StopTimer
 ---------------------------------------------------------------------------------
 (10) _TMR4_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Led_TurnOnDirect                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Led_TurnOffDirect                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR2_ISR                                             0     0      0    8132
                   Absolute function *
                            _Led_Run *
 ---------------------------------------------------------------------------------
 (9) _Led_Run                                              1     1      0    8132
                                             13 COMMON     1     1      0
                   _IR_ScanLongPress
                           _Led_Ramp
                       _Led_RunMusic
 ---------------------------------------------------------------------------------
 (10) _Led_RunMusic                                        1     1      0    5907
                                             12 COMMON     1     1      0
                  _Audio_SelectSound
                   _Led_DynamicCloud
                    _Led_DynamicMoon
                   _Led_DynamicStorm
                    _Led_DynamicWave
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicWave                                    19    17      2    1320
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicStorm                                   19    17      2    1490
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicMoon                                    19    17      2    1351
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicCloud                                   19    17      2    1629
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (12) i1_Led_UpdateBright                                  1     1      0     292
                                              4 COMMON     1     1      0
               i1_PWM1_LoadDutyValue *
               i1_PWM2_LoadDutyValue *
               i1_PWM3_LoadDutyValue *
               i1_PWM4_LoadDutyValue *
               i1_PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (11) _Audio_SelectSound                                   2     2      0     117
                                              1 COMMON     2     2      0
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (12) i1_EUSART_Write                                      1     1      0      66
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _Led_Ramp                                            7     7      0     540
                                              4 COMMON     7     7      0
               i1_PWM1_LoadDutyValue *
               i1_PWM2_LoadDutyValue *
               i1_PWM3_LoadDutyValue *
               i1_PWM4_LoadDutyValue *
               i1_PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (13) i1_PWM5_LoadDutyValue                                4     2      2      74
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM4_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM3_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM2_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM1_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _IR_ScanLongPress                                    7     7      0    1685
                                              4 BANK0      7     7      0
                      _Led_SetCustom
                      i1_IR_GetIndex
                  i1_Led_StartNotice
                    i1_Util_DecValue
                    i1_Util_IncValue
 ---------------------------------------------------------------------------------
 (11) i1_Util_IncValue                                    10     4      6     232
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (11) i1_Util_DecValue                                    10     4      6     232
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (11) i1_Led_StartNotice                                   2     2      0      22
                                              0 COMMON     2     2      0
                  i1_TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (12) i1_TMR4_StartTimer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_IR_GetIndex                                       2     2      0     165
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _Led_SetCustom                                      11    10      1     696
                                              6 COMMON     7     6      1
                                              0 BANK0      4     4      0
                           i1___wmul
 ---------------------------------------------------------------------------------
 (12) i1___wmul                                            6     2      4     440
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) _TMR1_GATE_ISR                                        0     0      0     636
                   Absolute function *
                          _IR_Decode *
 ---------------------------------------------------------------------------------
 (9) _IR_Decode                                            9     9      0     636
                                              3 COMMON     9     9      0
                      _IR_GetKeyType
            i1_TMR2_DisableInterrupt
             i1_TMR2_EnableInterrupt
 ---------------------------------------------------------------------------------
 (10) i1_TMR2_EnableInterrupt                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_TMR2_DisableInterrupt                             0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _IR_GetKeyType                                       3     3      0     256
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
                       _RTC_OnSecond *
 ---------------------------------------------------------------------------------
 (9) _RTC_OnSecond                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Audio_GetValue
     _ADC_Conversion
     ___wmul
       _RTC_GetTime (ARG)
   _Audio_Initialize
     _Audio_SetPlayMode
       _EUSART_Write
     _Audio_SetVolume
       _EUSART_Write
     _Audio_StopSound
       _EUSART_Write
   _IR_KeyAtionIfPressed
     _IR_KeyAction
       _Audio_SetVolume
         _EUSART_Write
       _Audio_StopSound
         _EUSART_Write
       _IR_ExitSet
         _Led_Initialize
           _Led_TurnOffRamp
           _Led_TurnOnRamp
           _Led_UpdateBright
             _PWM1_LoadDutyValue *
             _PWM2_LoadDutyValue *
             _PWM3_LoadDutyValue *
             _PWM4_LoadDutyValue *
             _PWM5_LoadDutyValue *
           _RTC_GetTime
           ___wmul
             _RTC_GetTime (ARG)
         _Led_StartNotice
           _TMR4_StartTimer
       _IR_GetIndex
       _IR_IsValidTime
         ___bmul
       _Led_Initialize
         _Led_TurnOffRamp
         _Led_TurnOnRamp
         _Led_UpdateBright
           _PWM1_LoadDutyValue *
           _PWM2_LoadDutyValue *
           _PWM3_LoadDutyValue *
           _PWM4_LoadDutyValue *
           _PWM5_LoadDutyValue *
         _RTC_GetTime
         ___wmul
           _RTC_GetTime (ARG)
       _Led_StartNotice
         _TMR4_StartTimer
       _RTC_GetTime
       _TMR2_DisableInterrupt
       _TMR2_EnableInterrupt
       _Util_DecValue
       _Util_IncValue
       ___bmul
       ___wmul
         _RTC_GetTime (ARG)
   _IR_ResetIfTMR1Overflow
     _TMR1_StartTimer
     _TMR1_StopTimer
     _TMR2_EnableInterrupt
   _IR_UpdateSetStatus
     _IR_ExitTimeout
       _Led_Initialize
         _Led_TurnOffRamp
         _Led_TurnOnRamp
         _Led_UpdateBright
           _PWM1_LoadDutyValue *
           _PWM2_LoadDutyValue *
           _PWM3_LoadDutyValue *
           _PWM4_LoadDutyValue *
           _PWM5_LoadDutyValue *
         _RTC_GetTime
         ___wmul
           _RTC_GetTime (ARG)
       _Led_StartNotice
         _TMR4_StartTimer
   _Interrupt_Initialize
     _TMR0_SetInterruptHandler
     _TMR1_Gate_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR4_SetInterruptHandler
   _Led_AutoRun
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _Util_IncValue
   _Led_CheckAutoStatus
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _RTC_GetTime
     ___wmul
       _RTC_GetTime (ARG)
   _Led_InitPara
     _DATAEE_ReadBuffer
       _DATAEE_ReadByte
     _Led_FirstPowerUp
     ___wmul
       _RTC_GetTime (ARG)
   _Led_Initialize
     _Led_TurnOffRamp
     _Led_TurnOnRamp
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _RTC_GetTime
     ___wmul
       _RTC_GetTime (ARG)
   _Led_SaveParaIfChanged
     _DATAEE_WriteBuffer
       _DATAEE_WriteByte
   _RTC_HourReady
   _RTC_MinuteReady
   _RTC_SecondReady
   _SYSTEM_Initialize
     _ADC_Initialize_Default
     _EUSART_Initialize_Default
     _OSCILLATOR_Initialize
     _PIN_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _PWM3_Initialize
     _PWM4_Initialize
     _PWM5_Initialize
     _TMR0_Initialize_Default
     _TMR1_Initialize_Default
     _TMR2_Initialize_Default
     _TMR4_Initialize_Default
   _TMR0_StartTimer
   _TMR1_StartTimer
   _TMR2_StartTimer

 _ISR (ROOT)
   _EUSART_Transmit_ISR
   _TMR0_ISR
     Absolute function(Fake) *
     _RTC_OnSecond *
   _TMR1_GATE_ISR
     Absolute function(Fake) *
     _IR_Decode *
       _IR_GetKeyType
       i1_TMR2_DisableInterrupt
       i1_TMR2_EnableInterrupt
   _TMR2_ISR
     Absolute function(Fake) *
     _Led_Run *
       _IR_ScanLongPress
         _Led_SetCustom
           i1___wmul
         i1_IR_GetIndex
         i1_Led_StartNotice
           i1_TMR4_StartTimer
         i1_Util_DecValue
         i1_Util_IncValue
       _Led_Ramp
         i1_PWM1_LoadDutyValue *
         i1_PWM2_LoadDutyValue *
         i1_PWM3_LoadDutyValue *
         i1_PWM4_LoadDutyValue *
         i1_PWM5_LoadDutyValue *
       _Led_RunMusic
         _Audio_SelectSound
           i1_EUSART_Write
         _Led_DynamicCloud
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicMoon
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicStorm
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicWave
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
   _TMR4_ISR
     Absolute function(Fake) *
     _Led_Notice *
       _Led_TurnOffDirect
       _Led_TurnOnDirect
       _TMR4_StopTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      41       5       81.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     14      3E       9       77.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      D7      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11               B      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      D7      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Dec 26 14:31:14 2017

                      ??i1_EUSART_Write 0070              __size_of_Audio_SetPlayMode 0017  
      __end_of_TMR2_SetInterruptHandler 0F0F                          ___bmul@product 004E  
            __size_of_Audio_SelectSound 0023                             __CFG_CP$OFF 0000  
                                    PL2 0DB9                                      PL4 0DCC  
                                    PL6 16C9                                      PL8 16DA  
                                    l26 092D                                      l46 0FDA  
                                    l95 1645                    i1_PWM1_LoadDutyValue 1154  
                   ?_IR_UpdateSetStatus 0070                           _Util_IncValue 153C  
                   ___wmul@multiplicand 004F                        i1___wmul@product 0074  
                ??i1_PWM4_LoadDutyValue 0072           i1PWM5_LoadDutyValue@dutyValue 0070  
                _ADC_Initialize_Default 0FE4                                     PL10 0F73  
                                   PL20 0DDD                                     PL12 0773  
                                   PL30 1701                                     PL22 0DEB  
                                   PL14 16E4                                     PL40 0E00  
                                   PL32 1708                                     PL24 04CB  
                                   PL16 04BC                     IR_ScanLongPress@cnt 0020  
                                   PL50 04D5                                     PL42 0F84  
                                   PL34 1710                                     PL26 0DF3  
                                   PL18 16ED                                     PL60 176D  
                                   PL52 04E7                                     PL44 1758  
                                   PL36 172C                                     PL28 16FA  
                                   PL70 04F5                                     PL62 177D  
                                   PL54 04EE                                     PL46 175E  
                                   PL38 1742                             __CFG_LVP$ON 0000  
                                   PL80 04FE                                     PL72 17A7  
                                   PL64 1787                                     PL56 0E10  
                                   PL48 0E07                     IR_ScanLongPress@idx 004A  
                                   PL90 0E2D                                     PL82 0E15  
                                   PL74 17B4                                     PL66 1798  
                                   PL58 1767                                     PL92 17CB  
                                   PL84 050A                                     PL76 17B8  
                                   PL68 0F9A                                     PL94 17CF  
                                   PL86 17BF                                     PL78 0FA3  
                                   PL96 0E34                                     PL88 0E21  
                                   PL98 0516                                     l343 08E0  
                                   l507 0887                                     l620 0BA4  
                                   l615 0B5E                                     l616 0B6C  
                                   l641 0A06                                     l625 0C0D  
                                   l617 0B7A                                     l626 0C17  
                                   l618 0B88                                     l619 0B96  
                                   l904 158F                                     l923 159E  
                                   l915 1598                                     l927 15A1  
                                   l919 159B                                     _GIE 005F  
                                   _PR2 001E                                     _PR4 0416  
                          __CFG_CPD$OFF 0000                                     _ISR 0004  
                       _Led_TurnOffRamp 0ED3                        ?_Led_DynamicMoon 0076  
       __end_of_TMR2_Initialize_Default 0EC8                        ?_Led_DynamicWave 0076  
                       _PWM4_Initialize 0E93                                     wreg 0009  
                 ?_Interrupt_Initialize 0070                          ?_RTC_HourReady 0070  
                                  PL100 0522                                    PL110 077C  
                                  PL102 0E3A                                    PL120 0E5E  
                                  PL112 17D9                                    PL104 052E  
                                  PL130 054C                                    PL122 0E64  
                                  PL114 0E4A                                    PL106 0E40  
                                  PL140 0564                                    PL132 0554  
                                  PL124 0E6A                                    PL116 0E54  
                                  PL108 0536                                    PL150 0E78  
                                  PL142 056C                                    PL134 0E70  
                                  PL126 053C                                    PL118 17E3  
                                  PL160 0786                                    PL152 0E7E  
                                  PL144 0574                                    PL136 055C  
                                  PL128 0544                                    PL170 0790  
                                  PL162 0E89                                    PL154 0E84  
                                  PL146 057C                                    PL138 17ED  
                                  PL172 0795                                    PL164 17FB  
                                  PL156 17F5                                    PL148 0F01  
                                  PL166 078B                                    PL158 0781  
                                  PL168 0E8E                                    ?_ISR 0070  
                                  l1042 0AB4               _EUSART_Initialize_Default 0FEC  
                                  l1222 13EC                                    l1047 0A86  
                                  l1057 0A86                                    l1245 1474  
                                  l1181 126F                                    l1158 11E9  
                                  l1175 1262                                    l1168 123E  
                                  l6011 0EE9                                    l6031 1564  
                                  l6023 0CA2                                    l6017 0CA0  
                                  l6105 0A05                                    l6035 156A  
                                  l6131 0A46                                    l6115 0A40  
                                  l6123 0A42                                    l6107 0A07  
                                  l7101 0CFF                                    l7021 0C21  
                                  l7005 0BB3                     PIN_Initialize@state 004D  
                                  l6143 0A5C                                    l6073 164B  
                                  l7041 095F                                    l6137 0A5B  
                                  l6401 1594                                    l7121 0D1B  
                                  l7025 0C30                                    l7009 0BF6  
                                  l6059 163A                                    l6411 15A1  
                                  l6403 1596                                    l6149 0A70  
                                  l6093 09CD                                    l6413 15A4  
                                  l6405 1598                                    l7109 0D08  
                                  l7221 0899                                    l6095 09DB  
                                  l6087 09A5                                    l6079 0987  
                                  l6407 159B                                    l7071 0A88  
                                  l6097 09E9                                    l6409 159E  
                                  l6417 15A8                                    l6425 1654  
                                  l7073 0AB5                                    l7153 0C5B  
                                  l7129 0D24                                    l4745 0FE4  
                                  l7233 08AD                                    l6099 09F7  
                                  l6419 160A                                    l6291 16A0  
                                  l6443 1672                                    l6435 1665  
                                  l6603 121F                                    l7163 0C74  
                                  l7147 0C48                                    l7243 08C5  
                                  l6429 165E                                    l6453 168E  
                                  l6621 1230                                    l6541 11D1  
                                  l6533 11C9                                    l7181 0C9A  
                                  l7173 0C7D                                    l6455 169C  
                                  l6543 11D3                                    l4863 0A77  
                                  l6519 11BD                                    l7159 0C68  
                                  l4767 0FAA                                    l6721 12CA  
                                  l6705 12AD                                    l6545 11D7  
                                  l6529 11C5                                    l7177 0C8D  
                                  l7185 0C9F                                    l7089 0CE4  
                                  l4785 0D35                                    l4769 0FAC  
                                  l6803 1373                                    l6643 125C  
                                  l6627 123E                                    l4955 0F17  
                                  l6397 158D                                    l6725 12D0  
                                  l6709 12B3                                    l6645 125F  
                                  l6581 11E9                                    l6557 11DD  
                                  l4965 0F27                                    l6399 1592  
                                  l6911 1479                                    l6831 13C2  
                                  l6743 12F6                                    l6647 1262  
                                  l4887 0F0F                                    l6809 1382  
                                  l6753 1312                                    l6737 12E7  
                                  l6673 1277                                    l6593 1208  
                                  l6569 11E3                                    l6915 1480  
                                  l6843 13DA                                    l6819 139E  
                                  l6771 1335                                    l6683 1287  
                                  l6667 126F                                    l5981 080A  
                                  l5973 114B                                    l6861 1406  
                                  l6837 13C9                                    l6693 1290  
                                  l5975 115D                                    l5983 16C3  
                                  l6927 148F                                    l6863 1409  
                                  l6855 13FA                                    l6791 1356  
                                  l6775 133B                                    l6961 08EC  
                                  l5977 116F                                    l6873 1430  
                                  l6857 13FB                                    l6849 13EC  
                                  l6937 1497                                    l6955 08D6  
                                  l5979 1181                                    l6883 1445  
                                  l6787 1350                                    l6939 1512  
                                  l5997 0ED9                                    l5989 0ED3  
                                  l6959 08E8                                    l6895 145E  
                                  l6983 0B50                 __end_of_RTC_MinuteReady 0B0B  
                                  l6899 1465                                    l6999 0BB2  
                          __CFG_WDTE$ON 0000                                    _GAIN 1800  
               __end_of_PWM1_Initialize 0B39                                    _LATA 010C  
                                  _LATB 010D                                    _LATC 010E  
                                  u5135 0810                 __end_of_RTC_SecondReady 0B10  
                                  u3720 0DA7                                    u5305 0A33  
                                  u5315 0A3E                                    u6225 08DC  
                                  u6235 08E6                                    u5275 0A1E  
                                  u5635 1550                                    u6435 0CE1  
                                  i1l95 0117                                    u6535 0C62  
                                  u6455 0D05                                    u6545 0C6E  
                                  u5755 152A                                    u6475 0D21  
                  ??_IR_UpdateSetStatus 005B                                    u6807 0980  
                                  u6817 0928                                    u6777 0940  
                                  u6787 0951                                    u6797 0970  
                                  _TMR1 0019                                    _TMR2 001D  
                                  _TMR4 0415                                    _WPUA 020C  
                                  _WPUB 020D                                    _WPUC 020E  
                      _Led_TurnOnDirect 07CA                            __CFG_WRT$OFF 0000  
                   __end_of_Led_AutoRun 0CA0                                    _main 0876  
                     ?_Led_DynamicCloud 0076                         _TMR0_StartTimer 0DB4  
                                  fsr0h 0005                                    fsr1h 0007  
                                  indf0 0000                                    fsr0l 0004  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                          ?_Util_DecValue 004D  
                    Led_DynamicMoon@val 004A                      Led_DynamicMoon@ptp 0076  
                     ?_Led_DynamicStorm 0076                                    start 002E  
                    ??_Led_DynamicCloud 0078                        Util_DecValue@min 004F  
                       _PWM5_Initialize 0E9E                 _TMR0_Initialize_Default 0EA4  
                  _IR_KeyAtionIfPressed 0A72                           __CFG_CSWEN$ON 0000  
                    Led_DynamicWave@val 004A                      Led_DynamicWave@ptp 0076  
                     ___bmul@multiplier 004F                           __CFG_MCLRE$ON 0000  
                       __end_of_Led_Run 0069                      ??_Led_DynamicStorm 0078  
            ??_TMR4_SetInterruptHandler 004F              __end_of_PWM5_LoadDutyValue 081C  
                       IR_Decode@keyNum 0079                                   ??_ISR 007E  
                   Led_DynamicCloud@val 004A                     Led_DynamicCloud@ptp 0076  
                    i1_Led_UpdateBright 04A8                   ?i1_PWM1_LoadDutyValue 0070  
             __size_of_DATAEE_WriteByte 0021                          ?_Util_IncValue 004D  
                       IR_Decode@rptCnt 002E                 __end_of_PWM2_Initialize 0B42  
                   _Led_CheckAutoStatus 0CB9                           ?_EUSART_Write 0070  
        __size_of_OSCILLATOR_Initialize 000A           __end_of_OSCILLATOR_Initialize 0B33  
                                 _ADACT 009F                                   ?_main 0070  
               __end_of_Led_StartNotice 16B7           __size_ofi1_PWM3_LoadDutyValue 0006  
                                 _ADRES 009B                                   _CCPR1 0291  
                                 _CCPR2 0295                                   _CCPR3 0311  
                                 _CCPR4 0315          ?_TMR1_Gate_SetInterruptHandler 004D  
                       _TMR1_StartTimer 0A77                                   _T1CON 001B  
                                 _T2CON 001F                                   _T4CON 0417  
                        __CFG_DEBUG$OFF 0000                                   i1l105 11BA  
                            _Led_Notice 079A                                   i1l521 0017  
                                 i1l523 001E                                   i1l525 0024  
                                 i1l519 000D                                   i1l528 002C  
                                 i1l815 00E7                                   i1l904 0381  
                                 i1l923 0390                                   i1l915 038A  
                                 i1l827 0068                                   i1l764 014D  
                                 i1l927 0393                                   i1l919 038D  
                                 i1l775 024F                                   i1l952 065A  
                                 i1l963 0678                                   i1l957 0702  
                                 i1l979 069F                                   i1l988 06A9  
                   ?i1_Led_UpdateBright 0070                                   _OSCEN 091D  
                    _PWM4_LoadDutyValue 117E                                   _TMR0H 0016  
                                 _TMR0L 0015                __end_of_IR_ScanLongPress 037B  
                                 _TRISA 008C                                   _TRISB 008D  
                                 _TRISC 008E                       _Led_TurnOffDirect 07C1  
                                 _TXREG 019A                    i1_PWM5_LoadDutyValue 081C  
                    __size_of_IR_Decode 00C9       __size_of_TMR0_SetInterruptHandler 0008  
               __size_of_PIN_Initialize 004D               ?_TMR0_SetInterruptHandler 004D  
                         __CFG_PWRTE$ON 0000                             ?_IR_ExitSet 0070  
                        __CFG_FCMEN$OFF 0000                      _DATAEE_WriteBuffer 0FAA  
                      __end_of_TMR0_ISR 110C                        __end_of_TMR2_ISR 1124  
                      __end_of_TMR4_ISR 1130                      ?_Led_TurnOffDirect 0070  
                      _tmr4_isr_handler 00E2                         _DATAEE_ReadByte 0D4E  
       __end_ofi1_TMR2_DisableInterrupt 0773                     ?_PWM4_LoadDutyValue 004D  
                                 _txBuf 0120                    __end_of_Led_InitPara 0C36  
                  ?_Led_CheckAutoStatus 0070            __end_ofi1_PWM2_LoadDutyValue 116C  
               __end_of_PWM3_Initialize 0DB4                          __CFG_BOREN$OFF 0000  
                                 pclath 000A                        __end_ofi1___wmul 045C  
                        __CFG_BORV$HIGH 0000                     Led_DynamicMoon@duty 0040  
                   ?_DATAEE_WriteBuffer 0051                     ??_Led_TurnOffDirect 0070  
                                 status 0003                     i1___wmul@multiplier 0070  
                                 wtemp0 007E                   Audio_SetPlayMode@type 004E  
                       _TMR2_StartTimer 0DB7                       Util_DecValue@pSrc 004D  
                          __end_ofPL100 052E                            __end_ofPL110 0781  
                          __end_ofPL102 0E40                            __end_ofPL120 0E64  
                          __end_ofPL112 17E3                            __end_ofPL104 0536  
                  ??i1_Led_UpdateBright 0074                            __end_ofPL130 0554  
                          __end_ofPL122 0E6A                            __end_ofPL114 0E54  
                          __end_ofPL106 0E4A                            __end_ofPL140 056C  
                          __end_ofPL132 055C                            __end_ofPL124 0E70  
                          __end_ofPL116 0E5E                            __end_ofPL108 053C  
                          __end_ofPL150 0E7E                            __end_ofPL142 0574  
                          __end_ofPL134 0E78                            __end_ofPL126 0544  
                          __end_ofPL118 17ED                            __end_ofPL160 078B  
                          __end_ofPL152 0E84                            __end_ofPL144 057C  
                          __end_ofPL136 0564                            __end_ofPL128 054C  
                          __end_ofPL170 0795                            __end_ofPL162 0E8E  
                          __end_ofPL154 0E89                            __end_ofPL146 0582  
                          __end_ofPL138 17F5                            __end_ofPL172 079A  
                          __end_ofPL164 1800                            __end_ofPL156 17FB  
                          __end_ofPL148 0F07                            __end_ofPL166 0790  
                          __end_ofPL158 0786                            __end_ofPL168 0E93  
              __end_of_Led_UpdateBright 0CB9                   ?_IR_KeyAtionIfPressed 0070  
                          __end_of_GAIN 1805                 __size_of_Audio_GetValue 0051  
                   Led_DynamicWave@duty 0040                         Led_TurnOnRamp@i 0051  
                   i1Util_IncValue@pSrc 0070                        __end_of_Led_Ramp 009F  
                       __initialization 082B                    __end_of_Led_RunMusic 00E8  
                      IR_Decode@codeVal 0022                            __end_of_main 08C8  
                  ??_PWM4_LoadDutyValue 004F                 __end_of_Led_TurnOffRamp 0EE6  
                       i1_Util_DecValue 045C                  IR_ScanLongPress@i_1441 0049  
                        ??_EUSART_Write 004D                 __end_of_PWM4_Initialize 0E9E  
                    Led_SetCustom@value 0040                      Led_StartNotice@cnt 004E  
                  ??_DATAEE_WriteBuffer 0056                    Led_DynamicCloud@duty 0040  
             __end_of_Led_TurnOffDirect 07CA                _TMR2_SetInterruptHandler 0F07  
                                ??_main 0060                          IR_GetIndex@idx 004D  
                 ?i1_PWM5_LoadDutyValue 0070                     Led_DynamicStorm@val 004A  
                       ??_RTC_HourReady 004D                    DATAEE_ReadBuffer@buf 0051  
                   Led_DynamicStorm@ptp 0076                    DATAEE_ReadBuffer@len 0053  
                ??_Interrupt_Initialize 004F                         i1_Util_IncValue 0482  
                           _Led_AutoRun 0C36                 __end_of_TMR0_StartTimer 0DB7  
                                _ADCON0 009D                                  _ADCON1 009E  
                     Led_FirstPowerUp@i 0053                                  _ADRESH 009C  
             __size_of_Audio_Initialize 004D                                  _ADRESL 009B  
                 ??_Led_CheckAutoStatus 0053                                  _ANSELA 018C  
                                _ANSELB 018D                                  _ANSELC 018E  
                    __CFG_RSTOSC$HFINT1 0000           __size_of_TMR2_EnableInterrupt 0003  
                                _T0CON0 0017                                  _T0CON1 0018  
                                _T1GCON 001C                        ?_RTC_MinuteReady 0070  
                                _RC1STA 019D                                  i1l1007 070C  
                                i1l1112 0295                                  i1l1107 037A  
                                i1l1124 02C9                        ?_PWM1_Initialize 0070  
                                i1l1119 02B9                            ?_IR_GetIndex 0070  
                                _ODCONA 028C                                  i1l1098 0636  
                                _ODCONB 028D                                  _ODCONC 028E  
                                i1l4121 0441                                  i1l4113 0410  
                                i1l4303 039A                                  i1l5121 060C  
                                i1l5113 0606                                  i1l4305 03FC  
               __end_of_PWM5_Initialize 0EA4                                  i1l5045 11A3  
                                i1l5125 0614                                  i1l5133 061C  
                                i1l5047 11A4                                  i1l5135 061E  
                                i1l5071 05B0                                  i1l5055 058B  
                                i1l5151 063B                                  i1l4503 02E9  
                                i1l5081 05CE                                  i1l5073 05B2  
                                i1l5147 0638                                  i1l5139 0622  
                                i1l5083 05D0                                  i1l5067 05A2  
                                i1l4291 038A                                  i1l4283 037F  
                                i1l4515 02F6                                  i1l6051 04A9  
                                i1l6203 015D                                  i1l5093 05E3  
                                i1l4293 038D                                  i1l4285 0384  
                                i1l4461 0295                                  i1l6213 0221  
                                i1l4703 070D                                  i1l4295 0390  
                                i1l4287 0386                                  i1l4551 031E  
                                i1l6207 0169                                  i1l4721 076B  
                                i1l4297 0393                                  i1l4289 0388  
                                i1l4537 0314                                  i1l4529 0300  
                                i1l6233 026D                                  i1l6225 025C  
                                i1l4707 0710                                  i1l4299 0396  
                                i1l4491 02DC                                  i1l6243 027D  
                                i1l6227 025E                                  i1l6171 019F  
                                i1l6155 0170                                  i1l4709 073F  
                                i1l4477 02C9                                  i1l4469 02B9  
                                i1l4573 033F                                  i1l6333 0069  
                                i1l6261 01ED                                  i1l6253 01C1  
                                i1l6165 019E                                  i1l6501 0042  
                                i1l4719 074B                                  i1l4663 0679  
                                i1l4647 065D                                  i1l4559 0332  
                                i1l3871 118A                                  i1l6343 0079  
                                i1l6247 0289                                  i1l6239 026E  
                                i1l6263 01EF                                  i1l6175 01AE  
                                i1l4681 069F                                  i1l4657 0671  
                                i1l3873 081C                                  i1l3865 1154  
                                i1l3953 011B                                  i1l6193 014B  
                                i1l6185 011F                                  i1l6361 009F  
                      ?_RTC_SecondReady 0070                                  i1l4675 0696  
                                i1l4659 0673                                  i1l3867 1166  
                                i1l6347 0086                                  i1l6339 006A  
                                i1l3939 010C                                  i1l6283 021A  
                                i1l6275 01FF                                  i1l6179 01BA  
                                i1l6371 00B2                                  i1l6363 00B9  
                                i1l6515 0066                                  i1l4685 06A7  
                                i1l3869 1178                                  i1l6349 008F  
                                i1l6269 01FE                                  i1l4687 06A9  
                                i1l4695 06B2                                  i1l3975 0449  
                                i1l6199 014E                                  i1l6279 020E  
                                i1l6383 00CF                                  i1l4697 0703  
                                i1l6385 00D5                                  i1l3979 044F  
                                i1l6387 00DB                                  i1l6389 00E1  
                                i1l6495 0038                                  i1l4991 07BD  
                                i1l6499 0041                                  i1l4987 07B9  
                                u313_25 0496                                  u314_25 0470  
                                u403_20 05F4                                  u404_20 05F5  
                                _SP1BRG 019B                                  u258_25 0821  
                                u540_20 013A                                  u541_25 0144  
                                u535_20 018B                                  u552_20 01DC  
                                u545_20 023C                                  u553_25 01E6  
                       ??_Util_DecValue 0053                                  u547_25 0255  
                                _OSCFRQ 091F                                  u398_24 05C7  
                                u398_25 05C5                                  _PWM5DC 0617  
                                _TX1STA 019E                   __end_of_IR_GetKeyType 076D  
               __size_of_IR_IsValidTime 004E                               ??_Led_Run 007D  
             ??_TMR0_Initialize_Default 004D                                  _VOLUME 1805  
                       _TMR4_StartTimer 16C3                 __size_of_Led_Initialize 00EA  
                     __end_of_IR_Decode 064B                   __end_of_TMR1_GATE_ISR 1118  
      __size_of_TMR2_Initialize_Default 000A                         ??_Util_IncValue 0053  
                                ___bmul 169E                     __size_of_IR_ExitSet 0009  
                ??i1_PWM1_LoadDutyValue 0072             __size_of_PWM3_LoadDutyValue 000C  
               __end_of_TMR1_StartTimer 0A7A                                  ___wmul 1562  
                        __CFG_STVREN$ON 0000                    Led_DynamicMoon@F8363 00AA  
                   Audio_GetValue@value 0057                     _EUSART_Transmit_ISR 11A6  
                      ?_PWM2_Initialize 0070                                  _txHead 0034  
                                _txTail 0035                 __end_of_DATAEE_ReadByte 0D5C  
                      ?_Led_StartNotice 0070                             ?_Led_Notice 0070  
                      IR_IsValidTime@tm 0054                    Led_DynamicWave@F8353 00B4  
               __end_of_TMR2_StartTimer 0DB9                   __end_of_Led_SetCustom 0447  
              ??_IR_ResetIfTMR1Overflow 004D                ?_TMR1_Initialize_Default 0070  
              ?_TMR4_Initialize_Default 0070                    ?_EUSART_Transmit_ISR 0070  
                    Util_DecValue@delta 0051                      i1Util_DecValue@min 0072  
                      ?_PWM3_Initialize 0070                       _SYSTEM_Initialize 0B10  
                          ?_RTC_GetTime 0070                 __end_of__initialization 0873  
                ??_IR_KeyAtionIfPressed 005B                      ?_SYSTEM_Initialize 0070  
                   i1Led_UpdateBright@i 0074          __size_of_Led_SaveParaIfChanged 0010  
            __end_of_PWM2_LoadDutyValue 1166           __end_of_Led_SaveParaIfChanged 0B02  
                      Led_TurnOffRamp@i 004D                 __end_ofi1_Util_DecValue 0482  
               __size_of_IR_ExitTimeout 0008             PWM1_LoadDutyValue@dutyValue 004D  
                  i1Util_IncValue@delta 0074                     ___bmul@multiplicand 004D  
             __size_of_Led_FirstPowerUp 005C                        Led_DynamicMoon@i 004C  
                      Led_DynamicWave@i 004C         TMR4_SetInterruptHandler@handler 004D  
                        __pcstackCOMMON 0070                       IR_GetIndex@keynum 004E  
                          __pidataBANK1 07D6                            __pidataBANK2 10F6  
                   ??_SYSTEM_Initialize 004E                               ?_TMR0_ISR 0070  
        __size_of_TMR2_DisableInterrupt 0003                               ?_TMR2_ISR 0070  
                 Led_DynamicCloud@F8373 00A0                               ?_TMR4_ISR 0070  
               ?_ADC_Initialize_Default 0070           __end_of_TMR2_DisableInterrupt 16C3  
                      _DATAEE_WriteByte 0FC3                        ?_Led_TurnOffRamp 0070  
               __end_ofi1_Util_IncValue 04A8                              _adc_result 002C  
                    _PWM1_LoadDutyValue 1148                        ?_PWM4_Initialize 0070  
                            __end_ofPL2 0DCC                              __end_ofPL4 0DDD  
                            __end_ofPL6 16DA                              __end_ofPL8 16E4  
      __size_ofi1_TMR2_DisableInterrupt 0003                __end_of_Led_TurnOnDirect 07D3  
                  i1_PWM2_LoadDutyValue 1166                     Led_SetCustom@pValue 0076  
            __size_of_Led_TurnOffDirect 0009             PWM4_LoadDutyValue@dutyValue 004D  
                ??i1_PWM5_LoadDutyValue 0072                               ?i1___wmul 0070  
                    DATAEE_ReadBuffer@i 0055                          _PIN_Initialize 0D5C  
                 __size_of_Led_InitPara 00F4                     ?_PWM1_LoadDutyValue 004D  
                      Led_Initialize@ct 0058                               ?_Led_Ramp 0070  
                      ?_TMR0_StartTimer 0070                 __end_of_TMR4_StartTimer 16C6  
             __end_of_SYSTEM_Initialize 0B29                   ??_EUSART_Transmit_ISR 0070  
                            __pbssBANK0 0020                              __pbssBANK1 00C8  
                            __pbssBANK2 0120                __size_of_Audio_SetVolume 0016  
                  __end_of_EUSART_Write 1650                        ?_PWM5_Initialize 0070  
               __size_of_Led_TurnOnRamp 001B            _PWM2_LoadDutyValue$intlevel0 115D  
                 DATAEE_ReadBuffer@addr 004F                    Led_DynamicStorm@duty 0040  
                 __size_of_Led_RunMusic 0049                     IR_GetKeyType@keynum 0072  
               __size_of_ADC_Conversion 0021                     IR_GetKeyType@result 0071  
                        _Audio_GetValue 08C8                    ??_PWM1_LoadDutyValue 004F  
                   __size_of_Led_Notice 0027                              __pmaintext 0876  
         i1PWM3_LoadDutyValue@dutyValue 0070          __end_of_ADC_Initialize_Default 0FEC  
                               ?___bmul 004D        __end_of_TMR0_SetInterruptHandler 0AEA  
              ??i1_TMR2_EnableInterrupt 0070                                 ?___wmul 004D  
                      ?_TMR1_StartTimer 0070                              ??_TMR0_ISR 0070  
                       __CFG_PPS1WAY$ON 0000                              ??_TMR2_ISR 007E  
                            ??_TMR4_ISR 0071         TMR2_SetInterruptHandler@handler 004D  
          _PWM5_LoadDutyValue$intlevel0 080A                              __pintentry 0004  
                          _Led_InitPara 0B42                                 _CCP1CON 0293  
                               _CCP2CON 0297                                 _CCP3CON 0313  
                               _CCP4CON 0317                   ?i1_PWM2_LoadDutyValue 0070  
              __size_of_Audio_StopSound 0012               __size_of_Led_DynamicCloud 006F  
                __end_of_PIN_Initialize 0DA9                  __size_ofi1_IR_GetIndex 0083  
                            ??i1___wmul 0074                 __size_of_TMR1_StopTimer 0002  
             __size_of_Led_DynamicStorm 0060                        ?_DATAEE_ReadByte 004D  
         __size_ofi1_PWM4_LoadDutyValue 0006         __end_of_TMR1_Initialize_Default 0EBE  
       __end_of_TMR4_Initialize_Default 0ED3                       ?_IR_ScanLongPress 0070  
                    _PWM5_LoadDutyValue 0807                            ??_IR_ExitSet 005B  
                               _OSCCON1 0919                                 _OSCCON3 091B  
                               _NVMADRH 0892                                 _NVMADRL 0891  
                               _OSCTUNE 091E                                 _NVMDATL 0893  
                               _NVMCON2 0896                                 _PWM5CON 0619  
                          _Led_RunMusic 009F                                 _PPSLOCK 0E0F  
                    ??_IR_ScanLongPress 0044                              ??_Led_Ramp 0074  
                      _Audio_Initialize 093A                        ?_TMR2_StartTimer 0070  
                         ?_IR_KeyAction 0070         __size_of_IR_ResetIfTMR1Overflow 003F  
                   ?_PWM5_LoadDutyValue 004D             __size_of_IR_UpdateSetStatus 000C  
              __size_of_Led_DynamicMoon 0051                __size_of_Led_DynamicWave 0051  
       ??_TMR1_Gate_SetInterruptHandler 004F            __end_ofi1_PWM3_LoadDutyValue 117E  
                      Util_IncValue@max 004F                          _IR_IsValidTime 1650  
                        Led_SetCustom@i 0043                  __end_of_Audio_GetValue 0919  
                  DATAEE_WriteByte@addr 004D                                 _Led_Run 0030  
                  DATAEE_WriteByte@byte 004F                    __size_of_IR_GetIndex 0083  
                        _Led_Initialize 0987                        ?i1_Util_DecValue 0070  
                     ?_Led_UpdateBright 0070                 _TMR2_Initialize_Default 0EBE  
            ??_TMR2_SetInterruptHandler 004F                      ??_Led_UpdateBright 0051  
               __size_of_TMR4_StopTimer 0003                         __size_of___bmul 000C  
                    __end_of_IR_ExitSet 16C0                         __size_of___wmul 0015  
                  ??_PWM5_LoadDutyValue 004F                       _DATAEE_ReadBuffer 0D33  
                      ?i1_Util_IncValue 0070         TMR0_SetInterruptHandler@handler 004D  
                               __ptext1 0DB7                                 __ptext2 0DB4  
                               __ptext3 0B10                                 __ptext4 0EC8  
                               __ptext5 0EBE                                 __ptext6 0EAF  
                               __ptext7 0EA4                                 __ptext8 0E9E  
                               __ptext9 0E93                         ?_PIN_Initialize 0070  
                    ?_DATAEE_ReadBuffer 004F                            __size_of_ISR 002A  
                             _T1CONbits 001B                   _OSCILLATOR_Initialize 0B29  
                             _T2CONbits 001F                 __size_ofi1_EUSART_Write 0014  
                             _T4CONbits 0417       __size_of_TMR4_SetInterruptHandler 0008  
             ?_TMR4_SetInterruptHandler 004D                   _tmr1_gate_isr_handler 00E6  
                   ??_DATAEE_ReadBuffer 0054                            ?_Led_AutoRun 0070  
                        ??_IR_KeyAction 0140              __size_of_SYSTEM_Initialize 0019  
                               clrloop0 1131                        ?_TMR4_StartTimer 0070  
                __end_of_IR_IsValidTime 169E                    end_of_initialization 0873  
                           _gLedRunPara 00C8                  __end_of_Led_Initialize 0A71  
                         i1_IR_GetIndex 037B                                 init_ram 113C  
               Audio_SetVolume@checksum 004F                         ?_Audio_GetValue 0070  
                               initloop 113D                        i1IR_GetIndex@idx 0070  
                     IR_IsValidTime@len 0050                       IR_IsValidTime@min 0051  
               Audio_StopSound@checksum 004E             __size_ofi1_Led_UpdateBright 0011  
                        _IR_ExitTimeout 11BD                    __size_of_RTC_GetTime 0001  
             Audio_SetPlayMode@checksum 004F                        _Led_FirstPowerUp 0F17  
                     ??_Audio_SetVolume 004E               __end_of_DATAEE_ReadBuffer 0D4E  
          __end_of_TMR2_EnableInterrupt 16C9                  _IR_ResetIfTMR1Overflow 0A7A  
                ??i1_PWM2_LoadDutyValue 0072         __size_ofi1_TMR2_EnableInterrupt 0003  
           __size_of_PWM4_LoadDutyValue 000C                            __pstringtext 1800  
               i1_TMR2_DisableInterrupt 0770                               _IR_Decode 0582  
                 i1___wmul@multiplicand 0072                               Led_Ramp@i 007A  
           __size_of_DATAEE_WriteBuffer 0019                _TMR0_SetInterruptHandler 0AE2  
                   i1Util_DecValue@pSrc 0070                            ??_Led_Notice 0070  
                DATAEE_WriteBuffer@addr 0051                              _rtc_status 0031  
           __end_of_Led_CheckAutoStatus 0D33                       ??_Audio_StopSound 004E  
                 __size_of_EUSART_Write 0017                   __end_of_RTC_HourReady 0B07  
         __size_of_Interrupt_Initialize 001B                        __CFG_FEXTOSC$OFF 0000  
                       ?_IR_IsValidTime 0050                __end_of_DATAEE_WriteByte 0FE4  
                         ?_RTC_OnSecond 0070                          _Led_TurnOnRamp 0EE6  
                        ?i1_IR_GetIndex 0070                           IR_Decode@nBit 002F  
                         IR_Decode@hVal 007A                  __end_of_IR_ExitTimeout 11C5  
                       ?_Led_Initialize 0070                       Led_DynamicCloud@i 004C  
                        _ADC_Conversion 0919                           IR_Decode@type 0078  
             ??_TMR2_Initialize_Default 004D                   __end_of_Util_DecValue 153C  
                        __end_of_VOLUME 180A              __end_of_PWM3_LoadDutyValue 1178  
                    Util_IncValue@delta 0051                      __end_of_Led_Notice 07C1  
              __size_of_RTC_MinuteReady 0004                       ??_Led_DynamicMoon 0078  
                     ??_Led_DynamicWave 0078                __size_of_PWM1_Initialize 0006  
              __size_of_RTC_SecondReady 0005                        Led_SetCustom@idx 0042  
      __size_of_TMR1_Initialize_Default 000F        __size_of_TMR4_Initialize_Default 000B  
                     Led_DynamicStorm@i 004C                              ?_IR_Decode 0070  
                        __end_of___bmul 16AA                   __end_of_Util_IncValue 1562  
         __size_ofi1_PWM1_LoadDutyValue 0006                          __end_of___wmul 1577  
                      _Led_DynamicCloud 0221                            _EUSART_Write 1639  
                     __size_of_TMR0_ISR 000C                       __size_of_TMR2_ISR 000C  
                    _PWM2_LoadDutyValue 115A                       __size_of_TMR4_ISR 000C  
                     Audio_GetValue@cnt 0024                       ?_Led_TurnOnDirect 0070  
                     Audio_GetValue@max 0028                       Audio_GetValue@min 0026  
                        _TMR1_StopTimer 0AB9                  ?_OSCILLATOR_Initialize 0070  
                  i1_PWM3_LoadDutyValue 1178                        _Led_DynamicStorm 01C1  
                __size_of_IR_GetKeyType 0122                      ??_Led_TurnOnDirect 0070  
                     i1_Led_StartNotice 03FE                             __end_ofPL10 0F84  
                           __end_ofPL20 0DEB                             __end_ofPL12 077C  
                           __end_ofPL30 1708                             __end_ofPL22 0DF3  
                           __end_ofPL14 16ED                             __end_ofPL40 0E07  
                           __end_ofPL32 1710                             __end_ofPL24 04D5  
                           __end_ofPL16 04CB                             __end_ofPL50 04E7  
                           __end_ofPL42 0F9A                             __end_ofPL34 172C  
                           __end_ofPL26 0E00                             __end_ofPL18 16FA  
                           __end_ofPL60 177D                             __end_ofPL52 04EE  
                           __end_ofPL44 175E                             __end_ofPL36 1742  
                           __end_ofPL28 1701                             __end_ofPL70 04FE  
                           __end_ofPL62 1787                             __end_ofPL54 04F5  
                           __end_ofPL46 1767                             __end_ofPL38 1758  
                           __end_ofPL80 050A                             __end_ofPL72 17B4  
                           __end_ofPL64 1798                             __end_ofPL56 0E15  
                           __end_ofPL48 0E10                             __end_ofPL90 0E34  
                           __end_ofPL82 0E21                             __end_ofPL74 17B8  
                           __end_ofPL66 17A7                             __end_ofPL58 176D  
                           __end_ofPL92 17CF                             __end_ofPL84 0516  
                           __end_ofPL76 17BF                             __end_ofPL68 0FA3  
                           __end_ofPL94 17D9                             __end_ofPL86 17CB  
                           __end_ofPL78 0FAA                             __end_ofPL96 0E3A  
                           __end_ofPL88 0E2D                             __end_ofPL98 0522  
                   start_initialization 082B                       __size_ofi1___wmul 0015  
                           __end_of_ISR 002E                      i1Util_IncValue@max 0072  
              __size_of_PWM2_Initialize 0009                     ?_PWM2_LoadDutyValue 004D  
                    ?i1_Led_StartNotice 0070                  __size_of_TMR1_GATE_ISR 000C  
                __end_of_Led_TurnOnRamp 0F01                  i1_TMR2_EnableInterrupt 076D  
              __size_of_Led_StartNotice 000D                ?_TMR0_Initialize_Default 0070  
                        ??_RTC_OnSecond 0070                  __end_of_ADC_Conversion 093A  
                     __size_of_Led_Ramp 0036                     ??i1_Led_StartNotice 0070  
                       ?_IR_ExitTimeout 0070                     DATAEE_ReadByte@addr 004D  
         __size_of_IR_KeyAtionIfPressed 0005                        __CFG_LPBOREN$OFF 0000  
                       IR_KeyAction@idx 0153                    ??_PWM2_LoadDutyValue 004F  
                    IR_Decode@revKeyNum 0077               ??i1_TMR2_DisableInterrupt 0070  
              __size_of_PWM3_Initialize 000B                   _Led_SaveParaIfChanged 0AF2  
                        _TMR4_StopTimer 07D3                                ??___bmul 004E  
           PWM2_LoadDutyValue@dutyValue 004D              __size_of_DATAEE_ReadBuffer 001B  
                              ??___wmul 0051                __end_of_Audio_Initialize 0987  
                           _CCPTMRSbits 029F                    __end_of_IR_KeyAction 1516  
                __end_of_TMR1_StopTimer 0ABB                             __pdataBANK1 00A0  
                           __pdataBANK2 0154                  __size_of_Led_SetCustom 003D  
                 Led_DynamicStorm@F8383 0154                   ?i1_PWM3_LoadDutyValue 0070  
                 _TMR2_DisableInterrupt 16C0               __end_ofi1_Led_StartNotice 040A  
                        i1_EUSART_Write 010B                             __pbssBIGRAM 237B  
           __end_of_EUSART_Transmit_ISR 11BD             PWM5_LoadDutyValue@dutyValue 004D  
         __size_ofi1_PWM5_LoadDutyValue 000F                __size_of_Led_TurnOffRamp 0013  
                             ___latbits 0002                           __pcstackBANK0 0040  
                         __pcstackBANK2 0140                __size_of_PWM4_Initialize 000B  
                Audio_SelectSound@index 0071                     i1IR_GetIndex@keynum 0071  
                       ?_Led_TurnOnRamp 0070                         ??i1_IR_GetIndex 0070  
                     ADC_Conversion@chn 0050                    IR_IsValidTime@result 0052  
                  _TMR2_EnableInterrupt 16C6                    __size_of_Led_AutoRun 006A  
                       ?_ADC_Conversion 004D                           Led_InitPara@i 005F  
                         Led_InitPara@j 005E                         Led_Initialize@i 005A  
                         IR_KeyAction@i 014A           i1PWM1_LoadDutyValue@dutyValue 0070  
                              ?_Led_Run 0070            __end_ofi1_PWM4_LoadDutyValue 1190  
                         _IR_GetKeyType 064B                               __pnvBANK0 0060  
                             __pnvBANK1 00E2            _PWM3_LoadDutyValue$intlevel0 116F  
              __size_of_TMR0_StartTimer 0003               __size_of_IR_ScanLongPress 00EB  
                __end_of_TMR4_StopTimer 07D6             __size_of_PWM1_LoadDutyValue 000C  
              __size_of_PWM5_Initialize 0006               Audio_SelectSound@checksum 0072  
                         _TMR1_GATE_ISR 110C                        ??_PIN_Initialize 004D  
      __end_of_TMR4_SetInterruptHandler 0F17      __size_of_EUSART_Initialize_Default 0014  
                             __ptext100 0582                               __ptext101 076D  
                             __ptext102 0770                               __ptext103 064B  
                             __ptext104 1100                               __ptext105 1190  
                             __ptext106 11A6           i1PWM4_LoadDutyValue@dutyValue 0070  
                           ??_IR_Decode 0073              ?_EUSART_Initialize_Default 0070  
                       ?_TMR1_StopTimer 0070                  __end_ofi1_EUSART_Write 011F  
                     ??_RTC_MinuteReady 004D                       ??_PWM1_Initialize 004D  
                     ??_RTC_SecondReady 004D                     DATAEE_WriteBuffer@i 0056  
                              _BAUD1CON 019F                __size_of_TMR1_StartTimer 0003  
             __size_of_Led_UpdateBright 0019         __end_of_TMR0_Initialize_Default 0EAF  
              __end_of_Led_FirstPowerUp 0F73                        ??_Audio_GetValue 0053  
            __end_of_IR_UpdateSetStatus 0AC7                   ?_TMR2_EnableInterrupt 0070  
              __size_of_DATAEE_ReadByte 000E                         _Audio_SetVolume 160C  
                         ??_IR_GetIndex 004D                           _Led_SetCustom 040A  
                         Led_Notice@cnt 0033                       ??_PWM2_Initialize 004D  
                        ?_IR_GetKeyType 0070                             _audio_value 002A  
                        ___wmul@product 0051                               clear_ram0 1130  
                              _PIE0bits 0090                       ??_Led_StartNotice 004D  
                              _PIE1bits 0091                                _PIE2bits 0092  
              __size_of_TMR2_StartTimer 0002                  ?_Led_SaveParaIfChanged 0070  
                       ?_TMR4_StopTimer 0070                 ?_IR_ResetIfTMR1Overflow 0070  
               _TMR1_Initialize_Default 0EAF                 _TMR4_Initialize_Default 0EC8  
            ??_TMR0_SetInterruptHandler 004F                                _PIR0bits 0010  
                        ?_TMR1_GATE_ISR 0070                                _PIR1bits 0011  
                              _PIR2bits 0012                                _TMR0_ISR 1100  
                              _TMR2_ISR 1118                                _TMR4_ISR 1124  
                       _Audio_StopSound 1577                        EUSART_Write@byte 004D  
                 DATAEE_WriteBuffer@buf 0053                  ??i1_PWM3_LoadDutyValue 0072  
                 DATAEE_WriteBuffer@len 0055                  ?_TMR2_DisableInterrupt 0070  
                  __end_of_RTC_OnSecond 11A6             __size_of_PWM5_LoadDutyValue 0015  
              __size_ofi1_Util_DecValue 0026       __end_of_EUSART_Initialize_Default 1000  
                       ?i1_EUSART_Write 0070                       ??_PWM3_Initialize 004D  
            __size_ofi1_Led_StartNotice 000C                              _ADCON0bits 009D  
                     ___wmul@multiplier 004D                                i1___wmul 0447  
                     IR_ScanLongPress@i 0048                    Led_Initialize@result 0057  
                      ??_IR_IsValidTime 0051       __size_of_TMR2_SetInterruptHandler 0008  
             ?_TMR2_SetInterruptHandler 004D                       Util_IncValue@pSrc 004D  
              __size_ofi1_Util_IncValue 0026                   Led_CheckAutoStatus@ct 005B  
                      ??_Led_Initialize 0053                      IR_KeyAction@i_1450 0150  
                    IR_KeyAction@i_1451 0151                      IR_KeyAction@i_1452 0152  
                    IR_KeyAction@i_1455 014D                      IR_KeyAction@i_1447 014B  
                    IR_KeyAction@i_1456 014E                      IR_KeyAction@i_1448 014C  
                    IR_KeyAction@i_1449 014F                                _Led_Ramp 0069  
                        ?_Led_SetCustom 0076                         _Led_DynamicMoon 011F  
                       _Led_DynamicWave 0170                       ?_DATAEE_WriteByte 004D  
                     ??_Led_TurnOffRamp 004D                       i1_TMR4_StartTimer 04B9  
                         ??_RTC_GetTime 004D              __end_ofi1_Led_UpdateBright 04B9  
              __end_of_Led_DynamicCloud 0290                       ??_PWM4_Initialize 004D  
              ??_ADC_Initialize_Default 004D                      ??_DATAEE_WriteByte 0050  
              __end_of_Led_DynamicStorm 0221                      ?i1_TMR4_StartTimer 0070  
        __end_of_IR_ResetIfTMR1Overflow 0AB9                        __size_of_Led_Run 0039  
              __size_of_TMR4_StartTimer 0003                   __size_of_IR_KeyAction 0351  
                   __end_of_IR_GetIndex 160C            __end_of_Interrupt_Initialize 0AE2  
            __end_of_PWM4_LoadDutyValue 118A                                _gLedPara 237B  
                   ??i1_TMR4_StartTimer 0070              __end_of_DATAEE_WriteBuffer 0FC3  
               ??_OSCILLATOR_Initialize 004D                       ??_TMR0_StartTimer 004D  
                     _Audio_SetPlayMode 1622           __size_ofi1_PWM2_LoadDutyValue 0006  
                          Led_AutoRun@i 005B                       _Audio_SelectSound 00E8  
                     ??_PWM5_Initialize 004D                      ?_Audio_SetPlayMode 0070  
              _TMR4_SetInterruptHandler 0F0F                      _PWM3_LoadDutyValue 116C  
                  i1_PWM4_LoadDutyValue 118A                 __end_of_Audio_SetVolume 1622  
                    ?_Audio_SelectSound 0070                 ?i1_TMR2_EnableInterrupt 0070  
                            _T0CON0bits 0017              Led_CheckAutoStatus@sunrise 0057  
                      _tmr0_isr_handler 00E8                  ??_TMR2_EnableInterrupt 004D  
                   ??_Audio_SetPlayMode 004E                        ??_IR_ExitTimeout 005B  
                              __ptext10 0DA9                                __ptext11 0B39  
                              __ptext20 0AF2                                __ptext12 0B33  
                              __ptext21 0FAA                                __ptext13 0D5C  
                              __ptext30 0F0F                                __ptext22 0FC3  
                              __ptext14 0B29                                __ptext31 0F07  
                              __ptext23 0B42                                __ptext15 0FEC  
                              __ptext40 11C5                                __ptext32 0AEA  
                              __ptext24 0F17                                __ptext16 0FE4  
                              __ptext41 153C                                __ptext33 0AE2  
                              __ptext25 0D33                                __ptext17 0B0B  
                              __ptext50 16C3                                __ptext42 1516  
                              __ptext34 0ABB                                __ptext26 0D4E  
                              __ptext18 0B07                                __ptext51 0987  
                              __ptext43 16C6                                __ptext35 11BD  
                              __ptext27 0CB9                                __ptext19 0B02  
                              __ptext60 0ED3                                __ptext52 0A71  
                              __ptext44 16C0                                __ptext36 0A7A  
                              __ptext28 0C36                                __ptext61 093A  
                              __ptext53 0CA0                                __ptext45 1650  
                              __ptext37 0AB9                                __ptext29 0AC7  
                              __ptext70 1124                                __ptext62 1577  
                              __ptext54 117E                                __ptext46 169E  
                              __ptext38 0A77                                __ptext71 079A  
                              __ptext63 160C                                __ptext55 116C  
                              __ptext47 1589                                __ptext39 0A72  
                              __ptext80 011F                                __ptext72 07D3  
                              __ptext64 1622                                __ptext56 115A  
                              __ptext48 16B7                                __ptext81 0221  
                              __ptext73 07CA                                __ptext65 1639  
                              __ptext57 1148                                __ptext49 16AA  
                              __ptext90 081C                                __ptext82 04A8  
                              __ptext74 07C1                                __ptext66 08C8  
                              __ptext58 0807                     ?_PWM3_LoadDutyValue 004D  
                              __ptext91 0290                                __ptext83 00E8  
                              __ptext75 1118                                __ptext67 1562  
                              __ptext59 0EE6                                __ptext92 0482  
                              __ptext84 010B                                __ptext76 0030  
                              __ptext68 0919                                __ptext93 045C  
                              __ptext85 0069                                __ptext77 009F  
                              __ptext94 03FE                                __ptext86 118A  
                              __ptext78 0170                                __ptext95 04B9  
                              __ptext87 1178                                __ptext79 01C1  
                              __ptext96 037B                                __ptext88 1166  
                              __ptext97 040A                                __ptext89 1154  
                              __ptext98 0447                                __ptext99 110C  
             __end_ofi1_TMR4_StartTimer 04BC            __end_ofi1_PWM1_LoadDutyValue 115A  
                   ??_Audio_SelectSound 0071                       ??_TMR1_StartTimer 004D  
                          _IR_KeyAction 11C5            __size_of_Led_CheckAutoStatus 007A  
                       ??_IR_GetKeyType 0070             DATAEE_WriteByte@GIEBitValue 0050  
             __size_of_Led_TurnOnDirect 0009                                _keyValue 0030  
                              _loadDuty 00BE                              _T1GPPSbits 0E13  
                         __size_of_main 0052               ??_TMR1_Initialize_Default 004D  
                              _ir_state 0036               ??_TMR4_Initialize_Default 004D  
                       ??_TMR1_GATE_ISR 007C                        _IR_ScanLongPress 0290  
                            _RA2PPSbits 0E92                 __end_of_Audio_StopSound 1589  
                     ??_DATAEE_ReadByte 004F                              _RC1PPSbits 0EA1  
                   __end_of_RTC_GetTime 0A72        __size_of_TMR0_Initialize_Default 000B  
                  ??_PWM3_LoadDutyValue 004F                              _RC3PPSbits 0EA3  
             __end_of_Audio_SetPlayMode 1639                                _txRemain 0060  
                __size_of_RTC_HourReady 0005                                _rtc_time 003D  
                              int$flags 007E                              _RC5PPSbits 0EA5  
                            _RB7PPSbits 0E9F                           ?_Led_InitPara 0070  
             __end_of_Audio_SelectSound 010B                       ?_Audio_Initialize 0070  
                     ??_TMR2_StartTimer 004D                              _RC7PPSbits 0EA7  
  TMR1_Gate_SetInterruptHandler@handler 004D                    i1Led_StartNotice@cnt 0071  
                  Led_CheckAutoStatus@i 005F                      ??_Audio_Initialize 0050  
        __end_ofi1_TMR2_EnableInterrupt 0770                   ?i1_PWM4_LoadDutyValue 0070  
             Led_CheckAutoStatus@i_1252 005D               Led_CheckAutoStatus@i_1253 005E  
                     Led_UpdateBright@i 0051                        ??_Led_TurnOnRamp 004D  
                      _Led_UpdateBright 0CA0                 __end_of_Led_DynamicMoon 0170  
          __end_of_IR_KeyAtionIfPressed 0A77                 __end_of_Led_DynamicWave 01C1  
                            _INTCONbits 000B                  __size_of_Util_DecValue 0026  
                           _NVMCON1bits 0895                       ??i1_Util_DecValue 0076  
                      ??_ADC_Conversion 004F                         ??_Led_SetCustom 0077  
                         ?_Led_RunMusic 0070                ?_TMR2_Initialize_Default 0070  
                    IR_IsValidTime@hour 0053                                intlevel1 0000  
                 _Audio_Initialize$1221 0052                             _IR_GetIndex 1589  
                __size_of_Util_IncValue 0026               Led_CheckAutoStatus@sunset 0059  
                     ??i1_Util_IncValue 0076         __size_of_ADC_Initialize_Default 0008  
                     __CFG_CLKOUTEN$OFF 0000            __end_ofi1_PWM5_LoadDutyValue 082B  
                           _PPSLOCKbits 0E0F                         _RTC_MinuteReady 0B07  
                    i1EUSART_Write@byte 0070                         _PWM1_Initialize 0B33  
                       _RTC_SecondReady 0B0B                        ??_TMR1_StopTimer 004D  
                 __size_of_RTC_OnSecond 0016             __size_of_PWM2_LoadDutyValue 000C  
                        ??_Led_InitPara 0056   __end_of_TMR1_Gate_SetInterruptHandler 0AF2  
__size_of_TMR1_Gate_SetInterruptHandler 0008           _TMR1_Gate_SetInterruptHandler 0AEA  
           PWM3_LoadDutyValue@dutyValue 004D             ??_EUSART_Initialize_Default 004D  
                     ??_TMR4_StartTimer 004D                        ?_Audio_SetVolume 0070  
                       _PWM2_Initialize 0B39                          ??_Led_RunMusic 007C  
                            Led_Run@cnt 0032                              _IR_ExitSet 16B7  
                     ?_Led_FirstPowerUp 0070                           ??_Led_AutoRun 0057  
                      _tmr2_isr_handler 00E4                         _Led_StartNotice 16AA  
                  _Interrupt_Initialize 0AC7                           _RTC_HourReady 0B02  
            __size_ofi1_TMR4_StartTimer 0003                      ??_Led_FirstPowerUp 004D  
          _PWM1_LoadDutyValue$intlevel0 114B                    i1Util_DecValue@delta 0074  
          __size_of_EUSART_Transmit_ISR 0017                   __end_ofi1_IR_GetIndex 03FE  
                      ??_TMR4_StopTimer 0070                            _RTC_OnSecond 1190  
                           _RTC_GetTime 0A71                 ??_Led_SaveParaIfChanged 0057  
                    Audio_SetVolume@vol 004E                             _PWMTMRSbits 061F  
            __end_of_PWM1_LoadDutyValue 1154                ?i1_TMR2_DisableInterrupt 0070  
         i1PWM2_LoadDutyValue@dutyValue 0070                           _Util_DecValue 1516  
                      ?_Audio_StopSound 0070                         _PWM3_Initialize 0DA9  
                    _IR_UpdateSetStatus 0ABB            _PWM4_LoadDutyValue$intlevel0 1181  
               ??_TMR2_DisableInterrupt 004D  
