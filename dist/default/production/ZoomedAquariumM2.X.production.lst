

Microchip Technology PIC PRO Macro Assembler V1.40 build -251452761 
                                                                                               Wed Nov 22 10:41:50 2017

Microchip Technology Omniscient Code Generator v1.40 (PRO mode) build 201612010151
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text23,local,class=CODE,merge=1,delta=2
    23                           	psect	text26,local,class=CODE,merge=1,delta=2
    24                           	psect	text27,local,class=CODE,merge=1,delta=2
    25                           	psect	text53,local,class=CODE,merge=1,delta=2
    26                           	psect	text54,local,class=CODE,merge=1,delta=2
    27                           	psect	text55,local,class=CODE,merge=1,delta=2
    28                           	psect	text56,local,class=CODE,merge=1,delta=2
    29                           	psect	text57,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text68,local,class=CODE,merge=1,delta=2
    32                           	psect	text69,local,class=CODE,merge=1,delta=2
    33                           	psect	text73,local,class=CODE,merge=1,delta=2
    34                           	psect	text74,local,class=CODE,merge=1,delta=2
    35                           	psect	text99,local,class=CODE,merge=1,delta=2
    36                           	psect	text100,local,class=CODE,merge=1,delta=2
    37                           	psect	text104,local,class=CODE,merge=1,delta=2
    38                           	psect	text105,local,class=CODE,merge=1,delta=2
    39                           	psect	text106,local,class=CODE,merge=1,delta=2
    40                           	psect	pa_nodes,global,class=CODE,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 1.40
    44                           ; Generated 01/12/2016 GMT
    45                           ; 
    46                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F18345 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0094                     	;# 
   119  0097                     	;# 
   120  009B                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  0111                     	;# 
   130  0112                     	;# 
   131  0113                     	;# 
   132  0114                     	;# 
   133  0115                     	;# 
   134  0116                     	;# 
   135  0117                     	;# 
   136  0118                     	;# 
   137  0119                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  018E                     	;# 
   141  0197                     	;# 
   142  0199                     	;# 
   143  0199                     	;# 
   144  0199                     	;# 
   145  019A                     	;# 
   146  019A                     	;# 
   147  019A                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019C                     	;# 
   154  019C                     	;# 
   155  019C                     	;# 
   156  019D                     	;# 
   157  019D                     	;# 
   158  019D                     	;# 
   159  019E                     	;# 
   160  019E                     	;# 
   161  019E                     	;# 
   162  019F                     	;# 
   163  019F                     	;# 
   164  019F                     	;# 
   165  019F                     	;# 
   166  019F                     	;# 
   167  020C                     	;# 
   168  020D                     	;# 
   169  020E                     	;# 
   170  0211                     	;# 
   171  0211                     	;# 
   172  0212                     	;# 
   173  0212                     	;# 
   174  0213                     	;# 
   175  0213                     	;# 
   176  0214                     	;# 
   177  0214                     	;# 
   178  0215                     	;# 
   179  0215                     	;# 
   180  0215                     	;# 
   181  0215                     	;# 
   182  0216                     	;# 
   183  0216                     	;# 
   184  0217                     	;# 
   185  0217                     	;# 
   186  0219                     	;# 
   187  021A                     	;# 
   188  021B                     	;# 
   189  021C                     	;# 
   190  021D                     	;# 
   191  021D                     	;# 
   192  021E                     	;# 
   193  021F                     	;# 
   194  028C                     	;# 
   195  028D                     	;# 
   196  028E                     	;# 
   197  0291                     	;# 
   198  0291                     	;# 
   199  0292                     	;# 
   200  0293                     	;# 
   201  0294                     	;# 
   202  0295                     	;# 
   203  0295                     	;# 
   204  0296                     	;# 
   205  0297                     	;# 
   206  0298                     	;# 
   207  029F                     	;# 
   208  030C                     	;# 
   209  030D                     	;# 
   210  030E                     	;# 
   211  0311                     	;# 
   212  0311                     	;# 
   213  0312                     	;# 
   214  0313                     	;# 
   215  0314                     	;# 
   216  0315                     	;# 
   217  0315                     	;# 
   218  0316                     	;# 
   219  0317                     	;# 
   220  0318                     	;# 
   221  038C                     	;# 
   222  038D                     	;# 
   223  038E                     	;# 
   224  0391                     	;# 
   225  0392                     	;# 
   226  0393                     	;# 
   227  0394                     	;# 
   228  0395                     	;# 
   229  0396                     	;# 
   230  0397                     	;# 
   231  0398                     	;# 
   232  0399                     	;# 
   233  039A                     	;# 
   234  039C                     	;# 
   235  039D                     	;# 
   236  039E                     	;# 
   237  039F                     	;# 
   238  0411                     	;# 
   239  0411                     	;# 
   240  0412                     	;# 
   241  0413                     	;# 
   242  0414                     	;# 
   243  0415                     	;# 
   244  0416                     	;# 
   245  0417                     	;# 
   246  0418                     	;# 
   247  0418                     	;# 
   248  0419                     	;# 
   249  041A                     	;# 
   250  041B                     	;# 
   251  041C                     	;# 
   252  041D                     	;# 
   253  041E                     	;# 
   254  041F                     	;# 
   255  0498                     	;# 
   256  0498                     	;# 
   257  0499                     	;# 
   258  049A                     	;# 
   259  049B                     	;# 
   260  049B                     	;# 
   261  049C                     	;# 
   262  049D                     	;# 
   263  049E                     	;# 
   264  049F                     	;# 
   265  0617                     	;# 
   266  0618                     	;# 
   267  0619                     	;# 
   268  0619                     	;# 
   269  061A                     	;# 
   270  061B                     	;# 
   271  061C                     	;# 
   272  061C                     	;# 
   273  061F                     	;# 
   274  0691                     	;# 
   275  0692                     	;# 
   276  0693                     	;# 
   277  0694                     	;# 
   278  0695                     	;# 
   279  0696                     	;# 
   280  0697                     	;# 
   281  0698                     	;# 
   282  0699                     	;# 
   283  0711                     	;# 
   284  0712                     	;# 
   285  0713                     	;# 
   286  0714                     	;# 
   287  0715                     	;# 
   288  0716                     	;# 
   289  0717                     	;# 
   290  0718                     	;# 
   291  0719                     	;# 
   292  0891                     	;# 
   293  0891                     	;# 
   294  0891                     	;# 
   295  0891                     	;# 
   296  0891                     	;# 
   297  0891                     	;# 
   298  0892                     	;# 
   299  0892                     	;# 
   300  0892                     	;# 
   301  0893                     	;# 
   302  0893                     	;# 
   303  0893                     	;# 
   304  0893                     	;# 
   305  0893                     	;# 
   306  0893                     	;# 
   307  0894                     	;# 
   308  0894                     	;# 
   309  0894                     	;# 
   310  0895                     	;# 
   311  0895                     	;# 
   312  0895                     	;# 
   313  0896                     	;# 
   314  0896                     	;# 
   315  0896                     	;# 
   316  089B                     	;# 
   317  0911                     	;# 
   318  0912                     	;# 
   319  0913                     	;# 
   320  0914                     	;# 
   321  0915                     	;# 
   322  0916                     	;# 
   323  0918                     	;# 
   324  0919                     	;# 
   325  091A                     	;# 
   326  091B                     	;# 
   327  091C                     	;# 
   328  091D                     	;# 
   329  091E                     	;# 
   330  091F                     	;# 
   331  0E0F                     	;# 
   332  0E10                     	;# 
   333  0E11                     	;# 
   334  0E12                     	;# 
   335  0E13                     	;# 
   336  0E14                     	;# 
   337  0E15                     	;# 
   338  0E16                     	;# 
   339  0E17                     	;# 
   340  0E18                     	;# 
   341  0E19                     	;# 
   342  0E1A                     	;# 
   343  0E1B                     	;# 
   344  0E1C                     	;# 
   345  0E1D                     	;# 
   346  0E1E                     	;# 
   347  0E1F                     	;# 
   348  0E20                     	;# 
   349  0E21                     	;# 
   350  0E22                     	;# 
   351  0E24                     	;# 
   352  0E25                     	;# 
   353  0E28                     	;# 
   354  0E29                     	;# 
   355  0E2A                     	;# 
   356  0E2B                     	;# 
   357  0E2C                     	;# 
   358  0E2D                     	;# 
   359  0E2E                     	;# 
   360  0E2F                     	;# 
   361  0E90                     	;# 
   362  0E91                     	;# 
   363  0E92                     	;# 
   364  0E94                     	;# 
   365  0E95                     	;# 
   366  0E9C                     	;# 
   367  0E9D                     	;# 
   368  0E9E                     	;# 
   369  0E9F                     	;# 
   370  0EA0                     	;# 
   371  0EA1                     	;# 
   372  0EA2                     	;# 
   373  0EA3                     	;# 
   374  0EA4                     	;# 
   375  0EA5                     	;# 
   376  0EA6                     	;# 
   377  0EA7                     	;# 
   378  0F0F                     	;# 
   379  0F10                     	;# 
   380  0F11                     	;# 
   381  0F12                     	;# 
   382  0F13                     	;# 
   383  0F14                     	;# 
   384  0F15                     	;# 
   385  0F16                     	;# 
   386  0F17                     	;# 
   387  0F18                     	;# 
   388  0F19                     	;# 
   389  0F1A                     	;# 
   390  0F1B                     	;# 
   391  0F1C                     	;# 
   392  0F1D                     	;# 
   393  0F1E                     	;# 
   394  0F1F                     	;# 
   395  0F20                     	;# 
   396  0F21                     	;# 
   397  0F22                     	;# 
   398  0F23                     	;# 
   399  0F24                     	;# 
   400  0F25                     	;# 
   401  0F26                     	;# 
   402  0F27                     	;# 
   403  0F28                     	;# 
   404  0F29                     	;# 
   405  0F2A                     	;# 
   406  0F2B                     	;# 
   407  0F2C                     	;# 
   408  0F2D                     	;# 
   409  0F2E                     	;# 
   410  0F2F                     	;# 
   411  0F30                     	;# 
   412  0F31                     	;# 
   413  0F32                     	;# 
   414  0F33                     	;# 
   415  0F34                     	;# 
   416  0F35                     	;# 
   417  0F36                     	;# 
   418  0F37                     	;# 
   419  0FE4                     	;# 
   420  0FE5                     	;# 
   421  0FE6                     	;# 
   422  0FE7                     	;# 
   423  0FE8                     	;# 
   424  0FE9                     	;# 
   425  0FEA                     	;# 
   426  0FEB                     	;# 
   427  0FED                     	;# 
   428  0FEE                     	;# 
   429  0FEF                     	;# 
   430  0000                     	;# 
   431  0001                     	;# 
   432  0002                     	;# 
   433  0003                     	;# 
   434  0004                     	;# 
   435  0005                     	;# 
   436  0006                     	;# 
   437  0007                     	;# 
   438  0008                     	;# 
   439  0009                     	;# 
   440  000A                     	;# 
   441  000B                     	;# 
   442  000C                     	;# 
   443  000D                     	;# 
   444  000E                     	;# 
   445  0010                     	;# 
   446  0011                     	;# 
   447  0012                     	;# 
   448  0013                     	;# 
   449  0014                     	;# 
   450  0015                     	;# 
   451  0015                     	;# 
   452  0016                     	;# 
   453  0016                     	;# 
   454  0017                     	;# 
   455  0018                     	;# 
   456  0019                     	;# 
   457  0019                     	;# 
   458  001A                     	;# 
   459  001B                     	;# 
   460  001C                     	;# 
   461  001D                     	;# 
   462  001E                     	;# 
   463  001F                     	;# 
   464  008C                     	;# 
   465  008D                     	;# 
   466  008E                     	;# 
   467  0090                     	;# 
   468  0091                     	;# 
   469  0092                     	;# 
   470  0093                     	;# 
   471  0094                     	;# 
   472  0097                     	;# 
   473  009B                     	;# 
   474  009B                     	;# 
   475  009C                     	;# 
   476  009D                     	;# 
   477  009E                     	;# 
   478  009F                     	;# 
   479  010C                     	;# 
   480  010D                     	;# 
   481  010E                     	;# 
   482  0111                     	;# 
   483  0112                     	;# 
   484  0113                     	;# 
   485  0114                     	;# 
   486  0115                     	;# 
   487  0116                     	;# 
   488  0117                     	;# 
   489  0118                     	;# 
   490  0119                     	;# 
   491  018C                     	;# 
   492  018D                     	;# 
   493  018E                     	;# 
   494  0197                     	;# 
   495  0199                     	;# 
   496  0199                     	;# 
   497  0199                     	;# 
   498  019A                     	;# 
   499  019A                     	;# 
   500  019A                     	;# 
   501  019B                     	;# 
   502  019B                     	;# 
   503  019B                     	;# 
   504  019B                     	;# 
   505  019B                     	;# 
   506  019C                     	;# 
   507  019C                     	;# 
   508  019C                     	;# 
   509  019D                     	;# 
   510  019D                     	;# 
   511  019D                     	;# 
   512  019E                     	;# 
   513  019E                     	;# 
   514  019E                     	;# 
   515  019F                     	;# 
   516  019F                     	;# 
   517  019F                     	;# 
   518  019F                     	;# 
   519  019F                     	;# 
   520  020C                     	;# 
   521  020D                     	;# 
   522  020E                     	;# 
   523  0211                     	;# 
   524  0211                     	;# 
   525  0212                     	;# 
   526  0212                     	;# 
   527  0213                     	;# 
   528  0213                     	;# 
   529  0214                     	;# 
   530  0214                     	;# 
   531  0215                     	;# 
   532  0215                     	;# 
   533  0215                     	;# 
   534  0215                     	;# 
   535  0216                     	;# 
   536  0216                     	;# 
   537  0217                     	;# 
   538  0217                     	;# 
   539  0219                     	;# 
   540  021A                     	;# 
   541  021B                     	;# 
   542  021C                     	;# 
   543  021D                     	;# 
   544  021D                     	;# 
   545  021E                     	;# 
   546  021F                     	;# 
   547  028C                     	;# 
   548  028D                     	;# 
   549  028E                     	;# 
   550  0291                     	;# 
   551  0291                     	;# 
   552  0292                     	;# 
   553  0293                     	;# 
   554  0294                     	;# 
   555  0295                     	;# 
   556  0295                     	;# 
   557  0296                     	;# 
   558  0297                     	;# 
   559  0298                     	;# 
   560  029F                     	;# 
   561  030C                     	;# 
   562  030D                     	;# 
   563  030E                     	;# 
   564  0311                     	;# 
   565  0311                     	;# 
   566  0312                     	;# 
   567  0313                     	;# 
   568  0314                     	;# 
   569  0315                     	;# 
   570  0315                     	;# 
   571  0316                     	;# 
   572  0317                     	;# 
   573  0318                     	;# 
   574  038C                     	;# 
   575  038D                     	;# 
   576  038E                     	;# 
   577  0391                     	;# 
   578  0392                     	;# 
   579  0393                     	;# 
   580  0394                     	;# 
   581  0395                     	;# 
   582  0396                     	;# 
   583  0397                     	;# 
   584  0398                     	;# 
   585  0399                     	;# 
   586  039A                     	;# 
   587  039C                     	;# 
   588  039D                     	;# 
   589  039E                     	;# 
   590  039F                     	;# 
   591  0411                     	;# 
   592  0411                     	;# 
   593  0412                     	;# 
   594  0413                     	;# 
   595  0414                     	;# 
   596  0415                     	;# 
   597  0416                     	;# 
   598  0417                     	;# 
   599  0418                     	;# 
   600  0418                     	;# 
   601  0419                     	;# 
   602  041A                     	;# 
   603  041B                     	;# 
   604  041C                     	;# 
   605  041D                     	;# 
   606  041E                     	;# 
   607  041F                     	;# 
   608  0498                     	;# 
   609  0498                     	;# 
   610  0499                     	;# 
   611  049A                     	;# 
   612  049B                     	;# 
   613  049B                     	;# 
   614  049C                     	;# 
   615  049D                     	;# 
   616  049E                     	;# 
   617  049F                     	;# 
   618  0617                     	;# 
   619  0618                     	;# 
   620  0619                     	;# 
   621  0619                     	;# 
   622  061A                     	;# 
   623  061B                     	;# 
   624  061C                     	;# 
   625  061C                     	;# 
   626  061F                     	;# 
   627  0691                     	;# 
   628  0692                     	;# 
   629  0693                     	;# 
   630  0694                     	;# 
   631  0695                     	;# 
   632  0696                     	;# 
   633  0697                     	;# 
   634  0698                     	;# 
   635  0699                     	;# 
   636  0711                     	;# 
   637  0712                     	;# 
   638  0713                     	;# 
   639  0714                     	;# 
   640  0715                     	;# 
   641  0716                     	;# 
   642  0717                     	;# 
   643  0718                     	;# 
   644  0719                     	;# 
   645  0891                     	;# 
   646  0891                     	;# 
   647  0891                     	;# 
   648  0891                     	;# 
   649  0891                     	;# 
   650  0891                     	;# 
   651  0892                     	;# 
   652  0892                     	;# 
   653  0892                     	;# 
   654  0893                     	;# 
   655  0893                     	;# 
   656  0893                     	;# 
   657  0893                     	;# 
   658  0893                     	;# 
   659  0893                     	;# 
   660  0894                     	;# 
   661  0894                     	;# 
   662  0894                     	;# 
   663  0895                     	;# 
   664  0895                     	;# 
   665  0895                     	;# 
   666  0896                     	;# 
   667  0896                     	;# 
   668  0896                     	;# 
   669  089B                     	;# 
   670  0911                     	;# 
   671  0912                     	;# 
   672  0913                     	;# 
   673  0914                     	;# 
   674  0915                     	;# 
   675  0916                     	;# 
   676  0918                     	;# 
   677  0919                     	;# 
   678  091A                     	;# 
   679  091B                     	;# 
   680  091C                     	;# 
   681  091D                     	;# 
   682  091E                     	;# 
   683  091F                     	;# 
   684  0E0F                     	;# 
   685  0E10                     	;# 
   686  0E11                     	;# 
   687  0E12                     	;# 
   688  0E13                     	;# 
   689  0E14                     	;# 
   690  0E15                     	;# 
   691  0E16                     	;# 
   692  0E17                     	;# 
   693  0E18                     	;# 
   694  0E19                     	;# 
   695  0E1A                     	;# 
   696  0E1B                     	;# 
   697  0E1C                     	;# 
   698  0E1D                     	;# 
   699  0E1E                     	;# 
   700  0E1F                     	;# 
   701  0E20                     	;# 
   702  0E21                     	;# 
   703  0E22                     	;# 
   704  0E24                     	;# 
   705  0E25                     	;# 
   706  0E28                     	;# 
   707  0E29                     	;# 
   708  0E2A                     	;# 
   709  0E2B                     	;# 
   710  0E2C                     	;# 
   711  0E2D                     	;# 
   712  0E2E                     	;# 
   713  0E2F                     	;# 
   714  0E90                     	;# 
   715  0E91                     	;# 
   716  0E92                     	;# 
   717  0E94                     	;# 
   718  0E95                     	;# 
   719  0E9C                     	;# 
   720  0E9D                     	;# 
   721  0E9E                     	;# 
   722  0E9F                     	;# 
   723  0EA0                     	;# 
   724  0EA1                     	;# 
   725  0EA2                     	;# 
   726  0EA3                     	;# 
   727  0EA4                     	;# 
   728  0EA5                     	;# 
   729  0EA6                     	;# 
   730  0EA7                     	;# 
   731  0F0F                     	;# 
   732  0F10                     	;# 
   733  0F11                     	;# 
   734  0F12                     	;# 
   735  0F13                     	;# 
   736  0F14                     	;# 
   737  0F15                     	;# 
   738  0F16                     	;# 
   739  0F17                     	;# 
   740  0F18                     	;# 
   741  0F19                     	;# 
   742  0F1A                     	;# 
   743  0F1B                     	;# 
   744  0F1C                     	;# 
   745  0F1D                     	;# 
   746  0F1E                     	;# 
   747  0F1F                     	;# 
   748  0F20                     	;# 
   749  0F21                     	;# 
   750  0F22                     	;# 
   751  0F23                     	;# 
   752  0F24                     	;# 
   753  0F25                     	;# 
   754  0F26                     	;# 
   755  0F27                     	;# 
   756  0F28                     	;# 
   757  0F29                     	;# 
   758  0F2A                     	;# 
   759  0F2B                     	;# 
   760  0F2C                     	;# 
   761  0F2D                     	;# 
   762  0F2E                     	;# 
   763  0F2F                     	;# 
   764  0F30                     	;# 
   765  0F31                     	;# 
   766  0F32                     	;# 
   767  0F33                     	;# 
   768  0F34                     	;# 
   769  0F35                     	;# 
   770  0F36                     	;# 
   771  0F37                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000D                     	;# 
   797  000E                     	;# 
   798  0010                     	;# 
   799  0011                     	;# 
   800  0012                     	;# 
   801  0013                     	;# 
   802  0014                     	;# 
   803  0015                     	;# 
   804  0015                     	;# 
   805  0016                     	;# 
   806  0016                     	;# 
   807  0017                     	;# 
   808  0018                     	;# 
   809  0019                     	;# 
   810  0019                     	;# 
   811  001A                     	;# 
   812  001B                     	;# 
   813  001C                     	;# 
   814  001D                     	;# 
   815  001E                     	;# 
   816  001F                     	;# 
   817  008C                     	;# 
   818  008D                     	;# 
   819  008E                     	;# 
   820  0090                     	;# 
   821  0091                     	;# 
   822  0092                     	;# 
   823  0093                     	;# 
   824  0094                     	;# 
   825  0097                     	;# 
   826  009B                     	;# 
   827  009B                     	;# 
   828  009C                     	;# 
   829  009D                     	;# 
   830  009E                     	;# 
   831  009F                     	;# 
   832  010C                     	;# 
   833  010D                     	;# 
   834  010E                     	;# 
   835  0111                     	;# 
   836  0112                     	;# 
   837  0113                     	;# 
   838  0114                     	;# 
   839  0115                     	;# 
   840  0116                     	;# 
   841  0117                     	;# 
   842  0118                     	;# 
   843  0119                     	;# 
   844  018C                     	;# 
   845  018D                     	;# 
   846  018E                     	;# 
   847  0197                     	;# 
   848  0199                     	;# 
   849  0199                     	;# 
   850  0199                     	;# 
   851  019A                     	;# 
   852  019A                     	;# 
   853  019A                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019C                     	;# 
   860  019C                     	;# 
   861  019C                     	;# 
   862  019D                     	;# 
   863  019D                     	;# 
   864  019D                     	;# 
   865  019E                     	;# 
   866  019E                     	;# 
   867  019E                     	;# 
   868  019F                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  020C                     	;# 
   874  020D                     	;# 
   875  020E                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0216                     	;# 
   889  0216                     	;# 
   890  0217                     	;# 
   891  0217                     	;# 
   892  0219                     	;# 
   893  021A                     	;# 
   894  021B                     	;# 
   895  021C                     	;# 
   896  021D                     	;# 
   897  021D                     	;# 
   898  021E                     	;# 
   899  021F                     	;# 
   900  028C                     	;# 
   901  028D                     	;# 
   902  028E                     	;# 
   903  0291                     	;# 
   904  0291                     	;# 
   905  0292                     	;# 
   906  0293                     	;# 
   907  0294                     	;# 
   908  0295                     	;# 
   909  0295                     	;# 
   910  0296                     	;# 
   911  0297                     	;# 
   912  0298                     	;# 
   913  029F                     	;# 
   914  030C                     	;# 
   915  030D                     	;# 
   916  030E                     	;# 
   917  0311                     	;# 
   918  0311                     	;# 
   919  0312                     	;# 
   920  0313                     	;# 
   921  0314                     	;# 
   922  0315                     	;# 
   923  0315                     	;# 
   924  0316                     	;# 
   925  0317                     	;# 
   926  0318                     	;# 
   927  038C                     	;# 
   928  038D                     	;# 
   929  038E                     	;# 
   930  0391                     	;# 
   931  0392                     	;# 
   932  0393                     	;# 
   933  0394                     	;# 
   934  0395                     	;# 
   935  0396                     	;# 
   936  0397                     	;# 
   937  0398                     	;# 
   938  0399                     	;# 
   939  039A                     	;# 
   940  039C                     	;# 
   941  039D                     	;# 
   942  039E                     	;# 
   943  039F                     	;# 
   944  0411                     	;# 
   945  0411                     	;# 
   946  0412                     	;# 
   947  0413                     	;# 
   948  0414                     	;# 
   949  0415                     	;# 
   950  0416                     	;# 
   951  0417                     	;# 
   952  0418                     	;# 
   953  0418                     	;# 
   954  0419                     	;# 
   955  041A                     	;# 
   956  041B                     	;# 
   957  041C                     	;# 
   958  041D                     	;# 
   959  041E                     	;# 
   960  041F                     	;# 
   961  0498                     	;# 
   962  0498                     	;# 
   963  0499                     	;# 
   964  049A                     	;# 
   965  049B                     	;# 
   966  049B                     	;# 
   967  049C                     	;# 
   968  049D                     	;# 
   969  049E                     	;# 
   970  049F                     	;# 
   971  0617                     	;# 
   972  0618                     	;# 
   973  0619                     	;# 
   974  0619                     	;# 
   975  061A                     	;# 
   976  061B                     	;# 
   977  061C                     	;# 
   978  061C                     	;# 
   979  061F                     	;# 
   980  0691                     	;# 
   981  0692                     	;# 
   982  0693                     	;# 
   983  0694                     	;# 
   984  0695                     	;# 
   985  0696                     	;# 
   986  0697                     	;# 
   987  0698                     	;# 
   988  0699                     	;# 
   989  0711                     	;# 
   990  0712                     	;# 
   991  0713                     	;# 
   992  0714                     	;# 
   993  0715                     	;# 
   994  0716                     	;# 
   995  0717                     	;# 
   996  0718                     	;# 
   997  0719                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0891                     	;# 
  1003  0891                     	;# 
  1004  0892                     	;# 
  1005  0892                     	;# 
  1006  0892                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0893                     	;# 
  1012  0893                     	;# 
  1013  0894                     	;# 
  1014  0894                     	;# 
  1015  0894                     	;# 
  1016  0895                     	;# 
  1017  0895                     	;# 
  1018  0895                     	;# 
  1019  0896                     	;# 
  1020  0896                     	;# 
  1021  0896                     	;# 
  1022  089B                     	;# 
  1023  0911                     	;# 
  1024  0912                     	;# 
  1025  0913                     	;# 
  1026  0914                     	;# 
  1027  0915                     	;# 
  1028  0916                     	;# 
  1029  0918                     	;# 
  1030  0919                     	;# 
  1031  091A                     	;# 
  1032  091B                     	;# 
  1033  091C                     	;# 
  1034  091D                     	;# 
  1035  091E                     	;# 
  1036  091F                     	;# 
  1037  0E0F                     	;# 
  1038  0E10                     	;# 
  1039  0E11                     	;# 
  1040  0E12                     	;# 
  1041  0E13                     	;# 
  1042  0E14                     	;# 
  1043  0E15                     	;# 
  1044  0E16                     	;# 
  1045  0E17                     	;# 
  1046  0E18                     	;# 
  1047  0E19                     	;# 
  1048  0E1A                     	;# 
  1049  0E1B                     	;# 
  1050  0E1C                     	;# 
  1051  0E1D                     	;# 
  1052  0E1E                     	;# 
  1053  0E1F                     	;# 
  1054  0E20                     	;# 
  1055  0E21                     	;# 
  1056  0E22                     	;# 
  1057  0E24                     	;# 
  1058  0E25                     	;# 
  1059  0E28                     	;# 
  1060  0E29                     	;# 
  1061  0E2A                     	;# 
  1062  0E2B                     	;# 
  1063  0E2C                     	;# 
  1064  0E2D                     	;# 
  1065  0E2E                     	;# 
  1066  0E2F                     	;# 
  1067  0E90                     	;# 
  1068  0E91                     	;# 
  1069  0E92                     	;# 
  1070  0E94                     	;# 
  1071  0E95                     	;# 
  1072  0E9C                     	;# 
  1073  0E9D                     	;# 
  1074  0E9E                     	;# 
  1075  0E9F                     	;# 
  1076  0EA0                     	;# 
  1077  0EA1                     	;# 
  1078  0EA2                     	;# 
  1079  0EA3                     	;# 
  1080  0EA4                     	;# 
  1081  0EA5                     	;# 
  1082  0EA6                     	;# 
  1083  0EA7                     	;# 
  1084  0F0F                     	;# 
  1085  0F10                     	;# 
  1086  0F11                     	;# 
  1087  0F12                     	;# 
  1088  0F13                     	;# 
  1089  0F14                     	;# 
  1090  0F15                     	;# 
  1091  0F16                     	;# 
  1092  0F17                     	;# 
  1093  0F18                     	;# 
  1094  0F19                     	;# 
  1095  0F1A                     	;# 
  1096  0F1B                     	;# 
  1097  0F1C                     	;# 
  1098  0F1D                     	;# 
  1099  0F1E                     	;# 
  1100  0F1F                     	;# 
  1101  0F20                     	;# 
  1102  0F21                     	;# 
  1103  0F22                     	;# 
  1104  0F23                     	;# 
  1105  0F24                     	;# 
  1106  0F25                     	;# 
  1107  0F26                     	;# 
  1108  0F27                     	;# 
  1109  0F28                     	;# 
  1110  0F29                     	;# 
  1111  0F2A                     	;# 
  1112  0F2B                     	;# 
  1113  0F2C                     	;# 
  1114  0F2D                     	;# 
  1115  0F2E                     	;# 
  1116  0F2F                     	;# 
  1117  0F30                     	;# 
  1118  0F31                     	;# 
  1119  0F32                     	;# 
  1120  0F33                     	;# 
  1121  0F34                     	;# 
  1122  0F35                     	;# 
  1123  0F36                     	;# 
  1124  0F37                     	;# 
  1125  0FE4                     	;# 
  1126  0FE5                     	;# 
  1127  0FE6                     	;# 
  1128  0FE7                     	;# 
  1129  0FE8                     	;# 
  1130  0FE9                     	;# 
  1131  0FEA                     	;# 
  1132  0FEB                     	;# 
  1133  0FED                     	;# 
  1134  0FEE                     	;# 
  1135  0FEF                     	;# 
  1136  0000                     	;# 
  1137  0001                     	;# 
  1138  0002                     	;# 
  1139  0003                     	;# 
  1140  0004                     	;# 
  1141  0005                     	;# 
  1142  0006                     	;# 
  1143  0007                     	;# 
  1144  0008                     	;# 
  1145  0009                     	;# 
  1146  000A                     	;# 
  1147  000B                     	;# 
  1148  000C                     	;# 
  1149  000D                     	;# 
  1150  000E                     	;# 
  1151  0010                     	;# 
  1152  0011                     	;# 
  1153  0012                     	;# 
  1154  0013                     	;# 
  1155  0014                     	;# 
  1156  0015                     	;# 
  1157  0015                     	;# 
  1158  0016                     	;# 
  1159  0016                     	;# 
  1160  0017                     	;# 
  1161  0018                     	;# 
  1162  0019                     	;# 
  1163  0019                     	;# 
  1164  001A                     	;# 
  1165  001B                     	;# 
  1166  001C                     	;# 
  1167  001D                     	;# 
  1168  001E                     	;# 
  1169  001F                     	;# 
  1170  008C                     	;# 
  1171  008D                     	;# 
  1172  008E                     	;# 
  1173  0090                     	;# 
  1174  0091                     	;# 
  1175  0092                     	;# 
  1176  0093                     	;# 
  1177  0094                     	;# 
  1178  0097                     	;# 
  1179  009B                     	;# 
  1180  009B                     	;# 
  1181  009C                     	;# 
  1182  009D                     	;# 
  1183  009E                     	;# 
  1184  009F                     	;# 
  1185  010C                     	;# 
  1186  010D                     	;# 
  1187  010E                     	;# 
  1188  0111                     	;# 
  1189  0112                     	;# 
  1190  0113                     	;# 
  1191  0114                     	;# 
  1192  0115                     	;# 
  1193  0116                     	;# 
  1194  0117                     	;# 
  1195  0118                     	;# 
  1196  0119                     	;# 
  1197  018C                     	;# 
  1198  018D                     	;# 
  1199  018E                     	;# 
  1200  0197                     	;# 
  1201  0199                     	;# 
  1202  0199                     	;# 
  1203  0199                     	;# 
  1204  019A                     	;# 
  1205  019A                     	;# 
  1206  019A                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019B                     	;# 
  1211  019B                     	;# 
  1212  019C                     	;# 
  1213  019C                     	;# 
  1214  019C                     	;# 
  1215  019D                     	;# 
  1216  019D                     	;# 
  1217  019D                     	;# 
  1218  019E                     	;# 
  1219  019E                     	;# 
  1220  019E                     	;# 
  1221  019F                     	;# 
  1222  019F                     	;# 
  1223  019F                     	;# 
  1224  019F                     	;# 
  1225  019F                     	;# 
  1226  020C                     	;# 
  1227  020D                     	;# 
  1228  020E                     	;# 
  1229  0211                     	;# 
  1230  0211                     	;# 
  1231  0212                     	;# 
  1232  0212                     	;# 
  1233  0213                     	;# 
  1234  0213                     	;# 
  1235  0214                     	;# 
  1236  0214                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0215                     	;# 
  1241  0216                     	;# 
  1242  0216                     	;# 
  1243  0217                     	;# 
  1244  0217                     	;# 
  1245  0219                     	;# 
  1246  021A                     	;# 
  1247  021B                     	;# 
  1248  021C                     	;# 
  1249  021D                     	;# 
  1250  021D                     	;# 
  1251  021E                     	;# 
  1252  021F                     	;# 
  1253  028C                     	;# 
  1254  028D                     	;# 
  1255  028E                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0294                     	;# 
  1261  0295                     	;# 
  1262  0295                     	;# 
  1263  0296                     	;# 
  1264  0297                     	;# 
  1265  0298                     	;# 
  1266  029F                     	;# 
  1267  030C                     	;# 
  1268  030D                     	;# 
  1269  030E                     	;# 
  1270  0311                     	;# 
  1271  0311                     	;# 
  1272  0312                     	;# 
  1273  0313                     	;# 
  1274  0314                     	;# 
  1275  0315                     	;# 
  1276  0315                     	;# 
  1277  0316                     	;# 
  1278  0317                     	;# 
  1279  0318                     	;# 
  1280  038C                     	;# 
  1281  038D                     	;# 
  1282  038E                     	;# 
  1283  0391                     	;# 
  1284  0392                     	;# 
  1285  0393                     	;# 
  1286  0394                     	;# 
  1287  0395                     	;# 
  1288  0396                     	;# 
  1289  0397                     	;# 
  1290  0398                     	;# 
  1291  0399                     	;# 
  1292  039A                     	;# 
  1293  039C                     	;# 
  1294  039D                     	;# 
  1295  039E                     	;# 
  1296  039F                     	;# 
  1297  0411                     	;# 
  1298  0411                     	;# 
  1299  0412                     	;# 
  1300  0413                     	;# 
  1301  0414                     	;# 
  1302  0415                     	;# 
  1303  0416                     	;# 
  1304  0417                     	;# 
  1305  0418                     	;# 
  1306  0418                     	;# 
  1307  0419                     	;# 
  1308  041A                     	;# 
  1309  041B                     	;# 
  1310  041C                     	;# 
  1311  041D                     	;# 
  1312  041E                     	;# 
  1313  041F                     	;# 
  1314  0498                     	;# 
  1315  0498                     	;# 
  1316  0499                     	;# 
  1317  049A                     	;# 
  1318  049B                     	;# 
  1319  049B                     	;# 
  1320  049C                     	;# 
  1321  049D                     	;# 
  1322  049E                     	;# 
  1323  049F                     	;# 
  1324  0617                     	;# 
  1325  0618                     	;# 
  1326  0619                     	;# 
  1327  0619                     	;# 
  1328  061A                     	;# 
  1329  061B                     	;# 
  1330  061C                     	;# 
  1331  061C                     	;# 
  1332  061F                     	;# 
  1333  0691                     	;# 
  1334  0692                     	;# 
  1335  0693                     	;# 
  1336  0694                     	;# 
  1337  0695                     	;# 
  1338  0696                     	;# 
  1339  0697                     	;# 
  1340  0698                     	;# 
  1341  0699                     	;# 
  1342  0711                     	;# 
  1343  0712                     	;# 
  1344  0713                     	;# 
  1345  0714                     	;# 
  1346  0715                     	;# 
  1347  0716                     	;# 
  1348  0717                     	;# 
  1349  0718                     	;# 
  1350  0719                     	;# 
  1351  0891                     	;# 
  1352  0891                     	;# 
  1353  0891                     	;# 
  1354  0891                     	;# 
  1355  0891                     	;# 
  1356  0891                     	;# 
  1357  0892                     	;# 
  1358  0892                     	;# 
  1359  0892                     	;# 
  1360  0893                     	;# 
  1361  0893                     	;# 
  1362  0893                     	;# 
  1363  0893                     	;# 
  1364  0893                     	;# 
  1365  0893                     	;# 
  1366  0894                     	;# 
  1367  0894                     	;# 
  1368  0894                     	;# 
  1369  0895                     	;# 
  1370  0895                     	;# 
  1371  0895                     	;# 
  1372  0896                     	;# 
  1373  0896                     	;# 
  1374  0896                     	;# 
  1375  089B                     	;# 
  1376  0911                     	;# 
  1377  0912                     	;# 
  1378  0913                     	;# 
  1379  0914                     	;# 
  1380  0915                     	;# 
  1381  0916                     	;# 
  1382  0918                     	;# 
  1383  0919                     	;# 
  1384  091A                     	;# 
  1385  091B                     	;# 
  1386  091C                     	;# 
  1387  091D                     	;# 
  1388  091E                     	;# 
  1389  091F                     	;# 
  1390  0E0F                     	;# 
  1391  0E10                     	;# 
  1392  0E11                     	;# 
  1393  0E12                     	;# 
  1394  0E13                     	;# 
  1395  0E14                     	;# 
  1396  0E15                     	;# 
  1397  0E16                     	;# 
  1398  0E17                     	;# 
  1399  0E18                     	;# 
  1400  0E19                     	;# 
  1401  0E1A                     	;# 
  1402  0E1B                     	;# 
  1403  0E1C                     	;# 
  1404  0E1D                     	;# 
  1405  0E1E                     	;# 
  1406  0E1F                     	;# 
  1407  0E20                     	;# 
  1408  0E21                     	;# 
  1409  0E22                     	;# 
  1410  0E24                     	;# 
  1411  0E25                     	;# 
  1412  0E28                     	;# 
  1413  0E29                     	;# 
  1414  0E2A                     	;# 
  1415  0E2B                     	;# 
  1416  0E2C                     	;# 
  1417  0E2D                     	;# 
  1418  0E2E                     	;# 
  1419  0E2F                     	;# 
  1420  0E90                     	;# 
  1421  0E91                     	;# 
  1422  0E92                     	;# 
  1423  0E94                     	;# 
  1424  0E95                     	;# 
  1425  0E9C                     	;# 
  1426  0E9D                     	;# 
  1427  0E9E                     	;# 
  1428  0E9F                     	;# 
  1429  0EA0                     	;# 
  1430  0EA1                     	;# 
  1431  0EA2                     	;# 
  1432  0EA3                     	;# 
  1433  0EA4                     	;# 
  1434  0EA5                     	;# 
  1435  0EA6                     	;# 
  1436  0EA7                     	;# 
  1437  0F0F                     	;# 
  1438  0F10                     	;# 
  1439  0F11                     	;# 
  1440  0F12                     	;# 
  1441  0F13                     	;# 
  1442  0F14                     	;# 
  1443  0F15                     	;# 
  1444  0F16                     	;# 
  1445  0F17                     	;# 
  1446  0F18                     	;# 
  1447  0F19                     	;# 
  1448  0F1A                     	;# 
  1449  0F1B                     	;# 
  1450  0F1C                     	;# 
  1451  0F1D                     	;# 
  1452  0F1E                     	;# 
  1453  0F1F                     	;# 
  1454  0F20                     	;# 
  1455  0F21                     	;# 
  1456  0F22                     	;# 
  1457  0F23                     	;# 
  1458  0F24                     	;# 
  1459  0F25                     	;# 
  1460  0F26                     	;# 
  1461  0F27                     	;# 
  1462  0F28                     	;# 
  1463  0F29                     	;# 
  1464  0F2A                     	;# 
  1465  0F2B                     	;# 
  1466  0F2C                     	;# 
  1467  0F2D                     	;# 
  1468  0F2E                     	;# 
  1469  0F2F                     	;# 
  1470  0F30                     	;# 
  1471  0F31                     	;# 
  1472  0F32                     	;# 
  1473  0F33                     	;# 
  1474  0F34                     	;# 
  1475  0F35                     	;# 
  1476  0F36                     	;# 
  1477  0F37                     	;# 
  1478  0FE4                     	;# 
  1479  0FE5                     	;# 
  1480  0FE6                     	;# 
  1481  0FE7                     	;# 
  1482  0FE8                     	;# 
  1483  0FE9                     	;# 
  1484  0FEA                     	;# 
  1485  0FEB                     	;# 
  1486  0FED                     	;# 
  1487  0FEE                     	;# 
  1488  0FEF                     	;# 
  1489  0000                     	;# 
  1490  0001                     	;# 
  1491  0002                     	;# 
  1492  0003                     	;# 
  1493  0004                     	;# 
  1494  0005                     	;# 
  1495  0006                     	;# 
  1496  0007                     	;# 
  1497  0008                     	;# 
  1498  0009                     	;# 
  1499  000A                     	;# 
  1500  000B                     	;# 
  1501  000C                     	;# 
  1502  000D                     	;# 
  1503  000E                     	;# 
  1504  0010                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0013                     	;# 
  1508  0014                     	;# 
  1509  0015                     	;# 
  1510  0015                     	;# 
  1511  0016                     	;# 
  1512  0016                     	;# 
  1513  0017                     	;# 
  1514  0018                     	;# 
  1515  0019                     	;# 
  1516  0019                     	;# 
  1517  001A                     	;# 
  1518  001B                     	;# 
  1519  001C                     	;# 
  1520  001D                     	;# 
  1521  001E                     	;# 
  1522  001F                     	;# 
  1523  008C                     	;# 
  1524  008D                     	;# 
  1525  008E                     	;# 
  1526  0090                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0093                     	;# 
  1530  0094                     	;# 
  1531  0097                     	;# 
  1532  009B                     	;# 
  1533  009B                     	;# 
  1534  009C                     	;# 
  1535  009D                     	;# 
  1536  009E                     	;# 
  1537  009F                     	;# 
  1538  010C                     	;# 
  1539  010D                     	;# 
  1540  010E                     	;# 
  1541  0111                     	;# 
  1542  0112                     	;# 
  1543  0113                     	;# 
  1544  0114                     	;# 
  1545  0115                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  0118                     	;# 
  1549  0119                     	;# 
  1550  018C                     	;# 
  1551  018D                     	;# 
  1552  018E                     	;# 
  1553  0197                     	;# 
  1554  0199                     	;# 
  1555  0199                     	;# 
  1556  0199                     	;# 
  1557  019A                     	;# 
  1558  019A                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019D                     	;# 
  1570  019D                     	;# 
  1571  019E                     	;# 
  1572  019E                     	;# 
  1573  019E                     	;# 
  1574  019F                     	;# 
  1575  019F                     	;# 
  1576  019F                     	;# 
  1577  019F                     	;# 
  1578  019F                     	;# 
  1579  020C                     	;# 
  1580  020D                     	;# 
  1581  020E                     	;# 
  1582  0211                     	;# 
  1583  0211                     	;# 
  1584  0212                     	;# 
  1585  0212                     	;# 
  1586  0213                     	;# 
  1587  0213                     	;# 
  1588  0214                     	;# 
  1589  0214                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0216                     	;# 
  1595  0216                     	;# 
  1596  0217                     	;# 
  1597  0217                     	;# 
  1598  0219                     	;# 
  1599  021A                     	;# 
  1600  021B                     	;# 
  1601  021C                     	;# 
  1602  021D                     	;# 
  1603  021D                     	;# 
  1604  021E                     	;# 
  1605  021F                     	;# 
  1606  028C                     	;# 
  1607  028D                     	;# 
  1608  028E                     	;# 
  1609  0291                     	;# 
  1610  0291                     	;# 
  1611  0292                     	;# 
  1612  0293                     	;# 
  1613  0294                     	;# 
  1614  0295                     	;# 
  1615  0295                     	;# 
  1616  0296                     	;# 
  1617  0297                     	;# 
  1618  0298                     	;# 
  1619  029F                     	;# 
  1620  030C                     	;# 
  1621  030D                     	;# 
  1622  030E                     	;# 
  1623  0311                     	;# 
  1624  0311                     	;# 
  1625  0312                     	;# 
  1626  0313                     	;# 
  1627  0314                     	;# 
  1628  0315                     	;# 
  1629  0315                     	;# 
  1630  0316                     	;# 
  1631  0317                     	;# 
  1632  0318                     	;# 
  1633  038C                     	;# 
  1634  038D                     	;# 
  1635  038E                     	;# 
  1636  0391                     	;# 
  1637  0392                     	;# 
  1638  0393                     	;# 
  1639  0394                     	;# 
  1640  0395                     	;# 
  1641  0396                     	;# 
  1642  0397                     	;# 
  1643  0398                     	;# 
  1644  0399                     	;# 
  1645  039A                     	;# 
  1646  039C                     	;# 
  1647  039D                     	;# 
  1648  039E                     	;# 
  1649  039F                     	;# 
  1650  0411                     	;# 
  1651  0411                     	;# 
  1652  0412                     	;# 
  1653  0413                     	;# 
  1654  0414                     	;# 
  1655  0415                     	;# 
  1656  0416                     	;# 
  1657  0417                     	;# 
  1658  0418                     	;# 
  1659  0418                     	;# 
  1660  0419                     	;# 
  1661  041A                     	;# 
  1662  041B                     	;# 
  1663  041C                     	;# 
  1664  041D                     	;# 
  1665  041E                     	;# 
  1666  041F                     	;# 
  1667  0498                     	;# 
  1668  0498                     	;# 
  1669  0499                     	;# 
  1670  049A                     	;# 
  1671  049B                     	;# 
  1672  049B                     	;# 
  1673  049C                     	;# 
  1674  049D                     	;# 
  1675  049E                     	;# 
  1676  049F                     	;# 
  1677  0617                     	;# 
  1678  0618                     	;# 
  1679  0619                     	;# 
  1680  0619                     	;# 
  1681  061A                     	;# 
  1682  061B                     	;# 
  1683  061C                     	;# 
  1684  061C                     	;# 
  1685  061F                     	;# 
  1686  0691                     	;# 
  1687  0692                     	;# 
  1688  0693                     	;# 
  1689  0694                     	;# 
  1690  0695                     	;# 
  1691  0696                     	;# 
  1692  0697                     	;# 
  1693  0698                     	;# 
  1694  0699                     	;# 
  1695  0711                     	;# 
  1696  0712                     	;# 
  1697  0713                     	;# 
  1698  0714                     	;# 
  1699  0715                     	;# 
  1700  0716                     	;# 
  1701  0717                     	;# 
  1702  0718                     	;# 
  1703  0719                     	;# 
  1704  0891                     	;# 
  1705  0891                     	;# 
  1706  0891                     	;# 
  1707  0891                     	;# 
  1708  0891                     	;# 
  1709  0891                     	;# 
  1710  0892                     	;# 
  1711  0892                     	;# 
  1712  0892                     	;# 
  1713  0893                     	;# 
  1714  0893                     	;# 
  1715  0893                     	;# 
  1716  0893                     	;# 
  1717  0893                     	;# 
  1718  0893                     	;# 
  1719  0894                     	;# 
  1720  0894                     	;# 
  1721  0894                     	;# 
  1722  0895                     	;# 
  1723  0895                     	;# 
  1724  0895                     	;# 
  1725  0896                     	;# 
  1726  0896                     	;# 
  1727  0896                     	;# 
  1728  089B                     	;# 
  1729  0911                     	;# 
  1730  0912                     	;# 
  1731  0913                     	;# 
  1732  0914                     	;# 
  1733  0915                     	;# 
  1734  0916                     	;# 
  1735  0918                     	;# 
  1736  0919                     	;# 
  1737  091A                     	;# 
  1738  091B                     	;# 
  1739  091C                     	;# 
  1740  091D                     	;# 
  1741  091E                     	;# 
  1742  091F                     	;# 
  1743  0E0F                     	;# 
  1744  0E10                     	;# 
  1745  0E11                     	;# 
  1746  0E12                     	;# 
  1747  0E13                     	;# 
  1748  0E14                     	;# 
  1749  0E15                     	;# 
  1750  0E16                     	;# 
  1751  0E17                     	;# 
  1752  0E18                     	;# 
  1753  0E19                     	;# 
  1754  0E1A                     	;# 
  1755  0E1B                     	;# 
  1756  0E1C                     	;# 
  1757  0E1D                     	;# 
  1758  0E1E                     	;# 
  1759  0E1F                     	;# 
  1760  0E20                     	;# 
  1761  0E21                     	;# 
  1762  0E22                     	;# 
  1763  0E24                     	;# 
  1764  0E25                     	;# 
  1765  0E28                     	;# 
  1766  0E29                     	;# 
  1767  0E2A                     	;# 
  1768  0E2B                     	;# 
  1769  0E2C                     	;# 
  1770  0E2D                     	;# 
  1771  0E2E                     	;# 
  1772  0E2F                     	;# 
  1773  0E90                     	;# 
  1774  0E91                     	;# 
  1775  0E92                     	;# 
  1776  0E94                     	;# 
  1777  0E95                     	;# 
  1778  0E9C                     	;# 
  1779  0E9D                     	;# 
  1780  0E9E                     	;# 
  1781  0E9F                     	;# 
  1782  0EA0                     	;# 
  1783  0EA1                     	;# 
  1784  0EA2                     	;# 
  1785  0EA3                     	;# 
  1786  0EA4                     	;# 
  1787  0EA5                     	;# 
  1788  0EA6                     	;# 
  1789  0EA7                     	;# 
  1790  0F0F                     	;# 
  1791  0F10                     	;# 
  1792  0F11                     	;# 
  1793  0F12                     	;# 
  1794  0F13                     	;# 
  1795  0F14                     	;# 
  1796  0F15                     	;# 
  1797  0F16                     	;# 
  1798  0F17                     	;# 
  1799  0F18                     	;# 
  1800  0F19                     	;# 
  1801  0F1A                     	;# 
  1802  0F1B                     	;# 
  1803  0F1C                     	;# 
  1804  0F1D                     	;# 
  1805  0F1E                     	;# 
  1806  0F1F                     	;# 
  1807  0F20                     	;# 
  1808  0F21                     	;# 
  1809  0F22                     	;# 
  1810  0F23                     	;# 
  1811  0F24                     	;# 
  1812  0F25                     	;# 
  1813  0F26                     	;# 
  1814  0F27                     	;# 
  1815  0F28                     	;# 
  1816  0F29                     	;# 
  1817  0F2A                     	;# 
  1818  0F2B                     	;# 
  1819  0F2C                     	;# 
  1820  0F2D                     	;# 
  1821  0F2E                     	;# 
  1822  0F2F                     	;# 
  1823  0F30                     	;# 
  1824  0F31                     	;# 
  1825  0F32                     	;# 
  1826  0F33                     	;# 
  1827  0F34                     	;# 
  1828  0F35                     	;# 
  1829  0F36                     	;# 
  1830  0F37                     	;# 
  1831  0FE4                     	;# 
  1832  0FE5                     	;# 
  1833  0FE6                     	;# 
  1834  0FE7                     	;# 
  1835  0FE8                     	;# 
  1836  0FE9                     	;# 
  1837  0FEA                     	;# 
  1838  0FEB                     	;# 
  1839  0FED                     	;# 
  1840  0FEE                     	;# 
  1841  0FEF                     	;# 
  1842  0000                     	;# 
  1843  0001                     	;# 
  1844  0002                     	;# 
  1845  0003                     	;# 
  1846  0004                     	;# 
  1847  0005                     	;# 
  1848  0006                     	;# 
  1849  0007                     	;# 
  1850  0008                     	;# 
  1851  0009                     	;# 
  1852  000A                     	;# 
  1853  000B                     	;# 
  1854  000C                     	;# 
  1855  000D                     	;# 
  1856  000E                     	;# 
  1857  0010                     	;# 
  1858  0011                     	;# 
  1859  0012                     	;# 
  1860  0013                     	;# 
  1861  0014                     	;# 
  1862  0015                     	;# 
  1863  0015                     	;# 
  1864  0016                     	;# 
  1865  0016                     	;# 
  1866  0017                     	;# 
  1867  0018                     	;# 
  1868  0019                     	;# 
  1869  0019                     	;# 
  1870  001A                     	;# 
  1871  001B                     	;# 
  1872  001C                     	;# 
  1873  001D                     	;# 
  1874  001E                     	;# 
  1875  001F                     	;# 
  1876  008C                     	;# 
  1877  008D                     	;# 
  1878  008E                     	;# 
  1879  0090                     	;# 
  1880  0091                     	;# 
  1881  0092                     	;# 
  1882  0093                     	;# 
  1883  0094                     	;# 
  1884  0097                     	;# 
  1885  009B                     	;# 
  1886  009B                     	;# 
  1887  009C                     	;# 
  1888  009D                     	;# 
  1889  009E                     	;# 
  1890  009F                     	;# 
  1891  010C                     	;# 
  1892  010D                     	;# 
  1893  010E                     	;# 
  1894  0111                     	;# 
  1895  0112                     	;# 
  1896  0113                     	;# 
  1897  0114                     	;# 
  1898  0115                     	;# 
  1899  0116                     	;# 
  1900  0117                     	;# 
  1901  0118                     	;# 
  1902  0119                     	;# 
  1903  018C                     	;# 
  1904  018D                     	;# 
  1905  018E                     	;# 
  1906  0197                     	;# 
  1907  0199                     	;# 
  1908  0199                     	;# 
  1909  0199                     	;# 
  1910  019A                     	;# 
  1911  019A                     	;# 
  1912  019A                     	;# 
  1913  019B                     	;# 
  1914  019B                     	;# 
  1915  019B                     	;# 
  1916  019B                     	;# 
  1917  019B                     	;# 
  1918  019C                     	;# 
  1919  019C                     	;# 
  1920  019C                     	;# 
  1921  019D                     	;# 
  1922  019D                     	;# 
  1923  019D                     	;# 
  1924  019E                     	;# 
  1925  019E                     	;# 
  1926  019E                     	;# 
  1927  019F                     	;# 
  1928  019F                     	;# 
  1929  019F                     	;# 
  1930  019F                     	;# 
  1931  019F                     	;# 
  1932  020C                     	;# 
  1933  020D                     	;# 
  1934  020E                     	;# 
  1935  0211                     	;# 
  1936  0211                     	;# 
  1937  0212                     	;# 
  1938  0212                     	;# 
  1939  0213                     	;# 
  1940  0213                     	;# 
  1941  0214                     	;# 
  1942  0214                     	;# 
  1943  0215                     	;# 
  1944  0215                     	;# 
  1945  0215                     	;# 
  1946  0215                     	;# 
  1947  0216                     	;# 
  1948  0216                     	;# 
  1949  0217                     	;# 
  1950  0217                     	;# 
  1951  0219                     	;# 
  1952  021A                     	;# 
  1953  021B                     	;# 
  1954  021C                     	;# 
  1955  021D                     	;# 
  1956  021D                     	;# 
  1957  021E                     	;# 
  1958  021F                     	;# 
  1959  028C                     	;# 
  1960  028D                     	;# 
  1961  028E                     	;# 
  1962  0291                     	;# 
  1963  0291                     	;# 
  1964  0292                     	;# 
  1965  0293                     	;# 
  1966  0294                     	;# 
  1967  0295                     	;# 
  1968  0295                     	;# 
  1969  0296                     	;# 
  1970  0297                     	;# 
  1971  0298                     	;# 
  1972  029F                     	;# 
  1973  030C                     	;# 
  1974  030D                     	;# 
  1975  030E                     	;# 
  1976  0311                     	;# 
  1977  0311                     	;# 
  1978  0312                     	;# 
  1979  0313                     	;# 
  1980  0314                     	;# 
  1981  0315                     	;# 
  1982  0315                     	;# 
  1983  0316                     	;# 
  1984  0317                     	;# 
  1985  0318                     	;# 
  1986  038C                     	;# 
  1987  038D                     	;# 
  1988  038E                     	;# 
  1989  0391                     	;# 
  1990  0392                     	;# 
  1991  0393                     	;# 
  1992  0394                     	;# 
  1993  0395                     	;# 
  1994  0396                     	;# 
  1995  0397                     	;# 
  1996  0398                     	;# 
  1997  0399                     	;# 
  1998  039A                     	;# 
  1999  039C                     	;# 
  2000  039D                     	;# 
  2001  039E                     	;# 
  2002  039F                     	;# 
  2003  0411                     	;# 
  2004  0411                     	;# 
  2005  0412                     	;# 
  2006  0413                     	;# 
  2007  0414                     	;# 
  2008  0415                     	;# 
  2009  0416                     	;# 
  2010  0417                     	;# 
  2011  0418                     	;# 
  2012  0418                     	;# 
  2013  0419                     	;# 
  2014  041A                     	;# 
  2015  041B                     	;# 
  2016  041C                     	;# 
  2017  041D                     	;# 
  2018  041E                     	;# 
  2019  041F                     	;# 
  2020  0498                     	;# 
  2021  0498                     	;# 
  2022  0499                     	;# 
  2023  049A                     	;# 
  2024  049B                     	;# 
  2025  049B                     	;# 
  2026  049C                     	;# 
  2027  049D                     	;# 
  2028  049E                     	;# 
  2029  049F                     	;# 
  2030  0617                     	;# 
  2031  0618                     	;# 
  2032  0619                     	;# 
  2033  0619                     	;# 
  2034  061A                     	;# 
  2035  061B                     	;# 
  2036  061C                     	;# 
  2037  061C                     	;# 
  2038  061F                     	;# 
  2039  0691                     	;# 
  2040  0692                     	;# 
  2041  0693                     	;# 
  2042  0694                     	;# 
  2043  0695                     	;# 
  2044  0696                     	;# 
  2045  0697                     	;# 
  2046  0698                     	;# 
  2047  0699                     	;# 
  2048  0711                     	;# 
  2049  0712                     	;# 
  2050  0713                     	;# 
  2051  0714                     	;# 
  2052  0715                     	;# 
  2053  0716                     	;# 
  2054  0717                     	;# 
  2055  0718                     	;# 
  2056  0719                     	;# 
  2057  0891                     	;# 
  2058  0891                     	;# 
  2059  0891                     	;# 
  2060  0891                     	;# 
  2061  0891                     	;# 
  2062  0891                     	;# 
  2063  0892                     	;# 
  2064  0892                     	;# 
  2065  0892                     	;# 
  2066  0893                     	;# 
  2067  0893                     	;# 
  2068  0893                     	;# 
  2069  0893                     	;# 
  2070  0893                     	;# 
  2071  0893                     	;# 
  2072  0894                     	;# 
  2073  0894                     	;# 
  2074  0894                     	;# 
  2075  0895                     	;# 
  2076  0895                     	;# 
  2077  0895                     	;# 
  2078  0896                     	;# 
  2079  0896                     	;# 
  2080  0896                     	;# 
  2081  089B                     	;# 
  2082  0911                     	;# 
  2083  0912                     	;# 
  2084  0913                     	;# 
  2085  0914                     	;# 
  2086  0915                     	;# 
  2087  0916                     	;# 
  2088  0918                     	;# 
  2089  0919                     	;# 
  2090  091A                     	;# 
  2091  091B                     	;# 
  2092  091C                     	;# 
  2093  091D                     	;# 
  2094  091E                     	;# 
  2095  091F                     	;# 
  2096  0E0F                     	;# 
  2097  0E10                     	;# 
  2098  0E11                     	;# 
  2099  0E12                     	;# 
  2100  0E13                     	;# 
  2101  0E14                     	;# 
  2102  0E15                     	;# 
  2103  0E16                     	;# 
  2104  0E17                     	;# 
  2105  0E18                     	;# 
  2106  0E19                     	;# 
  2107  0E1A                     	;# 
  2108  0E1B                     	;# 
  2109  0E1C                     	;# 
  2110  0E1D                     	;# 
  2111  0E1E                     	;# 
  2112  0E1F                     	;# 
  2113  0E20                     	;# 
  2114  0E21                     	;# 
  2115  0E22                     	;# 
  2116  0E24                     	;# 
  2117  0E25                     	;# 
  2118  0E28                     	;# 
  2119  0E29                     	;# 
  2120  0E2A                     	;# 
  2121  0E2B                     	;# 
  2122  0E2C                     	;# 
  2123  0E2D                     	;# 
  2124  0E2E                     	;# 
  2125  0E2F                     	;# 
  2126  0E90                     	;# 
  2127  0E91                     	;# 
  2128  0E92                     	;# 
  2129  0E94                     	;# 
  2130  0E95                     	;# 
  2131  0E9C                     	;# 
  2132  0E9D                     	;# 
  2133  0E9E                     	;# 
  2134  0E9F                     	;# 
  2135  0EA0                     	;# 
  2136  0EA1                     	;# 
  2137  0EA2                     	;# 
  2138  0EA3                     	;# 
  2139  0EA4                     	;# 
  2140  0EA5                     	;# 
  2141  0EA6                     	;# 
  2142  0EA7                     	;# 
  2143  0F0F                     	;# 
  2144  0F10                     	;# 
  2145  0F11                     	;# 
  2146  0F12                     	;# 
  2147  0F13                     	;# 
  2148  0F14                     	;# 
  2149  0F15                     	;# 
  2150  0F16                     	;# 
  2151  0F17                     	;# 
  2152  0F18                     	;# 
  2153  0F19                     	;# 
  2154  0F1A                     	;# 
  2155  0F1B                     	;# 
  2156  0F1C                     	;# 
  2157  0F1D                     	;# 
  2158  0F1E                     	;# 
  2159  0F1F                     	;# 
  2160  0F20                     	;# 
  2161  0F21                     	;# 
  2162  0F22                     	;# 
  2163  0F23                     	;# 
  2164  0F24                     	;# 
  2165  0F25                     	;# 
  2166  0F26                     	;# 
  2167  0F27                     	;# 
  2168  0F28                     	;# 
  2169  0F29                     	;# 
  2170  0F2A                     	;# 
  2171  0F2B                     	;# 
  2172  0F2C                     	;# 
  2173  0F2D                     	;# 
  2174  0F2E                     	;# 
  2175  0F2F                     	;# 
  2176  0F30                     	;# 
  2177  0F31                     	;# 
  2178  0F32                     	;# 
  2179  0F33                     	;# 
  2180  0F34                     	;# 
  2181  0F35                     	;# 
  2182  0F36                     	;# 
  2183  0F37                     	;# 
  2184  0FE4                     	;# 
  2185  0FE5                     	;# 
  2186  0FE6                     	;# 
  2187  0FE7                     	;# 
  2188  0FE8                     	;# 
  2189  0FE9                     	;# 
  2190  0FEA                     	;# 
  2191  0FEB                     	;# 
  2192  0FED                     	;# 
  2193  0FEE                     	;# 
  2194  0FEF                     	;# 
  2195  0000                     	;# 
  2196  0001                     	;# 
  2197  0002                     	;# 
  2198  0003                     	;# 
  2199  0004                     	;# 
  2200  0005                     	;# 
  2201  0006                     	;# 
  2202  0007                     	;# 
  2203  0008                     	;# 
  2204  0009                     	;# 
  2205  000A                     	;# 
  2206  000B                     	;# 
  2207  000C                     	;# 
  2208  000D                     	;# 
  2209  000E                     	;# 
  2210  0010                     	;# 
  2211  0011                     	;# 
  2212  0012                     	;# 
  2213  0013                     	;# 
  2214  0014                     	;# 
  2215  0015                     	;# 
  2216  0015                     	;# 
  2217  0016                     	;# 
  2218  0016                     	;# 
  2219  0017                     	;# 
  2220  0018                     	;# 
  2221  0019                     	;# 
  2222  0019                     	;# 
  2223  001A                     	;# 
  2224  001B                     	;# 
  2225  001C                     	;# 
  2226  001D                     	;# 
  2227  001E                     	;# 
  2228  001F                     	;# 
  2229  008C                     	;# 
  2230  008D                     	;# 
  2231  008E                     	;# 
  2232  0090                     	;# 
  2233  0091                     	;# 
  2234  0092                     	;# 
  2235  0093                     	;# 
  2236  0094                     	;# 
  2237  0097                     	;# 
  2238  009B                     	;# 
  2239  009B                     	;# 
  2240  009C                     	;# 
  2241  009D                     	;# 
  2242  009E                     	;# 
  2243  009F                     	;# 
  2244  010C                     	;# 
  2245  010D                     	;# 
  2246  010E                     	;# 
  2247  0111                     	;# 
  2248  0112                     	;# 
  2249  0113                     	;# 
  2250  0114                     	;# 
  2251  0115                     	;# 
  2252  0116                     	;# 
  2253  0117                     	;# 
  2254  0118                     	;# 
  2255  0119                     	;# 
  2256  018C                     	;# 
  2257  018D                     	;# 
  2258  018E                     	;# 
  2259  0197                     	;# 
  2260  0199                     	;# 
  2261  0199                     	;# 
  2262  0199                     	;# 
  2263  019A                     	;# 
  2264  019A                     	;# 
  2265  019A                     	;# 
  2266  019B                     	;# 
  2267  019B                     	;# 
  2268  019B                     	;# 
  2269  019B                     	;# 
  2270  019B                     	;# 
  2271  019C                     	;# 
  2272  019C                     	;# 
  2273  019C                     	;# 
  2274  019D                     	;# 
  2275  019D                     	;# 
  2276  019D                     	;# 
  2277  019E                     	;# 
  2278  019E                     	;# 
  2279  019E                     	;# 
  2280  019F                     	;# 
  2281  019F                     	;# 
  2282  019F                     	;# 
  2283  019F                     	;# 
  2284  019F                     	;# 
  2285  020C                     	;# 
  2286  020D                     	;# 
  2287  020E                     	;# 
  2288  0211                     	;# 
  2289  0211                     	;# 
  2290  0212                     	;# 
  2291  0212                     	;# 
  2292  0213                     	;# 
  2293  0213                     	;# 
  2294  0214                     	;# 
  2295  0214                     	;# 
  2296  0215                     	;# 
  2297  0215                     	;# 
  2298  0215                     	;# 
  2299  0215                     	;# 
  2300  0216                     	;# 
  2301  0216                     	;# 
  2302  0217                     	;# 
  2303  0217                     	;# 
  2304  0219                     	;# 
  2305  021A                     	;# 
  2306  021B                     	;# 
  2307  021C                     	;# 
  2308  021D                     	;# 
  2309  021D                     	;# 
  2310  021E                     	;# 
  2311  021F                     	;# 
  2312  028C                     	;# 
  2313  028D                     	;# 
  2314  028E                     	;# 
  2315  0291                     	;# 
  2316  0291                     	;# 
  2317  0292                     	;# 
  2318  0293                     	;# 
  2319  0294                     	;# 
  2320  0295                     	;# 
  2321  0295                     	;# 
  2322  0296                     	;# 
  2323  0297                     	;# 
  2324  0298                     	;# 
  2325  029F                     	;# 
  2326  030C                     	;# 
  2327  030D                     	;# 
  2328  030E                     	;# 
  2329  0311                     	;# 
  2330  0311                     	;# 
  2331  0312                     	;# 
  2332  0313                     	;# 
  2333  0314                     	;# 
  2334  0315                     	;# 
  2335  0315                     	;# 
  2336  0316                     	;# 
  2337  0317                     	;# 
  2338  0318                     	;# 
  2339  038C                     	;# 
  2340  038D                     	;# 
  2341  038E                     	;# 
  2342  0391                     	;# 
  2343  0392                     	;# 
  2344  0393                     	;# 
  2345  0394                     	;# 
  2346  0395                     	;# 
  2347  0396                     	;# 
  2348  0397                     	;# 
  2349  0398                     	;# 
  2350  0399                     	;# 
  2351  039A                     	;# 
  2352  039C                     	;# 
  2353  039D                     	;# 
  2354  039E                     	;# 
  2355  039F                     	;# 
  2356  0411                     	;# 
  2357  0411                     	;# 
  2358  0412                     	;# 
  2359  0413                     	;# 
  2360  0414                     	;# 
  2361  0415                     	;# 
  2362  0416                     	;# 
  2363  0417                     	;# 
  2364  0418                     	;# 
  2365  0418                     	;# 
  2366  0419                     	;# 
  2367  041A                     	;# 
  2368  041B                     	;# 
  2369  041C                     	;# 
  2370  041D                     	;# 
  2371  041E                     	;# 
  2372  041F                     	;# 
  2373  0498                     	;# 
  2374  0498                     	;# 
  2375  0499                     	;# 
  2376  049A                     	;# 
  2377  049B                     	;# 
  2378  049B                     	;# 
  2379  049C                     	;# 
  2380  049D                     	;# 
  2381  049E                     	;# 
  2382  049F                     	;# 
  2383  0617                     	;# 
  2384  0618                     	;# 
  2385  0619                     	;# 
  2386  0619                     	;# 
  2387  061A                     	;# 
  2388  061B                     	;# 
  2389  061C                     	;# 
  2390  061C                     	;# 
  2391  061F                     	;# 
  2392  0691                     	;# 
  2393  0692                     	;# 
  2394  0693                     	;# 
  2395  0694                     	;# 
  2396  0695                     	;# 
  2397  0696                     	;# 
  2398  0697                     	;# 
  2399  0698                     	;# 
  2400  0699                     	;# 
  2401  0711                     	;# 
  2402  0712                     	;# 
  2403  0713                     	;# 
  2404  0714                     	;# 
  2405  0715                     	;# 
  2406  0716                     	;# 
  2407  0717                     	;# 
  2408  0718                     	;# 
  2409  0719                     	;# 
  2410  0891                     	;# 
  2411  0891                     	;# 
  2412  0891                     	;# 
  2413  0891                     	;# 
  2414  0891                     	;# 
  2415  0891                     	;# 
  2416  0892                     	;# 
  2417  0892                     	;# 
  2418  0892                     	;# 
  2419  0893                     	;# 
  2420  0893                     	;# 
  2421  0893                     	;# 
  2422  0893                     	;# 
  2423  0893                     	;# 
  2424  0893                     	;# 
  2425  0894                     	;# 
  2426  0894                     	;# 
  2427  0894                     	;# 
  2428  0895                     	;# 
  2429  0895                     	;# 
  2430  0895                     	;# 
  2431  0896                     	;# 
  2432  0896                     	;# 
  2433  0896                     	;# 
  2434  089B                     	;# 
  2435  0911                     	;# 
  2436  0912                     	;# 
  2437  0913                     	;# 
  2438  0914                     	;# 
  2439  0915                     	;# 
  2440  0916                     	;# 
  2441  0918                     	;# 
  2442  0919                     	;# 
  2443  091A                     	;# 
  2444  091B                     	;# 
  2445  091C                     	;# 
  2446  091D                     	;# 
  2447  091E                     	;# 
  2448  091F                     	;# 
  2449  0E0F                     	;# 
  2450  0E10                     	;# 
  2451  0E11                     	;# 
  2452  0E12                     	;# 
  2453  0E13                     	;# 
  2454  0E14                     	;# 
  2455  0E15                     	;# 
  2456  0E16                     	;# 
  2457  0E17                     	;# 
  2458  0E18                     	;# 
  2459  0E19                     	;# 
  2460  0E1A                     	;# 
  2461  0E1B                     	;# 
  2462  0E1C                     	;# 
  2463  0E1D                     	;# 
  2464  0E1E                     	;# 
  2465  0E1F                     	;# 
  2466  0E20                     	;# 
  2467  0E21                     	;# 
  2468  0E22                     	;# 
  2469  0E24                     	;# 
  2470  0E25                     	;# 
  2471  0E28                     	;# 
  2472  0E29                     	;# 
  2473  0E2A                     	;# 
  2474  0E2B                     	;# 
  2475  0E2C                     	;# 
  2476  0E2D                     	;# 
  2477  0E2E                     	;# 
  2478  0E2F                     	;# 
  2479  0E90                     	;# 
  2480  0E91                     	;# 
  2481  0E92                     	;# 
  2482  0E94                     	;# 
  2483  0E95                     	;# 
  2484  0E9C                     	;# 
  2485  0E9D                     	;# 
  2486  0E9E                     	;# 
  2487  0E9F                     	;# 
  2488  0EA0                     	;# 
  2489  0EA1                     	;# 
  2490  0EA2                     	;# 
  2491  0EA3                     	;# 
  2492  0EA4                     	;# 
  2493  0EA5                     	;# 
  2494  0EA6                     	;# 
  2495  0EA7                     	;# 
  2496  0F0F                     	;# 
  2497  0F10                     	;# 
  2498  0F11                     	;# 
  2499  0F12                     	;# 
  2500  0F13                     	;# 
  2501  0F14                     	;# 
  2502  0F15                     	;# 
  2503  0F16                     	;# 
  2504  0F17                     	;# 
  2505  0F18                     	;# 
  2506  0F19                     	;# 
  2507  0F1A                     	;# 
  2508  0F1B                     	;# 
  2509  0F1C                     	;# 
  2510  0F1D                     	;# 
  2511  0F1E                     	;# 
  2512  0F1F                     	;# 
  2513  0F20                     	;# 
  2514  0F21                     	;# 
  2515  0F22                     	;# 
  2516  0F23                     	;# 
  2517  0F24                     	;# 
  2518  0F25                     	;# 
  2519  0F26                     	;# 
  2520  0F27                     	;# 
  2521  0F28                     	;# 
  2522  0F29                     	;# 
  2523  0F2A                     	;# 
  2524  0F2B                     	;# 
  2525  0F2C                     	;# 
  2526  0F2D                     	;# 
  2527  0F2E                     	;# 
  2528  0F2F                     	;# 
  2529  0F30                     	;# 
  2530  0F31                     	;# 
  2531  0F32                     	;# 
  2532  0F33                     	;# 
  2533  0F34                     	;# 
  2534  0F35                     	;# 
  2535  0F36                     	;# 
  2536  0F37                     	;# 
  2537  0FE4                     	;# 
  2538  0FE5                     	;# 
  2539  0FE6                     	;# 
  2540  0FE7                     	;# 
  2541  0FE8                     	;# 
  2542  0FE9                     	;# 
  2543  0FEA                     	;# 
  2544  0FEB                     	;# 
  2545  0FED                     	;# 
  2546  0FEE                     	;# 
  2547  0FEF                     	;# 
  2548  0000                     	;# 
  2549  0001                     	;# 
  2550  0002                     	;# 
  2551  0003                     	;# 
  2552  0004                     	;# 
  2553  0005                     	;# 
  2554  0006                     	;# 
  2555  0007                     	;# 
  2556  0008                     	;# 
  2557  0009                     	;# 
  2558  000A                     	;# 
  2559  000B                     	;# 
  2560  000C                     	;# 
  2561  000D                     	;# 
  2562  000E                     	;# 
  2563  0010                     	;# 
  2564  0011                     	;# 
  2565  0012                     	;# 
  2566  0013                     	;# 
  2567  0014                     	;# 
  2568  0015                     	;# 
  2569  0015                     	;# 
  2570  0016                     	;# 
  2571  0016                     	;# 
  2572  0017                     	;# 
  2573  0018                     	;# 
  2574  0019                     	;# 
  2575  0019                     	;# 
  2576  001A                     	;# 
  2577  001B                     	;# 
  2578  001C                     	;# 
  2579  001D                     	;# 
  2580  001E                     	;# 
  2581  001F                     	;# 
  2582  008C                     	;# 
  2583  008D                     	;# 
  2584  008E                     	;# 
  2585  0090                     	;# 
  2586  0091                     	;# 
  2587  0092                     	;# 
  2588  0093                     	;# 
  2589  0094                     	;# 
  2590  0097                     	;# 
  2591  009B                     	;# 
  2592  009B                     	;# 
  2593  009C                     	;# 
  2594  009D                     	;# 
  2595  009E                     	;# 
  2596  009F                     	;# 
  2597  010C                     	;# 
  2598  010D                     	;# 
  2599  010E                     	;# 
  2600  0111                     	;# 
  2601  0112                     	;# 
  2602  0113                     	;# 
  2603  0114                     	;# 
  2604  0115                     	;# 
  2605  0116                     	;# 
  2606  0117                     	;# 
  2607  0118                     	;# 
  2608  0119                     	;# 
  2609  018C                     	;# 
  2610  018D                     	;# 
  2611  018E                     	;# 
  2612  0197                     	;# 
  2613  0199                     	;# 
  2614  0199                     	;# 
  2615  0199                     	;# 
  2616  019A                     	;# 
  2617  019A                     	;# 
  2618  019A                     	;# 
  2619  019B                     	;# 
  2620  019B                     	;# 
  2621  019B                     	;# 
  2622  019B                     	;# 
  2623  019B                     	;# 
  2624  019C                     	;# 
  2625  019C                     	;# 
  2626  019C                     	;# 
  2627  019D                     	;# 
  2628  019D                     	;# 
  2629  019D                     	;# 
  2630  019E                     	;# 
  2631  019E                     	;# 
  2632  019E                     	;# 
  2633  019F                     	;# 
  2634  019F                     	;# 
  2635  019F                     	;# 
  2636  019F                     	;# 
  2637  019F                     	;# 
  2638  020C                     	;# 
  2639  020D                     	;# 
  2640  020E                     	;# 
  2641  0211                     	;# 
  2642  0211                     	;# 
  2643  0212                     	;# 
  2644  0212                     	;# 
  2645  0213                     	;# 
  2646  0213                     	;# 
  2647  0214                     	;# 
  2648  0214                     	;# 
  2649  0215                     	;# 
  2650  0215                     	;# 
  2651  0215                     	;# 
  2652  0215                     	;# 
  2653  0216                     	;# 
  2654  0216                     	;# 
  2655  0217                     	;# 
  2656  0217                     	;# 
  2657  0219                     	;# 
  2658  021A                     	;# 
  2659  021B                     	;# 
  2660  021C                     	;# 
  2661  021D                     	;# 
  2662  021D                     	;# 
  2663  021E                     	;# 
  2664  021F                     	;# 
  2665  028C                     	;# 
  2666  028D                     	;# 
  2667  028E                     	;# 
  2668  0291                     	;# 
  2669  0291                     	;# 
  2670  0292                     	;# 
  2671  0293                     	;# 
  2672  0294                     	;# 
  2673  0295                     	;# 
  2674  0295                     	;# 
  2675  0296                     	;# 
  2676  0297                     	;# 
  2677  0298                     	;# 
  2678  029F                     	;# 
  2679  030C                     	;# 
  2680  030D                     	;# 
  2681  030E                     	;# 
  2682  0311                     	;# 
  2683  0311                     	;# 
  2684  0312                     	;# 
  2685  0313                     	;# 
  2686  0314                     	;# 
  2687  0315                     	;# 
  2688  0315                     	;# 
  2689  0316                     	;# 
  2690  0317                     	;# 
  2691  0318                     	;# 
  2692  038C                     	;# 
  2693  038D                     	;# 
  2694  038E                     	;# 
  2695  0391                     	;# 
  2696  0392                     	;# 
  2697  0393                     	;# 
  2698  0394                     	;# 
  2699  0395                     	;# 
  2700  0396                     	;# 
  2701  0397                     	;# 
  2702  0398                     	;# 
  2703  0399                     	;# 
  2704  039A                     	;# 
  2705  039C                     	;# 
  2706  039D                     	;# 
  2707  039E                     	;# 
  2708  039F                     	;# 
  2709  0411                     	;# 
  2710  0411                     	;# 
  2711  0412                     	;# 
  2712  0413                     	;# 
  2713  0414                     	;# 
  2714  0415                     	;# 
  2715  0416                     	;# 
  2716  0417                     	;# 
  2717  0418                     	;# 
  2718  0418                     	;# 
  2719  0419                     	;# 
  2720  041A                     	;# 
  2721  041B                     	;# 
  2722  041C                     	;# 
  2723  041D                     	;# 
  2724  041E                     	;# 
  2725  041F                     	;# 
  2726  0498                     	;# 
  2727  0498                     	;# 
  2728  0499                     	;# 
  2729  049A                     	;# 
  2730  049B                     	;# 
  2731  049B                     	;# 
  2732  049C                     	;# 
  2733  049D                     	;# 
  2734  049E                     	;# 
  2735  049F                     	;# 
  2736  0617                     	;# 
  2737  0618                     	;# 
  2738  0619                     	;# 
  2739  0619                     	;# 
  2740  061A                     	;# 
  2741  061B                     	;# 
  2742  061C                     	;# 
  2743  061C                     	;# 
  2744  061F                     	;# 
  2745  0691                     	;# 
  2746  0692                     	;# 
  2747  0693                     	;# 
  2748  0694                     	;# 
  2749  0695                     	;# 
  2750  0696                     	;# 
  2751  0697                     	;# 
  2752  0698                     	;# 
  2753  0699                     	;# 
  2754  0711                     	;# 
  2755  0712                     	;# 
  2756  0713                     	;# 
  2757  0714                     	;# 
  2758  0715                     	;# 
  2759  0716                     	;# 
  2760  0717                     	;# 
  2761  0718                     	;# 
  2762  0719                     	;# 
  2763  0891                     	;# 
  2764  0891                     	;# 
  2765  0891                     	;# 
  2766  0891                     	;# 
  2767  0891                     	;# 
  2768  0891                     	;# 
  2769  0892                     	;# 
  2770  0892                     	;# 
  2771  0892                     	;# 
  2772  0893                     	;# 
  2773  0893                     	;# 
  2774  0893                     	;# 
  2775  0893                     	;# 
  2776  0893                     	;# 
  2777  0893                     	;# 
  2778  0894                     	;# 
  2779  0894                     	;# 
  2780  0894                     	;# 
  2781  0895                     	;# 
  2782  0895                     	;# 
  2783  0895                     	;# 
  2784  0896                     	;# 
  2785  0896                     	;# 
  2786  0896                     	;# 
  2787  089B                     	;# 
  2788  0911                     	;# 
  2789  0912                     	;# 
  2790  0913                     	;# 
  2791  0914                     	;# 
  2792  0915                     	;# 
  2793  0916                     	;# 
  2794  0918                     	;# 
  2795  0919                     	;# 
  2796  091A                     	;# 
  2797  091B                     	;# 
  2798  091C                     	;# 
  2799  091D                     	;# 
  2800  091E                     	;# 
  2801  091F                     	;# 
  2802  0E0F                     	;# 
  2803  0E10                     	;# 
  2804  0E11                     	;# 
  2805  0E12                     	;# 
  2806  0E13                     	;# 
  2807  0E14                     	;# 
  2808  0E15                     	;# 
  2809  0E16                     	;# 
  2810  0E17                     	;# 
  2811  0E18                     	;# 
  2812  0E19                     	;# 
  2813  0E1A                     	;# 
  2814  0E1B                     	;# 
  2815  0E1C                     	;# 
  2816  0E1D                     	;# 
  2817  0E1E                     	;# 
  2818  0E1F                     	;# 
  2819  0E20                     	;# 
  2820  0E21                     	;# 
  2821  0E22                     	;# 
  2822  0E24                     	;# 
  2823  0E25                     	;# 
  2824  0E28                     	;# 
  2825  0E29                     	;# 
  2826  0E2A                     	;# 
  2827  0E2B                     	;# 
  2828  0E2C                     	;# 
  2829  0E2D                     	;# 
  2830  0E2E                     	;# 
  2831  0E2F                     	;# 
  2832  0E90                     	;# 
  2833  0E91                     	;# 
  2834  0E92                     	;# 
  2835  0E94                     	;# 
  2836  0E95                     	;# 
  2837  0E9C                     	;# 
  2838  0E9D                     	;# 
  2839  0E9E                     	;# 
  2840  0E9F                     	;# 
  2841  0EA0                     	;# 
  2842  0EA1                     	;# 
  2843  0EA2                     	;# 
  2844  0EA3                     	;# 
  2845  0EA4                     	;# 
  2846  0EA5                     	;# 
  2847  0EA6                     	;# 
  2848  0EA7                     	;# 
  2849  0F0F                     	;# 
  2850  0F10                     	;# 
  2851  0F11                     	;# 
  2852  0F12                     	;# 
  2853  0F13                     	;# 
  2854  0F14                     	;# 
  2855  0F15                     	;# 
  2856  0F16                     	;# 
  2857  0F17                     	;# 
  2858  0F18                     	;# 
  2859  0F19                     	;# 
  2860  0F1A                     	;# 
  2861  0F1B                     	;# 
  2862  0F1C                     	;# 
  2863  0F1D                     	;# 
  2864  0F1E                     	;# 
  2865  0F1F                     	;# 
  2866  0F20                     	;# 
  2867  0F21                     	;# 
  2868  0F22                     	;# 
  2869  0F23                     	;# 
  2870  0F24                     	;# 
  2871  0F25                     	;# 
  2872  0F26                     	;# 
  2873  0F27                     	;# 
  2874  0F28                     	;# 
  2875  0F29                     	;# 
  2876  0F2A                     	;# 
  2877  0F2B                     	;# 
  2878  0F2C                     	;# 
  2879  0F2D                     	;# 
  2880  0F2E                     	;# 
  2881  0F2F                     	;# 
  2882  0F30                     	;# 
  2883  0F31                     	;# 
  2884  0F32                     	;# 
  2885  0F33                     	;# 
  2886  0F34                     	;# 
  2887  0F35                     	;# 
  2888  0F36                     	;# 
  2889  0F37                     	;# 
  2890  0FE4                     	;# 
  2891  0FE5                     	;# 
  2892  0FE6                     	;# 
  2893  0FE7                     	;# 
  2894  0FE8                     	;# 
  2895  0FE9                     	;# 
  2896  0FEA                     	;# 
  2897  0FEB                     	;# 
  2898  0FED                     	;# 
  2899  0FEE                     	;# 
  2900  0FEF                     	;# 
  2901  0000                     	;# 
  2902  0001                     	;# 
  2903  0002                     	;# 
  2904  0003                     	;# 
  2905  0004                     	;# 
  2906  0005                     	;# 
  2907  0006                     	;# 
  2908  0007                     	;# 
  2909  0008                     	;# 
  2910  0009                     	;# 
  2911  000A                     	;# 
  2912  000B                     	;# 
  2913  000C                     	;# 
  2914  000D                     	;# 
  2915  000E                     	;# 
  2916  0010                     	;# 
  2917  0011                     	;# 
  2918  0012                     	;# 
  2919  0013                     	;# 
  2920  0014                     	;# 
  2921  0015                     	;# 
  2922  0015                     	;# 
  2923  0016                     	;# 
  2924  0016                     	;# 
  2925  0017                     	;# 
  2926  0018                     	;# 
  2927  0019                     	;# 
  2928  0019                     	;# 
  2929  001A                     	;# 
  2930  001B                     	;# 
  2931  001C                     	;# 
  2932  001D                     	;# 
  2933  001E                     	;# 
  2934  001F                     	;# 
  2935  008C                     	;# 
  2936  008D                     	;# 
  2937  008E                     	;# 
  2938  0090                     	;# 
  2939  0091                     	;# 
  2940  0092                     	;# 
  2941  0093                     	;# 
  2942  0094                     	;# 
  2943  0097                     	;# 
  2944  009B                     	;# 
  2945  009B                     	;# 
  2946  009C                     	;# 
  2947  009D                     	;# 
  2948  009E                     	;# 
  2949  009F                     	;# 
  2950  010C                     	;# 
  2951  010D                     	;# 
  2952  010E                     	;# 
  2953  0111                     	;# 
  2954  0112                     	;# 
  2955  0113                     	;# 
  2956  0114                     	;# 
  2957  0115                     	;# 
  2958  0116                     	;# 
  2959  0117                     	;# 
  2960  0118                     	;# 
  2961  0119                     	;# 
  2962  018C                     	;# 
  2963  018D                     	;# 
  2964  018E                     	;# 
  2965  0197                     	;# 
  2966  0199                     	;# 
  2967  0199                     	;# 
  2968  0199                     	;# 
  2969  019A                     	;# 
  2970  019A                     	;# 
  2971  019A                     	;# 
  2972  019B                     	;# 
  2973  019B                     	;# 
  2974  019B                     	;# 
  2975  019B                     	;# 
  2976  019B                     	;# 
  2977  019C                     	;# 
  2978  019C                     	;# 
  2979  019C                     	;# 
  2980  019D                     	;# 
  2981  019D                     	;# 
  2982  019D                     	;# 
  2983  019E                     	;# 
  2984  019E                     	;# 
  2985  019E                     	;# 
  2986  019F                     	;# 
  2987  019F                     	;# 
  2988  019F                     	;# 
  2989  019F                     	;# 
  2990  019F                     	;# 
  2991  020C                     	;# 
  2992  020D                     	;# 
  2993  020E                     	;# 
  2994  0211                     	;# 
  2995  0211                     	;# 
  2996  0212                     	;# 
  2997  0212                     	;# 
  2998  0213                     	;# 
  2999  0213                     	;# 
  3000  0214                     	;# 
  3001  0214                     	;# 
  3002  0215                     	;# 
  3003  0215                     	;# 
  3004  0215                     	;# 
  3005  0215                     	;# 
  3006  0216                     	;# 
  3007  0216                     	;# 
  3008  0217                     	;# 
  3009  0217                     	;# 
  3010  0219                     	;# 
  3011  021A                     	;# 
  3012  021B                     	;# 
  3013  021C                     	;# 
  3014  021D                     	;# 
  3015  021D                     	;# 
  3016  021E                     	;# 
  3017  021F                     	;# 
  3018  028C                     	;# 
  3019  028D                     	;# 
  3020  028E                     	;# 
  3021  0291                     	;# 
  3022  0291                     	;# 
  3023  0292                     	;# 
  3024  0293                     	;# 
  3025  0294                     	;# 
  3026  0295                     	;# 
  3027  0295                     	;# 
  3028  0296                     	;# 
  3029  0297                     	;# 
  3030  0298                     	;# 
  3031  029F                     	;# 
  3032  030C                     	;# 
  3033  030D                     	;# 
  3034  030E                     	;# 
  3035  0311                     	;# 
  3036  0311                     	;# 
  3037  0312                     	;# 
  3038  0313                     	;# 
  3039  0314                     	;# 
  3040  0315                     	;# 
  3041  0315                     	;# 
  3042  0316                     	;# 
  3043  0317                     	;# 
  3044  0318                     	;# 
  3045  038C                     	;# 
  3046  038D                     	;# 
  3047  038E                     	;# 
  3048  0391                     	;# 
  3049  0392                     	;# 
  3050  0393                     	;# 
  3051  0394                     	;# 
  3052  0395                     	;# 
  3053  0396                     	;# 
  3054  0397                     	;# 
  3055  0398                     	;# 
  3056  0399                     	;# 
  3057  039A                     	;# 
  3058  039C                     	;# 
  3059  039D                     	;# 
  3060  039E                     	;# 
  3061  039F                     	;# 
  3062  0411                     	;# 
  3063  0411                     	;# 
  3064  0412                     	;# 
  3065  0413                     	;# 
  3066  0414                     	;# 
  3067  0415                     	;# 
  3068  0416                     	;# 
  3069  0417                     	;# 
  3070  0418                     	;# 
  3071  0418                     	;# 
  3072  0419                     	;# 
  3073  041A                     	;# 
  3074  041B                     	;# 
  3075  041C                     	;# 
  3076  041D                     	;# 
  3077  041E                     	;# 
  3078  041F                     	;# 
  3079  0498                     	;# 
  3080  0498                     	;# 
  3081  0499                     	;# 
  3082  049A                     	;# 
  3083  049B                     	;# 
  3084  049B                     	;# 
  3085  049C                     	;# 
  3086  049D                     	;# 
  3087  049E                     	;# 
  3088  049F                     	;# 
  3089  0617                     	;# 
  3090  0618                     	;# 
  3091  0619                     	;# 
  3092  0619                     	;# 
  3093  061A                     	;# 
  3094  061B                     	;# 
  3095  061C                     	;# 
  3096  061C                     	;# 
  3097  061F                     	;# 
  3098  0691                     	;# 
  3099  0692                     	;# 
  3100  0693                     	;# 
  3101  0694                     	;# 
  3102  0695                     	;# 
  3103  0696                     	;# 
  3104  0697                     	;# 
  3105  0698                     	;# 
  3106  0699                     	;# 
  3107  0711                     	;# 
  3108  0712                     	;# 
  3109  0713                     	;# 
  3110  0714                     	;# 
  3111  0715                     	;# 
  3112  0716                     	;# 
  3113  0717                     	;# 
  3114  0718                     	;# 
  3115  0719                     	;# 
  3116  0891                     	;# 
  3117  0891                     	;# 
  3118  0891                     	;# 
  3119  0891                     	;# 
  3120  0891                     	;# 
  3121  0891                     	;# 
  3122  0892                     	;# 
  3123  0892                     	;# 
  3124  0892                     	;# 
  3125  0893                     	;# 
  3126  0893                     	;# 
  3127  0893                     	;# 
  3128  0893                     	;# 
  3129  0893                     	;# 
  3130  0893                     	;# 
  3131  0894                     	;# 
  3132  0894                     	;# 
  3133  0894                     	;# 
  3134  0895                     	;# 
  3135  0895                     	;# 
  3136  0895                     	;# 
  3137  0896                     	;# 
  3138  0896                     	;# 
  3139  0896                     	;# 
  3140  089B                     	;# 
  3141  0911                     	;# 
  3142  0912                     	;# 
  3143  0913                     	;# 
  3144  0914                     	;# 
  3145  0915                     	;# 
  3146  0916                     	;# 
  3147  0918                     	;# 
  3148  0919                     	;# 
  3149  091A                     	;# 
  3150  091B                     	;# 
  3151  091C                     	;# 
  3152  091D                     	;# 
  3153  091E                     	;# 
  3154  091F                     	;# 
  3155  0E0F                     	;# 
  3156  0E10                     	;# 
  3157  0E11                     	;# 
  3158  0E12                     	;# 
  3159  0E13                     	;# 
  3160  0E14                     	;# 
  3161  0E15                     	;# 
  3162  0E16                     	;# 
  3163  0E17                     	;# 
  3164  0E18                     	;# 
  3165  0E19                     	;# 
  3166  0E1A                     	;# 
  3167  0E1B                     	;# 
  3168  0E1C                     	;# 
  3169  0E1D                     	;# 
  3170  0E1E                     	;# 
  3171  0E1F                     	;# 
  3172  0E20                     	;# 
  3173  0E21                     	;# 
  3174  0E22                     	;# 
  3175  0E24                     	;# 
  3176  0E25                     	;# 
  3177  0E28                     	;# 
  3178  0E29                     	;# 
  3179  0E2A                     	;# 
  3180  0E2B                     	;# 
  3181  0E2C                     	;# 
  3182  0E2D                     	;# 
  3183  0E2E                     	;# 
  3184  0E2F                     	;# 
  3185  0E90                     	;# 
  3186  0E91                     	;# 
  3187  0E92                     	;# 
  3188  0E94                     	;# 
  3189  0E95                     	;# 
  3190  0E9C                     	;# 
  3191  0E9D                     	;# 
  3192  0E9E                     	;# 
  3193  0E9F                     	;# 
  3194  0EA0                     	;# 
  3195  0EA1                     	;# 
  3196  0EA2                     	;# 
  3197  0EA3                     	;# 
  3198  0EA4                     	;# 
  3199  0EA5                     	;# 
  3200  0EA6                     	;# 
  3201  0EA7                     	;# 
  3202  0F0F                     	;# 
  3203  0F10                     	;# 
  3204  0F11                     	;# 
  3205  0F12                     	;# 
  3206  0F13                     	;# 
  3207  0F14                     	;# 
  3208  0F15                     	;# 
  3209  0F16                     	;# 
  3210  0F17                     	;# 
  3211  0F18                     	;# 
  3212  0F19                     	;# 
  3213  0F1A                     	;# 
  3214  0F1B                     	;# 
  3215  0F1C                     	;# 
  3216  0F1D                     	;# 
  3217  0F1E                     	;# 
  3218  0F1F                     	;# 
  3219  0F20                     	;# 
  3220  0F21                     	;# 
  3221  0F22                     	;# 
  3222  0F23                     	;# 
  3223  0F24                     	;# 
  3224  0F25                     	;# 
  3225  0F26                     	;# 
  3226  0F27                     	;# 
  3227  0F28                     	;# 
  3228  0F29                     	;# 
  3229  0F2A                     	;# 
  3230  0F2B                     	;# 
  3231  0F2C                     	;# 
  3232  0F2D                     	;# 
  3233  0F2E                     	;# 
  3234  0F2F                     	;# 
  3235  0F30                     	;# 
  3236  0F31                     	;# 
  3237  0F32                     	;# 
  3238  0F33                     	;# 
  3239  0F34                     	;# 
  3240  0F35                     	;# 
  3241  0F36                     	;# 
  3242  0F37                     	;# 
  3243  0FE4                     	;# 
  3244  0FE5                     	;# 
  3245  0FE6                     	;# 
  3246  0FE7                     	;# 
  3247  0FE8                     	;# 
  3248  0FE9                     	;# 
  3249  0FEA                     	;# 
  3250  0FEB                     	;# 
  3251  0FED                     	;# 
  3252  0FEE                     	;# 
  3253  0FEF                     	;# 
  3254  0000                     	;# 
  3255  0001                     	;# 
  3256  0002                     	;# 
  3257  0003                     	;# 
  3258  0004                     	;# 
  3259  0005                     	;# 
  3260  0006                     	;# 
  3261  0007                     	;# 
  3262  0008                     	;# 
  3263  0009                     	;# 
  3264  000A                     	;# 
  3265  000B                     	;# 
  3266  000C                     	;# 
  3267  000D                     	;# 
  3268  000E                     	;# 
  3269  0010                     	;# 
  3270  0011                     	;# 
  3271  0012                     	;# 
  3272  0013                     	;# 
  3273  0014                     	;# 
  3274  0015                     	;# 
  3275  0015                     	;# 
  3276  0016                     	;# 
  3277  0016                     	;# 
  3278  0017                     	;# 
  3279  0018                     	;# 
  3280  0019                     	;# 
  3281  0019                     	;# 
  3282  001A                     	;# 
  3283  001B                     	;# 
  3284  001C                     	;# 
  3285  001D                     	;# 
  3286  001E                     	;# 
  3287  001F                     	;# 
  3288  008C                     	;# 
  3289  008D                     	;# 
  3290  008E                     	;# 
  3291  0090                     	;# 
  3292  0091                     	;# 
  3293  0092                     	;# 
  3294  0093                     	;# 
  3295  0094                     	;# 
  3296  0097                     	;# 
  3297  009B                     	;# 
  3298  009B                     	;# 
  3299  009C                     	;# 
  3300  009D                     	;# 
  3301  009E                     	;# 
  3302  009F                     	;# 
  3303  010C                     	;# 
  3304  010D                     	;# 
  3305  010E                     	;# 
  3306  0111                     	;# 
  3307  0112                     	;# 
  3308  0113                     	;# 
  3309  0114                     	;# 
  3310  0115                     	;# 
  3311  0116                     	;# 
  3312  0117                     	;# 
  3313  0118                     	;# 
  3314  0119                     	;# 
  3315  018C                     	;# 
  3316  018D                     	;# 
  3317  018E                     	;# 
  3318  0197                     	;# 
  3319  0199                     	;# 
  3320  0199                     	;# 
  3321  0199                     	;# 
  3322  019A                     	;# 
  3323  019A                     	;# 
  3324  019A                     	;# 
  3325  019B                     	;# 
  3326  019B                     	;# 
  3327  019B                     	;# 
  3328  019B                     	;# 
  3329  019B                     	;# 
  3330  019C                     	;# 
  3331  019C                     	;# 
  3332  019C                     	;# 
  3333  019D                     	;# 
  3334  019D                     	;# 
  3335  019D                     	;# 
  3336  019E                     	;# 
  3337  019E                     	;# 
  3338  019E                     	;# 
  3339  019F                     	;# 
  3340  019F                     	;# 
  3341  019F                     	;# 
  3342  019F                     	;# 
  3343  019F                     	;# 
  3344  020C                     	;# 
  3345  020D                     	;# 
  3346  020E                     	;# 
  3347  0211                     	;# 
  3348  0211                     	;# 
  3349  0212                     	;# 
  3350  0212                     	;# 
  3351  0213                     	;# 
  3352  0213                     	;# 
  3353  0214                     	;# 
  3354  0214                     	;# 
  3355  0215                     	;# 
  3356  0215                     	;# 
  3357  0215                     	;# 
  3358  0215                     	;# 
  3359  0216                     	;# 
  3360  0216                     	;# 
  3361  0217                     	;# 
  3362  0217                     	;# 
  3363  0219                     	;# 
  3364  021A                     	;# 
  3365  021B                     	;# 
  3366  021C                     	;# 
  3367  021D                     	;# 
  3368  021D                     	;# 
  3369  021E                     	;# 
  3370  021F                     	;# 
  3371  028C                     	;# 
  3372  028D                     	;# 
  3373  028E                     	;# 
  3374  0291                     	;# 
  3375  0291                     	;# 
  3376  0292                     	;# 
  3377  0293                     	;# 
  3378  0294                     	;# 
  3379  0295                     	;# 
  3380  0295                     	;# 
  3381  0296                     	;# 
  3382  0297                     	;# 
  3383  0298                     	;# 
  3384  029F                     	;# 
  3385  030C                     	;# 
  3386  030D                     	;# 
  3387  030E                     	;# 
  3388  0311                     	;# 
  3389  0311                     	;# 
  3390  0312                     	;# 
  3391  0313                     	;# 
  3392  0314                     	;# 
  3393  0315                     	;# 
  3394  0315                     	;# 
  3395  0316                     	;# 
  3396  0317                     	;# 
  3397  0318                     	;# 
  3398  038C                     	;# 
  3399  038D                     	;# 
  3400  038E                     	;# 
  3401  0391                     	;# 
  3402  0392                     	;# 
  3403  0393                     	;# 
  3404  0394                     	;# 
  3405  0395                     	;# 
  3406  0396                     	;# 
  3407  0397                     	;# 
  3408  0398                     	;# 
  3409  0399                     	;# 
  3410  039A                     	;# 
  3411  039C                     	;# 
  3412  039D                     	;# 
  3413  039E                     	;# 
  3414  039F                     	;# 
  3415  0411                     	;# 
  3416  0411                     	;# 
  3417  0412                     	;# 
  3418  0413                     	;# 
  3419  0414                     	;# 
  3420  0415                     	;# 
  3421  0416                     	;# 
  3422  0417                     	;# 
  3423  0418                     	;# 
  3424  0418                     	;# 
  3425  0419                     	;# 
  3426  041A                     	;# 
  3427  041B                     	;# 
  3428  041C                     	;# 
  3429  041D                     	;# 
  3430  041E                     	;# 
  3431  041F                     	;# 
  3432  0498                     	;# 
  3433  0498                     	;# 
  3434  0499                     	;# 
  3435  049A                     	;# 
  3436  049B                     	;# 
  3437  049B                     	;# 
  3438  049C                     	;# 
  3439  049D                     	;# 
  3440  049E                     	;# 
  3441  049F                     	;# 
  3442  0617                     	;# 
  3443  0618                     	;# 
  3444  0619                     	;# 
  3445  0619                     	;# 
  3446  061A                     	;# 
  3447  061B                     	;# 
  3448  061C                     	;# 
  3449  061C                     	;# 
  3450  061F                     	;# 
  3451  0691                     	;# 
  3452  0692                     	;# 
  3453  0693                     	;# 
  3454  0694                     	;# 
  3455  0695                     	;# 
  3456  0696                     	;# 
  3457  0697                     	;# 
  3458  0698                     	;# 
  3459  0699                     	;# 
  3460  0711                     	;# 
  3461  0712                     	;# 
  3462  0713                     	;# 
  3463  0714                     	;# 
  3464  0715                     	;# 
  3465  0716                     	;# 
  3466  0717                     	;# 
  3467  0718                     	;# 
  3468  0719                     	;# 
  3469  0891                     	;# 
  3470  0891                     	;# 
  3471  0891                     	;# 
  3472  0891                     	;# 
  3473  0891                     	;# 
  3474  0891                     	;# 
  3475  0892                     	;# 
  3476  0892                     	;# 
  3477  0892                     	;# 
  3478  0893                     	;# 
  3479  0893                     	;# 
  3480  0893                     	;# 
  3481  0893                     	;# 
  3482  0893                     	;# 
  3483  0893                     	;# 
  3484  0894                     	;# 
  3485  0894                     	;# 
  3486  0894                     	;# 
  3487  0895                     	;# 
  3488  0895                     	;# 
  3489  0895                     	;# 
  3490  0896                     	;# 
  3491  0896                     	;# 
  3492  0896                     	;# 
  3493  089B                     	;# 
  3494  0911                     	;# 
  3495  0912                     	;# 
  3496  0913                     	;# 
  3497  0914                     	;# 
  3498  0915                     	;# 
  3499  0916                     	;# 
  3500  0918                     	;# 
  3501  0919                     	;# 
  3502  091A                     	;# 
  3503  091B                     	;# 
  3504  091C                     	;# 
  3505  091D                     	;# 
  3506  091E                     	;# 
  3507  091F                     	;# 
  3508  0E0F                     	;# 
  3509  0E10                     	;# 
  3510  0E11                     	;# 
  3511  0E12                     	;# 
  3512  0E13                     	;# 
  3513  0E14                     	;# 
  3514  0E15                     	;# 
  3515  0E16                     	;# 
  3516  0E17                     	;# 
  3517  0E18                     	;# 
  3518  0E19                     	;# 
  3519  0E1A                     	;# 
  3520  0E1B                     	;# 
  3521  0E1C                     	;# 
  3522  0E1D                     	;# 
  3523  0E1E                     	;# 
  3524  0E1F                     	;# 
  3525  0E20                     	;# 
  3526  0E21                     	;# 
  3527  0E22                     	;# 
  3528  0E24                     	;# 
  3529  0E25                     	;# 
  3530  0E28                     	;# 
  3531  0E29                     	;# 
  3532  0E2A                     	;# 
  3533  0E2B                     	;# 
  3534  0E2C                     	;# 
  3535  0E2D                     	;# 
  3536  0E2E                     	;# 
  3537  0E2F                     	;# 
  3538  0E90                     	;# 
  3539  0E91                     	;# 
  3540  0E92                     	;# 
  3541  0E94                     	;# 
  3542  0E95                     	;# 
  3543  0E9C                     	;# 
  3544  0E9D                     	;# 
  3545  0E9E                     	;# 
  3546  0E9F                     	;# 
  3547  0EA0                     	;# 
  3548  0EA1                     	;# 
  3549  0EA2                     	;# 
  3550  0EA3                     	;# 
  3551  0EA4                     	;# 
  3552  0EA5                     	;# 
  3553  0EA6                     	;# 
  3554  0EA7                     	;# 
  3555  0F0F                     	;# 
  3556  0F10                     	;# 
  3557  0F11                     	;# 
  3558  0F12                     	;# 
  3559  0F13                     	;# 
  3560  0F14                     	;# 
  3561  0F15                     	;# 
  3562  0F16                     	;# 
  3563  0F17                     	;# 
  3564  0F18                     	;# 
  3565  0F19                     	;# 
  3566  0F1A                     	;# 
  3567  0F1B                     	;# 
  3568  0F1C                     	;# 
  3569  0F1D                     	;# 
  3570  0F1E                     	;# 
  3571  0F1F                     	;# 
  3572  0F20                     	;# 
  3573  0F21                     	;# 
  3574  0F22                     	;# 
  3575  0F23                     	;# 
  3576  0F24                     	;# 
  3577  0F25                     	;# 
  3578  0F26                     	;# 
  3579  0F27                     	;# 
  3580  0F28                     	;# 
  3581  0F29                     	;# 
  3582  0F2A                     	;# 
  3583  0F2B                     	;# 
  3584  0F2C                     	;# 
  3585  0F2D                     	;# 
  3586  0F2E                     	;# 
  3587  0F2F                     	;# 
  3588  0F30                     	;# 
  3589  0F31                     	;# 
  3590  0F32                     	;# 
  3591  0F33                     	;# 
  3592  0F34                     	;# 
  3593  0F35                     	;# 
  3594  0F36                     	;# 
  3595  0F37                     	;# 
  3596  0FE4                     	;# 
  3597  0FE5                     	;# 
  3598  0FE6                     	;# 
  3599  0FE7                     	;# 
  3600  0FE8                     	;# 
  3601  0FE9                     	;# 
  3602  0FEA                     	;# 
  3603  0FEB                     	;# 
  3604  0FED                     	;# 
  3605  0FEE                     	;# 
  3606  0FEF                     	;# 
  3607  0000                     	;# 
  3608  0001                     	;# 
  3609  0002                     	;# 
  3610  0003                     	;# 
  3611  0004                     	;# 
  3612  0005                     	;# 
  3613  0006                     	;# 
  3614  0007                     	;# 
  3615  0008                     	;# 
  3616  0009                     	;# 
  3617  000A                     	;# 
  3618  000B                     	;# 
  3619  000C                     	;# 
  3620  000D                     	;# 
  3621  000E                     	;# 
  3622  0010                     	;# 
  3623  0011                     	;# 
  3624  0012                     	;# 
  3625  0013                     	;# 
  3626  0014                     	;# 
  3627  0015                     	;# 
  3628  0015                     	;# 
  3629  0016                     	;# 
  3630  0016                     	;# 
  3631  0017                     	;# 
  3632  0018                     	;# 
  3633  0019                     	;# 
  3634  0019                     	;# 
  3635  001A                     	;# 
  3636  001B                     	;# 
  3637  001C                     	;# 
  3638  001D                     	;# 
  3639  001E                     	;# 
  3640  001F                     	;# 
  3641  008C                     	;# 
  3642  008D                     	;# 
  3643  008E                     	;# 
  3644  0090                     	;# 
  3645  0091                     	;# 
  3646  0092                     	;# 
  3647  0093                     	;# 
  3648  0094                     	;# 
  3649  0097                     	;# 
  3650  009B                     	;# 
  3651  009B                     	;# 
  3652  009C                     	;# 
  3653  009D                     	;# 
  3654  009E                     	;# 
  3655  009F                     	;# 
  3656  010C                     	;# 
  3657  010D                     	;# 
  3658  010E                     	;# 
  3659  0111                     	;# 
  3660  0112                     	;# 
  3661  0113                     	;# 
  3662  0114                     	;# 
  3663  0115                     	;# 
  3664  0116                     	;# 
  3665  0117                     	;# 
  3666  0118                     	;# 
  3667  0119                     	;# 
  3668  018C                     	;# 
  3669  018D                     	;# 
  3670  018E                     	;# 
  3671  0197                     	;# 
  3672  0199                     	;# 
  3673  0199                     	;# 
  3674  0199                     	;# 
  3675  019A                     	;# 
  3676  019A                     	;# 
  3677  019A                     	;# 
  3678  019B                     	;# 
  3679  019B                     	;# 
  3680  019B                     	;# 
  3681  019B                     	;# 
  3682  019B                     	;# 
  3683  019C                     	;# 
  3684  019C                     	;# 
  3685  019C                     	;# 
  3686  019D                     	;# 
  3687  019D                     	;# 
  3688  019D                     	;# 
  3689  019E                     	;# 
  3690  019E                     	;# 
  3691  019E                     	;# 
  3692  019F                     	;# 
  3693  019F                     	;# 
  3694  019F                     	;# 
  3695  019F                     	;# 
  3696  019F                     	;# 
  3697  020C                     	;# 
  3698  020D                     	;# 
  3699  020E                     	;# 
  3700  0211                     	;# 
  3701  0211                     	;# 
  3702  0212                     	;# 
  3703  0212                     	;# 
  3704  0213                     	;# 
  3705  0213                     	;# 
  3706  0214                     	;# 
  3707  0214                     	;# 
  3708  0215                     	;# 
  3709  0215                     	;# 
  3710  0215                     	;# 
  3711  0215                     	;# 
  3712  0216                     	;# 
  3713  0216                     	;# 
  3714  0217                     	;# 
  3715  0217                     	;# 
  3716  0219                     	;# 
  3717  021A                     	;# 
  3718  021B                     	;# 
  3719  021C                     	;# 
  3720  021D                     	;# 
  3721  021D                     	;# 
  3722  021E                     	;# 
  3723  021F                     	;# 
  3724  028C                     	;# 
  3725  028D                     	;# 
  3726  028E                     	;# 
  3727  0291                     	;# 
  3728  0291                     	;# 
  3729  0292                     	;# 
  3730  0293                     	;# 
  3731  0294                     	;# 
  3732  0295                     	;# 
  3733  0295                     	;# 
  3734  0296                     	;# 
  3735  0297                     	;# 
  3736  0298                     	;# 
  3737  029F                     	;# 
  3738  030C                     	;# 
  3739  030D                     	;# 
  3740  030E                     	;# 
  3741  0311                     	;# 
  3742  0311                     	;# 
  3743  0312                     	;# 
  3744  0313                     	;# 
  3745  0314                     	;# 
  3746  0315                     	;# 
  3747  0315                     	;# 
  3748  0316                     	;# 
  3749  0317                     	;# 
  3750  0318                     	;# 
  3751  038C                     	;# 
  3752  038D                     	;# 
  3753  038E                     	;# 
  3754  0391                     	;# 
  3755  0392                     	;# 
  3756  0393                     	;# 
  3757  0394                     	;# 
  3758  0395                     	;# 
  3759  0396                     	;# 
  3760  0397                     	;# 
  3761  0398                     	;# 
  3762  0399                     	;# 
  3763  039A                     	;# 
  3764  039C                     	;# 
  3765  039D                     	;# 
  3766  039E                     	;# 
  3767  039F                     	;# 
  3768  0411                     	;# 
  3769  0411                     	;# 
  3770  0412                     	;# 
  3771  0413                     	;# 
  3772  0414                     	;# 
  3773  0415                     	;# 
  3774  0416                     	;# 
  3775  0417                     	;# 
  3776  0418                     	;# 
  3777  0418                     	;# 
  3778  0419                     	;# 
  3779  041A                     	;# 
  3780  041B                     	;# 
  3781  041C                     	;# 
  3782  041D                     	;# 
  3783  041E                     	;# 
  3784  041F                     	;# 
  3785  0498                     	;# 
  3786  0498                     	;# 
  3787  0499                     	;# 
  3788  049A                     	;# 
  3789  049B                     	;# 
  3790  049B                     	;# 
  3791  049C                     	;# 
  3792  049D                     	;# 
  3793  049E                     	;# 
  3794  049F                     	;# 
  3795  0617                     	;# 
  3796  0618                     	;# 
  3797  0619                     	;# 
  3798  0619                     	;# 
  3799  061A                     	;# 
  3800  061B                     	;# 
  3801  061C                     	;# 
  3802  061C                     	;# 
  3803  061F                     	;# 
  3804  0691                     	;# 
  3805  0692                     	;# 
  3806  0693                     	;# 
  3807  0694                     	;# 
  3808  0695                     	;# 
  3809  0696                     	;# 
  3810  0697                     	;# 
  3811  0698                     	;# 
  3812  0699                     	;# 
  3813  0711                     	;# 
  3814  0712                     	;# 
  3815  0713                     	;# 
  3816  0714                     	;# 
  3817  0715                     	;# 
  3818  0716                     	;# 
  3819  0717                     	;# 
  3820  0718                     	;# 
  3821  0719                     	;# 
  3822  0891                     	;# 
  3823  0891                     	;# 
  3824  0891                     	;# 
  3825  0891                     	;# 
  3826  0891                     	;# 
  3827  0891                     	;# 
  3828  0892                     	;# 
  3829  0892                     	;# 
  3830  0892                     	;# 
  3831  0893                     	;# 
  3832  0893                     	;# 
  3833  0893                     	;# 
  3834  0893                     	;# 
  3835  0893                     	;# 
  3836  0893                     	;# 
  3837  0894                     	;# 
  3838  0894                     	;# 
  3839  0894                     	;# 
  3840  0895                     	;# 
  3841  0895                     	;# 
  3842  0895                     	;# 
  3843  0896                     	;# 
  3844  0896                     	;# 
  3845  0896                     	;# 
  3846  089B                     	;# 
  3847  0911                     	;# 
  3848  0912                     	;# 
  3849  0913                     	;# 
  3850  0914                     	;# 
  3851  0915                     	;# 
  3852  0916                     	;# 
  3853  0918                     	;# 
  3854  0919                     	;# 
  3855  091A                     	;# 
  3856  091B                     	;# 
  3857  091C                     	;# 
  3858  091D                     	;# 
  3859  091E                     	;# 
  3860  091F                     	;# 
  3861  0E0F                     	;# 
  3862  0E10                     	;# 
  3863  0E11                     	;# 
  3864  0E12                     	;# 
  3865  0E13                     	;# 
  3866  0E14                     	;# 
  3867  0E15                     	;# 
  3868  0E16                     	;# 
  3869  0E17                     	;# 
  3870  0E18                     	;# 
  3871  0E19                     	;# 
  3872  0E1A                     	;# 
  3873  0E1B                     	;# 
  3874  0E1C                     	;# 
  3875  0E1D                     	;# 
  3876  0E1E                     	;# 
  3877  0E1F                     	;# 
  3878  0E20                     	;# 
  3879  0E21                     	;# 
  3880  0E22                     	;# 
  3881  0E24                     	;# 
  3882  0E25                     	;# 
  3883  0E28                     	;# 
  3884  0E29                     	;# 
  3885  0E2A                     	;# 
  3886  0E2B                     	;# 
  3887  0E2C                     	;# 
  3888  0E2D                     	;# 
  3889  0E2E                     	;# 
  3890  0E2F                     	;# 
  3891  0E90                     	;# 
  3892  0E91                     	;# 
  3893  0E92                     	;# 
  3894  0E94                     	;# 
  3895  0E95                     	;# 
  3896  0E9C                     	;# 
  3897  0E9D                     	;# 
  3898  0E9E                     	;# 
  3899  0E9F                     	;# 
  3900  0EA0                     	;# 
  3901  0EA1                     	;# 
  3902  0EA2                     	;# 
  3903  0EA3                     	;# 
  3904  0EA4                     	;# 
  3905  0EA5                     	;# 
  3906  0EA6                     	;# 
  3907  0EA7                     	;# 
  3908  0F0F                     	;# 
  3909  0F10                     	;# 
  3910  0F11                     	;# 
  3911  0F12                     	;# 
  3912  0F13                     	;# 
  3913  0F14                     	;# 
  3914  0F15                     	;# 
  3915  0F16                     	;# 
  3916  0F17                     	;# 
  3917  0F18                     	;# 
  3918  0F19                     	;# 
  3919  0F1A                     	;# 
  3920  0F1B                     	;# 
  3921  0F1C                     	;# 
  3922  0F1D                     	;# 
  3923  0F1E                     	;# 
  3924  0F1F                     	;# 
  3925  0F20                     	;# 
  3926  0F21                     	;# 
  3927  0F22                     	;# 
  3928  0F23                     	;# 
  3929  0F24                     	;# 
  3930  0F25                     	;# 
  3931  0F26                     	;# 
  3932  0F27                     	;# 
  3933  0F28                     	;# 
  3934  0F29                     	;# 
  3935  0F2A                     	;# 
  3936  0F2B                     	;# 
  3937  0F2C                     	;# 
  3938  0F2D                     	;# 
  3939  0F2E                     	;# 
  3940  0F2F                     	;# 
  3941  0F30                     	;# 
  3942  0F31                     	;# 
  3943  0F32                     	;# 
  3944  0F33                     	;# 
  3945  0F34                     	;# 
  3946  0F35                     	;# 
  3947  0F36                     	;# 
  3948  0F37                     	;# 
  3949  0FE4                     	;# 
  3950  0FE5                     	;# 
  3951  0FE6                     	;# 
  3952  0FE7                     	;# 
  3953  0FE8                     	;# 
  3954  0FE9                     	;# 
  3955  0FEA                     	;# 
  3956  0FEB                     	;# 
  3957  0FED                     	;# 
  3958  0FEE                     	;# 
  3959  0FEF                     	;# 
  3960  0000                     	;# 
  3961  0001                     	;# 
  3962  0002                     	;# 
  3963  0003                     	;# 
  3964  0004                     	;# 
  3965  0005                     	;# 
  3966  0006                     	;# 
  3967  0007                     	;# 
  3968  0008                     	;# 
  3969  0009                     	;# 
  3970  000A                     	;# 
  3971  000B                     	;# 
  3972  000C                     	;# 
  3973  000D                     	;# 
  3974  000E                     	;# 
  3975  0010                     	;# 
  3976  0011                     	;# 
  3977  0012                     	;# 
  3978  0013                     	;# 
  3979  0014                     	;# 
  3980  0015                     	;# 
  3981  0015                     	;# 
  3982  0016                     	;# 
  3983  0016                     	;# 
  3984  0017                     	;# 
  3985  0018                     	;# 
  3986  0019                     	;# 
  3987  0019                     	;# 
  3988  001A                     	;# 
  3989  001B                     	;# 
  3990  001C                     	;# 
  3991  001D                     	;# 
  3992  001E                     	;# 
  3993  001F                     	;# 
  3994  008C                     	;# 
  3995  008D                     	;# 
  3996  008E                     	;# 
  3997  0090                     	;# 
  3998  0091                     	;# 
  3999  0092                     	;# 
  4000  0093                     	;# 
  4001  0094                     	;# 
  4002  0097                     	;# 
  4003  009B                     	;# 
  4004  009B                     	;# 
  4005  009C                     	;# 
  4006  009D                     	;# 
  4007  009E                     	;# 
  4008  009F                     	;# 
  4009  010C                     	;# 
  4010  010D                     	;# 
  4011  010E                     	;# 
  4012  0111                     	;# 
  4013  0112                     	;# 
  4014  0113                     	;# 
  4015  0114                     	;# 
  4016  0115                     	;# 
  4017  0116                     	;# 
  4018  0117                     	;# 
  4019  0118                     	;# 
  4020  0119                     	;# 
  4021  018C                     	;# 
  4022  018D                     	;# 
  4023  018E                     	;# 
  4024  0197                     	;# 
  4025  0199                     	;# 
  4026  0199                     	;# 
  4027  0199                     	;# 
  4028  019A                     	;# 
  4029  019A                     	;# 
  4030  019A                     	;# 
  4031  019B                     	;# 
  4032  019B                     	;# 
  4033  019B                     	;# 
  4034  019B                     	;# 
  4035  019B                     	;# 
  4036  019C                     	;# 
  4037  019C                     	;# 
  4038  019C                     	;# 
  4039  019D                     	;# 
  4040  019D                     	;# 
  4041  019D                     	;# 
  4042  019E                     	;# 
  4043  019E                     	;# 
  4044  019E                     	;# 
  4045  019F                     	;# 
  4046  019F                     	;# 
  4047  019F                     	;# 
  4048  019F                     	;# 
  4049  019F                     	;# 
  4050  020C                     	;# 
  4051  020D                     	;# 
  4052  020E                     	;# 
  4053  0211                     	;# 
  4054  0211                     	;# 
  4055  0212                     	;# 
  4056  0212                     	;# 
  4057  0213                     	;# 
  4058  0213                     	;# 
  4059  0214                     	;# 
  4060  0214                     	;# 
  4061  0215                     	;# 
  4062  0215                     	;# 
  4063  0215                     	;# 
  4064  0215                     	;# 
  4065  0216                     	;# 
  4066  0216                     	;# 
  4067  0217                     	;# 
  4068  0217                     	;# 
  4069  0219                     	;# 
  4070  021A                     	;# 
  4071  021B                     	;# 
  4072  021C                     	;# 
  4073  021D                     	;# 
  4074  021D                     	;# 
  4075  021E                     	;# 
  4076  021F                     	;# 
  4077  028C                     	;# 
  4078  028D                     	;# 
  4079  028E                     	;# 
  4080  0291                     	;# 
  4081  0291                     	;# 
  4082  0292                     	;# 
  4083  0293                     	;# 
  4084  0294                     	;# 
  4085  0295                     	;# 
  4086  0295                     	;# 
  4087  0296                     	;# 
  4088  0297                     	;# 
  4089  0298                     	;# 
  4090  029F                     	;# 
  4091  030C                     	;# 
  4092  030D                     	;# 
  4093  030E                     	;# 
  4094  0311                     	;# 
  4095  0311                     	;# 
  4096  0312                     	;# 
  4097  0313                     	;# 
  4098  0314                     	;# 
  4099  0315                     	;# 
  4100  0315                     	;# 
  4101  0316                     	;# 
  4102  0317                     	;# 
  4103  0318                     	;# 
  4104  038C                     	;# 
  4105  038D                     	;# 
  4106  038E                     	;# 
  4107  0391                     	;# 
  4108  0392                     	;# 
  4109  0393                     	;# 
  4110  0394                     	;# 
  4111  0395                     	;# 
  4112  0396                     	;# 
  4113  0397                     	;# 
  4114  0398                     	;# 
  4115  0399                     	;# 
  4116  039A                     	;# 
  4117  039C                     	;# 
  4118  039D                     	;# 
  4119  039E                     	;# 
  4120  039F                     	;# 
  4121  0411                     	;# 
  4122  0411                     	;# 
  4123  0412                     	;# 
  4124  0413                     	;# 
  4125  0414                     	;# 
  4126  0415                     	;# 
  4127  0416                     	;# 
  4128  0417                     	;# 
  4129  0418                     	;# 
  4130  0418                     	;# 
  4131  0419                     	;# 
  4132  041A                     	;# 
  4133  041B                     	;# 
  4134  041C                     	;# 
  4135  041D                     	;# 
  4136  041E                     	;# 
  4137  041F                     	;# 
  4138  0498                     	;# 
  4139  0498                     	;# 
  4140  0499                     	;# 
  4141  049A                     	;# 
  4142  049B                     	;# 
  4143  049B                     	;# 
  4144  049C                     	;# 
  4145  049D                     	;# 
  4146  049E                     	;# 
  4147  049F                     	;# 
  4148  0617                     	;# 
  4149  0618                     	;# 
  4150  0619                     	;# 
  4151  0619                     	;# 
  4152  061A                     	;# 
  4153  061B                     	;# 
  4154  061C                     	;# 
  4155  061C                     	;# 
  4156  061F                     	;# 
  4157  0691                     	;# 
  4158  0692                     	;# 
  4159  0693                     	;# 
  4160  0694                     	;# 
  4161  0695                     	;# 
  4162  0696                     	;# 
  4163  0697                     	;# 
  4164  0698                     	;# 
  4165  0699                     	;# 
  4166  0711                     	;# 
  4167  0712                     	;# 
  4168  0713                     	;# 
  4169  0714                     	;# 
  4170  0715                     	;# 
  4171  0716                     	;# 
  4172  0717                     	;# 
  4173  0718                     	;# 
  4174  0719                     	;# 
  4175  0891                     	;# 
  4176  0891                     	;# 
  4177  0891                     	;# 
  4178  0891                     	;# 
  4179  0891                     	;# 
  4180  0891                     	;# 
  4181  0892                     	;# 
  4182  0892                     	;# 
  4183  0892                     	;# 
  4184  0893                     	;# 
  4185  0893                     	;# 
  4186  0893                     	;# 
  4187  0893                     	;# 
  4188  0893                     	;# 
  4189  0893                     	;# 
  4190  0894                     	;# 
  4191  0894                     	;# 
  4192  0894                     	;# 
  4193  0895                     	;# 
  4194  0895                     	;# 
  4195  0895                     	;# 
  4196  0896                     	;# 
  4197  0896                     	;# 
  4198  0896                     	;# 
  4199  089B                     	;# 
  4200  0911                     	;# 
  4201  0912                     	;# 
  4202  0913                     	;# 
  4203  0914                     	;# 
  4204  0915                     	;# 
  4205  0916                     	;# 
  4206  0918                     	;# 
  4207  0919                     	;# 
  4208  091A                     	;# 
  4209  091B                     	;# 
  4210  091C                     	;# 
  4211  091D                     	;# 
  4212  091E                     	;# 
  4213  091F                     	;# 
  4214  0E0F                     	;# 
  4215  0E10                     	;# 
  4216  0E11                     	;# 
  4217  0E12                     	;# 
  4218  0E13                     	;# 
  4219  0E14                     	;# 
  4220  0E15                     	;# 
  4221  0E16                     	;# 
  4222  0E17                     	;# 
  4223  0E18                     	;# 
  4224  0E19                     	;# 
  4225  0E1A                     	;# 
  4226  0E1B                     	;# 
  4227  0E1C                     	;# 
  4228  0E1D                     	;# 
  4229  0E1E                     	;# 
  4230  0E1F                     	;# 
  4231  0E20                     	;# 
  4232  0E21                     	;# 
  4233  0E22                     	;# 
  4234  0E24                     	;# 
  4235  0E25                     	;# 
  4236  0E28                     	;# 
  4237  0E29                     	;# 
  4238  0E2A                     	;# 
  4239  0E2B                     	;# 
  4240  0E2C                     	;# 
  4241  0E2D                     	;# 
  4242  0E2E                     	;# 
  4243  0E2F                     	;# 
  4244  0E90                     	;# 
  4245  0E91                     	;# 
  4246  0E92                     	;# 
  4247  0E94                     	;# 
  4248  0E95                     	;# 
  4249  0E9C                     	;# 
  4250  0E9D                     	;# 
  4251  0E9E                     	;# 
  4252  0E9F                     	;# 
  4253  0EA0                     	;# 
  4254  0EA1                     	;# 
  4255  0EA2                     	;# 
  4256  0EA3                     	;# 
  4257  0EA4                     	;# 
  4258  0EA5                     	;# 
  4259  0EA6                     	;# 
  4260  0EA7                     	;# 
  4261  0F0F                     	;# 
  4262  0F10                     	;# 
  4263  0F11                     	;# 
  4264  0F12                     	;# 
  4265  0F13                     	;# 
  4266  0F14                     	;# 
  4267  0F15                     	;# 
  4268  0F16                     	;# 
  4269  0F17                     	;# 
  4270  0F18                     	;# 
  4271  0F19                     	;# 
  4272  0F1A                     	;# 
  4273  0F1B                     	;# 
  4274  0F1C                     	;# 
  4275  0F1D                     	;# 
  4276  0F1E                     	;# 
  4277  0F1F                     	;# 
  4278  0F20                     	;# 
  4279  0F21                     	;# 
  4280  0F22                     	;# 
  4281  0F23                     	;# 
  4282  0F24                     	;# 
  4283  0F25                     	;# 
  4284  0F26                     	;# 
  4285  0F27                     	;# 
  4286  0F28                     	;# 
  4287  0F29                     	;# 
  4288  0F2A                     	;# 
  4289  0F2B                     	;# 
  4290  0F2C                     	;# 
  4291  0F2D                     	;# 
  4292  0F2E                     	;# 
  4293  0F2F                     	;# 
  4294  0F30                     	;# 
  4295  0F31                     	;# 
  4296  0F32                     	;# 
  4297  0F33                     	;# 
  4298  0F34                     	;# 
  4299  0F35                     	;# 
  4300  0F36                     	;# 
  4301  0F37                     	;# 
  4302  0FE4                     	;# 
  4303  0FE5                     	;# 
  4304  0FE6                     	;# 
  4305  0FE7                     	;# 
  4306  0FE8                     	;# 
  4307  0FE9                     	;# 
  4308  0FEA                     	;# 
  4309  0FEB                     	;# 
  4310  0FED                     	;# 
  4311  0FEE                     	;# 
  4312  0FEF                     	;# 
  4313                           
  4314                           	psect	idataBANK1
  4315  1550                     __pidataBANK1:	
  4316                           
  4317                           ;initializer for Led_DynamicCloud@F8326
  4318  1550  34C8               	retlw	200
  4319  1551  3400               	retlw	0
  4320  1552  34C8               	retlw	200
  4321  1553  3400               	retlw	0
  4322  1554  3490               	retlw	144
  4323  1555  3401               	retlw	1
  4324  1556  3440               	retlw	64
  4325  1557  3401               	retlw	1
  4326  1558  3490               	retlw	144
  4327  1559  3401               	retlw	1
  4328                           
  4329                           ;initializer for Led_DynamicMoon@F8316
  4330  155A  3400               	retlw	0
  4331  155B  3400               	retlw	0
  4332  155C  3400               	retlw	0
  4333  155D  3400               	retlw	0
  4334  155E  34E8               	retlw	232
  4335  155F  3403               	retlw	3
  4336  1560  34C8               	retlw	200
  4337  1561  3400               	retlw	0
  4338  1562  3400               	retlw	0
  4339  1563  3400               	retlw	0
  4340                           
  4341                           ;initializer for Led_DynamicWave@F8306
  4342  1564  34F4               	retlw	244
  4343  1565  3401               	retlw	1
  4344  1566  34F4               	retlw	244
  4345  1567  3401               	retlw	1
  4346  1568  34F4               	retlw	244
  4347  1569  3401               	retlw	1
  4348  156A  34C8               	retlw	200
  4349  156B  3400               	retlw	0
  4350  156C  34F4               	retlw	244
  4351  156D  3401               	retlw	1
  4352                           
  4353                           ;initializer for _loadDuty
  4354  156E  34DA               	retlw	low _PWM5_LoadDutyValue
  4355  156F  3407               	retlw	high _PWM5_LoadDutyValue
  4356  1570  34ED               	retlw	low _PWM2_LoadDutyValue
  4357  1571  3414               	retlw	high _PWM2_LoadDutyValue
  4358  1572  3411               	retlw	low _PWM4_LoadDutyValue
  4359  1573  3415               	retlw	high _PWM4_LoadDutyValue
  4360  1574  34FF               	retlw	low _PWM3_LoadDutyValue
  4361  1575  3414               	retlw	high _PWM3_LoadDutyValue
  4362  1576  34DB               	retlw	low _PWM1_LoadDutyValue
  4363  1577  3414               	retlw	high _PWM1_LoadDutyValue
  4364                           
  4365                           	psect	idataBANK3
  4366  0800                     __pidataBANK3:	
  4367                           
  4368                           ;initializer for Led_DynamicStorm@F8336
  4369  0800  3400               	retlw	0
  4370  0801  3400               	retlw	0
  4371  0802  3400               	retlw	0
  4372  0803  3400               	retlw	0
  4373  0804  3458               	retlw	88
  4374  0805  3402               	retlw	2
  4375  0806  3440               	retlw	64
  4376  0807  3400               	retlw	0
  4377  0808  3400               	retlw	0
  4378  0809  3400               	retlw	0
  4379                           
  4380                           	psect	stringtext
  4381  1800                     __pstringtext:	
  4382  1800                     _GAIN:	
  4383  1800  3407               	retlw	7
  4384  1801  3405               	retlw	5
  4385  1802  3403               	retlw	3
  4386  1803  3401               	retlw	1
  4387  1804  3400               	retlw	0
  4388  1805                     __end_of_GAIN:	
  4389  1805                     _VOLUME:	
  4390  1805  340E               	retlw	14
  4391  1806  3411               	retlw	17
  4392  1807  3414               	retlw	20
  4393  1808  3417               	retlw	23
  4394  1809  341A               	retlw	26
  4395  180A                     __end_of_VOLUME:	
  4396                           
  4397                           	psect	nvBANK0
  4398  005E                     __pnvBANK0:	
  4399  005E                     _txRemain:	
  4400  005E                     	ds	1
  4401                           
  4402                           	psect	nvBANK1
  4403  00E2                     __pnvBANK1:	
  4404  00E2                     _tmr0_isr_handler:	
  4405  00E2                     	ds	2
  4406  00E4                     _tmr1_gate_isr_handler:	
  4407  00E4                     	ds	2
  4408  00E6                     _tmr2_isr_handler:	
  4409  00E6                     	ds	2
  4410  00E8                     _tmr4_isr_handler:	
  4411  00E8                     	ds	2
  4412  0019                     _TMR1	set	25
  4413  000B                     _INTCONbits	set	11
  4414  0010                     _PIR0bits	set	16
  4415  0011                     _PIR1bits	set	17
  4416  0012                     _PIR2bits	set	18
  4417  001E                     _PR2	set	30
  4418  0017                     _T0CON0	set	23
  4419  0017                     _T0CON0bits	set	23
  4420  0018                     _T0CON1	set	24
  4421  001B                     _T1CON	set	27
  4422  001B                     _T1CONbits	set	27
  4423  001C                     _T1GCON	set	28
  4424  001F                     _T2CON	set	31
  4425  001F                     _T2CONbits	set	31
  4426  0016                     _TMR0H	set	22
  4427  0015                     _TMR0L	set	21
  4428  001D                     _TMR2	set	29
  4429  005F                     _GIE	set	95
  4430  009B                     _ADRES	set	155
  4431  009F                     _ADACT	set	159
  4432  009D                     _ADCON0	set	157
  4433  009D                     _ADCON0bits	set	157
  4434  009E                     _ADCON1	set	158
  4435  009C                     _ADRESH	set	156
  4436  009B                     _ADRESL	set	155
  4437  0090                     _PIE0bits	set	144
  4438  0091                     _PIE1bits	set	145
  4439  0092                     _PIE2bits	set	146
  4440  008C                     _TRISA	set	140
  4441  008D                     _TRISB	set	141
  4442  008E                     _TRISC	set	142
  4443  010C                     _LATA	set	268
  4444  010D                     _LATB	set	269
  4445  010E                     _LATC	set	270
  4446  019B                     _SP1BRG	set	411
  4447  018C                     _ANSELA	set	396
  4448  018D                     _ANSELB	set	397
  4449  018E                     _ANSELC	set	398
  4450  019F                     _BAUD1CON	set	415
  4451  019D                     _RC1STA	set	413
  4452  019E                     _TX1STA	set	414
  4453  019A                     _TXREG	set	410
  4454  020C                     _WPUA	set	524
  4455  020D                     _WPUB	set	525
  4456  020E                     _WPUC	set	526
  4457  0291                     _CCPR1	set	657
  4458  0295                     _CCPR2	set	661
  4459  0293                     _CCP1CON	set	659
  4460  0297                     _CCP2CON	set	663
  4461  029F                     _CCPTMRSbits	set	671
  4462  028C                     _ODCONA	set	652
  4463  028D                     _ODCONB	set	653
  4464  028E                     _ODCONC	set	654
  4465  0311                     _CCPR3	set	785
  4466  0315                     _CCPR4	set	789
  4467  0313                     _CCP3CON	set	787
  4468  0317                     _CCP4CON	set	791
  4469  0416                     _PR4	set	1046
  4470  0417                     _T4CON	set	1047
  4471  0417                     _T4CONbits	set	1047
  4472  0415                     _TMR4	set	1045
  4473  0617                     _PWM5DC	set	1559
  4474  0619                     _PWM5CON	set	1561
  4475  061F                     _PWMTMRSbits	set	1567
  4476  0892                     _NVMADRH	set	2194
  4477  0891                     _NVMADRL	set	2193
  4478  0895                     _NVMCON1bits	set	2197
  4479  0896                     _NVMCON2	set	2198
  4480  0893                     _NVMDATL	set	2195
  4481  0919                     _OSCCON1	set	2329
  4482  091B                     _OSCCON3	set	2331
  4483  091D                     _OSCEN	set	2333
  4484  091F                     _OSCFRQ	set	2335
  4485  091E                     _OSCTUNE	set	2334
  4486  0E0F                     _PPSLOCK	set	3599
  4487  0E0F                     _PPSLOCKbits	set	3599
  4488  0E13                     _T1GPPSbits	set	3603
  4489  0E92                     _RA2PPSbits	set	3730
  4490  0E9F                     _RB7PPSbits	set	3743
  4491  0EA1                     _RC1PPSbits	set	3745
  4492  0EA3                     _RC3PPSbits	set	3747
  4493  0EA5                     _RC5PPSbits	set	3749
  4494  0EA7                     _RC7PPSbits	set	3751
  4495                           
  4496                           ; #config settings
  4497  0000                     
  4498                           	psect	cinit
  4499  080A                     start_initialization:	
  4500  080A                     __initialization:	
  4501                           
  4502                           ; Initialize objects allocated to BANK1
  4503  080A  3050               	movlw	low __pidataBANK1
  4504  080B  0084               	movwf	4
  4505  080C  3095               	movlw	(high __pidataBANK1)| (0+128)
  4506  080D  0085               	movwf	5
  4507  080E  30A0               	movlw	low __pdataBANK1
  4508  080F  0086               	movwf	6
  4509  0810  3000               	movlw	high __pdataBANK1
  4510  0811  0087               	movwf	7
  4511  0812  3028               	movlw	40
  4512  0813  3194  24A5  3188   	fcall	init_ram
  4513                           
  4514                           ; Initialize objects allocated to BANK3
  4515  0816  3000               	movlw	low __pidataBANK3
  4516  0817  0084               	movwf	4
  4517  0818  3088               	movlw	(high __pidataBANK3)| (0+128)
  4518  0819  0085               	movwf	5
  4519  081A  30D2               	movlw	low __pdataBANK3
  4520  081B  0086               	movwf	6
  4521  081C  3001               	movlw	high __pdataBANK3
  4522  081D  0087               	movwf	7
  4523  081E  300A               	movlw	10
  4524  081F  3194  24A5  3188   	fcall	init_ram
  4525                           
  4526                           ; Clear objects allocated to BANK0
  4527  0822  3020               	movlw	low __pbssBANK0
  4528  0823  0084               	movwf	4
  4529  0824  3000               	movlw	high __pbssBANK0
  4530  0825  0085               	movwf	5
  4531  0826  3020               	movlw	32
  4532  0827  3194  249F  3188   	fcall	clear_ram0
  4533                           
  4534                           ; Clear objects allocated to BANK1
  4535  082A  30C8               	movlw	low __pbssBANK1
  4536  082B  0084               	movwf	4
  4537  082C  3000               	movlw	high __pbssBANK1
  4538  082D  0085               	movwf	5
  4539  082E  301A               	movlw	26
  4540  082F  3194  249F  3188   	fcall	clear_ram0
  4541                           
  4542                           ; Clear objects allocated to BANK2
  4543  0832  3020               	movlw	low __pbssBANK2
  4544  0833  0084               	movwf	4
  4545  0834  3001               	movlw	high __pbssBANK2
  4546  0835  0085               	movwf	5
  4547  0836  304C               	movlw	76
  4548  0837  3194  249F  3188   	fcall	clear_ram0
  4549                           
  4550                           ; Clear objects allocated to BANK3
  4551  083A  30A0               	movlw	low __pbssBANK3
  4552  083B  0084               	movwf	4
  4553  083C  3001               	movlw	high __pbssBANK3
  4554  083D  0085               	movwf	5
  4555  083E  3020               	movlw	32
  4556  083F  3194  249F  3188   	fcall	clear_ram0
  4557  0842                     end_of_initialization:	
  4558                           ;End of C runtime variable initialization code
  4559                           
  4560  0842                     __end_of__initialization:	
  4561  0842  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4562  0843  0020               	movlb	0
  4563  0844  2845               	ljmp	_main	;jump to C main() function
  4564  0845                     __pmaintext:	
  4565                           ; 1 bytes @ 0x1E
  4566 ;;
  4567 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4568 ;;
  4569 ;; *************** function _main *****************
  4570 ;; Defined at:
  4571 ;;		line 37 in file "user/src/main.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;		None
  4574 ;; Auto vars:     Size  Location     Type
  4575 ;;		None
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  1    wreg      void 
  4578 ;; Registers used:
  4579 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : B1F/0
  4582 ;;		On exit  : 1F/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4589 ;;Total ram usage:        0 bytes
  4590 ;; Hardware stack levels required when called:   13
  4591 ;; This function calls:
  4592 ;;		_Audio_GetValue
  4593 ;;		_IR_KeyAtionIfPressed
  4594 ;;		_IR_ResetIfTMR1Overflow
  4595 ;;		_IR_UpdateSetStatus
  4596 ;;		_Interrupt_Initialize
  4597 ;;		_Led_AutoRun
  4598 ;;		_Led_CheckAutoStatus
  4599 ;;		_Led_InitPara
  4600 ;;		_Led_Initialize
  4601 ;;		_Led_SaveParaIfChanged
  4602 ;;		_RTC_HourReady
  4603 ;;		_RTC_MinuteReady
  4604 ;;		_RTC_SecondReady
  4605 ;;		_SYSTEM_Initialize
  4606 ;;		_TMR0_StartTimer
  4607 ;;		_TMR1_StartTimer
  4608 ;;		_TMR2_StartTimer
  4609 ;; This function is called by:
  4610 ;;		Startup code after reset
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           
  4615                           ;psect for function _main
  4616  0845                     _main:	
  4617                           
  4618                           ;main.c: 38: SYSTEM_Initialize();
  4619                           
  4620                           ;incstack = 0
  4621                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4622  0845  3197  270F  3188   	fcall	_SYSTEM_Initialize
  4623                           
  4624                           ;main.c: 39: Interrupt_Initialize();
  4625  0848  269A               	fcall	_Interrupt_Initialize
  4626                           
  4627                           ;main.c: 40: (INTCONbits.GIE = 1);
  4628  0849  178B               	bsf	11,7	;volatile
  4629                           
  4630                           ;main.c: 41: (INTCONbits.PEIE = 1);
  4631  084A  170B               	bsf	11,6	;volatile
  4632                           
  4633                           ;main.c: 42: Led_InitPara();
  4634  084B  3196  2638  3188   	fcall	_Led_InitPara
  4635                           
  4636                           ;main.c: 43: Led_Initialize();
  4637  084E  20FE  3188         	fcall	_Led_Initialize
  4638                           
  4639                           ;main.c: 44: TMR0_StartTimer();
  4640  0850  26B5  3188         	fcall	_TMR0_StartTimer
  4641                           
  4642                           ;main.c: 45: TMR1_StartTimer();
  4643  0852  2648  3188         	fcall	_TMR1_StartTimer
  4644                           
  4645                           ;main.c: 46: TMR2_StartTimer();
  4646  0854  27E6  3188         	fcall	_TMR2_StartTimer
  4647  0856                     l505:	
  4648                           ;main.c: 48: while (1) {
  4649                           
  4650  0856  0064               	clrwdt	;# 
  4651                           
  4652                           ;main.c: 51: if (!gLedPara.mAuto && gLedPara.mOn && gLedPara.mDyn) {
  4653  0857  0022               	movlb	2	; select bank2
  4654  0858  1C20               	btfss	_gLedPara^(0+256),0	;volatile
  4655  0859  1CA0               	btfss	_gLedPara^(0+256),1	;volatile
  4656  085A  285F               	goto	l7112
  4657  085B  1FA0               	btfss	_gLedPara^(0+256),7	;volatile
  4658  085C  285F               	goto	l7112
  4659                           
  4660                           ;main.c: 52: Audio_GetValue();
  4661  085D  208D  3188         	fcall	_Audio_GetValue
  4662  085F                     l7112:	
  4663                           
  4664                           ;main.c: 53: }
  4665                           ;main.c: 54: IR_KeyAtionIfPressed();
  4666  085F  2644  3188         	fcall	_IR_KeyAtionIfPressed
  4667                           
  4668                           ;main.c: 55: IR_ResetIfTMR1Overflow();
  4669  0861  264B  3188         	fcall	_IR_ResetIfTMR1Overflow
  4670                           
  4671                           ;main.c: 56: Led_SaveParaIfChanged();
  4672  0863  2792  3188         	fcall	_Led_SaveParaIfChanged
  4673                           
  4674                           ;main.c: 58: if (RTC_HourReady()) {
  4675  0865  27D8  3188         	fcall	_RTC_HourReady
  4676                           
  4677                           ;main.c: 59: }
  4678                           ;main.c: 60: if (RTC_MinuteReady()) {
  4679  0867  27DD  3188         	fcall	_RTC_MinuteReady
  4680  0869  3A00               	xorlw	0
  4681  086A  1903               	skipnz
  4682  086B  2872               	goto	l7124
  4683                           
  4684                           ;main.c: 61: if (gLedPara.mAuto) {
  4685  086C  0022               	movlb	2	; select bank2
  4686  086D  1C20               	btfss	_gLedPara^(0+256),0	;volatile
  4687  086E  2872               	goto	l7124
  4688                           
  4689                           ;main.c: 62: Led_CheckAutoStatus();
  4690  086F  3195  25B4  3188   	fcall	_Led_CheckAutoStatus
  4691  0872                     l7124:	
  4692                           
  4693                           ;main.c: 63: }
  4694                           ;main.c: 64: }
  4695                           ;main.c: 65: if (RTC_SecondReady()) {
  4696  0872  27E1  3188         	fcall	_RTC_SecondReady
  4697  0874  3A00               	xorlw	0
  4698  0875  1903               	skipnz
  4699  0876  2856               	goto	l505
  4700                           
  4701                           ;main.c: 66: if (gLedPara.mAuto && ir_state.mState != 4 && ir_state.mState != 5) {
  4702  0877  0022               	movlb	2	; select bank2
  4703  0878  1C20               	btfss	_gLedPara^(0+256),0	;volatile
  4704  0879  288A               	goto	l7134
  4705  087A  0020               	movlb	0	; select bank0
  4706  087B  0C36               	rrf	_ir_state,w	;volatile
  4707  087C  0C89               	rrf	9,f
  4708  087D  3907               	andlw	7
  4709  087E  3A04               	xorlw	4
  4710  087F  1903               	skipnz
  4711  0880  288A               	goto	l7134
  4712  0881  0C36               	rrf	_ir_state,w	;volatile
  4713  0882  0C89               	rrf	9,f
  4714  0883  3907               	andlw	7
  4715  0884  3A05               	xorlw	5
  4716  0885  1903               	skipnz
  4717  0886  288A               	goto	l7134
  4718                           
  4719                           ;main.c: 67: Led_AutoRun();
  4720  0887  3180  2030  3188   	fcall	_Led_AutoRun
  4721  088A                     l7134:	
  4722                           
  4723                           ;main.c: 68: }
  4724                           ;main.c: 69: IR_UpdateSetStatus();
  4725  088A  268E  3188         	fcall	_IR_UpdateSetStatus
  4726  088C  2856               	goto	l505
  4727  088D                     __end_of_main:	
  4728  088D                     __ptext64:	
  4729 ;; *************** function _Audio_GetValue *****************
  4730 ;; Defined at:
  4731 ;;		line 59 in file "user/src/audio.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;		None
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;  value           2   24[BANK0 ] unsigned int 
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  1    wreg      void 
  4738 ;; Registers used:
  4739 ;;		wreg, status,2, status,0, pclath, cstack
  4740 ;; Tracked objects:
  4741 ;;		On entry : 1F/2
  4742 ;;		On exit  : 1F/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4748 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4749 ;;Total ram usage:        6 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    8
  4752 ;; This function calls:
  4753 ;;		_ADC_Conversion
  4754 ;;		___wmul
  4755 ;; This function is called by:
  4756 ;;		_main
  4757 ;; This function uses a non-reentrant model
  4758 ;;
  4759                           
  4760                           
  4761                           ;psect for function _Audio_GetValue
  4762  088D                     _Audio_GetValue:	
  4763                           
  4764                           ;audio.c: 61: static uint16_t max = 0;
  4765                           ;audio.c: 62: static uint16_t min = 0;
  4766                           ;audio.c: 63: static uint16_t cnt = 0;
  4767                           ;audio.c: 64: uint16_t value;
  4768                           ;audio.c: 66: value = ADC_Conversion ( 0x12 );
  4769                           
  4770                           ;incstack = 0
  4771                           ; Regs used in _Audio_GetValue: [wreg+status,2+status,0+pclath+cstack]
  4772  088D  3012               	movlw	18
  4773  088E  20DD  3188         	fcall	_ADC_Conversion
  4774  0890  084F               	movf	?_ADC_Conversion+1,w
  4775  0891  00D9               	movwf	Audio_GetValue@value+1
  4776  0892  084E               	movf	?_ADC_Conversion,w
  4777  0893  00D8               	movwf	Audio_GetValue@value
  4778                           
  4779                           ;audio.c: 67: if ( cnt == 0 )
  4780  0894  0820               	movf	Audio_GetValue@cnt,w
  4781  0895  0421               	iorwf	Audio_GetValue@cnt+1,w
  4782  0896  1D03               	btfss	3,2
  4783  0897  289B               	goto	l6874
  4784                           
  4785                           ;audio.c: 68: {
  4786                           ;audio.c: 69: max = value;
  4787  0898  2773  3188         	fcall	PL102	;call to abstracted procedure
  4788  089A  28AD               	goto	l6878
  4789  089B                     l6874:	
  4790                           ;audio.c: 71: }
  4791                           
  4792                           ;audio.c: 70: min = value;
  4793                           
  4794                           
  4795                           ;audio.c: 72: else
  4796                           ;audio.c: 73: {
  4797                           ;audio.c: 74: if ( max < value )
  4798  089B  0859               	movf	Audio_GetValue@value+1,w
  4799  089C  0223               	subwf	Audio_GetValue@max+1,w
  4800  089D  1D03               	skipz
  4801  089E  28A1               	goto	u5765
  4802  089F  0858               	movf	Audio_GetValue@value,w
  4803  08A0  0222               	subwf	Audio_GetValue@max,w
  4804  08A1                     u5765:	
  4805  08A1  1803               	skipnc
  4806  08A2  28A5               	goto	l343
  4807                           
  4808                           ;audio.c: 75: {
  4809                           ;audio.c: 76: max = value;
  4810  08A3  2773  3188         	fcall	PL102	;call to abstracted procedure
  4811  08A5                     l343:	
  4812                           
  4813                           ;audio.c: 77: }
  4814                           ;audio.c: 78: if ( min > value )
  4815  08A5  0825               	movf	Audio_GetValue@min+1,w
  4816  08A6  0259               	subwf	Audio_GetValue@value+1,w
  4817  08A7  1D03               	skipz
  4818  08A8  28AB               	goto	u5775
  4819  08A9  0824               	movf	Audio_GetValue@min,w
  4820  08AA  0258               	subwf	Audio_GetValue@value,w
  4821  08AB                     u5775:	
  4822  08AB  1803               	skipnc
  4823  08AC  28B1               	goto	l6880
  4824  08AD                     l6878:	
  4825                           
  4826                           ;audio.c: 79: {
  4827                           ;audio.c: 80: min = value;
  4828  08AD  0859               	movf	Audio_GetValue@value+1,w
  4829  08AE  00A5               	movwf	Audio_GetValue@min+1
  4830  08AF  0858               	movf	Audio_GetValue@value,w
  4831  08B0  00A4               	movwf	Audio_GetValue@min
  4832  08B1                     l6880:	
  4833                           
  4834                           ;audio.c: 81: }
  4835                           ;audio.c: 82: }
  4836                           ;audio.c: 83: cnt++;
  4837  08B1  0AA0               	incf	Audio_GetValue@cnt,f
  4838  08B2  1903               	skipnz
  4839  08B3  0AA1               	incf	Audio_GetValue@cnt+1,f
  4840                           
  4841                           ;audio.c: 84: if ( cnt >= 256 )
  4842  08B4  3001               	movlw	1
  4843  08B5  0221               	subwf	Audio_GetValue@cnt+1,w
  4844  08B6  3000               	movlw	0
  4845  08B7  1903               	skipnz
  4846  08B8  0220               	subwf	Audio_GetValue@cnt,w
  4847  08B9  1C03               	skipc
  4848  08BA  0008               	return
  4849                           
  4850                           ;audio.c: 85: {
  4851                           ;audio.c: 86: cnt = 0;
  4852  08BB  01A0               	clrf	Audio_GetValue@cnt
  4853  08BC  01A1               	clrf	Audio_GetValue@cnt+1
  4854                           
  4855                           ;audio.c: 87: (INTCONbits.GIE = 0);
  4856  08BD  138B               	bcf	11,7	;volatile
  4857                           
  4858                           ;audio.c: 88: audio_value = ( audio_value * 15 + max - min ) >> 4;
  4859  08BE  082D               	movf	_audio_value+1,w	;volatile
  4860  08BF  00CF               	movwf	___wmul@multiplier+1
  4861  08C0  082C               	movf	_audio_value,w	;volatile
  4862  08C1  00CE               	movwf	___wmul@multiplier
  4863  08C2  300F               	movlw	15
  4864  08C3  00D0               	movwf	___wmul@multiplicand
  4865  08C4  01D1               	clrf	___wmul@multiplicand+1
  4866  08C5  24D1               	fcall	___wmul
  4867  08C6  0824               	movf	Audio_GetValue@min,w
  4868  08C7  024E               	subwf	?___wmul,w
  4869  08C8  00D4               	movwf	??_Audio_GetValue
  4870  08C9  0825               	movf	Audio_GetValue@min+1,w
  4871  08CA  3B4F               	subwfb	?___wmul+1,w
  4872  08CB  00D5               	movwf	??_Audio_GetValue+1
  4873  08CC  0822               	movf	Audio_GetValue@max,w
  4874  08CD  0754               	addwf	??_Audio_GetValue,w
  4875  08CE  00D6               	movwf	??_Audio_GetValue+2
  4876  08CF  0823               	movf	Audio_GetValue@max+1,w
  4877  08D0  3D55               	addwfc	??_Audio_GetValue+1,w
  4878  08D1  00D7               	movwf	??_Audio_GetValue+3
  4879  08D2  0E56               	swapf	??_Audio_GetValue+2,w
  4880  08D3  390F               	andlw	15
  4881  08D4  00AC               	movwf	_audio_value	;volatile
  4882  08D5  0E57               	swapf	??_Audio_GetValue+3,w
  4883  08D6  39F0               	andlw	240
  4884  08D7  04AC               	iorwf	_audio_value,f	;volatile
  4885  08D8  0E57               	swapf	??_Audio_GetValue+3,w
  4886  08D9  390F               	andlw	15
  4887  08DA  00AD               	movwf	_audio_value+1	;volatile
  4888                           
  4889                           ;audio.c: 89: (INTCONbits.GIE = 1);
  4890  08DB  178B               	bsf	11,7	;volatile
  4891  08DC  0008               	return
  4892  08DD                     __end_of_Audio_GetValue:	
  4893  08DD                     __ptext66:	
  4894 ;; *************** function _ADC_Conversion *****************
  4895 ;; Defined at:
  4896 ;;		line 23 in file "driver/src/adc.c"
  4897 ;; Parameters:    Size  Location     Type
  4898 ;;  chn             1    wreg     unsigned char 
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;  chn             1   17[BANK0 ] unsigned char 
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  2   14[BANK0 ] unsigned int 
  4903 ;; Registers used:
  4904 ;;		wreg, status,2, status,0
  4905 ;; Tracked objects:
  4906 ;;		On entry : 1F/2
  4907 ;;		On exit  : 1F/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4910 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4913 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4914 ;;Total ram usage:        4 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; Hardware stack levels required when called:    7
  4917 ;; This function calls:
  4918 ;;		Nothing
  4919 ;; This function is called by:
  4920 ;;		_Audio_GetValue
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           
  4925                           ;psect for function _ADC_Conversion
  4926  08DD                     _ADC_Conversion:	
  4927                           
  4928                           ;incstack = 0
  4929                           ; Regs used in _ADC_Conversion: [wreg+status,2+status,0]
  4930                           ;ADC_Conversion@chn stored from wreg
  4931  08DD  0020               	movlb	0	; select bank0
  4932  08DE  00D1               	movwf	ADC_Conversion@chn
  4933                           
  4934                           ;adc.c: 25: ADCON0bits.CHS = chn;
  4935  08DF  00D0               	movwf	??_ADC_Conversion
  4936  08E0  0DD0               	rlf	??_ADC_Conversion,f
  4937  08E1  0DD0               	rlf	??_ADC_Conversion,f
  4938  08E2  0021               	movlb	1	; select bank1
  4939  08E3  081D               	movf	29,w	;volatile
  4940  08E4  0020               	movlb	0	; select bank0
  4941  08E5  0650               	xorwf	??_ADC_Conversion,w
  4942  08E6  3903               	andlw	-253
  4943  08E7  0650               	xorwf	??_ADC_Conversion,w
  4944  08E8  0021               	movlb	1	; select bank1
  4945  08E9  009D               	movwf	29	;volatile
  4946                           
  4947                           ;adc.c: 26: ADCON0bits.ADON = 1;
  4948  08EA  141D               	bsf	29,0	;volatile
  4949                           
  4950                           ;adc.c: 27: _delay((unsigned long)((4)*(16000000/4000000.0)));
  4951  08EB  3005               	movlw	5
  4952  08EC                     u6307:	
  4953  08EC  0B89               	decfsz	9,f
  4954  08ED  28EC               	goto	u6307
  4955  08EE  0000               	nop
  4956                           
  4957                           ;adc.c: 28: ADCON0bits.GO_nDONE = 1;
  4958  08EF  0021               	movlb	1	; select bank1
  4959  08F0  149D               	bsf	29,1	;volatile
  4960  08F1                     l26:	
  4961                           ;adc.c: 29: while ( !PIR1bits.ADIF );
  4962                           
  4963  08F1  0020               	movlb	0	; select bank0
  4964  08F2  1F11               	btfss	17,6	;volatile
  4965  08F3  28F1               	goto	l26
  4966                           
  4967                           ;adc.c: 30: PIR1bits.ADIF = 0;
  4968  08F4  1311               	bcf	17,6	;volatile
  4969                           
  4970                           ;adc.c: 31: return ADRES;
  4971  08F5  0021               	movlb	1	; select bank1
  4972  08F6  081C               	movf	28,w	;volatile
  4973  08F7  0020               	movlb	0	; select bank0
  4974  08F8  00CF               	movwf	?_ADC_Conversion+1
  4975  08F9  0021               	movlb	1	; select bank1
  4976  08FA  081B               	movf	27,w	;volatile
  4977  08FB  0020               	movlb	0	; select bank0
  4978  08FC  00CE               	movwf	?_ADC_Conversion
  4979  08FD  0008               	return
  4980  08FE                     __end_of_ADC_Conversion:	
  4981  08FE                     __ptext50:	
  4982 ;; *************** function _Led_Initialize *****************
  4983 ;; Defined at:
  4984 ;;		line 54 in file "user/src/led.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;		None
  4987 ;; Auto vars:     Size  Location     Type
  4988 ;;  i               1   27[BANK0 ] unsigned char 
  4989 ;;  result          1   24[BANK0 ] unsigned char 
  4990 ;;  ct              2   25[BANK0 ] unsigned int 
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  1    wreg      void 
  4993 ;; Registers used:
  4994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4995 ;; Tracked objects:
  4996 ;;		On entry : 14/0
  4997 ;;		On exit  : 1F/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5001 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5002 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5003 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5004 ;;Total ram usage:        8 bytes
  5005 ;; Hardware stack levels used:    1
  5006 ;; Hardware stack levels required when called:    9
  5007 ;; This function calls:
  5008 ;;		_Audio_SetPlayMode
  5009 ;;		_Audio_SetVolume
  5010 ;;		_Audio_StopSound
  5011 ;;		_Led_TurnOffRamp
  5012 ;;		_Led_TurnOnRamp
  5013 ;;		_Led_UpdateBright
  5014 ;;		_RTC_GetTime
  5015 ;;		___wmul
  5016 ;; This function is called by:
  5017 ;;		_main
  5018 ;;		_IR_ExitSet
  5019 ;;		_IR_ExitTimeout
  5020 ;;		_IR_KeyAction
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           
  5025                           ;psect for function _Led_Initialize
  5026  08FE                     _Led_Initialize:	
  5027  08FE                     l5928:	
  5028                           ;incstack = 0
  5029                           ; Regs used in _Led_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5030                           
  5031                           
  5032                           ;led.c: 55: _delay((unsigned long)((480)*(16000000/4000.0)));
  5033  08FE  300A               	movlw	10
  5034  08FF  0020               	movlb	0	; select bank0
  5035  0900  00D5               	movwf	??_Led_Initialize+1
  5036  0901  30BE               	movlw	190
  5037  0902  00D4               	movwf	??_Led_Initialize
  5038  0903  3079               	movlw	121
  5039  0904                     u6267:	
  5040  0904  0B89               	decfsz	9,f
  5041  0905  2904               	goto	u6267
  5042  0906  0BD4               	decfsz	??_Led_Initialize,f
  5043  0907  2904               	goto	u6267
  5044  0908  0BD5               	decfsz	??_Led_Initialize+1,f
  5045  0909  2904               	goto	u6267
  5046                           
  5047                           ;led.c: 56: Audio_StopSound();
  5048  090A  24BF  3188         	fcall	_Audio_StopSound
  5049                           
  5050                           ;led.c: 57: _delay((unsigned long)((48)*(16000000/4000.0)));
  5051  090C  30FA               	movlw	250
  5052  090D  0020               	movlb	0	; select bank0
  5053  090E  00D4               	movwf	??_Led_Initialize
  5054  090F  3058               	movlw	88
  5055  0910                     u6277:	
  5056  0910  0B89               	decfsz	9,f
  5057  0911  2910               	goto	u6277
  5058  0912  0BD4               	decfsz	??_Led_Initialize,f
  5059  0913  2910               	goto	u6277
  5060  0914  0000               	nop
  5061                           
  5062                           ;led.c: 58: Audio_SetVolume(gLedPara.mVolOn ? VOLUME[ gLedPara.mVolume ] : 0);
  5063  0915  0022               	movlb	2	; select bank2
  5064  0916  1920               	btfsc	_gLedPara^(0+256),2	;volatile
  5065  0917  291B               	goto	l5938
  5066  0918  0020               	movlb	0	; select bank0
  5067  0919  01D6               	clrf	_Led_Initialize$1200
  5068  091A  291F               	goto	L17
  5069  091B                     l5938:	
  5070  091B  2708  3188         	fcall	PL30	;call to abstracted procedure
  5071  091D  0020               	movlb	0	; select bank0
  5072  091E  00D6               	movwf	_Led_Initialize$1200
  5073  091F                     L17:	
  5074  091F  01D7               	clrf	_Led_Initialize$1200+1
  5075  0920  0856               	movf	_Led_Initialize$1200,w
  5076  0921  220D  3188         	fcall	_Audio_SetVolume
  5077                           
  5078                           ;led.c: 59: _delay((unsigned long)((48)*(16000000/4000.0)));
  5079  0923  30FA               	movlw	250
  5080  0924  0020               	movlb	0	; select bank0
  5081  0925  00D4               	movwf	??_Led_Initialize
  5082  0926  3058               	movlw	88
  5083  0927                     u6287:	
  5084  0927  0B89               	decfsz	9,f
  5085  0928  2927               	goto	u6287
  5086  0929  0BD4               	decfsz	??_Led_Initialize,f
  5087  092A  2927               	goto	u6287
  5088  092B  0000               	nop
  5089                           
  5090                           ;led.c: 60: Audio_SetPlayMode(0x02);
  5091  092C  3002               	movlw	2
  5092  092D  21F6  3188         	fcall	_Audio_SetPlayMode
  5093                           
  5094                           ;led.c: 61: _delay((unsigned long)((48)*(16000000/4000.0)));
  5095  092F  30FA               	movlw	250
  5096  0930  0020               	movlb	0	; select bank0
  5097  0931  00D4               	movwf	??_Led_Initialize
  5098  0932  3058               	movlw	88
  5099  0933                     u6297:	
  5100  0933  0B89               	decfsz	9,f
  5101  0934  2933               	goto	u6297
  5102  0935  0BD4               	decfsz	??_Led_Initialize,f
  5103  0936  2933               	goto	u6297
  5104  0937  0000               	nop
  5105                           
  5106                           ;led.c: 62: uint16_t ct = RTC_GetTime()->hour * 60u + RTC_GetTime()->minute;
  5107  0938  2556  3188         	fcall	_RTC_GetTime
  5108  093A  2749  3188         	fcall	PL54	;call to abstracted procedure
  5109  093C  24D1  3188         	fcall	___wmul
  5110  093E  084F               	movf	?___wmul+1,w
  5111  093F  00DA               	movwf	Led_Initialize@ct+1
  5112  0940  084E               	movf	?___wmul,w
  5113  0941  00D9               	movwf	Led_Initialize@ct
  5114  0942  2556  3188         	fcall	_RTC_GetTime
  5115  0944  0020               	movlb	0	; select bank0
  5116  0945  00D4               	movwf	??_Led_Initialize
  5117  0946  3E01               	addlw	1
  5118  0947  0086               	movwf	6
  5119  0948  0187               	clrf	7
  5120  0949  0801               	movf	1,w
  5121  094A  07D9               	addwf	Led_Initialize@ct,f
  5122  094B  1803               	skipnc
  5123  094C  0ADA               	incf	Led_Initialize@ct+1,f
  5124                           
  5125                           ;led.c: 63: if (!gLedPara.mAuto) {
  5126  094D  0022               	movlb	2	; select bank2
  5127  094E  1820               	btfsc	_gLedPara^(0+256),0	;volatile
  5128  094F  299A               	goto	l6010
  5129                           
  5130                           ;led.c: 64: if (!gLedPara.mOn) {
  5131  0950  18A0               	btfsc	_gLedPara^(0+256),1	;volatile
  5132  0951  2953               	goto	l5958
  5133                           
  5134                           ;led.c: 65: Led_TurnOffRamp();
  5135  0952  2A24               	ljmp	l5860
  5136  0953                     l5958:	
  5137                           ;led.c: 66: } else {
  5138                           
  5139                           
  5140                           ;led.c: 67: if (gLedPara.mMsc) {
  5141  0953  2753  3188         	fcall	PL58	;call to abstracted procedure
  5142  0955  1903               	skipnz
  5143  0956  2998               	goto	l6008
  5144                           
  5145                           ;led.c: 68: gLedRunPara.music_index = gLedPara.mMsc;
  5146  0957  0022               	movlb	2	; select bank2
  5147  0958  2753  3188         	fcall	PL58	;call to abstracted procedure
  5148  095A  0021               	movlb	1	; select bank1
  5149  095B  00E0               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
  5150                           
  5151                           ;led.c: 69: gLedRunPara.music_state = 1;
  5152  095C  3001               	movlw	1
  5153  095D  00E1               	movwf	(_gLedRunPara^(0+128)+25)	;volatile
  5154                           
  5155                           ;led.c: 70: switch (gLedPara.mMsc) {
  5156  095E  2988               	goto	l6006
  5157  095F                     l5964:	
  5158                           
  5159                           ;led.c: 72: gLedRunPara.mCurrentBright[0] = 1000;
  5160  095F  276D  3188         	fcall	PL94	;call to abstracted procedure
  5161                           
  5162                           ;led.c: 73: gLedRunPara.mCurrentBright[1] = 1000;
  5163  0961  00CB               	movwf	((_gLedRunPara+1)^(0+128)+2)	;volatile
  5164  0962  30E8               	movlw	232
  5165  0963  00CA               	movwf	(_gLedRunPara^(0+128)+2)	;volatile
  5166  0964                     l5968:	
  5167                           
  5168                           ;led.c: 74: gLedRunPara.mCurrentBright[2] = 1000;
  5169  0964  3003               	movlw	3
  5170  0965  00CD               	movwf	((_gLedRunPara+1)^(0+128)+4)	;volatile
  5171  0966  30E8               	movlw	232
  5172  0967  00CC               	movwf	(_gLedRunPara^(0+128)+4)	;volatile
  5173                           
  5174                           ;led.c: 75: gLedRunPara.mCurrentBright[3] = 1000;
  5175  0968  3003               	movlw	3
  5176  0969  00CF               	movwf	((_gLedRunPara+1)^(0+128)+6)	;volatile
  5177  096A  30E8               	movlw	232
  5178  096B  00CE               	movwf	(_gLedRunPara^(0+128)+6)	;volatile
  5179                           
  5180                           ;led.c: 76: gLedRunPara.mCurrentBright[4] = 1000;
  5181  096C  3003               	movlw	3
  5182  096D  00D1               	movwf	((_gLedRunPara+1)^(0+128)+8)	;volatile
  5183  096E  30E8               	movlw	232
  5184  096F  00D0               	movwf	(_gLedRunPara^(0+128)+8)	;volatile
  5185  0970                     l5974:	
  5186                           
  5187                           ;led.c: 77: Led_UpdateBright();
  5188  0970  2A46               	ljmp	l5874
  5189  0971                     l5976:	
  5190                           ;led.c: 78: break;
  5191                           
  5192                           
  5193                           ;led.c: 80: gLedRunPara.mCurrentBright[0] = 0;
  5194  0971  0021               	movlb	1	; select bank1
  5195  0972  01C8               	clrf	_gLedRunPara^(0+128)	;volatile
  5196  0973  01C9               	clrf	(_gLedRunPara+1)^(0+128)	;volatile
  5197                           
  5198                           ;led.c: 81: gLedRunPara.mCurrentBright[1] = 0;
  5199  0974  01CA               	clrf	(_gLedRunPara^(0+128)+2)	;volatile
  5200  0975  01CB               	clrf	((_gLedRunPara+1)^(0+128)+2)	;volatile
  5201                           
  5202                           ;led.c: 82: gLedRunPara.mCurrentBright[2] = 1000;
  5203  0976  3003               	movlw	3
  5204  0977  00CD               	movwf	((_gLedRunPara+1)^(0+128)+4)	;volatile
  5205  0978  30E8               	movlw	232
  5206  0979  00CC               	movwf	(_gLedRunPara^(0+128)+4)	;volatile
  5207                           
  5208                           ;led.c: 83: gLedRunPara.mCurrentBright[3] = 0;
  5209  097A  01CE               	clrf	(_gLedRunPara^(0+128)+6)	;volatile
  5210  097B  01CF               	clrf	((_gLedRunPara+1)^(0+128)+6)	;volatile
  5211                           
  5212                           ;led.c: 84: gLedRunPara.mCurrentBright[4] = 0;
  5213  097C  01D0               	clrf	(_gLedRunPara^(0+128)+8)	;volatile
  5214  097D  01D1               	clrf	((_gLedRunPara+1)^(0+128)+8)	;volatile
  5215  097E  2970               	goto	l5974
  5216  097F                     l5982:	
  5217                           
  5218                           ;led.c: 88: gLedRunPara.mCurrentBright[0] = 0;
  5219  097F  0021               	movlb	1	; select bank1
  5220  0980  01C8               	clrf	_gLedRunPara^(0+128)	;volatile
  5221  0981  01C9               	clrf	(_gLedRunPara+1)^(0+128)	;volatile
  5222  0982  2985               	goto	l5994
  5223  0983                     l5992:	
  5224                           ;led.c: 89: gLedRunPara.mCurrentBright[1] = 0;
  5225                           
  5226                           
  5227                           ;led.c: 96: gLedRunPara.mCurrentBright[0] = 1000;
  5228  0983  276D  3188         	fcall	PL94	;call to abstracted procedure
  5229  0985                     l5994:	
  5230                           
  5231                           ;led.c: 97: gLedRunPara.mCurrentBright[1] = 0;
  5232  0985  01CA               	clrf	(_gLedRunPara^(0+128)+2)	;volatile
  5233  0986  01CB               	clrf	((_gLedRunPara+1)^(0+128)+2)	;volatile
  5234  0987  2964               	goto	l5968
  5235  0988                     l6006:	
  5236  0988  0022               	movlb	2	; select bank2
  5237  0989  2753  3188         	fcall	PL58	;call to abstracted procedure
  5238                           
  5239                           ; Switch size 1, requested type "space"
  5240                           ; Number of cases is 4, Range of values is 1 to 4
  5241                           ; switch strategies available:
  5242                           ; Name         Instructions Cycles
  5243                           ; simple_byte           13     7 (average)
  5244                           ; direct_byte           17     9 (fixed)
  5245                           ; jumptable            263     9 (fixed)
  5246                           ;	Chosen strategy is simple_byte
  5247  098B  3A01               	xorlw	1	; case 1
  5248  098C  1903               	skipnz
  5249  098D  295F               	goto	l5964
  5250  098E  3A03               	xorlw	3	; case 2
  5251  098F  1903               	skipnz
  5252  0990  2971               	goto	l5976
  5253  0991  3A01               	xorlw	1	; case 3
  5254  0992  1903               	skipnz
  5255  0993  297F               	goto	l5982
  5256  0994  3A07               	xorlw	7	; case 4
  5257  0995  1903               	skipnz
  5258  0996  2983               	goto	l5992
  5259  0997  2999               	goto	l628
  5260  0998                     l6008:	
  5261                           
  5262                           ;led.c: 107: Led_TurnOnRamp();
  5263  0998  2234               	fcall	_Led_TurnOnRamp
  5264  0999                     l628:	
  5265                           
  5266                           ;led.c: 108: }
  5267                           ;led.c: 109: }
  5268                           ;led.c: 110: } else {
  5269  0999  0008               	return
  5270  099A                     l6010:	
  5271                           
  5272                           ;led.c: 111: bool result = 0;
  5273  099A  0020               	movlb	0	; select bank0
  5274  099B  01D8               	clrf	Led_Initialize@result
  5275                           
  5276                           ;led.c: 112: uint8_t i;
  5277                           ;led.c: 113: if (gLedPara.mSunrise < gLedPara.mSunset) {
  5278  099C  0022               	movlb	2	; select bank2
  5279  099D  0861               	movf	((_gLedPara+1)^(0+256)+64),w	;volatile
  5280  099E  0255               	subwf	((_gLedPara+1)^(0+256)+52),w	;volatile
  5281  099F  1D03               	skipz
  5282  09A0  29A3               	goto	u4815
  5283  09A1  0860               	movf	(_gLedPara^(0+256)+64),w	;volatile
  5284  09A2  0254               	subwf	(_gLedPara^(0+256)+52),w	;volatile
  5285  09A3                     u4815:	
  5286  09A3  1803               	skipnc
  5287  09A4  29AF               	goto	l6020
  5288                           
  5289                           ;led.c: 114: if (ct >= gLedPara.mSunrise && ct < gLedPara.mSunset) {
  5290  09A5  0855               	movf	((_gLedPara+1)^(0+256)+52),w	;volatile
  5291  09A6  0020               	movlb	0	; select bank0
  5292  09A7  025A               	subwf	Led_Initialize@ct+1,w
  5293  09A8  1D03               	skipz
  5294  09A9  29AC               	goto	u4825
  5295  09AA  2778  3188         	fcall	PL108	;call to abstracted procedure
  5296  09AC                     u4825:	
  5297  09AC  1C03               	skipc
  5298  09AD  29CE               	goto	l6026
  5299  09AE  29C0               	goto	L18
  5300  09AF                     l6020:	
  5301  09AF  0855               	movf	((_gLedPara+1)^(0+256)+52),w	;volatile
  5302  09B0  0261               	subwf	((_gLedPara+1)^(0+256)+64),w	;volatile
  5303  09B1  1D03               	skipz
  5304  09B2  29B5               	goto	u4845
  5305  09B3  0854               	movf	(_gLedPara^(0+256)+52),w	;volatile
  5306  09B4  0260               	subwf	(_gLedPara^(0+256)+64),w	;volatile
  5307  09B5                     u4845:	
  5308  09B5  1803               	skipnc
  5309  09B6  29CE               	goto	l6026
  5310                           
  5311                           ;led.c: 118: if (ct >= gLedPara.mSunrise || ct < gLedPara.mSunset) {
  5312  09B7  0855               	movf	((_gLedPara+1)^(0+256)+52),w	;volatile
  5313  09B8  0020               	movlb	0	; select bank0
  5314  09B9  025A               	subwf	Led_Initialize@ct+1,w
  5315  09BA  1D03               	skipz
  5316  09BB  29BE               	goto	u4855
  5317  09BC  2778  3188         	fcall	PL108	;call to abstracted procedure
  5318  09BE                     u4855:	
  5319  09BE  1803               	skipnc
  5320  09BF  29CC               	goto	l6018
  5321  09C0                     L18:	
  5322  09C0  0022               	movlb	2	; select bank2
  5323  09C1  0861               	movf	((_gLedPara+1)^(0+256)+64),w	;volatile
  5324  09C2  0020               	movlb	0	; select bank0
  5325  09C3  025A               	subwf	Led_Initialize@ct+1,w
  5326  09C4  1D03               	skipz
  5327  09C5  29CA               	goto	u4865
  5328  09C6  0022               	movlb	2	; select bank2
  5329  09C7  0860               	movf	(_gLedPara^(0+256)+64),w	;volatile
  5330  09C8  0020               	movlb	0	; select bank0
  5331  09C9  0259               	subwf	Led_Initialize@ct,w
  5332  09CA                     u4865:	
  5333  09CA  1803               	skipnc
  5334  09CB  29CE               	goto	l6026
  5335  09CC                     l6018:	
  5336                           
  5337                           ;led.c: 115: result = 1;
  5338  09CC  01D8               	clrf	Led_Initialize@result
  5339  09CD  0AD8               	incf	Led_Initialize@result,f
  5340  09CE                     l6026:	
  5341                           
  5342                           ;led.c: 120: }
  5343                           ;led.c: 121: }
  5344                           ;led.c: 122: if (result) {
  5345  09CE  0020               	movlb	0	; select bank0
  5346  09CF  0858               	movf	Led_Initialize@result,w
  5347  09D0  1903               	btfsc	3,2
  5348  09D1  29E4               	goto	l6040
  5349                           
  5350                           ;led.c: 123: for (i = 0; i < 5; i++) {
  5351  09D2  01DB               	clrf	Led_Initialize@i
  5352  09D3                     l6034:	
  5353                           
  5354                           ;led.c: 124: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
  5355  09D3  355B               	lslf	Led_Initialize@i,w
  5356  09D4  3E56               	addlw	(low ((_gLedPara| (0+256)+54)))& (0+255)
  5357  09D5  271E  3188         	fcall	PL34	;call to abstracted procedure
  5358  09D7  26B7  3188         	fcall	PL2	;call to abstracted procedure
  5359                           
  5360                           ;led.c: 125: gLedRunPara.mCurrentBright[i] = gLedPara.mDayBright[i];
  5361  09D9  355B               	lslf	Led_Initialize@i,w
  5362  09DA  3E56               	addlw	(low ((_gLedPara| (0+256)+54)))& (0+255)
  5363  09DB  2723  3188         	fcall	PL40	;call to abstracted procedure
  5364  09DD  26EA  3188         	fcall	PL24	;call to abstracted procedure
  5365  09DF  0ADB               	incf	Led_Initialize@i,f
  5366  09E0  025B               	subwf	Led_Initialize@i,w
  5367  09E1  1803               	btfsc	3,0
  5368  09E2  2970               	goto	l5974
  5369  09E3  29D3               	goto	l6034
  5370  09E4                     l6040:	
  5371                           
  5372                           ;led.c: 128: for (i = 0; i < 5; i++) {
  5373  09E4  01DB               	clrf	Led_Initialize@i
  5374  09E5                     l6046:	
  5375                           
  5376                           ;led.c: 129: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
  5377  09E5  355B               	lslf	Led_Initialize@i,w
  5378  09E6  3E62               	addlw	(low ((_gLedPara| (0+256)+66)))& (0+255)
  5379  09E7  271E  3188         	fcall	PL34	;call to abstracted procedure
  5380  09E9  26B7  3188         	fcall	PL2	;call to abstracted procedure
  5381                           
  5382                           ;led.c: 130: gLedRunPara.mCurrentBright[i] = gLedPara.mNightBright[i];
  5383  09EB  355B               	lslf	Led_Initialize@i,w
  5384  09EC  3E62               	addlw	(low ((_gLedPara| (0+256)+66)))& (0+255)
  5385  09ED  2723  3188         	fcall	PL40	;call to abstracted procedure
  5386  09EF  26EA  3188         	fcall	PL24	;call to abstracted procedure
  5387  09F1  0ADB               	incf	Led_Initialize@i,f
  5388  09F2  025B               	subwf	Led_Initialize@i,w
  5389  09F3  1803               	btfsc	3,0
  5390  09F4  2970               	goto	l5974
  5391  09F5  29E5               	goto	l6046
  5392  09F6                     __end_of_Led_Initialize:	
  5393  09F6                     __ptext62:	
  5394 ;; *************** function _Audio_SetPlayMode *****************
  5395 ;; Defined at:
  5396 ;;		line 37 in file "user/src/audio.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;  type            1    wreg     unsigned char 
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;  type            1   15[BANK0 ] unsigned char 
  5401 ;;  checksum        1   16[BANK0 ] unsigned char 
  5402 ;; Return value:  Size  Location     Type
  5403 ;;                  1    wreg      void 
  5404 ;; Registers used:
  5405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 1F/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5415 ;;Total ram usage:        2 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:    8
  5418 ;; This function calls:
  5419 ;;		_EUSART_Write
  5420 ;; This function is called by:
  5421 ;;		_Led_Initialize
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           
  5426                           ;psect for function _Audio_SetPlayMode
  5427  09F6                     _Audio_SetPlayMode:	
  5428                           
  5429                           ;incstack = 0
  5430                           ; Regs used in _Audio_SetPlayMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5431                           ;Audio_SetPlayMode@type stored from wreg
  5432  09F6  0020               	movlb	0	; select bank0
  5433  09F7  00CF               	movwf	Audio_SetPlayMode@type
  5434  09F8  307E               	movlw	126
  5435                           
  5436                           ;audio.c: 39: uint8_t checksum = 0x00;
  5437  09F9  01D0               	clrf	Audio_SetPlayMode@checksum
  5438                           
  5439                           ;audio.c: 40: EUSART_Write ( 0x7E );
  5440  09FA  24E6  3188         	fcall	_EUSART_Write
  5441                           
  5442                           ;audio.c: 41: checksum ^= EUSART_Write ( 0x04 );
  5443  09FC  3004               	movlw	4
  5444  09FD  24E6  3188         	fcall	_EUSART_Write
  5445  09FF  06D0               	xorwf	Audio_SetPlayMode@checksum,f
  5446                           
  5447                           ;audio.c: 42: checksum ^= EUSART_Write ( 0x33 );
  5448  0A00  3033               	movlw	51
  5449  0A01  24E6  3188         	fcall	_EUSART_Write
  5450  0A03  06D0               	xorwf	Audio_SetPlayMode@checksum,f
  5451                           
  5452                           ;audio.c: 43: checksum ^= EUSART_Write ( type );
  5453  0A04  084F               	movf	Audio_SetPlayMode@type,w
  5454  0A05  24E6  3188         	fcall	_EUSART_Write
  5455  0A07  06D0               	xorwf	Audio_SetPlayMode@checksum,f
  5456                           
  5457                           ;audio.c: 44: EUSART_Write ( checksum );
  5458  0A08  0850               	movf	Audio_SetPlayMode@checksum,w
  5459  0A09  24E6  3188         	fcall	_EUSART_Write
  5460                           
  5461                           ;audio.c: 45: EUSART_Write ( 0xEF );
  5462  0A0B  30EF               	movlw	239
  5463  0A0C  2CE6               	ljmp	_EUSART_Write
  5464  0A0D                     __end_of_Audio_SetPlayMode:	
  5465  0A0D                     __ptext61:	
  5466 ;; *************** function _Audio_SetVolume *****************
  5467 ;; Defined at:
  5468 ;;		line 48 in file "user/src/audio.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;  vol             1    wreg     unsigned char 
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;  vol             1   15[BANK0 ] unsigned char 
  5473 ;;  checksum        1   16[BANK0 ] unsigned char 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  1    wreg      void 
  5476 ;; Registers used:
  5477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5478 ;; Tracked objects:
  5479 ;;		On entry : 1D/2
  5480 ;;		On exit  : 1F/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;Total ram usage:        2 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    8
  5490 ;; This function calls:
  5491 ;;		_EUSART_Write
  5492 ;; This function is called by:
  5493 ;;		_Led_Initialize
  5494 ;;		_IR_KeyAction
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           
  5499                           ;psect for function _Audio_SetVolume
  5500  0A0D                     _Audio_SetVolume:	
  5501                           
  5502                           ;incstack = 0
  5503                           ; Regs used in _Audio_SetVolume: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5504                           ;Audio_SetVolume@vol stored from wreg
  5505  0A0D  0020               	movlb	0	; select bank0
  5506  0A0E  00CF               	movwf	Audio_SetVolume@vol
  5507  0A0F  307E               	movlw	126
  5508                           
  5509                           ;audio.c: 50: uint8_t checksum = 0x00;
  5510  0A10  01D0               	clrf	Audio_SetVolume@checksum
  5511                           
  5512                           ;audio.c: 51: EUSART_Write ( 0x7E );
  5513  0A11  24E6  3188         	fcall	_EUSART_Write
  5514                           
  5515                           ;audio.c: 52: checksum ^= EUSART_Write ( 0x04 );
  5516  0A13  3004               	movlw	4
  5517  0A14  24E6  3188         	fcall	_EUSART_Write
  5518  0A16  06D0               	xorwf	Audio_SetVolume@checksum,f
  5519                           
  5520                           ;audio.c: 53: checksum ^= EUSART_Write ( 0x31 );
  5521  0A17  3031               	movlw	49
  5522  0A18  24E6  3188         	fcall	_EUSART_Write
  5523  0A1A  06D0               	xorwf	Audio_SetVolume@checksum,f
  5524                           
  5525                           ;audio.c: 54: checksum ^= EUSART_Write ( vol );
  5526  0A1B  084F               	movf	Audio_SetVolume@vol,w
  5527  0A1C  24E6  3188         	fcall	_EUSART_Write
  5528  0A1E  06D0               	xorwf	Audio_SetVolume@checksum,f
  5529                           
  5530                           ;audio.c: 55: EUSART_Write ( checksum );
  5531  0A1F  0850               	movf	Audio_SetVolume@checksum,w
  5532  0A20  24E6  3188         	fcall	_EUSART_Write
  5533                           
  5534                           ;audio.c: 56: EUSART_Write ( 0xEF );
  5535  0A22  30EF               	movlw	239
  5536  0A23  2CE6               	ljmp	_EUSART_Write
  5537  0A24                     __end_of_Audio_SetVolume:	
  5538  0A24                     __ptext59:	
  5539 ;; *************** function _Led_TurnOffRamp *****************
  5540 ;; Defined at:
  5541 ;;		line 173 in file "user/src/led.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;		None
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;  i               1   14[BANK0 ] unsigned char 
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  1    wreg      void 
  5548 ;; Registers used:
  5549 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5550 ;; Tracked objects:
  5551 ;;		On entry : 1F/2
  5552 ;;		On exit  : 1F/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5558 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5559 ;;Total ram usage:        1 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; Hardware stack levels required when called:    7
  5562 ;; This function calls:
  5563 ;;		Nothing
  5564 ;; This function is called by:
  5565 ;;		_Led_Initialize
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           
  5570                           ;psect for function _Led_TurnOffRamp
  5571  0A24                     _Led_TurnOffRamp:	
  5572  0A24                     l5860:	
  5573                           ;incstack = 0
  5574                           ; Regs used in _Led_TurnOffRamp: [wreg+fsr1l+fsr1h+status,2+status,0]
  5575                           
  5576                           
  5577                           ;led.c: 174: gLedPara.mOn = 0;
  5578  0A24  10A0               	bcf	_gLedPara^(0+256),1	;volatile
  5579                           
  5580                           ;led.c: 175: for (uint8_t i = 0; i < 5; i++) {
  5581  0A25  0020               	movlb	0	; select bank0
  5582  0A26  01CE               	clrf	Led_TurnOffRamp@i
  5583  0A27                     l5868:	
  5584                           
  5585                           ;led.c: 176: gLedRunPara.mTargetBright[i] = 0;
  5586  0A27  354E               	lslf	Led_TurnOffRamp@i,w
  5587  0A28  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  5588  0A29  0086               	movwf	6
  5589  0A2A  3000               	movlw	0
  5590  0A2B  0187               	clrf	7
  5591  0A2C  3FC0               	movwi [0]fsr1
  5592  0A2D  3FC1               	movwi [1]fsr1
  5593  0A2E  3005               	movlw	5
  5594  0A2F  0ACE               	incf	Led_TurnOffRamp@i,f
  5595  0A30  024E               	subwf	Led_TurnOffRamp@i,w
  5596  0A31  1803               	btfsc	3,0
  5597  0A32  0008               	return
  5598  0A33  2A27               	goto	l5868
  5599  0A34                     __end_of_Led_TurnOffRamp:	
  5600  0A34                     __ptext58:	
  5601 ;; *************** function _Led_TurnOnRamp *****************
  5602 ;; Defined at:
  5603 ;;		line 166 in file "user/src/led.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;		None
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  i               1   14[BANK0 ] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      void 
  5610 ;; Registers used:
  5611 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5612 ;; Tracked objects:
  5613 ;;		On entry : 1F/0
  5614 ;;		On exit  : 1F/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5620 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5621 ;;Total ram usage:        1 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    7
  5624 ;; This function calls:
  5625 ;;		Nothing
  5626 ;; This function is called by:
  5627 ;;		_Led_Initialize
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           
  5632                           ;psect for function _Led_TurnOnRamp
  5633  0A34                     _Led_TurnOnRamp:	
  5634                           
  5635                           ;led.c: 167: gLedPara.mOn = 1;
  5636                           
  5637                           ;incstack = 0
  5638                           ; Regs used in _Led_TurnOnRamp: [wreg-fsr1h+status,2+status,0]
  5639  0A34  0022               	movlb	2	; select bank2
  5640  0A35  14A0               	bsf	_gLedPara^(0+256),1	;volatile
  5641                           
  5642                           ;led.c: 168: for (uint8_t i = 0; i < 5; i++) {
  5643  0A36  0020               	movlb	0	; select bank0
  5644  0A37  01CE               	clrf	Led_TurnOnRamp@i
  5645  0A38                     l5894:	
  5646                           
  5647                           ;led.c: 169: gLedRunPara.mTargetBright[i] = gLedPara.mBright[i];
  5648  0A38  354E               	lslf	Led_TurnOnRamp@i,w
  5649  0A39  3E22               	addlw	(low ((_gLedPara| (0+256)+2)))& (0+255)
  5650  0A3A  0086               	movwf	6
  5651  0A3B  3001               	movlw	1	; select bank2/3
  5652  0A3C  0087               	movwf	7
  5653  0A3D  354E               	lslf	Led_TurnOnRamp@i,w
  5654  0A3E  26B7  3188         	fcall	PL2	;call to abstracted procedure
  5655  0A40  3005               	movlw	5
  5656  0A41  0ACE               	incf	Led_TurnOnRamp@i,f
  5657  0A42  024E               	subwf	Led_TurnOnRamp@i,w
  5658  0A43  1803               	btfsc	3,0
  5659  0A44  0008               	return
  5660  0A45  2A38               	goto	l5894
  5661  0A46                     __end_of_Led_TurnOnRamp:	
  5662  0A46                     __ptext52:	
  5663 ;; *************** function _Led_UpdateBright *****************
  5664 ;; Defined at:
  5665 ;;		line 144 in file "user/src/led.c"
  5666 ;; Parameters:    Size  Location     Type
  5667 ;;		None
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  i               1   18[BANK0 ] unsigned char 
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  1    wreg      void 
  5672 ;; Registers used:
  5673 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5674 ;; Tracked objects:
  5675 ;;		On entry : 14/1
  5676 ;;		On exit  : 1F/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5680 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5682 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5683 ;;Total ram usage:        1 bytes
  5684 ;; Hardware stack levels used:    1
  5685 ;; Hardware stack levels required when called:    8
  5686 ;; This function calls:
  5687 ;;		_PWM1_LoadDutyValue
  5688 ;;		_PWM2_LoadDutyValue
  5689 ;;		_PWM3_LoadDutyValue
  5690 ;;		_PWM4_LoadDutyValue
  5691 ;;		_PWM5_LoadDutyValue
  5692 ;; This function is called by:
  5693 ;;		_Led_Initialize
  5694 ;;		_Led_CheckAutoStatus
  5695 ;;		_Led_AutoRun
  5696 ;; This function uses a non-reentrant model
  5697 ;;
  5698                           
  5699                           
  5700                           ;psect for function _Led_UpdateBright
  5701  0A46                     _Led_UpdateBright:	
  5702  0A46                     l5874:	
  5703                           ;incstack = 0
  5704                           ; Regs used in _Led_UpdateBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5705                           
  5706                           
  5707                           ;led.c: 145: for (uint8_t i = 0; i < 5; i++) {
  5708  0A46  0020               	movlb	0	; select bank0
  5709  0A47  01D2               	clrf	Led_UpdateBright@i
  5710  0A48                     l5880:	
  5711                           
  5712                           ;led.c: 146: loadDuty[i](gLedRunPara.mCurrentBright[i]);
  5713  0A48  3552               	lslf	Led_UpdateBright@i,w
  5714  0A49  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
  5715  0A4A  0086               	movwf	6
  5716  0A4B  0187               	clrf	7
  5717  0A4C  3F40               	moviw [0]fsr1
  5718  0A4D  00CE               	movwf	PWM5_LoadDutyValue@dutyValue
  5719  0A4E  3F41               	moviw [1]fsr1
  5720  0A4F  00CF               	movwf	PWM5_LoadDutyValue@dutyValue+1
  5721  0A50  3552               	lslf	Led_UpdateBright@i,w
  5722  0A51  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
  5723  0A52  0086               	movwf	6
  5724  0A53  3F41               	moviw [1]fsr1
  5725  0A54  008A               	movwf	10
  5726  0A55  3F40               	moviw [0]fsr1
  5727  0A56  000A               	callw
  5728  0A57  3188               	pagesel	$
  5729  0A58  0020               	movlb	0	; select bank0
  5730  0A59  3005               	movlw	5
  5731  0A5A  0AD2               	incf	Led_UpdateBright@i,f
  5732  0A5B  0252               	subwf	Led_UpdateBright@i,w
  5733  0A5C  1803               	btfsc	3,0
  5734  0A5D  0008               	return
  5735  0A5E  2A48               	goto	l5880
  5736  0A5F                     __end_of_Led_UpdateBright:	
  5737  0A5F                     __ptext39:	
  5738 ;; *************** function _IR_KeyAction *****************
  5739 ;; Defined at:
  5740 ;;		line 450 in file "user/src/ir.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;		None
  5743 ;; Auto vars:     Size  Location     Type
  5744 ;;  i               1   14[BANK3 ] unsigned char 
  5745 ;;  i               1   13[BANK3 ] unsigned char 
  5746 ;;  i               1   12[BANK3 ] unsigned char 
  5747 ;;  i               1   16[BANK3 ] unsigned char 
  5748 ;;  i               1   15[BANK3 ] unsigned char 
  5749 ;;  i               1   11[BANK3 ] unsigned char 
  5750 ;;  i               1   10[BANK3 ] unsigned char 
  5751 ;;  idx             1   17[BANK3 ] unsigned char 
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      void 
  5754 ;; Registers used:
  5755 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5756 ;; Tracked objects:
  5757 ;;		On entry : 1F/0
  5758 ;;		On exit  : 1F/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;      Locals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0
  5763 ;;      Temps:          0       0       0       0      10       0       0       0       0       0       0       0       
      +0       0
  5764 ;;      Totals:         0       0       0       0      18       0       0       0       0       0       0       0       
      +0       0
  5765 ;;Total ram usage:       18 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:   11
  5768 ;; This function calls:
  5769 ;;		_Audio_SetVolume
  5770 ;;		_Audio_StopSound
  5771 ;;		_IR_ExitSet
  5772 ;;		_IR_GetIndex
  5773 ;;		_IR_IsValidTime
  5774 ;;		_Led_Initialize
  5775 ;;		_Led_StartNotice
  5776 ;;		_RTC_GetTime
  5777 ;;		_TMR2_DisableInterrupt
  5778 ;;		_TMR2_EnableInterrupt
  5779 ;;		_Util_DecValue
  5780 ;;		_Util_IncValue
  5781 ;;		___bmul
  5782 ;;		___wmul
  5783 ;; This function is called by:
  5784 ;;		_IR_KeyAtionIfPressed
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           
  5789                           ;psect for function _IR_KeyAction
  5790  0A5F                     _IR_KeyAction:	
  5791  0A5F                     l6528:	
  5792                           ;incstack = 0
  5793                           ; Regs used in _IR_KeyAction: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5794                           
  5795                           
  5796                           ;ir.c: 451: uint8_t idx;
  5797                           ;ir.c: 452: ir_state.mKeyRcv = 0;
  5798  0A5F  1036               	bcf	_ir_state,0	;volatile
  5799                           
  5800                           ;ir.c: 453: TMR2_DisableInterrupt();
  5801  0A60  2564  3188         	fcall	_TMR2_DisableInterrupt
  5802                           
  5803                           ;ir.c: 454: switch (keyValue) {
  5804  0A62  2C40               	goto	l6856
  5805  0A63                     l6532:	
  5806                           
  5807                           ;ir.c: 456: Audio_StopSound();
  5808  0A63  24BF  3188         	fcall	_Audio_StopSound
  5809                           
  5810                           ;ir.c: 457: gLedPara.mMsc = 1;
  5811  0A65  0022               	movlb	2	; select bank2
  5812  0A66  0820               	movf	_gLedPara^(0+256),w	;volatile
  5813  0A67  3987               	andlw	-121
  5814  0A68  3808               	iorlw	8
  5815  0A69  00A0               	movwf	_gLedPara^(0+256)	;volatile
  5816                           
  5817                           ;ir.c: 458: gLedPara.mDyn = 0;
  5818  0A6A  13A0               	bcf	_gLedPara^(0+256),7	;volatile
  5819                           
  5820                           ;ir.c: 459: gLedPara.mAuto = 0;
  5821  0A6B  1020               	bcf	_gLedPara^(0+256),0	;volatile
  5822                           
  5823                           ;ir.c: 460: gLedRunPara.music_index = 1;
  5824  0A6C  3001               	movlw	1
  5825  0A6D                     L2:	
  5826  0A6D  0021               	movlb	1	; select bank1
  5827  0A6E  00E0               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
  5828  0A6F                     l6542:	
  5829                           
  5830                           ;ir.c: 461: gLedRunPara.mParaChanged = 1;
  5831  0A6F  0021               	movlb	1	; select bank1
  5832  0A70  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
  5833  0A71                     l6544:	
  5834                           
  5835                           ;ir.c: 462: Led_Initialize();
  5836  0A71  20FE  3188         	fcall	_Led_Initialize
  5837                           
  5838                           ;ir.c: 463: break;
  5839  0A73  2CBB               	goto	l6858
  5840  0A74                     l6546:	
  5841                           
  5842                           ;ir.c: 465: Audio_StopSound();
  5843  0A74  24BF  3188         	fcall	_Audio_StopSound
  5844                           
  5845                           ;ir.c: 466: gLedPara.mMsc = 2;
  5846  0A76  0022               	movlb	2	; select bank2
  5847  0A77  0820               	movf	_gLedPara^(0+256),w	;volatile
  5848  0A78  3987               	andlw	-121
  5849  0A79  3810               	iorlw	16
  5850  0A7A  00A0               	movwf	_gLedPara^(0+256)	;volatile
  5851                           
  5852                           ;ir.c: 467: gLedPara.mDyn = 0;
  5853  0A7B  13A0               	bcf	_gLedPara^(0+256),7	;volatile
  5854                           
  5855                           ;ir.c: 468: gLedPara.mAuto = 0;
  5856  0A7C  1020               	bcf	_gLedPara^(0+256),0	;volatile
  5857                           
  5858                           ;ir.c: 469: gLedRunPara.music_index = 2;
  5859  0A7D  3002               	movlw	2
  5860  0A7E  2A6D               	goto	L2
  5861  0A7F                     l6560:	
  5862                           
  5863                           ;ir.c: 474: Audio_StopSound();
  5864  0A7F  24BF  3188         	fcall	_Audio_StopSound
  5865                           
  5866                           ;ir.c: 475: gLedPara.mMsc = 3;
  5867  0A81  0022               	movlb	2	; select bank2
  5868  0A82  0820               	movf	_gLedPara^(0+256),w	;volatile
  5869  0A83  3987               	andlw	-121
  5870  0A84  3818               	iorlw	24
  5871  0A85  00A0               	movwf	_gLedPara^(0+256)	;volatile
  5872                           
  5873                           ;ir.c: 476: gLedPara.mDyn = 0;
  5874  0A86  13A0               	bcf	_gLedPara^(0+256),7	;volatile
  5875                           
  5876                           ;ir.c: 477: gLedPara.mAuto = 0;
  5877  0A87  1020               	bcf	_gLedPara^(0+256),0	;volatile
  5878                           
  5879                           ;ir.c: 478: gLedRunPara.music_index = 3;
  5880  0A88  3003               	movlw	3
  5881  0A89  2A6D               	goto	L2
  5882  0A8A                     l6574:	
  5883                           
  5884                           ;ir.c: 483: Audio_StopSound();
  5885  0A8A  24BF  3188         	fcall	_Audio_StopSound
  5886                           
  5887                           ;ir.c: 484: gLedPara.mMsc = 4;
  5888  0A8C  0022               	movlb	2	; select bank2
  5889  0A8D  0820               	movf	_gLedPara^(0+256),w	;volatile
  5890  0A8E  3987               	andlw	-121
  5891  0A8F  3820               	iorlw	32
  5892  0A90  00A0               	movwf	_gLedPara^(0+256)	;volatile
  5893                           
  5894                           ;ir.c: 485: gLedPara.mDyn = 0;
  5895  0A91  13A0               	bcf	_gLedPara^(0+256),7	;volatile
  5896                           
  5897                           ;ir.c: 486: gLedPara.mAuto = 0;
  5898  0A92  1020               	bcf	_gLedPara^(0+256),0	;volatile
  5899                           
  5900                           ;ir.c: 487: gLedRunPara.music_index = 4;
  5901  0A93  3004               	movlw	4
  5902  0A94  2A6D               	goto	L2
  5903  0A95                     l1142:	
  5904  0A95                     l6588:	
  5905                           
  5906                           ;ir.c: 492: case 0x15:
  5907                           ;ir.c: 493: case 0x16:
  5908                           ;ir.c: 494: case 0x17:
  5909                           ;ir.c: 495: Audio_StopSound();
  5910  0A95  24BF  3188         	fcall	_Audio_StopSound
  5911                           
  5912                           ;ir.c: 496: gLedPara.mMsc = IR_GetIndex(keyValue);
  5913  0A97  0832               	movf	_keyValue,w	;volatile
  5914  0A98  256A  3188         	fcall	_IR_GetIndex
  5915  0A9A  0023               	movlb	3	; select bank3
  5916  0A9B  00C0               	movwf	??_IR_KeyAction^(0+384)
  5917  0A9C  0DC0               	rlf	??_IR_KeyAction^(0+384),f
  5918  0A9D  0DC0               	rlf	??_IR_KeyAction^(0+384),f
  5919  0A9E  0DC0               	rlf	??_IR_KeyAction^(0+384),f
  5920  0A9F  0022               	movlb	2	; select bank2
  5921  0AA0  0820               	movf	_gLedPara^(0+256),w	;volatile
  5922  0AA1  0023               	movlb	3	; select bank3
  5923  0AA2  0640               	xorwf	??_IR_KeyAction^(0+384),w
  5924  0AA3  3987               	andlw	-121
  5925  0AA4  0640               	xorwf	??_IR_KeyAction^(0+384),w
  5926  0AA5  0022               	movlb	2	; select bank2
  5927  0AA6  00A0               	movwf	_gLedPara^(0+256)	;volatile
  5928                           
  5929                           ;ir.c: 497: gLedPara.mDyn = 1;
  5930  0AA7  17A0               	bsf	_gLedPara^(0+256),7	;volatile
  5931                           
  5932                           ;ir.c: 498: gLedPara.mAuto = 0;
  5933  0AA8  1020               	bcf	_gLedPara^(0+256),0	;volatile
  5934                           
  5935                           ;ir.c: 499: gLedRunPara.mParaChanged = 1;
  5936  0AA9  0021               	movlb	1	; select bank1
  5937  0AAA  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
  5938                           
  5939                           ;ir.c: 500: gLedRunPara.music_index = gLedPara.mMsc;
  5940  0AAB  0022               	movlb	2	; select bank2
  5941  0AAC  0C20               	rrf	_gLedPara^(0+256),w	;volatile
  5942  0AAD  0023               	movlb	3	; select bank3
  5943  0AAE  00C0               	movwf	??_IR_KeyAction^(0+384)
  5944  0AAF  0CC0               	rrf	??_IR_KeyAction^(0+384),f
  5945  0AB0  0C40               	rrf	??_IR_KeyAction^(0+384),w
  5946  0AB1  390F               	andlw	15
  5947  0AB2  0021               	movlb	1	; select bank1
  5948  0AB3  00E0               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
  5949  0AB4  2A71               	goto	l6544
  5950  0AB5                     l6602:	
  5951                           
  5952                           ;ir.c: 504: Audio_StopSound();
  5953  0AB5  24BF  3188         	fcall	_Audio_StopSound
  5954                           
  5955                           ;ir.c: 505: gLedPara.mOn = !gLedPara.mOn;
  5956  0AB7  1003               	clrc
  5957  0AB8  0022               	movlb	2	; select bank2
  5958  0AB9  1CA0               	btfss	_gLedPara^(0+256),1	;volatile
  5959  0ABA  1403               	setc
  5960  0ABB  1C03               	btfss	3,0
  5961  0ABC  2AC0               	goto	u5510
  5962  0ABD  0022               	movlb	2	; select bank2
  5963  0ABE  14A0               	bsf	_gLedPara^(0+256),1	;volatile
  5964  0ABF  2AC2               	goto	l6606
  5965  0AC0                     u5510:	
  5966  0AC0  0022               	movlb	2	; select bank2
  5967  0AC1  10A0               	bcf	_gLedPara^(0+256),1	;volatile
  5968  0AC2                     l6606:	
  5969                           
  5970                           ;ir.c: 506: gLedPara.mAuto = 0;
  5971  0AC2  1020               	bcf	_gLedPara^(0+256),0	;volatile
  5972  0AC3  2A6F               	goto	l6542
  5973  0AC4                     l6612:	
  5974                           
  5975                           ;ir.c: 511: Audio_StopSound();
  5976  0AC4  24BF  3188         	fcall	_Audio_StopSound
  5977                           
  5978                           ;ir.c: 512: gLedPara.mOn = 1;
  5979  0AC6  0022               	movlb	2	; select bank2
  5980  0AC7  14A0               	bsf	_gLedPara^(0+256),1	;volatile
  5981                           
  5982                           ;ir.c: 513: gLedPara.mAuto = 1;
  5983  0AC8  1420               	bsf	_gLedPara^(0+256),0	;volatile
  5984                           
  5985                           ;ir.c: 514: gLedRunPara.mParaChanged = 1;
  5986  0AC9  0021               	movlb	1	; select bank1
  5987  0ACA  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
  5988                           
  5989                           ;ir.c: 515: Led_Initialize();
  5990  0ACB  20FE               	fcall	_Led_Initialize
  5991                           
  5992                           ;ir.c: 516: for (uint8_t i = 0; i < 5; i++) {
  5993  0ACC  0023               	movlb	3	; select bank3
  5994  0ACD  01CA               	clrf	IR_KeyAction@i^(0+384)
  5995  0ACE                     l6628:	
  5996                           
  5997                           ;ir.c: 517: gLedRunPara.mCurrentBright[i] = gLedRunPara.mTargetBright[i];
  5998  0ACE  354A               	lslf	IR_KeyAction@i^(0+384),w
  5999  0ACF  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6000  0AD0  0086               	movwf	6
  6001  0AD1  0187               	clrf	7
  6002  0AD2  354A               	lslf	IR_KeyAction@i^(0+384),w
  6003  0AD3  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
  6004  0AD4  3185  25B0  3188   	fcall	PL6	;call to abstracted procedure
  6005  0AD7  3005               	movlw	5
  6006  0AD8  0ACA               	incf	IR_KeyAction@i^(0+384),f
  6007  0AD9  024A               	subwf	IR_KeyAction@i^(0+384),w
  6008  0ADA  1803               	btfsc	3,0
  6009  0ADB  2CBB               	goto	l6858
  6010  0ADC  2ACE               	goto	l6628
  6011  0ADD                     l1151:	
  6012  0ADD                     l6634:	
  6013                           
  6014                           ;ir.c: 521: case 0x59:
  6015                           ;ir.c: 522: case 0x45:
  6016                           ;ir.c: 523: case 0x44:
  6017                           ;ir.c: 524: case 0x41:
  6018                           ;ir.c: 525: Audio_StopSound();
  6019  0ADD  24BF  3188         	fcall	_Audio_StopSound
  6020                           
  6021                           ;ir.c: 526: idx = IR_GetIndex(keyValue);
  6022  0ADF  0832               	movf	_keyValue,w	;volatile
  6023  0AE0  256A  3188         	fcall	_IR_GetIndex
  6024  0AE2  0023               	movlb	3	; select bank3
  6025  0AE3  00D1               	movwf	IR_KeyAction@idx^(0+384)
  6026                           
  6027                           ;ir.c: 527: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 1000, 200);
  6028  0AE4  3551               	lslf	IR_KeyAction@idx^(0+384),w
  6029  0AE5  2728  3188         	fcall	PL44	;call to abstracted procedure
  6030  0AE7  2530  3188         	fcall	_Util_IncValue
  6031  0AE9                     L4:	
  6032                           
  6033                           ;ir.c: 528: if (ir_state.mSet == 0) {
  6034  0AE9  0E36               	swapf	_ir_state,w	;volatile
  6035  0AEA  0C89               	rrf	9,f
  6036  0AEB  3907               	andlw	7
  6037  0AEC  1D03               	skipz
  6038  0AED  2AFC               	goto	l6652
  6039                           
  6040                           ;ir.c: 529: gLedPara.mAuto = 0;
  6041                           
  6042                           ;ir.c: 530: gLedPara.mMsc = 0;
  6043                           
  6044                           ;ir.c: 531: gLedPara.mDyn = 0;
  6045  0AEE  275A  3188         	fcall	PL84	;call to abstracted procedure
  6046                           
  6047                           ;ir.c: 532: gLedPara.mBright[idx] = gLedRunPara.mTargetBright[idx];
  6048  0AF0  0023               	movlb	3	; select bank3
  6049  0AF1  3551               	lslf	IR_KeyAction@idx^(0+384),w
  6050  0AF2  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6051  0AF3  0086               	movwf	6
  6052  0AF4  0187               	clrf	7
  6053  0AF5  3551               	lslf	IR_KeyAction@idx^(0+384),w
  6054  0AF6  3E22               	addlw	(low ((_gLedPara| (0+256)+2)))& (0+255)
  6055  0AF7  26BF  3188         	fcall	PL8	;call to abstracted procedure
  6056  0AF9                     l6650:	
  6057                           
  6058                           ;ir.c: 533: gLedRunPara.mParaChanged = 1;
  6059  0AF9  0021               	movlb	1	; select bank1
  6060  0AFA  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
  6061                           
  6062                           ;ir.c: 534: } else {
  6063  0AFB  2CBB               	goto	l6858
  6064  0AFC                     l6652:	
  6065                           
  6066                           ;ir.c: 535: ir_state.mSetDelay = 0;
  6067  0AFC  01BC               	clrf	_ir_state+6	;volatile
  6068  0AFD  2CBB               	goto	l6858
  6069  0AFE                     l1158:	
  6070  0AFE                     l6654:	
  6071                           
  6072                           ;ir.c: 539: case 0x55:
  6073                           ;ir.c: 540: case 0x49:
  6074                           ;ir.c: 541: case 0x48:
  6075                           ;ir.c: 542: case 0x40:
  6076                           ;ir.c: 543: Audio_StopSound();
  6077  0AFE  24BF  3188         	fcall	_Audio_StopSound
  6078                           
  6079                           ;ir.c: 544: idx = IR_GetIndex(keyValue);
  6080  0B00  0832               	movf	_keyValue,w	;volatile
  6081  0B01  256A  3188         	fcall	_IR_GetIndex
  6082  0B03  0023               	movlb	3	; select bank3
  6083  0B04  00D1               	movwf	IR_KeyAction@idx^(0+384)
  6084                           
  6085                           ;ir.c: 545: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 0, 200);
  6086  0B05  3551               	lslf	IR_KeyAction@idx^(0+384),w
  6087  0B06  273F  3188         	fcall	PL52	;call to abstracted procedure
  6088  0B08  250A  3188         	fcall	_Util_DecValue
  6089  0B0A  2AE9               	goto	L4
  6090  0B0B                     l1164:	
  6091                           ;ir.c: 549: gLedPara.mDyn = 0;
  6092                           
  6093                           ;ir.c: 548: gLedPara.mMsc = 0;
  6094                           
  6095                           ;ir.c: 547: gLedPara.mAuto = 0;
  6096                           
  6097                           ;ir.c: 546: if (ir_state.mSet == 0) {
  6098                           
  6099  0B0B                     l6674:	
  6100                           
  6101                           ;ir.c: 557: case 0x51:
  6102                           ;ir.c: 558: case 0x4D:
  6103                           ;ir.c: 559: case 0x4C:
  6104                           ;ir.c: 560: Audio_StopSound();
  6105  0B0B  24BF  3188         	fcall	_Audio_StopSound
  6106                           
  6107                           ;ir.c: 561: idx = IR_GetIndex(keyValue);
  6108  0B0D  0832               	movf	_keyValue,w	;volatile
  6109  0B0E  256A  3188         	fcall	_IR_GetIndex
  6110  0B10  0023               	movlb	3	; select bank3
  6111  0B11  00D1               	movwf	IR_KeyAction@idx^(0+384)
  6112                           
  6113                           ;ir.c: 562: for (uint8_t i = 0; i < 5; i++) {
  6114  0B12  01CB               	clrf	IR_KeyAction@i_1421^(0+384)
  6115  0B13                     l6680:	
  6116  0B13  3005               	movlw	5
  6117  0B14  024B               	subwf	IR_KeyAction@i_1421^(0+384),w
  6118  0B15  1803               	btfsc	3,0
  6119  0B16  2B23               	goto	l6690
  6120                           
  6121                           ;ir.c: 563: gLedRunPara.mTargetBright[i] = gLedPara.mCustom[idx][i];
  6122  0B17  084B               	movf	IR_KeyAction@i_1421^(0+384),w
  6123  0B18  2734  3188         	fcall	PL50	;call to abstracted procedure
  6124  0B1A  24FD  3188         	fcall	___bmul
  6125  0B1C  2760  3188         	fcall	PL86	;call to abstracted procedure
  6126  0B1E  354B               	lslf	IR_KeyAction@i_1421^(0+384),w
  6127  0B1F  26B7  3188         	fcall	PL2	;call to abstracted procedure
  6128  0B21  0ACB               	incf	IR_KeyAction@i_1421^(0+384),f
  6129  0B22  2B13               	goto	l6680
  6130  0B23                     l6690:	
  6131                           
  6132                           ;ir.c: 564: }
  6133                           ;ir.c: 565: if (ir_state.mSet == 0) {
  6134  0B23  0020               	movlb	0	; select bank0
  6135  0B24  0E36               	swapf	_ir_state,w	;volatile
  6136  0B25  0C89               	rrf	9,f
  6137  0B26  3907               	andlw	7
  6138  0B27  1D03               	skipz
  6139  0B28  2AFC               	goto	l6652
  6140                           
  6141                           ;ir.c: 566: gLedPara.mAuto = 0;
  6142                           
  6143                           ;ir.c: 567: gLedPara.mMsc = 0;
  6144                           
  6145                           ;ir.c: 568: gLedPara.mDyn = 0;
  6146  0B29  275A  3188         	fcall	PL84	;call to abstracted procedure
  6147                           
  6148                           ;ir.c: 569: for (uint8_t i = 0; i < 5; i++) {
  6149  0B2B  0023               	movlb	3	; select bank3
  6150  0B2C  01CC               	clrf	IR_KeyAction@i_1422^(0+384)
  6151  0B2D                     l6700:	
  6152  0B2D  3005               	movlw	5
  6153  0B2E  024C               	subwf	IR_KeyAction@i_1422^(0+384),w
  6154  0B2F  1803               	btfsc	3,0
  6155  0B30  2AF9               	goto	l6650
  6156                           
  6157                           ;ir.c: 570: gLedPara.mBright[i] = gLedPara.mCustom[idx][i];
  6158  0B31  084C               	movf	IR_KeyAction@i_1422^(0+384),w
  6159  0B32  2734  3188         	fcall	PL50	;call to abstracted procedure
  6160  0B34  24FD  3188         	fcall	___bmul
  6161  0B36  2760  3188         	fcall	PL86	;call to abstracted procedure
  6162  0B38  354C               	lslf	IR_KeyAction@i_1422^(0+384),w
  6163  0B39  3E22               	addlw	(low ((_gLedPara| (0+256)+2)))& (0+255)
  6164  0B3A  26BF  3188         	fcall	PL8	;call to abstracted procedure
  6165  0B3C  0ACC               	incf	IR_KeyAction@i_1422^(0+384),f
  6166  0B3D  2B2D               	goto	l6700
  6167  0B3E                     l6712:	
  6168                           
  6169                           ;ir.c: 578: Audio_StopSound();
  6170  0B3E  24BF  3188         	fcall	_Audio_StopSound
  6171                           
  6172                           ;ir.c: 579: for (uint8_t i = 0; i < 5; i++) {
  6173  0B40  0023               	movlb	3	; select bank3
  6174  0B41  01CF               	clrf	IR_KeyAction@i_1423^(0+384)
  6175  0B42                     l6716:	
  6176  0B42  3005               	movlw	5
  6177  0B43  024F               	subwf	IR_KeyAction@i_1423^(0+384),w
  6178  0B44  1803               	btfsc	3,0
  6179  0B45  2B6E               	goto	l1177
  6180                           
  6181                           ;ir.c: 580: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[i], 1000, 200);
  6182  0B46  354F               	lslf	IR_KeyAction@i_1423^(0+384),w
  6183  0B47  2728  3188         	fcall	PL44	;call to abstracted procedure
  6184  0B49  2530  3188         	fcall	_Util_IncValue
  6185                           
  6186                           ;ir.c: 581: gLedPara.mBright[i] = gLedRunPara.mTargetBright[i];
  6187  0B4B  0023               	movlb	3	; select bank3
  6188  0B4C  354F               	lslf	IR_KeyAction@i_1423^(0+384),w
  6189  0B4D  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6190  0B4E  0086               	movwf	6
  6191  0B4F  0187               	clrf	7
  6192  0B50  354F               	lslf	IR_KeyAction@i_1423^(0+384),w
  6193  0B51  3E22               	addlw	(low ((_gLedPara| (0+256)+2)))& (0+255)
  6194  0B52  26BF  3188         	fcall	PL8	;call to abstracted procedure
  6195  0B54  0ACF               	incf	IR_KeyAction@i_1423^(0+384),f
  6196  0B55  2B42               	goto	l6716
  6197  0B56                     l6734:	
  6198                           ;ir.c: 585: gLedPara.mDyn = 0;
  6199                           
  6200                           ;ir.c: 584: gLedPara.mMsc = 0;
  6201                           
  6202                           ;ir.c: 582: }
  6203                           ;ir.c: 583: gLedPara.mAuto = 0;
  6204                           
  6205                           
  6206                           ;ir.c: 589: Audio_StopSound();
  6207  0B56  24BF  3188         	fcall	_Audio_StopSound
  6208                           
  6209                           ;ir.c: 590: for (uint8_t i = 0; i < 5; i++) {
  6210  0B58  0023               	movlb	3	; select bank3
  6211  0B59  01D0               	clrf	IR_KeyAction@i_1424^(0+384)
  6212  0B5A                     l6738:	
  6213  0B5A  3005               	movlw	5
  6214  0B5B  0250               	subwf	IR_KeyAction@i_1424^(0+384),w
  6215  0B5C  1803               	btfsc	3,0
  6216  0B5D  2B6E               	goto	l1177
  6217                           
  6218                           ;ir.c: 591: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[i], 0, 200);
  6219  0B5E  3550               	lslf	IR_KeyAction@i_1424^(0+384),w
  6220  0B5F  273F  3188         	fcall	PL52	;call to abstracted procedure
  6221  0B61  250A  3188         	fcall	_Util_DecValue
  6222                           
  6223                           ;ir.c: 592: gLedPara.mBright[i] = gLedRunPara.mTargetBright[i];
  6224  0B63  0023               	movlb	3	; select bank3
  6225  0B64  3550               	lslf	IR_KeyAction@i_1424^(0+384),w
  6226  0B65  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6227  0B66  0086               	movwf	6
  6228  0B67  0187               	clrf	7
  6229  0B68  3550               	lslf	IR_KeyAction@i_1424^(0+384),w
  6230  0B69  3E22               	addlw	(low ((_gLedPara| (0+256)+2)))& (0+255)
  6231  0B6A  26BF  3188         	fcall	PL8	;call to abstracted procedure
  6232  0B6C  0AD0               	incf	IR_KeyAction@i_1424^(0+384),f
  6233  0B6D  2B5A               	goto	l6738
  6234  0B6E                     l1177:	
  6235                           
  6236                           ;ir.c: 593: }
  6237                           ;ir.c: 594: gLedPara.mAuto = 0;
  6238                           
  6239                           ;ir.c: 595: gLedPara.mMsc = 0;
  6240                           
  6241                           ;ir.c: 596: gLedPara.mDyn = 0;
  6242  0B6E  275A  3188         	fcall	PL84	;call to abstracted procedure
  6243  0B70  2AF9               	goto	l6650
  6244  0B71                     l6756:	
  6245                           
  6246                           ;ir.c: 600: Util_DecValue((uint16_t*) & gLedPara.mVolume, 0, 1);
  6247  0B71  3021               	movlw	low (_gLedPara+1)
  6248  0B72  00CE               	movwf	Util_DecValue@pSrc
  6249  0B73  3001               	movlw	high (_gLedPara+1)
  6250  0B74  00CF               	movwf	Util_DecValue@pSrc+1
  6251  0B75  01D0               	clrf	Util_DecValue@min
  6252  0B76  01D1               	clrf	Util_DecValue@min+1
  6253  0B77  01D2               	clrf	Util_DecValue@delta
  6254  0B78  0AD2               	incf	Util_DecValue@delta,f
  6255  0B79  01D3               	clrf	Util_DecValue@delta+1
  6256  0B7A  250A  3188         	fcall	_Util_DecValue
  6257                           
  6258                           ;ir.c: 601: Audio_SetVolume(VOLUME[ gLedPara.mVolume ]);
  6259  0B7C  0022               	movlb	2	; select bank2
  6260  0B7D  2708  3188         	fcall	PL30	;call to abstracted procedure
  6261  0B7F  220D  3188         	fcall	_Audio_SetVolume
  6262  0B81  2AF9               	goto	l6650
  6263  0B82                     l6762:	
  6264                           
  6265                           ;ir.c: 605: Util_IncValue((uint16_t*) & gLedPara.mVolume, 4, 1);
  6266  0B82  3021               	movlw	low (_gLedPara+1)
  6267  0B83  00CE               	movwf	Util_IncValue@pSrc
  6268  0B84  3001               	movlw	high (_gLedPara+1)
  6269  0B85  00CF               	movwf	Util_IncValue@pSrc+1
  6270  0B86  3004               	movlw	4
  6271  0B87  00D0               	movwf	Util_IncValue@max
  6272  0B88  01D1               	clrf	Util_IncValue@max+1
  6273  0B89  01D2               	clrf	Util_IncValue@delta
  6274  0B8A  0AD2               	incf	Util_IncValue@delta,f
  6275  0B8B  01D3               	clrf	Util_IncValue@delta+1
  6276  0B8C  2530  3188         	fcall	_Util_IncValue
  6277                           
  6278                           ;ir.c: 606: Audio_SetVolume(VOLUME[ gLedPara.mVolume ]);
  6279  0B8E  0022               	movlb	2	; select bank2
  6280  0B8F  2708  3188         	fcall	PL30	;call to abstracted procedure
  6281  0B91  220D  3188         	fcall	_Audio_SetVolume
  6282  0B93  2AF9               	goto	l6650
  6283  0B94                     l1183:	
  6284  0B94                     l6768:	
  6285                           
  6286                           ;ir.c: 610: case 0x0D:
  6287                           ;ir.c: 611: case 0x0E:
  6288                           ;ir.c: 612: case 0x0F:
  6289                           ;ir.c: 613: case 0x08:
  6290                           ;ir.c: 614: case 0x09:
  6291                           ;ir.c: 615: case 0x0A:
  6292                           ;ir.c: 616: case 0x0B:
  6293                           ;ir.c: 617: case 0x04:
  6294                           ;ir.c: 618: case 0x05:
  6295                           ;ir.c: 619: if (ir_state.tmIdx < 4) {
  6296  0B94  3004               	movlw	4
  6297  0B95  0237               	subwf	_ir_state+1,w	;volatile
  6298  0B96  1803               	skipnc
  6299  0B97  2BA2               	goto	l6774
  6300                           
  6301                           ;ir.c: 620: ir_state.time[ir_state.tmIdx++] = IR_GetIndex(keyValue);
  6302  0B98  0837               	movf	_ir_state+1,w	;volatile
  6303  0B99  3E38               	addlw	(low ((_ir_state| 0+2)))& (0+255)
  6304  0B9A  0086               	movwf	6
  6305  0B9B  0187               	clrf	7
  6306  0B9C  0832               	movf	_keyValue,w	;volatile
  6307  0B9D  256A  3188         	fcall	_IR_GetIndex
  6308  0B9F  0081               	movwf	1
  6309  0BA0  0AB7               	incf	_ir_state+1,f	;volatile
  6310                           
  6311                           ;ir.c: 621: } else {
  6312  0BA1  2BA3               	goto	l6776
  6313  0BA2                     l6774:	
  6314                           
  6315                           ;ir.c: 622: ir_state.tmIdx = 0;
  6316  0BA2  01B7               	clrf	_ir_state+1	;volatile
  6317  0BA3                     l6776:	
  6318                           
  6319                           ;ir.c: 623: }
  6320                           ;ir.c: 624: if (IR_IsValidTime((uint8_t*) & ir_state.time[0], ir_state.tmIdx) == 0) {
  6321  0BA3  0837               	movf	_ir_state+1,w	;volatile
  6322  0BA4  00D1               	movwf	IR_IsValidTime@len
  6323  0BA5  3038               	movlw	(low ((_ir_state| 0+2)))& (0+255)
  6324  0BA6  25F6  3188         	fcall	_IR_IsValidTime
  6325  0BA8  3A00               	xorlw	0
  6326  0BA9  1D03               	skipz
  6327  0BAA  2BB1               	goto	l6782
  6328                           
  6329                           ;ir.c: 625: Led_StartNotice(3);
  6330  0BAB  3003               	movlw	3
  6331  0BAC  2557  3188         	fcall	_Led_StartNotice
  6332  0BAE                     l6780:	
  6333                           
  6334                           ;ir.c: 626: IR_ExitSet();
  6335  0BAE  25ED  3188         	fcall	_IR_ExitSet
  6336                           
  6337                           ;ir.c: 627: } else if (ir_state.tmIdx == 4) {
  6338  0BB0  2AFC               	goto	l6652
  6339  0BB1                     l6782:	
  6340  0BB1  3004               	movlw	4
  6341  0BB2  0637               	xorwf	_ir_state+1,w	;volatile
  6342  0BB3  1D03               	btfss	3,2
  6343  0BB4  2AFC               	goto	l6652
  6344                           
  6345                           ;ir.c: 628: if (ir_state.mSet == 1) {
  6346  0BB5  3187  27D5  3188   	fcall	PL112	;call to abstracted procedure
  6347  0BB8  1D03               	skipz
  6348  0BB9  2BD5               	goto	l6792
  6349                           
  6350                           ;ir.c: 629: RTC_GetTime()->hour = ir_state.time[0]*10 + ir_state.time[1];
  6351  0BBA  2556  3188         	fcall	_RTC_GetTime
  6352  0BBC  2767  3188         	fcall	PL92	;call to abstracted procedure
  6353  0BBE  0838               	movf	_ir_state+2,w	;volatile
  6354  0BBF  24FD  3188         	fcall	___bmul
  6355  0BC1  0739               	addwf	_ir_state+3,w	;volatile
  6356  0BC2  0081               	movwf	1
  6357                           
  6358                           ;ir.c: 630: RTC_GetTime()->minute = ir_state.time[2]*10 + ir_state.time[3];
  6359  0BC3  2556  3188         	fcall	_RTC_GetTime
  6360  0BC5  0023               	movlb	3	; select bank3
  6361  0BC6  00C0               	movwf	??_IR_KeyAction^(0+384)
  6362  0BC7  3E01               	addlw	1
  6363  0BC8  2767  3188         	fcall	PL92	;call to abstracted procedure
  6364  0BCA  083A               	movf	_ir_state+4,w	;volatile
  6365  0BCB  24FD  3188         	fcall	___bmul
  6366  0BCD  073B               	addwf	_ir_state+5,w	;volatile
  6367  0BCE  0081               	movwf	1
  6368  0BCF                     L3:	
  6369                           
  6370                           ;ir.c: 631: if (gLedPara.mAuto) {
  6371  0BCF  0022               	movlb	2	; select bank2
  6372  0BD0  1C20               	btfss	_gLedPara^(0+256),0	;volatile
  6373  0BD1  2BAE               	goto	l6780
  6374                           
  6375                           ;ir.c: 632: Led_Initialize();
  6376  0BD2  20FE  3188         	fcall	_Led_Initialize
  6377  0BD4  2BAE               	goto	l6780
  6378  0BD5                     l6792:	
  6379  0BD5  3187  27CB  3188   	fcall	PL104	;call to abstracted procedure
  6380  0BD8  1D03               	skipz
  6381  0BD9  2BEE               	goto	l6802
  6382                           
  6383                           ;ir.c: 635: gLedPara.mSunrise = ir_state.time[0]*600 + ir_state.time[1]*60 + ir_state.ti
      +                          me[2]*10 + ir_state.time[3];
  6384  0BDA  2711  3188         	fcall	PL32	;call to abstracted procedure
  6385  0BDC  24D1  3188         	fcall	___wmul
  6386  0BDE  26F9  3188         	fcall	PL28	;call to abstracted procedure
  6387  0BE0  24D1  3188         	fcall	___wmul
  6388  0BE2  26D9  3188         	fcall	PL20	;call to abstracted procedure
  6389  0BE4  24D1  3188         	fcall	___wmul
  6390  0BE6  26C7  3188         	fcall	PL14	;call to abstracted procedure
  6391  0BE8  00D4               	movwf	(_gLedPara^(0+256)+52)	;volatile
  6392  0BE9  0023               	movlb	3	; select bank3
  6393  0BEA  0849               	movf	(??_IR_KeyAction+9)^(0+384),w
  6394  0BEB  0022               	movlb	2	; select bank2
  6395  0BEC  00D5               	movwf	((_gLedPara+1)^(0+256)+52)	;volatile
  6396  0BED  2C06               	goto	L5
  6397  0BEE                     l6802:	
  6398                           ;ir.c: 637: if (gLedPara.mAuto) {
  6399                           
  6400                           ;ir.c: 636: gLedRunPara.mParaChanged = 1;
  6401                           
  6402  0BEE  3187  27D0  3188   	fcall	PL106	;call to abstracted procedure
  6403  0BF1  1D03               	skipz
  6404  0BF2  2BAE               	goto	l6780
  6405                           
  6406                           ;ir.c: 641: gLedPara.mSunset = ir_state.time[0]*600 + ir_state.time[1]*60 + ir_state.tim
      +                          e[2]*10 + ir_state.time[3];
  6407  0BF3  2711  3188         	fcall	PL32	;call to abstracted procedure
  6408  0BF5  24D1  3188         	fcall	___wmul
  6409  0BF7  26F9  3188         	fcall	PL28	;call to abstracted procedure
  6410  0BF9  24D1  3188         	fcall	___wmul
  6411  0BFB  26D9  3188         	fcall	PL20	;call to abstracted procedure
  6412  0BFD  24D1  3188         	fcall	___wmul
  6413  0BFF  26C7  3188         	fcall	PL14	;call to abstracted procedure
  6414  0C01  00E0               	movwf	(_gLedPara^(0+256)+64)	;volatile
  6415  0C02  0023               	movlb	3	; select bank3
  6416  0C03  0849               	movf	(??_IR_KeyAction+9)^(0+384),w
  6417  0C04  0022               	movlb	2	; select bank2
  6418  0C05  00E1               	movwf	((_gLedPara+1)^(0+256)+64)	;volatile
  6419  0C06                     L5:	
  6420                           
  6421                           ;ir.c: 642: gLedRunPara.mParaChanged = 1;
  6422  0C06  0021               	movlb	1	; select bank1
  6423  0C07  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
  6424  0C08  2BCF               	goto	L3
  6425  0C09                     l6814:	
  6426                           ;ir.c: 643: if (gLedPara.mAuto) {
  6427                           
  6428                           
  6429                           ;ir.c: 652: if (ir_state.mSet == 4) {
  6430  0C09  3185  25E5  3188   	fcall	PL100	;call to abstracted procedure
  6431  0C0C  1D03               	skipz
  6432  0C0D  2C23               	goto	l6830
  6433                           
  6434                           ;ir.c: 653: for (uint8_t i = 0; i < 5; i++) {
  6435  0C0E  0023               	movlb	3	; select bank3
  6436  0C0F  01CD               	clrf	IR_KeyAction@i_1427^(0+384)
  6437  0C10                     l6818:	
  6438  0C10  3005               	movlw	5
  6439  0C11  024D               	subwf	IR_KeyAction@i_1427^(0+384),w
  6440  0C12  1803               	btfsc	3,0
  6441  0C13  2C1E               	goto	l1206
  6442                           
  6443                           ;ir.c: 654: gLedPara.mDayBright[i] = gLedRunPara.mTargetBright[i];
  6444  0C14  354D               	lslf	IR_KeyAction@i_1427^(0+384),w
  6445  0C15  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6446  0C16  0086               	movwf	6
  6447  0C17  0187               	clrf	7
  6448  0C18  354D               	lslf	IR_KeyAction@i_1427^(0+384),w
  6449  0C19  3E56               	addlw	(low ((_gLedPara| (0+256)+54)))& (0+255)
  6450  0C1A  26BF  3188         	fcall	PL8	;call to abstracted procedure
  6451  0C1C  0ACD               	incf	IR_KeyAction@i_1427^(0+384),f
  6452  0C1D  2C10               	goto	l6818
  6453  0C1E                     l1206:	
  6454                           
  6455                           ;ir.c: 655: }
  6456                           ;ir.c: 656: gLedRunPara.mParaChanged = 1;
  6457  0C1E  0021               	movlb	1	; select bank1
  6458  0C1F  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
  6459                           
  6460                           ;ir.c: 657: IR_ExitSet();
  6461  0C20  25ED  3188         	fcall	_IR_ExitSet
  6462                           
  6463                           ;ir.c: 658: } else if (ir_state.mSet == 5) {
  6464  0C22  2CBB               	goto	l6858
  6465  0C23                     l6830:	
  6466  0C23  3185  25E0  3188   	fcall	PL98	;call to abstracted procedure
  6467  0C26  1D03               	skipz
  6468  0C27  2CBB               	goto	l6858
  6469                           
  6470                           ;ir.c: 659: for (uint8_t i = 0; i < 5; i++) {
  6471  0C28  0023               	movlb	3	; select bank3
  6472  0C29  01CE               	clrf	IR_KeyAction@i_1428^(0+384)
  6473  0C2A                     l6834:	
  6474  0C2A  3005               	movlw	5
  6475  0C2B  024E               	subwf	IR_KeyAction@i_1428^(0+384),w
  6476  0C2C  1803               	btfsc	3,0
  6477  0C2D  2C1E               	goto	l1206
  6478                           
  6479                           ;ir.c: 660: gLedPara.mNightBright[i] = gLedRunPara.mTargetBright[i];
  6480  0C2E  354E               	lslf	IR_KeyAction@i_1428^(0+384),w
  6481  0C2F  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6482  0C30  0086               	movwf	6
  6483  0C31  0187               	clrf	7
  6484  0C32  354E               	lslf	IR_KeyAction@i_1428^(0+384),w
  6485  0C33  3E62               	addlw	(low ((_gLedPara| (0+256)+66)))& (0+255)
  6486  0C34  26BF  3188         	fcall	PL8	;call to abstracted procedure
  6487  0C36  0ACE               	incf	IR_KeyAction@i_1428^(0+384),f
  6488  0C37  2C2A               	goto	l6834
  6489  0C38                     l6846:	
  6490                           
  6491                           ;ir.c: 667: ir_state.mSet = 0;
  6492  0C38  301F               	movlw	-225
  6493  0C39  05B6               	andwf	_ir_state,f	;volatile
  6494                           
  6495                           ;ir.c: 668: ir_state.tmIdx = 0;
  6496  0C3A  01B7               	clrf	_ir_state+1	;volatile
  6497                           
  6498                           ;ir.c: 669: ir_state.mSetDelay = 0;
  6499  0C3B  01BC               	clrf	_ir_state+6	;volatile
  6500                           
  6501                           ;ir.c: 670: Led_StartNotice(3);
  6502  0C3C  3003               	movlw	3
  6503  0C3D  2557  3188         	fcall	_Led_StartNotice
  6504                           
  6505                           ;ir.c: 671: break;
  6506  0C3F  2CBB               	goto	l6858
  6507  0C40                     l6856:	
  6508  0C40  0020               	movlb	0	; select bank0
  6509  0C41  0832               	movf	_keyValue,w	;volatile
  6510                           
  6511                           ; Switch size 1, requested type "space"
  6512                           ; Number of cases is 40, Range of values is 4 to 255
  6513                           ; switch strategies available:
  6514                           ; Name         Instructions Cycles
  6515                           ; simple_byte          121    61 (average)
  6516                           ; jumptable            263     9 (fixed)
  6517                           ;	Chosen strategy is simple_byte
  6518  0C42  3A04               	xorlw	4	; case 4
  6519  0C43  1903               	skipnz
  6520  0C44  2B94               	goto	l6768
  6521  0C45  3A01               	xorlw	1	; case 5
  6522  0C46  1903               	skipnz
  6523  0C47  2B94               	goto	l6768
  6524  0C48  3A02               	xorlw	2	; case 7
  6525  0C49  1903               	skipnz
  6526  0C4A  2C09               	goto	l6814
  6527  0C4B  3A0F               	xorlw	15	; case 8
  6528  0C4C  1903               	skipnz
  6529  0C4D  2B94               	goto	l6768
  6530  0C4E  3A01               	xorlw	1	; case 9
  6531  0C4F  1903               	skipnz
  6532  0C50  2B94               	goto	l6768
  6533  0C51  3A03               	xorlw	3	; case 10
  6534  0C52  1903               	skipnz
  6535  0C53  2B94               	goto	l6768
  6536  0C54  3A01               	xorlw	1	; case 11
  6537  0C55  1903               	skipnz
  6538  0C56  2B94               	goto	l6768
  6539  0C57  3A07               	xorlw	7	; case 12
  6540  0C58  1903               	skipnz
  6541  0C59  2B94               	goto	l1183
  6542  0C5A  3A01               	xorlw	1	; case 13
  6543  0C5B  1903               	skipnz
  6544  0C5C  2B94               	goto	l1183
  6545  0C5D  3A03               	xorlw	3	; case 14
  6546  0C5E  1903               	skipnz
  6547  0C5F  2B94               	goto	l6768
  6548  0C60  3A01               	xorlw	1	; case 15
  6549  0C61  1903               	skipnz
  6550  0C62  2B94               	goto	l6768
  6551  0C63  3A1B               	xorlw	27	; case 20
  6552  0C64  1903               	skipnz
  6553  0C65  2A95               	goto	l1142
  6554  0C66  3A01               	xorlw	1	; case 21
  6555  0C67  1903               	skipnz
  6556  0C68  2A95               	goto	l6588
  6557  0C69  3A03               	xorlw	3	; case 22
  6558  0C6A  1903               	skipnz
  6559  0C6B  2A95               	goto	l6588
  6560  0C6C  3A01               	xorlw	1	; case 23
  6561  0C6D  1903               	skipnz
  6562  0C6E  2A95               	goto	l6588
  6563  0C6F  3A0F               	xorlw	15	; case 24
  6564  0C70  1903               	skipnz
  6565  0C71  2B56               	goto	l6734
  6566  0C72  3A01               	xorlw	1	; case 25
  6567  0C73  1903               	skipnz
  6568  0C74  2B3E               	goto	l6712
  6569  0C75  3A03               	xorlw	3	; case 26
  6570  0C76  1903               	skipnz
  6571  0C77  2B71               	goto	l6756
  6572  0C78  3A01               	xorlw	1	; case 27
  6573  0C79  1903               	skipnz
  6574  0C7A  2B82               	goto	l6762
  6575  0C7B  3A07               	xorlw	7	; case 28
  6576  0C7C  1903               	skipnz
  6577  0C7D  2A63               	goto	l6532
  6578  0C7E  3A01               	xorlw	1	; case 29
  6579  0C7F  1903               	skipnz
  6580  0C80  2A74               	goto	l6546
  6581  0C81  3A03               	xorlw	3	; case 30
  6582  0C82  1903               	skipnz
  6583  0C83  2A7F               	goto	l6560
  6584  0C84  3A01               	xorlw	1	; case 31
  6585  0C85  1903               	skipnz
  6586  0C86  2A8A               	goto	l6574
  6587  0C87  3A5F               	xorlw	95	; case 64
  6588  0C88  1903               	skipnz
  6589  0C89  2AFE               	goto	l6654
  6590  0C8A  3A01               	xorlw	1	; case 65
  6591  0C8B  1903               	skipnz
  6592  0C8C  2ADD               	goto	l6634
  6593  0C8D  3A05               	xorlw	5	; case 68
  6594  0C8E  1903               	skipnz
  6595  0C8F  2ADD               	goto	l6634
  6596  0C90  3A01               	xorlw	1	; case 69
  6597  0C91  1903               	skipnz
  6598  0C92  2ADD               	goto	l6634
  6599  0C93  3A0D               	xorlw	13	; case 72
  6600  0C94  1903               	skipnz
  6601  0C95  2AFE               	goto	l6654
  6602  0C96  3A01               	xorlw	1	; case 73
  6603  0C97  1903               	skipnz
  6604  0C98  2AFE               	goto	l6654
  6605  0C99  3A05               	xorlw	5	; case 76
  6606  0C9A  1903               	skipnz
  6607  0C9B  2B0B               	goto	l6674
  6608  0C9C  3A01               	xorlw	1	; case 77
  6609  0C9D  1903               	skipnz
  6610  0C9E  2B0B               	goto	l6674
  6611  0C9F  3A1D               	xorlw	29	; case 80
  6612  0CA0  1903               	skipnz
  6613  0CA1  2B0B               	goto	l1164
  6614  0CA2  3A01               	xorlw	1	; case 81
  6615  0CA3  1903               	skipnz
  6616  0CA4  2B0B               	goto	l6674
  6617  0CA5  3A05               	xorlw	5	; case 84
  6618  0CA6  1903               	skipnz
  6619  0CA7  2AFE               	goto	l1158
  6620  0CA8  3A01               	xorlw	1	; case 85
  6621  0CA9  1903               	skipnz
  6622  0CAA  2AFE               	goto	l6654
  6623  0CAB  3A0D               	xorlw	13	; case 88
  6624  0CAC  1903               	skipnz
  6625  0CAD  2ADD               	goto	l1151
  6626  0CAE  3A01               	xorlw	1	; case 89
  6627  0CAF  1903               	skipnz
  6628  0CB0  2ADD               	goto	l6634
  6629  0CB1  3A05               	xorlw	5	; case 92
  6630  0CB2  1903               	skipnz
  6631  0CB3  2AB5               	goto	l6602
  6632  0CB4  3A01               	xorlw	1	; case 93
  6633  0CB5  1903               	skipnz
  6634  0CB6  2AC4               	goto	l6612
  6635  0CB7  3AA2               	xorlw	162	; case 255
  6636  0CB8  1903               	skipnz
  6637  0CB9  2C38               	goto	l6846
  6638  0CBA  2CBB               	goto	l6858
  6639  0CBB                     l6858:	
  6640                           
  6641                           ;ir.c: 675: TMR2_EnableInterrupt();
  6642  0CBB  2689               	fcall	_TMR2_EnableInterrupt
  6643                           
  6644                           ;ir.c: 676: keyValue = 0x00;
  6645  0CBC  0020               	movlb	0	; select bank0
  6646  0CBD  01B2               	clrf	_keyValue	;volatile
  6647  0CBE  0008               	return
  6648  0CBF                     __end_of_IR_KeyAction:	
  6649  0CBF                     __ptext60:	
  6650 ;; *************** function _Audio_StopSound *****************
  6651 ;; Defined at:
  6652 ;;		line 15 in file "user/src/audio.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;		None
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;  checksum        1   15[BANK0 ] unsigned char 
  6657 ;; Return value:  Size  Location     Type
  6658 ;;                  1    wreg      void 
  6659 ;; Registers used:
  6660 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 1F/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;Total ram usage:        1 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    8
  6673 ;; This function calls:
  6674 ;;		_EUSART_Write
  6675 ;; This function is called by:
  6676 ;;		_Led_Initialize
  6677 ;;		_IR_KeyAction
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           
  6682                           ;psect for function _Audio_StopSound
  6683  0CBF                     _Audio_StopSound:	
  6684                           
  6685                           ;audio.c: 17: uint8_t checksum = 0x00;
  6686                           
  6687                           ;incstack = 0
  6688                           ; Regs used in _Audio_StopSound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6689  0CBF  0020               	movlb	0	; select bank0
  6690  0CC0  307E               	movlw	126
  6691  0CC1  01CF               	clrf	Audio_StopSound@checksum
  6692                           
  6693                           ;audio.c: 18: EUSART_Write ( 0x7E );
  6694  0CC2  24E6  3188         	fcall	_EUSART_Write
  6695                           
  6696                           ;audio.c: 19: checksum ^= EUSART_Write ( 0x03 );
  6697  0CC4  3003               	movlw	3
  6698  0CC5  24E6  3188         	fcall	_EUSART_Write
  6699  0CC7  06CF               	xorwf	Audio_StopSound@checksum,f
  6700                           
  6701                           ;audio.c: 20: checksum ^= EUSART_Write ( 0x1E );
  6702  0CC8  301E               	movlw	30
  6703  0CC9  24E6  3188         	fcall	_EUSART_Write
  6704  0CCB  06CF               	xorwf	Audio_StopSound@checksum,f
  6705                           
  6706                           ;audio.c: 21: EUSART_Write ( checksum );
  6707  0CCC  084F               	movf	Audio_StopSound@checksum,w
  6708  0CCD  24E6  3188         	fcall	_EUSART_Write
  6709                           
  6710                           ;audio.c: 22: EUSART_Write ( 0xEF );
  6711  0CCF  30EF               	movlw	239
  6712  0CD0  2CE6               	ljmp	_EUSART_Write
  6713  0CD1                     __end_of_Audio_StopSound:	
  6714  0CD1                     __ptext65:	
  6715 ;; *************** function ___wmul *****************
  6716 ;; Defined at:
  6717 ;;		line 15 in file "/Applications/microchip/xc8/v1.40/sources/common/Umul16.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;  multiplier      2   14[BANK0 ] unsigned int 
  6720 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  6721 ;; Auto vars:     Size  Location     Type
  6722 ;;  product         2   18[BANK0 ] unsigned int 
  6723 ;; Return value:  Size  Location     Type
  6724 ;;                  2   14[BANK0 ] unsigned int 
  6725 ;; Registers used:
  6726 ;;		wreg, status,2, status,0
  6727 ;; Tracked objects:
  6728 ;;		On entry : 1F/0
  6729 ;;		On exit  : 1F/0
  6730 ;;		Unchanged: 0/0
  6731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6732 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;Total ram usage:        6 bytes
  6737 ;; Hardware stack levels used:    1
  6738 ;; Hardware stack levels required when called:    7
  6739 ;; This function calls:
  6740 ;;		Nothing
  6741 ;; This function is called by:
  6742 ;;		_Audio_GetValue
  6743 ;;		_Led_Initialize
  6744 ;;		_Led_CheckAutoStatus
  6745 ;;		_IR_KeyAction
  6746 ;; This function uses a non-reentrant model
  6747 ;;
  6748                           
  6749                           
  6750                           ;psect for function ___wmul
  6751  0CD1                     ___wmul:	
  6752                           
  6753                           ;incstack = 0
  6754                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6755  0CD1  01D2               	clrf	___wmul@product
  6756  0CD2  01D3               	clrf	___wmul@product+1
  6757  0CD3                     l5902:	
  6758  0CD3  1C4E               	btfss	___wmul@multiplier,0
  6759  0CD4  2CD9               	goto	l5906
  6760  0CD5  0850               	movf	___wmul@multiplicand,w
  6761  0CD6  07D2               	addwf	___wmul@product,f
  6762  0CD7  0851               	movf	___wmul@multiplicand+1,w
  6763  0CD8  3DD3               	addwfc	___wmul@product+1,f
  6764  0CD9                     l5906:	
  6765  0CD9  35D0               	lslf	___wmul@multiplicand,f
  6766  0CDA  0DD1               	rlf	___wmul@multiplicand+1,f
  6767  0CDB  36CF               	lsrf	___wmul@multiplier+1,f
  6768  0CDC  0CCE               	rrf	___wmul@multiplier,f
  6769  0CDD  084E               	movf	___wmul@multiplier,w
  6770  0CDE  044F               	iorwf	___wmul@multiplier+1,w
  6771  0CDF  1D03               	btfss	3,2
  6772  0CE0  2CD3               	goto	l5902
  6773  0CE1  0853               	movf	___wmul@product+1,w
  6774  0CE2  00CF               	movwf	?___wmul+1
  6775  0CE3  0852               	movf	___wmul@product,w
  6776  0CE4  00CE               	movwf	?___wmul
  6777  0CE5  0008               	return
  6778  0CE6                     __end_of___wmul:	
  6779  0CE6                     __ptext63:	
  6780 ;; *************** function _EUSART_Write *****************
  6781 ;; Defined at:
  6782 ;;		line 32 in file "driver/src/eusart.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  byte            1    wreg     unsigned char 
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;  byte            1   14[BANK0 ] unsigned char 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  1    wreg      unsigned char 
  6789 ;; Registers used:
  6790 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6791 ;; Tracked objects:
  6792 ;;		On entry : 1F/0
  6793 ;;		On exit  : 1F/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;Total ram usage:        1 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    7
  6803 ;; This function calls:
  6804 ;;		Nothing
  6805 ;; This function is called by:
  6806 ;;		_Audio_StopSound
  6807 ;;		_Audio_SetPlayMode
  6808 ;;		_Audio_SetVolume
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           
  6813                           ;psect for function _EUSART_Write
  6814  0CE6                     _EUSART_Write:	
  6815                           
  6816                           ;incstack = 0
  6817                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6818                           ;EUSART_Write@byte stored from wreg
  6819  0CE6  00CE               	movwf	EUSART_Write@byte
  6820  0CE7                     l5784:	
  6821                           ;eusart.c: 34: while ( 0 == txRemain );
  6822                           
  6823  0CE7  085E               	movf	_txRemain,w
  6824  0CE8  1903               	btfsc	3,2
  6825  0CE9  2CE7               	goto	l5784
  6826                           
  6827                           ;eusart.c: 36: if ( !PIE1bits.TXIE )
  6828  0CEA  0021               	movlb	1	; select bank1
  6829  0CEB  1A11               	btfsc	17,4	;volatile
  6830  0CEC  2CF2               	goto	l95
  6831                           
  6832                           ;eusart.c: 37: {
  6833                           ;eusart.c: 38: TXREG = byte;
  6834  0CED  0020               	movlb	0	; select bank0
  6835  0CEE  084E               	movf	EUSART_Write@byte,w
  6836  0CEF  0023               	movlb	3	; select bank3
  6837  0CF0  009A               	movwf	26	;volatile
  6838                           
  6839                           ;eusart.c: 39: }
  6840  0CF1  2CF8               	goto	l5798
  6841  0CF2                     l95:	
  6842                           
  6843                           ;eusart.c: 40: else
  6844                           ;eusart.c: 41: {
  6845                           ;eusart.c: 42: PIE1bits.TXIE = 0;
  6846                           
  6847                           ;eusart.c: 43: txBuf[txHead++] = byte;
  6848  0CF2  3183  2340  3188   	fcall	PL68	;call to abstracted procedure
  6849  0CF5  084E               	movf	EUSART_Write@byte,w
  6850                           
  6851                           ;eusart.c: 44: if ( sizeof (txBuf ) <= txHead )
  6852                           
  6853                           ;eusart.c: 45: {
  6854                           ;eusart.c: 46: txHead = 0;
  6855                           
  6856                           ;eusart.c: 47: }
  6857                           ;eusart.c: 48: txRemain--;
  6858  0CF6  3183  2328         	fcall	PL62	;call to abstracted procedure
  6859  0CF8                     l5798:	
  6860                           
  6861                           ;eusart.c: 49: }
  6862                           ;eusart.c: 50: PIE1bits.TXIE = 1;
  6863  0CF8  0021               	movlb	1	; select bank1
  6864  0CF9  1611               	bsf	17,4	;volatile
  6865                           
  6866                           ;eusart.c: 51: return byte;
  6867  0CFA  0020               	movlb	0	; select bank0
  6868  0CFB  084E               	movf	EUSART_Write@byte,w
  6869  0CFC  0008               	return
  6870  0CFD                     __end_of_EUSART_Write:	
  6871  0CFD                     __ptext45:	
  6872 ;; *************** function ___bmul *****************
  6873 ;; Defined at:
  6874 ;;		line 4 in file "/Applications/microchip/xc8/v1.40/sources/common/Umul8.c"
  6875 ;; Parameters:    Size  Location     Type
  6876 ;;  multiplier      1    wreg     unsigned char 
  6877 ;;  multiplicand    1   14[BANK0 ] unsigned char 
  6878 ;; Auto vars:     Size  Location     Type
  6879 ;;  multiplier      1   16[BANK0 ] unsigned char 
  6880 ;;  product         1   15[BANK0 ] unsigned char 
  6881 ;; Return value:  Size  Location     Type
  6882 ;;                  1    wreg      unsigned char 
  6883 ;; Registers used:
  6884 ;;		wreg, status,2, status,0
  6885 ;; Tracked objects:
  6886 ;;		On entry : 1C/0
  6887 ;;		On exit  : 1F/0
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6890 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6893 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;Total ram usage:        3 bytes
  6895 ;; Hardware stack levels used:    1
  6896 ;; Hardware stack levels required when called:    7
  6897 ;; This function calls:
  6898 ;;		Nothing
  6899 ;; This function is called by:
  6900 ;;		_Led_InitPara
  6901 ;;		_Led_SetCustom
  6902 ;;		_IR_IsValidTime
  6903 ;;		_IR_KeyAction
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907                           
  6908                           ;psect for function ___bmul
  6909  0CFD                     ___bmul:	
  6910                           
  6911                           ;incstack = 0
  6912                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6913                           ;___bmul@multiplier stored from wreg
  6914  0CFD  0020               	movlb	0	; select bank0
  6915  0CFE  00D0               	movwf	___bmul@multiplier
  6916  0CFF  01CF               	clrf	___bmul@product
  6917  0D00                     l6216:	
  6918  0D00  084E               	movf	___bmul@multiplicand,w
  6919  0D01  1850               	btfsc	___bmul@multiplier,0
  6920  0D02  07CF               	addwf	___bmul@product,f
  6921  0D03  35CE               	lslf	___bmul@multiplicand,f
  6922  0D04  36D0               	lsrf	___bmul@multiplier,f
  6923  0D05  0850               	movf	___bmul@multiplier,w
  6924  0D06  1D03               	btfss	3,2
  6925  0D07  2D00               	goto	l6216
  6926  0D08  084F               	movf	___bmul@product,w
  6927  0D09  0008               	return
  6928  0D0A                     __end_of___bmul:	
  6929  0D0A                     __ptext41:	
  6930 ;; *************** function _Util_DecValue *****************
  6931 ;; Defined at:
  6932 ;;		line 15 in file "user/src/util.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;  pSrc            2   14[BANK0 ] PTR unsigned int 
  6935 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), gLedPara(76), 
  6936 ;;  min             2   16[BANK0 ] unsigned int 
  6937 ;;  delta           2   18[BANK0 ] unsigned int 
  6938 ;; Auto vars:     Size  Location     Type
  6939 ;;		None
  6940 ;; Return value:  Size  Location     Type
  6941 ;;                  1    wreg      void 
  6942 ;; Registers used:
  6943 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6944 ;; Tracked objects:
  6945 ;;		On entry : 1F/0
  6946 ;;		On exit  : 1F/0
  6947 ;;		Unchanged: 0/0
  6948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6949 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6951 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6952 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;Total ram usage:       10 bytes
  6954 ;; Hardware stack levels used:    1
  6955 ;; Hardware stack levels required when called:    7
  6956 ;; This function calls:
  6957 ;;		Nothing
  6958 ;; This function is called by:
  6959 ;;		_IR_KeyAction
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           
  6964                           ;psect for function _Util_DecValue
  6965  0D0A                     _Util_DecValue:	
  6966                           
  6967                           ;util.c: 17: if( *pSrc > min + delta )
  6968                           
  6969                           ;incstack = 0
  6970                           ; Regs used in _Util_DecValue: [wreg+fsr1l+fsr1h+status,2+status,0]
  6971  0D0A  084E               	movf	Util_DecValue@pSrc,w
  6972  0D0B  0086               	movwf	6
  6973  0D0C  084F               	movf	Util_DecValue@pSrc+1,w
  6974  0D0D  0087               	movwf	7
  6975  0D0E  3F40               	moviw [0]fsr1
  6976  0D0F  00D4               	movwf	??_Util_DecValue
  6977  0D10  3F41               	moviw [1]fsr1
  6978  0D11  00D5               	movwf	??_Util_DecValue+1
  6979  0D12  0852               	movf	Util_DecValue@delta,w
  6980  0D13  0750               	addwf	Util_DecValue@min,w
  6981  0D14  00D6               	movwf	??_Util_DecValue+2
  6982  0D15  0853               	movf	Util_DecValue@delta+1,w
  6983  0D16  3D51               	addwfc	Util_DecValue@min+1,w
  6984  0D17  00D7               	movwf	??_Util_DecValue+3
  6985  0D18  0855               	movf	??_Util_DecValue+1,w
  6986  0D19  0257               	subwf	??_Util_DecValue+3,w
  6987  0D1A  1D03               	skipz
  6988  0D1B  2D1E               	goto	u5445
  6989  0D1C  0854               	movf	??_Util_DecValue,w
  6990  0D1D  0256               	subwf	??_Util_DecValue+2,w
  6991  0D1E                     u5445:	
  6992                           
  6993                           ;util.c: 18: {
  6994                           ;util.c: 19: (*pSrc) -= delta;
  6995  0D1E  084E               	movf	Util_DecValue@pSrc,w
  6996  0D1F  0086               	movwf	6
  6997  0D20  084F               	movf	Util_DecValue@pSrc+1,w
  6998  0D21  0087               	movwf	7
  6999  0D22  1803               	skipnc
  7000  0D23  2D2B               	goto	L7
  7001  0D24  0852               	movf	Util_DecValue@delta,w
  7002  0D25  0281               	subwf	1,f
  7003  0D26  3141               	addfsr 1,1
  7004  0D27  0853               	movf	Util_DecValue@delta+1,w
  7005  0D28  3B81               	subwfb	1,f
  7006  0D29  317F               	addfsr 1,-1
  7007                           
  7008                           ;util.c: 20: }
  7009  0D2A  0008               	return
  7010  0D2B                     L7:	
  7011                           ;util.c: 21: else
  7012                           ;util.c: 22: {
  7013                           ;util.c: 23: *pSrc = min;
  7014                           
  7015  0D2B  0850               	movf	Util_DecValue@min,w
  7016  0D2C  3FC0               	movwi [0]fsr1
  7017  0D2D  0851               	movf	Util_DecValue@min+1,w
  7018  0D2E  3FC1               	movwi [1]fsr1
  7019  0D2F  0008               	return
  7020  0D30                     __end_of_Util_DecValue:	
  7021  0D30                     __ptext40:	
  7022 ;; *************** function _Util_IncValue *****************
  7023 ;; Defined at:
  7024 ;;		line 3 in file "user/src/util.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;  pSrc            2   14[BANK0 ] PTR unsigned int 
  7027 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara.mCurrentBright(10), gLedRunPara(26), gLedPara.mVolume(1), 
  7028 ;;		 -> gLedPara(76), 
  7029 ;;  max             2   16[BANK0 ] unsigned int 
  7030 ;;  delta           2   18[BANK0 ] unsigned int 
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;		None
  7033 ;; Return value:  Size  Location     Type
  7034 ;;                  1    wreg      void 
  7035 ;; Registers used:
  7036 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7037 ;; Tracked objects:
  7038 ;;		On entry : 1F/0
  7039 ;;		On exit  : 1F/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7042 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7044 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7045 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7046 ;;Total ram usage:       10 bytes
  7047 ;; Hardware stack levels used:    1
  7048 ;; Hardware stack levels required when called:    7
  7049 ;; This function calls:
  7050 ;;		Nothing
  7051 ;; This function is called by:
  7052 ;;		_Led_AutoRun
  7053 ;;		_IR_KeyAction
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           
  7058                           ;psect for function _Util_IncValue
  7059  0D30                     _Util_IncValue:	
  7060                           
  7061                           ;util.c: 5: if( *pSrc + delta < max )
  7062                           
  7063                           ;incstack = 0
  7064                           ; Regs used in _Util_IncValue: [wreg+fsr1l+fsr1h+status,2+status,0]
  7065  0D30  084E               	movf	Util_IncValue@pSrc,w
  7066  0D31  0086               	movwf	6
  7067  0D32  084F               	movf	Util_IncValue@pSrc+1,w
  7068  0D33  0087               	movwf	7
  7069  0D34  3F40               	moviw [0]fsr1
  7070  0D35  00D4               	movwf	??_Util_IncValue
  7071  0D36  3F41               	moviw [1]fsr1
  7072  0D37  00D5               	movwf	??_Util_IncValue+1
  7073  0D38  0852               	movf	Util_IncValue@delta,w
  7074  0D39  0754               	addwf	??_Util_IncValue,w
  7075  0D3A  00D6               	movwf	??_Util_IncValue+2
  7076  0D3B  0853               	movf	Util_IncValue@delta+1,w
  7077  0D3C  3D55               	addwfc	??_Util_IncValue+1,w
  7078  0D3D  00D7               	movwf	??_Util_IncValue+3
  7079  0D3E  0851               	movf	Util_IncValue@max+1,w
  7080  0D3F  0257               	subwf	??_Util_IncValue+3,w
  7081  0D40  1D03               	skipz
  7082  0D41  2D44               	goto	u5215
  7083  0D42  0850               	movf	Util_IncValue@max,w
  7084  0D43  0256               	subwf	??_Util_IncValue+2,w
  7085  0D44                     u5215:	
  7086                           
  7087                           ;util.c: 6: {
  7088                           ;util.c: 7: (*pSrc) += delta;
  7089  0D44  084E               	movf	Util_IncValue@pSrc,w
  7090  0D45  0086               	movwf	6
  7091  0D46  084F               	movf	Util_IncValue@pSrc+1,w
  7092  0D47  0087               	movwf	7
  7093  0D48  1803               	skipnc
  7094  0D49  2D51               	goto	L6
  7095  0D4A  0852               	movf	Util_IncValue@delta,w
  7096  0D4B  0781               	addwf	1,f
  7097  0D4C  3141               	addfsr 1,1
  7098  0D4D  0853               	movf	Util_IncValue@delta+1,w
  7099  0D4E  3D81               	addwfc	1,f
  7100  0D4F  317F               	addfsr 1,-1
  7101                           
  7102                           ;util.c: 8: }
  7103  0D50  0008               	return
  7104  0D51                     L6:	
  7105                           ;util.c: 9: else
  7106                           ;util.c: 10: {
  7107                           ;util.c: 11: *pSrc = max;
  7108                           
  7109  0D51  0850               	movf	Util_IncValue@max,w
  7110  0D52  3FC0               	movwi [0]fsr1
  7111  0D53  0851               	movf	Util_IncValue@max+1,w
  7112  0D54  3FC1               	movwi [1]fsr1
  7113  0D55  0008               	return
  7114  0D56                     __end_of_Util_IncValue:	
  7115  0D56                     __ptext51:	
  7116 ;; *************** function _RTC_GetTime *****************
  7117 ;; Defined at:
  7118 ;;		line 14 in file "user/src/rtc.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;		None
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;		None
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  1    wreg      PTR struct .
  7125 ;; Registers used:
  7126 ;;		wreg
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/2
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;Total ram usage:        0 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:    7
  7139 ;; This function calls:
  7140 ;;		Nothing
  7141 ;; This function is called by:
  7142 ;;		_Led_Initialize
  7143 ;;		_Led_CheckAutoStatus
  7144 ;;		_IR_KeyAction
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           
  7149                           ;psect for function _RTC_GetTime
  7150  0D56                     _RTC_GetTime:	
  7151                           
  7152                           ;rtc.c: 16: return &rtc_time;
  7153                           
  7154                           ;incstack = 0
  7155                           ; Regs used in _RTC_GetTime: [wreg]
  7156  0D56  343D               	retlw	(low (_rtc_time| 0))& (0+255)
  7157  0D57                     __end_of_RTC_GetTime:	
  7158  0D57                     __ptext48:	
  7159 ;; *************** function _Led_StartNotice *****************
  7160 ;; Defined at:
  7161 ;;		line 381 in file "user/src/led.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;  cnt             1    wreg     unsigned char 
  7164 ;; Auto vars:     Size  Location     Type
  7165 ;;  cnt             1   15[BANK0 ] unsigned char 
  7166 ;; Return value:  Size  Location     Type
  7167 ;;                  1    wreg      void 
  7168 ;; Registers used:
  7169 ;;		wreg, status,2, status,0, pclath, cstack
  7170 ;; Tracked objects:
  7171 ;;		On entry : 1F/0
  7172 ;;		On exit  : 1F/8
  7173 ;;		Unchanged: 0/0
  7174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;Total ram usage:        2 bytes
  7180 ;; Hardware stack levels used:    1
  7181 ;; Hardware stack levels required when called:    8
  7182 ;; This function calls:
  7183 ;;		_TMR4_StartTimer
  7184 ;; This function is called by:
  7185 ;;		_IR_ExitSet
  7186 ;;		_IR_ExitTimeout
  7187 ;;		_IR_KeyAction
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           
  7192                           ;psect for function _Led_StartNotice
  7193  0D57                     _Led_StartNotice:	
  7194                           
  7195                           ;incstack = 0
  7196                           ; Regs used in _Led_StartNotice: [wreg+status,2+status,0+pclath+cstack]
  7197                           ;Led_StartNotice@cnt stored from wreg
  7198  0D57  00CF               	movwf	Led_StartNotice@cnt
  7199                           
  7200                           ;led.c: 382: gLedRunPara.mNoticeCount = cnt;
  7201  0D58  00CE               	movwf	??_Led_StartNotice
  7202  0D59  0DCE               	rlf	??_Led_StartNotice,f
  7203  0D5A  0DCE               	rlf	??_Led_StartNotice,f
  7204  0D5B  0021               	movlb	1	; select bank1
  7205  0D5C  085C               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
  7206  0D5D  0020               	movlb	0	; select bank0
  7207  0D5E  064E               	xorwf	??_Led_StartNotice,w
  7208  0D5F  3903               	andlw	-253
  7209  0D60  064E               	xorwf	??_Led_StartNotice,w
  7210  0D61  0021               	movlb	1	; select bank1
  7211  0D62  00DC               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
  7212                           
  7213                           ;led.c: 383: TMR4_StartTimer();
  7214  0D63  2D67               	ljmp	l5814
  7215  0D64                     __end_of_Led_StartNotice:	
  7216  0D64                     __ptext43:	
  7217 ;; *************** function _TMR2_DisableInterrupt *****************
  7218 ;; Defined at:
  7219 ;;		line 40 in file "driver/src/tmr2.c"
  7220 ;; Parameters:    Size  Location     Type
  7221 ;;		None
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;		None
  7224 ;; Return value:  Size  Location     Type
  7225 ;;                  1    wreg      void 
  7226 ;; Registers used:
  7227 ;;		None
  7228 ;; Tracked objects:
  7229 ;;		On entry : 1F/0
  7230 ;;		On exit  : 1F/1
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;Total ram usage:        0 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:    7
  7240 ;; This function calls:
  7241 ;;		Nothing
  7242 ;; This function is called by:
  7243 ;;		_IR_KeyAction
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           
  7248                           ;psect for function _TMR2_DisableInterrupt
  7249  0D64                     _TMR2_DisableInterrupt:	
  7250                           
  7251                           ;tmr2.c: 42: PIE1bits.TMR2IE = 0;
  7252                           
  7253                           ;incstack = 0
  7254                           ; Regs used in _TMR2_DisableInterrupt: []
  7255  0D64  0021               	movlb	1	; select bank1
  7256  0D65  1091               	bcf	17,1	;volatile
  7257  0D66  0008               	return
  7258  0D67                     __end_of_TMR2_DisableInterrupt:	
  7259  0D67                     __ptext49:	
  7260 ;; *************** function _TMR4_StartTimer *****************
  7261 ;; Defined at:
  7262 ;;		line 17 in file "driver/src/tmr4.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;		None
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;		None
  7267 ;; Return value:  Size  Location     Type
  7268 ;;                  1    wreg      void 
  7269 ;; Registers used:
  7270 ;;		None
  7271 ;; Tracked objects:
  7272 ;;		On entry : 1F/1
  7273 ;;		On exit  : 1F/8
  7274 ;;		Unchanged: 0/0
  7275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;Total ram usage:        0 bytes
  7281 ;; Hardware stack levels used:    1
  7282 ;; Hardware stack levels required when called:    7
  7283 ;; This function calls:
  7284 ;;		Nothing
  7285 ;; This function is called by:
  7286 ;;		_Led_StartNotice
  7287 ;; This function uses a non-reentrant model
  7288 ;;
  7289                           
  7290                           
  7291                           ;psect for function _TMR4_StartTimer
  7292  0D67                     _TMR4_StartTimer:	
  7293  0D67                     l5814:	
  7294                           ;incstack = 0
  7295                           ; Regs used in _TMR4_StartTimer: []
  7296                           
  7297                           
  7298                           ;tmr4.c: 19: T4CONbits.TMR4ON = 1;
  7299  0D67  0028               	movlb	8	; select bank8
  7300  0D68  1517               	bsf	23,2	;volatile
  7301  0D69  0008               	return
  7302  0D6A                     __end_of_TMR4_StartTimer:	
  7303  0D6A                     __ptext46:	
  7304 ;; *************** function _IR_GetIndex *****************
  7305 ;; Defined at:
  7306 ;;		line 10 in file "user/src/ir.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;  keynum          1    wreg     unsigned char 
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;  keynum          1   15[BANK0 ] unsigned char 
  7311 ;;  idx             1   14[BANK0 ] unsigned char 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  1    wreg      unsigned char 
  7314 ;; Registers used:
  7315 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7316 ;; Tracked objects:
  7317 ;;		On entry : 1F/0
  7318 ;;		On exit  : 1F/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7324 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;Total ram usage:        2 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; Hardware stack levels required when called:    7
  7328 ;; This function calls:
  7329 ;;		Nothing
  7330 ;; This function is called by:
  7331 ;;		_IR_KeyAction
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           
  7336                           ;psect for function _IR_GetIndex
  7337  0D6A                     _IR_GetIndex:	
  7338                           
  7339                           ;incstack = 0
  7340                           ; Regs used in _IR_GetIndex: [wreg-fsr0h+status,2+status,0]
  7341                           ;IR_GetIndex@keynum stored from wreg
  7342  0D6A  00CF               	movwf	IR_GetIndex@keynum
  7343                           
  7344                           ;ir.c: 11: uint8_t idx = 0xFF;
  7345  0D6B  30FF               	movlw	255
  7346  0D6C  00CE               	movwf	IR_GetIndex@idx
  7347                           
  7348                           ;ir.c: 12: switch (keynum) {
  7349  0D6D  2D89               	goto	l6440
  7350  0D6E                     l6420:	
  7351                           
  7352                           ;ir.c: 14: case 0x54:
  7353                           ;ir.c: 15: case 0x50:
  7354                           ;ir.c: 16: idx = 0;
  7355  0D6E  01CE               	clrf	IR_GetIndex@idx
  7356                           
  7357                           ;ir.c: 17: break;
  7358  0D6F  2DEB               	goto	l6442
  7359  0D70                     l888:	
  7360                           
  7361                           ;ir.c: 19: case 0x55:
  7362                           ;ir.c: 20: case 0x51:
  7363                           ;ir.c: 21: idx = 1;
  7364  0D70  01CE               	clrf	IR_GetIndex@idx
  7365  0D71  0ACE               	incf	IR_GetIndex@idx,f
  7366                           
  7367                           ;ir.c: 22: break;
  7368  0D72  2DEB               	goto	l6442
  7369  0D73                     l6422:	
  7370                           
  7371                           ;ir.c: 24: case 0x49:
  7372                           ;ir.c: 25: case 0x4D:
  7373                           ;ir.c: 26: idx = 2;
  7374  0D73  3002               	movlw	2
  7375  0D74  2D87               	goto	L16
  7376  0D75                     l6424:	
  7377                           ;ir.c: 27: break;
  7378                           
  7379                           
  7380                           ;ir.c: 29: case 0x44:
  7381                           ;ir.c: 30: case 0x4C:
  7382                           ;ir.c: 31: idx = 3;
  7383  0D75  3003               	movlw	3
  7384  0D76  2D87               	goto	L16
  7385  0D77                     l6426:	
  7386                           ;ir.c: 32: break;
  7387                           
  7388                           
  7389                           ;ir.c: 34: case 0x40:
  7390                           ;ir.c: 35: idx = 4;
  7391  0D77  3004               	movlw	4
  7392  0D78  2D87               	goto	L16
  7393  0D79                     l899:	
  7394                           ;ir.c: 36: break;
  7395                           
  7396  0D79                     l6428:	
  7397                           
  7398                           ;ir.c: 38: case 0x1D:
  7399                           ;ir.c: 39: case 0x1E:
  7400                           ;ir.c: 40: case 0x1F:
  7401                           ;ir.c: 41: idx = keynum - 0x1C + 1;
  7402  0D79  084F               	movf	IR_GetIndex@keynum,w
  7403  0D7A  3EE5               	addlw	229
  7404  0D7B  2D87               	goto	L16
  7405  0D7C                     l903:	
  7406                           ;ir.c: 42: break;
  7407                           
  7408  0D7C                     l6430:	
  7409                           
  7410                           ;ir.c: 44: case 0x15:
  7411                           ;ir.c: 45: case 0x16:
  7412                           ;ir.c: 46: case 0x17:
  7413                           ;ir.c: 47: idx = keynum - 0x14 + 5;
  7414  0D7C  084F               	movf	IR_GetIndex@keynum,w
  7415  0D7D  3EF1               	addlw	241
  7416  0D7E  2D87               	goto	L16
  7417  0D7F                     l907:	
  7418                           ;ir.c: 48: break;
  7419                           
  7420  0D7F                     l6432:	
  7421                           
  7422                           ;ir.c: 50: case 0x0D:
  7423                           ;ir.c: 51: case 0x0E:
  7424                           ;ir.c: 52: case 0x0F:
  7425                           ;ir.c: 53: idx = keynum - 0x0C;
  7426  0D7F  084F               	movf	IR_GetIndex@keynum,w
  7427  0D80  3EF4               	addlw	244
  7428  0D81  2D87               	goto	L16
  7429  0D82                     l911:	
  7430                           ;ir.c: 54: break;
  7431                           
  7432  0D82                     l6434:	
  7433                           
  7434                           ;ir.c: 56: case 0x09:
  7435                           ;ir.c: 57: case 0x0A:
  7436                           ;ir.c: 58: case 0x0B:
  7437                           ;ir.c: 59: idx = keynum - 0x08 + 4;
  7438  0D82  084F               	movf	IR_GetIndex@keynum,w
  7439  0D83  3EFC               	addlw	252
  7440  0D84  2D87               	goto	L16
  7441  0D85                     l6436:	
  7442                           ;ir.c: 60: break;
  7443                           
  7444                           
  7445                           ;ir.c: 62: case 0x05:
  7446                           ;ir.c: 63: idx = keynum - 0x04 + 8;
  7447  0D85  084F               	movf	IR_GetIndex@keynum,w
  7448  0D86  3E04               	addlw	4
  7449  0D87                     L16:	
  7450  0D87  00CE               	movwf	IR_GetIndex@idx
  7451                           
  7452                           ;ir.c: 64: break;
  7453  0D88  2DEB               	goto	l6442
  7454  0D89                     l6440:	
  7455  0D89  084F               	movf	IR_GetIndex@keynum,w
  7456                           
  7457                           ; Switch size 1, requested type "space"
  7458                           ; Number of cases is 32, Range of values is 4 to 89
  7459                           ; switch strategies available:
  7460                           ; Name         Instructions Cycles
  7461                           ; simple_byte           97    49 (average)
  7462                           ; direct_byte          181     9 (fixed)
  7463                           ; jumptable            263     9 (fixed)
  7464                           ;	Chosen strategy is simple_byte
  7465  0D8A  3A04               	xorlw	4	; case 4
  7466  0D8B  1903               	skipnz
  7467  0D8C  2D85               	goto	l6436
  7468  0D8D  3A01               	xorlw	1	; case 5
  7469  0D8E  1903               	skipnz
  7470  0D8F  2D85               	goto	l6436
  7471  0D90  3A0D               	xorlw	13	; case 8
  7472  0D91  1903               	skipnz
  7473  0D92  2D82               	goto	l911
  7474  0D93  3A01               	xorlw	1	; case 9
  7475  0D94  1903               	skipnz
  7476  0D95  2D82               	goto	l6434
  7477  0D96  3A03               	xorlw	3	; case 10
  7478  0D97  1903               	skipnz
  7479  0D98  2D82               	goto	l6434
  7480  0D99  3A01               	xorlw	1	; case 11
  7481  0D9A  1903               	skipnz
  7482  0D9B  2D82               	goto	l6434
  7483  0D9C  3A07               	xorlw	7	; case 12
  7484  0D9D  1903               	skipnz
  7485  0D9E  2D7F               	goto	l907
  7486  0D9F  3A01               	xorlw	1	; case 13
  7487  0DA0  1903               	skipnz
  7488  0DA1  2D7F               	goto	l6432
  7489  0DA2  3A03               	xorlw	3	; case 14
  7490  0DA3  1903               	skipnz
  7491  0DA4  2D7F               	goto	l6432
  7492  0DA5  3A01               	xorlw	1	; case 15
  7493  0DA6  1903               	skipnz
  7494  0DA7  2D7F               	goto	l6432
  7495  0DA8  3A1B               	xorlw	27	; case 20
  7496  0DA9  1903               	skipnz
  7497  0DAA  2D7C               	goto	l903
  7498  0DAB  3A01               	xorlw	1	; case 21
  7499  0DAC  1903               	skipnz
  7500  0DAD  2D7C               	goto	l6430
  7501  0DAE  3A03               	xorlw	3	; case 22
  7502  0DAF  1903               	skipnz
  7503  0DB0  2D7C               	goto	l6430
  7504  0DB1  3A01               	xorlw	1	; case 23
  7505  0DB2  1903               	skipnz
  7506  0DB3  2D7C               	goto	l6430
  7507  0DB4  3A0B               	xorlw	11	; case 28
  7508  0DB5  1903               	skipnz
  7509  0DB6  2D79               	goto	l899
  7510  0DB7  3A01               	xorlw	1	; case 29
  7511  0DB8  1903               	skipnz
  7512  0DB9  2D79               	goto	l6428
  7513  0DBA  3A03               	xorlw	3	; case 30
  7514  0DBB  1903               	skipnz
  7515  0DBC  2D79               	goto	l6428
  7516  0DBD  3A01               	xorlw	1	; case 31
  7517  0DBE  1903               	skipnz
  7518  0DBF  2D79               	goto	l6428
  7519  0DC0  3A5F               	xorlw	95	; case 64
  7520  0DC1  1903               	skipnz
  7521  0DC2  2D77               	goto	l6426
  7522  0DC3  3A01               	xorlw	1	; case 65
  7523  0DC4  1903               	skipnz
  7524  0DC5  2D77               	goto	l6426
  7525  0DC6  3A05               	xorlw	5	; case 68
  7526  0DC7  1903               	skipnz
  7527  0DC8  2D75               	goto	l6424
  7528  0DC9  3A01               	xorlw	1	; case 69
  7529  0DCA  1903               	skipnz
  7530  0DCB  2D73               	goto	l6422
  7531  0DCC  3A0D               	xorlw	13	; case 72
  7532  0DCD  1903               	skipnz
  7533  0DCE  2D75               	goto	l6424
  7534  0DCF  3A01               	xorlw	1	; case 73
  7535  0DD0  1903               	skipnz
  7536  0DD1  2D73               	goto	l6422
  7537  0DD2  3A05               	xorlw	5	; case 76
  7538  0DD3  1903               	skipnz
  7539  0DD4  2D75               	goto	l6424
  7540  0DD5  3A01               	xorlw	1	; case 77
  7541  0DD6  1903               	skipnz
  7542  0DD7  2D73               	goto	l6422
  7543  0DD8  3A1D               	xorlw	29	; case 80
  7544  0DD9  1903               	skipnz
  7545  0DDA  2D6E               	goto	l6420
  7546  0DDB  3A01               	xorlw	1	; case 81
  7547  0DDC  1903               	skipnz
  7548  0DDD  2D70               	goto	l888
  7549  0DDE  3A05               	xorlw	5	; case 84
  7550  0DDF  1903               	skipnz
  7551  0DE0  2D6E               	goto	l6420
  7552  0DE1  3A01               	xorlw	1	; case 85
  7553  0DE2  1903               	skipnz
  7554  0DE3  2D70               	goto	l888
  7555  0DE4  3A0D               	xorlw	13	; case 88
  7556  0DE5  1903               	skipnz
  7557  0DE6  2D6E               	goto	l6420
  7558  0DE7  3A01               	xorlw	1	; case 89
  7559  0DE8  1903               	skipnz
  7560  0DE9  2D70               	goto	l888
  7561  0DEA  2DEB               	goto	l6442
  7562  0DEB                     l6442:	
  7563                           
  7564                           ;ir.c: 68: return idx;
  7565  0DEB  084E               	movf	IR_GetIndex@idx,w
  7566  0DEC  0008               	return
  7567  0DED                     __end_of_IR_GetIndex:	
  7568  0DED                     __ptext47:	
  7569 ;; *************** function _IR_ExitSet *****************
  7570 ;; Defined at:
  7571 ;;		line 434 in file "user/src/ir.c"
  7572 ;; Parameters:    Size  Location     Type
  7573 ;;		None
  7574 ;; Auto vars:     Size  Location     Type
  7575 ;;		None
  7576 ;; Return value:  Size  Location     Type
  7577 ;;                  1    wreg      void 
  7578 ;; Registers used:
  7579 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7580 ;; Tracked objects:
  7581 ;;		On entry : 14/8
  7582 ;;		On exit  : 1F/0
  7583 ;;		Unchanged: 0/0
  7584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;Total ram usage:        0 bytes
  7590 ;; Hardware stack levels used:    1
  7591 ;; Hardware stack levels required when called:   10
  7592 ;; This function calls:
  7593 ;;		_Led_Initialize
  7594 ;;		_Led_StartNotice
  7595 ;; This function is called by:
  7596 ;;		_IR_KeyAction
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           
  7601                           ;psect for function _IR_ExitSet
  7602  0DED                     _IR_ExitSet:	
  7603                           
  7604                           ;ir.c: 435: ir_state.mSet = 0;
  7605                           
  7606                           ;incstack = 0
  7607                           ; Regs used in _IR_ExitSet: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7608  0DED  301F               	movlw	-225
  7609  0DEE  0020               	movlb	0	; select bank0
  7610  0DEF  05B6               	andwf	_ir_state,f	;volatile
  7611                           
  7612                           ;ir.c: 436: ir_state.tmIdx = 0;
  7613  0DF0  01B7               	clrf	_ir_state+1	;volatile
  7614                           
  7615                           ;ir.c: 437: ir_state.mSetDelay = 0;
  7616  0DF1  01BC               	clrf	_ir_state+6	;volatile
  7617                           
  7618                           ;ir.c: 438: Led_StartNotice(1);
  7619  0DF2  3001               	movlw	1
  7620  0DF3  2557  3188         	fcall	_Led_StartNotice
  7621                           
  7622                           ;ir.c: 439: Led_Initialize();
  7623  0DF5  28FE               	ljmp	l5928
  7624  0DF6                     __end_of_IR_ExitSet:	
  7625  0DF6                     __ptext44:	
  7626 ;; *************** function _IR_IsValidTime *****************
  7627 ;; Defined at:
  7628 ;;		line 71 in file "user/src/ir.c"
  7629 ;; Parameters:    Size  Location     Type
  7630 ;;  tm              1    wreg     PTR unsigned char 
  7631 ;;		 -> ir_state.time(4), ir_state(7), 
  7632 ;;  len             1   17[BANK0 ] unsigned char 
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;  tm              1   21[BANK0 ] PTR unsigned char 
  7635 ;;		 -> ir_state.time(4), ir_state(7), 
  7636 ;;  hour            1   20[BANK0 ] unsigned char 
  7637 ;;  result          1   19[BANK0 ] unsigned char 
  7638 ;;  min             1   18[BANK0 ] unsigned char 
  7639 ;; Return value:  Size  Location     Type
  7640 ;;                  1    wreg      unsigned char 
  7641 ;; Registers used:
  7642 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7643 ;; Tracked objects:
  7644 ;;		On entry : 1F/0
  7645 ;;		On exit  : 1F/0
  7646 ;;		Unchanged: 0/0
  7647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7648 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7649 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7651 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7652 ;;Total ram usage:        5 bytes
  7653 ;; Hardware stack levels used:    1
  7654 ;; Hardware stack levels required when called:    8
  7655 ;; This function calls:
  7656 ;;		___bmul
  7657 ;; This function is called by:
  7658 ;;		_IR_KeyAction
  7659 ;; This function uses a non-reentrant model
  7660 ;;
  7661                           
  7662                           
  7663                           ;psect for function _IR_IsValidTime
  7664  0DF6                     _IR_IsValidTime:	
  7665                           
  7666                           ;incstack = 0
  7667                           ; Regs used in _IR_IsValidTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7668                           ;IR_IsValidTime@tm stored from wreg
  7669  0DF6  00D5               	movwf	IR_IsValidTime@tm
  7670                           
  7671                           ;ir.c: 72: bool result = 0;
  7672  0DF7  01D3               	clrf	IR_IsValidTime@result
  7673                           
  7674                           ;ir.c: 74: uint8_t min = 0;
  7675  0DF8  01D2               	clrf	IR_IsValidTime@min
  7676                           
  7677                           ;ir.c: 76: switch (len) {
  7678  0DF9  2E34               	goto	l6476
  7679  0DFA                     l6448:	
  7680                           
  7681                           ;ir.c: 78: if ((*tm) < 3) {
  7682  0DFA  0855               	movf	IR_IsValidTime@tm,w
  7683  0DFB  0086               	movwf	6
  7684  0DFC  3003               	movlw	3
  7685  0DFD                     L9:	
  7686  0DFD  0187               	clrf	7
  7687  0DFE  0201               	subwf	1,w
  7688  0DFF                     L8:	
  7689  0DFF  1803               	skipnc
  7690  0E00  2E42               	goto	l6478
  7691                           
  7692                           ;ir.c: 79: result = 1;
  7693  0E01  01D3               	clrf	IR_IsValidTime@result
  7694  0E02  0AD3               	incf	IR_IsValidTime@result,f
  7695  0E03  2E42               	goto	l6478
  7696  0E04                     l6452:	
  7697                           
  7698                           ;ir.c: 83: hour = (*tm)*10 + (*(tm + 1));
  7699  0E04  26EF  3188         	fcall	PL26	;call to abstracted procedure
  7700  0E06  24FD  3188         	fcall	___bmul
  7701                           
  7702                           ;ir.c: 84: if (hour < 24) {
  7703  0E08  277D  3188         	fcall	PL110	;call to abstracted procedure
  7704  0E0A  2DFF               	goto	L8
  7705  0E0B                     l6458:	
  7706                           
  7707                           ;ir.c: 89: hour = (*tm)*10 + (*(tm + 1));
  7708  0E0B  26EF  3188         	fcall	PL26	;call to abstracted procedure
  7709  0E0D  24FD  3188         	fcall	___bmul
  7710                           
  7711                           ;ir.c: 90: if (hour < 24 && (*(tm + 2)) < 6) {
  7712  0E0F  277D  3188         	fcall	PL110	;call to abstracted procedure
  7713  0E11  1803               	skipnc
  7714  0E12  2E42               	goto	l6478
  7715  0E13  0855               	movf	IR_IsValidTime@tm,w
  7716  0E14  3E02               	addlw	2
  7717  0E15  0086               	movwf	6
  7718  0E16  3006               	movlw	6
  7719  0E17  2DFD               	goto	L9
  7720  0E18                     l6466:	
  7721                           
  7722                           ;ir.c: 95: hour = (*tm)*10 + (*(tm + 1));
  7723  0E18  26EF  3188         	fcall	PL26	;call to abstracted procedure
  7724  0E1A  24FD  3188         	fcall	___bmul
  7725  0E1C  0701               	addwf	1,w
  7726  0E1D  00D4               	movwf	IR_IsValidTime@hour
  7727                           
  7728                           ;ir.c: 96: min = (*(tm + 2))*10 + (*(tm + 3));
  7729  0E1E  0855               	movf	IR_IsValidTime@tm,w
  7730  0E1F  3E03               	addlw	3
  7731  0E20  0086               	movwf	6
  7732  0E21  300A               	movlw	10
  7733  0E22  0187               	clrf	7
  7734  0E23  00CE               	movwf	___bmul@multiplicand
  7735  0E24  0855               	movf	IR_IsValidTime@tm,w
  7736  0E25  3E02               	addlw	2
  7737  0E26  0084               	movwf	4
  7738  0E27  0185               	clrf	5
  7739  0E28  0800               	movf	0,w
  7740  0E29  24FD  3188         	fcall	___bmul
  7741  0E2B  0701               	addwf	1,w
  7742  0E2C  00D2               	movwf	IR_IsValidTime@min
  7743                           
  7744                           ;ir.c: 97: if (hour < 24 && min < 60) {
  7745  0E2D  3018               	movlw	24
  7746  0E2E  0254               	subwf	IR_IsValidTime@hour,w
  7747  0E2F  1803               	skipnc
  7748  0E30  2E42               	goto	l6478
  7749  0E31  303C               	movlw	60
  7750  0E32  0252               	subwf	IR_IsValidTime@min,w
  7751  0E33  2DFF               	goto	L8
  7752  0E34                     l6476:	
  7753  0E34  0851               	movf	IR_IsValidTime@len,w
  7754                           
  7755                           ; Switch size 1, requested type "space"
  7756                           ; Number of cases is 4, Range of values is 1 to 4
  7757                           ; switch strategies available:
  7758                           ; Name         Instructions Cycles
  7759                           ; simple_byte           13     7 (average)
  7760                           ; direct_byte           17     9 (fixed)
  7761                           ; jumptable            263     9 (fixed)
  7762                           ;	Chosen strategy is simple_byte
  7763  0E35  3A01               	xorlw	1	; case 1
  7764  0E36  1903               	skipnz
  7765  0E37  2DFA               	goto	l6448
  7766  0E38  3A03               	xorlw	3	; case 2
  7767  0E39  1903               	skipnz
  7768  0E3A  2E04               	goto	l6452
  7769  0E3B  3A01               	xorlw	1	; case 3
  7770  0E3C  1903               	skipnz
  7771  0E3D  2E0B               	goto	l6458
  7772  0E3E  3A07               	xorlw	7	; case 4
  7773  0E3F  1903               	skipnz
  7774  0E40  2E18               	goto	l6466
  7775  0E41  2E42               	goto	l6478
  7776  0E42                     l6478:	
  7777                           
  7778                           ;ir.c: 104: return result;
  7779  0E42  0853               	movf	IR_IsValidTime@result,w
  7780  0E43  0008               	return
  7781  0E44                     __end_of_IR_IsValidTime:	
  7782  0E44                     __ptext38:	
  7783 ;; *************** function _IR_KeyAtionIfPressed *****************
  7784 ;; Defined at:
  7785 ;;		line 679 in file "user/src/ir.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;		None
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;		None
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      void 
  7792 ;; Registers used:
  7793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 1D/2
  7796 ;;		On exit  : 1F/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;Total ram usage:        0 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:   12
  7806 ;; This function calls:
  7807 ;;		_IR_KeyAction
  7808 ;; This function is called by:
  7809 ;;		_main
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           
  7814                           ;psect for function _IR_KeyAtionIfPressed
  7815  0E44                     _IR_KeyAtionIfPressed:	
  7816                           
  7817                           ;ir.c: 680: if (ir_state.mKeyRcv) {
  7818                           
  7819                           ;incstack = 0
  7820                           ; Regs used in _IR_KeyAtionIfPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7821  0E44  0020               	movlb	0	; select bank0
  7822  0E45  1C36               	btfss	_ir_state,0	;volatile
  7823  0E46  0008               	return
  7824                           
  7825                           ;ir.c: 681: IR_KeyAction();
  7826  0E47  2A5F               	ljmp	l6528
  7827  0E48                     __end_of_IR_KeyAtionIfPressed:	
  7828  0E48                     __ptext37:	
  7829 ;; *************** function _TMR1_StartTimer *****************
  7830 ;; Defined at:
  7831 ;;		line 21 in file "driver/src/tmr1.c"
  7832 ;; Parameters:    Size  Location     Type
  7833 ;;		None
  7834 ;; Auto vars:     Size  Location     Type
  7835 ;;		None
  7836 ;; Return value:  Size  Location     Type
  7837 ;;                  1    wreg      void 
  7838 ;; Registers used:
  7839 ;;		None
  7840 ;; Tracked objects:
  7841 ;;		On entry : 1E/0
  7842 ;;		On exit  : 1F/0
  7843 ;;		Unchanged: 0/0
  7844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7849 ;;Total ram usage:        0 bytes
  7850 ;; Hardware stack levels used:    1
  7851 ;; Hardware stack levels required when called:    7
  7852 ;; This function calls:
  7853 ;;		Nothing
  7854 ;; This function is called by:
  7855 ;;		_main
  7856 ;;		_IR_ResetIfTMR1Overflow
  7857 ;; This function uses a non-reentrant model
  7858 ;;
  7859                           
  7860                           
  7861                           ;psect for function _TMR1_StartTimer
  7862  0E48                     _TMR1_StartTimer:	
  7863  0E48                     l4822:	
  7864                           ;incstack = 0
  7865                           ; Regs used in _TMR1_StartTimer: []
  7866                           
  7867                           
  7868                           ;tmr1.c: 23: T1CONbits.TMR1ON = 1;
  7869  0E48  0020               	movlb	0	; select bank0
  7870  0E49  141B               	bsf	27,0	;volatile
  7871  0E4A  0008               	return
  7872  0E4B                     __end_of_TMR1_StartTimer:	
  7873  0E4B                     __ptext35:	
  7874 ;; *************** function _IR_ResetIfTMR1Overflow *****************
  7875 ;; Defined at:
  7876 ;;		line 215 in file "user/src/ir.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;		None
  7879 ;; Auto vars:     Size  Location     Type
  7880 ;;		None
  7881 ;; Return value:  Size  Location     Type
  7882 ;;                  1    wreg      void 
  7883 ;; Registers used:
  7884 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7885 ;; Tracked objects:
  7886 ;;		On entry : 1F/0
  7887 ;;		On exit  : 1F/0
  7888 ;;		Unchanged: 0/0
  7889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;Total ram usage:        0 bytes
  7895 ;; Hardware stack levels used:    1
  7896 ;; Hardware stack levels required when called:    8
  7897 ;; This function calls:
  7898 ;;		_TMR1_StartTimer
  7899 ;;		_TMR1_StopTimer
  7900 ;;		_TMR2_EnableInterrupt
  7901 ;; This function is called by:
  7902 ;;		_main
  7903 ;; This function uses a non-reentrant model
  7904 ;;
  7905                           
  7906                           
  7907                           ;psect for function _IR_ResetIfTMR1Overflow
  7908  0E4B                     _IR_ResetIfTMR1Overflow:	
  7909                           
  7910                           ;ir.c: 216: if (PIR1bits.TMR1IF) {
  7911                           
  7912                           ;incstack = 0
  7913                           ; Regs used in _IR_ResetIfTMR1Overflow: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7914  0E4B  1C11               	btfss	17,0	;volatile
  7915  0E4C  0008               	return
  7916                           
  7917                           ;ir.c: 217: PIR1bits.TMR1IF = 0;
  7918  0E4D  1011               	bcf	17,0	;volatile
  7919                           
  7920                           ;ir.c: 218: TMR1_StopTimer();
  7921  0E4E  268C  3188         	fcall	_TMR1_StopTimer
  7922                           
  7923                           ;ir.c: 219: TMR1 = 0;
  7924  0E50  0199               	clrf	25	;volatile
  7925  0E51  019A               	clrf	26	;volatile
  7926                           
  7927                           ;ir.c: 220: ir_state.mState = 0;
  7928  0E52  30E3               	movlw	-29
  7929  0E53  05B6               	andwf	_ir_state,f	;volatile
  7930                           
  7931                           ;ir.c: 221: if (!ir_state.mKeyRpt) {
  7932  0E54  1CB6               	btfss	_ir_state,1	;volatile
  7933  0E55  2E59               	goto	l6964
  7934  0E56  2E85               	goto	l1026
  7935  0E57                     l1031:	
  7936  0E57                     l1041:	
  7937                           
  7938                           ;ir.c: 224: case 0x59:
  7939                           ;ir.c: 225: case 0x45:
  7940                           ;ir.c: 226: case 0x44:
  7941                           ;ir.c: 227: case 0x41:
  7942                           ;ir.c: 228: case 0x54:
  7943                           ;ir.c: 229: case 0x55:
  7944                           ;ir.c: 230: case 0x49:
  7945                           ;ir.c: 231: case 0x48:
  7946                           ;ir.c: 232: case 0x40:
  7947                           ;ir.c: 233: case 0x50:
  7948                           ;ir.c: 234: case 0x51:
  7949                           ;ir.c: 235: case 0x4D:
  7950                           ;ir.c: 236: case 0x4C:
  7951                           ;ir.c: 237: ir_state.mKeyRcv = 1;
  7952  0E57  1436               	bsf	_ir_state,0	;volatile
  7953                           
  7954                           ;ir.c: 238: break;
  7955  0E58  2E86               	goto	l6966
  7956  0E59                     l6964:	
  7957  0E59  0832               	movf	_keyValue,w	;volatile
  7958                           
  7959                           ; Switch size 1, requested type "space"
  7960                           ; Number of cases is 14, Range of values is 64 to 89
  7961                           ; switch strategies available:
  7962                           ; Name         Instructions Cycles
  7963                           ; simple_byte           43    22 (average)
  7964                           ; direct_byte           61     9 (fixed)
  7965                           ; jumptable            263     9 (fixed)
  7966                           ;	Chosen strategy is simple_byte
  7967  0E5A  3A40               	xorlw	64	; case 64
  7968  0E5B  1903               	skipnz
  7969  0E5C  2E57               	goto	l1041
  7970  0E5D  3A01               	xorlw	1	; case 65
  7971  0E5E  1903               	skipnz
  7972  0E5F  2E57               	goto	l1041
  7973  0E60  3A05               	xorlw	5	; case 68
  7974  0E61  1903               	skipnz
  7975  0E62  2E57               	goto	l1041
  7976  0E63  3A01               	xorlw	1	; case 69
  7977  0E64  1903               	skipnz
  7978  0E65  2E57               	goto	l1031
  7979  0E66  3A0D               	xorlw	13	; case 72
  7980  0E67  1903               	skipnz
  7981  0E68  2E57               	goto	l1041
  7982  0E69  3A01               	xorlw	1	; case 73
  7983  0E6A  1903               	skipnz
  7984  0E6B  2E57               	goto	l1041
  7985  0E6C  3A05               	xorlw	5	; case 76
  7986  0E6D  1903               	skipnz
  7987  0E6E  2E57               	goto	l1041
  7988  0E6F  3A01               	xorlw	1	; case 77
  7989  0E70  1903               	skipnz
  7990  0E71  2E57               	goto	l1041
  7991  0E72  3A1D               	xorlw	29	; case 80
  7992  0E73  1903               	skipnz
  7993  0E74  2E57               	goto	l1041
  7994  0E75  3A01               	xorlw	1	; case 81
  7995  0E76  1903               	skipnz
  7996  0E77  2E57               	goto	l1041
  7997  0E78  3A05               	xorlw	5	; case 84
  7998  0E79  1903               	skipnz
  7999  0E7A  2E57               	goto	l1041
  8000  0E7B  3A01               	xorlw	1	; case 85
  8001  0E7C  1903               	skipnz
  8002  0E7D  2E57               	goto	l1041
  8003  0E7E  3A0D               	xorlw	13	; case 88
  8004  0E7F  1903               	skipnz
  8005  0E80  2E57               	goto	l1031
  8006  0E81  3A01               	xorlw	1	; case 89
  8007  0E82  1903               	skipnz
  8008  0E83  2E57               	goto	l1031
  8009  0E84  2E86               	goto	l6966
  8010  0E85                     l1026:	
  8011                           
  8012                           ;ir.c: 243: ir_state.mKeyRpt = 0;
  8013  0E85  10B6               	bcf	_ir_state,1	;volatile
  8014  0E86                     l6966:	
  8015                           
  8016                           ;ir.c: 244: }
  8017                           ;ir.c: 245: TMR2_EnableInterrupt();
  8018  0E86  2689  3188         	fcall	_TMR2_EnableInterrupt
  8019                           
  8020                           ;ir.c: 246: TMR1_StartTimer();
  8021  0E88  2E48               	ljmp	l4822
  8022  0E89                     __end_of_IR_ResetIfTMR1Overflow:	
  8023  0E89                     __ptext42:	
  8024 ;; *************** function _TMR2_EnableInterrupt *****************
  8025 ;; Defined at:
  8026 ;;		line 45 in file "driver/src/tmr2.c"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;		None
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;		None
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      void 
  8033 ;; Registers used:
  8034 ;;		None
  8035 ;; Tracked objects:
  8036 ;;		On entry : 14/0
  8037 ;;		On exit  : 1F/1
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;Total ram usage:        0 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    7
  8047 ;; This function calls:
  8048 ;;		Nothing
  8049 ;; This function is called by:
  8050 ;;		_IR_ResetIfTMR1Overflow
  8051 ;;		_IR_KeyAction
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           
  8056                           ;psect for function _TMR2_EnableInterrupt
  8057  0E89                     _TMR2_EnableInterrupt:	
  8058                           
  8059                           ;tmr2.c: 47: PIE1bits.TMR2IE = 1;
  8060                           
  8061                           ;incstack = 0
  8062                           ; Regs used in _TMR2_EnableInterrupt: []
  8063  0E89  0021               	movlb	1	; select bank1
  8064  0E8A  1491               	bsf	17,1	;volatile
  8065  0E8B  0008               	return
  8066  0E8C                     __end_of_TMR2_EnableInterrupt:	
  8067  0E8C                     __ptext36:	
  8068 ;; *************** function _TMR1_StopTimer *****************
  8069 ;; Defined at:
  8070 ;;		line 26 in file "driver/src/tmr1.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;		None
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;		None
  8075 ;; Return value:  Size  Location     Type
  8076 ;;                  1    wreg      void 
  8077 ;; Registers used:
  8078 ;;		None
  8079 ;; Tracked objects:
  8080 ;;		On entry : 1F/0
  8081 ;;		On exit  : 1F/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8088 ;;Total ram usage:        0 bytes
  8089 ;; Hardware stack levels used:    1
  8090 ;; Hardware stack levels required when called:    7
  8091 ;; This function calls:
  8092 ;;		Nothing
  8093 ;; This function is called by:
  8094 ;;		_IR_ResetIfTMR1Overflow
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           
  8099                           ;psect for function _TMR1_StopTimer
  8100  0E8C                     _TMR1_StopTimer:	
  8101                           
  8102                           ;tmr1.c: 28: T1CONbits.TMR1ON = 0;
  8103                           
  8104                           ;incstack = 0
  8105                           ; Regs used in _TMR1_StopTimer: []
  8106  0E8C  101B               	bcf	27,0	;volatile
  8107  0E8D  0008               	return
  8108  0E8E                     __end_of_TMR1_StopTimer:	
  8109  0E8E                     __ptext33:	
  8110 ;; *************** function _IR_UpdateSetStatus *****************
  8111 ;; Defined at:
  8112 ;;		line 688 in file "user/src/ir.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;		None
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;		None
  8117 ;; Return value:  Size  Location     Type
  8118 ;;                  1    wreg      void 
  8119 ;; Registers used:
  8120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8121 ;; Tracked objects:
  8122 ;;		On entry : 1D/2
  8123 ;;		On exit  : 1F/0
  8124 ;;		Unchanged: 0/0
  8125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;Total ram usage:        0 bytes
  8131 ;; Hardware stack levels used:    1
  8132 ;; Hardware stack levels required when called:   11
  8133 ;; This function calls:
  8134 ;;		_IR_ExitTimeout
  8135 ;; This function is called by:
  8136 ;;		_main
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           
  8141                           ;psect for function _IR_UpdateSetStatus
  8142  0E8E                     _IR_UpdateSetStatus:	
  8143                           
  8144                           ;ir.c: 689: if (ir_state.mSet) {
  8145                           
  8146                           ;incstack = 0
  8147                           ; Regs used in _IR_UpdateSetStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8148  0E8E  0020               	movlb	0	; select bank0
  8149  0E8F  0E36               	swapf	_ir_state,w	;volatile
  8150  0E90  0C89               	rrf	9,f
  8151  0E91  3907               	andlw	7
  8152  0E92  1903               	skipnz
  8153  0E93  0008               	return
  8154                           
  8155                           ;ir.c: 690: ir_state.mSetDelay++;
  8156  0E94  0ABC               	incf	_ir_state+6,f	;volatile
  8157                           
  8158                           ;ir.c: 691: if (ir_state.mSetDelay > 10) {
  8159  0E95  300B               	movlw	11
  8160  0E96  023C               	subwf	_ir_state+6,w	;volatile
  8161  0E97  1C03               	skipc
  8162  0E98  0008               	return
  8163                           
  8164                           ;ir.c: 692: IR_ExitTimeout();
  8165  0E99  2FE8               	ljmp	l6518
  8166  0E9A                     __end_of_IR_UpdateSetStatus:	
  8167  0E9A                     __ptext28:	
  8168 ;; *************** function _Interrupt_Initialize *****************
  8169 ;; Defined at:
  8170 ;;		line 159 in file "user/src/main.c"
  8171 ;; Parameters:    Size  Location     Type
  8172 ;;		None
  8173 ;; Auto vars:     Size  Location     Type
  8174 ;;		None
  8175 ;; Return value:  Size  Location     Type
  8176 ;;                  1    wreg      void 
  8177 ;; Registers used:
  8178 ;;		wreg, status,2, status,0, pclath, cstack
  8179 ;; Tracked objects:
  8180 ;;		On entry : 1F/1
  8181 ;;		On exit  : 1F/1
  8182 ;;		Unchanged: 0/0
  8183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8188 ;;Total ram usage:        0 bytes
  8189 ;; Hardware stack levels used:    1
  8190 ;; Hardware stack levels required when called:    8
  8191 ;; This function calls:
  8192 ;;		_TMR0_SetInterruptHandler
  8193 ;;		_TMR1_Gate_SetInterruptHandler
  8194 ;;		_TMR2_SetInterruptHandler
  8195 ;;		_TMR4_SetInterruptHandler
  8196 ;; This function is called by:
  8197 ;;		_main
  8198 ;; This function uses a non-reentrant model
  8199 ;;
  8200                           
  8201                           
  8202                           ;psect for function _Interrupt_Initialize
  8203  0E9A                     _Interrupt_Initialize:	
  8204                           
  8205                           ;main.c: 160: TMR1_Gate_SetInterruptHandler(IR_Decode);
  8206                           
  8207                           ;incstack = 0
  8208                           ; Regs used in _Interrupt_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8209  0E9A  30EA               	movlw	low _IR_Decode
  8210  0E9B  0020               	movlb	0	; select bank0
  8211  0E9C  00CE               	movwf	TMR1_Gate_SetInterruptHandler@handler
  8212  0E9D  3005               	movlw	high _IR_Decode
  8213  0E9E  00CF               	movwf	TMR1_Gate_SetInterruptHandler@handler+1
  8214  0E9F  278A  3188         	fcall	_TMR1_Gate_SetInterruptHandler
  8215                           
  8216                           ;main.c: 161: TMR0_SetInterruptHandler(RTC_OnSecond);
  8217  0EA1  3023               	movlw	low _RTC_OnSecond
  8218  0EA2  0020               	movlb	0	; select bank0
  8219  0EA3  00CE               	movwf	TMR0_SetInterruptHandler@handler
  8220  0EA4  3015               	movlw	high _RTC_OnSecond
  8221  0EA5  00CF               	movwf	TMR0_SetInterruptHandler@handler+1
  8222  0EA6  2782  3188         	fcall	_TMR0_SetInterruptHandler
  8223                           
  8224                           ;main.c: 162: TMR2_SetInterruptHandler(Led_Run);
  8225  0EA8  305E               	movlw	low _Led_Run
  8226  0EA9  0020               	movlb	0	; select bank0
  8227  0EAA  00CE               	movwf	TMR2_SetInterruptHandler@handler
  8228  0EAB  3003               	movlw	high _Led_Run
  8229  0EAC  00CF               	movwf	TMR2_SetInterruptHandler@handler+1
  8230  0EAD  27F0  3188         	fcall	_TMR2_SetInterruptHandler
  8231                           
  8232                           ;main.c: 163: TMR4_SetInterruptHandler(Led_Notice);
  8233  0EAF  3078               	movlw	low _Led_Notice
  8234  0EB0  0020               	movlb	0	; select bank0
  8235  0EB1  00CE               	movwf	TMR4_SetInterruptHandler@handler
  8236  0EB2  3015               	movlw	high _Led_Notice
  8237  0EB3  00CF               	movwf	TMR4_SetInterruptHandler@handler+1
  8238  0EB4  2FF8               	ljmp	l4846
  8239  0EB5                     __end_of_Interrupt_Initialize:	
  8240  0EB5                     __ptext2:	
  8241 ;; *************** function _TMR0_StartTimer *****************
  8242 ;; Defined at:
  8243 ;;		line 17 in file "driver/src/tmr0.c"
  8244 ;; Parameters:    Size  Location     Type
  8245 ;;		None
  8246 ;; Auto vars:     Size  Location     Type
  8247 ;;		None
  8248 ;; Return value:  Size  Location     Type
  8249 ;;                  1    wreg      void 
  8250 ;; Registers used:
  8251 ;;		None
  8252 ;; Tracked objects:
  8253 ;;		On entry : 1F/0
  8254 ;;		On exit  : 1F/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;Total ram usage:        0 bytes
  8262 ;; Hardware stack levels used:    1
  8263 ;; Hardware stack levels required when called:    7
  8264 ;; This function calls:
  8265 ;;		Nothing
  8266 ;; This function is called by:
  8267 ;;		_main
  8268 ;; This function uses a non-reentrant model
  8269 ;;
  8270                           
  8271                           
  8272                           ;psect for function _TMR0_StartTimer
  8273  0EB5                     _TMR0_StartTimer:	
  8274                           
  8275                           ;tmr0.c: 19: T0CON0bits.T0EN = 1;
  8276                           
  8277                           ;incstack = 0
  8278                           ; Regs used in _TMR0_StartTimer: []
  8279  0EB5  1797               	bsf	23,7	;volatile
  8280  0EB6  0008               	return
  8281  0EB7                     __end_of_TMR0_StartTimer:	
  8282  0EB7                     PL2:	
  8283  0EB7  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  8284  0EB8  0084               	movwf	4
  8285  0EB9  0185               	clrf	5
  8286  0EBA  3F40               	moviw [0]fsr1
  8287  0EBB  3F80               	movwi [0]fsr0
  8288  0EBC  3F41               	moviw [1]fsr1
  8289  0EBD  3F81               	movwi [1]fsr0
  8290  0EBE  0008               	return
  8291  0EBF                     __end_ofPL2:	
  8292  0EBF                     PL8:	
  8293  0EBF  0084               	movwf	4
  8294  0EC0  3001               	movlw	1	; select bank2/3
  8295  0EC1  0085               	movwf	5
  8296  0EC2  3F40               	moviw [0]fsr1
  8297  0EC3  3F80               	movwi [0]fsr0
  8298  0EC4  3F41               	moviw [1]fsr1
  8299  0EC5  3F81               	movwi [1]fsr0
  8300  0EC6  0008               	return
  8301  0EC7                     __end_ofPL8:	
  8302  0EC7                     PL14:	
  8303  0EC7  084E               	movf	?___wmul,w
  8304  0EC8  0023               	movlb	3	; select bank3
  8305  0EC9  0744               	addwf	(??_IR_KeyAction+4)^(0+384),w
  8306  0ECA  00C6               	movwf	(??_IR_KeyAction+6)^(0+384)
  8307  0ECB  0020               	movlb	0	; select bank0
  8308  0ECC  084F               	movf	?___wmul+1,w
  8309  0ECD  0023               	movlb	3	; select bank3
  8310  0ECE  3D45               	addwfc	(??_IR_KeyAction+5)^(0+384),w
  8311  0ECF  00C7               	movwf	(??_IR_KeyAction+7)^(0+384)
  8312  0ED0  0840               	movf	??_IR_KeyAction^(0+384),w
  8313  0ED1  0746               	addwf	(??_IR_KeyAction+6)^(0+384),w
  8314  0ED2  00C8               	movwf	(??_IR_KeyAction+8)^(0+384)
  8315  0ED3  0841               	movf	(??_IR_KeyAction+1)^(0+384),w
  8316  0ED4  3D47               	addwfc	(??_IR_KeyAction+7)^(0+384),w
  8317  0ED5  00C9               	movwf	(??_IR_KeyAction+9)^(0+384)
  8318  0ED6  0848               	movf	(??_IR_KeyAction+8)^(0+384),w
  8319  0ED7  0022               	movlb	2	; select bank2
  8320  0ED8  0008               	return
  8321  0ED9                     __end_ofPL14:	
  8322  0ED9                     PL20:	
  8323  0ED9  084E               	movf	?___wmul,w
  8324  0EDA  0023               	movlb	3	; select bank3
  8325  0EDB  0742               	addwf	(??_IR_KeyAction+2)^(0+384),w
  8326  0EDC  00C4               	movwf	(??_IR_KeyAction+4)^(0+384)
  8327  0EDD  0020               	movlb	0	; select bank0
  8328  0EDE  084F               	movf	?___wmul+1,w
  8329  0EDF  0023               	movlb	3	; select bank3
  8330  0EE0  3D43               	addwfc	(??_IR_KeyAction+3)^(0+384),w
  8331  0EE1  00C5               	movwf	(??_IR_KeyAction+5)^(0+384)
  8332  0EE2  0020               	movlb	0	; select bank0
  8333  0EE3  083A               	movf	_ir_state+4,w	;volatile
  8334  0EE4  00CE               	movwf	___wmul@multiplier
  8335  0EE5  300A               	movlw	10
  8336  0EE6  01CF               	clrf	___wmul@multiplier+1
  8337  0EE7  00D0               	movwf	___wmul@multiplicand
  8338  0EE8  01D1               	clrf	___wmul@multiplicand+1
  8339  0EE9  0008               	return
  8340  0EEA                     __end_ofPL20:	
  8341  0EEA                     PL24:	
  8342  0EEA  3F40               	moviw [0]fsr1
  8343  0EEB  3F80               	movwi [0]fsr0
  8344  0EEC  3F41               	moviw [1]fsr1
  8345  0EED  3F81               	movwi [1]fsr0
  8346  0EEE  3405               	retlw	5
  8347  0EEF                     __end_ofPL24:	
  8348  0EEF                     PL26:	
  8349  0EEF  0A55               	incf	IR_IsValidTime@tm,w
  8350  0EF0  0086               	movwf	6
  8351  0EF1  300A               	movlw	10
  8352  0EF2  0187               	clrf	7
  8353  0EF3  00CE               	movwf	___bmul@multiplicand
  8354  0EF4  0855               	movf	IR_IsValidTime@tm,w
  8355  0EF5  0084               	movwf	4
  8356  0EF6  0185               	clrf	5
  8357  0EF7  0800               	movf	0,w
  8358  0EF8  0008               	return
  8359  0EF9                     __end_ofPL26:	
  8360  0EF9                     PL28:	
  8361  0EF9  084E               	movf	?___wmul,w
  8362  0EFA  0023               	movlb	3	; select bank3
  8363  0EFB  00C2               	movwf	(??_IR_KeyAction+2)^(0+384)
  8364  0EFC  0020               	movlb	0	; select bank0
  8365  0EFD  084F               	movf	?___wmul+1,w
  8366  0EFE  0023               	movlb	3	; select bank3
  8367  0EFF  00C3               	movwf	((??_IR_KeyAction+2)^(0+384)+1)
  8368  0F00  0020               	movlb	0	; select bank0
  8369  0F01  0839               	movf	_ir_state+3,w	;volatile
  8370  0F02  00CE               	movwf	___wmul@multiplier
  8371  0F03  303C               	movlw	60
  8372  0F04  01CF               	clrf	___wmul@multiplier+1
  8373  0F05  00D0               	movwf	___wmul@multiplicand
  8374  0F06  01D1               	clrf	___wmul@multiplicand+1
  8375  0F07  0008               	return
  8376  0F08                     __end_ofPL28:	
  8377  0F08                     PL30:	
  8378  0F08  0821               	movf	(_gLedPara^(0+256)+1),w	;volatile
  8379  0F09  3E05               	addlw	low (_VOLUME| (0+32768))
  8380  0F0A  0084               	movwf	4
  8381  0F0B  3098               	movlw	high (_VOLUME| (0+32768))
  8382  0F0C  1803               	skipnc
  8383  0F0D  3E01               	addlw	1
  8384  0F0E  0085               	movwf	5
  8385  0F0F  0800               	movf	0,w	;code access
  8386  0F10  0008               	return
  8387  0F11                     __end_ofPL30:	
  8388  0F11                     PL32:	
  8389  0F11  083B               	movf	_ir_state+5,w	;volatile
  8390  0F12  0023               	movlb	3	; select bank3
  8391  0F13  00C0               	movwf	??_IR_KeyAction^(0+384)
  8392  0F14  01C1               	clrf	(??_IR_KeyAction^(0+384)+1)
  8393  0F15  0020               	movlb	0	; select bank0
  8394  0F16  0838               	movf	_ir_state+2,w	;volatile
  8395  0F17  00CE               	movwf	___wmul@multiplier
  8396  0F18  3058               	movlw	88
  8397  0F19  01CF               	clrf	___wmul@multiplier+1
  8398  0F1A  00D0               	movwf	___wmul@multiplicand
  8399  0F1B  3002               	movlw	2
  8400  0F1C  00D1               	movwf	___wmul@multiplicand+1
  8401  0F1D  0008               	return
  8402  0F1E                     __end_ofPL32:	
  8403  0F1E                     PL34:	
  8404  0F1E  0086               	movwf	6
  8405  0F1F  3001               	movlw	1	; select bank2/3
  8406  0F20  0087               	movwf	7
  8407  0F21  355B               	lslf	Led_Initialize@i,w
  8408  0F22  0008               	return
  8409  0F23                     __end_ofPL34:	
  8410  0F23                     PL40:	
  8411  0F23  0086               	movwf	6
  8412  0F24  355B               	lslf	Led_Initialize@i,w
  8413  0F25  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
  8414  0F26  0084               	movwf	4
  8415  0F27  0008               	return
  8416  0F28                     __end_ofPL40:	
  8417  0F28                     PL44:	
  8418  0F28  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  8419  0F29  0020               	movlb	0	; select bank0
  8420  0F2A  00CE               	movwf	Util_IncValue@pSrc
  8421  0F2B  30E8               	movlw	232
  8422  0F2C  01CF               	clrf	Util_IncValue@pSrc+1
  8423  0F2D  00D0               	movwf	Util_IncValue@max
  8424  0F2E  3003               	movlw	3
  8425  0F2F  00D1               	movwf	Util_IncValue@max+1
  8426  0F30  30C8               	movlw	200
  8427  0F31  00D2               	movwf	Util_IncValue@delta
  8428  0F32  01D3               	clrf	Util_IncValue@delta+1
  8429  0F33  0008               	return
  8430  0F34                     __end_ofPL44:	
  8431  0F34                     PL50:	
  8432  0F34  00C0               	movwf	??_IR_KeyAction^(0+384)
  8433  0F35  302C               	movlw	(low ((_gLedPara| (0+256)+12)))& (0+255)
  8434  0F36  35C0               	lslf	??_IR_KeyAction^(0+384),f
  8435  0F37  0740               	addwf	??_IR_KeyAction^(0+384),w
  8436  0F38  00C1               	movwf	(??_IR_KeyAction+1)^(0+384)
  8437  0F39  300A               	movlw	10
  8438  0F3A  0020               	movlb	0	; select bank0
  8439  0F3B  00CE               	movwf	___bmul@multiplicand
  8440  0F3C  0023               	movlb	3	; select bank3
  8441  0F3D  0851               	movf	IR_KeyAction@idx^(0+384),w
  8442  0F3E  0008               	return
  8443  0F3F                     __end_ofPL50:	
  8444  0F3F                     PL52:	
  8445  0F3F  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  8446  0F40  0020               	movlb	0	; select bank0
  8447  0F41  00CE               	movwf	Util_DecValue@pSrc
  8448  0F42  30C8               	movlw	200
  8449  0F43  01CF               	clrf	Util_DecValue@pSrc+1
  8450  0F44  01D0               	clrf	Util_DecValue@min
  8451  0F45  01D1               	clrf	Util_DecValue@min+1
  8452  0F46  00D2               	movwf	Util_DecValue@delta
  8453  0F47  01D3               	clrf	Util_DecValue@delta+1
  8454  0F48  0008               	return
  8455  0F49                     __end_ofPL52:	
  8456  0F49                     PL54:	
  8457  0F49  0086               	movwf	6
  8458  0F4A  0187               	clrf	7
  8459  0F4B  0801               	movf	1,w
  8460  0F4C  0020               	movlb	0	; select bank0
  8461  0F4D  00CE               	movwf	___wmul@multiplier
  8462  0F4E  303C               	movlw	60
  8463  0F4F  01CF               	clrf	___wmul@multiplier+1
  8464  0F50  00D0               	movwf	___wmul@multiplicand
  8465  0F51  01D1               	clrf	___wmul@multiplicand+1
  8466  0F52  0008               	return
  8467  0F53                     __end_ofPL54:	
  8468  0F53                     PL58:	
  8469  0F53  0C20               	rrf	_gLedPara^(0+256),w	;volatile
  8470  0F54  0020               	movlb	0	; select bank0
  8471  0F55  00D4               	movwf	??_Led_Initialize
  8472  0F56  0CD4               	rrf	??_Led_Initialize,f
  8473  0F57  0C54               	rrf	??_Led_Initialize,w
  8474  0F58  390F               	andlw	15
  8475  0F59  0008               	return
  8476  0F5A                     __end_ofPL58:	
  8477  0F5A                     PL84:	
  8478  0F5A  0022               	movlb	2	; select bank2
  8479  0F5B  1020               	bcf	_gLedPara^(0+256),0	;volatile
  8480  0F5C  3087               	movlw	-121
  8481  0F5D  05A0               	andwf	_gLedPara^(0+256),f	;volatile
  8482  0F5E  13A0               	bcf	_gLedPara^(0+256),7	;volatile
  8483  0F5F  0008               	return
  8484  0F60                     __end_ofPL84:	
  8485  0F60                     PL86:	
  8486  0F60  0023               	movlb	3	; select bank3
  8487  0F61  0741               	addwf	(??_IR_KeyAction+1)^(0+384),w
  8488  0F62  00C2               	movwf	(??_IR_KeyAction+2)^(0+384)
  8489  0F63  0086               	movwf	6
  8490  0F64  3001               	movlw	1	; select bank2/3
  8491  0F65  0087               	movwf	7
  8492  0F66  0008               	return
  8493  0F67                     __end_ofPL86:	
  8494  0F67                     PL92:	
  8495  0F67  0086               	movwf	6
  8496  0F68  300A               	movlw	10
  8497  0F69  0187               	clrf	7
  8498  0F6A  0020               	movlb	0	; select bank0
  8499  0F6B  00CE               	movwf	___bmul@multiplicand
  8500  0F6C  0008               	return
  8501  0F6D                     __end_ofPL92:	
  8502  0F6D                     PL94:	
  8503  0F6D  30E8               	movlw	232
  8504  0F6E  0021               	movlb	1	; select bank1
  8505  0F6F  00C8               	movwf	_gLedRunPara^(0+128)	;volatile
  8506  0F70  3003               	movlw	3
  8507  0F71  00C9               	movwf	(_gLedRunPara^(0+128)+1)	;volatile
  8508  0F72  0008               	return
  8509  0F73                     __end_ofPL94:	
  8510  0F73                     PL102:	
  8511  0F73  0859               	movf	Audio_GetValue@value+1,w
  8512  0F74  00A3               	movwf	Audio_GetValue@max+1
  8513  0F75  0858               	movf	Audio_GetValue@value,w
  8514  0F76  00A2               	movwf	Audio_GetValue@max
  8515  0F77  0008               	return
  8516  0F78                     __end_ofPL102:	
  8517  0F78                     PL108:	
  8518  0F78  0022               	movlb	2	; select bank2
  8519  0F79  0854               	movf	(_gLedPara^(0+256)+52),w	;volatile
  8520  0F7A  0020               	movlb	0	; select bank0
  8521  0F7B  0259               	subwf	Led_Initialize@ct,w
  8522  0F7C  0008               	return
  8523  0F7D                     __end_ofPL108:	
  8524  0F7D                     PL110:	
  8525  0F7D  0701               	addwf	1,w
  8526  0F7E  00D4               	movwf	IR_IsValidTime@hour
  8527  0F7F  3018               	movlw	24
  8528  0F80  0254               	subwf	IR_IsValidTime@hour,w
  8529  0F81  0008               	return
  8530  0F82                     __end_ofPL110:	
  8531  0F82                     __ptext32:	
  8532 ;; *************** function _TMR0_SetInterruptHandler *****************
  8533 ;; Defined at:
  8534 ;;		line 37 in file "driver/src/tmr0.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;  handler         2   14[BANK0 ] PTR FTN()void 
  8537 ;;		 -> RTC_OnSecond(1), 
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;		None
  8540 ;; Return value:  Size  Location     Type
  8541 ;;                  1    wreg      void 
  8542 ;; Registers used:
  8543 ;;		wreg
  8544 ;; Tracked objects:
  8545 ;;		On entry : 1F/0
  8546 ;;		On exit  : 1F/1
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8549 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;Total ram usage:        2 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; Hardware stack levels required when called:    7
  8556 ;; This function calls:
  8557 ;;		Nothing
  8558 ;; This function is called by:
  8559 ;;		_Interrupt_Initialize
  8560 ;; This function uses a non-reentrant model
  8561 ;;
  8562                           
  8563                           
  8564                           ;psect for function _TMR0_SetInterruptHandler
  8565  0F82                     _TMR0_SetInterruptHandler:	
  8566                           
  8567                           ;tmr0.c: 39: tmr0_isr_handler = handler;
  8568                           
  8569                           ;incstack = 0
  8570                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  8571  0F82  084F               	movf	TMR0_SetInterruptHandler@handler+1,w
  8572  0F83  0021               	movlb	1	; select bank1
  8573  0F84  00E3               	movwf	(_tmr0_isr_handler+1)^(0+128)
  8574  0F85  0020               	movlb	0	; select bank0
  8575  0F86  084E               	movf	TMR0_SetInterruptHandler@handler,w
  8576  0F87  0021               	movlb	1	; select bank1
  8577  0F88  00E2               	movwf	_tmr0_isr_handler^(0+128)
  8578  0F89  0008               	return
  8579  0F8A                     __end_of_TMR0_SetInterruptHandler:	
  8580  0F8A                     __ptext31:	
  8581 ;; *************** function _TMR1_Gate_SetInterruptHandler *****************
  8582 ;; Defined at:
  8583 ;;		line 54 in file "driver/src/tmr1.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;  handler         2   14[BANK0 ] PTR FTN()void 
  8586 ;;		 -> IR_Decode(1), 
  8587 ;; Auto vars:     Size  Location     Type
  8588 ;;		None
  8589 ;; Return value:  Size  Location     Type
  8590 ;;                  1    wreg      void 
  8591 ;; Registers used:
  8592 ;;		wreg
  8593 ;; Tracked objects:
  8594 ;;		On entry : 1F/0
  8595 ;;		On exit  : 1F/1
  8596 ;;		Unchanged: 0/0
  8597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8598 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;Total ram usage:        2 bytes
  8603 ;; Hardware stack levels used:    1
  8604 ;; Hardware stack levels required when called:    7
  8605 ;; This function calls:
  8606 ;;		Nothing
  8607 ;; This function is called by:
  8608 ;;		_Interrupt_Initialize
  8609 ;; This function uses a non-reentrant model
  8610 ;;
  8611                           
  8612                           
  8613                           ;psect for function _TMR1_Gate_SetInterruptHandler
  8614  0F8A                     _TMR1_Gate_SetInterruptHandler:	
  8615                           
  8616                           ;tmr1.c: 56: tmr1_gate_isr_handler = handler;
  8617                           
  8618                           ;incstack = 0
  8619                           ; Regs used in _TMR1_Gate_SetInterruptHandler: [wreg]
  8620  0F8A  084F               	movf	TMR1_Gate_SetInterruptHandler@handler+1,w
  8621  0F8B  0021               	movlb	1	; select bank1
  8622  0F8C  00E5               	movwf	(_tmr1_gate_isr_handler+1)^(0+128)
  8623  0F8D  0020               	movlb	0	; select bank0
  8624  0F8E  084E               	movf	TMR1_Gate_SetInterruptHandler@handler,w
  8625  0F8F  0021               	movlb	1	; select bank1
  8626  0F90  00E4               	movwf	_tmr1_gate_isr_handler^(0+128)
  8627  0F91  0008               	return
  8628  0F92                     __end_of_TMR1_Gate_SetInterruptHandler:	
  8629  0F92                     __ptext20:	
  8630 ;; *************** function _Led_SaveParaIfChanged *****************
  8631 ;; Defined at:
  8632 ;;		line 137 in file "user/src/led.c"
  8633 ;; Parameters:    Size  Location     Type
  8634 ;;		None
  8635 ;; Auto vars:     Size  Location     Type
  8636 ;;		None
  8637 ;; Return value:  Size  Location     Type
  8638 ;;                  1    wreg      void 
  8639 ;; Registers used:
  8640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8641 ;; Tracked objects:
  8642 ;;		On entry : 1F/0
  8643 ;;		On exit  : 1E/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;Total ram usage:        0 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; Hardware stack levels required when called:    9
  8653 ;; This function calls:
  8654 ;;		_DATAEE_WriteBuffer
  8655 ;; This function is called by:
  8656 ;;		_main
  8657 ;; This function uses a non-reentrant model
  8658 ;;
  8659                           
  8660                           
  8661                           ;psect for function _Led_SaveParaIfChanged
  8662  0F92                     _Led_SaveParaIfChanged:	
  8663                           
  8664                           ;led.c: 138: if (gLedRunPara.mParaChanged) {
  8665                           
  8666                           ;incstack = 0
  8667                           ; Regs used in _Led_SaveParaIfChanged: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8668  0F92  0021               	movlb	1	; select bank1
  8669  0F93  1C5C               	btfss	(_gLedRunPara^(0+128)+20),0	;volatile
  8670  0F94  0008               	return
  8671                           
  8672                           ;led.c: 139: gLedRunPara.mParaChanged = 0;
  8673  0F95  105C               	bcf	(_gLedRunPara^(0+128)+20),0	;volatile
  8674                           
  8675                           ;led.c: 140: DATAEE_WriteBuffer(0x7010, (uint8_t *) & gLedPara, sizeof ( gLedPara));
  8676  0F96  3010               	movlw	16
  8677  0F97  0020               	movlb	0	; select bank0
  8678  0F98  00D2               	movwf	DATAEE_WriteBuffer@addr
  8679  0F99  3070               	movlw	112
  8680  0F9A  00D3               	movwf	DATAEE_WriteBuffer@addr+1
  8681  0F9B  3020               	movlw	(low (_gLedPara| (0+256)))& (0+255)
  8682  0F9C  00D4               	movwf	DATAEE_WriteBuffer@buf
  8683  0F9D  304C               	movlw	76
  8684  0F9E  00D5               	movwf	DATAEE_WriteBuffer@len
  8685  0F9F  2FA0               	ljmp	l4726
  8686  0FA0                     __end_of_Led_SaveParaIfChanged:	
  8687  0FA0                     __ptext21:	
  8688 ;; *************** function _DATAEE_WriteBuffer *****************
  8689 ;; Defined at:
  8690 ;;		line 41 in file "driver/src/eeprom.c"
  8691 ;; Parameters:    Size  Location     Type
  8692 ;;  addr            2   18[BANK0 ] unsigned int 
  8693 ;;  buf             1   20[BANK0 ] PTR unsigned char 
  8694 ;;		 -> gLedPara(76), 
  8695 ;;  len             1   21[BANK0 ] unsigned char 
  8696 ;; Auto vars:     Size  Location     Type
  8697 ;;  i               1   22[BANK0 ] unsigned char 
  8698 ;; Return value:  Size  Location     Type
  8699 ;;                  1    wreg      void 
  8700 ;; Registers used:
  8701 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8702 ;; Tracked objects:
  8703 ;;		On entry : 1F/0
  8704 ;;		On exit  : 1F/0
  8705 ;;		Unchanged: 0/0
  8706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8707 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;Total ram usage:        5 bytes
  8712 ;; Hardware stack levels used:    1
  8713 ;; Hardware stack levels required when called:    8
  8714 ;; This function calls:
  8715 ;;		_DATAEE_WriteByte
  8716 ;; This function is called by:
  8717 ;;		_Led_SaveParaIfChanged
  8718 ;; This function uses a non-reentrant model
  8719 ;;
  8720                           
  8721                           
  8722                           ;psect for function _DATAEE_WriteBuffer
  8723  0FA0                     _DATAEE_WriteBuffer:	
  8724  0FA0                     l4726:	
  8725                           ;incstack = 0
  8726                           ; Regs used in _DATAEE_WriteBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8727                           
  8728                           
  8729                           ;eeprom.c: 43: for ( uint8_t i = len; i != 0; i-- )
  8730  0FA0  0855               	movf	DATAEE_WriteBuffer@len,w
  8731  0FA1  00D6               	movwf	DATAEE_WriteBuffer@i
  8732  0FA2                     l4728:	
  8733  0FA2  0856               	movf	DATAEE_WriteBuffer@i,w
  8734  0FA3  1903               	btfsc	3,2
  8735  0FA4  0008               	return
  8736                           
  8737                           ;eeprom.c: 44: {
  8738                           ;eeprom.c: 45: DATAEE_WriteByte ( addr++, *buf++ );
  8739  0FA5  0853               	movf	DATAEE_WriteBuffer@addr+1,w
  8740  0FA6  00CF               	movwf	DATAEE_WriteByte@addr+1
  8741  0FA7  0852               	movf	DATAEE_WriteBuffer@addr,w
  8742  0FA8  00CE               	movwf	DATAEE_WriteByte@addr
  8743  0FA9  0854               	movf	DATAEE_WriteBuffer@buf,w
  8744  0FAA  0086               	movwf	6
  8745  0FAB  3001               	movlw	1	; select bank2/3
  8746  0FAC  0087               	movwf	7
  8747  0FAD  0801               	movf	1,w
  8748  0FAE  00D0               	movwf	DATAEE_WriteByte@byte
  8749  0FAF  27B7  3188         	fcall	_DATAEE_WriteByte
  8750  0FB1  0AD4               	incf	DATAEE_WriteBuffer@buf,f
  8751  0FB2  0AD2               	incf	DATAEE_WriteBuffer@addr,f
  8752  0FB3  1903               	skipnz
  8753  0FB4  0AD3               	incf	DATAEE_WriteBuffer@addr+1,f
  8754  0FB5  03D6               	decf	DATAEE_WriteBuffer@i,f
  8755  0FB6  2FA2               	goto	l4728
  8756  0FB7                     __end_of_DATAEE_WriteBuffer:	
  8757  0FB7                     __ptext22:	
  8758 ;; *************** function _DATAEE_WriteByte *****************
  8759 ;; Defined at:
  8760 ;;		line 3 in file "driver/src/eeprom.c"
  8761 ;; Parameters:    Size  Location     Type
  8762 ;;  addr            2   14[BANK0 ] unsigned int 
  8763 ;;  byte            1   16[BANK0 ] unsigned char 
  8764 ;; Auto vars:     Size  Location     Type
  8765 ;;  GIEBitValue     1   17[BANK0 ] unsigned char 
  8766 ;; Return value:  Size  Location     Type
  8767 ;;                  1    wreg      void 
  8768 ;; Registers used:
  8769 ;;		wreg, status,2, status,0
  8770 ;; Tracked objects:
  8771 ;;		On entry : 1F/0
  8772 ;;		On exit  : 1F/0
  8773 ;;		Unchanged: 0/0
  8774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8775 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8778 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;Total ram usage:        4 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; Hardware stack levels required when called:    7
  8782 ;; This function calls:
  8783 ;;		Nothing
  8784 ;; This function is called by:
  8785 ;;		_DATAEE_WriteBuffer
  8786 ;; This function uses a non-reentrant model
  8787 ;;
  8788                           
  8789                           
  8790                           ;psect for function _DATAEE_WriteByte
  8791  0FB7                     _DATAEE_WriteByte:	
  8792                           
  8793                           ;eeprom.c: 5: uint8_t GIEBitValue = INTCONbits.GIE;
  8794                           
  8795                           ;incstack = 0
  8796                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  8797  0FB7  3000               	movlw	0
  8798  0FB8  1B8B               	btfsc	11,7	;volatile
  8799  0FB9  3001               	movlw	1
  8800  0FBA  00D1               	movwf	DATAEE_WriteByte@GIEBitValue
  8801                           
  8802                           ;eeprom.c: 7: NVMADRH = addr >> 8;
  8803  0FBB  084F               	movf	DATAEE_WriteByte@addr+1,w
  8804  0FBC  0031               	movlb	17	; select bank17
  8805  0FBD  0092               	movwf	18	;volatile
  8806                           
  8807                           ;eeprom.c: 8: NVMADRL = addr & 0xFF;
  8808  0FBE  0020               	movlb	0	; select bank0
  8809  0FBF  084E               	movf	DATAEE_WriteByte@addr,w
  8810  0FC0  0031               	movlb	17	; select bank17
  8811  0FC1  0091               	movwf	17	;volatile
  8812                           
  8813                           ;eeprom.c: 9: NVMDATL = byte;
  8814  0FC2  0020               	movlb	0	; select bank0
  8815  0FC3  0850               	movf	DATAEE_WriteByte@byte,w
  8816  0FC4  0031               	movlb	17	; select bank17
  8817  0FC5  0093               	movwf	19	;volatile
  8818                           
  8819                           ;eeprom.c: 10: NVMCON1bits.NVMREGS = 1;
  8820  0FC6  1715               	bsf	21,6	;volsfr
  8821                           
  8822                           ;eeprom.c: 11: NVMCON1bits.WREN = 1;
  8823  0FC7  1515               	bsf	21,2	;volsfr
  8824                           
  8825                           ;eeprom.c: 12: INTCONbits.GIE = 0;
  8826  0FC8  138B               	bcf	11,7	;volatile
  8827                           
  8828                           ;eeprom.c: 13: NVMCON2 = 0x55;
  8829  0FC9  3055               	movlw	85
  8830  0FCA  0096               	movwf	22	;volsfr
  8831                           
  8832                           ;eeprom.c: 14: NVMCON2 = 0xAA;
  8833  0FCB  30AA               	movlw	170
  8834  0FCC  0096               	movwf	22	;volsfr
  8835                           
  8836                           ;eeprom.c: 15: NVMCON1bits.WR = 1;
  8837  0FCD  1495               	bsf	21,1	;volsfr
  8838  0FCE                     l46:	
  8839                           ;eeprom.c: 17: while ( NVMCON1bits.WR );
  8840                           
  8841  0FCE  1895               	btfsc	21,1	;volsfr
  8842  0FCF  2FCE               	goto	l46
  8843                           
  8844                           ;eeprom.c: 19: NVMCON1bits.WREN = 0;
  8845  0FD0  1115               	bcf	21,2	;volsfr
  8846                           
  8847                           ;eeprom.c: 20: INTCONbits.GIE = GIEBitValue;
  8848  0FD1  0020               	movlb	0	; select bank0
  8849  0FD2  0C51               	rrf	DATAEE_WriteByte@GIEBitValue,w
  8850  0FD3  1C03               	skipc
  8851  0FD4  138B               	bcf	11,7	;volatile
  8852  0FD5  1803               	skipnc
  8853  0FD6  178B               	bsf	11,7	;volatile
  8854  0FD7  0008               	return
  8855  0FD8                     __end_of_DATAEE_WriteByte:	
  8856  0FD8                     __ptext19:	
  8857 ;; *************** function _RTC_HourReady *****************
  8858 ;; Defined at:
  8859 ;;		line 61 in file "user/src/rtc.c"
  8860 ;; Parameters:    Size  Location     Type
  8861 ;;		None
  8862 ;; Auto vars:     Size  Location     Type
  8863 ;;		None
  8864 ;; Return value:  Size  Location     Type
  8865 ;;                  1    wreg      unsigned char 
  8866 ;; Registers used:
  8867 ;;		wreg
  8868 ;; Tracked objects:
  8869 ;;		On entry : 1E/0
  8870 ;;		On exit  : 1F/0
  8871 ;;		Unchanged: 0/0
  8872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8877 ;;Total ram usage:        0 bytes
  8878 ;; Hardware stack levels used:    1
  8879 ;; Hardware stack levels required when called:    7
  8880 ;; This function calls:
  8881 ;;		Nothing
  8882 ;; This function is called by:
  8883 ;;		_main
  8884 ;; This function uses a non-reentrant model
  8885 ;;
  8886                           
  8887                           
  8888                           ;psect for function _RTC_HourReady
  8889  0FD8                     _RTC_HourReady:	
  8890                           
  8891                           ;rtc.c: 63: if( rtc_status.mHour )
  8892                           
  8893                           ;incstack = 0
  8894                           ; Regs used in _RTC_HourReady: [wreg]
  8895  0FD8  0020               	movlb	0	; select bank0
  8896  0FD9  1D33               	btfss	_rtc_status,2	;volatile
  8897  0FDA  3400               	retlw	0
  8898                           
  8899                           ;rtc.c: 64: {
  8900                           ;rtc.c: 65: rtc_status.mHour = 0;
  8901  0FDB  1133               	bcf	_rtc_status,2	;volatile
  8902                           
  8903                           ;rtc.c: 66: return 1;
  8904  0FDC  3401               	retlw	1
  8905  0FDD                     __end_of_RTC_HourReady:	
  8906                           ;rtc.c: 67: }
  8907                           ;rtc.c: 68: return 0;
  8908                           
  8909  0FDD                     __ptext18:	
  8910 ;; *************** function _RTC_MinuteReady *****************
  8911 ;; Defined at:
  8912 ;;		line 51 in file "user/src/rtc.c"
  8913 ;; Parameters:    Size  Location     Type
  8914 ;;		None
  8915 ;; Auto vars:     Size  Location     Type
  8916 ;;		None
  8917 ;; Return value:  Size  Location     Type
  8918 ;;                  1    wreg      unsigned char 
  8919 ;; Registers used:
  8920 ;;		wreg
  8921 ;; Tracked objects:
  8922 ;;		On entry : 1F/0
  8923 ;;		On exit  : 1F/0
  8924 ;;		Unchanged: 0/0
  8925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;Total ram usage:        0 bytes
  8931 ;; Hardware stack levels used:    1
  8932 ;; Hardware stack levels required when called:    7
  8933 ;; This function calls:
  8934 ;;		Nothing
  8935 ;; This function is called by:
  8936 ;;		_main
  8937 ;; This function uses a non-reentrant model
  8938 ;;
  8939                           
  8940                           
  8941                           ;psect for function _RTC_MinuteReady
  8942  0FDD                     _RTC_MinuteReady:	
  8943                           
  8944                           ;rtc.c: 53: if( rtc_status.mMin )
  8945                           
  8946                           ;incstack = 0
  8947                           ; Regs used in _RTC_MinuteReady: [wreg]
  8948  0FDD  1CB3               	btfss	_rtc_status,1	;volatile
  8949  0FDE  3400               	retlw	0
  8950                           
  8951                           ;rtc.c: 54: {
  8952                           ;rtc.c: 55: rtc_status.mMin = 0;
  8953  0FDF  10B3               	bcf	_rtc_status,1	;volatile
  8954                           
  8955                           ;rtc.c: 56: return 1;
  8956  0FE0  3401               	retlw	1
  8957  0FE1                     __end_of_RTC_MinuteReady:	
  8958                           ;rtc.c: 57: }
  8959                           ;rtc.c: 58: return 0;
  8960                           
  8961  0FE1                     __ptext17:	
  8962 ;; *************** function _RTC_SecondReady *****************
  8963 ;; Defined at:
  8964 ;;		line 41 in file "user/src/rtc.c"
  8965 ;; Parameters:    Size  Location     Type
  8966 ;;		None
  8967 ;; Auto vars:     Size  Location     Type
  8968 ;;		None
  8969 ;; Return value:  Size  Location     Type
  8970 ;;                  1    wreg      unsigned char 
  8971 ;; Registers used:
  8972 ;;		wreg
  8973 ;; Tracked objects:
  8974 ;;		On entry : 1C/0
  8975 ;;		On exit  : 1F/0
  8976 ;;		Unchanged: 0/0
  8977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8982 ;;Total ram usage:        0 bytes
  8983 ;; Hardware stack levels used:    1
  8984 ;; Hardware stack levels required when called:    7
  8985 ;; This function calls:
  8986 ;;		Nothing
  8987 ;; This function is called by:
  8988 ;;		_main
  8989 ;; This function uses a non-reentrant model
  8990 ;;
  8991                           
  8992                           
  8993                           ;psect for function _RTC_SecondReady
  8994  0FE1                     _RTC_SecondReady:	
  8995                           
  8996                           ;rtc.c: 43: if( rtc_status.mSec )
  8997                           
  8998                           ;incstack = 0
  8999                           ; Regs used in _RTC_SecondReady: [wreg]
  9000  0FE1  0020               	movlb	0	; select bank0
  9001  0FE2  1C33               	btfss	_rtc_status,0	;volatile
  9002  0FE3  3400               	retlw	0
  9003                           
  9004                           ;rtc.c: 44: {
  9005                           ;rtc.c: 45: rtc_status.mSec = 0;
  9006  0FE4  1033               	bcf	_rtc_status,0	;volatile
  9007                           
  9008                           ;rtc.c: 46: return 1;
  9009  0FE5  3401               	retlw	1
  9010  0FE6                     __end_of_RTC_SecondReady:	
  9011                           ;rtc.c: 47: }
  9012                           ;rtc.c: 48: return 0;
  9013                           
  9014  0FE6                     __ptext1:	
  9015 ;; *************** function _TMR2_StartTimer *****************
  9016 ;; Defined at:
  9017 ;;		line 16 in file "driver/src/tmr2.c"
  9018 ;; Parameters:    Size  Location     Type
  9019 ;;		None
  9020 ;; Auto vars:     Size  Location     Type
  9021 ;;		None
  9022 ;; Return value:  Size  Location     Type
  9023 ;;                  1    wreg      void 
  9024 ;; Registers used:
  9025 ;;		None
  9026 ;; Tracked objects:
  9027 ;;		On entry : 1F/0
  9028 ;;		On exit  : 1F/0
  9029 ;;		Unchanged: 0/0
  9030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;Total ram usage:        0 bytes
  9036 ;; Hardware stack levels used:    1
  9037 ;; Hardware stack levels required when called:    7
  9038 ;; This function calls:
  9039 ;;		Nothing
  9040 ;; This function is called by:
  9041 ;;		_main
  9042 ;; This function uses a non-reentrant model
  9043 ;;
  9044                           
  9045                           
  9046                           ;psect for function _TMR2_StartTimer
  9047  0FE6                     _TMR2_StartTimer:	
  9048                           
  9049                           ;tmr2.c: 18: T2CONbits.TMR2ON = 1;
  9050                           
  9051                           ;incstack = 0
  9052                           ; Regs used in _TMR2_StartTimer: []
  9053  0FE6  151F               	bsf	31,2	;volatile
  9054  0FE7  0008               	return
  9055  0FE8                     __end_of_TMR2_StartTimer:	
  9056  0FE8                     __ptext34:	
  9057 ;; *************** function _IR_ExitTimeout *****************
  9058 ;; Defined at:
  9059 ;;		line 442 in file "user/src/ir.c"
  9060 ;; Parameters:    Size  Location     Type
  9061 ;;		None
  9062 ;; Auto vars:     Size  Location     Type
  9063 ;;		None
  9064 ;; Return value:  Size  Location     Type
  9065 ;;                  1    wreg      void 
  9066 ;; Registers used:
  9067 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9068 ;; Tracked objects:
  9069 ;;		On entry : 1F/0
  9070 ;;		On exit  : 1F/0
  9071 ;;		Unchanged: 0/0
  9072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;Total ram usage:        0 bytes
  9078 ;; Hardware stack levels used:    1
  9079 ;; Hardware stack levels required when called:   10
  9080 ;; This function calls:
  9081 ;;		_Led_Initialize
  9082 ;;		_Led_StartNotice
  9083 ;; This function is called by:
  9084 ;;		_IR_UpdateSetStatus
  9085 ;; This function uses a non-reentrant model
  9086 ;;
  9087                           
  9088                           
  9089                           ;psect for function _IR_ExitTimeout
  9090  0FE8                     _IR_ExitTimeout:	
  9091  0FE8                     l6518:	
  9092                           ;incstack = 0
  9093                           ; Regs used in _IR_ExitTimeout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9094                           
  9095                           
  9096                           ;ir.c: 443: ir_state.mSet = 0;
  9097  0FE8  301F               	movlw	-225
  9098  0FE9  05B6               	andwf	_ir_state,f	;volatile
  9099                           
  9100                           ;ir.c: 444: ir_state.tmIdx = 0;
  9101  0FEA  01B7               	clrf	_ir_state+1	;volatile
  9102                           
  9103                           ;ir.c: 445: ir_state.mSetDelay = 0;
  9104  0FEB  01BC               	clrf	_ir_state+6	;volatile
  9105                           
  9106                           ;ir.c: 446: Led_StartNotice(2);
  9107  0FEC  3002               	movlw	2
  9108  0FED  2557  3188         	fcall	_Led_StartNotice
  9109                           
  9110                           ;ir.c: 447: Led_Initialize();
  9111  0FEF  28FE               	ljmp	l5928
  9112  0FF0                     __end_of_IR_ExitTimeout:	
  9113  0FF0                     __ptext30:	
  9114 ;; *************** function _TMR2_SetInterruptHandler *****************
  9115 ;; Defined at:
  9116 ;;		line 35 in file "driver/src/tmr2.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;  handler         2   14[BANK0 ] PTR FTN()void 
  9119 ;;		 -> Led_Run(1), 
  9120 ;; Auto vars:     Size  Location     Type
  9121 ;;		None
  9122 ;; Return value:  Size  Location     Type
  9123 ;;                  1    wreg      void 
  9124 ;; Registers used:
  9125 ;;		wreg
  9126 ;; Tracked objects:
  9127 ;;		On entry : 1F/0
  9128 ;;		On exit  : 1F/1
  9129 ;;		Unchanged: 0/0
  9130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9131 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;Total ram usage:        2 bytes
  9136 ;; Hardware stack levels used:    1
  9137 ;; Hardware stack levels required when called:    7
  9138 ;; This function calls:
  9139 ;;		Nothing
  9140 ;; This function is called by:
  9141 ;;		_Interrupt_Initialize
  9142 ;; This function uses a non-reentrant model
  9143 ;;
  9144                           
  9145                           
  9146                           ;psect for function _TMR2_SetInterruptHandler
  9147  0FF0                     _TMR2_SetInterruptHandler:	
  9148                           
  9149                           ;tmr2.c: 37: tmr2_isr_handler = handler;
  9150                           
  9151                           ;incstack = 0
  9152                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  9153  0FF0  084F               	movf	TMR2_SetInterruptHandler@handler+1,w
  9154  0FF1  0021               	movlb	1	; select bank1
  9155  0FF2  00E7               	movwf	(_tmr2_isr_handler+1)^(0+128)
  9156  0FF3  0020               	movlb	0	; select bank0
  9157  0FF4  084E               	movf	TMR2_SetInterruptHandler@handler,w
  9158  0FF5  0021               	movlb	1	; select bank1
  9159  0FF6  00E6               	movwf	_tmr2_isr_handler^(0+128)
  9160  0FF7  0008               	return
  9161  0FF8                     __end_of_TMR2_SetInterruptHandler:	
  9162  0FF8                     __ptext29:	
  9163 ;; *************** function _TMR4_SetInterruptHandler *****************
  9164 ;; Defined at:
  9165 ;;		line 37 in file "driver/src/tmr4.c"
  9166 ;; Parameters:    Size  Location     Type
  9167 ;;  handler         2   14[BANK0 ] PTR FTN()void 
  9168 ;;		 -> Led_Notice(1), 
  9169 ;; Auto vars:     Size  Location     Type
  9170 ;;		None
  9171 ;; Return value:  Size  Location     Type
  9172 ;;                  1    wreg      void 
  9173 ;; Registers used:
  9174 ;;		wreg
  9175 ;; Tracked objects:
  9176 ;;		On entry : 1F/0
  9177 ;;		On exit  : 1F/1
  9178 ;;		Unchanged: 0/0
  9179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9180 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9183 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9184 ;;Total ram usage:        2 bytes
  9185 ;; Hardware stack levels used:    1
  9186 ;; Hardware stack levels required when called:    7
  9187 ;; This function calls:
  9188 ;;		Nothing
  9189 ;; This function is called by:
  9190 ;;		_Interrupt_Initialize
  9191 ;; This function uses a non-reentrant model
  9192 ;;
  9193                           
  9194                           
  9195                           ;psect for function _TMR4_SetInterruptHandler
  9196  0FF8                     _TMR4_SetInterruptHandler:	
  9197  0FF8                     l4846:	
  9198                           ;incstack = 0
  9199                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  9200                           
  9201                           
  9202                           ;tmr4.c: 39: tmr4_isr_handler = handler;
  9203  0FF8  084F               	movf	TMR4_SetInterruptHandler@handler+1,w
  9204  0FF9  0021               	movlb	1	; select bank1
  9205  0FFA  00E9               	movwf	(_tmr4_isr_handler+1)^(0+128)
  9206  0FFB  0020               	movlb	0	; select bank0
  9207  0FFC  084E               	movf	TMR4_SetInterruptHandler@handler,w
  9208  0FFD  0021               	movlb	1	; select bank1
  9209  0FFE  00E8               	movwf	_tmr4_isr_handler^(0+128)
  9210  0FFF  0008               	return
  9211  1000                     __end_of_TMR4_SetInterruptHandler:	
  9212                           
  9213                           	psect	bssBANK0
  9214  0020                     __pbssBANK0:	
  9215  0020                     Audio_GetValue@cnt:	
  9216  0020                     	ds	2
  9217  0022                     Audio_GetValue@max:	
  9218  0022                     	ds	2
  9219  0024                     Audio_GetValue@min:	
  9220  0024                     	ds	2
  9221  0026                     IR_Decode@codeVal:	
  9222  0026                     	ds	2
  9223  0028                     IR_ScanLongPress@cnt:	
  9224  0028                     	ds	2
  9225  002A                     _adc_result:	
  9226  002A                     	ds	2
  9227  002C                     _audio_value:	
  9228  002C                     	ds	2
  9229  002E                     IR_Decode@nBit:	
  9230  002E                     	ds	1
  9231  002F                     IR_Decode@rptCnt:	
  9232  002F                     	ds	1
  9233  0030                     Led_Notice@cnt:	
  9234  0030                     	ds	1
  9235  0031                     Led_Run@cnt:	
  9236  0031                     	ds	1
  9237  0032                     _keyValue:	
  9238  0032                     	ds	1
  9239  0033                     _rtc_status:	
  9240  0033                     	ds	1
  9241  0034                     _txHead:	
  9242  0034                     	ds	1
  9243  0035                     _txTail:	
  9244  0035                     	ds	1
  9245  0036                     _ir_state:	
  9246  0036                     	ds	7
  9247  003D                     _rtc_time:	
  9248  003D                     	ds	3
  9249                           
  9250                           	psect	bssBANK1
  9251  00C8                     __pbssBANK1:	
  9252  00C8                     _gLedRunPara:	
  9253  00C8                     	ds	26
  9254                           
  9255                           	psect	dataBANK1
  9256  00A0                     __pdataBANK1:	
  9257  00A0                     Led_DynamicCloud@F8326:	
  9258  00A0                     	ds	10
  9259  00AA                     Led_DynamicMoon@F8316:	
  9260  00AA                     	ds	10
  9261  00B4                     Led_DynamicWave@F8306:	
  9262  00B4                     	ds	10
  9263  00BE                     _loadDuty:	
  9264  00BE                     	ds	10
  9265                           
  9266                           	psect	bssBANK2
  9267  0120                     __pbssBANK2:	
  9268  0120                     _gLedPara:	
  9269  0120                     	ds	76
  9270                           
  9271                           	psect	bssBANK3
  9272  01A0                     __pbssBANK3:	
  9273  01A0                     _txBuf:	
  9274  01A0                     	ds	32
  9275                           
  9276                           	psect	dataBANK3
  9277  01D2                     __pdataBANK3:	
  9278  01D2                     Led_DynamicStorm@F8336:	
  9279  01D2                     	ds	10
  9280                           
  9281                           	psect	inittext
  9282  14A5                     init_ram:	
  9283  14A5  00FE               	movwf	126
  9284  14A6                     initloop:	
  9285  14A6  0012               	moviw fsr0++
  9286  14A7  001E               	movwi fsr1++
  9287  14A8  0BFE               	decfsz	126,f
  9288  14A9  2CA6               	goto	initloop
  9289  14AA  3400               	retlw	0
  9290                           
  9291                           	psect	clrtext
  9292  149F                     clear_ram0:	
  9293                           ;	Called with FSR0 containing the base address, and
  9294                           ;	WREG with the size to clear
  9295                           
  9296  149F  0064               	clrwdt	;clear the watchdog before getting into this loop
  9297  14A0                     clrloop0:	
  9298  14A0  0180               	clrf	0	;clear RAM location pointed to by FSR
  9299  14A1  3101               	addfsr 0,1
  9300  14A2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  9301  14A3  2CA0               	goto	clrloop0	;have we reached the end yet?
  9302  14A4  3400               	retlw	0	;all done for this memory range, return
  9303                           
  9304                           	psect	cstackBANK3
  9305  01C0                     __pcstackBANK3:	
  9306  01C0                     ??_IR_KeyAction:	
  9307                           
  9308                           ; 1 bytes @ 0x0
  9309  01C0                     	ds	10
  9310  01CA                     IR_KeyAction@i:	
  9311                           
  9312                           ; 1 bytes @ 0xA
  9313  01CA                     	ds	1
  9314  01CB                     IR_KeyAction@i_1421:	
  9315                           
  9316                           ; 1 bytes @ 0xB
  9317  01CB                     	ds	1
  9318  01CC                     IR_KeyAction@i_1422:	
  9319                           
  9320                           ; 1 bytes @ 0xC
  9321  01CC                     	ds	1
  9322  01CD                     IR_KeyAction@i_1427:	
  9323                           
  9324                           ; 1 bytes @ 0xD
  9325  01CD                     	ds	1
  9326  01CE                     IR_KeyAction@i_1428:	
  9327                           
  9328                           ; 1 bytes @ 0xE
  9329  01CE                     	ds	1
  9330  01CF                     IR_KeyAction@i_1423:	
  9331                           
  9332                           ; 1 bytes @ 0xF
  9333  01CF                     	ds	1
  9334  01D0                     IR_KeyAction@i_1424:	
  9335                           
  9336                           ; 1 bytes @ 0x10
  9337  01D0                     	ds	1
  9338  01D1                     IR_KeyAction@idx:	
  9339                           
  9340                           ; 1 bytes @ 0x11
  9341  01D1                     	ds	1
  9342                           
  9343                           	psect	cstackCOMMON
  9344  0070                     __pcstackCOMMON:	
  9345  0070                     ?_SYSTEM_Initialize:	
  9346  0070                     ?_Interrupt_Initialize:	
  9347                           ; 1 bytes @ 0x0
  9348                           
  9349  0070                     ?_Led_InitPara:	
  9350                           ; 1 bytes @ 0x0
  9351                           
  9352  0070                     ?_Led_Initialize:	
  9353                           ; 1 bytes @ 0x0
  9354                           
  9355  0070                     ?_IR_KeyAtionIfPressed:	
  9356                           ; 1 bytes @ 0x0
  9357                           
  9358  0070                     ?_IR_ResetIfTMR1Overflow:	
  9359                           ; 1 bytes @ 0x0
  9360                           
  9361  0070                     ?_Led_SaveParaIfChanged:	
  9362                           ; 1 bytes @ 0x0
  9363                           
  9364  0070                     ?_RTC_HourReady:	
  9365                           ; 1 bytes @ 0x0
  9366                           
  9367  0070                     ?_RTC_MinuteReady:	
  9368                           ; 1 bytes @ 0x0
  9369                           
  9370  0070                     ?_Led_CheckAutoStatus:	
  9371                           ; 1 bytes @ 0x0
  9372                           
  9373  0070                     ?_RTC_SecondReady:	
  9374                           ; 1 bytes @ 0x0
  9375                           
  9376  0070                     ?_Led_AutoRun:	
  9377                           ; 1 bytes @ 0x0
  9378                           
  9379  0070                     ?_IR_UpdateSetStatus:	
  9380                           ; 1 bytes @ 0x0
  9381                           
  9382  0070                     ?_IR_Decode:	
  9383                           ; 1 bytes @ 0x0
  9384                           
  9385  0070                     ?_RTC_OnSecond:	
  9386                           ; 1 bytes @ 0x0
  9387                           
  9388  0070                     ??_RTC_OnSecond:	
  9389                           ; 1 bytes @ 0x0
  9390                           
  9391  0070                     ?_Led_Run:	
  9392                           ; 1 bytes @ 0x0
  9393                           
  9394  0070                     ?_Led_Notice:	
  9395                           ; 1 bytes @ 0x0
  9396                           
  9397  0070                     ??_Led_Notice:	
  9398                           ; 1 bytes @ 0x0
  9399                           
  9400  0070                     ?_RTC_GetTime:	
  9401                           ; 1 bytes @ 0x0
  9402                           
  9403  0070                     ?_Led_TurnOffRamp:	
  9404                           ; 1 bytes @ 0x0
  9405                           
  9406  0070                     ?_Led_UpdateBright:	
  9407                           ; 1 bytes @ 0x0
  9408                           
  9409  0070                     ?_Led_TurnOnRamp:	
  9410                           ; 1 bytes @ 0x0
  9411                           
  9412  0070                     ?_IR_ScanLongPress:	
  9413                           ; 1 bytes @ 0x0
  9414                           
  9415  0070                     ?_ADC_Initialize_Default:	
  9416                           ; 1 bytes @ 0x0
  9417                           
  9418  0070                     ?_EUSART_Initialize_Default:	
  9419                           ; 1 bytes @ 0x0
  9420                           
  9421  0070                     ?_EUSART_Write:	
  9422                           ; 1 bytes @ 0x0
  9423                           
  9424  0070                     ?_EUSART_Transmit_ISR:	
  9425                           ; 1 bytes @ 0x0
  9426                           
  9427  0070                     ??_EUSART_Transmit_ISR:	
  9428                           ; 1 bytes @ 0x0
  9429                           
  9430  0070                     ?_PWM1_Initialize:	
  9431                           ; 1 bytes @ 0x0
  9432                           
  9433  0070                     ?_PWM2_Initialize:	
  9434                           ; 1 bytes @ 0x0
  9435                           
  9436  0070                     ?_PWM3_Initialize:	
  9437                           ; 1 bytes @ 0x0
  9438                           
  9439  0070                     ?_PWM4_Initialize:	
  9440                           ; 1 bytes @ 0x0
  9441                           
  9442  0070                     ?_PWM5_Initialize:	
  9443                           ; 1 bytes @ 0x0
  9444                           
  9445  0070                     ?_TMR0_Initialize_Default:	
  9446                           ; 1 bytes @ 0x0
  9447                           
  9448  0070                     ?_TMR0_StartTimer:	
  9449                           ; 1 bytes @ 0x0
  9450                           
  9451  0070                     ?_TMR0_ISR:	
  9452                           ; 1 bytes @ 0x0
  9453                           
  9454  0070                     ??_TMR0_ISR:	
  9455                           ; 1 bytes @ 0x0
  9456                           
  9457  0070                     ?_TMR1_Initialize_Default:	
  9458                           ; 1 bytes @ 0x0
  9459                           
  9460  0070                     ?_TMR1_StartTimer:	
  9461                           ; 1 bytes @ 0x0
  9462                           
  9463  0070                     ?_TMR1_StopTimer:	
  9464                           ; 1 bytes @ 0x0
  9465                           
  9466  0070                     ?_TMR1_GATE_ISR:	
  9467                           ; 1 bytes @ 0x0
  9468                           
  9469  0070                     ?_TMR2_Initialize_Default:	
  9470                           ; 1 bytes @ 0x0
  9471                           
  9472  0070                     ?_TMR2_StartTimer:	
  9473                           ; 1 bytes @ 0x0
  9474                           
  9475  0070                     ?_TMR2_ISR:	
  9476                           ; 1 bytes @ 0x0
  9477                           
  9478  0070                     ?_TMR2_DisableInterrupt:	
  9479                           ; 1 bytes @ 0x0
  9480                           
  9481  0070                     ?_TMR2_EnableInterrupt:	
  9482                           ; 1 bytes @ 0x0
  9483                           
  9484  0070                     ?_TMR4_Initialize_Default:	
  9485                           ; 1 bytes @ 0x0
  9486                           
  9487  0070                     ?_TMR4_StartTimer:	
  9488                           ; 1 bytes @ 0x0
  9489                           
  9490  0070                     ?_TMR4_StopTimer:	
  9491                           ; 1 bytes @ 0x0
  9492                           
  9493  0070                     ??_TMR4_StopTimer:	
  9494                           ; 1 bytes @ 0x0
  9495                           
  9496  0070                     ?_TMR4_ISR:	
  9497                           ; 1 bytes @ 0x0
  9498                           
  9499  0070                     ?_Audio_PlaySound:	
  9500                           ; 1 bytes @ 0x0
  9501                           
  9502  0070                     ?_Audio_StopSound:	
  9503                           ; 1 bytes @ 0x0
  9504                           
  9505  0070                     ?_Audio_SelectSound:	
  9506                           ; 1 bytes @ 0x0
  9507                           
  9508  0070                     ?_Audio_SetPlayMode:	
  9509                           ; 1 bytes @ 0x0
  9510                           
  9511  0070                     ?_Audio_SetVolume:	
  9512                           ; 1 bytes @ 0x0
  9513                           
  9514  0070                     ?_Audio_GetValue:	
  9515                           ; 1 bytes @ 0x0
  9516                           
  9517  0070                     ?_main:	
  9518                           ; 1 bytes @ 0x0
  9519                           
  9520  0070                     ?_ISR:	
  9521                           ; 1 bytes @ 0x0
  9522                           
  9523  0070                     ?_OSCILLATOR_Initialize:	
  9524                           ; 1 bytes @ 0x0
  9525                           
  9526  0070                     ?_PIN_Initialize:	
  9527                           ; 1 bytes @ 0x0
  9528                           
  9529  0070                     ?_Led_TurnOnDirect:	
  9530                           ; 1 bytes @ 0x0
  9531                           
  9532  0070                     ??_Led_TurnOnDirect:	
  9533                           ; 1 bytes @ 0x0
  9534                           
  9535  0070                     ?_Led_TurnOffDirect:	
  9536                           ; 1 bytes @ 0x0
  9537                           
  9538  0070                     ??_Led_TurnOffDirect:	
  9539                           ; 1 bytes @ 0x0
  9540                           
  9541  0070                     ?_Led_Ramp:	
  9542                           ; 1 bytes @ 0x0
  9543                           
  9544  0070                     ?_Led_StartNotice:	
  9545                           ; 1 bytes @ 0x0
  9546                           
  9547  0070                     ?_Led_RunMusic:	
  9548                           ; 1 bytes @ 0x0
  9549                           
  9550  0070                     ?_IR_GetIndex:	
  9551                           ; 1 bytes @ 0x0
  9552                           
  9553  0070                     ?_IR_GetKeyType:	
  9554                           ; 1 bytes @ 0x0
  9555                           
  9556  0070                     ??_IR_GetKeyType:	
  9557                           ; 1 bytes @ 0x0
  9558                           
  9559  0070                     ?_IR_ExitSet:	
  9560                           ; 1 bytes @ 0x0
  9561                           
  9562  0070                     ?_IR_ExitTimeout:	
  9563                           ; 1 bytes @ 0x0
  9564                           
  9565  0070                     ?_IR_KeyAction:	
  9566                           ; 1 bytes @ 0x0
  9567                           
  9568  0070                     ?i1_EUSART_Write:	
  9569                           ; 1 bytes @ 0x0
  9570                           
  9571  0070                     ??i1_EUSART_Write:	
  9572                           ; 1 bytes @ 0x0
  9573                           
  9574  0070                     ?i1_PWM1_LoadDutyValue:	
  9575                           ; 1 bytes @ 0x0
  9576                           
  9577  0070                     ?i1_PWM2_LoadDutyValue:	
  9578                           ; 1 bytes @ 0x0
  9579                           
  9580  0070                     ?i1_PWM3_LoadDutyValue:	
  9581                           ; 1 bytes @ 0x0
  9582                           
  9583  0070                     ?i1_PWM4_LoadDutyValue:	
  9584                           ; 1 bytes @ 0x0
  9585                           
  9586  0070                     ?i1_PWM5_LoadDutyValue:	
  9587                           ; 1 bytes @ 0x0
  9588                           
  9589  0070                     ?i1_TMR2_DisableInterrupt:	
  9590                           ; 1 bytes @ 0x0
  9591                           
  9592  0070                     ??i1_TMR2_DisableInterrupt:	
  9593                           ; 1 bytes @ 0x0
  9594                           
  9595  0070                     ?i1_TMR2_EnableInterrupt:	
  9596                           ; 1 bytes @ 0x0
  9597                           
  9598  0070                     ??i1_TMR2_EnableInterrupt:	
  9599                           ; 1 bytes @ 0x0
  9600                           
  9601  0070                     ?i1_TMR4_StartTimer:	
  9602                           ; 1 bytes @ 0x0
  9603                           
  9604  0070                     ??i1_TMR4_StartTimer:	
  9605                           ; 1 bytes @ 0x0
  9606                           
  9607  0070                     ?i1_Led_UpdateBright:	
  9608                           ; 1 bytes @ 0x0
  9609                           
  9610  0070                     ?i1_Led_StartNotice:	
  9611                           ; 1 bytes @ 0x0
  9612                           
  9613  0070                     ??i1_Led_StartNotice:	
  9614                           ; 1 bytes @ 0x0
  9615                           
  9616  0070                     ?i1_IR_GetIndex:	
  9617                           ; 1 bytes @ 0x0
  9618                           
  9619  0070                     ??i1_IR_GetIndex:	
  9620                           ; 1 bytes @ 0x0
  9621                           
  9622  0070                     ?i1_Util_IncValue:	
  9623                           ; 1 bytes @ 0x0
  9624                           
  9625  0070                     ?i1_Util_DecValue:	
  9626                           ; 1 bytes @ 0x0
  9627                           
  9628  0070                     ?i1___bmul:	
  9629                           ; 1 bytes @ 0x0
  9630                           
  9631  0070                     ?i1___wmul:	
  9632                           ; 1 bytes @ 0x0
  9633                           
  9634  0070                     i1EUSART_Write@byte:	
  9635                           ; 2 bytes @ 0x0
  9636                           
  9637  0070                     i1IR_GetIndex@idx:	
  9638                           ; 1 bytes @ 0x0
  9639                           
  9640  0070                     i1___bmul@multiplicand:	
  9641                           ; 1 bytes @ 0x0
  9642                           
  9643  0070                     i1PWM1_LoadDutyValue@dutyValue:	
  9644                           ; 1 bytes @ 0x0
  9645                           
  9646  0070                     i1PWM2_LoadDutyValue@dutyValue:	
  9647                           ; 2 bytes @ 0x0
  9648                           
  9649  0070                     i1PWM3_LoadDutyValue@dutyValue:	
  9650                           ; 2 bytes @ 0x0
  9651                           
  9652  0070                     i1PWM4_LoadDutyValue@dutyValue:	
  9653                           ; 2 bytes @ 0x0
  9654                           
  9655  0070                     i1PWM5_LoadDutyValue@dutyValue:	
  9656                           ; 2 bytes @ 0x0
  9657                           
  9658  0070                     i1Util_IncValue@pSrc:	
  9659                           ; 2 bytes @ 0x0
  9660                           
  9661  0070                     i1Util_DecValue@pSrc:	
  9662                           ; 2 bytes @ 0x0
  9663                           
  9664  0070                     i1___wmul@multiplier:	
  9665                           ; 2 bytes @ 0x0
  9666                           
  9667                           
  9668                           ; 2 bytes @ 0x0
  9669  0070                     	ds	1
  9670  0071                     ??_TMR4_ISR:	
  9671  0071                     ??_Audio_PlaySound:	
  9672                           ; 1 bytes @ 0x1
  9673                           
  9674  0071                     ??_Audio_SelectSound:	
  9675                           ; 1 bytes @ 0x1
  9676                           
  9677  0071                     ??i1___bmul:	
  9678                           ; 1 bytes @ 0x1
  9679                           
  9680  0071                     Audio_PlaySound@checksum:	
  9681                           ; 1 bytes @ 0x1
  9682                           
  9683  0071                     Audio_SelectSound@index:	
  9684                           ; 1 bytes @ 0x1
  9685                           
  9686  0071                     IR_GetKeyType@result:	
  9687                           ; 1 bytes @ 0x1
  9688                           
  9689  0071                     i1Led_StartNotice@cnt:	
  9690                           ; 1 bytes @ 0x1
  9691                           
  9692  0071                     i1IR_GetIndex@keynum:	
  9693                           ; 1 bytes @ 0x1
  9694                           
  9695  0071                     i1___bmul@multiplier:	
  9696                           ; 1 bytes @ 0x1
  9697                           
  9698                           
  9699                           ; 1 bytes @ 0x1
  9700  0071                     	ds	1
  9701  0072                     ??i1_PWM1_LoadDutyValue:	
  9702  0072                     ??i1_PWM2_LoadDutyValue:	
  9703                           ; 1 bytes @ 0x2
  9704                           
  9705  0072                     ??i1_PWM3_LoadDutyValue:	
  9706                           ; 1 bytes @ 0x2
  9707                           
  9708  0072                     ??i1_PWM4_LoadDutyValue:	
  9709                           ; 1 bytes @ 0x2
  9710                           
  9711  0072                     ??i1_PWM5_LoadDutyValue:	
  9712                           ; 1 bytes @ 0x2
  9713                           
  9714  0072                     Audio_SelectSound@checksum:	
  9715                           ; 1 bytes @ 0x2
  9716                           
  9717  0072                     IR_GetKeyType@keynum:	
  9718                           ; 1 bytes @ 0x2
  9719                           
  9720  0072                     i1___bmul@product:	
  9721                           ; 1 bytes @ 0x2
  9722                           
  9723  0072                     i1Util_IncValue@max:	
  9724                           ; 1 bytes @ 0x2
  9725                           
  9726  0072                     i1Util_DecValue@min:	
  9727                           ; 2 bytes @ 0x2
  9728                           
  9729  0072                     i1___wmul@multiplicand:	
  9730                           ; 2 bytes @ 0x2
  9731                           
  9732                           
  9733                           ; 2 bytes @ 0x2
  9734  0072                     	ds	1
  9735  0073                     ??_IR_Decode:	
  9736  0073                     ?_Led_SetCustom:	
  9737                           ; 1 bytes @ 0x3
  9738                           
  9739  0073                     Led_SetCustom@pValue:	
  9740                           ; 1 bytes @ 0x3
  9741                           
  9742                           
  9743                           ; 1 bytes @ 0x3
  9744  0073                     	ds	1
  9745  0074                     ??_Led_SetCustom:	
  9746  0074                     ??_Led_Ramp:	
  9747                           ; 1 bytes @ 0x4
  9748                           
  9749  0074                     ??i1_Led_UpdateBright:	
  9750                           ; 1 bytes @ 0x4
  9751                           
  9752  0074                     ??i1___wmul:	
  9753                           ; 1 bytes @ 0x4
  9754                           
  9755  0074                     i1Led_UpdateBright@i:	
  9756                           ; 1 bytes @ 0x4
  9757                           
  9758  0074                     i1Util_IncValue@delta:	
  9759                           ; 1 bytes @ 0x4
  9760                           
  9761  0074                     i1Util_DecValue@delta:	
  9762                           ; 2 bytes @ 0x4
  9763                           
  9764  0074                     i1___wmul@product:	
  9765                           ; 2 bytes @ 0x4
  9766                           
  9767                           
  9768                           ; 2 bytes @ 0x4
  9769  0074                     	ds	2
  9770  0076                     ?_Led_DynamicWave:	
  9771  0076                     ?_Led_DynamicMoon:	
  9772                           ; 1 bytes @ 0x6
  9773                           
  9774  0076                     ?_Led_DynamicCloud:	
  9775                           ; 1 bytes @ 0x6
  9776                           
  9777  0076                     ?_Led_DynamicStorm:	
  9778                           ; 1 bytes @ 0x6
  9779                           
  9780  0076                     ??i1_Util_IncValue:	
  9781                           ; 1 bytes @ 0x6
  9782                           
  9783  0076                     ??i1_Util_DecValue:	
  9784                           ; 1 bytes @ 0x6
  9785                           
  9786  0076                     Led_DynamicWave@ptp:	
  9787                           ; 1 bytes @ 0x6
  9788                           
  9789  0076                     Led_DynamicMoon@ptp:	
  9790                           ; 2 bytes @ 0x6
  9791                           
  9792  0076                     Led_DynamicCloud@ptp:	
  9793                           ; 2 bytes @ 0x6
  9794                           
  9795  0076                     Led_DynamicStorm@ptp:	
  9796                           ; 2 bytes @ 0x6
  9797                           
  9798                           
  9799                           ; 2 bytes @ 0x6
  9800  0076                     	ds	1
  9801  0077                     Led_SetCustom@idx:	
  9802  0077                     IR_Decode@revKeyNum:	
  9803                           ; 1 bytes @ 0x7
  9804                           
  9805                           
  9806                           ; 1 bytes @ 0x7
  9807  0077                     	ds	1
  9808  0078                     ??_Led_DynamicWave:	
  9809  0078                     ??_Led_DynamicMoon:	
  9810                           ; 1 bytes @ 0x8
  9811                           
  9812  0078                     ??_Led_DynamicCloud:	
  9813                           ; 1 bytes @ 0x8
  9814                           
  9815  0078                     ??_Led_DynamicStorm:	
  9816                           ; 1 bytes @ 0x8
  9817                           
  9818  0078                     IR_Decode@type:	
  9819                           ; 1 bytes @ 0x8
  9820                           
  9821  0078                     Led_SetCustom@value:	
  9822                           ; 1 bytes @ 0x8
  9823                           
  9824                           
  9825                           ; 2 bytes @ 0x8
  9826  0078                     	ds	1
  9827  0079                     IR_Decode@keyNum:	
  9828                           
  9829                           ; 1 bytes @ 0x9
  9830  0079                     	ds	1
  9831  007A                     Led_SetCustom@i:	
  9832  007A                     Led_Ramp@i:	
  9833                           ; 1 bytes @ 0xA
  9834                           
  9835  007A                     IR_Decode@hVal:	
  9836                           ; 1 bytes @ 0xA
  9837                           
  9838                           
  9839                           ; 2 bytes @ 0xA
  9840  007A                     	ds	1
  9841  007B                     ??_IR_ScanLongPress:	
  9842  007B                     IR_ScanLongPress@i:	
  9843                           ; 1 bytes @ 0xB
  9844                           
  9845                           
  9846                           ; 1 bytes @ 0xB
  9847  007B                     	ds	1
  9848  007C                     ??_TMR1_GATE_ISR:	
  9849  007C                     ??_Led_RunMusic:	
  9850                           ; 1 bytes @ 0xC
  9851                           
  9852  007C                     IR_ScanLongPress@i_1415:	
  9853                           ; 1 bytes @ 0xC
  9854                           
  9855                           
  9856                           ; 1 bytes @ 0xC
  9857  007C                     	ds	1
  9858  007D                     IR_ScanLongPress@idx:	
  9859                           
  9860                           ; 1 bytes @ 0xD
  9861  007D                     	ds	1
  9862  007E                     ??_TMR2_ISR:	
  9863  007E                     ??_ISR:	
  9864                           ; 1 bytes @ 0xE
  9865                           
  9866                           
  9867                           	psect	cstackBANK0
  9868  0040                     __pcstackBANK0:	
  9869                           ; 1 bytes @ 0xE
  9870                           
  9871  0040                     Led_DynamicWave@duty:	
  9872  0040                     Led_DynamicMoon@duty:	
  9873                           ; 10 bytes @ 0x0
  9874                           
  9875  0040                     Led_DynamicCloud@duty:	
  9876                           ; 10 bytes @ 0x0
  9877                           
  9878  0040                     Led_DynamicStorm@duty:	
  9879                           ; 10 bytes @ 0x0
  9880                           
  9881                           
  9882                           ; 10 bytes @ 0x0
  9883  0040                     	ds	10
  9884  004A                     Led_DynamicWave@val:	
  9885  004A                     Led_DynamicMoon@val:	
  9886                           ; 2 bytes @ 0xA
  9887                           
  9888  004A                     Led_DynamicCloud@val:	
  9889                           ; 2 bytes @ 0xA
  9890                           
  9891  004A                     Led_DynamicStorm@val:	
  9892                           ; 2 bytes @ 0xA
  9893                           
  9894                           
  9895                           ; 2 bytes @ 0xA
  9896  004A                     	ds	2
  9897  004C                     Led_DynamicWave@i:	
  9898  004C                     Led_DynamicMoon@i:	
  9899                           ; 1 bytes @ 0xC
  9900                           
  9901  004C                     Led_DynamicCloud@i:	
  9902                           ; 1 bytes @ 0xC
  9903                           
  9904  004C                     Led_DynamicStorm@i:	
  9905                           ; 1 bytes @ 0xC
  9906                           
  9907                           
  9908                           ; 1 bytes @ 0xC
  9909  004C                     	ds	1
  9910  004D                     ??_Led_Run:	
  9911                           
  9912                           ; 1 bytes @ 0xD
  9913  004D                     	ds	1
  9914  004E                     ??_IR_ResetIfTMR1Overflow:	
  9915  004E                     ??_RTC_HourReady:	
  9916                           ; 1 bytes @ 0xE
  9917                           
  9918  004E                     ??_RTC_MinuteReady:	
  9919                           ; 1 bytes @ 0xE
  9920                           
  9921  004E                     ??_RTC_SecondReady:	
  9922                           ; 1 bytes @ 0xE
  9923                           
  9924  004E                     ??_RTC_GetTime:	
  9925                           ; 1 bytes @ 0xE
  9926                           
  9927  004E                     ??_Led_TurnOffRamp:	
  9928                           ; 1 bytes @ 0xE
  9929                           
  9930  004E                     ??_Led_TurnOnRamp:	
  9931                           ; 1 bytes @ 0xE
  9932                           
  9933  004E                     ?_Util_IncValue:	
  9934                           ; 1 bytes @ 0xE
  9935                           
  9936  004E                     ?_Util_DecValue:	
  9937                           ; 1 bytes @ 0xE
  9938                           
  9939  004E                     ??_ADC_Initialize_Default:	
  9940                           ; 1 bytes @ 0xE
  9941                           
  9942  004E                     ?_DATAEE_WriteByte:	
  9943                           ; 1 bytes @ 0xE
  9944                           
  9945  004E                     ?_DATAEE_ReadByte:	
  9946                           ; 1 bytes @ 0xE
  9947                           
  9948  004E                     ??_EUSART_Initialize_Default:	
  9949                           ; 1 bytes @ 0xE
  9950                           
  9951  004E                     ??_EUSART_Write:	
  9952                           ; 1 bytes @ 0xE
  9953                           
  9954  004E                     ??_PWM1_Initialize:	
  9955                           ; 1 bytes @ 0xE
  9956                           
  9957  004E                     ?_PWM1_LoadDutyValue:	
  9958                           ; 1 bytes @ 0xE
  9959                           
  9960  004E                     ??_PWM2_Initialize:	
  9961                           ; 1 bytes @ 0xE
  9962                           
  9963  004E                     ?_PWM2_LoadDutyValue:	
  9964                           ; 1 bytes @ 0xE
  9965                           
  9966  004E                     ??_PWM3_Initialize:	
  9967                           ; 1 bytes @ 0xE
  9968                           
  9969  004E                     ?_PWM3_LoadDutyValue:	
  9970                           ; 1 bytes @ 0xE
  9971                           
  9972  004E                     ??_PWM4_Initialize:	
  9973                           ; 1 bytes @ 0xE
  9974                           
  9975  004E                     ?_PWM4_LoadDutyValue:	
  9976                           ; 1 bytes @ 0xE
  9977                           
  9978  004E                     ??_PWM5_Initialize:	
  9979                           ; 1 bytes @ 0xE
  9980                           
  9981  004E                     ?_PWM5_LoadDutyValue:	
  9982                           ; 1 bytes @ 0xE
  9983                           
  9984  004E                     ??_TMR0_Initialize_Default:	
  9985                           ; 1 bytes @ 0xE
  9986                           
  9987  004E                     ??_TMR0_StartTimer:	
  9988                           ; 1 bytes @ 0xE
  9989                           
  9990  004E                     ?_TMR0_SetInterruptHandler:	
  9991                           ; 1 bytes @ 0xE
  9992                           
  9993  004E                     ??_TMR1_Initialize_Default:	
  9994                           ; 1 bytes @ 0xE
  9995                           
  9996  004E                     ??_TMR1_StartTimer:	
  9997                           ; 1 bytes @ 0xE
  9998                           
  9999  004E                     ??_TMR1_StopTimer:	
 10000                           ; 1 bytes @ 0xE
 10001                           
 10002  004E                     ?_TMR1_Gate_SetInterruptHandler:	
 10003                           ; 1 bytes @ 0xE
 10004                           
 10005  004E                     ??_TMR2_Initialize_Default:	
 10006                           ; 1 bytes @ 0xE
 10007                           
 10008  004E                     ??_TMR2_StartTimer:	
 10009                           ; 1 bytes @ 0xE
 10010                           
 10011  004E                     ?_TMR2_SetInterruptHandler:	
 10012                           ; 1 bytes @ 0xE
 10013                           
 10014  004E                     ??_TMR2_DisableInterrupt:	
 10015                           ; 1 bytes @ 0xE
 10016                           
 10017  004E                     ??_TMR2_EnableInterrupt:	
 10018                           ; 1 bytes @ 0xE
 10019                           
 10020  004E                     ??_TMR4_Initialize_Default:	
 10021                           ; 1 bytes @ 0xE
 10022                           
 10023  004E                     ??_TMR4_StartTimer:	
 10024                           ; 1 bytes @ 0xE
 10025                           
 10026  004E                     ?_TMR4_SetInterruptHandler:	
 10027                           ; 1 bytes @ 0xE
 10028                           
 10029  004E                     ??_OSCILLATOR_Initialize:	
 10030                           ; 1 bytes @ 0xE
 10031                           
 10032  004E                     ??_PIN_Initialize:	
 10033                           ; 1 bytes @ 0xE
 10034                           
 10035  004E                     ??_Led_StartNotice:	
 10036                           ; 1 bytes @ 0xE
 10037                           
 10038  004E                     ??_IR_GetIndex:	
 10039                           ; 1 bytes @ 0xE
 10040                           
 10041  004E                     ?___bmul:	
 10042                           ; 1 bytes @ 0xE
 10043                           
 10044  004E                     ?_ADC_Conversion:	
 10045                           ; 1 bytes @ 0xE
 10046                           
 10047  004E                     ?___wmul:	
 10048                           ; 2 bytes @ 0xE
 10049                           
 10050  004E                     EUSART_Write@byte:	
 10051                           ; 2 bytes @ 0xE
 10052                           
 10053  004E                     PIN_Initialize@state:	
 10054                           ; 1 bytes @ 0xE
 10055                           
 10056  004E                     Led_TurnOnRamp@i:	
 10057                           ; 1 bytes @ 0xE
 10058                           
 10059  004E                     Led_TurnOffRamp@i:	
 10060                           ; 1 bytes @ 0xE
 10061                           
 10062  004E                     IR_GetIndex@idx:	
 10063                           ; 1 bytes @ 0xE
 10064                           
 10065  004E                     ___bmul@multiplicand:	
 10066                           ; 1 bytes @ 0xE
 10067                           
 10068  004E                     DATAEE_WriteByte@addr:	
 10069                           ; 1 bytes @ 0xE
 10070                           
 10071  004E                     DATAEE_ReadByte@addr:	
 10072                           ; 2 bytes @ 0xE
 10073                           
 10074  004E                     PWM1_LoadDutyValue@dutyValue:	
 10075                           ; 2 bytes @ 0xE
 10076                           
 10077  004E                     PWM2_LoadDutyValue@dutyValue:	
 10078                           ; 2 bytes @ 0xE
 10079                           
 10080  004E                     PWM3_LoadDutyValue@dutyValue:	
 10081                           ; 2 bytes @ 0xE
 10082                           
 10083  004E                     PWM4_LoadDutyValue@dutyValue:	
 10084                           ; 2 bytes @ 0xE
 10085                           
 10086  004E                     PWM5_LoadDutyValue@dutyValue:	
 10087                           ; 2 bytes @ 0xE
 10088                           
 10089  004E                     TMR0_SetInterruptHandler@handler:	
 10090                           ; 2 bytes @ 0xE
 10091                           
 10092  004E                     TMR1_Gate_SetInterruptHandler@handler:	
 10093                           ; 2 bytes @ 0xE
 10094                           
 10095  004E                     TMR2_SetInterruptHandler@handler:	
 10096                           ; 2 bytes @ 0xE
 10097                           
 10098  004E                     TMR4_SetInterruptHandler@handler:	
 10099                           ; 2 bytes @ 0xE
 10100                           
 10101  004E                     Util_IncValue@pSrc:	
 10102                           ; 2 bytes @ 0xE
 10103                           
 10104  004E                     Util_DecValue@pSrc:	
 10105                           ; 2 bytes @ 0xE
 10106                           
 10107  004E                     ___wmul@multiplier:	
 10108                           ; 2 bytes @ 0xE
 10109                           
 10110                           
 10111                           ; 2 bytes @ 0xE
 10112  004E                     	ds	1
 10113  004F                     ??_SYSTEM_Initialize:	
 10114  004F                     ??_Audio_StopSound:	
 10115                           ; 1 bytes @ 0xF
 10116                           
 10117  004F                     ??_Audio_SetPlayMode:	
 10118                           ; 1 bytes @ 0xF
 10119                           
 10120  004F                     ??_Audio_SetVolume:	
 10121                           ; 1 bytes @ 0xF
 10122                           
 10123  004F                     ??___bmul:	
 10124                           ; 1 bytes @ 0xF
 10125                           
 10126  004F                     Audio_StopSound@checksum:	
 10127                           ; 1 bytes @ 0xF
 10128                           
 10129  004F                     Audio_SetPlayMode@type:	
 10130                           ; 1 bytes @ 0xF
 10131                           
 10132  004F                     Audio_SetVolume@vol:	
 10133                           ; 1 bytes @ 0xF
 10134                           
 10135  004F                     Led_StartNotice@cnt:	
 10136                           ; 1 bytes @ 0xF
 10137                           
 10138  004F                     IR_GetIndex@keynum:	
 10139                           ; 1 bytes @ 0xF
 10140                           
 10141  004F                     ___bmul@product:	
 10142                           ; 1 bytes @ 0xF
 10143                           
 10144                           
 10145                           ; 1 bytes @ 0xF
 10146  004F                     	ds	1
 10147  0050                     ??_Interrupt_Initialize:	
 10148  0050                     ??_ADC_Conversion:	
 10149                           ; 1 bytes @ 0x10
 10150                           
 10151  0050                     ??_DATAEE_ReadByte:	
 10152                           ; 1 bytes @ 0x10
 10153                           
 10154  0050                     ?_DATAEE_ReadBuffer:	
 10155                           ; 1 bytes @ 0x10
 10156                           
 10157  0050                     ??_PWM1_LoadDutyValue:	
 10158                           ; 1 bytes @ 0x10
 10159                           
 10160  0050                     ??_PWM2_LoadDutyValue:	
 10161                           ; 1 bytes @ 0x10
 10162                           
 10163  0050                     ??_PWM3_LoadDutyValue:	
 10164                           ; 1 bytes @ 0x10
 10165                           
 10166  0050                     ??_PWM4_LoadDutyValue:	
 10167                           ; 1 bytes @ 0x10
 10168                           
 10169  0050                     ??_PWM5_LoadDutyValue:	
 10170                           ; 1 bytes @ 0x10
 10171                           
 10172  0050                     ??_TMR0_SetInterruptHandler:	
 10173                           ; 1 bytes @ 0x10
 10174                           
 10175  0050                     ??_TMR1_Gate_SetInterruptHandler:	
 10176                           ; 1 bytes @ 0x10
 10177                           
 10178  0050                     ??_TMR2_SetInterruptHandler:	
 10179                           ; 1 bytes @ 0x10
 10180                           
 10181  0050                     ??_TMR4_SetInterruptHandler:	
 10182                           ; 1 bytes @ 0x10
 10183                           
 10184  0050                     DATAEE_WriteByte@byte:	
 10185                           ; 1 bytes @ 0x10
 10186                           
 10187  0050                     Audio_SetPlayMode@checksum:	
 10188                           ; 1 bytes @ 0x10
 10189                           
 10190  0050                     Audio_SetVolume@checksum:	
 10191                           ; 1 bytes @ 0x10
 10192                           
 10193  0050                     ___bmul@multiplier:	
 10194                           ; 1 bytes @ 0x10
 10195                           
 10196  0050                     DATAEE_ReadBuffer@addr:	
 10197                           ; 1 bytes @ 0x10
 10198                           
 10199  0050                     Util_IncValue@max:	
 10200                           ; 2 bytes @ 0x10
 10201                           
 10202  0050                     Util_DecValue@min:	
 10203                           ; 2 bytes @ 0x10
 10204                           
 10205  0050                     ___wmul@multiplicand:	
 10206                           ; 2 bytes @ 0x10
 10207                           
 10208                           
 10209                           ; 2 bytes @ 0x10
 10210  0050                     	ds	1
 10211  0051                     ??_DATAEE_WriteByte:	
 10212  0051                     ?_IR_IsValidTime:	
 10213                           ; 1 bytes @ 0x11
 10214                           
 10215  0051                     ADC_Conversion@chn:	
 10216                           ; 1 bytes @ 0x11
 10217                           
 10218  0051                     DATAEE_WriteByte@GIEBitValue:	
 10219                           ; 1 bytes @ 0x11
 10220                           
 10221  0051                     IR_IsValidTime@len:	
 10222                           ; 1 bytes @ 0x11
 10223                           
 10224                           
 10225                           ; 1 bytes @ 0x11
 10226  0051                     	ds	1
 10227  0052                     ??_Led_UpdateBright:	
 10228  0052                     ?_DATAEE_WriteBuffer:	
 10229                           ; 1 bytes @ 0x12
 10230                           
 10231  0052                     ??_IR_IsValidTime:	
 10232                           ; 1 bytes @ 0x12
 10233                           
 10234  0052                     ??___wmul:	
 10235                           ; 1 bytes @ 0x12
 10236                           
 10237  0052                     DATAEE_ReadBuffer@buf:	
 10238                           ; 1 bytes @ 0x12
 10239                           
 10240  0052                     Led_UpdateBright@i:	
 10241                           ; 1 bytes @ 0x12
 10242                           
 10243  0052                     IR_IsValidTime@min:	
 10244                           ; 1 bytes @ 0x12
 10245                           
 10246  0052                     DATAEE_WriteBuffer@addr:	
 10247                           ; 1 bytes @ 0x12
 10248                           
 10249  0052                     Util_IncValue@delta:	
 10250                           ; 2 bytes @ 0x12
 10251                           
 10252  0052                     Util_DecValue@delta:	
 10253                           ; 2 bytes @ 0x12
 10254                           
 10255  0052                     ___wmul@product:	
 10256                           ; 2 bytes @ 0x12
 10257                           
 10258                           
 10259                           ; 2 bytes @ 0x12
 10260  0052                     	ds	1
 10261  0053                     DATAEE_ReadBuffer@len:	
 10262  0053                     IR_IsValidTime@result:	
 10263                           ; 1 bytes @ 0x13
 10264                           
 10265                           
 10266                           ; 1 bytes @ 0x13
 10267  0053                     	ds	1
 10268  0054                     ??_Led_Initialize:	
 10269  0054                     ??_Led_CheckAutoStatus:	
 10270                           ; 1 bytes @ 0x14
 10271                           
 10272  0054                     ??_Util_IncValue:	
 10273                           ; 1 bytes @ 0x14
 10274                           
 10275  0054                     ??_Util_DecValue:	
 10276                           ; 1 bytes @ 0x14
 10277                           
 10278  0054                     ??_DATAEE_ReadBuffer:	
 10279                           ; 1 bytes @ 0x14
 10280                           
 10281  0054                     ??_Audio_GetValue:	
 10282                           ; 1 bytes @ 0x14
 10283                           
 10284  0054                     DATAEE_WriteBuffer@buf:	
 10285                           ; 1 bytes @ 0x14
 10286                           
 10287  0054                     DATAEE_ReadBuffer@i:	
 10288                           ; 1 bytes @ 0x14
 10289                           
 10290  0054                     IR_IsValidTime@hour:	
 10291                           ; 1 bytes @ 0x14
 10292                           
 10293                           
 10294                           ; 1 bytes @ 0x14
 10295  0054                     	ds	1
 10296  0055                     ??_Led_InitPara:	
 10297  0055                     DATAEE_WriteBuffer@len:	
 10298                           ; 1 bytes @ 0x15
 10299                           
 10300  0055                     IR_IsValidTime@tm:	
 10301                           ; 1 bytes @ 0x15
 10302                           
 10303  0055                     Led_CheckAutoStatus@sunrise:	
 10304                           ; 1 bytes @ 0x15
 10305                           
 10306                           
 10307                           ; 2 bytes @ 0x15
 10308  0055                     	ds	1
 10309  0056                     ??_DATAEE_WriteBuffer:	
 10310  0056                     DATAEE_WriteBuffer@i:	
 10311                           ; 1 bytes @ 0x16
 10312                           
 10313  0056                     _Led_Initialize$1200:	
 10314                           ; 1 bytes @ 0x16
 10315                           
 10316                           
 10317                           ; 2 bytes @ 0x16
 10318  0056                     	ds	1
 10319  0057                     ??_Led_SaveParaIfChanged:	
 10320  0057                     Led_CheckAutoStatus@sunset:	
 10321                           ; 1 bytes @ 0x17
 10322                           
 10323                           
 10324                           ; 2 bytes @ 0x17
 10325  0057                     	ds	1
 10326  0058                     ??_Led_AutoRun:	
 10327  0058                     Led_Initialize@result:	
 10328                           ; 1 bytes @ 0x18
 10329                           
 10330  0058                     Audio_GetValue@value:	
 10331                           ; 1 bytes @ 0x18
 10332                           
 10333                           
 10334                           ; 2 bytes @ 0x18
 10335  0058                     	ds	1
 10336  0059                     Led_Initialize@ct:	
 10337  0059                     Led_CheckAutoStatus@ct:	
 10338                           ; 2 bytes @ 0x19
 10339                           
 10340                           
 10341                           ; 2 bytes @ 0x19
 10342  0059                     	ds	1
 10343  005A                     Led_InitPara@j:	
 10344                           
 10345                           ; 1 bytes @ 0x1A
 10346  005A                     	ds	1
 10347  005B                     Led_InitPara@i:	
 10348  005B                     Led_Initialize@i:	
 10349                           ; 1 bytes @ 0x1B
 10350                           
 10351  005B                     Led_CheckAutoStatus@i_1230:	
 10352                           ; 1 bytes @ 0x1B
 10353                           
 10354                           
 10355                           ; 1 bytes @ 0x1B
 10356  005B                     	ds	1
 10357  005C                     ??_IR_KeyAtionIfPressed:	
 10358  005C                     ??_IR_UpdateSetStatus:	
 10359                           ; 1 bytes @ 0x1C
 10360                           
 10361  005C                     ??_IR_ExitSet:	
 10362                           ; 1 bytes @ 0x1C
 10363                           
 10364  005C                     ??_IR_ExitTimeout:	
 10365                           ; 1 bytes @ 0x1C
 10366                           
 10367  005C                     Led_CheckAutoStatus@i_1231:	
 10368                           ; 1 bytes @ 0x1C
 10369                           
 10370  005C                     Led_AutoRun@i:	
 10371                           ; 1 bytes @ 0x1C
 10372                           
 10373                           
 10374                           ; 1 bytes @ 0x1C
 10375  005C                     	ds	1
 10376  005D                     Led_CheckAutoStatus@i:	
 10377                           
 10378                           ; 1 bytes @ 0x1D
 10379  005D                     	ds	1
 10380  005E                     ??_main:	
 10381                           
 10382                           	psect	text3
 10383  170F                     __ptext3:	
 10384 ;; *************** function _SYSTEM_Initialize *****************
 10385 ;; Defined at:
 10386 ;;		line 143 in file "user/src/main.c"
 10387 ;; Parameters:    Size  Location     Type
 10388 ;;		None
 10389 ;; Auto vars:     Size  Location     Type
 10390 ;;		None
 10391 ;; Return value:  Size  Location     Type
 10392 ;;                  1    wreg      void 
 10393 ;; Registers used:
 10394 ;;		wreg, status,2, status,0, pclath, cstack
 10395 ;; Tracked objects:
 10396 ;;		On entry : B1F/0
 10397 ;;		On exit  : 1F/1
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;Total ram usage:        0 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; Hardware stack levels required when called:    8
 10407 ;; This function calls:
 10408 ;;		_ADC_Initialize_Default
 10409 ;;		_EUSART_Initialize_Default
 10410 ;;		_OSCILLATOR_Initialize
 10411 ;;		_PIN_Initialize
 10412 ;;		_PWM1_Initialize
 10413 ;;		_PWM2_Initialize
 10414 ;;		_PWM3_Initialize
 10415 ;;		_PWM4_Initialize
 10416 ;;		_PWM5_Initialize
 10417 ;;		_TMR0_Initialize_Default
 10418 ;;		_TMR1_Initialize_Default
 10419 ;;		_TMR2_Initialize_Default
 10420 ;;		_TMR4_Initialize_Default
 10421 ;; This function is called by:
 10422 ;;		_main
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           
 10427                           ;psect for function _SYSTEM_Initialize
 10428  170F                     _SYSTEM_Initialize:	
 10429                           
 10430                           ;main.c: 144: PIN_Initialize();
 10431                           
 10432                           ;incstack = 0
 10433                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10434  170F  2732  3197         	fcall	_PIN_Initialize
 10435                           
 10436                           ;main.c: 145: OSCILLATOR_Initialize();
 10437  1711  2728  3197         	fcall	_OSCILLATOR_Initialize
 10438                           
 10439                           ;main.c: 146: TMR0_Initialize_Default();
 10440  1713  27AA  3197         	fcall	_TMR0_Initialize_Default
 10441                           
 10442                           ;main.c: 147: TMR1_Initialize_Default();
 10443  1715  27B5  3197         	fcall	_TMR1_Initialize_Default
 10444                           
 10445                           ;main.c: 148: TMR2_Initialize_Default();
 10446  1717  27C4  3197         	fcall	_TMR2_Initialize_Default
 10447                           
 10448                           ;main.c: 149: TMR4_Initialize_Default();
 10449  1719  27CE  3197         	fcall	_TMR4_Initialize_Default
 10450                           
 10451                           ;main.c: 150: PWM1_Initialize();
 10452  171B  277F  3197         	fcall	_PWM1_Initialize
 10453                           
 10454                           ;main.c: 151: PWM2_Initialize();
 10455  171D  2785  3197         	fcall	_PWM2_Initialize
 10456                           
 10457                           ;main.c: 152: PWM3_Initialize();
 10458  171F  278E  3197         	fcall	_PWM3_Initialize
 10459                           
 10460                           ;main.c: 153: PWM4_Initialize();
 10461  1721  2799  3197         	fcall	_PWM4_Initialize
 10462                           
 10463                           ;main.c: 154: PWM5_Initialize();
 10464  1723  27A4  3197         	fcall	_PWM5_Initialize
 10465                           
 10466                           ;main.c: 155: EUSART_Initialize_Default();
 10467  1725  27E1  3197         	fcall	_EUSART_Initialize_Default
 10468                           
 10469                           ;main.c: 156: ADC_Initialize_Default();
 10470  1727  2FD9               	ljmp	l4704
 10471  1728                     __end_of_SYSTEM_Initialize:	
 10472  1728                     __ptext14:	
 10473 ;; *************** function _OSCILLATOR_Initialize *****************
 10474 ;; Defined at:
 10475 ;;		line 88 in file "user/src/main.c"
 10476 ;; Parameters:    Size  Location     Type
 10477 ;;		None
 10478 ;; Auto vars:     Size  Location     Type
 10479 ;;		None
 10480 ;; Return value:  Size  Location     Type
 10481 ;;                  1    wreg      void 
 10482 ;; Registers used:
 10483 ;;		wreg, status,2
 10484 ;; Tracked objects:
 10485 ;;		On entry : 0/0
 10486 ;;		On exit  : 1F/12
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;Total ram usage:        0 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; Hardware stack levels required when called:    7
 10496 ;; This function calls:
 10497 ;;		Nothing
 10498 ;; This function is called by:
 10499 ;;		_SYSTEM_Initialize
 10500 ;; This function uses a non-reentrant model
 10501 ;;
 10502                           
 10503                           
 10504                           ;psect for function _OSCILLATOR_Initialize
 10505  1728                     _OSCILLATOR_Initialize:	
 10506                           
 10507                           ;main.c: 90: OSCCON1 = 0x60;
 10508                           
 10509                           ;incstack = 0
 10510                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10511  1728  3060               	movlw	96
 10512  1729  0032               	movlb	18	; select bank18
 10513  172A  0099               	movwf	25	;volatile
 10514                           
 10515                           ;main.c: 92: OSCCON3 = 0x00;
 10516  172B  019B               	clrf	27	;volatile
 10517                           
 10518                           ;main.c: 94: OSCEN = 0x48;
 10519  172C  3048               	movlw	72
 10520  172D  009D               	movwf	29	;volatile
 10521                           
 10522                           ;main.c: 96: OSCFRQ = 0x06;
 10523  172E  3006               	movlw	6
 10524  172F  009F               	movwf	31	;volatile
 10525                           
 10526                           ;main.c: 98: OSCTUNE = 0x00;
 10527  1730  019E               	clrf	30	;volatile
 10528  1731  0008               	return
 10529  1732                     __end_of_OSCILLATOR_Initialize:	
 10530  1732                     __ptext13:	
 10531 ;; *************** function _PIN_Initialize *****************
 10532 ;; Defined at:
 10533 ;;		line 101 in file "user/src/main.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;		None
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;  state           1   14[BANK0 ] unsigned char 
 10538 ;; Return value:  Size  Location     Type
 10539 ;;                  1    wreg      void 
 10540 ;; Registers used:
 10541 ;;		wreg, status,2, status,0
 10542 ;; Tracked objects:
 10543 ;;		On entry : B1F/0
 10544 ;;		On exit  : 0/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;Total ram usage:        1 bytes
 10552 ;; Hardware stack levels used:    1
 10553 ;; Hardware stack levels required when called:    7
 10554 ;; This function calls:
 10555 ;;		Nothing
 10556 ;; This function is called by:
 10557 ;;		_SYSTEM_Initialize
 10558 ;; This function uses a non-reentrant model
 10559 ;;
 10560                           
 10561                           
 10562                           ;psect for function _PIN_Initialize
 10563  1732                     _PIN_Initialize:	
 10564                           
 10565                           ;main.c: 102: LATA = 0x00;
 10566                           
 10567                           ;incstack = 0
 10568                           ; Regs used in _PIN_Initialize: [wreg+status,2+status,0]
 10569  1732  0022               	movlb	2	; select bank2
 10570  1733  018C               	clrf	12	;volatile
 10571                           
 10572                           ;main.c: 103: LATB = 0x80;
 10573  1734  3080               	movlw	128
 10574  1735  008D               	movwf	13	;volatile
 10575                           
 10576                           ;main.c: 104: LATC = 0x00;
 10577  1736  018E               	clrf	14	;volatile
 10578                           
 10579                           ;main.c: 106: TRISA = 0x30;
 10580  1737  3030               	movlw	48
 10581  1738  0021               	movlb	1	; select bank1
 10582  1739  008C               	movwf	12	;volatile
 10583                           
 10584                           ;main.c: 107: TRISB = 0x60;
 10585  173A  3060               	movlw	96
 10586  173B  008D               	movwf	13	;volatile
 10587                           
 10588                           ;main.c: 108: TRISC = 0x05;
 10589  173C  3005               	movlw	5
 10590  173D  008E               	movwf	14	;volatile
 10591                           
 10592                           ;main.c: 110: ANSELC = 0x04;
 10593  173E  3004               	movlw	4
 10594  173F  0023               	movlb	3	; select bank3
 10595  1740  008E               	movwf	14	;volatile
 10596                           
 10597                           ;main.c: 111: ANSELB = 0x00;
 10598  1741  018D               	clrf	13	;volatile
 10599                           
 10600                           ;main.c: 112: ANSELA = 0x00;
 10601  1742  018C               	clrf	12	;volatile
 10602                           
 10603                           ;main.c: 114: WPUB = 0x60;
 10604  1743  3060               	movlw	96
 10605  1744  0024               	movlb	4	; select bank4
 10606  1745  008D               	movwf	13	;volatile
 10607                           
 10608                           ;main.c: 115: WPUA = 0x00;
 10609  1746  018C               	clrf	12	;volatile
 10610                           
 10611                           ;main.c: 116: WPUC = 0x01;
 10612  1747  3001               	movlw	1
 10613  1748  008E               	movwf	14	;volatile
 10614                           
 10615                           ;main.c: 118: ODCONA = 0x00;
 10616  1749  0025               	movlb	5	; select bank5
 10617  174A  018C               	clrf	12	;volatile
 10618                           
 10619                           ;main.c: 119: ODCONB = 0x00;
 10620  174B  018D               	clrf	13	;volatile
 10621                           
 10622                           ;main.c: 120: ODCONC = 0x00;
 10623  174C  018E               	clrf	14	;volatile
 10624                           
 10625                           ;main.c: 122: uint8_t state = GIE;
 10626  174D  3000               	movlw	0
 10627  174E  1B8B               	btfsc	11,7	;volatile
 10628  174F  3001               	movlw	1
 10629  1750  0020               	movlb	0	; select bank0
 10630  1751  00CE               	movwf	PIN_Initialize@state
 10631                           
 10632                           ;main.c: 123: GIE = 0;
 10633  1752  138B               	bcf	11,7	;volatile
 10634                           
 10635                           ;main.c: 124: PPSLOCK = 0x55;
 10636                           
 10637                           ;main.c: 125: PPSLOCK = 0xAA;
 10638  1753  27FA  3197         	fcall	PL96	;call to abstracted procedure
 10639                           
 10640                           ;main.c: 126: PPSLOCKbits.PPSLOCKED = 0x00;
 10641  1755  100F               	bcf	15,0	;volatile
 10642                           
 10643                           ;main.c: 128: RC5PPSbits.RC5PPS = 0x0C;
 10644  1756  003D               	movlb	29	; select bank29
 10645  1757  0825               	movf	37,w	;volatile
 10646  1758  39E0               	andlw	-32
 10647  1759  380C               	iorlw	12
 10648  175A  00A5               	movwf	37	;volatile
 10649                           
 10650                           ;main.c: 129: RC3PPSbits.RC3PPS = 0x0D;
 10651  175B  0823               	movf	35,w	;volatile
 10652  175C  39E0               	andlw	-32
 10653  175D  380D               	iorlw	13
 10654  175E  00A3               	movwf	35	;volatile
 10655                           
 10656                           ;main.c: 130: RA2PPSbits.RA2PPS = 0x0E;
 10657  175F  0812               	movf	18,w	;volatile
 10658  1760  39E0               	andlw	-32
 10659  1761  380E               	iorlw	14
 10660  1762  0092               	movwf	18	;volatile
 10661                           
 10662                           ;main.c: 131: RC1PPSbits.RC1PPS = 0x0F;
 10663  1763  0821               	movf	33,w	;volatile
 10664  1764  39E0               	andlw	-32
 10665  1765  380F               	iorlw	15
 10666  1766  00A1               	movwf	33	;volatile
 10667                           
 10668                           ;main.c: 132: RC7PPSbits.RC7PPS = 0x02;
 10669  1767  0827               	movf	39,w	;volatile
 10670  1768  39E0               	andlw	-32
 10671  1769  3802               	iorlw	2
 10672  176A  00A7               	movwf	39	;volatile
 10673                           
 10674                           ;main.c: 133: T1GPPSbits.T1GPPS = 0x10;
 10675  176B  003C               	movlb	28	; select bank28
 10676  176C  0813               	movf	19,w	;volatile
 10677  176D  39E0               	andlw	-32
 10678  176E  3810               	iorlw	16
 10679  176F  0093               	movwf	19	;volatile
 10680                           
 10681                           ;main.c: 134: RB7PPSbits.RB7PPS = 0x14;
 10682  1770  003D               	movlb	29	; select bank29
 10683  1771  081F               	movf	31,w	;volatile
 10684  1772  39E0               	andlw	-32
 10685  1773  3814               	iorlw	20
 10686  1774  009F               	movwf	31	;volatile
 10687                           
 10688                           ;main.c: 136: PPSLOCK = 0x55;
 10689                           
 10690                           ;main.c: 137: PPSLOCK = 0xAA;
 10691  1775  27FA  3197         	fcall	PL96	;call to abstracted procedure
 10692                           
 10693                           ;main.c: 138: PPSLOCKbits.PPSLOCKED = 0x01;
 10694  1777  140F               	bsf	15,0	;volatile
 10695                           
 10696                           ;main.c: 140: GIE = state;
 10697  1778  0020               	movlb	0	; select bank0
 10698  1779  1C4E               	btfss	PIN_Initialize@state,0
 10699  177A  2F7D               	goto	u3480
 10700  177B  178B               	bsf	11,7	;volatile
 10701  177C  0008               	return
 10702  177D                     u3480:	
 10703  177D  138B               	bcf	11,7	;volatile
 10704  177E  0008               	return
 10705  177F                     __end_of_PIN_Initialize:	
 10706  177F                     __ptext12:	
 10707 ;; *************** function _PWM1_Initialize *****************
 10708 ;; Defined at:
 10709 ;;		line 6 in file "driver/src/pwm.c"
 10710 ;; Parameters:    Size  Location     Type
 10711 ;;		None
 10712 ;; Auto vars:     Size  Location     Type
 10713 ;;		None
 10714 ;; Return value:  Size  Location     Type
 10715 ;;                  1    wreg      void 
 10716 ;; Registers used:
 10717 ;;		wreg, status,2, status,0
 10718 ;; Tracked objects:
 10719 ;;		On entry : 1F/1
 10720 ;;		On exit  : 1F/5
 10721 ;;		Unchanged: 0/0
 10722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10727 ;;Total ram usage:        0 bytes
 10728 ;; Hardware stack levels used:    1
 10729 ;; Hardware stack levels required when called:    7
 10730 ;; This function calls:
 10731 ;;		Nothing
 10732 ;; This function is called by:
 10733 ;;		_SYSTEM_Initialize
 10734 ;; This function uses a non-reentrant model
 10735 ;;
 10736                           
 10737                           
 10738                           ;psect for function _PWM1_Initialize
 10739  177F                     _PWM1_Initialize:	
 10740                           
 10741                           ;pwm.c: 8: CCP1CON = 0x8F;
 10742                           
 10743                           ;incstack = 0
 10744                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 10745  177F  308F               	movlw	143
 10746  1780  0025               	movlb	5	; select bank5
 10747  1781  0093               	movwf	19	;volatile
 10748                           
 10749                           ;pwm.c: 9: CCPR1 = 0;
 10750  1782  0191               	clrf	17	;volatile
 10751  1783  0192               	clrf	18	;volatile
 10752                           
 10753                           ;pwm.c: 10: CCPTMRSbits.C1TSEL = 0x1;
 10754  1784  2FF5               	ljmp	PL90	;call to abstracted procedure
 10755  1785                     __end_of_PWM1_Initialize:	
 10756  1785                     __ptext11:	
 10757 ;; *************** function _PWM2_Initialize *****************
 10758 ;; Defined at:
 10759 ;;		line 18 in file "driver/src/pwm.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;		None
 10762 ;; Auto vars:     Size  Location     Type
 10763 ;;		None
 10764 ;; Return value:  Size  Location     Type
 10765 ;;                  1    wreg      void 
 10766 ;; Registers used:
 10767 ;;		wreg, status,2, status,0
 10768 ;; Tracked objects:
 10769 ;;		On entry : 1F/5
 10770 ;;		On exit  : 1F/5
 10771 ;;		Unchanged: 0/0
 10772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;Total ram usage:        0 bytes
 10778 ;; Hardware stack levels used:    1
 10779 ;; Hardware stack levels required when called:    7
 10780 ;; This function calls:
 10781 ;;		Nothing
 10782 ;; This function is called by:
 10783 ;;		_SYSTEM_Initialize
 10784 ;; This function uses a non-reentrant model
 10785 ;;
 10786                           
 10787                           
 10788                           ;psect for function _PWM2_Initialize
 10789  1785                     _PWM2_Initialize:	
 10790                           
 10791                           ;pwm.c: 20: CCP2CON = 0x8F;
 10792                           
 10793                           ;incstack = 0
 10794                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
 10795  1785  308F               	movlw	143
 10796  1786  0097               	movwf	23	;volatile
 10797                           
 10798                           ;pwm.c: 21: CCPR2 = 0;
 10799  1787  0195               	clrf	21	;volatile
 10800  1788  0196               	clrf	22	;volatile
 10801                           
 10802                           ;pwm.c: 22: CCPTMRSbits.C2TSEL = 0x1;
 10803  1789  081F               	movf	31,w	;volatile
 10804  178A  39F3               	andlw	-13
 10805  178B  3804               	iorlw	4
 10806  178C  009F               	movwf	31	;volatile
 10807  178D  0008               	return
 10808  178E                     __end_of_PWM2_Initialize:	
 10809  178E                     __ptext10:	
 10810 ;; *************** function _PWM3_Initialize *****************
 10811 ;; Defined at:
 10812 ;;		line 30 in file "driver/src/pwm.c"
 10813 ;; Parameters:    Size  Location     Type
 10814 ;;		None
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;		None
 10817 ;; Return value:  Size  Location     Type
 10818 ;;                  1    wreg      void 
 10819 ;; Registers used:
 10820 ;;		wreg, status,2, status,0
 10821 ;; Tracked objects:
 10822 ;;		On entry : 1F/5
 10823 ;;		On exit  : 1F/5
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;Total ram usage:        0 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; Hardware stack levels required when called:    7
 10833 ;; This function calls:
 10834 ;;		Nothing
 10835 ;; This function is called by:
 10836 ;;		_SYSTEM_Initialize
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           
 10841                           ;psect for function _PWM3_Initialize
 10842  178E                     _PWM3_Initialize:	
 10843                           
 10844                           ;pwm.c: 32: CCP3CON = 0x8F;
 10845                           
 10846                           ;incstack = 0
 10847                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
 10848  178E  308F               	movlw	143
 10849  178F  0026               	movlb	6	; select bank6
 10850  1790  0093               	movwf	19	;volatile
 10851                           
 10852                           ;pwm.c: 33: CCPR3 = 0;
 10853  1791  0191               	clrf	17	;volatile
 10854  1792  0192               	clrf	18	;volatile
 10855                           
 10856                           ;pwm.c: 34: CCPTMRSbits.C3TSEL = 0x1;
 10857  1793  0025               	movlb	5	; select bank5
 10858  1794  081F               	movf	31,w	;volatile
 10859  1795  39CF               	andlw	-49
 10860  1796  3810               	iorlw	16
 10861  1797  009F               	movwf	31	;volatile
 10862  1798  0008               	return
 10863  1799                     __end_of_PWM3_Initialize:	
 10864  1799                     __ptext9:	
 10865 ;; *************** function _PWM4_Initialize *****************
 10866 ;; Defined at:
 10867 ;;		line 42 in file "driver/src/pwm.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;		None
 10870 ;; Auto vars:     Size  Location     Type
 10871 ;;		None
 10872 ;; Return value:  Size  Location     Type
 10873 ;;                  1    wreg      void 
 10874 ;; Registers used:
 10875 ;;		wreg, status,2, status,0
 10876 ;; Tracked objects:
 10877 ;;		On entry : 1F/5
 10878 ;;		On exit  : 1F/5
 10879 ;;		Unchanged: 0/0
 10880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10885 ;;Total ram usage:        0 bytes
 10886 ;; Hardware stack levels used:    1
 10887 ;; Hardware stack levels required when called:    7
 10888 ;; This function calls:
 10889 ;;		Nothing
 10890 ;; This function is called by:
 10891 ;;		_SYSTEM_Initialize
 10892 ;; This function uses a non-reentrant model
 10893 ;;
 10894                           
 10895                           
 10896                           ;psect for function _PWM4_Initialize
 10897  1799                     _PWM4_Initialize:	
 10898                           
 10899                           ;pwm.c: 44: CCP4CON = 0x8F;
 10900                           
 10901                           ;incstack = 0
 10902                           ; Regs used in _PWM4_Initialize: [wreg+status,2+status,0]
 10903  1799  308F               	movlw	143
 10904  179A  0026               	movlb	6	; select bank6
 10905  179B  0097               	movwf	23	;volatile
 10906                           
 10907                           ;pwm.c: 45: CCPR4 = 0;
 10908  179C  0195               	clrf	21	;volatile
 10909  179D  0196               	clrf	22	;volatile
 10910                           
 10911                           ;pwm.c: 46: CCPTMRSbits.C4TSEL = 0x1;
 10912  179E  0025               	movlb	5	; select bank5
 10913  179F  081F               	movf	31,w	;volatile
 10914  17A0  393F               	andlw	-193
 10915  17A1  3840               	iorlw	64
 10916  17A2  009F               	movwf	31	;volatile
 10917  17A3  0008               	return
 10918  17A4                     __end_of_PWM4_Initialize:	
 10919  17A4                     __ptext8:	
 10920 ;; *************** function _PWM5_Initialize *****************
 10921 ;; Defined at:
 10922 ;;		line 54 in file "driver/src/pwm.c"
 10923 ;; Parameters:    Size  Location     Type
 10924 ;;		None
 10925 ;; Auto vars:     Size  Location     Type
 10926 ;;		None
 10927 ;; Return value:  Size  Location     Type
 10928 ;;                  1    wreg      void 
 10929 ;; Registers used:
 10930 ;;		wreg, status,2, status,0
 10931 ;; Tracked objects:
 10932 ;;		On entry : 1F/5
 10933 ;;		On exit  : 1F/C
 10934 ;;		Unchanged: 0/0
 10935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10940 ;;Total ram usage:        0 bytes
 10941 ;; Hardware stack levels used:    1
 10942 ;; Hardware stack levels required when called:    7
 10943 ;; This function calls:
 10944 ;;		Nothing
 10945 ;; This function is called by:
 10946 ;;		_SYSTEM_Initialize
 10947 ;; This function uses a non-reentrant model
 10948 ;;
 10949                           
 10950                           
 10951                           ;psect for function _PWM5_Initialize
 10952  17A4                     _PWM5_Initialize:	
 10953                           
 10954                           ;pwm.c: 56: PWM5CON = 0x80;
 10955                           
 10956                           ;incstack = 0
 10957                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
 10958  17A4  3080               	movlw	128
 10959  17A5  002C               	movlb	12	; select bank12
 10960  17A6  0099               	movwf	25	;volatile
 10961                           
 10962                           ;pwm.c: 57: PWM5DC = 0;
 10963  17A7  0197               	clrf	23	;volatile
 10964  17A8  0198               	clrf	24	;volatile
 10965                           
 10966                           ;pwm.c: 58: PWMTMRSbits.P5TSEL = 0x1;
 10967  17A9  2FF5               	ljmp	PL90	;call to abstracted procedure
 10968  17AA                     __end_of_PWM5_Initialize:	
 10969  17AA                     __ptext7:	
 10970 ;; *************** function _TMR0_Initialize_Default *****************
 10971 ;; Defined at:
 10972 ;;		line 5 in file "driver/src/tmr0.c"
 10973 ;; Parameters:    Size  Location     Type
 10974 ;;		None
 10975 ;; Auto vars:     Size  Location     Type
 10976 ;;		None
 10977 ;; Return value:  Size  Location     Type
 10978 ;;                  1    wreg      void 
 10979 ;; Registers used:
 10980 ;;		wreg, status,2
 10981 ;; Tracked objects:
 10982 ;;		On entry : 1F/12
 10983 ;;		On exit  : 1F/1
 10984 ;;		Unchanged: 0/0
 10985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10990 ;;Total ram usage:        0 bytes
 10991 ;; Hardware stack levels used:    1
 10992 ;; Hardware stack levels required when called:    7
 10993 ;; This function calls:
 10994 ;;		Nothing
 10995 ;; This function is called by:
 10996 ;;		_SYSTEM_Initialize
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           
 11001                           ;psect for function _TMR0_Initialize_Default
 11002  17AA                     _TMR0_Initialize_Default:	
 11003                           
 11004                           ;tmr0.c: 7: T0CON0 = 0x00;
 11005                           
 11006                           ;incstack = 0
 11007                           ; Regs used in _TMR0_Initialize_Default: [wreg+status,2]
 11008  17AA  0020               	movlb	0	; select bank0
 11009  17AB  0197               	clrf	23	;volatile
 11010                           
 11011                           ;tmr0.c: 8: T0CON1 = 0xC0 | 0x10 | 0x07;
 11012  17AC  30D7               	movlw	215
 11013  17AD  0098               	movwf	24	;volatile
 11014                           
 11015                           ;tmr0.c: 10: TMR0H = 0xFF;
 11016  17AE  30FF               	movlw	255
 11017  17AF  0096               	movwf	22	;volatile
 11018                           
 11019                           ;tmr0.c: 11: TMR0L = 0x00;
 11020  17B0  0195               	clrf	21	;volatile
 11021                           
 11022                           ;tmr0.c: 13: PIR0bits.TMR0IF = 0;
 11023  17B1  1290               	bcf	16,5	;volatile
 11024                           
 11025                           ;tmr0.c: 14: PIE0bits.TMR0IE = 1;
 11026  17B2  0021               	movlb	1	; select bank1
 11027  17B3  1690               	bsf	16,5	;volatile
 11028  17B4  0008               	return
 11029  17B5                     __end_of_TMR0_Initialize_Default:	
 11030  17B5                     __ptext6:	
 11031 ;; *************** function _TMR1_Initialize_Default *****************
 11032 ;; Defined at:
 11033 ;;		line 9 in file "driver/src/tmr1.c"
 11034 ;; Parameters:    Size  Location     Type
 11035 ;;		None
 11036 ;; Auto vars:     Size  Location     Type
 11037 ;;		None
 11038 ;; Return value:  Size  Location     Type
 11039 ;;                  1    wreg      void 
 11040 ;; Registers used:
 11041 ;;		wreg, status,2
 11042 ;; Tracked objects:
 11043 ;;		On entry : 1F/1
 11044 ;;		On exit  : 1F/1
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;Total ram usage:        0 bytes
 11052 ;; Hardware stack levels used:    1
 11053 ;; Hardware stack levels required when called:    7
 11054 ;; This function calls:
 11055 ;;		Nothing
 11056 ;; This function is called by:
 11057 ;;		_SYSTEM_Initialize
 11058 ;; This function uses a non-reentrant model
 11059 ;;
 11060                           
 11061                           
 11062                           ;psect for function _TMR1_Initialize_Default
 11063  17B5                     _TMR1_Initialize_Default:	
 11064                           
 11065                           ;tmr1.c: 11: T1CON = 0x30 | 0x04 | 0x00;
 11066                           
 11067                           ;incstack = 0
 11068                           ; Regs used in _TMR1_Initialize_Default: [wreg+status,2]
 11069  17B5  3034               	movlw	52
 11070  17B6  0020               	movlb	0	; select bank0
 11071  17B7  009B               	movwf	27	;volatile
 11072                           
 11073                           ;tmr1.c: 12: T1GCON = 0x00 | 0x80 | 0x40 | 0x08;
 11074  17B8  30C8               	movlw	200
 11075  17B9  009C               	movwf	28	;volatile
 11076                           
 11077                           ;tmr1.c: 14: TMR1 = 0x00;
 11078  17BA  0199               	clrf	25	;volatile
 11079  17BB  019A               	clrf	26	;volatile
 11080                           
 11081                           ;tmr1.c: 15: PIR1bits.TMR1IF = 0;
 11082  17BC  1011               	bcf	17,0	;volatile
 11083                           
 11084                           ;tmr1.c: 16: PIE1bits.TMR1IE = 0;
 11085  17BD  0021               	movlb	1	; select bank1
 11086  17BE  1011               	bcf	17,0	;volatile
 11087                           
 11088                           ;tmr1.c: 17: PIR1bits.TMR1GIF = 0;
 11089  17BF  0020               	movlb	0	; select bank0
 11090  17C0  1391               	bcf	17,7	;volatile
 11091                           
 11092                           ;tmr1.c: 18: PIE1bits.TMR1GIE = 1;
 11093  17C1  0021               	movlb	1	; select bank1
 11094  17C2  1791               	bsf	17,7	;volatile
 11095  17C3  0008               	return
 11096  17C4                     __end_of_TMR1_Initialize_Default:	
 11097  17C4                     __ptext5:	
 11098 ;; *************** function _TMR2_Initialize_Default *****************
 11099 ;; Defined at:
 11100 ;;		line 7 in file "driver/src/tmr2.c"
 11101 ;; Parameters:    Size  Location     Type
 11102 ;;		None
 11103 ;; Auto vars:     Size  Location     Type
 11104 ;;		None
 11105 ;; Return value:  Size  Location     Type
 11106 ;;                  1    wreg      void 
 11107 ;; Registers used:
 11108 ;;		wreg, status,2
 11109 ;; Tracked objects:
 11110 ;;		On entry : 1F/1
 11111 ;;		On exit  : 1F/1
 11112 ;;		Unchanged: 0/0
 11113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11118 ;;Total ram usage:        0 bytes
 11119 ;; Hardware stack levels used:    1
 11120 ;; Hardware stack levels required when called:    7
 11121 ;; This function calls:
 11122 ;;		Nothing
 11123 ;; This function is called by:
 11124 ;;		_SYSTEM_Initialize
 11125 ;; This function uses a non-reentrant model
 11126 ;;
 11127                           
 11128                           
 11129                           ;psect for function _TMR2_Initialize_Default
 11130  17C4                     _TMR2_Initialize_Default:	
 11131                           
 11132                           ;tmr2.c: 9: T2CON = 0x00 | 0x78;
 11133                           
 11134                           ;incstack = 0
 11135                           ; Regs used in _TMR2_Initialize_Default: [wreg+status,2]
 11136  17C4  3078               	movlw	120
 11137  17C5  0020               	movlb	0	; select bank0
 11138  17C6  009F               	movwf	31	;volatile
 11139                           
 11140                           ;tmr2.c: 10: PR2 = 0xF9;
 11141  17C7  30F9               	movlw	249
 11142  17C8  009E               	movwf	30	;volatile
 11143                           
 11144                           ;tmr2.c: 11: TMR2 = 0x00;
 11145  17C9  019D               	clrf	29	;volatile
 11146                           
 11147                           ;tmr2.c: 12: PIR1bits.TMR2IF = 0;
 11148  17CA  1091               	bcf	17,1	;volatile
 11149                           
 11150                           ;tmr2.c: 13: PIE1bits.TMR2IE = 1;
 11151  17CB  0021               	movlb	1	; select bank1
 11152  17CC  1491               	bsf	17,1	;volatile
 11153  17CD  0008               	return
 11154  17CE                     __end_of_TMR2_Initialize_Default:	
 11155  17CE                     __ptext4:	
 11156 ;; *************** function _TMR4_Initialize_Default *****************
 11157 ;; Defined at:
 11158 ;;		line 7 in file "driver/src/tmr4.c"
 11159 ;; Parameters:    Size  Location     Type
 11160 ;;		None
 11161 ;; Auto vars:     Size  Location     Type
 11162 ;;		None
 11163 ;; Return value:  Size  Location     Type
 11164 ;;                  1    wreg      void 
 11165 ;; Registers used:
 11166 ;;		wreg, status,2
 11167 ;; Tracked objects:
 11168 ;;		On entry : 1F/1
 11169 ;;		On exit  : 1F/1
 11170 ;;		Unchanged: 0/0
 11171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11176 ;;Total ram usage:        0 bytes
 11177 ;; Hardware stack levels used:    1
 11178 ;; Hardware stack levels required when called:    7
 11179 ;; This function calls:
 11180 ;;		Nothing
 11181 ;; This function is called by:
 11182 ;;		_SYSTEM_Initialize
 11183 ;; This function uses a non-reentrant model
 11184 ;;
 11185                           
 11186                           
 11187                           ;psect for function _TMR4_Initialize_Default
 11188  17CE                     _TMR4_Initialize_Default:	
 11189                           
 11190                           ;tmr4.c: 9: T4CON = 0x03 | 0x78;
 11191                           
 11192                           ;incstack = 0
 11193                           ; Regs used in _TMR4_Initialize_Default: [wreg+status,2]
 11194  17CE  307B               	movlw	123
 11195  17CF  0028               	movlb	8	; select bank8
 11196  17D0  0097               	movwf	23	;volatile
 11197                           
 11198                           ;tmr4.c: 10: PR4 = 0xF9;
 11199  17D1  30F9               	movlw	249
 11200  17D2  0096               	movwf	22	;volatile
 11201                           
 11202                           ;tmr4.c: 11: TMR4 = 0x00;
 11203  17D3  0195               	clrf	21	;volatile
 11204                           
 11205                           ;tmr4.c: 13: PIR2bits.TMR4IF = 0;
 11206  17D4  0020               	movlb	0	; select bank0
 11207  17D5  1092               	bcf	18,1	;volatile
 11208                           
 11209                           ;tmr4.c: 14: PIE2bits.TMR4IE = 1;
 11210  17D6  0021               	movlb	1	; select bank1
 11211  17D7  1492               	bsf	18,1	;volatile
 11212  17D8  0008               	return
 11213  17D9                     __end_of_TMR4_Initialize_Default:	
 11214  17D9                     __ptext16:	
 11215 ;; *************** function _ADC_Initialize_Default *****************
 11216 ;; Defined at:
 11217 ;;		line 14 in file "driver/src/adc.c"
 11218 ;; Parameters:    Size  Location     Type
 11219 ;;		None
 11220 ;; Auto vars:     Size  Location     Type
 11221 ;;		None
 11222 ;; Return value:  Size  Location     Type
 11223 ;;                  1    wreg      void 
 11224 ;; Registers used:
 11225 ;;		wreg, status,2
 11226 ;; Tracked objects:
 11227 ;;		On entry : 1F/0
 11228 ;;		On exit  : 1F/1
 11229 ;;		Unchanged: 0/0
 11230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11235 ;;Total ram usage:        0 bytes
 11236 ;; Hardware stack levels used:    1
 11237 ;; Hardware stack levels required when called:    7
 11238 ;; This function calls:
 11239 ;;		Nothing
 11240 ;; This function is called by:
 11241 ;;		_SYSTEM_Initialize
 11242 ;; This function uses a non-reentrant model
 11243 ;;
 11244                           
 11245                           
 11246                           ;psect for function _ADC_Initialize_Default
 11247  17D9                     _ADC_Initialize_Default:	
 11248  17D9                     l4704:	
 11249                           ;incstack = 0
 11250                           ; Regs used in _ADC_Initialize_Default: [wreg+status,2]
 11251                           
 11252                           
 11253                           ;adc.c: 16: ADCON0 = 0x00;
 11254  17D9  0021               	movlb	1	; select bank1
 11255  17DA  019D               	clrf	29	;volatile
 11256                           
 11257                           ;adc.c: 17: ADCON1 = 0x80 | 0x50;
 11258  17DB  30D0               	movlw	208
 11259  17DC  009E               	movwf	30	;volatile
 11260                           
 11261                           ;adc.c: 18: ADACT = 0x00;
 11262  17DD  019F               	clrf	31	;volatile
 11263                           
 11264                           ;adc.c: 19: ADRESH = 0x00;
 11265  17DE  019C               	clrf	28	;volatile
 11266                           
 11267                           ;adc.c: 20: ADRESL = 0x00;
 11268  17DF  019B               	clrf	27	;volatile
 11269  17E0  0008               	return
 11270  17E1                     __end_of_ADC_Initialize_Default:	
 11271  17E1                     __ptext15:	
 11272 ;; *************** function _EUSART_Initialize_Default *****************
 11273 ;; Defined at:
 11274 ;;		line 17 in file "driver/src/eusart.c"
 11275 ;; Parameters:    Size  Location     Type
 11276 ;;		None
 11277 ;; Auto vars:     Size  Location     Type
 11278 ;;		None
 11279 ;; Return value:  Size  Location     Type
 11280 ;;                  1    wreg      void 
 11281 ;; Registers used:
 11282 ;;		wreg, status,2
 11283 ;; Tracked objects:
 11284 ;;		On entry : 1F/C
 11285 ;;		On exit  : 1F/0
 11286 ;;		Unchanged: 0/0
 11287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11292 ;;Total ram usage:        0 bytes
 11293 ;; Hardware stack levels used:    1
 11294 ;; Hardware stack levels required when called:    7
 11295 ;; This function calls:
 11296 ;;		Nothing
 11297 ;; This function is called by:
 11298 ;;		_SYSTEM_Initialize
 11299 ;; This function uses a non-reentrant model
 11300 ;;
 11301                           
 11302                           
 11303                           ;psect for function _EUSART_Initialize_Default
 11304  17E1                     _EUSART_Initialize_Default:	
 11305                           
 11306                           ;eusart.c: 19: PIE1bits.RCIE = 0;
 11307                           
 11308                           ;incstack = 0
 11309                           ; Regs used in _EUSART_Initialize_Default: [wreg+status,2]
 11310  17E1  0021               	movlb	1	; select bank1
 11311  17E2  1291               	bcf	17,5	;volatile
 11312                           
 11313                           ;eusart.c: 20: PIE1bits.TXIE = 0;
 11314  17E3  1211               	bcf	17,4	;volatile
 11315                           
 11316                           ;eusart.c: 21: BAUD1CON = 0x08;
 11317  17E4  3008               	movlw	8
 11318  17E5  0023               	movlb	3	; select bank3
 11319  17E6  009F               	movwf	31	;volatile
 11320                           
 11321                           ;eusart.c: 22: RC1STA = 0x80 | 0x10;
 11322  17E7  3090               	movlw	144
 11323  17E8  009D               	movwf	29	;volatile
 11324                           
 11325                           ;eusart.c: 23: TX1STA = 0x20 | 0x04;
 11326  17E9  3024               	movlw	36
 11327  17EA  009E               	movwf	30	;volatile
 11328                           
 11329                           ;eusart.c: 24: SP1BRG = 0x01A0;
 11330  17EB  3001               	movlw	1
 11331  17EC  009C               	movwf	28	;volatile
 11332  17ED  30A0               	movlw	160
 11333  17EE  009B               	movwf	27	;volatile
 11334                           
 11335                           ;eusart.c: 27: txTail = 0;
 11336  17EF  0020               	movlb	0	; select bank0
 11337  17F0  3020               	movlw	32
 11338  17F1  01B5               	clrf	_txTail
 11339  17F2  01B4               	clrf	_txHead
 11340                           
 11341                           ;eusart.c: 29: txRemain = sizeof (txBuf );
 11342  17F3  00DE               	movwf	_txRemain
 11343  17F4  0008               	return
 11344  17F5                     __end_of_EUSART_Initialize_Default:	
 11345  17F5                     PL90:	
 11346  17F5  081F               	movf	31,w	;volatile
 11347  17F6  39FC               	andlw	-4
 11348  17F7  3801               	iorlw	1
 11349  17F8  009F               	movwf	31	;volatile
 11350  17F9  0008               	return
 11351  17FA                     __end_ofPL90:	
 11352  17FA                     PL96:	
 11353  17FA  3055               	movlw	85
 11354  17FB  003C               	movlb	28	; select bank28
 11355  17FC  008F               	movwf	15	;volatile
 11356  17FD  30AA               	movlw	170
 11357  17FE  008F               	movwf	15	;volatile
 11358  17FF  0008               	return
 11359  1800                     __end_ofPL96:	
 11360                           
 11361                           	psect	text23
 11362  1638                     __ptext23:	
 11363 ;; *************** function _Led_InitPara *****************
 11364 ;; Defined at:
 11365 ;;		line 17 in file "user/src/led.c"
 11366 ;; Parameters:    Size  Location     Type
 11367 ;;		None
 11368 ;; Auto vars:     Size  Location     Type
 11369 ;;  j               1   26[BANK0 ] unsigned char 
 11370 ;;  i               1   27[BANK0 ] unsigned char 
 11371 ;; Return value:  Size  Location     Type
 11372 ;;                  1    wreg      void 
 11373 ;; Registers used:
 11374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11375 ;; Tracked objects:
 11376 ;;		On entry : 1F/1
 11377 ;;		On exit  : 1F/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11381 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11382 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;Total ram usage:        7 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    9
 11387 ;; This function calls:
 11388 ;;		_DATAEE_ReadBuffer
 11389 ;;		___bmul
 11390 ;; This function is called by:
 11391 ;;		_main
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           
 11396                           ;psect for function _Led_InitPara
 11397  1638                     _Led_InitPara:	
 11398                           
 11399                           ;led.c: 18: DATAEE_ReadBuffer(0x7010, (uint8_t *) & gLedPara, sizeof ( gLedPara));
 11400                           
 11401                           ;incstack = 0
 11402                           ; Regs used in _Led_InitPara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11403  1638  3010               	movlw	16
 11404  1639  0020               	movlb	0	; select bank0
 11405  163A  00D0               	movwf	DATAEE_ReadBuffer@addr
 11406  163B  3070               	movlw	112
 11407  163C  00D1               	movwf	DATAEE_ReadBuffer@addr+1
 11408  163D  3020               	movlw	(low (_gLedPara| (0+256)))& (0+255)
 11409  163E  00D2               	movwf	DATAEE_ReadBuffer@buf
 11410  163F  304C               	movlw	76
 11411  1640  00D3               	movwf	DATAEE_ReadBuffer@len
 11412  1641  26D4  3196         	fcall	_DATAEE_ReadBuffer
 11413                           
 11414                           ;led.c: 19: for (uint8_t i = 0; i < 5; i++) {
 11415  1643  01DB               	clrf	Led_InitPara@i
 11416  1644                     l6902:	
 11417                           
 11418                           ;led.c: 20: if (gLedPara.mBright[i] > 1000) {
 11419  1644  355B               	lslf	Led_InitPara@i,w
 11420  1645  3E22               	addlw	(low ((_gLedPara| (0+256)+2)))& (0+255)
 11421  1646  26F9  3196         	fcall	PL16	;call to abstracted procedure
 11422  1648  1903               	skipnz
 11423  1649  0255               	subwf	??_Led_InitPara,w
 11424  164A  1C03               	skipc
 11425  164B  2E51               	goto	l609
 11426                           
 11427                           ;led.c: 21: gLedPara.mBright[i] = 1000;
 11428  164C  2709  3196         	fcall	PL82	;call to abstracted procedure
 11429  164E  3E22               	addlw	(low ((_gLedPara| (0+256)+2)))& (0+255)
 11430  164F  2703  3196         	fcall	PL80	;call to abstracted procedure
 11431  1651                     l609:	
 11432                           
 11433                           ;led.c: 22: }
 11434                           ;led.c: 23: if (gLedPara.mDayBright[i] > 1000) {
 11435  1651  355B               	lslf	Led_InitPara@i,w
 11436  1652  3E56               	addlw	(low ((_gLedPara| (0+256)+54)))& (0+255)
 11437  1653  26F9  3196         	fcall	PL16	;call to abstracted procedure
 11438  1655  1903               	skipnz
 11439  1656  0255               	subwf	??_Led_InitPara,w
 11440  1657  1C03               	skipc
 11441  1658  2E5E               	goto	l610
 11442                           
 11443                           ;led.c: 24: gLedPara.mDayBright[i] = 1000;
 11444  1659  2709  3196         	fcall	PL82	;call to abstracted procedure
 11445  165B  3E56               	addlw	(low ((_gLedPara| (0+256)+54)))& (0+255)
 11446  165C  2703  3196         	fcall	PL80	;call to abstracted procedure
 11447  165E                     l610:	
 11448                           
 11449                           ;led.c: 25: }
 11450                           ;led.c: 26: if (gLedPara.mNightBright[i] > 1000) {
 11451  165E  355B               	lslf	Led_InitPara@i,w
 11452  165F  3E62               	addlw	(low ((_gLedPara| (0+256)+66)))& (0+255)
 11453  1660  26F9  3196         	fcall	PL16	;call to abstracted procedure
 11454  1662  1903               	skipnz
 11455  1663  0255               	subwf	??_Led_InitPara,w
 11456  1664  1C03               	skipc
 11457  1665  2E6A               	goto	l6910
 11458                           
 11459                           ;led.c: 27: gLedPara.mNightBright[i] = 1000;
 11460  1666  2709  3196         	fcall	PL82	;call to abstracted procedure
 11461  1668  3E62               	addlw	(low ((_gLedPara| (0+256)+66)))& (0+255)
 11462  1669  2703               	fcall	PL80	;call to abstracted procedure
 11463  166A                     l6910:	
 11464                           
 11465                           ;led.c: 28: }
 11466                           ;led.c: 29: for (uint8_t j = 0; j < 4; j++) {
 11467  166A  01DA               	clrf	Led_InitPara@j
 11468  166B                     l6916:	
 11469                           
 11470                           ;led.c: 30: if (gLedPara.mCustom[j][i] > 1000) {
 11471  166B  085B               	movf	Led_InitPara@i,w
 11472  166C  00D5               	movwf	??_Led_InitPara
 11473  166D  302C               	movlw	(low ((_gLedPara| (0+256)+12)))& (0+255)
 11474  166E  35D5               	lslf	??_Led_InitPara,f
 11475  166F  0755               	addwf	??_Led_InitPara,w
 11476  1670  00D6               	movwf	??_Led_InitPara+1
 11477  1671  300A               	movlw	10
 11478  1672  00CE               	movwf	___bmul@multiplicand
 11479  1673  085A               	movf	Led_InitPara@j,w
 11480  1674  318C  24FD  3196   	fcall	___bmul
 11481  1677  0756               	addwf	??_Led_InitPara+1,w
 11482  1678  00D7               	movwf	??_Led_InitPara+2
 11483  1679  0086               	movwf	6
 11484  167A  3001               	movlw	1	; select bank2/3
 11485  167B  0087               	movwf	7
 11486  167C  3F40               	moviw [0]fsr1
 11487  167D  00D8               	movwf	??_Led_InitPara+3
 11488  167E  3F41               	moviw [1]fsr1
 11489  167F  00D9               	movwf	??_Led_InitPara+4
 11490  1680  3003               	movlw	3
 11491  1681  0259               	subwf	??_Led_InitPara+4,w
 11492  1682  30E9               	movlw	233
 11493  1683  1903               	skipnz
 11494  1684  0258               	subwf	??_Led_InitPara+3,w
 11495  1685  1C03               	skipc
 11496  1686  2EA0               	goto	l6920
 11497                           
 11498                           ;led.c: 31: gLedPara.mCustom[j][i] = 1000;
 11499  1687  30E8               	movlw	232
 11500  1688  00D5               	movwf	??_Led_InitPara
 11501  1689  3003               	movlw	3
 11502  168A  00D6               	movwf	??_Led_InitPara+1
 11503  168B  085B               	movf	Led_InitPara@i,w
 11504  168C  00D7               	movwf	??_Led_InitPara+2
 11505  168D  302C               	movlw	(low ((_gLedPara| (0+256)+12)))& (0+255)
 11506  168E  35D7               	lslf	??_Led_InitPara+2,f
 11507  168F  0757               	addwf	??_Led_InitPara+2,w
 11508  1690  00D8               	movwf	??_Led_InitPara+3
 11509  1691  300A               	movlw	10
 11510  1692  00CE               	movwf	___bmul@multiplicand
 11511  1693  085A               	movf	Led_InitPara@j,w
 11512  1694  318C  24FD  3196   	fcall	___bmul
 11513  1697  0758               	addwf	??_Led_InitPara+3,w
 11514  1698  00D9               	movwf	??_Led_InitPara+4
 11515  1699  0086               	movwf	6
 11516  169A  3001               	movlw	1	; select bank2/3
 11517  169B  0087               	movwf	7
 11518  169C  0855               	movf	??_Led_InitPara,w
 11519  169D  3FC0               	movwi [0]fsr1
 11520  169E  0856               	movf	??_Led_InitPara+1,w
 11521  169F  3FC1               	movwi [1]fsr1
 11522  16A0                     l6920:	
 11523  16A0  3004               	movlw	4
 11524  16A1  0ADA               	incf	Led_InitPara@j,f
 11525  16A2  025A               	subwf	Led_InitPara@j,w
 11526  16A3  1C03               	skipc
 11527  16A4  2E6B               	goto	l6916
 11528                           
 11529                           ;led.c: 32: }
 11530                           ;led.c: 33: }
 11531                           ;led.c: 34: if (gLedPara.mMsc > 8) {
 11532  16A5  0022               	movlb	2	; select bank2
 11533  16A6  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 11534  16A7  0020               	movlb	0	; select bank0
 11535  16A8  00D5               	movwf	??_Led_InitPara
 11536  16A9  0CD5               	rrf	??_Led_InitPara,f
 11537  16AA  0C55               	rrf	??_Led_InitPara,w
 11538  16AB  390F               	andlw	15
 11539  16AC  00D6               	movwf	??_Led_InitPara+1
 11540  16AD  3009               	movlw	9
 11541  16AE  0256               	subwf	??_Led_InitPara+1,w
 11542  16AF  1C03               	skipc
 11543  16B0  2EB4               	goto	l6928
 11544                           
 11545                           ;led.c: 35: gLedPara.mMsc = 0;
 11546  16B1  3087               	movlw	-121
 11547  16B2  0022               	movlb	2	; select bank2
 11548  16B3  05A0               	andwf	_gLedPara^(0+256),f	;volatile
 11549  16B4                     l6928:	
 11550                           
 11551                           ;led.c: 36: }
 11552                           ;led.c: 37: if (gLedPara.mSunrise > 1439) {
 11553  16B4  3005               	movlw	5
 11554  16B5  0022               	movlb	2	; select bank2
 11555  16B6  0255               	subwf	((_gLedPara+1)^(0+256)+52),w	;volatile
 11556  16B7  30A0               	movlw	160
 11557  16B8  1903               	skipnz
 11558  16B9  0254               	subwf	(_gLedPara^(0+256)+52),w	;volatile
 11559  16BA  1C03               	skipc
 11560  16BB  2EBE               	goto	l6932
 11561                           
 11562                           ;led.c: 38: gLedPara.mSunrise = 0;
 11563  16BC  01D4               	clrf	(_gLedPara^(0+256)+52)	;volatile
 11564  16BD  01D5               	clrf	((_gLedPara+1)^(0+256)+52)	;volatile
 11565  16BE                     l6932:	
 11566                           
 11567                           ;led.c: 39: }
 11568                           ;led.c: 40: if (gLedPara.mSunset > 1439) {
 11569  16BE  3005               	movlw	5
 11570  16BF  0261               	subwf	((_gLedPara+1)^(0+256)+64),w	;volatile
 11571  16C0  30A0               	movlw	160
 11572  16C1  1903               	skipnz
 11573  16C2  0260               	subwf	(_gLedPara^(0+256)+64),w	;volatile
 11574  16C3  1C03               	skipc
 11575  16C4  2EC7               	goto	l6936
 11576                           
 11577                           ;led.c: 41: gLedPara.mSunset = 0;
 11578  16C5  01E0               	clrf	(_gLedPara^(0+256)+64)	;volatile
 11579  16C6  01E1               	clrf	((_gLedPara+1)^(0+256)+64)	;volatile
 11580  16C7                     l6936:	
 11581                           
 11582                           ;led.c: 42: }
 11583                           ;led.c: 43: if (gLedPara.mVolume > 4) {
 11584  16C7  3005               	movlw	5
 11585  16C8  0221               	subwf	(_gLedPara^(0+256)+1),w	;volatile
 11586  16C9  1C03               	skipc
 11587  16CA  2ECD               	goto	l6940
 11588                           
 11589                           ;led.c: 44: gLedPara.mVolume = 4;
 11590  16CB  3004               	movlw	4
 11591  16CC  00A1               	movwf	(_gLedPara^(0+256)+1)	;volatile
 11592  16CD                     l6940:	
 11593  16CD  0020               	movlb	0	; select bank0
 11594  16CE  3005               	movlw	5
 11595  16CF  0ADB               	incf	Led_InitPara@i,f
 11596  16D0  025B               	subwf	Led_InitPara@i,w
 11597  16D1  1803               	btfsc	3,0
 11598  16D2  0008               	return
 11599  16D3  2E44               	goto	l6902
 11600  16D4                     __end_of_Led_InitPara:	
 11601  16D4                     __ptext24:	
 11602 ;; *************** function _DATAEE_ReadBuffer *****************
 11603 ;; Defined at:
 11604 ;;		line 55 in file "driver/src/eeprom.c"
 11605 ;; Parameters:    Size  Location     Type
 11606 ;;  addr            2   16[BANK0 ] unsigned int 
 11607 ;;  buf             1   18[BANK0 ] PTR unsigned char 
 11608 ;;		 -> gLedPara(76), 
 11609 ;;  len             1   19[BANK0 ] unsigned char 
 11610 ;; Auto vars:     Size  Location     Type
 11611 ;;  i               1   20[BANK0 ] unsigned char 
 11612 ;; Return value:  Size  Location     Type
 11613 ;;                  1    wreg      void 
 11614 ;; Registers used:
 11615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11616 ;; Tracked objects:
 11617 ;;		On entry : 1F/0
 11618 ;;		On exit  : 1F/0
 11619 ;;		Unchanged: 0/0
 11620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11621 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11625 ;;Total ram usage:        5 bytes
 11626 ;; Hardware stack levels used:    1
 11627 ;; Hardware stack levels required when called:    8
 11628 ;; This function calls:
 11629 ;;		_DATAEE_ReadByte
 11630 ;; This function is called by:
 11631 ;;		_Led_InitPara
 11632 ;; This function uses a non-reentrant model
 11633 ;;
 11634                           
 11635                           
 11636                           ;psect for function _DATAEE_ReadBuffer
 11637  16D4                     _DATAEE_ReadBuffer:	
 11638                           
 11639                           ;eeprom.c: 57: for ( uint8_t i = len; i != 0; i-- )
 11640                           
 11641                           ;incstack = 0
 11642                           ; Regs used in _DATAEE_ReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11643  16D4  0853               	movf	DATAEE_ReadBuffer@len,w
 11644  16D5  00D4               	movwf	DATAEE_ReadBuffer@i
 11645  16D6                     l4744:	
 11646  16D6  0854               	movf	DATAEE_ReadBuffer@i,w
 11647  16D7  1903               	btfsc	3,2
 11648  16D8  0008               	return
 11649                           
 11650                           ;eeprom.c: 58: {
 11651                           ;eeprom.c: 59: *buf++ = DATAEE_ReadByte ( addr++ );
 11652  16D9  0852               	movf	DATAEE_ReadBuffer@buf,w
 11653  16DA  0086               	movwf	6
 11654  16DB  3001               	movlw	1	; select bank2/3
 11655  16DC  0087               	movwf	7
 11656  16DD  0851               	movf	DATAEE_ReadBuffer@addr+1,w
 11657  16DE  00CF               	movwf	DATAEE_ReadByte@addr+1
 11658  16DF  0850               	movf	DATAEE_ReadBuffer@addr,w
 11659  16E0  00CE               	movwf	DATAEE_ReadByte@addr
 11660  16E1  26EB  3196         	fcall	_DATAEE_ReadByte
 11661  16E3  0081               	movwf	1
 11662  16E4  0020               	movlb	0	; select bank0
 11663  16E5  0AD0               	incf	DATAEE_ReadBuffer@addr,f
 11664  16E6  1903               	skipnz
 11665  16E7  0AD1               	incf	DATAEE_ReadBuffer@addr+1,f
 11666  16E8  0AD2               	incf	DATAEE_ReadBuffer@buf,f
 11667  16E9  03D4               	decf	DATAEE_ReadBuffer@i,f
 11668  16EA  2ED6               	goto	l4744
 11669  16EB                     __end_of_DATAEE_ReadBuffer:	
 11670  16EB                     __ptext25:	
 11671 ;; *************** function _DATAEE_ReadByte *****************
 11672 ;; Defined at:
 11673 ;;		line 23 in file "driver/src/eeprom.c"
 11674 ;; Parameters:    Size  Location     Type
 11675 ;;  addr            2   14[BANK0 ] unsigned int 
 11676 ;; Auto vars:     Size  Location     Type
 11677 ;;		None
 11678 ;; Return value:  Size  Location     Type
 11679 ;;                  1    wreg      unsigned char 
 11680 ;; Registers used:
 11681 ;;		wreg
 11682 ;; Tracked objects:
 11683 ;;		On entry : 1F/0
 11684 ;;		On exit  : 1F/11
 11685 ;;		Unchanged: 0/0
 11686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11687 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11690 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11691 ;;Total ram usage:        2 bytes
 11692 ;; Hardware stack levels used:    1
 11693 ;; Hardware stack levels required when called:    7
 11694 ;; This function calls:
 11695 ;;		Nothing
 11696 ;; This function is called by:
 11697 ;;		_DATAEE_ReadBuffer
 11698 ;; This function uses a non-reentrant model
 11699 ;;
 11700                           
 11701                           
 11702                           ;psect for function _DATAEE_ReadByte
 11703  16EB                     _DATAEE_ReadByte:	
 11704                           
 11705                           ;eeprom.c: 25: NVMADRH = addr >> 8;
 11706                           
 11707                           ;incstack = 0
 11708                           ; Regs used in _DATAEE_ReadByte: [wreg]
 11709  16EB  084F               	movf	DATAEE_ReadByte@addr+1,w
 11710  16EC  0031               	movlb	17	; select bank17
 11711  16ED  0092               	movwf	18	;volatile
 11712                           
 11713                           ;eeprom.c: 26: NVMADRL = addr & 0xFF;
 11714  16EE  0020               	movlb	0	; select bank0
 11715  16EF  084E               	movf	DATAEE_ReadByte@addr,w
 11716  16F0  0031               	movlb	17	; select bank17
 11717  16F1  0091               	movwf	17	;volatile
 11718                           
 11719                           ;eeprom.c: 27: NVMCON1bits.NVMREGS = 1;
 11720  16F2  1715               	bsf	21,6	;volsfr
 11721                           
 11722                           ;eeprom.c: 28: NVMCON1bits.RD = 1;
 11723  16F3  1415               	bsf	21,0	;volsfr
 11724                           
 11725                           ;eeprom.c: 29: __nop();
 11726  16F4  0000               	nop
 11727                           
 11728                           ;eeprom.c: 30: __nop();
 11729  16F5  0000               	nop
 11730                           
 11731                           ;eeprom.c: 32: return ( NVMDATL );
 11732  16F6  0031               	movlb	17	; select bank17
 11733  16F7  0813               	movf	19,w	;volatile
 11734  16F8  0008               	return
 11735  16F9                     __end_of_DATAEE_ReadByte:	
 11736  16F9                     PL16:	
 11737  16F9  0086               	movwf	6
 11738  16FA  3001               	movlw	1	; select bank2/3
 11739  16FB  0087               	movwf	7
 11740  16FC  3F40               	moviw [0]fsr1
 11741  16FD  00D5               	movwf	??_Led_InitPara
 11742  16FE  3F41               	moviw [1]fsr1
 11743  16FF  00D6               	movwf	??_Led_InitPara+1
 11744  1700  3003               	movlw	3
 11745  1701  0256               	subwf	??_Led_InitPara+1,w
 11746  1702  34E9               	retlw	233
 11747  1703                     __end_ofPL16:	
 11748  1703                     PL80:	
 11749  1703  0086               	movwf	6
 11750  1704  0855               	movf	??_Led_InitPara,w
 11751  1705  3FC0               	movwi [0]fsr1
 11752  1706  0856               	movf	??_Led_InitPara+1,w
 11753  1707  3FC1               	movwi [1]fsr1
 11754  1708  0008               	return
 11755  1709                     __end_ofPL80:	
 11756  1709                     PL82:	
 11757  1709  30E8               	movlw	232
 11758  170A  00D5               	movwf	??_Led_InitPara
 11759  170B  3003               	movlw	3
 11760  170C  00D6               	movwf	??_Led_InitPara+1
 11761  170D  355B               	lslf	Led_InitPara@i,w
 11762  170E  0008               	return
 11763  170F                     __end_ofPL82:	
 11764                           
 11765                           	psect	text26
 11766  15B4                     __ptext26:	
 11767 ;; *************** function _Led_CheckAutoStatus *****************
 11768 ;; Defined at:
 11769 ;;		line 300 in file "user/src/led.c"
 11770 ;; Parameters:    Size  Location     Type
 11771 ;;		None
 11772 ;; Auto vars:     Size  Location     Type
 11773 ;;  i               1   28[BANK0 ] unsigned char 
 11774 ;;  i               1   27[BANK0 ] unsigned char 
 11775 ;;  i               1   29[BANK0 ] unsigned char 
 11776 ;;  ct              2   25[BANK0 ] unsigned int 
 11777 ;;  sunset          2   23[BANK0 ] unsigned int 
 11778 ;;  sunrise         2   21[BANK0 ] unsigned int 
 11779 ;; Return value:  Size  Location     Type
 11780 ;;                  1    wreg      void 
 11781 ;; Registers used:
 11782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11783 ;; Tracked objects:
 11784 ;;		On entry : 1F/2
 11785 ;;		On exit  : 1E/0
 11786 ;;		Unchanged: 0/0
 11787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;Total ram usage:       10 bytes
 11793 ;; Hardware stack levels used:    1
 11794 ;; Hardware stack levels required when called:    9
 11795 ;; This function calls:
 11796 ;;		_Led_UpdateBright
 11797 ;;		_RTC_GetTime
 11798 ;;		___wmul
 11799 ;; This function is called by:
 11800 ;;		_main
 11801 ;; This function uses a non-reentrant model
 11802 ;;
 11803                           
 11804                           
 11805                           ;psect for function _Led_CheckAutoStatus
 11806  15B4                     _Led_CheckAutoStatus:	
 11807                           
 11808                           ;led.c: 301: uint16_t ct = RTC_GetTime()->hour * 60u + RTC_GetTime()->minute;
 11809                           
 11810                           ;incstack = 0
 11811                           ; Regs used in _Led_CheckAutoStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11812  15B4  318D  2556  3195   	fcall	_RTC_GetTime
 11813  15B7  318F  2749  3195   	fcall	PL54	;call to abstracted procedure
 11814  15BA  318C  24D1  3195   	fcall	___wmul
 11815  15BD  084F               	movf	?___wmul+1,w
 11816  15BE  00DA               	movwf	Led_CheckAutoStatus@ct+1
 11817  15BF  084E               	movf	?___wmul,w
 11818  15C0  00D9               	movwf	Led_CheckAutoStatus@ct
 11819  15C1  318D  2556  3195   	fcall	_RTC_GetTime
 11820  15C4  0020               	movlb	0	; select bank0
 11821  15C5  00D4               	movwf	??_Led_CheckAutoStatus
 11822  15C6  3E01               	addlw	1
 11823  15C7  0086               	movwf	6
 11824  15C8  0187               	clrf	7
 11825  15C9  0801               	movf	1,w
 11826  15CA  07D9               	addwf	Led_CheckAutoStatus@ct,f
 11827  15CB  1803               	skipnc
 11828  15CC  0ADA               	incf	Led_CheckAutoStatus@ct+1,f
 11829                           
 11830                           ;led.c: 302: uint16_t sunrise = gLedPara.mSunrise;
 11831  15CD  0022               	movlb	2	; select bank2
 11832  15CE  0855               	movf	((_gLedPara+1)^(0+256)+52),w	;volatile
 11833  15CF  0020               	movlb	0	; select bank0
 11834  15D0  00D6               	movwf	Led_CheckAutoStatus@sunrise+1
 11835  15D1  0022               	movlb	2	; select bank2
 11836  15D2  0854               	movf	(_gLedPara^(0+256)+52),w	;volatile
 11837  15D3  0020               	movlb	0	; select bank0
 11838  15D4  00D5               	movwf	Led_CheckAutoStatus@sunrise
 11839                           
 11840                           ;led.c: 303: uint16_t sunset = gLedPara.mSunset;
 11841  15D5  0022               	movlb	2	; select bank2
 11842  15D6  0861               	movf	((_gLedPara+1)^(0+256)+64),w	;volatile
 11843  15D7  0020               	movlb	0	; select bank0
 11844  15D8  00D8               	movwf	Led_CheckAutoStatus@sunset+1
 11845  15D9  0022               	movlb	2	; select bank2
 11846  15DA  0860               	movf	(_gLedPara^(0+256)+64),w	;volatile
 11847  15DB  0020               	movlb	0	; select bank0
 11848  15DC  00D7               	movwf	Led_CheckAutoStatus@sunset
 11849                           
 11850                           ;led.c: 304: if (sunrise == sunset) {
 11851  15DD  0858               	movf	Led_CheckAutoStatus@sunset+1,w
 11852  15DE  0656               	xorwf	Led_CheckAutoStatus@sunrise+1,w
 11853  15DF  1D03               	skipz
 11854  15E0  2DE3               	goto	u5925
 11855  15E1  0857               	movf	Led_CheckAutoStatus@sunset,w
 11856  15E2  0655               	xorwf	Led_CheckAutoStatus@sunrise,w
 11857  15E3                     u5925:	
 11858  15E3  1D03               	skipz
 11859  15E4  2E02               	goto	l6994
 11860                           
 11861                           ;led.c: 305: for (uint8_t i = 0; i < 5; i++) {
 11862  15E5  01DD               	clrf	Led_CheckAutoStatus@i
 11863  15E6                     l6982:	
 11864                           
 11865                           ;led.c: 306: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
 11866  15E6  355D               	lslf	Led_CheckAutoStatus@i,w
 11867  15E7  3E62               	addlw	(low ((_gLedPara| (0+256)+66)))& (0+255)
 11868  15E8  0086               	movwf	6
 11869  15E9  3001               	movlw	1	; select bank2/3
 11870  15EA  0087               	movwf	7
 11871  15EB  355D               	lslf	Led_CheckAutoStatus@i,w
 11872  15EC  318E  26B7  3195   	fcall	PL2	;call to abstracted procedure
 11873                           
 11874                           ;led.c: 307: gLedRunPara.mCurrentBright[i] = gLedPara.mNightBright[i];
 11875  15EF  355D               	lslf	Led_CheckAutoStatus@i,w
 11876  15F0  3E62               	addlw	(low ((_gLedPara| (0+256)+66)))& (0+255)
 11877  15F1  0086               	movwf	6
 11878  15F2  355D               	lslf	Led_CheckAutoStatus@i,w
 11879  15F3  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 11880  15F4  0084               	movwf	4
 11881  15F5  318E  26EA  3195   	fcall	PL24	;call to abstracted procedure
 11882  15F8  0ADD               	incf	Led_CheckAutoStatus@i,f
 11883  15F9  025D               	subwf	Led_CheckAutoStatus@i,w
 11884  15FA  1C03               	skipc
 11885  15FB  2DE6               	goto	l6982
 11886                           
 11887                           ;led.c: 308: }
 11888                           ;led.c: 309: gLedRunPara.auto_state = 0;
 11889  15FC  0021               	movlb	1	; select bank1
 11890  15FD  01DD               	clrf	(_gLedRunPara^(0+128)+21)	;volatile
 11891                           
 11892                           ;led.c: 310: gLedRunPara.auto_num = 0;
 11893  15FE  01DE               	clrf	(_gLedRunPara^(0+128)+22)	;volatile
 11894  15FF  01DF               	clrf	((_gLedRunPara+1)^(0+128)+22)	;volatile
 11895                           
 11896                           ;led.c: 311: Led_UpdateBright();
 11897  1600  318A  2A46         	ljmp	l5874
 11898  1602                     l6994:	
 11899                           
 11900                           ;led.c: 313: }
 11901                           ;led.c: 314: if (ct == sunrise) {
 11902  1602  0856               	movf	Led_CheckAutoStatus@sunrise+1,w
 11903  1603  065A               	xorwf	Led_CheckAutoStatus@ct+1,w
 11904  1604  1D03               	skipz
 11905  1605  2E08               	goto	u5945
 11906  1606  0855               	movf	Led_CheckAutoStatus@sunrise,w
 11907  1607  0659               	xorwf	Led_CheckAutoStatus@ct,w
 11908  1608                     u5945:	
 11909  1608  1D03               	skipz
 11910  1609  2E1F               	goto	l7014
 11911                           
 11912                           ;led.c: 315: for (uint8_t i = 0; i < 5; i++) {
 11913  160A  01DB               	clrf	Led_CheckAutoStatus@i_1230
 11914  160B                     l7002:	
 11915                           
 11916                           ;led.c: 316: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
 11917  160B  355B               	lslf	Led_CheckAutoStatus@i_1230,w
 11918  160C  3E56               	addlw	(low ((_gLedPara| (0+256)+54)))& (0+255)
 11919  160D  0086               	movwf	6
 11920  160E  3001               	movlw	1	; select bank2/3
 11921  160F  0087               	movwf	7
 11922  1610  355B               	lslf	Led_CheckAutoStatus@i_1230,w
 11923  1611  318E  26B7  3195   	fcall	PL2	;call to abstracted procedure
 11924  1614  3005               	movlw	5
 11925  1615  0ADB               	incf	Led_CheckAutoStatus@i_1230,f
 11926  1616  025B               	subwf	Led_CheckAutoStatus@i_1230,w
 11927  1617  1C03               	skipc
 11928  1618  2E0B               	goto	l7002
 11929                           
 11930                           ;led.c: 317: }
 11931                           ;led.c: 318: gLedRunPara.auto_state = 1;
 11932  1619  3001               	movlw	1
 11933  161A                     L1:	
 11934  161A  0021               	movlb	1	; select bank1
 11935  161B  00DD               	movwf	(_gLedRunPara^(0+128)+21)	;volatile
 11936                           
 11937                           ;led.c: 319: gLedRunPara.auto_num = 0;
 11938  161C  01DE               	clrf	(_gLedRunPara^(0+128)+22)	;volatile
 11939  161D  01DF               	clrf	((_gLedRunPara+1)^(0+128)+22)	;volatile
 11940  161E  0008               	return
 11941  161F                     l7014:	
 11942                           
 11943                           ;led.c: 321: }
 11944                           ;led.c: 322: if (ct == sunset) {
 11945  161F  0858               	movf	Led_CheckAutoStatus@sunset+1,w
 11946  1620  065A               	xorwf	Led_CheckAutoStatus@ct+1,w
 11947  1621  1D03               	skipz
 11948  1622  2E25               	goto	u5965
 11949  1623  0857               	movf	Led_CheckAutoStatus@sunset,w
 11950  1624  0659               	xorwf	Led_CheckAutoStatus@ct,w
 11951  1625                     u5965:	
 11952  1625  1D03               	skipz
 11953  1626  0008               	return
 11954                           
 11955                           ;led.c: 323: for (uint8_t i = 0; i < 5; i++) {
 11956  1627  01DC               	clrf	Led_CheckAutoStatus@i_1231
 11957  1628                     l7022:	
 11958                           
 11959                           ;led.c: 324: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
 11960  1628  355C               	lslf	Led_CheckAutoStatus@i_1231,w
 11961  1629  3E62               	addlw	(low ((_gLedPara| (0+256)+66)))& (0+255)
 11962  162A  0086               	movwf	6
 11963  162B  3001               	movlw	1	; select bank2/3
 11964  162C  0087               	movwf	7
 11965  162D  355C               	lslf	Led_CheckAutoStatus@i_1231,w
 11966  162E  318E  26B7  3195   	fcall	PL2	;call to abstracted procedure
 11967  1631  3005               	movlw	5
 11968  1632  0ADC               	incf	Led_CheckAutoStatus@i_1231,f
 11969  1633  025C               	subwf	Led_CheckAutoStatus@i_1231,w
 11970  1634  1C03               	skipc
 11971  1635  2E28               	goto	l7022
 11972                           
 11973                           ;led.c: 325: }
 11974                           ;led.c: 326: gLedRunPara.auto_state = 2;
 11975  1636  3002               	movlw	2
 11976  1637  2E1A               	goto	L1
 11977  1638                     __end_of_Led_CheckAutoStatus:	
 11978                           
 11979                           	psect	text27
 11980  0030                     __ptext27:	
 11981 ;; *************** function _Led_AutoRun *****************
 11982 ;; Defined at:
 11983 ;;		line 332 in file "user/src/led.c"
 11984 ;; Parameters:    Size  Location     Type
 11985 ;;		None
 11986 ;; Auto vars:     Size  Location     Type
 11987 ;;  i               1   28[BANK0 ] unsigned char 
 11988 ;; Return value:  Size  Location     Type
 11989 ;;                  1    wreg      void 
 11990 ;; Registers used:
 11991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11992 ;; Tracked objects:
 11993 ;;		On entry : 1F/0
 11994 ;;		On exit  : 1F/0
 11995 ;;		Unchanged: 0/0
 11996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;Total ram usage:        5 bytes
 12002 ;; Hardware stack levels used:    1
 12003 ;; Hardware stack levels required when called:    9
 12004 ;; This function calls:
 12005 ;;		_Led_UpdateBright
 12006 ;;		_Util_IncValue
 12007 ;; This function is called by:
 12008 ;;		_main
 12009 ;; This function uses a non-reentrant model
 12010 ;;
 12011                           
 12012                           
 12013                           ;psect for function _Led_AutoRun
 12014  0030                     _Led_AutoRun:	
 12015                           
 12016                           ;led.c: 333: if (gLedRunPara.auto_state == 1 && gLedRunPara.auto_num < 250) {
 12017                           
 12018                           ;incstack = 0
 12019                           ; Regs used in _Led_AutoRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12020  0030  0021               	movlb	1	; select bank1
 12021  0031  0B5D               	decfsz	(_gLedRunPara^(0+128)+21),w	;volatile
 12022  0032  2842               	goto	l7040
 12023  0033  3000               	movlw	0
 12024  0034  025F               	subwf	((_gLedRunPara+1)^(0+128)+22),w	;volatile
 12025  0035  30FA               	movlw	250
 12026  0036  1903               	skipnz
 12027  0037  025E               	subwf	(_gLedRunPara^(0+128)+22),w	;volatile
 12028  0038  1803               	skipnc
 12029  0039  2842               	goto	l7040
 12030                           
 12031                           ;led.c: 334: Util_IncValue((uint16_t *) & gLedRunPara.mCurrentBright[0], 1000, 4);
 12032  003A  20A7               	fcall	PL56	;call to abstracted procedure
 12033  003B  3004               	movlw	4
 12034  003C  00D2               	movwf	Util_IncValue@delta
 12035  003D  01D3               	clrf	Util_IncValue@delta+1
 12036  003E  318D  2530  3180   	fcall	_Util_IncValue
 12037                           
 12038                           ;led.c: 335: } else if (gLedRunPara.auto_state == 2 && gLedRunPara.auto_num < 1000) {
 12039  0041  2870               	goto	l7056
 12040  0042                     l7040:	
 12041  0042  3002               	movlw	2
 12042  0043  065D               	xorwf	(_gLedRunPara^(0+128)+21),w	;volatile
 12043  0044  1D03               	btfss	3,2
 12044  0045  2855               	goto	l7046
 12045  0046  3003               	movlw	3
 12046  0047  025F               	subwf	((_gLedRunPara+1)^(0+128)+22),w	;volatile
 12047  0048  30E8               	movlw	232
 12048  0049  1903               	skipnz
 12049  004A  025E               	subwf	(_gLedRunPara^(0+128)+22),w	;volatile
 12050  004B  1803               	skipnc
 12051  004C  2855               	goto	l7046
 12052                           
 12053                           ;led.c: 336: Util_IncValue((uint16_t *) & gLedRunPara.mCurrentBright[0], 1000, 1);
 12054  004D  20A7               	fcall	PL56	;call to abstracted procedure
 12055  004E  01D2               	clrf	Util_IncValue@delta
 12056  004F  0AD2               	incf	Util_IncValue@delta,f
 12057  0050  01D3               	clrf	Util_IncValue@delta+1
 12058  0051  318D  2530  3180   	fcall	_Util_IncValue
 12059                           
 12060                           ;led.c: 337: } else {
 12061  0054  2870               	goto	l7056
 12062  0055                     l7046:	
 12063                           
 12064                           ;led.c: 338: gLedRunPara.auto_state = 0;
 12065  0055  01DD               	clrf	(_gLedRunPara^(0+128)+21)	;volatile
 12066                           
 12067                           ;led.c: 339: gLedRunPara.auto_num = 0;
 12068  0056  01DE               	clrf	(_gLedRunPara^(0+128)+22)	;volatile
 12069  0057  01DF               	clrf	((_gLedRunPara+1)^(0+128)+22)	;volatile
 12070                           
 12071                           ;led.c: 340: if (gLedRunPara.mCurrentBright[0] < gLedRunPara.mTargetBright[0]) {
 12072  0058  0853               	movf	((_gLedRunPara+1)^(0+128)+10),w	;volatile
 12073  0059  0249               	subwf	(_gLedRunPara+1)^(0+128),w	;volatile
 12074  005A  1D03               	skipz
 12075  005B  285E               	goto	u6025
 12076  005C  0852               	movf	(_gLedRunPara^(0+128)+10),w	;volatile
 12077  005D  0248               	subwf	_gLedRunPara^(0+128),w	;volatile
 12078  005E                     u6025:	
 12079  005E  1803               	skipnc
 12080  005F  2864               	goto	l7052
 12081                           
 12082                           ;led.c: 341: gLedRunPara.mCurrentBright[0]++;
 12083  0060  0AC8               	incf	_gLedRunPara^(0+128),f	;volatile
 12084  0061  1903               	skipnz
 12085  0062  0AC9               	incf	(_gLedRunPara+1)^(0+128),f	;volatile
 12086                           
 12087                           ;led.c: 342: } else if (gLedRunPara.mCurrentBright[0] > gLedRunPara.mTargetBright[0]) {
 12088  0063  2870               	goto	l7056
 12089  0064                     l7052:	
 12090  0064  0849               	movf	(_gLedRunPara+1)^(0+128),w	;volatile
 12091  0065  0253               	subwf	((_gLedRunPara+1)^(0+128)+10),w	;volatile
 12092  0066  1D03               	skipz
 12093  0067  286A               	goto	u6035
 12094  0068  0848               	movf	_gLedRunPara^(0+128),w	;volatile
 12095  0069  0252               	subwf	(_gLedRunPara^(0+128)+10),w	;volatile
 12096  006A                     u6035:	
 12097  006A  1803               	skipnc
 12098  006B  2870               	goto	l7056
 12099                           
 12100                           ;led.c: 343: gLedRunPara.mCurrentBright[0]--;
 12101  006C  3001               	movlw	1
 12102  006D  02C8               	subwf	_gLedRunPara^(0+128),f	;volatile
 12103  006E  3000               	movlw	0
 12104  006F  3BC9               	subwfb	(_gLedRunPara+1)^(0+128),f	;volatile
 12105  0070                     l7056:	
 12106                           
 12107                           ;led.c: 344: }
 12108                           ;led.c: 345: }
 12109                           ;led.c: 346: gLedRunPara.auto_num++;
 12110  0070  0021               	movlb	1	; select bank1
 12111  0071  0ADE               	incf	(_gLedRunPara^(0+128)+22),f	;volatile
 12112  0072  1903               	skipnz
 12113  0073  0ADF               	incf	((_gLedRunPara+1)^(0+128)+22),f	;volatile
 12114                           
 12115                           ;led.c: 347: if ((gLedRunPara.auto_num & 0x01) == 0) {
 12116  0074  185E               	btfsc	(_gLedRunPara^(0+128)+22),0	;volatile
 12117  0075  2899               	goto	l7078
 12118                           
 12119                           ;led.c: 348: for (uint8_t i = 1; i < 5; i++) {
 12120  0076  0020               	movlb	0	; select bank0
 12121  0077  01DC               	clrf	Led_AutoRun@i
 12122  0078  0ADC               	incf	Led_AutoRun@i,f
 12123  0079                     l7066:	
 12124                           
 12125                           ;led.c: 349: if (gLedRunPara.mCurrentBright[i] < gLedRunPara.mTargetBright[i]) {
 12126  0079  355C               	lslf	Led_AutoRun@i,w
 12127  007A  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 12128  007B  20B1  3180         	fcall	PL74	;call to abstracted procedure
 12129  007D  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 12130  007E  209B  3180         	fcall	PL46	;call to abstracted procedure
 12131  0080  1803               	skipnc
 12132  0081  2888               	goto	l7070
 12133                           
 12134                           ;led.c: 350: gLedRunPara.mCurrentBright[i]++;
 12135  0082  355C               	lslf	Led_AutoRun@i,w
 12136  0083  22F1  3180         	fcall	PL22	;call to abstracted procedure
 12137  0085  1803               	skipnc
 12138  0086  0A81               	incf	1,f
 12139                           
 12140                           ;led.c: 351: } else if (gLedRunPara.mCurrentBright[i] > gLedRunPara.mTargetBright[i]) {
 12141  0087  2894               	goto	l7074
 12142  0088                     l7070:	
 12143  0088  355C               	lslf	Led_AutoRun@i,w
 12144  0089  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 12145  008A  20B1  3180         	fcall	PL74	;call to abstracted procedure
 12146  008C  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 12147  008D  209B  3180         	fcall	PL46	;call to abstracted procedure
 12148  008F  1803               	skipnc
 12149  0090  2894               	goto	l7074
 12150                           
 12151                           ;led.c: 352: gLedRunPara.mCurrentBright[i]--;
 12152  0091  355C               	lslf	Led_AutoRun@i,w
 12153  0092  22DC  3180         	fcall	PL4	;call to abstracted procedure
 12154  0094                     l7074:	
 12155  0094  3005               	movlw	5
 12156  0095  0ADC               	incf	Led_AutoRun@i,f
 12157  0096  025C               	subwf	Led_AutoRun@i,w
 12158  0097  1C03               	skipc
 12159  0098  2879               	goto	l7066
 12160  0099                     l7078:	
 12161                           
 12162                           ;led.c: 353: }
 12163                           ;led.c: 354: }
 12164                           ;led.c: 355: }
 12165                           ;led.c: 356: Led_UpdateBright();
 12166  0099  318A  2A46         	ljmp	l5874
 12167  009B                     __end_of_Led_AutoRun:	
 12168  009B                     PL46:	
 12169  009B  0086               	movwf	6
 12170  009C  3F40               	moviw [0]fsr1
 12171  009D  00DA               	movwf	??_Led_AutoRun+2
 12172  009E  3F41               	moviw [1]fsr1
 12173  009F  00DB               	movwf	??_Led_AutoRun+3
 12174  00A0  0859               	movf	??_Led_AutoRun+1,w
 12175  00A1  025B               	subwf	??_Led_AutoRun+3,w
 12176  00A2  1D03               	skipz
 12177  00A3  0008               	return
 12178  00A4  0858               	movf	??_Led_AutoRun,w
 12179  00A5  025A               	subwf	??_Led_AutoRun+2,w
 12180  00A6  0008               	return
 12181  00A7                     __end_ofPL46:	
 12182  00A7                     PL56:	
 12183  00A7  30C8               	movlw	low _gLedRunPara
 12184  00A8  0020               	movlb	0	; select bank0
 12185  00A9  00CE               	movwf	Util_IncValue@pSrc
 12186  00AA  3000               	movlw	high _gLedRunPara
 12187  00AB  00CF               	movwf	Util_IncValue@pSrc+1
 12188  00AC  30E8               	movlw	232
 12189  00AD  00D0               	movwf	Util_IncValue@max
 12190  00AE  3003               	movlw	3
 12191  00AF  00D1               	movwf	Util_IncValue@max+1
 12192  00B0  0008               	return
 12193  00B1                     __end_ofPL56:	
 12194  00B1                     PL74:	
 12195  00B1  0086               	movwf	6
 12196  00B2  0187               	clrf	7
 12197  00B3  3F40               	moviw [0]fsr1
 12198  00B4  00D8               	movwf	??_Led_AutoRun
 12199  00B5  3F41               	moviw [1]fsr1
 12200  00B6  00D9               	movwf	??_Led_AutoRun+1
 12201  00B7  355C               	lslf	Led_AutoRun@i,w
 12202  00B8  0008               	return
 12203  00B9                     __end_ofPL74:	
 12204  00B9                     __ptext76:	
 12205 ;; *************** function _Led_DynamicWave *****************
 12206 ;; Defined at:
 12207 ;;		line 406 in file "user/src/led.c"
 12208 ;; Parameters:    Size  Location     Type
 12209 ;;  ptp             2    6[COMMON] unsigned int 
 12210 ;; Auto vars:     Size  Location     Type
 12211 ;;  duty           10    0[BANK0 ] unsigned int [5]
 12212 ;;  val             2   10[BANK0 ] unsigned int 
 12213 ;;  i               1   12[BANK0 ] unsigned char 
 12214 ;; Return value:  Size  Location     Type
 12215 ;;                  1    wreg      void 
 12216 ;; Registers used:
 12217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12218 ;; Tracked objects:
 12219 ;;		On entry : 1F/0
 12220 ;;		On exit  : 14/4
 12221 ;;		Unchanged: 0/0
 12222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12223 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12224 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12226 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;Total ram usage:       19 bytes
 12228 ;; Hardware stack levels used:    1
 12229 ;; Hardware stack levels required when called:    2
 12230 ;; This function calls:
 12231 ;;		i1_Led_UpdateBright
 12232 ;;		i1___wmul
 12233 ;; This function is called by:
 12234 ;;		_Led_RunMusic
 12235 ;; This function uses a non-reentrant model
 12236 ;;
 12237                           
 12238                           
 12239                           ;psect for function _Led_DynamicWave
 12240  00B9                     _Led_DynamicWave:	
 12241  00B9                     i1l6080:	
 12242                           ;incstack = 0
 12243                           ; Regs used in _Led_DynamicWave: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12244                           
 12245                           
 12246                           ;led.c: 407: uint8_t i;
 12247                           ;led.c: 408: uint16_t val = ptp * ( 6 + GAIN[gLedPara.mVolume] );
 12248  00B9  22E6  3180         	fcall	PL10	;call to abstracted procedure
 12249  00BB  3006               	movlw	6
 12250  00BC  01F1               	clrf	i1___wmul@multiplier+1
 12251  00BD  07F0               	addwf	i1___wmul@multiplier,f
 12252  00BE  1803               	skipnc
 12253  00BF  0AF1               	incf	i1___wmul@multiplier+1,f
 12254  00C0  0877               	movf	Led_DynamicWave@ptp+1,w
 12255  00C1  00F3               	movwf	i1___wmul@multiplicand+1
 12256  00C2  0876               	movf	Led_DynamicWave@ptp,w
 12257  00C3  00F2               	movwf	i1___wmul@multiplicand
 12258  00C4  22B4  3180         	fcall	i1___wmul
 12259  00C6  0871               	movf	?i1___wmul+1,w
 12260  00C7  0020               	movlb	0	; select bank0
 12261  00C8  00CB               	movwf	Led_DynamicWave@val+1
 12262  00C9  0870               	movf	?i1___wmul,w
 12263  00CA  00CA               	movwf	Led_DynamicWave@val
 12264                           
 12265                           ;led.c: 409: uint16_t duty[5] = {500, 500, 500, 200, 500};
 12266  00CB  30B4               	movlw	low Led_DynamicWave@F8306
 12267  00CC  0086               	movwf	6
 12268  00CD  3000               	movlw	high Led_DynamicWave@F8306
 12269  00CE  0087               	movwf	7
 12270  00CF  3040               	movlw	low Led_DynamicWave@duty
 12271  00D0  0084               	movwf	4
 12272  00D1  3000               	movlw	high Led_DynamicWave@duty
 12273  00D2  0085               	movwf	5
 12274  00D3  300A               	movlw	10
 12275  00D4  00F8               	movwf	??_Led_DynamicWave
 12276  00D5                     u493_20:	
 12277  00D5  0016               	moviw fsr1++
 12278  00D6  001A               	movwi fsr0++
 12279  00D7  0BF8               	decfsz	??_Led_DynamicWave,f
 12280  00D8  28D5               	goto	u493_20
 12281                           
 12282                           ;led.c: 410: duty[3] += val;
 12283  00D9  084A               	movf	Led_DynamicWave@val,w
 12284  00DA  07C6               	addwf	Led_DynamicWave@duty+6,f
 12285  00DB  084B               	movf	Led_DynamicWave@val+1,w
 12286  00DC  3DC7               	addwfc	Led_DynamicWave@duty+7,f
 12287                           
 12288                           ;led.c: 411: if (duty[3] > 1000) {
 12289  00DD  3003               	movlw	3
 12290  00DE  0247               	subwf	Led_DynamicWave@duty+7,w
 12291  00DF  30E9               	movlw	233
 12292  00E0  1903               	skipnz
 12293  00E1  0246               	subwf	Led_DynamicWave@duty+6,w
 12294  00E2  1C03               	skipc
 12295  00E3  28E8               	goto	i1l6090
 12296                           
 12297                           ;led.c: 412: duty[3] = 1000;
 12298  00E4  30E8               	movlw	232
 12299  00E5  00C6               	movwf	Led_DynamicWave@duty+6
 12300  00E6  3003               	movlw	3
 12301  00E7  00C7               	movwf	Led_DynamicWave@duty+7
 12302  00E8                     i1l6090:	
 12303                           
 12304                           ;led.c: 413: }
 12305                           ;led.c: 414: for (i = 0; i < 5; i++) {
 12306  00E8  01CC               	clrf	Led_DynamicWave@i
 12307  00E9                     i1l6096:	
 12308                           
 12309                           ;led.c: 415: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 12310  00E9  354C               	lslf	Led_DynamicWave@i,w
 12311  00EA  3E40               	addlw	(low (Led_DynamicWave@duty| 0))& (0+255)
 12312  00EB  2348  3180         	fcall	PL70	;call to abstracted procedure
 12313  00ED  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 12314  00EE  2304  3180         	fcall	PL38	;call to abstracted procedure
 12315  00F0  1803               	skipnc
 12316  00F1  28F8               	goto	i1l6100
 12317                           
 12318                           ;led.c: 416: gLedRunPara.mCurrentBright[i]++;
 12319  00F2  354C               	lslf	Led_DynamicWave@i,w
 12320  00F3  22F1  3180         	fcall	PL22	;call to abstracted procedure
 12321  00F5  1803               	skipnc
 12322  00F6  0A81               	incf	1,f
 12323                           
 12324                           ;led.c: 417: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 12325  00F7  2904               	goto	i1l6104
 12326  00F8                     i1l6100:	
 12327  00F8  354C               	lslf	Led_DynamicWave@i,w
 12328  00F9  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 12329  00FA  2348  3180         	fcall	PL70	;call to abstracted procedure
 12330  00FC  3E40               	addlw	(low (Led_DynamicWave@duty| 0))& (0+255)
 12331  00FD  2304  3180         	fcall	PL38	;call to abstracted procedure
 12332  00FF  1803               	skipnc
 12333  0100  2904               	goto	i1l6104
 12334                           
 12335                           ;led.c: 418: gLedRunPara.mCurrentBright[i]--;
 12336  0101  354C               	lslf	Led_DynamicWave@i,w
 12337  0102  22DC  3180         	fcall	PL4	;call to abstracted procedure
 12338  0104                     i1l6104:	
 12339  0104  3005               	movlw	5
 12340  0105  0ACC               	incf	Led_DynamicWave@i,f
 12341  0106  024C               	subwf	Led_DynamicWave@i,w
 12342  0107  1C03               	skipc
 12343  0108  28E9               	goto	i1l6096
 12344                           
 12345                           ;led.c: 419: }
 12346                           ;led.c: 420: }
 12347                           ;led.c: 421: Led_UpdateBright();
 12348  0109  22C9               	fcall	i1_Led_UpdateBright
 12349  010A  0008               	return
 12350  010B                     __end_of_Led_DynamicWave:	
 12351  010B                     __ptext75:	
 12352 ;; *************** function _Led_RunMusic *****************
 12353 ;; Defined at:
 12354 ;;		line 494 in file "user/src/led.c"
 12355 ;; Parameters:    Size  Location     Type
 12356 ;;		None
 12357 ;; Auto vars:     Size  Location     Type
 12358 ;;		None
 12359 ;; Return value:  Size  Location     Type
 12360 ;;                  1    wreg      void 
 12361 ;; Registers used:
 12362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12363 ;; Tracked objects:
 12364 ;;		On entry : 1F/0
 12365 ;;		On exit  : 10/0
 12366 ;;		Unchanged: 0/0
 12367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12370 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12371 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12372 ;;Total ram usage:        1 bytes
 12373 ;; Hardware stack levels used:    1
 12374 ;; Hardware stack levels required when called:    3
 12375 ;; This function calls:
 12376 ;;		_Audio_PlaySound
 12377 ;;		_Audio_SelectSound
 12378 ;;		_Led_DynamicCloud
 12379 ;;		_Led_DynamicMoon
 12380 ;;		_Led_DynamicStorm
 12381 ;;		_Led_DynamicWave
 12382 ;; This function is called by:
 12383 ;;		_Led_Run
 12384 ;; This function uses a non-reentrant model
 12385 ;;
 12386                           
 12387                           
 12388                           ;psect for function _Led_RunMusic
 12389  010B                     _Led_RunMusic:	
 12390  010B                     i1l6260:	
 12391                           ;incstack = 0
 12392                           ; Regs used in _Led_RunMusic: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12393                           
 12394                           
 12395                           ;led.c: 495: if (gLedRunPara.music_state < 32) {
 12396  010B  3020               	movlw	32
 12397  010C  0021               	movlb	1	; select bank1
 12398  010D  0261               	subwf	(_gLedRunPara^(0+128)+25),w	;volatile
 12399  010E  1C03               	btfss	3,0
 12400  010F  2924               	goto	i1l6262
 12401                           
 12402                           ;led.c: 497: } else if (gLedRunPara.music_state == 32) {
 12403  0110  3020               	movlw	32
 12404  0111  0661               	xorwf	(_gLedRunPara^(0+128)+25),w	;volatile
 12405  0112  1D03               	btfss	3,2
 12406  0113  291A               	goto	i1l6270
 12407                           
 12408                           ;led.c: 498: Audio_SelectSound(gLedPara.mMsc);
 12409  0114  0022               	movlb	2	; select bank2
 12410  0115  2358  3180         	fcall	PL88	;call to abstracted procedure
 12411  0117  2162  3180         	fcall	_Audio_SelectSound
 12412  0119  2924               	goto	i1l6262
 12413  011A                     i1l6270:	
 12414  011A  3040               	movlw	64
 12415  011B  0261               	subwf	(_gLedRunPara^(0+128)+25),w	;volatile
 12416  011C  1C03               	btfss	3,0
 12417  011D  2924               	goto	i1l6262
 12418  011E  3040               	movlw	64
 12419  011F  0661               	xorwf	(_gLedRunPara^(0+128)+25),w	;volatile
 12420  0120  1D03               	btfss	3,2
 12421  0121  2925               	goto	i1l6280
 12422                           
 12423                           ;led.c: 503: Audio_PlaySound();
 12424  0122  2150  3180         	fcall	_Audio_PlaySound
 12425  0124                     i1l6262:	
 12426                           
 12427                           ;led.c: 496: gLedRunPara.music_state++;
 12428  0124  0AE1               	incf	(_gLedRunPara^(0+128)+25),f	;volatile
 12429  0125                     i1l6280:	
 12430                           
 12431                           ;led.c: 505: }
 12432                           ;led.c: 506: if (gLedPara.mDyn) {
 12433  0125  0022               	movlb	2	; select bank2
 12434  0126  1FA0               	btfss	_gLedPara^(0+256),7	;volatile
 12435  0127  0008               	return
 12436                           
 12437                           ;led.c: 519: break;
 12438  0128  2358  3180         	fcall	PL88	;call to abstracted procedure
 12439                           
 12440                           ; Switch size 1, requested type "space"
 12441                           ; Number of cases is 4, Range of values is 5 to 8
 12442                           ; switch strategies available:
 12443                           ; Name         Instructions Cycles
 12444                           ; simple_byte           13     7 (average)
 12445                           ; direct_byte           17     9 (fixed)
 12446                           ; jumptable            263     9 (fixed)
 12447                           ;	Chosen strategy is simple_byte
 12448  012A  3A05               	xorlw	5	; case 5
 12449  012B  1903               	skipnz
 12450  012C  2937               	goto	i1l6284
 12451  012D  3A03               	xorlw	3	; case 6
 12452  012E  1903               	skipnz
 12453  012F  293D               	goto	i1l6286
 12454  0130  3A01               	xorlw	1	; case 7
 12455  0131  1903               	skipnz
 12456  0132  2943               	goto	i1l6288
 12457  0133  3A0F               	xorlw	15	; case 8
 12458  0134  1903               	skipnz
 12459  0135  2949               	goto	i1l6290
 12460  0136  294F               	goto	i1l802
 12461  0137                     i1l6284:	
 12462                           
 12463                           ;led.c: 509: Led_DynamicWave(audio_value);
 12464  0137  0020               	movlb	0	; select bank0
 12465  0138  082D               	movf	_audio_value+1,w	;volatile
 12466  0139  00F7               	movwf	Led_DynamicWave@ptp+1
 12467  013A  082C               	movf	_audio_value,w	;volatile
 12468  013B  00F6               	movwf	Led_DynamicWave@ptp
 12469  013C  28B9               	ljmp	i1l6080
 12470  013D                     i1l6286:	
 12471                           ;led.c: 510: break;
 12472                           
 12473                           
 12474                           ;led.c: 512: Led_DynamicMoon(audio_value);
 12475  013D  0020               	movlb	0	; select bank0
 12476  013E  082D               	movf	_audio_value+1,w	;volatile
 12477  013F  00F7               	movwf	Led_DynamicMoon@ptp+1
 12478  0140  082C               	movf	_audio_value,w	;volatile
 12479  0141  00F6               	movwf	Led_DynamicMoon@ptp
 12480  0142  2991               	ljmp	i1l6110
 12481  0143                     i1l6288:	
 12482                           ;led.c: 513: break;
 12483                           
 12484                           
 12485                           ;led.c: 515: Led_DynamicCloud(audio_value);
 12486  0143  0020               	movlb	0	; select bank0
 12487  0144  082D               	movf	_audio_value+1,w	;volatile
 12488  0145  00F7               	movwf	Led_DynamicCloud@ptp+1
 12489  0146  082C               	movf	_audio_value,w	;volatile
 12490  0147  00F6               	movwf	Led_DynamicCloud@ptp
 12491  0148  2A44               	ljmp	i1l6138
 12492  0149                     i1l6290:	
 12493                           ;led.c: 516: break;
 12494                           
 12495                           
 12496                           ;led.c: 518: Led_DynamicStorm(audio_value);
 12497  0149  0020               	movlb	0	; select bank0
 12498  014A  082D               	movf	_audio_value+1,w	;volatile
 12499  014B  00F7               	movwf	Led_DynamicStorm@ptp+1
 12500  014C  082C               	movf	_audio_value,w	;volatile
 12501  014D  00F6               	movwf	Led_DynamicStorm@ptp
 12502  014E  29E3               	ljmp	i1l6178
 12503  014F                     i1l802:	
 12504  014F  0008               	return
 12505  0150                     __end_of_Led_RunMusic:	
 12506  0150                     __ptext83:	
 12507 ;; *************** function _Audio_PlaySound *****************
 12508 ;; Defined at:
 12509 ;;		line 5 in file "user/src/audio.c"
 12510 ;; Parameters:    Size  Location     Type
 12511 ;;		None
 12512 ;; Auto vars:     Size  Location     Type
 12513 ;;  checksum        1    1[COMMON] unsigned char 
 12514 ;; Return value:  Size  Location     Type
 12515 ;;                  1    wreg      void 
 12516 ;; Registers used:
 12517 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12518 ;; Tracked objects:
 12519 ;;		On entry : 1F/1
 12520 ;;		On exit  : 1F/1
 12521 ;;		Unchanged: 0/0
 12522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12526 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12527 ;;Total ram usage:        1 bytes
 12528 ;; Hardware stack levels used:    1
 12529 ;; Hardware stack levels required when called:    1
 12530 ;; This function calls:
 12531 ;;		i1_EUSART_Write
 12532 ;; This function is called by:
 12533 ;;		_Led_RunMusic
 12534 ;; This function uses a non-reentrant model
 12535 ;;
 12536                           
 12537                           
 12538                           ;psect for function _Audio_PlaySound
 12539  0150                     _Audio_PlaySound:	
 12540  0150  307E               	movlw	126
 12541                           
 12542                           ;audio.c: 7: uint8_t checksum = 0x00;
 12543                           
 12544                           ;incstack = 0
 12545                           ; Regs used in _Audio_PlaySound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12546  0151  01F1               	clrf	Audio_PlaySound@checksum
 12547                           
 12548                           ;audio.c: 8: EUSART_Write ( 0x7E );
 12549  0152  217D  3180         	fcall	i1_EUSART_Write
 12550                           
 12551                           ;audio.c: 9: checksum ^= EUSART_Write ( 0x03 );
 12552  0154  3003               	movlw	3
 12553  0155  217D  3180         	fcall	i1_EUSART_Write
 12554  0157  06F1               	xorwf	Audio_PlaySound@checksum,f
 12555                           
 12556                           ;audio.c: 10: checksum ^= EUSART_Write ( 0x11 );
 12557  0158  3011               	movlw	17
 12558  0159  217D  3180         	fcall	i1_EUSART_Write
 12559  015B  06F1               	xorwf	Audio_PlaySound@checksum,f
 12560                           
 12561                           ;audio.c: 11: EUSART_Write ( checksum );
 12562  015C  0871               	movf	Audio_PlaySound@checksum,w
 12563  015D  217D  3180         	fcall	i1_EUSART_Write
 12564                           
 12565                           ;audio.c: 12: EUSART_Write ( 0xEF );
 12566  015F  30EF               	movlw	239
 12567  0160  217D               	fcall	i1_EUSART_Write
 12568  0161  0008               	return
 12569  0162                     __end_of_Audio_PlaySound:	
 12570  0162                     __ptext82:	
 12571 ;; *************** function _Audio_SelectSound *****************
 12572 ;; Defined at:
 12573 ;;		line 25 in file "user/src/audio.c"
 12574 ;; Parameters:    Size  Location     Type
 12575 ;;  index           1    wreg     unsigned char 
 12576 ;; Auto vars:     Size  Location     Type
 12577 ;;  index           1    1[COMMON] unsigned char 
 12578 ;;  checksum        1    2[COMMON] unsigned char 
 12579 ;; Return value:  Size  Location     Type
 12580 ;;                  1    wreg      void 
 12581 ;; Registers used:
 12582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12583 ;; Tracked objects:
 12584 ;;		On entry : 1F/2
 12585 ;;		On exit  : 1F/1
 12586 ;;		Unchanged: 0/0
 12587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12589 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12591 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;Total ram usage:        2 bytes
 12593 ;; Hardware stack levels used:    1
 12594 ;; Hardware stack levels required when called:    1
 12595 ;; This function calls:
 12596 ;;		i1_EUSART_Write
 12597 ;; This function is called by:
 12598 ;;		_Led_RunMusic
 12599 ;; This function uses a non-reentrant model
 12600 ;;
 12601                           
 12602                           
 12603                           ;psect for function _Audio_SelectSound
 12604  0162                     _Audio_SelectSound:	
 12605                           
 12606                           ;incstack = 0
 12607                           ; Regs used in _Audio_SelectSound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12608                           ;Audio_SelectSound@index stored from wreg
 12609  0162  00F1               	movwf	Audio_SelectSound@index
 12610  0163  307E               	movlw	126
 12611                           
 12612                           ;audio.c: 27: uint8_t checksum = 0x00;
 12613  0164  01F2               	clrf	Audio_SelectSound@checksum
 12614                           
 12615                           ;audio.c: 28: EUSART_Write ( 0x7E );
 12616  0165  217D  3180         	fcall	i1_EUSART_Write
 12617                           
 12618                           ;audio.c: 29: checksum ^= EUSART_Write ( 0x05 );
 12619  0167  3005               	movlw	5
 12620  0168  217D  3180         	fcall	i1_EUSART_Write
 12621  016A  06F2               	xorwf	Audio_SelectSound@checksum,f
 12622                           
 12623                           ;audio.c: 30: checksum ^= EUSART_Write ( 0x41 );
 12624  016B  3041               	movlw	65
 12625  016C  217D  3180         	fcall	i1_EUSART_Write
 12626  016E  06F2               	xorwf	Audio_SelectSound@checksum,f
 12627                           
 12628                           ;audio.c: 31: checksum ^= EUSART_Write ( 0x00 );
 12629  016F  3000               	movlw	0
 12630  0170  217D  3180         	fcall	i1_EUSART_Write
 12631  0172  06F2               	xorwf	Audio_SelectSound@checksum,f
 12632                           
 12633                           ;audio.c: 32: checksum ^= EUSART_Write ( index );
 12634  0173  0871               	movf	Audio_SelectSound@index,w
 12635  0174  217D  3180         	fcall	i1_EUSART_Write
 12636  0176  06F2               	xorwf	Audio_SelectSound@checksum,f
 12637                           
 12638                           ;audio.c: 33: EUSART_Write ( checksum );
 12639  0177  0872               	movf	Audio_SelectSound@checksum,w
 12640  0178  217D  3180         	fcall	i1_EUSART_Write
 12641                           
 12642                           ;audio.c: 34: EUSART_Write ( 0xEF );
 12643  017A  30EF               	movlw	239
 12644  017B  217D               	fcall	i1_EUSART_Write
 12645  017C  0008               	return
 12646  017D                     __end_of_Audio_SelectSound:	
 12647  017D                     __ptext84:	
 12648 ;; *************** function i1_EUSART_Write *****************
 12649 ;; Defined at:
 12650 ;;		line 32 in file "driver/src/eusart.c"
 12651 ;; Parameters:    Size  Location     Type
 12652 ;;  byte            1    wreg     unsigned char 
 12653 ;; Auto vars:     Size  Location     Type
 12654 ;;  byte            1    0[COMMON] unsigned char 
 12655 ;; Return value:  Size  Location     Type
 12656 ;;                  1    wreg      unsigned char 
 12657 ;; Registers used:
 12658 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12659 ;; Tracked objects:
 12660 ;;		On entry : 1C/2
 12661 ;;		On exit  : 1F/1
 12662 ;;		Unchanged: 0/0
 12663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12665 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;Total ram usage:        1 bytes
 12669 ;; Hardware stack levels used:    1
 12670 ;; This function calls:
 12671 ;;		Nothing
 12672 ;; This function is called by:
 12673 ;;		_Audio_PlaySound
 12674 ;;		_Audio_SelectSound
 12675 ;; This function uses a non-reentrant model
 12676 ;;
 12677                           
 12678                           
 12679                           ;psect for function i1_EUSART_Write
 12680  017D                     i1_EUSART_Write:	
 12681                           
 12682                           ;incstack = 0
 12683                           ; Regs used in i1_EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 12684                           ;i1EUSART_Write@byte stored from wreg
 12685  017D  00F0               	movwf	i1EUSART_Write@byte
 12686  017E                     i1l3886:	
 12687                           ;eusart.c: 34: while ( 0 == txRemain );
 12688                           
 12689  017E  0020               	movlb	0	; select bank0
 12690  017F  085E               	movf	_txRemain,w
 12691  0180  1903               	btfsc	3,2
 12692  0181  297E               	goto	i1l3886
 12693                           
 12694                           ;eusart.c: 36: if ( !PIE1bits.TXIE )
 12695  0182  0021               	movlb	1	; select bank1
 12696  0183  1A11               	btfsc	17,4	;volatile
 12697  0184  2989               	goto	i1l95
 12698                           
 12699                           ;eusart.c: 37: {
 12700                           ;eusart.c: 38: TXREG = byte;
 12701  0185  0870               	movf	i1EUSART_Write@byte,w
 12702  0186  0023               	movlb	3	; select bank3
 12703  0187  009A               	movwf	26	;volatile
 12704                           
 12705                           ;eusart.c: 39: }
 12706  0188  298D               	goto	i1l3900
 12707  0189                     i1l95:	
 12708                           
 12709                           ;eusart.c: 40: else
 12710                           ;eusart.c: 41: {
 12711                           ;eusart.c: 42: PIE1bits.TXIE = 0;
 12712                           
 12713                           ;eusart.c: 43: txBuf[txHead++] = byte;
 12714  0189  2340  3180         	fcall	PL68	;call to abstracted procedure
 12715  018B  0870               	movf	i1EUSART_Write@byte,w
 12716                           
 12717                           ;eusart.c: 44: if ( sizeof (txBuf ) <= txHead )
 12718                           
 12719                           ;eusart.c: 45: {
 12720                           ;eusart.c: 46: txHead = 0;
 12721                           
 12722                           ;eusart.c: 47: }
 12723                           ;eusart.c: 48: txRemain--;
 12724  018C  2328               	fcall	PL62	;call to abstracted procedure
 12725  018D                     i1l3900:	
 12726                           
 12727                           ;eusart.c: 49: }
 12728                           ;eusart.c: 50: PIE1bits.TXIE = 1;
 12729  018D  0021               	movlb	1	; select bank1
 12730  018E  1611               	bsf	17,4	;volatile
 12731                           
 12732                           ;eusart.c: 51: return byte;
 12733  018F  0870               	movf	i1EUSART_Write@byte,w
 12734  0190  0008               	return
 12735  0191                     __end_ofi1_EUSART_Write:	
 12736  0191                     __ptext78:	
 12737 ;; *************** function _Led_DynamicMoon *****************
 12738 ;; Defined at:
 12739 ;;		line 424 in file "user/src/led.c"
 12740 ;; Parameters:    Size  Location     Type
 12741 ;;  ptp             2    6[COMMON] unsigned int 
 12742 ;; Auto vars:     Size  Location     Type
 12743 ;;  duty           10    0[BANK0 ] unsigned int [5]
 12744 ;;  val             2   10[BANK0 ] unsigned int 
 12745 ;;  i               1   12[BANK0 ] unsigned char 
 12746 ;; Return value:  Size  Location     Type
 12747 ;;                  1    wreg      void 
 12748 ;; Registers used:
 12749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12750 ;; Tracked objects:
 12751 ;;		On entry : 1F/0
 12752 ;;		On exit  : 14/4
 12753 ;;		Unchanged: 0/0
 12754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12755 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12756 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12758 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12759 ;;Total ram usage:       19 bytes
 12760 ;; Hardware stack levels used:    1
 12761 ;; Hardware stack levels required when called:    2
 12762 ;; This function calls:
 12763 ;;		i1_Led_UpdateBright
 12764 ;;		i1___wmul
 12765 ;; This function is called by:
 12766 ;;		_Led_RunMusic
 12767 ;; This function uses a non-reentrant model
 12768 ;;
 12769                           
 12770                           
 12771                           ;psect for function _Led_DynamicMoon
 12772  0191                     _Led_DynamicMoon:	
 12773  0191                     i1l6110:	
 12774                           ;incstack = 0
 12775                           ; Regs used in _Led_DynamicMoon: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12776                           
 12777                           
 12778                           ;led.c: 425: uint8_t i;
 12779                           ;led.c: 426: uint16_t val = ptp * ( 5 + GAIN[gLedPara.mVolume] );
 12780  0191  22E6  3180         	fcall	PL10	;call to abstracted procedure
 12781  0193  3005               	movlw	5
 12782  0194  01F1               	clrf	i1___wmul@multiplier+1
 12783  0195  07F0               	addwf	i1___wmul@multiplier,f
 12784  0196  1803               	skipnc
 12785  0197  0AF1               	incf	i1___wmul@multiplier+1,f
 12786  0198  0877               	movf	Led_DynamicMoon@ptp+1,w
 12787  0199  00F3               	movwf	i1___wmul@multiplicand+1
 12788  019A  0876               	movf	Led_DynamicMoon@ptp,w
 12789  019B  00F2               	movwf	i1___wmul@multiplicand
 12790  019C  22B4  3180         	fcall	i1___wmul
 12791  019E  0871               	movf	?i1___wmul+1,w
 12792  019F  0020               	movlb	0	; select bank0
 12793  01A0  00CB               	movwf	Led_DynamicMoon@val+1
 12794  01A1  0870               	movf	?i1___wmul,w
 12795  01A2  00CA               	movwf	Led_DynamicMoon@val
 12796                           
 12797                           ;led.c: 427: uint16_t duty[5] = {0, 0, 1000, 200, 0};
 12798  01A3  30AA               	movlw	low Led_DynamicMoon@F8316
 12799  01A4  0086               	movwf	6
 12800  01A5  3000               	movlw	high Led_DynamicMoon@F8316
 12801  01A6  0087               	movwf	7
 12802  01A7  3040               	movlw	low Led_DynamicMoon@duty
 12803  01A8  0084               	movwf	4
 12804  01A9  3000               	movlw	high Led_DynamicMoon@duty
 12805  01AA  0085               	movwf	5
 12806  01AB  300A               	movlw	10
 12807  01AC  00F8               	movwf	??_Led_DynamicMoon
 12808  01AD                     u498_20:	
 12809  01AD  0016               	moviw fsr1++
 12810  01AE  001A               	movwi fsr0++
 12811  01AF  0BF8               	decfsz	??_Led_DynamicMoon,f
 12812  01B0  29AD               	goto	u498_20
 12813                           
 12814                           ;led.c: 428: if (duty[3] > val) {
 12815  01B1  0847               	movf	Led_DynamicMoon@duty+7,w
 12816  01B2  024B               	subwf	Led_DynamicMoon@val+1,w
 12817  01B3  1D03               	skipz
 12818  01B4  29B7               	goto	u499_25
 12819  01B5  0846               	movf	Led_DynamicMoon@duty+6,w
 12820  01B6  024A               	subwf	Led_DynamicMoon@val,w
 12821  01B7                     u499_25:	
 12822  01B7  1803               	skipnc
 12823  01B8  29BE               	goto	i1l6118
 12824                           
 12825                           ;led.c: 429: duty[3] -= val;
 12826  01B9  084A               	movf	Led_DynamicMoon@val,w
 12827  01BA  02C6               	subwf	Led_DynamicMoon@duty+6,f
 12828  01BB  084B               	movf	Led_DynamicMoon@val+1,w
 12829  01BC  3BC7               	subwfb	Led_DynamicMoon@duty+7,f
 12830                           
 12831                           ;led.c: 430: } else {
 12832  01BD  29C0               	goto	i1l751
 12833  01BE                     i1l6118:	
 12834                           
 12835                           ;led.c: 431: duty[3] = 0;
 12836  01BE  01C6               	clrf	Led_DynamicMoon@duty+6
 12837  01BF  01C7               	clrf	Led_DynamicMoon@duty+7
 12838  01C0                     i1l751:	
 12839                           
 12840                           ;led.c: 432: }
 12841                           ;led.c: 433: for (i = 0; i < 5; i++) {
 12842  01C0  01CC               	clrf	Led_DynamicMoon@i
 12843  01C1                     i1l6124:	
 12844                           
 12845                           ;led.c: 434: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 12846  01C1  354C               	lslf	Led_DynamicMoon@i,w
 12847  01C2  3E40               	addlw	(low (Led_DynamicMoon@duty| 0))& (0+255)
 12848  01C3  2338  3180         	fcall	PL66	;call to abstracted procedure
 12849  01C5  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 12850  01C6  231C  3180         	fcall	PL48	;call to abstracted procedure
 12851  01C8  1803               	skipnc
 12852  01C9  29D0               	goto	i1l6128
 12853                           
 12854                           ;led.c: 435: gLedRunPara.mCurrentBright[i]++;
 12855  01CA  354C               	lslf	Led_DynamicMoon@i,w
 12856  01CB  22F1  3180         	fcall	PL22	;call to abstracted procedure
 12857  01CD  1803               	skipnc
 12858  01CE  0A81               	incf	1,f
 12859                           
 12860                           ;led.c: 436: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 12861  01CF  29DC               	goto	i1l6132
 12862  01D0                     i1l6128:	
 12863  01D0  354C               	lslf	Led_DynamicMoon@i,w
 12864  01D1  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 12865  01D2  2338  3180         	fcall	PL66	;call to abstracted procedure
 12866  01D4  3E40               	addlw	(low (Led_DynamicMoon@duty| 0))& (0+255)
 12867  01D5  231C  3180         	fcall	PL48	;call to abstracted procedure
 12868  01D7  1803               	skipnc
 12869  01D8  29DC               	goto	i1l6132
 12870                           
 12871                           ;led.c: 437: gLedRunPara.mCurrentBright[i]--;
 12872  01D9  354C               	lslf	Led_DynamicMoon@i,w
 12873  01DA  22DC  3180         	fcall	PL4	;call to abstracted procedure
 12874  01DC                     i1l6132:	
 12875  01DC  3005               	movlw	5
 12876  01DD  0ACC               	incf	Led_DynamicMoon@i,f
 12877  01DE  024C               	subwf	Led_DynamicMoon@i,w
 12878  01DF  1C03               	skipc
 12879  01E0  29C1               	goto	i1l6124
 12880                           
 12881                           ;led.c: 438: }
 12882                           ;led.c: 439: }
 12883                           ;led.c: 440: Led_UpdateBright();
 12884  01E1  22C9               	fcall	i1_Led_UpdateBright
 12885  01E2  0008               	return
 12886  01E3                     __end_of_Led_DynamicMoon:	
 12887  01E3                     __ptext77:	
 12888 ;; *************** function _Led_DynamicStorm *****************
 12889 ;; Defined at:
 12890 ;;		line 470 in file "user/src/led.c"
 12891 ;; Parameters:    Size  Location     Type
 12892 ;;  ptp             2    6[COMMON] unsigned int 
 12893 ;; Auto vars:     Size  Location     Type
 12894 ;;  duty           10    0[BANK0 ] unsigned int [5]
 12895 ;;  val             2   10[BANK0 ] unsigned int 
 12896 ;;  i               1   12[BANK0 ] unsigned char 
 12897 ;; Return value:  Size  Location     Type
 12898 ;;                  1    wreg      void 
 12899 ;; Registers used:
 12900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12901 ;; Tracked objects:
 12902 ;;		On entry : 1F/0
 12903 ;;		On exit  : 14/4
 12904 ;;		Unchanged: 0/0
 12905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12906 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12907 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12908 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;Total ram usage:       19 bytes
 12911 ;; Hardware stack levels used:    1
 12912 ;; Hardware stack levels required when called:    2
 12913 ;; This function calls:
 12914 ;;		i1_Led_UpdateBright
 12915 ;;		i1___wmul
 12916 ;; This function is called by:
 12917 ;;		_Led_RunMusic
 12918 ;; This function uses a non-reentrant model
 12919 ;;
 12920                           
 12921                           
 12922                           ;psect for function _Led_DynamicStorm
 12923  01E3                     _Led_DynamicStorm:	
 12924  01E3                     i1l6178:	
 12925                           ;incstack = 0
 12926                           ; Regs used in _Led_DynamicStorm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12927                           
 12928                           
 12929                           ;led.c: 471: uint8_t i;
 12930                           ;led.c: 472: uint16_t val = ptp * ( 5 + GAIN[gLedPara.mVolume] );
 12931  01E3  22E6  3180         	fcall	PL10	;call to abstracted procedure
 12932  01E5  3005               	movlw	5
 12933  01E6  01F1               	clrf	i1___wmul@multiplier+1
 12934  01E7  07F0               	addwf	i1___wmul@multiplier,f
 12935  01E8  1803               	skipnc
 12936  01E9  0AF1               	incf	i1___wmul@multiplier+1,f
 12937  01EA  0877               	movf	Led_DynamicStorm@ptp+1,w
 12938  01EB  00F3               	movwf	i1___wmul@multiplicand+1
 12939  01EC  0876               	movf	Led_DynamicStorm@ptp,w
 12940  01ED  00F2               	movwf	i1___wmul@multiplicand
 12941  01EE  22B4  3180         	fcall	i1___wmul
 12942  01F0  0871               	movf	?i1___wmul+1,w
 12943  01F1  0020               	movlb	0	; select bank0
 12944  01F2  00CB               	movwf	Led_DynamicStorm@val+1
 12945  01F3  0870               	movf	?i1___wmul,w
 12946  01F4  00CA               	movwf	Led_DynamicStorm@val
 12947                           
 12948                           ;led.c: 473: uint16_t duty[5] = {0, 0, 600, 64, 0};
 12949  01F5  30D2               	movlw	low Led_DynamicStorm@F8336
 12950  01F6  0086               	movwf	6
 12951  01F7  3001               	movlw	high Led_DynamicStorm@F8336
 12952  01F8  0087               	movwf	7
 12953  01F9  3040               	movlw	low Led_DynamicStorm@duty
 12954  01FA  0084               	movwf	4
 12955  01FB  3000               	movlw	high Led_DynamicStorm@duty
 12956  01FC  0085               	movwf	5
 12957  01FD  300A               	movlw	10
 12958  01FE  00F8               	movwf	??_Led_DynamicStorm
 12959  01FF                     u510_20:	
 12960  01FF  0016               	moviw fsr1++
 12961  0200  001A               	movwi fsr0++
 12962  0201  0BF8               	decfsz	??_Led_DynamicStorm,f
 12963  0202  29FF               	goto	u510_20
 12964                           
 12965                           ;led.c: 474: if (duty[2] > val) {
 12966  0203  0845               	movf	Led_DynamicStorm@duty+5,w
 12967  0204  024B               	subwf	Led_DynamicStorm@val+1,w
 12968  0205  1D03               	skipz
 12969  0206  2A09               	goto	u511_25
 12970  0207  0844               	movf	Led_DynamicStorm@duty+4,w
 12971  0208  024A               	subwf	Led_DynamicStorm@val,w
 12972  0209                     u511_25:	
 12973  0209  1803               	skipnc
 12974  020A  2A10               	goto	i1l6186
 12975                           
 12976                           ;led.c: 475: duty[2] -= val;
 12977  020B  084A               	movf	Led_DynamicStorm@val,w
 12978  020C  02C4               	subwf	Led_DynamicStorm@duty+4,f
 12979  020D  084B               	movf	Led_DynamicStorm@val+1,w
 12980  020E  3BC5               	subwfb	Led_DynamicStorm@duty+5,f
 12981                           
 12982                           ;led.c: 476: } else {
 12983  020F  2A12               	goto	i1l6188
 12984  0210                     i1l6186:	
 12985                           
 12986                           ;led.c: 477: duty[2] = 0;
 12987  0210  01C4               	clrf	Led_DynamicStorm@duty+4
 12988  0211  01C5               	clrf	Led_DynamicStorm@duty+5
 12989  0212                     i1l6188:	
 12990                           
 12991                           ;led.c: 478: }
 12992                           ;led.c: 479: duty[3] += val;
 12993  0212  084A               	movf	Led_DynamicStorm@val,w
 12994  0213  07C6               	addwf	Led_DynamicStorm@duty+6,f
 12995  0214  084B               	movf	Led_DynamicStorm@val+1,w
 12996  0215  3DC7               	addwfc	Led_DynamicStorm@duty+7,f
 12997                           
 12998                           ;led.c: 480: if( duty[3] > 1000 )
 12999  0216  3003               	movlw	3
 13000  0217  0247               	subwf	Led_DynamicStorm@duty+7,w
 13001  0218  30E9               	movlw	233
 13002  0219  1903               	skipnz
 13003  021A  0246               	subwf	Led_DynamicStorm@duty+6,w
 13004  021B  1C03               	skipc
 13005  021C  2A21               	goto	i1l6194
 13006                           
 13007                           ;led.c: 481: {
 13008                           ;led.c: 482: duty[3] = 1000;
 13009  021D  30E8               	movlw	232
 13010  021E  00C6               	movwf	Led_DynamicStorm@duty+6
 13011  021F  3003               	movlw	3
 13012  0220  00C7               	movwf	Led_DynamicStorm@duty+7
 13013  0221                     i1l6194:	
 13014                           
 13015                           ;led.c: 483: }
 13016                           ;led.c: 484: for (i = 0; i < 5; i++) {
 13017  0221  01CC               	clrf	Led_DynamicStorm@i
 13018  0222                     i1l6200:	
 13019                           
 13020                           ;led.c: 485: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 13021  0222  354C               	lslf	Led_DynamicStorm@i,w
 13022  0223  3E40               	addlw	(low (Led_DynamicStorm@duty| 0))& (0+255)
 13023  0224  2350  3180         	fcall	PL72	;call to abstracted procedure
 13024  0226  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 13025  0227  2310  3180         	fcall	PL42	;call to abstracted procedure
 13026  0229  1803               	skipnc
 13027  022A  2A31               	goto	i1l6204
 13028                           
 13029                           ;led.c: 486: gLedRunPara.mCurrentBright[i]++;
 13030  022B  354C               	lslf	Led_DynamicStorm@i,w
 13031  022C  22F1  3180         	fcall	PL22	;call to abstracted procedure
 13032  022E  1803               	skipnc
 13033  022F  0A81               	incf	1,f
 13034                           
 13035                           ;led.c: 487: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 13036  0230  2A3D               	goto	i1l6208
 13037  0231                     i1l6204:	
 13038  0231  354C               	lslf	Led_DynamicStorm@i,w
 13039  0232  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 13040  0233  2350  3180         	fcall	PL72	;call to abstracted procedure
 13041  0235  3E40               	addlw	(low (Led_DynamicStorm@duty| 0))& (0+255)
 13042  0236  2310  3180         	fcall	PL42	;call to abstracted procedure
 13043  0238  1803               	skipnc
 13044  0239  2A3D               	goto	i1l6208
 13045                           
 13046                           ;led.c: 488: gLedRunPara.mCurrentBright[i]--;
 13047  023A  354C               	lslf	Led_DynamicStorm@i,w
 13048  023B  22DC  3180         	fcall	PL4	;call to abstracted procedure
 13049  023D                     i1l6208:	
 13050  023D  3005               	movlw	5
 13051  023E  0ACC               	incf	Led_DynamicStorm@i,f
 13052  023F  024C               	subwf	Led_DynamicStorm@i,w
 13053  0240  1C03               	skipc
 13054  0241  2A22               	goto	i1l6200
 13055                           
 13056                           ;led.c: 489: }
 13057                           ;led.c: 490: }
 13058                           ;led.c: 491: Led_UpdateBright();
 13059  0242  22C9               	fcall	i1_Led_UpdateBright
 13060  0243  0008               	return
 13061  0244                     __end_of_Led_DynamicStorm:	
 13062  0244                     __ptext79:	
 13063 ;; *************** function _Led_DynamicCloud *****************
 13064 ;; Defined at:
 13065 ;;		line 443 in file "user/src/led.c"
 13066 ;; Parameters:    Size  Location     Type
 13067 ;;  ptp             2    6[COMMON] unsigned int 
 13068 ;; Auto vars:     Size  Location     Type
 13069 ;;  duty           10    0[BANK0 ] unsigned int [5]
 13070 ;;  val             2   10[BANK0 ] unsigned int 
 13071 ;;  i               1   12[BANK0 ] unsigned char 
 13072 ;; Return value:  Size  Location     Type
 13073 ;;                  1    wreg      void 
 13074 ;; Registers used:
 13075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13076 ;; Tracked objects:
 13077 ;;		On entry : 1F/0
 13078 ;;		On exit  : 14/4
 13079 ;;		Unchanged: 0/0
 13080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13081 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13082 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13083 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13085 ;;Total ram usage:       19 bytes
 13086 ;; Hardware stack levels used:    1
 13087 ;; Hardware stack levels required when called:    2
 13088 ;; This function calls:
 13089 ;;		i1_Led_UpdateBright
 13090 ;;		i1___wmul
 13091 ;; This function is called by:
 13092 ;;		_Led_RunMusic
 13093 ;; This function uses a non-reentrant model
 13094 ;;
 13095                           
 13096                           
 13097                           ;psect for function _Led_DynamicCloud
 13098  0244                     _Led_DynamicCloud:	
 13099  0244                     i1l6138:	
 13100                           ;incstack = 0
 13101                           ; Regs used in _Led_DynamicCloud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13102                           
 13103                           
 13104                           ;led.c: 444: uint8_t i;
 13105                           ;led.c: 445: uint16_t val = ptp * ( 16 + GAIN[gLedPara.mVolume] );
 13106  0244  22E6  3180         	fcall	PL10	;call to abstracted procedure
 13107  0246  3010               	movlw	16
 13108  0247  01F1               	clrf	i1___wmul@multiplier+1
 13109  0248  07F0               	addwf	i1___wmul@multiplier,f
 13110  0249  1803               	skipnc
 13111  024A  0AF1               	incf	i1___wmul@multiplier+1,f
 13112  024B  0877               	movf	Led_DynamicCloud@ptp+1,w
 13113  024C  00F3               	movwf	i1___wmul@multiplicand+1
 13114  024D  0876               	movf	Led_DynamicCloud@ptp,w
 13115  024E  00F2               	movwf	i1___wmul@multiplicand
 13116  024F  22B4  3180         	fcall	i1___wmul
 13117  0251  0871               	movf	?i1___wmul+1,w
 13118  0252  0020               	movlb	0	; select bank0
 13119  0253  00CB               	movwf	Led_DynamicCloud@val+1
 13120  0254  0870               	movf	?i1___wmul,w
 13121  0255  00CA               	movwf	Led_DynamicCloud@val
 13122                           
 13123                           ;led.c: 446: uint16_t duty[5] = {200, 200, 400, 320, 400};
 13124  0256  30A0               	movlw	low Led_DynamicCloud@F8326
 13125  0257  0086               	movwf	6
 13126  0258  3000               	movlw	high Led_DynamicCloud@F8326
 13127  0259  0087               	movwf	7
 13128  025A  3040               	movlw	low Led_DynamicCloud@duty
 13129  025B  0084               	movwf	4
 13130  025C  3000               	movlw	high Led_DynamicCloud@duty
 13131  025D  0085               	movwf	5
 13132  025E  300A               	movlw	10
 13133  025F  00F8               	movwf	??_Led_DynamicCloud
 13134  0260                     u503_20:	
 13135  0260  0016               	moviw fsr1++
 13136  0261  001A               	movwi fsr0++
 13137  0262  0BF8               	decfsz	??_Led_DynamicCloud,f
 13138  0263  2A60               	goto	u503_20
 13139                           
 13140                           ;led.c: 447: duty[2] += val;
 13141  0264  084A               	movf	Led_DynamicCloud@val,w
 13142  0265  07C4               	addwf	Led_DynamicCloud@duty+4,f
 13143  0266  084B               	movf	Led_DynamicCloud@val+1,w
 13144  0267  3DC5               	addwfc	Led_DynamicCloud@duty+5,f
 13145                           
 13146                           ;led.c: 448: if (duty[2] > 1000) {
 13147  0268  3003               	movlw	3
 13148  0269  0245               	subwf	Led_DynamicCloud@duty+5,w
 13149  026A  30E9               	movlw	233
 13150  026B  1903               	skipnz
 13151  026C  0244               	subwf	Led_DynamicCloud@duty+4,w
 13152  026D  1C03               	skipc
 13153  026E  2A73               	goto	i1l762
 13154                           
 13155                           ;led.c: 449: duty[2] = 1000;
 13156  026F  30E8               	movlw	232
 13157  0270  00C4               	movwf	Led_DynamicCloud@duty+4
 13158  0271  3003               	movlw	3
 13159  0272  00C5               	movwf	Led_DynamicCloud@duty+5
 13160  0273                     i1l762:	
 13161                           
 13162                           ;led.c: 450: }
 13163                           ;led.c: 451: if (duty[3] > val) {
 13164  0273  0847               	movf	Led_DynamicCloud@duty+7,w
 13165  0274  024B               	subwf	Led_DynamicCloud@val+1,w
 13166  0275  1D03               	skipz
 13167  0276  2A79               	goto	u505_25
 13168  0277  0846               	movf	Led_DynamicCloud@duty+6,w
 13169  0278  024A               	subwf	Led_DynamicCloud@val,w
 13170  0279                     u505_25:	
 13171  0279  1803               	skipnc
 13172  027A  2A80               	goto	i1l6150
 13173                           
 13174                           ;led.c: 452: duty[3] -= val;
 13175  027B  084A               	movf	Led_DynamicCloud@val,w
 13176  027C  02C6               	subwf	Led_DynamicCloud@duty+6,f
 13177  027D  084B               	movf	Led_DynamicCloud@val+1,w
 13178  027E  3BC7               	subwfb	Led_DynamicCloud@duty+7,f
 13179                           
 13180                           ;led.c: 453: } else {
 13181  027F  2A82               	goto	i1l6152
 13182  0280                     i1l6150:	
 13183                           
 13184                           ;led.c: 454: duty[3] = 0;
 13185  0280  01C6               	clrf	Led_DynamicCloud@duty+6
 13186  0281  01C7               	clrf	Led_DynamicCloud@duty+7
 13187  0282                     i1l6152:	
 13188                           
 13189                           ;led.c: 455: }
 13190                           ;led.c: 456: duty[4] += val;
 13191  0282  084A               	movf	Led_DynamicCloud@val,w
 13192  0283  07C8               	addwf	Led_DynamicCloud@duty+8,f
 13193  0284  084B               	movf	Led_DynamicCloud@val+1,w
 13194  0285  3DC9               	addwfc	Led_DynamicCloud@duty+9,f
 13195                           
 13196                           ;led.c: 457: if (duty[4] > 1000) {
 13197  0286  3003               	movlw	3
 13198  0287  0249               	subwf	Led_DynamicCloud@duty+9,w
 13199  0288  30E9               	movlw	233
 13200  0289  1903               	skipnz
 13201  028A  0248               	subwf	Led_DynamicCloud@duty+8,w
 13202  028B  1C03               	skipc
 13203  028C  2A91               	goto	i1l6158
 13204                           
 13205                           ;led.c: 458: duty[4] = 1000;
 13206  028D  30E8               	movlw	232
 13207  028E  00C8               	movwf	Led_DynamicCloud@duty+8
 13208  028F  3003               	movlw	3
 13209  0290  00C9               	movwf	Led_DynamicCloud@duty+9
 13210  0291                     i1l6158:	
 13211                           
 13212                           ;led.c: 459: }
 13213                           ;led.c: 460: for (i = 0; i < 5; i++) {
 13214  0291  01CC               	clrf	Led_DynamicCloud@i
 13215  0292                     i1l6164:	
 13216                           
 13217                           ;led.c: 461: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 13218  0292  354C               	lslf	Led_DynamicCloud@i,w
 13219  0293  3E40               	addlw	(low (Led_DynamicCloud@duty| 0))& (0+255)
 13220  0294  2330  3180         	fcall	PL64	;call to abstracted procedure
 13221  0296  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 13222  0297  22F8  3180         	fcall	PL36	;call to abstracted procedure
 13223  0299  1803               	skipnc
 13224  029A  2AA1               	goto	i1l6168
 13225                           
 13226                           ;led.c: 462: gLedRunPara.mCurrentBright[i]++;
 13227  029B  354C               	lslf	Led_DynamicCloud@i,w
 13228  029C  22F1  3180         	fcall	PL22	;call to abstracted procedure
 13229  029E  1803               	skipnc
 13230  029F  0A81               	incf	1,f
 13231                           
 13232                           ;led.c: 463: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 13233  02A0  2AAD               	goto	i1l6172
 13234  02A1                     i1l6168:	
 13235  02A1  354C               	lslf	Led_DynamicCloud@i,w
 13236  02A2  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 13237  02A3  2330  3180         	fcall	PL64	;call to abstracted procedure
 13238  02A5  3E40               	addlw	(low (Led_DynamicCloud@duty| 0))& (0+255)
 13239  02A6  22F8  3180         	fcall	PL36	;call to abstracted procedure
 13240  02A8  1803               	skipnc
 13241  02A9  2AAD               	goto	i1l6172
 13242                           
 13243                           ;led.c: 464: gLedRunPara.mCurrentBright[i]--;
 13244  02AA  354C               	lslf	Led_DynamicCloud@i,w
 13245  02AB  22DC  3180         	fcall	PL4	;call to abstracted procedure
 13246  02AD                     i1l6172:	
 13247  02AD  3005               	movlw	5
 13248  02AE  0ACC               	incf	Led_DynamicCloud@i,f
 13249  02AF  024C               	subwf	Led_DynamicCloud@i,w
 13250  02B0  1C03               	skipc
 13251  02B1  2A92               	goto	i1l6164
 13252                           
 13253                           ;led.c: 465: }
 13254                           ;led.c: 466: }
 13255                           ;led.c: 467: Led_UpdateBright();
 13256  02B2  22C9               	fcall	i1_Led_UpdateBright
 13257  02B3  0008               	return
 13258  02B4                     __end_of_Led_DynamicCloud:	
 13259  02B4                     __ptext80:	
 13260 ;; *************** function i1___wmul *****************
 13261 ;; Defined at:
 13262 ;;		line 15 in file "/Applications/microchip/xc8/v1.40/sources/common/Umul16.c"
 13263 ;; Parameters:    Size  Location     Type
 13264 ;;  multiplier      2    0[COMMON] unsigned int 
 13265 ;;  multiplicand    2    2[COMMON] unsigned int 
 13266 ;; Auto vars:     Size  Location     Type
 13267 ;;  __wmul          2    4[COMMON] unsigned int 
 13268 ;; Return value:  Size  Location     Type
 13269 ;;                  2    0[COMMON] unsigned int 
 13270 ;; Registers used:
 13271 ;;		wreg, status,2, status,0
 13272 ;; Tracked objects:
 13273 ;;		On entry : 1F/2
 13274 ;;		On exit  : 1F/2
 13275 ;;		Unchanged: 1F/0
 13276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13277 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13278 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13280 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13281 ;;Total ram usage:        6 bytes
 13282 ;; Hardware stack levels used:    1
 13283 ;; This function calls:
 13284 ;;		Nothing
 13285 ;; This function is called by:
 13286 ;;		_Led_DynamicWave
 13287 ;;		_Led_DynamicMoon
 13288 ;;		_Led_DynamicCloud
 13289 ;;		_Led_DynamicStorm
 13290 ;; This function uses a non-reentrant model
 13291 ;;
 13292                           
 13293                           
 13294                           ;psect for function i1___wmul
 13295  02B4                     i1___wmul:	
 13296                           
 13297                           ;incstack = 0
 13298                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 13299  02B4  01F4               	clrf	i1___wmul@product
 13300  02B5  01F5               	clrf	i1___wmul@product+1
 13301  02B6                     i1l3922:	
 13302  02B6  1C70               	btfss	i1___wmul@multiplier,0
 13303  02B7  2ABC               	goto	i1l3926
 13304  02B8  0872               	movf	i1___wmul@multiplicand,w
 13305  02B9  07F4               	addwf	i1___wmul@product,f
 13306  02BA  0873               	movf	i1___wmul@multiplicand+1,w
 13307  02BB  3DF5               	addwfc	i1___wmul@product+1,f
 13308  02BC                     i1l3926:	
 13309  02BC  35F2               	lslf	i1___wmul@multiplicand,f
 13310  02BD  0DF3               	rlf	i1___wmul@multiplicand+1,f
 13311  02BE  36F1               	lsrf	i1___wmul@multiplier+1,f
 13312  02BF  0CF0               	rrf	i1___wmul@multiplier,f
 13313  02C0  0870               	movf	i1___wmul@multiplier,w
 13314  02C1  0471               	iorwf	i1___wmul@multiplier+1,w
 13315  02C2  1D03               	btfss	3,2
 13316  02C3  2AB6               	goto	i1l3922
 13317  02C4  0875               	movf	i1___wmul@product+1,w
 13318  02C5  00F1               	movwf	?i1___wmul+1
 13319  02C6  0874               	movf	i1___wmul@product,w
 13320  02C7  00F0               	movwf	?i1___wmul
 13321  02C8  0008               	return
 13322  02C9                     __end_ofi1___wmul:	
 13323  02C9                     __ptext81:	
 13324 ;; *************** function i1_Led_UpdateBright *****************
 13325 ;; Defined at:
 13326 ;;		line 144 in file "user/src/led.c"
 13327 ;; Parameters:    Size  Location     Type
 13328 ;;		None
 13329 ;; Auto vars:     Size  Location     Type
 13330 ;;  Led_UpdateBr    1    4[COMMON] unsigned char 
 13331 ;; Return value:  Size  Location     Type
 13332 ;;                  1    wreg      void 
 13333 ;; Registers used:
 13334 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13335 ;; Tracked objects:
 13336 ;;		On entry : 1F/0
 13337 ;;		On exit  : 14/4
 13338 ;;		Unchanged: 0/0
 13339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13341 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13343 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13344 ;;Total ram usage:        1 bytes
 13345 ;; Hardware stack levels used:    1
 13346 ;; Hardware stack levels required when called:    1
 13347 ;; This function calls:
 13348 ;;		i1_PWM1_LoadDutyValue
 13349 ;;		i1_PWM2_LoadDutyValue
 13350 ;;		i1_PWM3_LoadDutyValue
 13351 ;;		i1_PWM4_LoadDutyValue
 13352 ;;		i1_PWM5_LoadDutyValue
 13353 ;; This function is called by:
 13354 ;;		_Led_DynamicWave
 13355 ;;		_Led_DynamicMoon
 13356 ;;		_Led_DynamicCloud
 13357 ;;		_Led_DynamicStorm
 13358 ;; This function uses a non-reentrant model
 13359 ;;
 13360                           
 13361                           
 13362                           ;psect for function i1_Led_UpdateBright
 13363  02C9                     i1_Led_UpdateBright:	
 13364                           
 13365                           ;led.c: 145: for (uint8_t i = 0; i < 5; i++) {
 13366                           
 13367                           ;incstack = 0
 13368                           ; Regs used in i1_Led_UpdateBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13369  02C9  01F4               	clrf	i1Led_UpdateBright@i
 13370  02CA                     i1l5922:	
 13371                           
 13372                           ;led.c: 146: loadDuty[i](gLedRunPara.mCurrentBright[i]);
 13373  02CA  3574               	lslf	i1Led_UpdateBright@i,w
 13374  02CB  3185  25D0  3180   	fcall	PL76	;call to abstracted procedure
 13375  02CE  3574               	lslf	i1Led_UpdateBright@i,w
 13376  02CF  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
 13377  02D0  0086               	movwf	6
 13378  02D1  3F41               	moviw [1]fsr1
 13379  02D2  008A               	movwf	10
 13380  02D3  3F40               	moviw [0]fsr1
 13381  02D4  000A               	callw
 13382  02D5  3005               	movlw	5
 13383  02D6  3180               	pagesel	$
 13384  02D7  0AF4               	incf	i1Led_UpdateBright@i,f
 13385  02D8  0274               	subwf	i1Led_UpdateBright@i,w
 13386  02D9  1803               	btfsc	3,0
 13387  02DA  0008               	return
 13388  02DB  2ACA               	goto	i1l5922
 13389  02DC                     __end_ofi1_Led_UpdateBright:	
 13390  02DC                     PL4:	
 13391  02DC  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 13392  02DD  0086               	movwf	6
 13393  02DE  3001               	movlw	1
 13394  02DF  0187               	clrf	7
 13395  02E0  0281               	subwf	1,f
 13396  02E1  3000               	movlw	0
 13397  02E2  3141               	addfsr 1,1
 13398  02E3  3B81               	subwfb	1,f
 13399  02E4  317F               	addfsr 1,-1
 13400  02E5  0008               	return
 13401  02E6                     __end_ofPL4:	
 13402  02E6                     PL10:	
 13403  02E6  0022               	movlb	2	; select bank2
 13404  02E7  0821               	movf	(_gLedPara^(0+256)+1),w	;volatile
 13405  02E8  3E00               	addlw	low (_GAIN| (0+32768))
 13406  02E9  0084               	movwf	4
 13407  02EA  3098               	movlw	high (_GAIN| (0+32768))
 13408  02EB  1803               	skipnc
 13409  02EC  3E01               	addlw	1
 13410  02ED  0085               	movwf	5
 13411  02EE  0800               	movf	0,w	;code access
 13412  02EF  00F0               	movwf	i1___wmul@multiplier
 13413  02F0  0008               	return
 13414  02F1                     __end_ofPL10:	
 13415  02F1                     PL22:	
 13416  02F1  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 13417  02F2  0086               	movwf	6
 13418  02F3  3001               	movlw	1
 13419  02F4  0187               	clrf	7
 13420  02F5  0781               	addwf	1,f
 13421  02F6  3141               	addfsr 1,1
 13422  02F7  0008               	return
 13423  02F8                     __end_ofPL22:	
 13424  02F8                     PL36:	
 13425  02F8  0086               	movwf	6
 13426  02F9  3F40               	moviw [0]fsr1
 13427  02FA  00FA               	movwf	??_Led_DynamicCloud+2
 13428  02FB  3F41               	moviw [1]fsr1
 13429  02FC  00FB               	movwf	??_Led_DynamicCloud+3
 13430  02FD  0879               	movf	??_Led_DynamicCloud+1,w
 13431  02FE  027B               	subwf	??_Led_DynamicCloud+3,w
 13432  02FF  1D03               	skipz
 13433  0300  0008               	return
 13434  0301  0878               	movf	??_Led_DynamicCloud,w
 13435  0302  027A               	subwf	??_Led_DynamicCloud+2,w
 13436  0303  0008               	return
 13437  0304                     __end_ofPL36:	
 13438  0304                     PL38:	
 13439  0304  0086               	movwf	6
 13440  0305  3F40               	moviw [0]fsr1
 13441  0306  00FA               	movwf	??_Led_DynamicWave+2
 13442  0307  3F41               	moviw [1]fsr1
 13443  0308  00FB               	movwf	??_Led_DynamicWave+3
 13444  0309  0879               	movf	??_Led_DynamicWave+1,w
 13445  030A  027B               	subwf	??_Led_DynamicWave+3,w
 13446  030B  1D03               	skipz
 13447  030C  0008               	return
 13448  030D  0878               	movf	??_Led_DynamicWave,w
 13449  030E  027A               	subwf	??_Led_DynamicWave+2,w
 13450  030F  0008               	return
 13451  0310                     __end_ofPL38:	
 13452  0310                     PL42:	
 13453  0310  0086               	movwf	6
 13454  0311  3F40               	moviw [0]fsr1
 13455  0312  00FA               	movwf	??_Led_DynamicStorm+2
 13456  0313  3F41               	moviw [1]fsr1
 13457  0314  00FB               	movwf	??_Led_DynamicStorm+3
 13458  0315  0879               	movf	??_Led_DynamicStorm+1,w
 13459  0316  027B               	subwf	??_Led_DynamicStorm+3,w
 13460  0317  1D03               	skipz
 13461  0318  0008               	return
 13462  0319  0878               	movf	??_Led_DynamicStorm,w
 13463  031A  027A               	subwf	??_Led_DynamicStorm+2,w
 13464  031B  0008               	return
 13465  031C                     __end_ofPL42:	
 13466  031C                     PL48:	
 13467  031C  0086               	movwf	6
 13468  031D  3F40               	moviw [0]fsr1
 13469  031E  00FA               	movwf	??_Led_DynamicMoon+2
 13470  031F  3F41               	moviw [1]fsr1
 13471  0320  00FB               	movwf	??_Led_DynamicMoon+3
 13472  0321  0879               	movf	??_Led_DynamicMoon+1,w
 13473  0322  027B               	subwf	??_Led_DynamicMoon+3,w
 13474  0323  1D03               	skipz
 13475  0324  0008               	return
 13476  0325  0878               	movf	??_Led_DynamicMoon,w
 13477  0326  027A               	subwf	??_Led_DynamicMoon+2,w
 13478  0327  0008               	return
 13479  0328                     __end_ofPL48:	
 13480  0328                     PL62:	
 13481  0328  0081               	movwf	1
 13482  0329  3020               	movlw	32
 13483  032A  0AB4               	incf	_txHead,f
 13484  032B  0234               	subwf	_txHead,w
 13485  032C  1803               	btfsc	3,0
 13486  032D  01B4               	clrf	_txHead
 13487  032E  03DE               	decf	_txRemain,f
 13488  032F  0008               	return
 13489  0330                     __end_ofPL62:	
 13490  0330                     PL64:	
 13491  0330  0086               	movwf	6
 13492  0331  0187               	clrf	7
 13493  0332  3F40               	moviw [0]fsr1
 13494  0333  00F8               	movwf	??_Led_DynamicCloud
 13495  0334  3F41               	moviw [1]fsr1
 13496  0335  00F9               	movwf	??_Led_DynamicCloud+1
 13497  0336  354C               	lslf	Led_DynamicCloud@i,w
 13498  0337  0008               	return
 13499  0338                     __end_ofPL64:	
 13500  0338                     PL66:	
 13501  0338  0086               	movwf	6
 13502  0339  0187               	clrf	7
 13503  033A  3F40               	moviw [0]fsr1
 13504  033B  00F8               	movwf	??_Led_DynamicMoon
 13505  033C  3F41               	moviw [1]fsr1
 13506  033D  00F9               	movwf	??_Led_DynamicMoon+1
 13507  033E  354C               	lslf	Led_DynamicMoon@i,w
 13508  033F  0008               	return
 13509  0340                     __end_ofPL66:	
 13510  0340                     PL68:	
 13511  0340  1211               	bcf	17,4	;volatile
 13512  0341  0020               	movlb	0	; select bank0
 13513  0342  0834               	movf	_txHead,w
 13514  0343  3EA0               	addlw	(low (_txBuf| (0+256)))& (0+255)
 13515  0344  0086               	movwf	6
 13516  0345  3001               	movlw	1	; select bank3/4
 13517  0346  0087               	movwf	7
 13518  0347  0008               	return
 13519  0348                     __end_ofPL68:	
 13520  0348                     PL70:	
 13521  0348  0086               	movwf	6
 13522  0349  0187               	clrf	7
 13523  034A  3F40               	moviw [0]fsr1
 13524  034B  00F8               	movwf	??_Led_DynamicWave
 13525  034C  3F41               	moviw [1]fsr1
 13526  034D  00F9               	movwf	??_Led_DynamicWave+1
 13527  034E  354C               	lslf	Led_DynamicWave@i,w
 13528  034F  0008               	return
 13529  0350                     __end_ofPL70:	
 13530  0350                     PL72:	
 13531  0350  0086               	movwf	6
 13532  0351  0187               	clrf	7
 13533  0352  3F40               	moviw [0]fsr1
 13534  0353  00F8               	movwf	??_Led_DynamicStorm
 13535  0354  3F41               	moviw [1]fsr1
 13536  0355  00F9               	movwf	??_Led_DynamicStorm+1
 13537  0356  354C               	lslf	Led_DynamicStorm@i,w
 13538  0357  0008               	return
 13539  0358                     __end_ofPL72:	
 13540  0358                     PL88:	
 13541  0358  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 13542  0359  00FC               	movwf	??_Led_RunMusic
 13543  035A  0CFC               	rrf	??_Led_RunMusic,f
 13544  035B  0C7C               	rrf	??_Led_RunMusic,w
 13545  035C  390F               	andlw	15
 13546  035D  0008               	return
 13547  035E                     __end_ofPL88:	
 13548                           
 13549                           	psect	text53
 13550  1511                     __ptext53:	
 13551 ;; *************** function _PWM4_LoadDutyValue *****************
 13552 ;; Defined at:
 13553 ;;		line 49 in file "driver/src/pwm.c"
 13554 ;; Parameters:    Size  Location     Type
 13555 ;;  dutyValue       2   14[BANK0 ] unsigned int 
 13556 ;; Auto vars:     Size  Location     Type
 13557 ;;		None
 13558 ;; Return value:  Size  Location     Type
 13559 ;;                  1    wreg      void 
 13560 ;; Registers used:
 13561 ;;		wreg
 13562 ;; Tracked objects:
 13563 ;;		On entry : 10/0
 13564 ;;		On exit  : 1F/6
 13565 ;;		Unchanged: 0/0
 13566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13567 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13570 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13571 ;;Total ram usage:        2 bytes
 13572 ;; Hardware stack levels used:    1
 13573 ;; Hardware stack levels required when called:    7
 13574 ;; This function calls:
 13575 ;;		Nothing
 13576 ;; This function is called by:
 13577 ;;		_Led_UpdateBright
 13578 ;;		i1_Led_UpdateBright
 13579 ;;		_Led_Ramp
 13580 ;; This function uses a non-reentrant model
 13581 ;;
 13582                           
 13583                           
 13584                           ;psect for function _PWM4_LoadDutyValue
 13585  1511                     _PWM4_LoadDutyValue:	
 13586                           
 13587                           ;Skip over the trampoline to the duplicate function for level 1
 13588  1511  1C7E               	btfss	126,0
 13589  1512  2D14               	goto	l5810
 13590  1513  2D1D               	ljmp	i1l3778
 13591  1514                     _PWM4_LoadDutyValue$intlevel0:	
 13592  1514                     l5810:	
 13593                           ;incstack = 0
 13594                           ; Regs used in _PWM4_LoadDutyValue: [wreg]
 13595                           
 13596                           
 13597                           ;pwm.c: 51: CCPR4 = dutyValue;
 13598  1514  0020               	movlb	0	; select bank0
 13599  1515  084F               	movf	PWM4_LoadDutyValue@dutyValue+1,w
 13600  1516  0026               	movlb	6	; select bank6
 13601  1517  0096               	movwf	22	;volatile
 13602  1518  0020               	movlb	0	; select bank0
 13603  1519  084E               	movf	PWM4_LoadDutyValue@dutyValue,w
 13604  151A  0026               	movlb	6	; select bank6
 13605  151B  0095               	movwf	21	;volatile
 13606  151C  0008               	return
 13607  151D                     __end_of_PWM4_LoadDutyValue:	
 13608  151D                     __ptext86:	
 13609 ;; *************** function i1_PWM4_LoadDutyValue *****************
 13610 ;; Defined at:
 13611 ;;		line 49 in file "driver/src/pwm.c"
 13612 ;; Parameters:    Size  Location     Type
 13613 ;;  dutyValue       2    0[COMMON] unsigned int 
 13614 ;; Auto vars:     Size  Location     Type
 13615 ;;		None
 13616 ;; Return value:  Size  Location     Type
 13617 ;;                  1    wreg      void 
 13618 ;; Registers used:
 13619 ;;		wreg
 13620 ;; Tracked objects:
 13621 ;;		On entry : 0/0
 13622 ;;		On exit  : 1F/6
 13623 ;;		Unchanged: 0/0
 13624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13625 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13628 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13629 ;;Total ram usage:        2 bytes
 13630 ;; Hardware stack levels used:    1
 13631 ;; This function calls:
 13632 ;;		Nothing
 13633 ;; This function is called by:
 13634 ;; This function uses a non-reentrant model
 13635 ;;
 13636                           
 13637                           
 13638                           ;psect for function i1_PWM4_LoadDutyValue
 13639  151D                     i1_PWM4_LoadDutyValue:	
 13640  151D                     i1l3778:	
 13641                           ;incstack = 0
 13642                           ; Regs used in i1_PWM4_LoadDutyValue: [wreg]
 13643                           
 13644                           
 13645                           ;pwm.c: 51: CCPR4 = dutyValue;
 13646  151D  0871               	movf	i1PWM4_LoadDutyValue@dutyValue+1,w
 13647  151E  0026               	movlb	6	; select bank6
 13648  151F  0096               	movwf	22	;volatile
 13649  1520  0870               	movf	i1PWM4_LoadDutyValue@dutyValue,w
 13650  1521  0095               	movwf	21	;volatile
 13651  1522  0008               	return
 13652  1523                     __end_ofi1_PWM4_LoadDutyValue:	
 13653                           
 13654                           	psect	text54
 13655  14FF                     __ptext54:	
 13656 ;; *************** function _PWM3_LoadDutyValue *****************
 13657 ;; Defined at:
 13658 ;;		line 37 in file "driver/src/pwm.c"
 13659 ;; Parameters:    Size  Location     Type
 13660 ;;  dutyValue       2   14[BANK0 ] unsigned int 
 13661 ;; Auto vars:     Size  Location     Type
 13662 ;;		None
 13663 ;; Return value:  Size  Location     Type
 13664 ;;                  1    wreg      void 
 13665 ;; Registers used:
 13666 ;;		wreg
 13667 ;; Tracked objects:
 13668 ;;		On entry : 10/0
 13669 ;;		On exit  : 1F/6
 13670 ;;		Unchanged: 0/0
 13671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13672 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13676 ;;Total ram usage:        2 bytes
 13677 ;; Hardware stack levels used:    1
 13678 ;; Hardware stack levels required when called:    7
 13679 ;; This function calls:
 13680 ;;		Nothing
 13681 ;; This function is called by:
 13682 ;;		_Led_UpdateBright
 13683 ;;		i1_Led_UpdateBright
 13684 ;;		_Led_Ramp
 13685 ;; This function uses a non-reentrant model
 13686 ;;
 13687                           
 13688                           
 13689                           ;psect for function _PWM3_LoadDutyValue
 13690  14FF                     _PWM3_LoadDutyValue:	
 13691                           
 13692                           ;Skip over the trampoline to the duplicate function for level 1
 13693  14FF  1C7E               	btfss	126,0
 13694  1500  2D02               	goto	l5808
 13695  1501  2D0B               	ljmp	i1l3776
 13696  1502                     _PWM3_LoadDutyValue$intlevel0:	
 13697  1502                     l5808:	
 13698                           ;incstack = 0
 13699                           ; Regs used in _PWM3_LoadDutyValue: [wreg]
 13700                           
 13701                           
 13702                           ;pwm.c: 39: CCPR3 = dutyValue;
 13703  1502  0020               	movlb	0	; select bank0
 13704  1503  084F               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 13705  1504  0026               	movlb	6	; select bank6
 13706  1505  0092               	movwf	18	;volatile
 13707  1506  0020               	movlb	0	; select bank0
 13708  1507  084E               	movf	PWM3_LoadDutyValue@dutyValue,w
 13709  1508  0026               	movlb	6	; select bank6
 13710  1509  0091               	movwf	17	;volatile
 13711  150A  0008               	return
 13712  150B                     __end_of_PWM3_LoadDutyValue:	
 13713  150B                     __ptext87:	
 13714 ;; *************** function i1_PWM3_LoadDutyValue *****************
 13715 ;; Defined at:
 13716 ;;		line 37 in file "driver/src/pwm.c"
 13717 ;; Parameters:    Size  Location     Type
 13718 ;;  dutyValue       2    0[COMMON] unsigned int 
 13719 ;; Auto vars:     Size  Location     Type
 13720 ;;		None
 13721 ;; Return value:  Size  Location     Type
 13722 ;;                  1    wreg      void 
 13723 ;; Registers used:
 13724 ;;		wreg
 13725 ;; Tracked objects:
 13726 ;;		On entry : 0/0
 13727 ;;		On exit  : 1F/6
 13728 ;;		Unchanged: 0/0
 13729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13730 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;Total ram usage:        2 bytes
 13735 ;; Hardware stack levels used:    1
 13736 ;; This function calls:
 13737 ;;		Nothing
 13738 ;; This function is called by:
 13739 ;; This function uses a non-reentrant model
 13740 ;;
 13741                           
 13742                           
 13743                           ;psect for function i1_PWM3_LoadDutyValue
 13744  150B                     i1_PWM3_LoadDutyValue:	
 13745  150B                     i1l3776:	
 13746                           ;incstack = 0
 13747                           ; Regs used in i1_PWM3_LoadDutyValue: [wreg]
 13748                           
 13749                           
 13750                           ;pwm.c: 39: CCPR3 = dutyValue;
 13751  150B  0871               	movf	i1PWM3_LoadDutyValue@dutyValue+1,w
 13752  150C  0026               	movlb	6	; select bank6
 13753  150D  0092               	movwf	18	;volatile
 13754  150E  0870               	movf	i1PWM3_LoadDutyValue@dutyValue,w
 13755  150F  0091               	movwf	17	;volatile
 13756  1510  0008               	return
 13757  1511                     __end_ofi1_PWM3_LoadDutyValue:	
 13758                           
 13759                           	psect	text55
 13760  14ED                     __ptext55:	
 13761 ;; *************** function _PWM2_LoadDutyValue *****************
 13762 ;; Defined at:
 13763 ;;		line 25 in file "driver/src/pwm.c"
 13764 ;; Parameters:    Size  Location     Type
 13765 ;;  dutyValue       2   14[BANK0 ] unsigned int 
 13766 ;; Auto vars:     Size  Location     Type
 13767 ;;		None
 13768 ;; Return value:  Size  Location     Type
 13769 ;;                  1    wreg      void 
 13770 ;; Registers used:
 13771 ;;		wreg
 13772 ;; Tracked objects:
 13773 ;;		On entry : 10/0
 13774 ;;		On exit  : 1F/5
 13775 ;;		Unchanged: 0/0
 13776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13777 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;Total ram usage:        2 bytes
 13782 ;; Hardware stack levels used:    1
 13783 ;; Hardware stack levels required when called:    7
 13784 ;; This function calls:
 13785 ;;		Nothing
 13786 ;; This function is called by:
 13787 ;;		_Led_UpdateBright
 13788 ;;		i1_Led_UpdateBright
 13789 ;;		_Led_Ramp
 13790 ;; This function uses a non-reentrant model
 13791 ;;
 13792                           
 13793                           
 13794                           ;psect for function _PWM2_LoadDutyValue
 13795  14ED                     _PWM2_LoadDutyValue:	
 13796                           
 13797                           ;Skip over the trampoline to the duplicate function for level 1
 13798  14ED  1C7E               	btfss	126,0
 13799  14EE  2CF0               	goto	l5806
 13800  14EF  2CF9               	ljmp	i1l3774
 13801  14F0                     _PWM2_LoadDutyValue$intlevel0:	
 13802  14F0                     l5806:	
 13803                           ;incstack = 0
 13804                           ; Regs used in _PWM2_LoadDutyValue: [wreg]
 13805                           
 13806                           
 13807                           ;pwm.c: 27: CCPR2 = dutyValue;
 13808  14F0  0020               	movlb	0	; select bank0
 13809  14F1  084F               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 13810  14F2  0025               	movlb	5	; select bank5
 13811  14F3  0096               	movwf	22	;volatile
 13812  14F4  0020               	movlb	0	; select bank0
 13813  14F5  084E               	movf	PWM2_LoadDutyValue@dutyValue,w
 13814  14F6  0025               	movlb	5	; select bank5
 13815  14F7  0095               	movwf	21	;volatile
 13816  14F8  0008               	return
 13817  14F9                     __end_of_PWM2_LoadDutyValue:	
 13818  14F9                     __ptext88:	
 13819 ;; *************** function i1_PWM2_LoadDutyValue *****************
 13820 ;; Defined at:
 13821 ;;		line 25 in file "driver/src/pwm.c"
 13822 ;; Parameters:    Size  Location     Type
 13823 ;;  dutyValue       2    0[COMMON] unsigned int 
 13824 ;; Auto vars:     Size  Location     Type
 13825 ;;		None
 13826 ;; Return value:  Size  Location     Type
 13827 ;;                  1    wreg      void 
 13828 ;; Registers used:
 13829 ;;		wreg
 13830 ;; Tracked objects:
 13831 ;;		On entry : 0/0
 13832 ;;		On exit  : 1F/5
 13833 ;;		Unchanged: 0/0
 13834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13835 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13838 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13839 ;;Total ram usage:        2 bytes
 13840 ;; Hardware stack levels used:    1
 13841 ;; This function calls:
 13842 ;;		Nothing
 13843 ;; This function is called by:
 13844 ;; This function uses a non-reentrant model
 13845 ;;
 13846                           
 13847                           
 13848                           ;psect for function i1_PWM2_LoadDutyValue
 13849  14F9                     i1_PWM2_LoadDutyValue:	
 13850  14F9                     i1l3774:	
 13851                           ;incstack = 0
 13852                           ; Regs used in i1_PWM2_LoadDutyValue: [wreg]
 13853                           
 13854                           
 13855                           ;pwm.c: 27: CCPR2 = dutyValue;
 13856  14F9  0871               	movf	i1PWM2_LoadDutyValue@dutyValue+1,w
 13857  14FA  0025               	movlb	5	; select bank5
 13858  14FB  0096               	movwf	22	;volatile
 13859  14FC  0870               	movf	i1PWM2_LoadDutyValue@dutyValue,w
 13860  14FD  0095               	movwf	21	;volatile
 13861  14FE  0008               	return
 13862  14FF                     __end_ofi1_PWM2_LoadDutyValue:	
 13863                           
 13864                           	psect	text56
 13865  14DB                     __ptext56:	
 13866 ;; *************** function _PWM1_LoadDutyValue *****************
 13867 ;; Defined at:
 13868 ;;		line 13 in file "driver/src/pwm.c"
 13869 ;; Parameters:    Size  Location     Type
 13870 ;;  dutyValue       2   14[BANK0 ] unsigned int 
 13871 ;; Auto vars:     Size  Location     Type
 13872 ;;		None
 13873 ;; Return value:  Size  Location     Type
 13874 ;;                  1    wreg      void 
 13875 ;; Registers used:
 13876 ;;		wreg
 13877 ;; Tracked objects:
 13878 ;;		On entry : 10/0
 13879 ;;		On exit  : 1F/5
 13880 ;;		Unchanged: 0/0
 13881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13882 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;Total ram usage:        2 bytes
 13887 ;; Hardware stack levels used:    1
 13888 ;; Hardware stack levels required when called:    7
 13889 ;; This function calls:
 13890 ;;		Nothing
 13891 ;; This function is called by:
 13892 ;;		_Led_UpdateBright
 13893 ;;		i1_Led_UpdateBright
 13894 ;;		_Led_Ramp
 13895 ;; This function uses a non-reentrant model
 13896 ;;
 13897                           
 13898                           
 13899                           ;psect for function _PWM1_LoadDutyValue
 13900  14DB                     _PWM1_LoadDutyValue:	
 13901                           
 13902                           ;Skip over the trampoline to the duplicate function for level 1
 13903  14DB  1C7E               	btfss	126,0
 13904  14DC  2CDE               	goto	l5804
 13905  14DD  2CE7               	ljmp	i1l3772
 13906  14DE                     _PWM1_LoadDutyValue$intlevel0:	
 13907  14DE                     l5804:	
 13908                           ;incstack = 0
 13909                           ; Regs used in _PWM1_LoadDutyValue: [wreg]
 13910                           
 13911                           
 13912                           ;pwm.c: 15: CCPR1 = dutyValue;
 13913  14DE  0020               	movlb	0	; select bank0
 13914  14DF  084F               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 13915  14E0  0025               	movlb	5	; select bank5
 13916  14E1  0092               	movwf	18	;volatile
 13917  14E2  0020               	movlb	0	; select bank0
 13918  14E3  084E               	movf	PWM1_LoadDutyValue@dutyValue,w
 13919  14E4  0025               	movlb	5	; select bank5
 13920  14E5  0091               	movwf	17	;volatile
 13921  14E6  0008               	return
 13922  14E7                     __end_of_PWM1_LoadDutyValue:	
 13923  14E7                     __ptext89:	
 13924 ;; *************** function i1_PWM1_LoadDutyValue *****************
 13925 ;; Defined at:
 13926 ;;		line 13 in file "driver/src/pwm.c"
 13927 ;; Parameters:    Size  Location     Type
 13928 ;;  dutyValue       2    0[COMMON] unsigned int 
 13929 ;; Auto vars:     Size  Location     Type
 13930 ;;		None
 13931 ;; Return value:  Size  Location     Type
 13932 ;;                  1    wreg      void 
 13933 ;; Registers used:
 13934 ;;		wreg
 13935 ;; Tracked objects:
 13936 ;;		On entry : 0/0
 13937 ;;		On exit  : 1F/5
 13938 ;;		Unchanged: 0/0
 13939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13940 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13944 ;;Total ram usage:        2 bytes
 13945 ;; Hardware stack levels used:    1
 13946 ;; This function calls:
 13947 ;;		Nothing
 13948 ;; This function is called by:
 13949 ;; This function uses a non-reentrant model
 13950 ;;
 13951                           
 13952                           
 13953                           ;psect for function i1_PWM1_LoadDutyValue
 13954  14E7                     i1_PWM1_LoadDutyValue:	
 13955  14E7                     i1l3772:	
 13956                           ;incstack = 0
 13957                           ; Regs used in i1_PWM1_LoadDutyValue: [wreg]
 13958                           
 13959                           
 13960                           ;pwm.c: 15: CCPR1 = dutyValue;
 13961  14E7  0871               	movf	i1PWM1_LoadDutyValue@dutyValue+1,w
 13962  14E8  0025               	movlb	5	; select bank5
 13963  14E9  0092               	movwf	18	;volatile
 13964  14EA  0870               	movf	i1PWM1_LoadDutyValue@dutyValue,w
 13965  14EB  0091               	movwf	17	;volatile
 13966  14EC  0008               	return
 13967  14ED                     __end_ofi1_PWM1_LoadDutyValue:	
 13968                           
 13969                           	psect	text57
 13970  07DA                     __ptext57:	
 13971 ;; *************** function _PWM5_LoadDutyValue *****************
 13972 ;; Defined at:
 13973 ;;		line 61 in file "driver/src/pwm.c"
 13974 ;; Parameters:    Size  Location     Type
 13975 ;;  dutyValue       2   14[BANK0 ] unsigned int 
 13976 ;; Auto vars:     Size  Location     Type
 13977 ;;		None
 13978 ;; Return value:  Size  Location     Type
 13979 ;;                  1    wreg      void 
 13980 ;; Registers used:
 13981 ;;		wreg
 13982 ;; Tracked objects:
 13983 ;;		On entry : 10/0
 13984 ;;		On exit  : 1F/C
 13985 ;;		Unchanged: 0/0
 13986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13987 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13989 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13990 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13991 ;;Total ram usage:        4 bytes
 13992 ;; Hardware stack levels used:    1
 13993 ;; Hardware stack levels required when called:    7
 13994 ;; This function calls:
 13995 ;;		Nothing
 13996 ;; This function is called by:
 13997 ;;		_Led_UpdateBright
 13998 ;;		i1_Led_UpdateBright
 13999 ;;		_Led_Ramp
 14000 ;; This function uses a non-reentrant model
 14001 ;;
 14002                           
 14003                           
 14004                           ;psect for function _PWM5_LoadDutyValue
 14005  07DA                     _PWM5_LoadDutyValue:	
 14006                           
 14007                           ;Skip over the trampoline to the duplicate function for level 1
 14008  07DA  1C7E               	btfss	126,0
 14009  07DB  2FDD               	goto	l5812
 14010  07DC  2FEF               	ljmp	i1l3780
 14011  07DD                     _PWM5_LoadDutyValue$intlevel0:	
 14012  07DD                     l5812:	
 14013                           ;incstack = 0
 14014                           ; Regs used in _PWM5_LoadDutyValue: [wreg]
 14015                           
 14016                           
 14017                           ;pwm.c: 63: PWM5DC = dutyValue << 6;
 14018  07DD  0020               	movlb	0	; select bank0
 14019  07DE  084F               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 14020  07DF  00D1               	movwf	??_PWM5_LoadDutyValue+1
 14021  07E0  084E               	movf	PWM5_LoadDutyValue@dutyValue,w
 14022  07E1  00D0               	movwf	??_PWM5_LoadDutyValue
 14023  07E2  3006               	movlw	6
 14024  07E3                     u4705:	
 14025  07E3  35D0               	lslf	??_PWM5_LoadDutyValue,f
 14026  07E4  0DD1               	rlf	??_PWM5_LoadDutyValue+1,f
 14027  07E5  0B89               	decfsz	9,f
 14028  07E6  2FE3               	goto	u4705
 14029  07E7  0850               	movf	??_PWM5_LoadDutyValue,w
 14030  07E8  002C               	movlb	12	; select bank12
 14031  07E9  0097               	movwf	23	;volatile
 14032  07EA  0020               	movlb	0	; select bank0
 14033  07EB  0851               	movf	??_PWM5_LoadDutyValue+1,w
 14034  07EC  002C               	movlb	12	; select bank12
 14035  07ED  0098               	movwf	24	;volatile
 14036  07EE  0008               	return
 14037  07EF                     __end_of_PWM5_LoadDutyValue:	
 14038  07EF                     __ptext90:	
 14039 ;; *************** function i1_PWM5_LoadDutyValue *****************
 14040 ;; Defined at:
 14041 ;;		line 61 in file "driver/src/pwm.c"
 14042 ;; Parameters:    Size  Location     Type
 14043 ;;  dutyValue       2    0[COMMON] unsigned int 
 14044 ;; Auto vars:     Size  Location     Type
 14045 ;;		None
 14046 ;; Return value:  Size  Location     Type
 14047 ;;                  1    wreg      void 
 14048 ;; Registers used:
 14049 ;;		wreg
 14050 ;; Tracked objects:
 14051 ;;		On entry : 0/0
 14052 ;;		On exit  : 1F/C
 14053 ;;		Unchanged: 0/0
 14054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14055 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14057 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14058 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14059 ;;Total ram usage:        4 bytes
 14060 ;; Hardware stack levels used:    1
 14061 ;; This function calls:
 14062 ;;		Nothing
 14063 ;; This function is called by:
 14064 ;; This function uses a non-reentrant model
 14065 ;;
 14066                           
 14067                           
 14068                           ;psect for function i1_PWM5_LoadDutyValue
 14069  07EF                     i1_PWM5_LoadDutyValue:	
 14070  07EF                     i1l3780:	
 14071                           ;incstack = 0
 14072                           ; Regs used in i1_PWM5_LoadDutyValue: [wreg]
 14073                           
 14074                           
 14075                           ;pwm.c: 63: PWM5DC = dutyValue << 6;
 14076  07EF  0871               	movf	i1PWM5_LoadDutyValue@dutyValue+1,w
 14077  07F0  00F3               	movwf	??i1_PWM5_LoadDutyValue+1
 14078  07F1  0870               	movf	i1PWM5_LoadDutyValue@dutyValue,w
 14079  07F2  00F2               	movwf	??i1_PWM5_LoadDutyValue
 14080  07F3  3006               	movlw	6
 14081  07F4                     u238_25:	
 14082  07F4  35F2               	lslf	??i1_PWM5_LoadDutyValue,f
 14083  07F5  0DF3               	rlf	??i1_PWM5_LoadDutyValue+1,f
 14084  07F6  0B89               	decfsz	9,f
 14085  07F7  2FF4               	goto	u238_25
 14086  07F8  0872               	movf	??i1_PWM5_LoadDutyValue,w
 14087  07F9  002C               	movlb	12	; select bank12
 14088  07FA  0097               	movwf	23	;volatile
 14089  07FB  0873               	movf	??i1_PWM5_LoadDutyValue+1,w
 14090  07FC  0098               	movwf	24	;volatile
 14091  07FD  0008               	return
 14092  07FE                     __end_ofi1_PWM5_LoadDutyValue:	
 14093                           
 14094                           	psect	intentry
 14095  0004                     __pintentry:	
 14096 ;; *************** function _ISR *****************
 14097 ;; Defined at:
 14098 ;;		line 74 in file "user/src/main.c"
 14099 ;; Parameters:    Size  Location     Type
 14100 ;;		None
 14101 ;; Auto vars:     Size  Location     Type
 14102 ;;		None
 14103 ;; Return value:  Size  Location     Type
 14104 ;;                  1    wreg      void 
 14105 ;; Registers used:
 14106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14107 ;; Tracked objects:
 14108 ;;		On entry : 0/0
 14109 ;;		On exit  : 0/0
 14110 ;;		Unchanged: 0/0
 14111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;Total ram usage:        0 bytes
 14117 ;; Hardware stack levels used:    1
 14118 ;; Hardware stack levels required when called:    6
 14119 ;; This function calls:
 14120 ;;		_EUSART_Transmit_ISR
 14121 ;;		_TMR0_ISR
 14122 ;;		_TMR1_GATE_ISR
 14123 ;;		_TMR2_ISR
 14124 ;;		_TMR4_ISR
 14125 ;; This function is called by:
 14126 ;;		Interrupt level 1
 14127 ;; This function uses a non-reentrant model
 14128 ;;
 14129                           
 14130  0004                     _ISR:	
 14131                           
 14132                           ;incstack = 0
 14133  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14134                           
 14135                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14136  0005  3180               	pagesel	$
 14137                           
 14138                           ;main.c: 75: if (PIR1bits.TMR1GIF) {
 14139  0006  0020               	movlb	0	; select bank0
 14140  0007  1F91               	btfss	17,7	;volatile
 14141  0008  280D               	goto	i1l517
 14142                           
 14143                           ;main.c: 76: TMR1_GATE_ISR();
 14144  0009  3194  24B7  3180   	fcall	_TMR1_GATE_ISR
 14145                           
 14146                           ;main.c: 77: } else if (PIE1bits.TMR2IE && PIR1bits.TMR2IF) {
 14147  000C  282C               	goto	i1l526
 14148  000D                     i1l517:	
 14149  000D  0021               	movlb	1	; select bank1
 14150  000E  1C91               	btfss	17,1	;volatile
 14151  000F  2817               	goto	i1l519
 14152  0010  0020               	movlb	0	; select bank0
 14153  0011  1C91               	btfss	17,1	;volatile
 14154  0012  2817               	goto	i1l519
 14155                           
 14156                           ;main.c: 78: TMR2_ISR();
 14157  0013  3194  24C3  3180   	fcall	_TMR2_ISR
 14158                           
 14159                           ;main.c: 79: } else if (PIR0bits.TMR0IF) {
 14160  0016  282C               	goto	i1l526
 14161  0017                     i1l519:	
 14162  0017  0020               	movlb	0	; select bank0
 14163  0018  1E90               	btfss	16,5	;volatile
 14164  0019  281E               	goto	i1l521
 14165                           
 14166                           ;main.c: 80: TMR0_ISR();
 14167  001A  3194  24AB  3180   	fcall	_TMR0_ISR
 14168                           
 14169                           ;main.c: 81: } else if (PIR2bits.TMR4IF) {
 14170  001D  282C               	goto	i1l526
 14171  001E                     i1l521:	
 14172  001E  1C92               	btfss	18,1	;volatile
 14173  001F  2824               	goto	i1l523
 14174                           
 14175                           ;main.c: 82: TMR4_ISR();
 14176  0020  3194  24CF  3180   	fcall	_TMR4_ISR
 14177                           
 14178                           ;main.c: 83: } else if (PIE1bits.TXIE && PIR1bits.TXIF) {
 14179  0023  282C               	goto	i1l526
 14180  0024                     i1l523:	
 14181  0024  0021               	movlb	1	; select bank1
 14182  0025  1E11               	btfss	17,4	;volatile
 14183  0026  282C               	goto	i1l526
 14184  0027  0020               	movlb	0	; select bank0
 14185  0028  1E11               	btfss	17,4	;volatile
 14186  0029  282C               	goto	i1l526
 14187                           
 14188                           ;main.c: 84: EUSART_Transmit_ISR();
 14189  002A  3195  2539         	fcall	_EUSART_Transmit_ISR
 14190  002C                     i1l526:	
 14191  002C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14192  002D  0009               	retfie
 14193  002E                     __end_of_ISR:	
 14194                           
 14195                           	psect	text68
 14196  14CF                     __ptext68:	
 14197 ;; *************** function _TMR4_ISR *****************
 14198 ;; Defined at:
 14199 ;;		line 27 in file "driver/src/tmr4.c"
 14200 ;; Parameters:    Size  Location     Type
 14201 ;;		None
 14202 ;; Auto vars:     Size  Location     Type
 14203 ;;		None
 14204 ;; Return value:  Size  Location     Type
 14205 ;;                  1    wreg      void 
 14206 ;; Registers used:
 14207 ;;		wreg, status,2, status,0, pclath, cstack
 14208 ;; Tracked objects:
 14209 ;;		On entry : 1F/0
 14210 ;;		On exit  : 0/0
 14211 ;;		Unchanged: 0/0
 14212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14217 ;;Total ram usage:        0 bytes
 14218 ;; Hardware stack levels used:    1
 14219 ;; Hardware stack levels required when called:    2
 14220 ;; This function calls:
 14221 ;;		Absolute function
 14222 ;;		_Led_Notice
 14223 ;; This function is called by:
 14224 ;;		_ISR
 14225 ;; This function uses a non-reentrant model
 14226 ;;
 14227                           
 14228                           
 14229                           ;psect for function _TMR4_ISR
 14230  14CF                     _TMR4_ISR:	
 14231                           
 14232                           ;tmr4.c: 29: PIR2bits.TMR4IF = 0;
 14233                           
 14234                           ;incstack = 0
 14235                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 14236  14CF  1092               	bcf	18,1	;volatile
 14237                           
 14238                           ;tmr4.c: 31: if ( tmr4_isr_handler )
 14239  14D0  0021               	movlb	1	; select bank1
 14240  14D1  0868               	movf	_tmr4_isr_handler^(0+128),w
 14241  14D2  0469               	iorwf	(_tmr4_isr_handler+1)^(0+128),w
 14242  14D3  1903               	btfsc	3,2
 14243  14D4  0008               	return
 14244                           
 14245                           ;tmr4.c: 32: {
 14246                           ;tmr4.c: 33: tmr4_isr_handler ( );
 14247  14D5  0869               	movf	(_tmr4_isr_handler+1)^(0+128),w
 14248  14D6  008A               	movwf	10
 14249  14D7  0868               	movf	_tmr4_isr_handler^(0+128),w
 14250  14D8  000A               	callw
 14251  14D9  3194               	pagesel	$
 14252  14DA  0008               	return
 14253  14DB                     __end_of_TMR4_ISR:	
 14254                           
 14255                           	psect	text69
 14256  1578                     __ptext69:	
 14257 ;; *************** function _Led_Notice *****************
 14258 ;; Defined at:
 14259 ;;		line 386 in file "user/src/led.c"
 14260 ;; Parameters:    Size  Location     Type
 14261 ;;		None
 14262 ;; Auto vars:     Size  Location     Type
 14263 ;;		None
 14264 ;; Return value:  Size  Location     Type
 14265 ;;                  1    wreg      void 
 14266 ;; Registers used:
 14267 ;;		wreg, status,2, status,0, pclath, cstack
 14268 ;; Tracked objects:
 14269 ;;		On entry : 1F/1
 14270 ;;		On exit  : 1E/0
 14271 ;;		Unchanged: 0/0
 14272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14275 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14276 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14277 ;;Total ram usage:        1 bytes
 14278 ;; Hardware stack levels used:    1
 14279 ;; Hardware stack levels required when called:    1
 14280 ;; This function calls:
 14281 ;;		_Led_TurnOffDirect
 14282 ;;		_Led_TurnOnDirect
 14283 ;;		_TMR4_StopTimer
 14284 ;; This function is called by:
 14285 ;;		_Interrupt_Initialize
 14286 ;;		_TMR4_ISR
 14287 ;; This function uses a non-reentrant model
 14288 ;;
 14289                           
 14290                           
 14291                           ;psect for function _Led_Notice
 14292  1578                     _Led_Notice:	
 14293                           
 14294                           ;led.c: 387: static uint8_t cnt = 0;
 14295                           ;led.c: 388: if (gLedRunPara.mNoticeCount) {
 14296                           
 14297                           ;incstack = 0
 14298                           ; Regs used in _Led_Notice: [wreg+status,2+status,0+pclath+cstack]
 14299  1578  0C5C               	rrf	(_gLedRunPara^(0+128)+20),w	;volatile
 14300  1579  0C89               	rrf	9,f
 14301  157A  393F               	andlw	63
 14302  157B  1903               	skipnz
 14303  157C  2D9B               	goto	i1l4918
 14304                           
 14305                           ;led.c: 389: cnt++;
 14306  157D  0020               	movlb	0	; select bank0
 14307  157E  0AB0               	incf	Led_Notice@cnt,f
 14308                           
 14309                           ;led.c: 390: if ((cnt & 0x07) == 0) {
 14310  157F  0830               	movf	Led_Notice@cnt,w
 14311  1580  3907               	andlw	7
 14312  1581  1D03               	btfss	3,2
 14313  1582  0008               	return
 14314                           
 14315                           ;led.c: 391: if (gLedRunPara.mNoticeStatus) {
 14316  1583  0021               	movlb	1	; select bank1
 14317  1584  1CDC               	btfss	(_gLedRunPara^(0+128)+20),1	;volatile
 14318  1585  2D97               	goto	i1l4914
 14319                           
 14320                           ;led.c: 392: Led_TurnOnDirect();
 14321  1586  25A8               	fcall	_Led_TurnOnDirect
 14322                           
 14323                           ;led.c: 393: gLedRunPara.mNoticeCount--;
 14324  1587  0021               	movlb	1	; select bank1
 14325  1588  0C5C               	rrf	(_gLedRunPara^(0+128)+20),w	;volatile
 14326  1589  00F0               	movwf	??_Led_Notice
 14327  158A  0C70               	rrf	??_Led_Notice,w
 14328  158B  393F               	andlw	63
 14329  158C  00F0               	movwf	??_Led_Notice
 14330  158D  03F0               	decf	??_Led_Notice,f
 14331  158E  0DF0               	rlf	??_Led_Notice,f
 14332  158F  0DF0               	rlf	??_Led_Notice,f
 14333  1590  085C               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
 14334  1591  0670               	xorwf	??_Led_Notice,w
 14335  1592  3903               	andlw	-253
 14336  1593  0670               	xorwf	??_Led_Notice,w
 14337  1594  00DC               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
 14338                           
 14339                           ;led.c: 394: gLedRunPara.mNoticeStatus = 0;
 14340  1595  10DC               	bcf	(_gLedRunPara^(0+128)+20),1	;volatile
 14341                           
 14342                           ;led.c: 395: } else {
 14343  1596  0008               	return
 14344  1597                     i1l4914:	
 14345                           
 14346                           ;led.c: 396: Led_TurnOffDirect();
 14347  1597  259F               	fcall	_Led_TurnOffDirect
 14348                           
 14349                           ;led.c: 397: gLedRunPara.mNoticeStatus = 1;
 14350  1598  0021               	movlb	1	; select bank1
 14351  1599  14DC               	bsf	(_gLedRunPara^(0+128)+20),1	;volatile
 14352  159A  0008               	return
 14353  159B                     i1l4918:	
 14354                           
 14355                           ;led.c: 401: TMR4_StopTimer();
 14356  159B  25B1               	fcall	_TMR4_StopTimer
 14357                           
 14358                           ;led.c: 402: cnt = 0;
 14359  159C  0020               	movlb	0	; select bank0
 14360  159D  01B0               	clrf	Led_Notice@cnt
 14361  159E  0008               	return
 14362  159F                     __end_of_Led_Notice:	
 14363  159F                     __ptext72:	
 14364 ;; *************** function _Led_TurnOffDirect *****************
 14365 ;; Defined at:
 14366 ;;		line 158 in file "user/src/led.c"
 14367 ;; Parameters:    Size  Location     Type
 14368 ;;		None
 14369 ;; Auto vars:     Size  Location     Type
 14370 ;;		None
 14371 ;; Return value:  Size  Location     Type
 14372 ;;                  1    wreg      void 
 14373 ;; Registers used:
 14374 ;;		None
 14375 ;; Tracked objects:
 14376 ;;		On entry : 1F/1
 14377 ;;		On exit  : 1F/C
 14378 ;;		Unchanged: 0/0
 14379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14384 ;;Total ram usage:        0 bytes
 14385 ;; Hardware stack levels used:    1
 14386 ;; This function calls:
 14387 ;;		Nothing
 14388 ;; This function is called by:
 14389 ;;		_Led_Notice
 14390 ;; This function uses a non-reentrant model
 14391 ;;
 14392                           
 14393                           
 14394                           ;psect for function _Led_TurnOffDirect
 14395  159F                     _Led_TurnOffDirect:	
 14396                           
 14397                           ;led.c: 159: CCP1CON &= 0x7F;
 14398                           
 14399                           ;incstack = 0
 14400                           ; Regs used in _Led_TurnOffDirect: []
 14401  159F  0025               	movlb	5	; select bank5
 14402  15A0  1393               	bcf	19,7	;volatile
 14403                           
 14404                           ;led.c: 160: CCP2CON &= 0x7F;
 14405  15A1  1397               	bcf	23,7	;volatile
 14406                           
 14407                           ;led.c: 161: CCP3CON &= 0x7F;
 14408  15A2  0026               	movlb	6	; select bank6
 14409  15A3  1393               	bcf	19,7	;volatile
 14410                           
 14411                           ;led.c: 162: CCP4CON &= 0x7F;
 14412  15A4  1397               	bcf	23,7	;volatile
 14413                           
 14414                           ;led.c: 163: PWM5CON &= 0x7F;
 14415  15A5  002C               	movlb	12	; select bank12
 14416  15A6  1399               	bcf	25,7	;volatile
 14417  15A7  0008               	return
 14418  15A8                     __end_of_Led_TurnOffDirect:	
 14419  15A8                     __ptext71:	
 14420 ;; *************** function _Led_TurnOnDirect *****************
 14421 ;; Defined at:
 14422 ;;		line 150 in file "user/src/led.c"
 14423 ;; Parameters:    Size  Location     Type
 14424 ;;		None
 14425 ;; Auto vars:     Size  Location     Type
 14426 ;;		None
 14427 ;; Return value:  Size  Location     Type
 14428 ;;                  1    wreg      void 
 14429 ;; Registers used:
 14430 ;;		None
 14431 ;; Tracked objects:
 14432 ;;		On entry : 1F/1
 14433 ;;		On exit  : 1F/C
 14434 ;;		Unchanged: 0/0
 14435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14440 ;;Total ram usage:        0 bytes
 14441 ;; Hardware stack levels used:    1
 14442 ;; This function calls:
 14443 ;;		Nothing
 14444 ;; This function is called by:
 14445 ;;		_Led_Notice
 14446 ;; This function uses a non-reentrant model
 14447 ;;
 14448                           
 14449                           
 14450                           ;psect for function _Led_TurnOnDirect
 14451  15A8                     _Led_TurnOnDirect:	
 14452                           
 14453                           ;led.c: 151: CCP1CON |= 0x80;
 14454                           
 14455                           ;incstack = 0
 14456                           ; Regs used in _Led_TurnOnDirect: []
 14457  15A8  0025               	movlb	5	; select bank5
 14458  15A9  1793               	bsf	19,7	;volatile
 14459                           
 14460                           ;led.c: 152: CCP2CON |= 0x80;
 14461  15AA  1797               	bsf	23,7	;volatile
 14462                           
 14463                           ;led.c: 153: CCP3CON |= 0x80;
 14464  15AB  0026               	movlb	6	; select bank6
 14465  15AC  1793               	bsf	19,7	;volatile
 14466                           
 14467                           ;led.c: 154: CCP4CON |= 0x80;
 14468  15AD  1797               	bsf	23,7	;volatile
 14469                           
 14470                           ;led.c: 155: PWM5CON |= 0x80;
 14471  15AE  002C               	movlb	12	; select bank12
 14472  15AF  1799               	bsf	25,7	;volatile
 14473  15B0  0008               	return
 14474  15B1                     __end_of_Led_TurnOnDirect:	
 14475  15B1                     __ptext70:	
 14476 ;; *************** function _TMR4_StopTimer *****************
 14477 ;; Defined at:
 14478 ;;		line 22 in file "driver/src/tmr4.c"
 14479 ;; Parameters:    Size  Location     Type
 14480 ;;		None
 14481 ;; Auto vars:     Size  Location     Type
 14482 ;;		None
 14483 ;; Return value:  Size  Location     Type
 14484 ;;                  1    wreg      void 
 14485 ;; Registers used:
 14486 ;;		None
 14487 ;; Tracked objects:
 14488 ;;		On entry : 1F/1
 14489 ;;		On exit  : 1F/8
 14490 ;;		Unchanged: 0/0
 14491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;Total ram usage:        0 bytes
 14497 ;; Hardware stack levels used:    1
 14498 ;; This function calls:
 14499 ;;		Nothing
 14500 ;; This function is called by:
 14501 ;;		_Led_Notice
 14502 ;; This function uses a non-reentrant model
 14503 ;;
 14504                           
 14505                           
 14506                           ;psect for function _TMR4_StopTimer
 14507  15B1                     _TMR4_StopTimer:	
 14508                           
 14509                           ;tmr4.c: 24: T4CONbits.TMR4ON = 0;
 14510                           
 14511                           ;incstack = 0
 14512                           ; Regs used in _TMR4_StopTimer: []
 14513  15B1  0028               	movlb	8	; select bank8
 14514  15B2  1117               	bcf	23,2	;volatile
 14515  15B3  0008               	return
 14516  15B4                     __end_of_TMR4_StopTimer:	
 14517                           
 14518                           	psect	text73
 14519  14C3                     __ptext73:	
 14520 ;; *************** function _TMR2_ISR *****************
 14521 ;; Defined at:
 14522 ;;		line 26 in file "driver/src/tmr2.c"
 14523 ;; Parameters:    Size  Location     Type
 14524 ;;		None
 14525 ;; Auto vars:     Size  Location     Type
 14526 ;;		None
 14527 ;; Return value:  Size  Location     Type
 14528 ;;                  1    wreg      void 
 14529 ;; Registers used:
 14530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14531 ;; Tracked objects:
 14532 ;;		On entry : 1F/0
 14533 ;;		On exit  : 0/0
 14534 ;;		Unchanged: 0/0
 14535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14540 ;;Total ram usage:        0 bytes
 14541 ;; Hardware stack levels used:    1
 14542 ;; Hardware stack levels required when called:    5
 14543 ;; This function calls:
 14544 ;;		Absolute function
 14545 ;;		_Led_Run
 14546 ;; This function is called by:
 14547 ;;		_ISR
 14548 ;; This function uses a non-reentrant model
 14549 ;;
 14550                           
 14551                           
 14552                           ;psect for function _TMR2_ISR
 14553  14C3                     _TMR2_ISR:	
 14554                           
 14555                           ;tmr2.c: 28: PIR1bits.TMR2IF = 0;
 14556                           
 14557                           ;incstack = 0
 14558                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14559  14C3  1091               	bcf	17,1	;volatile
 14560                           
 14561                           ;tmr2.c: 29: if ( tmr2_isr_handler )
 14562  14C4  0021               	movlb	1	; select bank1
 14563  14C5  0866               	movf	_tmr2_isr_handler^(0+128),w
 14564  14C6  0467               	iorwf	(_tmr2_isr_handler+1)^(0+128),w
 14565  14C7  1903               	btfsc	3,2
 14566  14C8  0008               	return
 14567                           
 14568                           ;tmr2.c: 30: {
 14569                           ;tmr2.c: 31: tmr2_isr_handler ( );
 14570  14C9  0867               	movf	(_tmr2_isr_handler+1)^(0+128),w
 14571  14CA  008A               	movwf	10
 14572  14CB  0866               	movf	_tmr2_isr_handler^(0+128),w
 14573  14CC  000A               	callw
 14574  14CD  3194               	pagesel	$
 14575  14CE  0008               	return
 14576  14CF                     __end_of_TMR2_ISR:	
 14577                           
 14578                           	psect	text74
 14579  035E                     __ptext74:	
 14580 ;; *************** function _Led_Run *****************
 14581 ;; Defined at:
 14582 ;;		line 526 in file "user/src/led.c"
 14583 ;; Parameters:    Size  Location     Type
 14584 ;;		None
 14585 ;; Auto vars:     Size  Location     Type
 14586 ;;		None
 14587 ;; Return value:  Size  Location     Type
 14588 ;;                  1    wreg      void 
 14589 ;; Registers used:
 14590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14591 ;; Tracked objects:
 14592 ;;		On entry : 1F/1
 14593 ;;		On exit  : 10/0
 14594 ;;		Unchanged: 0/0
 14595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14599 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14600 ;;Total ram usage:        1 bytes
 14601 ;; Hardware stack levels used:    1
 14602 ;; Hardware stack levels required when called:    4
 14603 ;; This function calls:
 14604 ;;		_IR_ScanLongPress
 14605 ;;		_Led_Ramp
 14606 ;;		_Led_RunMusic
 14607 ;; This function is called by:
 14608 ;;		_Interrupt_Initialize
 14609 ;;		_TMR2_ISR
 14610 ;; This function uses a non-reentrant model
 14611 ;;
 14612                           
 14613                           
 14614                           ;psect for function _Led_Run
 14615  035E                     _Led_Run:	
 14616                           
 14617                           ;led.c: 527: static uint8_t cnt = 0;
 14618                           ;led.c: 528: cnt++;
 14619                           
 14620                           ;incstack = 0
 14621                           ; Regs used in _Led_Run: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14622  035E  0020               	movlb	0	; select bank0
 14623  035F  0AB1               	incf	Led_Run@cnt,f
 14624                           
 14625                           ;led.c: 529: if ((cnt & 0x03) == 0x00) {
 14626  0360  0831               	movf	Led_Run@cnt,w
 14627  0361  3903               	andlw	3
 14628  0362  1D03               	btfss	3,2
 14629  0363  2B66               	goto	i1l6504
 14630                           
 14631                           ;led.c: 530: IR_ScanLongPress();
 14632  0364  237F  3183         	fcall	_IR_ScanLongPress
 14633  0366                     i1l6504:	
 14634                           
 14635                           ;led.c: 531: }
 14636                           ;led.c: 532: if ((ir_state.mSet == 4) || (ir_state.mSet == 5)) {
 14637  0366  0020               	movlb	0	; select bank0
 14638  0367  25E5  3183         	fcall	PL100	;call to abstracted procedure
 14639  0369  1903               	skipnz
 14640  036A  2B6F               	goto	i1l6508
 14641  036B  25E0  3183         	fcall	PL98	;call to abstracted procedure
 14642  036D  1D03               	skipz
 14643  036E  2B70               	goto	i1l808
 14644  036F                     i1l6508:	
 14645                           
 14646                           ;led.c: 533: Led_Ramp();
 14647  036F  2D79               	ljmp	i1l6232
 14648  0370                     i1l808:	
 14649                           ;led.c: 534: } else if (!gLedPara.mAuto) {
 14650                           
 14651  0370  0022               	movlb	2	; select bank2
 14652  0371  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 14653  0372  0008               	return
 14654                           
 14655                           ;led.c: 535: if (gLedPara.mOn && gLedPara.mMsc) {
 14656  0373  1CA0               	btfss	_gLedPara^(0+256),1	;volatile
 14657  0374  2B6F               	goto	i1l6508
 14658  0375  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 14659  0376  0020               	movlb	0	; select bank0
 14660  0377  00CD               	movwf	??_Led_Run
 14661  0378  0CCD               	rrf	??_Led_Run,f
 14662  0379  0C4D               	rrf	??_Led_Run,w
 14663  037A  390F               	andlw	15
 14664  037B  1903               	skipnz
 14665  037C  2B6F               	goto	i1l6508
 14666                           
 14667                           ;led.c: 536: Led_RunMusic();
 14668  037D  3181  290B         	ljmp	i1l6260
 14669  037F                     __end_of_Led_Run:	
 14670                           ;led.c: 537: } else {
 14671                           
 14672  037F                     __ptext91:	
 14673 ;; *************** function _IR_ScanLongPress *****************
 14674 ;; Defined at:
 14675 ;;		line 334 in file "user/src/ir.c"
 14676 ;; Parameters:    Size  Location     Type
 14677 ;;		None
 14678 ;; Auto vars:     Size  Location     Type
 14679 ;;  i               1   12[COMMON] unsigned char 
 14680 ;;  i               1   11[COMMON] unsigned char 
 14681 ;;  idx             1   13[COMMON] unsigned char 
 14682 ;; Return value:  Size  Location     Type
 14683 ;;                  1    wreg      void 
 14684 ;; Registers used:
 14685 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14686 ;; Tracked objects:
 14687 ;;		On entry : 1F/0
 14688 ;;		On exit  : 16/0
 14689 ;;		Unchanged: 0/0
 14690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14692 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14694 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14695 ;;Total ram usage:        3 bytes
 14696 ;; Hardware stack levels used:    1
 14697 ;; Hardware stack levels required when called:    2
 14698 ;; This function calls:
 14699 ;;		_Led_SetCustom
 14700 ;;		i1_IR_GetIndex
 14701 ;;		i1_Led_StartNotice
 14702 ;;		i1_Util_DecValue
 14703 ;;		i1_Util_IncValue
 14704 ;; This function is called by:
 14705 ;;		_Led_Run
 14706 ;; This function uses a non-reentrant model
 14707 ;;
 14708                           
 14709                           
 14710                           ;psect for function _IR_ScanLongPress
 14711  037F                     _IR_ScanLongPress:	
 14712                           
 14713                           ;ir.c: 337: if (!ir_state.mKeyRpt) {
 14714                           
 14715                           ;incstack = 0
 14716                           ; Regs used in _IR_ScanLongPress: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14717  037F  18B6               	btfsc	_ir_state,1	;volatile
 14718  0380  2C23               	goto	i1l6416
 14719                           
 14720                           ;ir.c: 338: cnt = 0;
 14721  0381  01A8               	clrf	IR_ScanLongPress@cnt
 14722  0382  01A9               	clrf	IR_ScanLongPress@cnt+1
 14723  0383  0008               	return
 14724  0384                     i1l1096:	
 14725  0384                     i1l6304:	
 14726                           
 14727                           ;ir.c: 343: case 0x59:
 14728                           ;ir.c: 344: case 0x45:
 14729                           ;ir.c: 345: case 0x44:
 14730                           ;ir.c: 346: case 0x41:
 14731                           ;ir.c: 347: idx = IR_GetIndex(keyValue);
 14732  0384  0832               	movf	_keyValue,w	;volatile
 14733  0385  245F  3183         	fcall	i1_IR_GetIndex
 14734  0387  00FD               	movwf	IR_ScanLongPress@idx
 14735                           
 14736                           ;ir.c: 348: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 1000, 1);
 14737  0388  357D               	lslf	IR_ScanLongPress@idx,w
 14738  0389  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14739  038A  00F0               	movwf	i1Util_IncValue@pSrc
 14740  038B  30E8               	movlw	232
 14741  038C  01F1               	clrf	i1Util_IncValue@pSrc+1
 14742  038D  00F2               	movwf	i1Util_IncValue@max
 14743  038E  3003               	movlw	3
 14744  038F  00F3               	movwf	i1Util_IncValue@max+1
 14745  0390  01F4               	clrf	i1Util_IncValue@delta
 14746  0391  0AF4               	incf	i1Util_IncValue@delta,f
 14747  0392  01F5               	clrf	i1Util_IncValue@delta+1
 14748  0393  2550  3183         	fcall	i1_Util_IncValue
 14749  0395                     L19:	
 14750                           
 14751                           ;ir.c: 349: if (ir_state.mSet == 0) {
 14752  0395  0E36               	swapf	_ir_state,w	;volatile
 14753  0396  0C89               	rrf	9,f
 14754  0397  3907               	andlw	7
 14755  0398  1D03               	skipz
 14756  0399  0008               	return
 14757                           
 14758                           ;ir.c: 350: gLedPara.mBright[idx] = gLedRunPara.mTargetBright[idx];
 14759  039A  357D               	lslf	IR_ScanLongPress@idx,w
 14760  039B  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14761  039C  0086               	movwf	6
 14762  039D  0187               	clrf	7
 14763  039E  357D               	lslf	IR_ScanLongPress@idx,w
 14764  039F  3E22               	addlw	(low ((_gLedPara| (0+256)+2)))& (0+255)
 14765  03A0  318E  26BF         	fcall	PL8	;call to abstracted procedure
 14766  03A2  0008               	return
 14767  03A3                     i1l1103:	
 14768  03A3                     i1l6312:	
 14769                           
 14770                           ;ir.c: 354: case 0x55:
 14771                           ;ir.c: 355: case 0x49:
 14772                           ;ir.c: 356: case 0x48:
 14773                           ;ir.c: 357: case 0x40:
 14774                           ;ir.c: 358: idx = IR_GetIndex(keyValue);
 14775  03A3  0832               	movf	_keyValue,w	;volatile
 14776  03A4  245F  3183         	fcall	i1_IR_GetIndex
 14777  03A6  00FD               	movwf	IR_ScanLongPress@idx
 14778                           
 14779                           ;ir.c: 359: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 0, 1);
 14780  03A7  357D               	lslf	IR_ScanLongPress@idx,w
 14781  03A8  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14782  03A9  00F0               	movwf	i1Util_DecValue@pSrc
 14783  03AA  01F1               	clrf	i1Util_DecValue@pSrc+1
 14784  03AB  01F2               	clrf	i1Util_DecValue@min
 14785  03AC  01F3               	clrf	i1Util_DecValue@min+1
 14786  03AD  01F4               	clrf	i1Util_DecValue@delta
 14787  03AE  0AF4               	incf	i1Util_DecValue@delta,f
 14788  03AF  01F5               	clrf	i1Util_DecValue@delta+1
 14789  03B0  252A  3183         	fcall	i1_Util_DecValue
 14790  03B2  2B95               	goto	L19
 14791  03B3                     i1l1108:	
 14792                           ;ir.c: 360: if (ir_state.mSet == 0) {
 14793                           
 14794  03B3                     i1l6320:	
 14795                           
 14796                           ;ir.c: 365: case 0x51:
 14797                           ;ir.c: 366: case 0x4D:
 14798                           ;ir.c: 367: case 0x4C:
 14799                           ;ir.c: 368: cnt++;
 14800                           
 14801                           ;ir.c: 369: if (cnt == 0x200) {
 14802  03B3  25C9  3183         	fcall	PL18	;call to abstracted procedure
 14803  03B5  1D03               	btfss	3,2
 14804  03B6  0008               	return
 14805                           
 14806                           ;ir.c: 370: ir_state.mKeyRpt = 0;
 14807  03B7  10B6               	bcf	_ir_state,1	;volatile
 14808                           
 14809                           ;ir.c: 371: idx = IR_GetIndex(keyValue);
 14810  03B8  0832               	movf	_keyValue,w	;volatile
 14811  03B9  245F  3183         	fcall	i1_IR_GetIndex
 14812  03BB  00FD               	movwf	IR_ScanLongPress@idx
 14813                           
 14814                           ;ir.c: 372: Led_SetCustom(idx, (uint16_t*) gLedRunPara.mTargetBright);
 14815  03BC  30D2               	movlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14816  03BD  00F3               	movwf	Led_SetCustom@pValue
 14817  03BE  087D               	movf	IR_ScanLongPress@idx,w
 14818  03BF  24EE  3183         	fcall	_Led_SetCustom
 14819                           
 14820                           ;ir.c: 373: Led_StartNotice(1);
 14821  03C1  3001               	movlw	1
 14822  03C2  24E2               	fcall	i1_Led_StartNotice
 14823                           
 14824                           ;ir.c: 374: gLedRunPara.mParaChanged = 1;
 14825  03C3  0021               	movlb	1	; select bank1
 14826  03C4  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 14827  03C5  0008               	return
 14828  03C6                     i1l6334:	
 14829                           
 14830                           ;ir.c: 379: cnt++;
 14831                           
 14832                           ;ir.c: 380: if (cnt == 0x200) {
 14833  03C6  25C9  3183         	fcall	PL18	;call to abstracted procedure
 14834  03C8  1D03               	btfss	3,2
 14835  03C9  0008               	return
 14836                           
 14837                           ;ir.c: 381: ir_state.mKeyRpt = 0;
 14838  03CA  10B6               	bcf	_ir_state,1	;volatile
 14839                           
 14840                           ;ir.c: 382: ir_state.mSet = 2;
 14841  03CB  0836               	movf	_ir_state,w	;volatile
 14842  03CC  391F               	andlw	-225
 14843  03CD  3840               	iorlw	64
 14844  03CE  00B6               	movwf	_ir_state	;volatile
 14845                           
 14846                           ;ir.c: 383: ir_state.tmIdx = 0;
 14847  03CF  01B7               	clrf	_ir_state+1	;volatile
 14848                           
 14849                           ;ir.c: 384: Led_StartNotice(1);
 14850  03D0  3001               	movlw	1
 14851  03D1  24E2               	fcall	i1_Led_StartNotice
 14852  03D2  0008               	return
 14853  03D3                     i1l6346:	
 14854                           
 14855                           ;ir.c: 389: cnt++;
 14856                           
 14857                           ;ir.c: 390: if (cnt == 0x200) {
 14858  03D3  25C9  3183         	fcall	PL18	;call to abstracted procedure
 14859  03D5  1D03               	btfss	3,2
 14860  03D6  0008               	return
 14861                           
 14862                           ;ir.c: 391: ir_state.mKeyRpt = 0;
 14863  03D7  10B6               	bcf	_ir_state,1	;volatile
 14864                           
 14865                           ;ir.c: 392: ir_state.mSet = 3;
 14866  03D8  0836               	movf	_ir_state,w	;volatile
 14867  03D9  391F               	andlw	-225
 14868  03DA  3860               	iorlw	96
 14869  03DB  00B6               	movwf	_ir_state	;volatile
 14870                           
 14871                           ;ir.c: 393: ir_state.tmIdx = 0;
 14872  03DC  01B7               	clrf	_ir_state+1	;volatile
 14873                           
 14874                           ;ir.c: 394: Led_StartNotice(1);
 14875  03DD  3001               	movlw	1
 14876  03DE  24E2               	fcall	i1_Led_StartNotice
 14877  03DF  0008               	return
 14878  03E0                     i1l6358:	
 14879                           
 14880                           ;ir.c: 399: cnt++;
 14881                           
 14882                           ;ir.c: 400: if (cnt == 0x200) {
 14883  03E0  25C9  3183         	fcall	PL18	;call to abstracted procedure
 14884  03E2  1D03               	btfss	3,2
 14885  03E3  0008               	return
 14886                           
 14887                           ;ir.c: 401: ir_state.mKeyRpt = 0;
 14888  03E4  10B6               	bcf	_ir_state,1	;volatile
 14889                           
 14890                           ;ir.c: 402: ir_state.mSet = 4;
 14891  03E5  0836               	movf	_ir_state,w	;volatile
 14892  03E6  391F               	andlw	-225
 14893  03E7  3880               	iorlw	128
 14894  03E8  00B6               	movwf	_ir_state	;volatile
 14895                           
 14896                           ;ir.c: 403: for (uint8_t i = 0; i < 5; i++) {
 14897  03E9  01FB               	clrf	IR_ScanLongPress@i
 14898  03EA                     i1l6372:	
 14899                           
 14900                           ;ir.c: 404: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
 14901  03EA  357B               	lslf	IR_ScanLongPress@i,w
 14902  03EB  3E56               	addlw	(low ((_gLedPara| (0+256)+54)))& (0+255)
 14903  03EC  0086               	movwf	6
 14904  03ED  3001               	movlw	1	; select bank2/3
 14905  03EE  0087               	movwf	7
 14906  03EF  357B               	lslf	IR_ScanLongPress@i,w
 14907  03F0  318E  26B7  3183   	fcall	PL2	;call to abstracted procedure
 14908  03F3  3005               	movlw	5
 14909  03F4  0AFB               	incf	IR_ScanLongPress@i,f
 14910  03F5  027B               	subwf	IR_ScanLongPress@i,w
 14911  03F6  1C03               	skipc
 14912  03F7  2BEA               	goto	i1l6372
 14913                           
 14914                           ;ir.c: 405: }
 14915                           ;ir.c: 406: Led_StartNotice(1);
 14916  03F8  3001               	movlw	1
 14917  03F9  24E2               	fcall	i1_Led_StartNotice
 14918  03FA  0008               	return
 14919  03FB                     i1l6380:	
 14920                           
 14921                           ;ir.c: 410: cnt++;
 14922                           
 14923                           ;ir.c: 411: if (cnt == 0x200) {
 14924  03FB  25C9  3183         	fcall	PL18	;call to abstracted procedure
 14925  03FD  1D03               	btfss	3,2
 14926  03FE  0008               	return
 14927                           
 14928                           ;ir.c: 412: ir_state.mKeyRpt = 0;
 14929  03FF  10B6               	bcf	_ir_state,1	;volatile
 14930                           
 14931                           ;ir.c: 413: ir_state.mSet = 5;
 14932  0400  0836               	movf	_ir_state,w	;volatile
 14933  0401  391F               	andlw	-225
 14934  0402  38A0               	iorlw	160
 14935  0403  00B6               	movwf	_ir_state	;volatile
 14936                           
 14937                           ;ir.c: 414: for (uint8_t i = 0; i < 5; i++) {
 14938  0404  01FC               	clrf	IR_ScanLongPress@i_1415
 14939  0405                     i1l6394:	
 14940                           
 14941                           ;ir.c: 415: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
 14942  0405  357C               	lslf	IR_ScanLongPress@i_1415,w
 14943  0406  3E62               	addlw	(low ((_gLedPara| (0+256)+66)))& (0+255)
 14944  0407  0086               	movwf	6
 14945  0408  3001               	movlw	1	; select bank2/3
 14946  0409  0087               	movwf	7
 14947  040A  357C               	lslf	IR_ScanLongPress@i_1415,w
 14948  040B  318E  26B7  3183   	fcall	PL2	;call to abstracted procedure
 14949  040E  3005               	movlw	5
 14950  040F  0AFC               	incf	IR_ScanLongPress@i_1415,f
 14951  0410  027C               	subwf	IR_ScanLongPress@i_1415,w
 14952  0411  1C03               	skipc
 14953  0412  2C05               	goto	i1l6394
 14954                           
 14955                           ;ir.c: 416: }
 14956                           ;ir.c: 417: Led_StartNotice(1);
 14957  0413  3001               	movlw	1
 14958  0414  24E2               	fcall	i1_Led_StartNotice
 14959  0415  0008               	return
 14960  0416                     i1l6402:	
 14961                           
 14962                           ;ir.c: 421: cnt++;
 14963                           
 14964                           ;ir.c: 422: if (cnt == 0x200) {
 14965  0416  25C9  3183         	fcall	PL18	;call to abstracted procedure
 14966  0418  1D03               	btfss	3,2
 14967  0419  0008               	return
 14968                           
 14969                           ;ir.c: 423: ir_state.mKeyRpt = 0;
 14970  041A  10B6               	bcf	_ir_state,1	;volatile
 14971                           
 14972                           ;ir.c: 424: ir_state.mSet = 1;
 14973  041B  0836               	movf	_ir_state,w	;volatile
 14974  041C  391F               	andlw	-225
 14975  041D  3820               	iorlw	32
 14976  041E  00B6               	movwf	_ir_state	;volatile
 14977                           
 14978                           ;ir.c: 425: ir_state.tmIdx = 0;
 14979  041F  01B7               	clrf	_ir_state+1	;volatile
 14980                           
 14981                           ;ir.c: 426: Led_StartNotice(1);
 14982  0420  3001               	movlw	1
 14983  0421  24E2               	fcall	i1_Led_StartNotice
 14984  0422  0008               	return
 14985  0423                     i1l6416:	
 14986  0423  0832               	movf	_keyValue,w	;volatile
 14987                           
 14988                           ; Switch size 1, requested type "space"
 14989                           ; Number of cases is 19, Range of values is 6 to 89
 14990                           ; switch strategies available:
 14991                           ; Name         Instructions Cycles
 14992                           ; simple_byte           58    30 (average)
 14993                           ; direct_byte          177     9 (fixed)
 14994                           ; jumptable            263     9 (fixed)
 14995                           ;	Chosen strategy is simple_byte
 14996  0424  3A06               	xorlw	6	; case 6
 14997  0425  1903               	skipnz
 14998  0426  2C16               	goto	i1l6402
 14999  0427  3A16               	xorlw	22	; case 16
 15000  0428  1903               	skipnz
 15001  0429  2BC6               	goto	i1l6334
 15002  042A  3A01               	xorlw	1	; case 17
 15003  042B  1903               	skipnz
 15004  042C  2BE0               	goto	i1l6358
 15005  042D  3A03               	xorlw	3	; case 18
 15006  042E  1903               	skipnz
 15007  042F  2BD3               	goto	i1l6346
 15008  0430  3A01               	xorlw	1	; case 19
 15009  0431  1903               	skipnz
 15010  0432  2BFB               	goto	i1l6380
 15011  0433  3A53               	xorlw	83	; case 64
 15012  0434  1903               	skipnz
 15013  0435  2BA3               	goto	i1l6312
 15014  0436  3A01               	xorlw	1	; case 65
 15015  0437  1903               	skipnz
 15016  0438  2B84               	goto	i1l6304
 15017  0439  3A05               	xorlw	5	; case 68
 15018  043A  1903               	skipnz
 15019  043B  2B84               	goto	i1l6304
 15020  043C  3A01               	xorlw	1	; case 69
 15021  043D  1903               	skipnz
 15022  043E  2B84               	goto	i1l6304
 15023  043F  3A0D               	xorlw	13	; case 72
 15024  0440  1903               	skipnz
 15025  0441  2BA3               	goto	i1l6312
 15026  0442  3A01               	xorlw	1	; case 73
 15027  0443  1903               	skipnz
 15028  0444  2BA3               	goto	i1l6312
 15029  0445  3A05               	xorlw	5	; case 76
 15030  0446  1903               	skipnz
 15031  0447  2BB3               	goto	i1l6320
 15032  0448  3A01               	xorlw	1	; case 77
 15033  0449  1903               	skipnz
 15034  044A  2BB3               	goto	i1l6320
 15035  044B  3A1D               	xorlw	29	; case 80
 15036  044C  1903               	skipnz
 15037  044D  2BB3               	goto	i1l1108
 15038  044E  3A01               	xorlw	1	; case 81
 15039  044F  1903               	skipnz
 15040  0450  2BB3               	goto	i1l6320
 15041  0451  3A05               	xorlw	5	; case 84
 15042  0452  1903               	skipnz
 15043  0453  2BA3               	goto	i1l1103
 15044  0454  3A01               	xorlw	1	; case 85
 15045  0455  1903               	skipnz
 15046  0456  2BA3               	goto	i1l6312
 15047  0457  3A0D               	xorlw	13	; case 88
 15048  0458  1903               	skipnz
 15049  0459  2B84               	goto	i1l1096
 15050  045A  3A01               	xorlw	1	; case 89
 15051  045B  1903               	skipnz
 15052  045C  2B84               	goto	i1l6304
 15053  045D  2C5E               	goto	i1l1091
 15054  045E                     i1l1091:	
 15055  045E  0008               	return
 15056  045F                     __end_of_IR_ScanLongPress:	
 15057  045F                     __ptext96:	
 15058 ;; *************** function i1_IR_GetIndex *****************
 15059 ;; Defined at:
 15060 ;;		line 10 in file "user/src/ir.c"
 15061 ;; Parameters:    Size  Location     Type
 15062 ;;  keynum          1    wreg     unsigned char 
 15063 ;; Auto vars:     Size  Location     Type
 15064 ;;  keynum          1    1[COMMON] unsigned char 
 15065 ;;  IR_GetIndex     1    0[COMMON] unsigned char 
 15066 ;; Return value:  Size  Location     Type
 15067 ;;                  1    wreg      unsigned char 
 15068 ;; Registers used:
 15069 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15070 ;; Tracked objects:
 15071 ;;		On entry : 1F/0
 15072 ;;		On exit  : 1F/0
 15073 ;;		Unchanged: 1F/0
 15074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15076 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15078 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;Total ram usage:        2 bytes
 15080 ;; Hardware stack levels used:    1
 15081 ;; This function calls:
 15082 ;;		Nothing
 15083 ;; This function is called by:
 15084 ;;		_IR_ScanLongPress
 15085 ;; This function uses a non-reentrant model
 15086 ;;
 15087                           
 15088                           
 15089                           ;psect for function i1_IR_GetIndex
 15090  045F                     i1_IR_GetIndex:	
 15091                           
 15092                           ;incstack = 0
 15093                           ; Regs used in i1_IR_GetIndex: [wreg-fsr0h+status,2+status,0]
 15094                           ;i1IR_GetIndex@keynum stored from wreg
 15095  045F  00F1               	movwf	i1IR_GetIndex@keynum
 15096                           
 15097                           ;ir.c: 11: uint8_t idx = 0xFF;
 15098  0460  30FF               	movlw	255
 15099  0461  00F0               	movwf	i1IR_GetIndex@idx
 15100                           
 15101                           ;ir.c: 12: switch (keynum) {
 15102  0462  2C7E               	goto	i1l4304
 15103  0463                     i1l4284:	
 15104                           
 15105                           ;ir.c: 14: case 0x54:
 15106                           ;ir.c: 15: case 0x50:
 15107                           ;ir.c: 16: idx = 0;
 15108  0463  01F0               	clrf	i1IR_GetIndex@idx
 15109                           
 15110                           ;ir.c: 17: break;
 15111  0464  2CE0               	goto	i1l4306
 15112  0465                     i1l888:	
 15113                           
 15114                           ;ir.c: 19: case 0x55:
 15115                           ;ir.c: 20: case 0x51:
 15116                           ;ir.c: 21: idx = 1;
 15117  0465  01F0               	clrf	i1IR_GetIndex@idx
 15118  0466  0AF0               	incf	i1IR_GetIndex@idx,f
 15119                           
 15120                           ;ir.c: 22: break;
 15121  0467  2CE0               	goto	i1l4306
 15122  0468                     i1l4286:	
 15123                           
 15124                           ;ir.c: 24: case 0x49:
 15125                           ;ir.c: 25: case 0x4D:
 15126                           ;ir.c: 26: idx = 2;
 15127  0468  3002               	movlw	2
 15128  0469  2C7C               	goto	L28
 15129  046A                     i1l4288:	
 15130                           ;ir.c: 27: break;
 15131                           
 15132                           
 15133                           ;ir.c: 29: case 0x44:
 15134                           ;ir.c: 30: case 0x4C:
 15135                           ;ir.c: 31: idx = 3;
 15136  046A  3003               	movlw	3
 15137  046B  2C7C               	goto	L28
 15138  046C                     i1l4290:	
 15139                           ;ir.c: 32: break;
 15140                           
 15141                           
 15142                           ;ir.c: 34: case 0x40:
 15143                           ;ir.c: 35: idx = 4;
 15144  046C  3004               	movlw	4
 15145  046D  2C7C               	goto	L28
 15146  046E                     i1l899:	
 15147                           ;ir.c: 36: break;
 15148                           
 15149  046E                     i1l4292:	
 15150                           
 15151                           ;ir.c: 38: case 0x1D:
 15152                           ;ir.c: 39: case 0x1E:
 15153                           ;ir.c: 40: case 0x1F:
 15154                           ;ir.c: 41: idx = keynum - 0x1C + 1;
 15155  046E  0871               	movf	i1IR_GetIndex@keynum,w
 15156  046F  3EE5               	addlw	229
 15157  0470  2C7C               	goto	L28
 15158  0471                     i1l903:	
 15159                           ;ir.c: 42: break;
 15160                           
 15161  0471                     i1l4294:	
 15162                           
 15163                           ;ir.c: 44: case 0x15:
 15164                           ;ir.c: 45: case 0x16:
 15165                           ;ir.c: 46: case 0x17:
 15166                           ;ir.c: 47: idx = keynum - 0x14 + 5;
 15167  0471  0871               	movf	i1IR_GetIndex@keynum,w
 15168  0472  3EF1               	addlw	241
 15169  0473  2C7C               	goto	L28
 15170  0474                     i1l907:	
 15171                           ;ir.c: 48: break;
 15172                           
 15173  0474                     i1l4296:	
 15174                           
 15175                           ;ir.c: 50: case 0x0D:
 15176                           ;ir.c: 51: case 0x0E:
 15177                           ;ir.c: 52: case 0x0F:
 15178                           ;ir.c: 53: idx = keynum - 0x0C;
 15179  0474  0871               	movf	i1IR_GetIndex@keynum,w
 15180  0475  3EF4               	addlw	244
 15181  0476  2C7C               	goto	L28
 15182  0477                     i1l911:	
 15183                           ;ir.c: 54: break;
 15184                           
 15185  0477                     i1l4298:	
 15186                           
 15187                           ;ir.c: 56: case 0x09:
 15188                           ;ir.c: 57: case 0x0A:
 15189                           ;ir.c: 58: case 0x0B:
 15190                           ;ir.c: 59: idx = keynum - 0x08 + 4;
 15191  0477  0871               	movf	i1IR_GetIndex@keynum,w
 15192  0478  3EFC               	addlw	252
 15193  0479  2C7C               	goto	L28
 15194  047A                     i1l4300:	
 15195                           ;ir.c: 60: break;
 15196                           
 15197                           
 15198                           ;ir.c: 62: case 0x05:
 15199                           ;ir.c: 63: idx = keynum - 0x04 + 8;
 15200  047A  0871               	movf	i1IR_GetIndex@keynum,w
 15201  047B  3E04               	addlw	4
 15202  047C                     L28:	
 15203  047C  00F0               	movwf	i1IR_GetIndex@idx
 15204                           
 15205                           ;ir.c: 64: break;
 15206  047D  2CE0               	goto	i1l4306
 15207  047E                     i1l4304:	
 15208  047E  0871               	movf	i1IR_GetIndex@keynum,w
 15209                           
 15210                           ; Switch size 1, requested type "space"
 15211                           ; Number of cases is 32, Range of values is 4 to 89
 15212                           ; switch strategies available:
 15213                           ; Name         Instructions Cycles
 15214                           ; simple_byte           97    49 (average)
 15215                           ; direct_byte          181     9 (fixed)
 15216                           ; jumptable            263     9 (fixed)
 15217                           ;	Chosen strategy is simple_byte
 15218  047F  3A04               	xorlw	4	; case 4
 15219  0480  1903               	skipnz
 15220  0481  2C7A               	goto	i1l4300
 15221  0482  3A01               	xorlw	1	; case 5
 15222  0483  1903               	skipnz
 15223  0484  2C7A               	goto	i1l4300
 15224  0485  3A0D               	xorlw	13	; case 8
 15225  0486  1903               	skipnz
 15226  0487  2C77               	goto	i1l911
 15227  0488  3A01               	xorlw	1	; case 9
 15228  0489  1903               	skipnz
 15229  048A  2C77               	goto	i1l4298
 15230  048B  3A03               	xorlw	3	; case 10
 15231  048C  1903               	skipnz
 15232  048D  2C77               	goto	i1l4298
 15233  048E  3A01               	xorlw	1	; case 11
 15234  048F  1903               	skipnz
 15235  0490  2C77               	goto	i1l4298
 15236  0491  3A07               	xorlw	7	; case 12
 15237  0492  1903               	skipnz
 15238  0493  2C74               	goto	i1l907
 15239  0494  3A01               	xorlw	1	; case 13
 15240  0495  1903               	skipnz
 15241  0496  2C74               	goto	i1l4296
 15242  0497  3A03               	xorlw	3	; case 14
 15243  0498  1903               	skipnz
 15244  0499  2C74               	goto	i1l4296
 15245  049A  3A01               	xorlw	1	; case 15
 15246  049B  1903               	skipnz
 15247  049C  2C74               	goto	i1l4296
 15248  049D  3A1B               	xorlw	27	; case 20
 15249  049E  1903               	skipnz
 15250  049F  2C71               	goto	i1l903
 15251  04A0  3A01               	xorlw	1	; case 21
 15252  04A1  1903               	skipnz
 15253  04A2  2C71               	goto	i1l4294
 15254  04A3  3A03               	xorlw	3	; case 22
 15255  04A4  1903               	skipnz
 15256  04A5  2C71               	goto	i1l4294
 15257  04A6  3A01               	xorlw	1	; case 23
 15258  04A7  1903               	skipnz
 15259  04A8  2C71               	goto	i1l4294
 15260  04A9  3A0B               	xorlw	11	; case 28
 15261  04AA  1903               	skipnz
 15262  04AB  2C6E               	goto	i1l899
 15263  04AC  3A01               	xorlw	1	; case 29
 15264  04AD  1903               	skipnz
 15265  04AE  2C6E               	goto	i1l4292
 15266  04AF  3A03               	xorlw	3	; case 30
 15267  04B0  1903               	skipnz
 15268  04B1  2C6E               	goto	i1l4292
 15269  04B2  3A01               	xorlw	1	; case 31
 15270  04B3  1903               	skipnz
 15271  04B4  2C6E               	goto	i1l4292
 15272  04B5  3A5F               	xorlw	95	; case 64
 15273  04B6  1903               	skipnz
 15274  04B7  2C6C               	goto	i1l4290
 15275  04B8  3A01               	xorlw	1	; case 65
 15276  04B9  1903               	skipnz
 15277  04BA  2C6C               	goto	i1l4290
 15278  04BB  3A05               	xorlw	5	; case 68
 15279  04BC  1903               	skipnz
 15280  04BD  2C6A               	goto	i1l4288
 15281  04BE  3A01               	xorlw	1	; case 69
 15282  04BF  1903               	skipnz
 15283  04C0  2C68               	goto	i1l4286
 15284  04C1  3A0D               	xorlw	13	; case 72
 15285  04C2  1903               	skipnz
 15286  04C3  2C6A               	goto	i1l4288
 15287  04C4  3A01               	xorlw	1	; case 73
 15288  04C5  1903               	skipnz
 15289  04C6  2C68               	goto	i1l4286
 15290  04C7  3A05               	xorlw	5	; case 76
 15291  04C8  1903               	skipnz
 15292  04C9  2C6A               	goto	i1l4288
 15293  04CA  3A01               	xorlw	1	; case 77
 15294  04CB  1903               	skipnz
 15295  04CC  2C68               	goto	i1l4286
 15296  04CD  3A1D               	xorlw	29	; case 80
 15297  04CE  1903               	skipnz
 15298  04CF  2C63               	goto	i1l4284
 15299  04D0  3A01               	xorlw	1	; case 81
 15300  04D1  1903               	skipnz
 15301  04D2  2C65               	goto	i1l888
 15302  04D3  3A05               	xorlw	5	; case 84
 15303  04D4  1903               	skipnz
 15304  04D5  2C63               	goto	i1l4284
 15305  04D6  3A01               	xorlw	1	; case 85
 15306  04D7  1903               	skipnz
 15307  04D8  2C65               	goto	i1l888
 15308  04D9  3A0D               	xorlw	13	; case 88
 15309  04DA  1903               	skipnz
 15310  04DB  2C63               	goto	i1l4284
 15311  04DC  3A01               	xorlw	1	; case 89
 15312  04DD  1903               	skipnz
 15313  04DE  2C65               	goto	i1l888
 15314  04DF  2CE0               	goto	i1l4306
 15315  04E0                     i1l4306:	
 15316                           
 15317                           ;ir.c: 68: return idx;
 15318  04E0  0870               	movf	i1IR_GetIndex@idx,w
 15319  04E1  0008               	return
 15320  04E2                     __end_ofi1_IR_GetIndex:	
 15321  04E2                     __ptext94:	
 15322 ;; *************** function i1_Led_StartNotice *****************
 15323 ;; Defined at:
 15324 ;;		line 381 in file "user/src/led.c"
 15325 ;; Parameters:    Size  Location     Type
 15326 ;;  cnt             1    wreg     unsigned char 
 15327 ;; Auto vars:     Size  Location     Type
 15328 ;;  cnt             1    1[COMMON] unsigned char 
 15329 ;; Return value:  Size  Location     Type
 15330 ;;                  1    wreg      void 
 15331 ;; Registers used:
 15332 ;;		wreg, status,2, status,0, pclath, cstack
 15333 ;; Tracked objects:
 15334 ;;		On entry : 0/0
 15335 ;;		On exit  : 1F/8
 15336 ;;		Unchanged: 0/0
 15337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15339 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;Total ram usage:        2 bytes
 15343 ;; Hardware stack levels used:    1
 15344 ;; Hardware stack levels required when called:    1
 15345 ;; This function calls:
 15346 ;;		i1_TMR4_StartTimer
 15347 ;; This function is called by:
 15348 ;;		_IR_ScanLongPress
 15349 ;; This function uses a non-reentrant model
 15350 ;;
 15351                           
 15352                           
 15353                           ;psect for function i1_Led_StartNotice
 15354  04E2                     i1_Led_StartNotice:	
 15355                           
 15356                           ;incstack = 0
 15357                           ; Regs used in i1_Led_StartNotice: [wreg+status,2+status,0+pclath+cstack]
 15358                           ;i1Led_StartNotice@cnt stored from wreg
 15359  04E2  00F1               	movwf	i1Led_StartNotice@cnt
 15360                           
 15361                           ;led.c: 382: gLedRunPara.mNoticeCount = cnt;
 15362  04E3  00F0               	movwf	??i1_Led_StartNotice
 15363  04E4  0DF0               	rlf	??i1_Led_StartNotice,f
 15364  04E5  0DF0               	rlf	??i1_Led_StartNotice,f
 15365  04E6  0021               	movlb	1	; select bank1
 15366  04E7  085C               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
 15367  04E8  0670               	xorwf	??i1_Led_StartNotice,w
 15368  04E9  3903               	andlw	-253
 15369  04EA  0670               	xorwf	??i1_Led_StartNotice,w
 15370  04EB  00DC               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
 15371                           
 15372                           ;led.c: 383: TMR4_StartTimer();
 15373  04EC  2576               	fcall	i1_TMR4_StartTimer
 15374  04ED  0008               	return
 15375  04EE                     __end_ofi1_Led_StartNotice:	
 15376  04EE                     __ptext97:	
 15377 ;; *************** function _Led_SetCustom *****************
 15378 ;; Defined at:
 15379 ;;		line 240 in file "user/src/led.c"
 15380 ;; Parameters:    Size  Location     Type
 15381 ;;  idx             1    wreg     unsigned char 
 15382 ;;  pValue          1    3[COMMON] PTR unsigned int 
 15383 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), 
 15384 ;; Auto vars:     Size  Location     Type
 15385 ;;  idx             1    7[COMMON] unsigned char 
 15386 ;;  i               1   10[COMMON] unsigned char 
 15387 ;;  value           2    8[COMMON] unsigned int 
 15388 ;; Return value:  Size  Location     Type
 15389 ;;                  1    wreg      void 
 15390 ;; Registers used:
 15391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15392 ;; Tracked objects:
 15393 ;;		On entry : 1F/0
 15394 ;;		On exit  : 0/0
 15395 ;;		Unchanged: 0/0
 15396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15397 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15398 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15399 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15400 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15401 ;;Total ram usage:        8 bytes
 15402 ;; Hardware stack levels used:    1
 15403 ;; Hardware stack levels required when called:    1
 15404 ;; This function calls:
 15405 ;;		i1___bmul
 15406 ;; This function is called by:
 15407 ;;		_IR_ScanLongPress
 15408 ;; This function uses a non-reentrant model
 15409 ;;
 15410                           
 15411                           
 15412                           ;psect for function _Led_SetCustom
 15413  04EE                     _Led_SetCustom:	
 15414                           
 15415                           ;incstack = 0
 15416                           ; Regs used in _Led_SetCustom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15417                           ;Led_SetCustom@idx stored from wreg
 15418  04EE  00F7               	movwf	Led_SetCustom@idx
 15419                           
 15420                           ;led.c: 241: uint16_t value;
 15421                           ;led.c: 242: if (idx >= 4) {
 15422  04EF  3004               	movlw	4
 15423  04F0  0277               	subwf	Led_SetCustom@idx,w
 15424  04F1  1803               	btfsc	3,0
 15425  04F2  0008               	return
 15426                           
 15427                           ;led.c: 244: }
 15428                           ;led.c: 245: for (uint8_t i = 0; i < 5; i++) {
 15429  04F3  01FA               	clrf	Led_SetCustom@i
 15430  04F4                     i1l6064:	
 15431                           
 15432                           ;led.c: 246: value = *pValue++;
 15433  04F4  0873               	movf	Led_SetCustom@pValue,w
 15434  04F5  0086               	movwf	6
 15435  04F6  0187               	clrf	7
 15436  04F7  3F40               	moviw [0]fsr1
 15437  04F8  00F8               	movwf	Led_SetCustom@value
 15438  04F9  3F41               	moviw [1]fsr1
 15439  04FA  00F9               	movwf	Led_SetCustom@value+1
 15440  04FB  3003               	movlw	3
 15441  04FC  0AF3               	incf	Led_SetCustom@pValue,f
 15442  04FD  0AF3               	incf	Led_SetCustom@pValue,f
 15443                           
 15444                           ;led.c: 250: if (value <= 1000)
 15445  04FE  0279               	subwf	Led_SetCustom@value+1,w
 15446  04FF  30E9               	movlw	233
 15447  0500  1903               	skipnz
 15448  0501  0278               	subwf	Led_SetCustom@value,w
 15449  0502  1803               	skipnc
 15450  0503  2D18               	goto	i1l6072
 15451                           
 15452                           ;led.c: 252: {
 15453                           ;led.c: 253: gLedPara.mCustom[idx][i] = value;
 15454  0504  087A               	movf	Led_SetCustom@i,w
 15455  0505  00F4               	movwf	??_Led_SetCustom
 15456  0506  302C               	movlw	(low ((_gLedPara| (0+256)+12)))& (0+255)
 15457  0507  35F4               	lslf	??_Led_SetCustom,f
 15458  0508  0774               	addwf	??_Led_SetCustom,w
 15459  0509  00F5               	movwf	??_Led_SetCustom+1
 15460  050A  300A               	movlw	10
 15461  050B  00F0               	movwf	i1___bmul@multiplicand
 15462  050C  0877               	movf	Led_SetCustom@idx,w
 15463  050D  251E  3183         	fcall	i1___bmul
 15464  050F  0775               	addwf	??_Led_SetCustom+1,w
 15465  0510  00F6               	movwf	??_Led_SetCustom+2
 15466  0511  0086               	movwf	6
 15467  0512  3001               	movlw	1	; select bank2/3
 15468  0513  0087               	movwf	7
 15469  0514  0878               	movf	Led_SetCustom@value,w
 15470  0515  3FC0               	movwi [0]fsr1
 15471  0516  0879               	movf	Led_SetCustom@value+1,w
 15472  0517  3FC1               	movwi [1]fsr1
 15473  0518                     i1l6072:	
 15474  0518  3005               	movlw	5
 15475  0519  0AFA               	incf	Led_SetCustom@i,f
 15476  051A  027A               	subwf	Led_SetCustom@i,w
 15477  051B  1803               	btfsc	3,0
 15478  051C  0008               	return
 15479  051D  2CF4               	goto	i1l6064
 15480  051E                     __end_of_Led_SetCustom:	
 15481  051E                     __ptext98:	
 15482 ;; *************** function i1___bmul *****************
 15483 ;; Defined at:
 15484 ;;		line 4 in file "/Applications/microchip/xc8/v1.40/sources/common/Umul8.c"
 15485 ;; Parameters:    Size  Location     Type
 15486 ;;  multiplier      1    wreg     unsigned char 
 15487 ;;  multiplicand    1    0[COMMON] unsigned char 
 15488 ;; Auto vars:     Size  Location     Type
 15489 ;;  multiplier      1    1[COMMON] unsigned char 
 15490 ;;  __bmul          1    2[COMMON] unsigned char 
 15491 ;; Return value:  Size  Location     Type
 15492 ;;                  1    wreg      unsigned char 
 15493 ;; Registers used:
 15494 ;;		wreg, status,2, status,0
 15495 ;; Tracked objects:
 15496 ;;		On entry : 0/0
 15497 ;;		On exit  : 0/0
 15498 ;;		Unchanged: 0/0
 15499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15500 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15501 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15503 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15504 ;;Total ram usage:        3 bytes
 15505 ;; Hardware stack levels used:    1
 15506 ;; This function calls:
 15507 ;;		Nothing
 15508 ;; This function is called by:
 15509 ;;		_Led_SetCustom
 15510 ;; This function uses a non-reentrant model
 15511 ;;
 15512                           
 15513                           
 15514                           ;psect for function i1___bmul
 15515  051E                     i1___bmul:	
 15516                           
 15517                           ;incstack = 0
 15518                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 15519                           ;i1___bmul@multiplier stored from wreg
 15520  051E  00F1               	movwf	i1___bmul@multiplier
 15521  051F  01F2               	clrf	i1___bmul@product
 15522  0520                     i1l3938:	
 15523  0520  0870               	movf	i1___bmul@multiplicand,w
 15524  0521  1871               	btfsc	i1___bmul@multiplier,0
 15525  0522  07F2               	addwf	i1___bmul@product,f
 15526  0523  35F0               	lslf	i1___bmul@multiplicand,f
 15527  0524  36F1               	lsrf	i1___bmul@multiplier,f
 15528  0525  0871               	movf	i1___bmul@multiplier,w
 15529  0526  1D03               	btfss	3,2
 15530  0527  2D20               	goto	i1l3938
 15531  0528  0872               	movf	i1___bmul@product,w
 15532  0529  0008               	return
 15533  052A                     __end_ofi1___bmul:	
 15534  052A                     __ptext93:	
 15535 ;; *************** function i1_Util_DecValue *****************
 15536 ;; Defined at:
 15537 ;;		line 15 in file "user/src/util.c"
 15538 ;; Parameters:    Size  Location     Type
 15539 ;;  pSrc            2    0[COMMON] PTR unsigned int 
 15540 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), gLedPara(76), 
 15541 ;;  min             2    2[COMMON] unsigned int 
 15542 ;;  delta           2    4[COMMON] unsigned int 
 15543 ;; Auto vars:     Size  Location     Type
 15544 ;;		None
 15545 ;; Return value:  Size  Location     Type
 15546 ;;                  1    wreg      void 
 15547 ;; Registers used:
 15548 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15549 ;; Tracked objects:
 15550 ;;		On entry : 1F/0
 15551 ;;		On exit  : 1F/0
 15552 ;;		Unchanged: 1F/0
 15553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15554 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15556 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15557 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15558 ;;Total ram usage:       10 bytes
 15559 ;; Hardware stack levels used:    1
 15560 ;; This function calls:
 15561 ;;		Nothing
 15562 ;; This function is called by:
 15563 ;;		_IR_ScanLongPress
 15564 ;; This function uses a non-reentrant model
 15565 ;;
 15566                           
 15567                           
 15568                           ;psect for function i1_Util_DecValue
 15569  052A                     i1_Util_DecValue:	
 15570                           
 15571                           ;util.c: 17: if( *pSrc > min + delta )
 15572                           
 15573                           ;incstack = 0
 15574                           ; Regs used in i1_Util_DecValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 15575  052A  0870               	movf	i1Util_DecValue@pSrc,w
 15576  052B  0086               	movwf	6
 15577  052C  0871               	movf	i1Util_DecValue@pSrc+1,w
 15578  052D  0087               	movwf	7
 15579  052E  3F40               	moviw [0]fsr1
 15580  052F  00F6               	movwf	??i1_Util_DecValue
 15581  0530  3F41               	moviw [1]fsr1
 15582  0531  00F7               	movwf	??i1_Util_DecValue+1
 15583  0532  0874               	movf	i1Util_DecValue@delta,w
 15584  0533  0772               	addwf	i1Util_DecValue@min,w
 15585  0534  00F8               	movwf	??i1_Util_DecValue+2
 15586  0535  0875               	movf	i1Util_DecValue@delta+1,w
 15587  0536  3D73               	addwfc	i1Util_DecValue@min+1,w
 15588  0537  00F9               	movwf	??i1_Util_DecValue+3
 15589  0538  0877               	movf	??i1_Util_DecValue+1,w
 15590  0539  0279               	subwf	??i1_Util_DecValue+3,w
 15591  053A  1D03               	skipz
 15592  053B  2D3E               	goto	u294_25
 15593  053C  0876               	movf	??i1_Util_DecValue,w
 15594  053D  0278               	subwf	??i1_Util_DecValue+2,w
 15595  053E                     u294_25:	
 15596                           
 15597                           ;util.c: 18: {
 15598                           ;util.c: 19: (*pSrc) -= delta;
 15599  053E  0870               	movf	i1Util_DecValue@pSrc,w
 15600  053F  0086               	movwf	6
 15601  0540  0871               	movf	i1Util_DecValue@pSrc+1,w
 15602  0541  0087               	movwf	7
 15603  0542  1803               	skipnc
 15604  0543  2D4B               	goto	L21
 15605  0544  0874               	movf	i1Util_DecValue@delta,w
 15606  0545  0281               	subwf	1,f
 15607  0546  3141               	addfsr 1,1
 15608  0547  0875               	movf	i1Util_DecValue@delta+1,w
 15609  0548  3B81               	subwfb	1,f
 15610  0549  317F               	addfsr 1,-1
 15611                           
 15612                           ;util.c: 20: }
 15613  054A  0008               	return
 15614  054B                     L21:	
 15615                           ;util.c: 21: else
 15616                           ;util.c: 22: {
 15617                           ;util.c: 23: *pSrc = min;
 15618                           
 15619  054B  0872               	movf	i1Util_DecValue@min,w
 15620  054C  3FC0               	movwi [0]fsr1
 15621  054D  0873               	movf	i1Util_DecValue@min+1,w
 15622  054E  3FC1               	movwi [1]fsr1
 15623  054F  0008               	return
 15624  0550                     __end_ofi1_Util_DecValue:	
 15625  0550                     __ptext92:	
 15626 ;; *************** function i1_Util_IncValue *****************
 15627 ;; Defined at:
 15628 ;;		line 3 in file "user/src/util.c"
 15629 ;; Parameters:    Size  Location     Type
 15630 ;;  pSrc            2    0[COMMON] PTR unsigned int 
 15631 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara.mCurrentBright(10), gLedRunPara(26), gLedPara.mVolume(1), 
 15632 ;;		 -> gLedPara(76), 
 15633 ;;  max             2    2[COMMON] unsigned int 
 15634 ;;  delta           2    4[COMMON] unsigned int 
 15635 ;; Auto vars:     Size  Location     Type
 15636 ;;		None
 15637 ;; Return value:  Size  Location     Type
 15638 ;;                  1    wreg      void 
 15639 ;; Registers used:
 15640 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15641 ;; Tracked objects:
 15642 ;;		On entry : 1F/0
 15643 ;;		On exit  : 1F/0
 15644 ;;		Unchanged: 1F/0
 15645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15646 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15648 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15649 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15650 ;;Total ram usage:       10 bytes
 15651 ;; Hardware stack levels used:    1
 15652 ;; This function calls:
 15653 ;;		Nothing
 15654 ;; This function is called by:
 15655 ;;		_IR_ScanLongPress
 15656 ;; This function uses a non-reentrant model
 15657 ;;
 15658                           
 15659                           
 15660                           ;psect for function i1_Util_IncValue
 15661  0550                     i1_Util_IncValue:	
 15662                           
 15663                           ;util.c: 5: if( *pSrc + delta < max )
 15664                           
 15665                           ;incstack = 0
 15666                           ; Regs used in i1_Util_IncValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 15667  0550  0870               	movf	i1Util_IncValue@pSrc,w
 15668  0551  0086               	movwf	6
 15669  0552  0871               	movf	i1Util_IncValue@pSrc+1,w
 15670  0553  0087               	movwf	7
 15671  0554  3F40               	moviw [0]fsr1
 15672  0555  00F6               	movwf	??i1_Util_IncValue
 15673  0556  3F41               	moviw [1]fsr1
 15674  0557  00F7               	movwf	??i1_Util_IncValue+1
 15675  0558  0874               	movf	i1Util_IncValue@delta,w
 15676  0559  0776               	addwf	??i1_Util_IncValue,w
 15677  055A  00F8               	movwf	??i1_Util_IncValue+2
 15678  055B  0875               	movf	i1Util_IncValue@delta+1,w
 15679  055C  3D77               	addwfc	??i1_Util_IncValue+1,w
 15680  055D  00F9               	movwf	??i1_Util_IncValue+3
 15681  055E  0873               	movf	i1Util_IncValue@max+1,w
 15682  055F  0279               	subwf	??i1_Util_IncValue+3,w
 15683  0560  1D03               	skipz
 15684  0561  2D64               	goto	u293_25
 15685  0562  0872               	movf	i1Util_IncValue@max,w
 15686  0563  0278               	subwf	??i1_Util_IncValue+2,w
 15687  0564                     u293_25:	
 15688                           
 15689                           ;util.c: 6: {
 15690                           ;util.c: 7: (*pSrc) += delta;
 15691  0564  0870               	movf	i1Util_IncValue@pSrc,w
 15692  0565  0086               	movwf	6
 15693  0566  0871               	movf	i1Util_IncValue@pSrc+1,w
 15694  0567  0087               	movwf	7
 15695  0568  1803               	skipnc
 15696  0569  2D71               	goto	L20
 15697  056A  0874               	movf	i1Util_IncValue@delta,w
 15698  056B  0781               	addwf	1,f
 15699  056C  3141               	addfsr 1,1
 15700  056D  0875               	movf	i1Util_IncValue@delta+1,w
 15701  056E  3D81               	addwfc	1,f
 15702  056F  317F               	addfsr 1,-1
 15703                           
 15704                           ;util.c: 8: }
 15705  0570  0008               	return
 15706  0571                     L20:	
 15707                           ;util.c: 9: else
 15708                           ;util.c: 10: {
 15709                           ;util.c: 11: *pSrc = max;
 15710                           
 15711  0571  0872               	movf	i1Util_IncValue@max,w
 15712  0572  3FC0               	movwi [0]fsr1
 15713  0573  0873               	movf	i1Util_IncValue@max+1,w
 15714  0574  3FC1               	movwi [1]fsr1
 15715  0575  0008               	return
 15716  0576                     __end_ofi1_Util_IncValue:	
 15717  0576                     __ptext95:	
 15718 ;; *************** function i1_TMR4_StartTimer *****************
 15719 ;; Defined at:
 15720 ;;		line 17 in file "driver/src/tmr4.c"
 15721 ;; Parameters:    Size  Location     Type
 15722 ;;		None
 15723 ;; Auto vars:     Size  Location     Type
 15724 ;;		None
 15725 ;; Return value:  Size  Location     Type
 15726 ;;                  1    wreg      void 
 15727 ;; Registers used:
 15728 ;;		None
 15729 ;; Tracked objects:
 15730 ;;		On entry : 1F/1
 15731 ;;		On exit  : 1F/8
 15732 ;;		Unchanged: 0/0
 15733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15738 ;;Total ram usage:        0 bytes
 15739 ;; Hardware stack levels used:    1
 15740 ;; This function calls:
 15741 ;;		Nothing
 15742 ;; This function is called by:
 15743 ;;		i1_Led_StartNotice
 15744 ;; This function uses a non-reentrant model
 15745 ;;
 15746                           
 15747                           
 15748                           ;psect for function i1_TMR4_StartTimer
 15749  0576                     i1_TMR4_StartTimer:	
 15750                           
 15751                           ;tmr4.c: 19: T4CONbits.TMR4ON = 1;
 15752                           
 15753                           ;incstack = 0
 15754                           ; Regs used in i1_TMR4_StartTimer: []
 15755  0576  0028               	movlb	8	; select bank8
 15756  0577  1517               	bsf	23,2	;volatile
 15757  0578  0008               	return
 15758  0579                     __end_ofi1_TMR4_StartTimer:	
 15759  0579                     __ptext85:	
 15760 ;; *************** function _Led_Ramp *****************
 15761 ;; Defined at:
 15762 ;;		line 258 in file "user/src/led.c"
 15763 ;; Parameters:    Size  Location     Type
 15764 ;;		None
 15765 ;; Auto vars:     Size  Location     Type
 15766 ;;  i               1   10[COMMON] unsigned char 
 15767 ;; Return value:  Size  Location     Type
 15768 ;;                  1    wreg      void 
 15769 ;; Registers used:
 15770 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15771 ;; Tracked objects:
 15772 ;;		On entry : 1C/0
 15773 ;;		On exit  : 14/4
 15774 ;;		Unchanged: 0/0
 15775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15778 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15779 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15780 ;;Total ram usage:        7 bytes
 15781 ;; Hardware stack levels used:    1
 15782 ;; Hardware stack levels required when called:    1
 15783 ;; This function calls:
 15784 ;;		i1_PWM1_LoadDutyValue
 15785 ;;		i1_PWM2_LoadDutyValue
 15786 ;;		i1_PWM3_LoadDutyValue
 15787 ;;		i1_PWM4_LoadDutyValue
 15788 ;;		i1_PWM5_LoadDutyValue
 15789 ;; This function is called by:
 15790 ;;		_Led_Run
 15791 ;; This function uses a non-reentrant model
 15792 ;;
 15793                           
 15794                           
 15795                           ;psect for function _Led_Ramp
 15796  0579                     _Led_Ramp:	
 15797  0579                     i1l6232:	
 15798                           ;incstack = 0
 15799                           ; Regs used in _Led_Ramp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15800                           
 15801                           
 15802                           ;led.c: 259: for (uint8_t i = 0; i < 5; i++) {
 15803  0579  01FA               	clrf	Led_Ramp@i
 15804  057A                     i1l6238:	
 15805                           
 15806                           ;led.c: 260: if (gLedRunPara.mCurrentBright[i] + 1 < gLedRunPara.mTargetBright[i]) {
 15807  057A  357A               	lslf	Led_Ramp@i,w
 15808  057B  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15809  057C  25D8  3183         	fcall	PL78	;call to abstracted procedure
 15810  057E  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15811  057F  25B7  3183         	fcall	PL12	;call to abstracted procedure
 15812  0581  1803               	skipnc
 15813  0582  2D8A               	goto	i1l6242
 15814                           
 15815                           ;led.c: 261: gLedRunPara.mCurrentBright[i] += 1;
 15816  0583  357A               	lslf	Led_Ramp@i,w
 15817  0584  3182  22F1  3183   	fcall	PL22	;call to abstracted procedure
 15818  0587  1803               	skipnc
 15819  0588  0A81               	incf	1,f
 15820                           
 15821                           ;led.c: 262: } else if (gLedRunPara.mCurrentBright[i] > gLedRunPara.mTargetBright[i] + 1
      +                          ) {
 15822  0589  2DA0               	goto	i1l6248
 15823  058A                     i1l6242:	
 15824  058A  357A               	lslf	Led_Ramp@i,w
 15825  058B  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15826  058C  25D8  3183         	fcall	PL78	;call to abstracted procedure
 15827  058E  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15828  058F  25B7  3183         	fcall	PL12	;call to abstracted procedure
 15829  0591  1803               	skipnc
 15830  0592  2D98               	goto	i1l6246
 15831                           
 15832                           ;led.c: 263: gLedRunPara.mCurrentBright[i] -= 1;
 15833  0593  357A               	lslf	Led_Ramp@i,w
 15834  0594  3182  22DC  3183   	fcall	PL4	;call to abstracted procedure
 15835                           
 15836                           ;led.c: 264: } else {
 15837  0597  2DA0               	goto	i1l6248
 15838  0598                     i1l6246:	
 15839                           
 15840                           ;led.c: 265: gLedRunPara.mCurrentBright[i] = gLedRunPara.mTargetBright[i];
 15841  0598  357A               	lslf	Led_Ramp@i,w
 15842  0599  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15843  059A  0086               	movwf	6
 15844  059B  0187               	clrf	7
 15845  059C  357A               	lslf	Led_Ramp@i,w
 15846  059D  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15847  059E  25B0  3183         	fcall	PL6	;call to abstracted procedure
 15848  05A0                     i1l6248:	
 15849                           
 15850                           ;led.c: 266: }
 15851                           ;led.c: 267: loadDuty[i](gLedRunPara.mCurrentBright[i]);
 15852  05A0  357A               	lslf	Led_Ramp@i,w
 15853  05A1  25D0               	fcall	PL76	;call to abstracted procedure
 15854  05A2  357A               	lslf	Led_Ramp@i,w
 15855  05A3  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
 15856  05A4  0086               	movwf	6
 15857  05A5  3F41               	moviw [1]fsr1
 15858  05A6  008A               	movwf	10
 15859  05A7  3F40               	moviw [0]fsr1
 15860  05A8  000A               	callw
 15861  05A9  3005               	movlw	5
 15862  05AA  3183               	pagesel	$
 15863  05AB  0AFA               	incf	Led_Ramp@i,f
 15864  05AC  027A               	subwf	Led_Ramp@i,w
 15865  05AD  1803               	btfsc	3,0
 15866  05AE  0008               	return
 15867  05AF  2D7A               	goto	i1l6238
 15868  05B0                     __end_of_Led_Ramp:	
 15869  05B0                     PL6:	
 15870  05B0  0084               	movwf	4
 15871  05B1  0185               	clrf	5
 15872  05B2  3F40               	moviw [0]fsr1
 15873  05B3  3F80               	movwi [0]fsr0
 15874  05B4  3F41               	moviw [1]fsr1
 15875  05B5  3F81               	movwi [1]fsr0
 15876  05B6  0008               	return
 15877  05B7                     __end_ofPL6:	
 15878  05B7                     PL12:	
 15879  05B7  0086               	movwf	6
 15880  05B8  3F40               	moviw [0]fsr1
 15881  05B9  00F6               	movwf	??_Led_Ramp+2
 15882  05BA  3F41               	moviw [1]fsr1
 15883  05BB  00F7               	movwf	??_Led_Ramp+3
 15884  05BC  0876               	movf	??_Led_Ramp+2,w
 15885  05BD  3E01               	addlw	1
 15886  05BE  00F8               	movwf	??_Led_Ramp+4
 15887  05BF  3000               	movlw	0
 15888  05C0  3D77               	addwfc	??_Led_Ramp+3,w
 15889  05C1  00F9               	movwf	??_Led_Ramp+5
 15890  05C2  0875               	movf	??_Led_Ramp+1,w
 15891  05C3  0279               	subwf	??_Led_Ramp+5,w
 15892  05C4  1D03               	skipz
 15893  05C5  0008               	return
 15894  05C6  0874               	movf	??_Led_Ramp,w
 15895  05C7  0278               	subwf	??_Led_Ramp+4,w
 15896  05C8  0008               	return
 15897  05C9                     __end_ofPL12:	
 15898  05C9                     PL18:	
 15899  05C9  0AA8               	incf	IR_ScanLongPress@cnt,f
 15900  05CA  1903               	skipnz
 15901  05CB  0AA9               	incf	IR_ScanLongPress@cnt+1,f
 15902  05CC  3002               	movlw	2
 15903  05CD  0629               	xorwf	IR_ScanLongPress@cnt+1,w
 15904  05CE  0428               	iorwf	IR_ScanLongPress@cnt,w
 15905  05CF  0008               	return
 15906  05D0                     __end_ofPL18:	
 15907  05D0                     PL76:	
 15908  05D0  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15909  05D1  0086               	movwf	6
 15910  05D2  0187               	clrf	7
 15911  05D3  3F40               	moviw [0]fsr1
 15912  05D4  00F0               	movwf	i1PWM5_LoadDutyValue@dutyValue
 15913  05D5  3F41               	moviw [1]fsr1
 15914  05D6  00F1               	movwf	i1PWM5_LoadDutyValue@dutyValue+1
 15915  05D7  0008               	return
 15916  05D8                     __end_ofPL76:	
 15917  05D8                     PL78:	
 15918  05D8  0086               	movwf	6
 15919  05D9  0187               	clrf	7
 15920  05DA  3F40               	moviw [0]fsr1
 15921  05DB  00F4               	movwf	??_Led_Ramp
 15922  05DC  3F41               	moviw [1]fsr1
 15923  05DD  00F5               	movwf	??_Led_Ramp+1
 15924  05DE  357A               	lslf	Led_Ramp@i,w
 15925  05DF  0008               	return
 15926  05E0                     __end_ofPL78:	
 15927  05E0                     PL98:	
 15928  05E0  0E36               	swapf	_ir_state,w	;volatile
 15929  05E1  0C89               	rrf	9,f
 15930  05E2  3907               	andlw	7
 15931  05E3  3A05               	xorlw	5
 15932  05E4  0008               	return
 15933  05E5                     __end_ofPL98:	
 15934  05E5                     PL100:	
 15935  05E5  0E36               	swapf	_ir_state,w	;volatile
 15936  05E6  0C89               	rrf	9,f
 15937  05E7  3907               	andlw	7
 15938  05E8  3A04               	xorlw	4
 15939  05E9  0008               	return
 15940  05EA                     __end_ofPL100:	
 15941                           
 15942                           	psect	text99
 15943  14B7                     __ptext99:	
 15944 ;; *************** function _TMR1_GATE_ISR *****************
 15945 ;; Defined at:
 15946 ;;		line 40 in file "driver/src/tmr1.c"
 15947 ;; Parameters:    Size  Location     Type
 15948 ;;		None
 15949 ;; Auto vars:     Size  Location     Type
 15950 ;;		None
 15951 ;; Return value:  Size  Location     Type
 15952 ;;                  1    wreg      void 
 15953 ;; Registers used:
 15954 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15955 ;; Tracked objects:
 15956 ;;		On entry : 1F/0
 15957 ;;		On exit  : 0/0
 15958 ;;		Unchanged: 0/0
 15959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15964 ;;Total ram usage:        0 bytes
 15965 ;; Hardware stack levels used:    1
 15966 ;; Hardware stack levels required when called:    2
 15967 ;; This function calls:
 15968 ;;		Absolute function
 15969 ;;		_IR_Decode
 15970 ;; This function is called by:
 15971 ;;		_ISR
 15972 ;; This function uses a non-reentrant model
 15973 ;;
 15974                           
 15975                           
 15976                           ;psect for function _TMR1_GATE_ISR
 15977  14B7                     _TMR1_GATE_ISR:	
 15978                           
 15979                           ;tmr1.c: 42: PIR1bits.TMR1GIF = 0;
 15980                           
 15981                           ;incstack = 0
 15982                           ; Regs used in _TMR1_GATE_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15983  14B7  1391               	bcf	17,7	;volatile
 15984                           
 15985                           ;tmr1.c: 43: if ( tmr1_gate_isr_handler )
 15986  14B8  0021               	movlb	1	; select bank1
 15987  14B9  0864               	movf	_tmr1_gate_isr_handler^(0+128),w
 15988  14BA  0465               	iorwf	(_tmr1_gate_isr_handler+1)^(0+128),w
 15989  14BB  1903               	btfsc	3,2
 15990  14BC  0008               	return
 15991                           
 15992                           ;tmr1.c: 44: {
 15993                           ;tmr1.c: 45: tmr1_gate_isr_handler ( );
 15994  14BD  0865               	movf	(_tmr1_gate_isr_handler+1)^(0+128),w
 15995  14BE  008A               	movwf	10
 15996  14BF  0864               	movf	_tmr1_gate_isr_handler^(0+128),w
 15997  14C0  000A               	callw
 15998  14C1  3194               	pagesel	$
 15999  14C2  0008               	return
 16000  14C3                     __end_of_TMR1_GATE_ISR:	
 16001                           
 16002                           	psect	text100
 16003  05EA                     __ptext100:	
 16004 ;; *************** function _IR_Decode *****************
 16005 ;; Defined at:
 16006 ;;		line 250 in file "user/src/ir.c"
 16007 ;; Parameters:    Size  Location     Type
 16008 ;;		None
 16009 ;; Auto vars:     Size  Location     Type
 16010 ;;  type            1    8[COMMON] unsigned char 
 16011 ;;  hVal            2   10[COMMON] unsigned int 
 16012 ;;  keyNum          1    9[COMMON] unsigned char 
 16013 ;;  revKeyNum       1    7[COMMON] unsigned char 
 16014 ;; Return value:  Size  Location     Type
 16015 ;;                  1    wreg      void 
 16016 ;; Registers used:
 16017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16018 ;; Tracked objects:
 16019 ;;		On entry : 1F/1
 16020 ;;		On exit  : 1E/0
 16021 ;;		Unchanged: 0/0
 16022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16024 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16025 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16026 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16027 ;;Total ram usage:        9 bytes
 16028 ;; Hardware stack levels used:    1
 16029 ;; Hardware stack levels required when called:    1
 16030 ;; This function calls:
 16031 ;;		_IR_GetKeyType
 16032 ;;		i1_TMR2_DisableInterrupt
 16033 ;;		i1_TMR2_EnableInterrupt
 16034 ;; This function is called by:
 16035 ;;		_Interrupt_Initialize
 16036 ;;		_TMR1_GATE_ISR
 16037 ;; This function uses a non-reentrant model
 16038 ;;
 16039                           
 16040                           
 16041                           ;psect for function _IR_Decode
 16042  05EA                     _IR_Decode:	
 16043                           
 16044                           ;ir.c: 252: uint8_t revKeyNum = 0;
 16045                           
 16046                           ;incstack = 0
 16047                           ; Regs used in _IR_Decode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16048  05EA  01F7               	clrf	IR_Decode@revKeyNum
 16049                           
 16050                           ;ir.c: 253: uint16_t hVal = TMR1;
 16051  05EB  0020               	movlb	0	; select bank0
 16052  05EC  081A               	movf	26,w	;volatile
 16053  05ED  00FB               	movwf	IR_Decode@hVal+1
 16054  05EE  0819               	movf	25,w	;volatile
 16055  05EF  00FA               	movwf	IR_Decode@hVal
 16056                           
 16057                           ;ir.c: 254: static uint16_t codeVal = 0;
 16058                           ;ir.c: 255: static uint8_t nBit = 0;
 16059                           ;ir.c: 256: static uint8_t rptCnt = 0;
 16060                           ;ir.c: 258: TMR1 = 0;
 16061  05F0  0199               	clrf	25	;volatile
 16062  05F1  019A               	clrf	26	;volatile
 16063                           
 16064                           ;ir.c: 260: switch (ir_state.mState) {
 16065  05F2  2EA8               	goto	i1l5068
 16066  05F3                     i1l4972:	
 16067                           
 16068                           ;ir.c: 262: if (hVal > 2000 && hVal < 2500) {
 16069  05F3  3007               	movlw	7
 16070  05F4  027B               	subwf	IR_Decode@hVal+1,w
 16071  05F5  30D1               	movlw	209
 16072  05F6  1903               	skipnz
 16073  05F7  027A               	subwf	IR_Decode@hVal,w
 16074  05F8  1C03               	skipc
 16075  05F9  0008               	return
 16076  05FA  3009               	movlw	9
 16077  05FB  027B               	subwf	IR_Decode@hVal+1,w
 16078  05FC  30C4               	movlw	196
 16079  05FD  1903               	skipnz
 16080  05FE  027A               	subwf	IR_Decode@hVal,w
 16081  05FF  1803               	skipnc
 16082  0600  0008               	return
 16083                           
 16084                           ;ir.c: 263: ir_state.mState = 1;
 16085  0601  0836               	movf	_ir_state,w	;volatile
 16086  0602  39E3               	andlw	-29
 16087  0603  3804               	iorlw	4
 16088  0604  00B6               	movwf	_ir_state	;volatile
 16089                           
 16090                           ;ir.c: 264: codeVal = 0;
 16091  0605  01A6               	clrf	IR_Decode@codeVal
 16092  0606  01A7               	clrf	IR_Decode@codeVal+1
 16093                           
 16094                           ;ir.c: 265: nBit = 0;
 16095  0607  01AE               	clrf	IR_Decode@nBit
 16096                           
 16097                           ;ir.c: 266: TMR2_DisableInterrupt();
 16098  0608  27C2               	fcall	i1_TMR2_DisableInterrupt
 16099  0609  0008               	return
 16100  060A                     i1l4984:	
 16101                           
 16102                           ;ir.c: 271: case 2:
 16103                           ;ir.c: 272: if (hVal > 220 && hVal < 340) {
 16104  060A  3000               	movlw	0
 16105  060B  027B               	subwf	IR_Decode@hVal+1,w
 16106  060C  30DD               	movlw	221
 16107  060D  1903               	skipnz
 16108  060E  027A               	subwf	IR_Decode@hVal,w
 16109  060F  1C03               	skipc
 16110  0610  2E1A               	goto	i1l4990
 16111  0611  3001               	movlw	1
 16112  0612  027B               	subwf	IR_Decode@hVal+1,w
 16113  0613  3054               	movlw	84
 16114  0614  1903               	skipnz
 16115  0615  027A               	subwf	IR_Decode@hVal,w
 16116  0616  1803               	skipnc
 16117  0617  2E1A               	goto	i1l4990
 16118  0618                     i1l4988:	
 16119                           
 16120                           ;ir.c: 273: nBit++;
 16121  0618  0AAE               	incf	IR_Decode@nBit,f
 16122                           
 16123                           ;ir.c: 274: } else if (hVal > 720 && hVal < 960) {
 16124  0619  2E38               	goto	i1l5000
 16125  061A                     i1l4990:	
 16126  061A  3002               	movlw	2
 16127  061B  027B               	subwf	IR_Decode@hVal+1,w
 16128  061C  30D1               	movlw	209
 16129  061D  1903               	skipnz
 16130  061E  027A               	subwf	IR_Decode@hVal,w
 16131  061F  1C03               	skipc
 16132  0620  2E36               	goto	i1l4998
 16133  0621  3003               	movlw	3
 16134  0622  027B               	subwf	IR_Decode@hVal+1,w
 16135  0623  30C0               	movlw	192
 16136  0624  1903               	skipnz
 16137  0625  027A               	subwf	IR_Decode@hVal,w
 16138  0626  1803               	skipnc
 16139  0627  2E36               	goto	i1l4998
 16140                           
 16141                           ;ir.c: 275: codeVal |= (1 << nBit);
 16142  0628  3001               	movlw	1
 16143  0629  00F3               	movwf	??_IR_Decode
 16144  062A  01F4               	clrf	??_IR_Decode+1
 16145  062B  0A2E               	incf	IR_Decode@nBit,w
 16146  062C  2E2F               	goto	u368_24
 16147  062D                     u368_25:	
 16148  062D  35F3               	lslf	??_IR_Decode,f
 16149  062E  0DF4               	rlf	??_IR_Decode+1,f
 16150  062F                     u368_24:	
 16151  062F  0B89               	decfsz	9,f
 16152  0630  2E2D               	goto	u368_25
 16153  0631  0873               	movf	??_IR_Decode,w
 16154  0632  04A6               	iorwf	IR_Decode@codeVal,f
 16155  0633  0874               	movf	??_IR_Decode+1,w
 16156  0634  04A7               	iorwf	IR_Decode@codeVal+1,f
 16157  0635  2E18               	goto	i1l4988
 16158  0636                     i1l4998:	
 16159                           
 16160                           ;ir.c: 278: ir_state.mState = 0;
 16161  0636  30E3               	movlw	-29
 16162  0637  05B6               	andwf	_ir_state,f	;volatile
 16163  0638                     i1l5000:	
 16164                           
 16165                           ;ir.c: 279: }
 16166                           ;ir.c: 280: if (nBit >= 16) {
 16167  0638  3010               	movlw	16
 16168  0639  022E               	subwf	IR_Decode@nBit,w
 16169  063A  1C03               	skipc
 16170  063B  0008               	return
 16171                           
 16172                           ;ir.c: 281: if (ir_state.mState == 1) {
 16173  063C  0C36               	rrf	_ir_state,w	;volatile
 16174  063D  0C89               	rrf	9,f
 16175  063E  3907               	andlw	7
 16176  063F  3A01               	xorlw	1
 16177  0640  1D03               	skipz
 16178  0641  2E4B               	goto	i1l5010
 16179                           
 16180                           ;ir.c: 282: if (codeVal == 0xFF00) {
 16181  0642  0A27               	incf	IR_Decode@codeVal+1,w
 16182  0643  0426               	iorwf	IR_Decode@codeVal,w
 16183  0644  1D03               	btfss	3,2
 16184  0645  2E89               	goto	i1l5050
 16185                           
 16186                           ;ir.c: 283: ir_state.mState = 2;
 16187  0646  0836               	movf	_ir_state,w	;volatile
 16188  0647  39E3               	andlw	-29
 16189  0648  3808               	iorlw	8
 16190  0649  00B6               	movwf	_ir_state	;volatile
 16191                           
 16192                           ;ir.c: 284: } else {
 16193  064A  2E8B               	goto	i1l5052
 16194  064B                     i1l5010:	
 16195                           ;ir.c: 285: ir_state.mState = 0;
 16196                           
 16197  064B  0C36               	rrf	_ir_state,w	;volatile
 16198  064C  0C89               	rrf	9,f
 16199  064D  3907               	andlw	7
 16200  064E  3A02               	xorlw	2
 16201  064F  1D03               	skipz
 16202  0650  2E8B               	goto	i1l5052
 16203                           
 16204                           ;ir.c: 288: TMR2_EnableInterrupt();
 16205  0651  27BF  3185         	fcall	i1_TMR2_EnableInterrupt
 16206                           
 16207                           ;ir.c: 289: keyNum = codeVal & 0xFF;
 16208  0653  0020               	movlb	0	; select bank0
 16209  0654  0826               	movf	IR_Decode@codeVal,w
 16210  0655  00F9               	movwf	IR_Decode@keyNum
 16211                           
 16212                           ;ir.c: 290: revKeyNum = codeVal >> 8;
 16213  0656  0827               	movf	IR_Decode@codeVal+1,w
 16214  0657  00F7               	movwf	IR_Decode@revKeyNum
 16215                           
 16216                           ;ir.c: 291: if (keyNum ^ revKeyNum == 0xFF)
 16217  0658  0F77               	incfsz	IR_Decode@revKeyNum,w
 16218  0659  2E5C               	goto	u373_20
 16219  065A  3001               	movlw	1
 16220  065B  2E5D               	goto	u374_20
 16221  065C                     u373_20:	
 16222  065C  3000               	movlw	0
 16223  065D                     u374_20:	
 16224  065D  00F3               	movwf	??_IR_Decode
 16225  065E  01F4               	clrf	??_IR_Decode+1
 16226  065F  0679               	xorwf	IR_Decode@keyNum,w
 16227  0660  00F5               	movwf	??_IR_Decode+2
 16228  0661  0874               	movf	??_IR_Decode+1,w
 16229  0662  00F6               	movwf	??_IR_Decode+3
 16230  0663  0475               	iorwf	??_IR_Decode+2,w
 16231  0664  1903               	btfsc	3,2
 16232  0665  2E89               	goto	i1l5050
 16233                           
 16234                           ;ir.c: 292: {
 16235                           ;ir.c: 293: uint8_t type = IR_GetKeyType(keyNum);
 16236  0666  0879               	movf	IR_Decode@keyNum,w
 16237  0667  26B8  3185         	fcall	_IR_GetKeyType
 16238  0669  00F8               	movwf	IR_Decode@type
 16239                           
 16240                           ;ir.c: 294: if (type == 255) {
 16241  066A  0F78               	incfsz	IR_Decode@type,w
 16242  066B  2E6E               	goto	i1l5030
 16243                           
 16244                           ;ir.c: 295: keyValue = 255;
 16245  066C  30FF               	movlw	255
 16246  066D  2E71               	goto	L30
 16247  066E                     i1l5030:	
 16248                           ;ir.c: 298: } else if (type == 1) {
 16249                           
 16250                           ;ir.c: 297: ir_state.mState = 0;
 16251                           
 16252                           ;ir.c: 296: ir_state.mKeyRcv = 1;
 16253                           
 16254  066E  0B78               	decfsz	IR_Decode@type,w
 16255  066F  2E75               	goto	i1l5038
 16256                           
 16257                           ;ir.c: 299: keyValue = keyNum;
 16258  0670  0879               	movf	IR_Decode@keyNum,w
 16259  0671                     L30:	
 16260  0671  0020               	movlb	0	; select bank0
 16261  0672  00B2               	movwf	_keyValue	;volatile
 16262                           
 16263                           ;ir.c: 300: ir_state.mKeyRcv = 1;
 16264  0673  1436               	bsf	_ir_state,0	;volatile
 16265  0674  2E89               	goto	i1l5050
 16266  0675                     i1l5038:	
 16267                           ;ir.c: 302: } else if (type == 3 || type == 2) {
 16268                           
 16269                           ;ir.c: 301: ir_state.mState = 0;
 16270                           
 16271  0675  3003               	movlw	3
 16272  0676  0678               	xorwf	IR_Decode@type,w
 16273  0677  1903               	btfsc	3,2
 16274  0678  2E7D               	goto	i1l5042
 16275  0679  3002               	movlw	2
 16276  067A  0678               	xorwf	IR_Decode@type,w
 16277  067B  1D03               	btfss	3,2
 16278  067C  2E86               	goto	i1l5048
 16279  067D                     i1l5042:	
 16280                           
 16281                           ;ir.c: 303: keyValue = keyNum;
 16282  067D  0879               	movf	IR_Decode@keyNum,w
 16283  067E  0020               	movlb	0	; select bank0
 16284  067F  00B2               	movwf	_keyValue	;volatile
 16285                           
 16286                           ;ir.c: 304: ir_state.mState = 3;
 16287  0680  0836               	movf	_ir_state,w	;volatile
 16288  0681  39E3               	andlw	-29
 16289  0682  380C               	iorlw	12
 16290  0683  00B6               	movwf	_ir_state	;volatile
 16291                           
 16292                           ;ir.c: 305: rptCnt = 0;
 16293  0684  01AF               	clrf	IR_Decode@rptCnt
 16294                           
 16295                           ;ir.c: 306: } else {
 16296  0685  2E8B               	goto	i1l5052
 16297  0686                     i1l5048:	
 16298                           
 16299                           ;ir.c: 307: ir_state.mState = 0;
 16300  0686  30E3               	movlw	-29
 16301  0687  0020               	movlb	0	; select bank0
 16302  0688  2E8A               	goto	L29
 16303  0689                     i1l5050:	
 16304                           
 16305                           ;ir.c: 310: ir_state.mState = 0;
 16306  0689  30E3               	movlw	-29
 16307  068A                     L29:	
 16308  068A  05B6               	andwf	_ir_state,f	;volatile
 16309  068B                     i1l5052:	
 16310                           
 16311                           ;ir.c: 311: }
 16312                           ;ir.c: 312: }
 16313                           ;ir.c: 313: codeVal = 0;
 16314  068B  01A6               	clrf	IR_Decode@codeVal
 16315  068C  01A7               	clrf	IR_Decode@codeVal+1
 16316                           
 16317                           ;ir.c: 314: nBit = 0;
 16318  068D  01AE               	clrf	IR_Decode@nBit
 16319  068E  0008               	return
 16320  068F                     i1l5056:	
 16321                           
 16322                           ;ir.c: 319: if (hVal > 1000 && hVal < 1250) {
 16323  068F  3003               	movlw	3
 16324  0690  027B               	subwf	IR_Decode@hVal+1,w
 16325  0691  30E9               	movlw	233
 16326  0692  1903               	skipnz
 16327  0693  027A               	subwf	IR_Decode@hVal,w
 16328  0694  1C03               	skipc
 16329  0695  0008               	return
 16330  0696  3004               	movlw	4
 16331  0697  027B               	subwf	IR_Decode@hVal+1,w
 16332  0698  30E2               	movlw	226
 16333  0699  1903               	skipnz
 16334  069A  027A               	subwf	IR_Decode@hVal,w
 16335  069B  1803               	skipnc
 16336  069C  0008               	return
 16337                           
 16338                           ;ir.c: 320: if (rptCnt < 4) {
 16339  069D  3004               	movlw	4
 16340  069E  022F               	subwf	IR_Decode@rptCnt,w
 16341  069F  1803               	skipnc
 16342  06A0  2EA3               	goto	i1l1082
 16343                           
 16344                           ;ir.c: 321: rptCnt++;
 16345  06A1  0AAF               	incf	IR_Decode@rptCnt,f
 16346                           
 16347                           ;ir.c: 322: } else {
 16348  06A2  0008               	return
 16349  06A3                     i1l1082:	
 16350                           
 16351                           ;ir.c: 323: ir_state.mKeyRpt = 1;
 16352  06A3  14B6               	bsf	_ir_state,1	;volatile
 16353  06A4  0008               	return
 16354  06A5                     i1l5064:	
 16355                           
 16356                           ;ir.c: 329: ir_state.mState = 0;
 16357  06A5  30E3               	movlw	-29
 16358  06A6  05B6               	andwf	_ir_state,f	;volatile
 16359                           
 16360                           ;ir.c: 330: break;
 16361  06A7  0008               	return
 16362  06A8                     i1l5068:	
 16363  06A8  0C36               	rrf	_ir_state,w	;volatile
 16364  06A9  0C89               	rrf	9,f
 16365  06AA  3907               	andlw	7
 16366                           
 16367                           ; Switch size 1, requested type "space"
 16368                           ; Number of cases is 4, Range of values is 0 to 3
 16369                           ; switch strategies available:
 16370                           ; Name         Instructions Cycles
 16371                           ; simple_byte           13     7 (average)
 16372                           ; direct_byte           14     6 (fixed)
 16373                           ; jumptable            260     6 (fixed)
 16374                           ;	Chosen strategy is simple_byte
 16375  06AB  1903               	skipnz
 16376  06AC  2DF3               	goto	i1l4972
 16377  06AD  3A01               	xorlw	1	; case 1
 16378  06AE  1903               	skipnz
 16379  06AF  2E0A               	goto	i1l4984
 16380  06B0  3A03               	xorlw	3	; case 2
 16381  06B1  1903               	skipnz
 16382  06B2  2E0A               	goto	i1l4984
 16383  06B3  3A01               	xorlw	1	; case 3
 16384  06B4  1903               	skipnz
 16385  06B5  2E8F               	goto	i1l5056
 16386  06B6  2EA5               	goto	i1l5064
 16387  06B7  0008               	return
 16388  06B8                     __end_of_IR_Decode:	
 16389  06B8                     __ptext103:	
 16390 ;; *************** function _IR_GetKeyType *****************
 16391 ;; Defined at:
 16392 ;;		line 107 in file "user/src/ir.c"
 16393 ;; Parameters:    Size  Location     Type
 16394 ;;  keynum          1    wreg     unsigned char 
 16395 ;; Auto vars:     Size  Location     Type
 16396 ;;  keynum          1    2[COMMON] unsigned char 
 16397 ;;  result          1    1[COMMON] unsigned char 
 16398 ;; Return value:  Size  Location     Type
 16399 ;;                  1    wreg      unsigned char 
 16400 ;; Registers used:
 16401 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16402 ;; Tracked objects:
 16403 ;;		On entry : 1F/0
 16404 ;;		On exit  : 1D/0
 16405 ;;		Unchanged: 0/0
 16406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16408 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16409 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16410 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16411 ;;Total ram usage:        3 bytes
 16412 ;; Hardware stack levels used:    1
 16413 ;; This function calls:
 16414 ;;		Nothing
 16415 ;; This function is called by:
 16416 ;;		_IR_Decode
 16417 ;; This function uses a non-reentrant model
 16418 ;;
 16419                           
 16420                           
 16421                           ;psect for function _IR_GetKeyType
 16422  06B8                     _IR_GetKeyType:	
 16423                           
 16424                           ;incstack = 0
 16425                           ; Regs used in _IR_GetKeyType: [wreg-fsr0h+status,2+status,0]
 16426                           ;IR_GetKeyType@keynum stored from wreg
 16427  06B8  00F2               	movwf	IR_GetKeyType@keynum
 16428                           
 16429                           ;ir.c: 108: uint8_t result = 0;
 16430  06B9  01F1               	clrf	IR_GetKeyType@result
 16431                           
 16432                           ;ir.c: 109: if (ir_state.mSet == 0) {
 16433  06BA  0E36               	swapf	_ir_state,w	;volatile
 16434  06BB  0C89               	rrf	9,f
 16435  06BC  3907               	andlw	7
 16436  06BD  1D03               	skipz
 16437  06BE  2F53               	goto	i1l4656
 16438                           
 16439                           ;ir.c: 110: if (keynum == 0x5D || keynum == 0x5C) {
 16440  06BF  305D               	movlw	93
 16441  06C0  0672               	xorwf	IR_GetKeyType@keynum,w
 16442  06C1  1903               	btfsc	3,2
 16443  06C2  2EC7               	goto	i1l936
 16444  06C3  305C               	movlw	92
 16445  06C4  0672               	xorwf	IR_GetKeyType@keynum,w
 16446  06C5  1D03               	btfss	3,2
 16447  06C6  2ECA               	goto	i1l4624
 16448  06C7                     i1l936:	
 16449                           
 16450                           ;ir.c: 111: result = 1;
 16451  06C7  01F1               	clrf	IR_GetKeyType@result
 16452  06C8  0AF1               	incf	IR_GetKeyType@result,f
 16453                           
 16454                           ;ir.c: 112: } else if (keynum == 0x10 || keynum == 0x11
 16455  06C9  2FBD               	goto	i1l4680
 16456  06CA                     i1l4624:	
 16457                           
 16458                           ;ir.c: 113: || keynum == 0x12 || keynum == 0x13
 16459                           ;ir.c: 114: || keynum == 0x06) {
 16460  06CA  3010               	movlw	16
 16461  06CB  0672               	xorwf	IR_GetKeyType@keynum,w
 16462  06CC  1903               	btfsc	3,2
 16463  06CD  2EDE               	goto	i1l4634
 16464  06CE  3011               	movlw	17
 16465  06CF  0672               	xorwf	IR_GetKeyType@keynum,w
 16466  06D0  1903               	btfsc	3,2
 16467  06D1  2EDE               	goto	i1l4634
 16468  06D2  3012               	movlw	18
 16469  06D3  0672               	xorwf	IR_GetKeyType@keynum,w
 16470  06D4  1903               	btfsc	3,2
 16471  06D5  2EDE               	goto	i1l4634
 16472  06D6  3013               	movlw	19
 16473  06D7  0672               	xorwf	IR_GetKeyType@keynum,w
 16474  06D8  1903               	btfsc	3,2
 16475  06D9  2EDE               	goto	i1l4634
 16476  06DA  3006               	movlw	6
 16477  06DB  0672               	xorwf	IR_GetKeyType@keynum,w
 16478  06DC  1D03               	btfss	3,2
 16479  06DD  2EE0               	goto	i1l938
 16480  06DE                     i1l4634:	
 16481                           
 16482                           ;ir.c: 115: result = 3;
 16483  06DE  3003               	movlw	3
 16484  06DF  2F60               	goto	L32
 16485  06E0                     i1l938:	
 16486                           ;ir.c: 116: } else if (gLedPara.mOn) {
 16487                           
 16488  06E0  0022               	movlb	2	; select bank2
 16489  06E1  18A0               	btfsc	_gLedPara^(0+256),1	;volatile
 16490  06E2  2F02               	goto	i1l4654
 16491  06E3  2FBD               	goto	i1l4680
 16492  06E4                     i1l947:	
 16493  06E4  2EC7               	goto	i1l936
 16494  06E5                     i1l954:	
 16495                           
 16496                           ;ir.c: 129: case 0x18:
 16497                           ;ir.c: 130: if (gLedPara.mAuto || gLedPara.mMsc == 0) {
 16498  06E5  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 16499  06E6  2EC7               	goto	i1l936
 16500  06E7  27C5  3185         	fcall	PL60	;call to abstracted procedure
 16501  06E9  1903               	btfsc	3,2
 16502  06EA  2EC7               	goto	i1l936
 16503  06EB  2FBD               	goto	i1l4680
 16504  06EC                     i1l959:	
 16505                           
 16506                           ;ir.c: 135: case 0x1B:
 16507                           ;ir.c: 136: if (!gLedPara.mAuto && gLedPara.mMsc) {
 16508  06EC  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 16509  06ED  2FBD               	goto	i1l4680
 16510  06EE  27C5  3185         	fcall	PL60	;call to abstracted procedure
 16511  06F0  1D03               	btfss	3,2
 16512  06F1  2EC7               	goto	i1l936
 16513  06F2  2FBD               	goto	i1l4680
 16514  06F3                     i1l964:	
 16515                           
 16516                           ;ir.c: 141: case 0x51:
 16517                           ;ir.c: 142: case 0x4D:
 16518                           ;ir.c: 143: case 0x4C:
 16519                           ;ir.c: 144: if (gLedPara.mAuto || gLedPara.mMsc) {
 16520  06F3  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 16521  06F4  2EC7               	goto	i1l936
 16522  06F5  27C5  3185         	fcall	PL60	;call to abstracted procedure
 16523  06F7  1D03               	btfss	3,2
 16524  06F8  2EC7               	goto	i1l936
 16525  06F9                     i1l4646:	
 16526                           
 16527                           ;ir.c: 147: result = 2;
 16528  06F9  3002               	movlw	2
 16529  06FA  2F60               	goto	L32
 16530  06FB                     i1l972:	
 16531  06FB                     i1l978:	
 16532                           
 16533                           ;ir.c: 151: case 0x59:
 16534                           ;ir.c: 152: case 0x45:
 16535                           ;ir.c: 153: case 0x44:
 16536                           ;ir.c: 154: case 0x41:
 16537                           ;ir.c: 155: case 0x54:
 16538                           ;ir.c: 156: case 0x55:
 16539                           ;ir.c: 157: case 0x49:
 16540                           ;ir.c: 158: case 0x48:
 16541                           ;ir.c: 159: case 0x40:
 16542                           ;ir.c: 160: if (gLedPara.mAuto || gLedPara.mMsc == 0) {
 16543  06FB  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 16544  06FC  2EF9               	goto	i1l4646
 16545  06FD  27C5  3185         	fcall	PL60	;call to abstracted procedure
 16546  06FF  1903               	btfsc	3,2
 16547  0700  2EF9               	goto	i1l4646
 16548  0701  2FBD               	goto	i1l4680
 16549  0702                     i1l4654:	
 16550  0702  0872               	movf	IR_GetKeyType@keynum,w
 16551                           
 16552                           ; Switch size 1, requested type "space"
 16553                           ; Number of cases is 26, Range of values is 20 to 89
 16554                           ; switch strategies available:
 16555                           ; Name         Instructions Cycles
 16556                           ; simple_byte           79    40 (average)
 16557                           ; direct_byte          149     9 (fixed)
 16558                           ; jumptable            263     9 (fixed)
 16559                           ;	Chosen strategy is simple_byte
 16560  0703  3A14               	xorlw	20	; case 20
 16561  0704  1903               	skipnz
 16562  0705  2EC7               	goto	i1l936
 16563  0706  3A01               	xorlw	1	; case 21
 16564  0707  1903               	skipnz
 16565  0708  2EC7               	goto	i1l936
 16566  0709  3A03               	xorlw	3	; case 22
 16567  070A  1903               	skipnz
 16568  070B  2EC7               	goto	i1l936
 16569  070C  3A01               	xorlw	1	; case 23
 16570  070D  1903               	skipnz
 16571  070E  2EC7               	goto	i1l936
 16572  070F  3A0F               	xorlw	15	; case 24
 16573  0710  1903               	skipnz
 16574  0711  2EE5               	goto	i1l954
 16575  0712  3A01               	xorlw	1	; case 25
 16576  0713  1903               	skipnz
 16577  0714  2EE5               	goto	i1l954
 16578  0715  3A03               	xorlw	3	; case 26
 16579  0716  1903               	skipnz
 16580  0717  2EEC               	goto	i1l959
 16581  0718  3A01               	xorlw	1	; case 27
 16582  0719  1903               	skipnz
 16583  071A  2EEC               	goto	i1l959
 16584  071B  3A07               	xorlw	7	; case 28
 16585  071C  1903               	skipnz
 16586  071D  2EE4               	goto	i1l947
 16587  071E  3A01               	xorlw	1	; case 29
 16588  071F  1903               	skipnz
 16589  0720  2EC7               	goto	i1l936
 16590  0721  3A03               	xorlw	3	; case 30
 16591  0722  1903               	skipnz
 16592  0723  2EC7               	goto	i1l936
 16593  0724  3A01               	xorlw	1	; case 31
 16594  0725  1903               	skipnz
 16595  0726  2EC7               	goto	i1l936
 16596  0727  3A5F               	xorlw	95	; case 64
 16597  0728  1903               	skipnz
 16598  0729  2EFB               	goto	i1l978
 16599  072A  3A01               	xorlw	1	; case 65
 16600  072B  1903               	skipnz
 16601  072C  2EFB               	goto	i1l978
 16602  072D  3A05               	xorlw	5	; case 68
 16603  072E  1903               	skipnz
 16604  072F  2EFB               	goto	i1l978
 16605  0730  3A01               	xorlw	1	; case 69
 16606  0731  1903               	skipnz
 16607  0732  2EFB               	goto	i1l978
 16608  0733  3A0D               	xorlw	13	; case 72
 16609  0734  1903               	skipnz
 16610  0735  2EFB               	goto	i1l978
 16611  0736  3A01               	xorlw	1	; case 73
 16612  0737  1903               	skipnz
 16613  0738  2EFB               	goto	i1l978
 16614  0739  3A05               	xorlw	5	; case 76
 16615  073A  1903               	skipnz
 16616  073B  2EF3               	goto	i1l964
 16617  073C  3A01               	xorlw	1	; case 77
 16618  073D  1903               	skipnz
 16619  073E  2EF3               	goto	i1l964
 16620  073F  3A1D               	xorlw	29	; case 80
 16621  0740  1903               	skipnz
 16622  0741  2EF3               	goto	i1l964
 16623  0742  3A01               	xorlw	1	; case 81
 16624  0743  1903               	skipnz
 16625  0744  2EF3               	goto	i1l964
 16626  0745  3A05               	xorlw	5	; case 84
 16627  0746  1903               	skipnz
 16628  0747  2EFB               	goto	i1l978
 16629  0748  3A01               	xorlw	1	; case 85
 16630  0749  1903               	skipnz
 16631  074A  2EFB               	goto	i1l978
 16632  074B  3A0D               	xorlw	13	; case 88
 16633  074C  1903               	skipnz
 16634  074D  2EFB               	goto	i1l972
 16635  074E  3A01               	xorlw	1	; case 89
 16636  074F  1903               	skipnz
 16637  0750  2EFB               	goto	i1l978
 16638  0751  2F52               	goto	i1l941
 16639  0752                     i1l941:	
 16640  0752  2FBD               	goto	i1l4680
 16641  0753                     i1l4656:	
 16642  0753  3185  25E5  3185   	fcall	PL100	;call to abstracted procedure
 16643  0756  1903               	skipnz
 16644  0757  2F62               	goto	i1l4666
 16645  0758  3185  25E0  3185   	fcall	PL98	;call to abstracted procedure
 16646  075B  1903               	btfsc	3,2
 16647  075C  2F62               	goto	i1l4666
 16648  075D  2F91               	goto	i1l4668
 16649  075E                     i1l991:	
 16650  075E  2EF9               	goto	i1l4646
 16651  075F                     i1l4662:	
 16652                           
 16653                           ;ir.c: 190: result = 255;
 16654  075F  30FF               	movlw	255
 16655  0760                     L32:	
 16656  0760  00F1               	movwf	IR_GetKeyType@result
 16657                           
 16658                           ;ir.c: 191: break;
 16659  0761  2FBD               	goto	i1l4680
 16660  0762                     i1l4666:	
 16661  0762  0872               	movf	IR_GetKeyType@keynum,w
 16662                           
 16663                           ; Switch size 1, requested type "space"
 16664                           ; Number of cases is 15, Range of values is 7 to 89
 16665                           ; switch strategies available:
 16666                           ; Name         Instructions Cycles
 16667                           ; simple_byte           46    24 (average)
 16668                           ; direct_byte          175     9 (fixed)
 16669                           ; jumptable            263     9 (fixed)
 16670                           ;	Chosen strategy is simple_byte
 16671  0763  3A07               	xorlw	7	; case 7
 16672  0764  1903               	skipnz
 16673  0765  2EC7               	goto	i1l936
 16674  0766  3A47               	xorlw	71	; case 64
 16675  0767  1903               	skipnz
 16676  0768  2EF9               	goto	i1l4646
 16677  0769  3A01               	xorlw	1	; case 65
 16678  076A  1903               	skipnz
 16679  076B  2EF9               	goto	i1l4646
 16680  076C  3A05               	xorlw	5	; case 68
 16681  076D  1903               	skipnz
 16682  076E  2EF9               	goto	i1l4646
 16683  076F  3A01               	xorlw	1	; case 69
 16684  0770  1903               	skipnz
 16685  0771  2EF9               	goto	i1l4646
 16686  0772  3A0D               	xorlw	13	; case 72
 16687  0773  1903               	skipnz
 16688  0774  2EF9               	goto	i1l4646
 16689  0775  3A01               	xorlw	1	; case 73
 16690  0776  1903               	skipnz
 16691  0777  2EF9               	goto	i1l4646
 16692  0778  3A05               	xorlw	5	; case 76
 16693  0779  1903               	skipnz
 16694  077A  2EC7               	goto	i1l936
 16695  077B  3A01               	xorlw	1	; case 77
 16696  077C  1903               	skipnz
 16697  077D  2EC7               	goto	i1l936
 16698  077E  3A1D               	xorlw	29	; case 80
 16699  077F  1903               	skipnz
 16700  0780  2EE4               	goto	i1l947
 16701  0781  3A01               	xorlw	1	; case 81
 16702  0782  1903               	skipnz
 16703  0783  2EC7               	goto	i1l936
 16704  0784  3A05               	xorlw	5	; case 84
 16705  0785  1903               	skipnz
 16706  0786  2EF9               	goto	i1l4646
 16707  0787  3A01               	xorlw	1	; case 85
 16708  0788  1903               	skipnz
 16709  0789  2EF9               	goto	i1l4646
 16710  078A  3A0D               	xorlw	13	; case 88
 16711  078B  1903               	skipnz
 16712  078C  2F5E               	goto	i1l991
 16713  078D  3A01               	xorlw	1	; case 89
 16714  078E  1903               	skipnz
 16715  078F  2F5E               	goto	i1l991
 16716  0790  2F5F               	goto	i1l4662
 16717  0791                     i1l4668:	
 16718  0791  27D5  3185         	fcall	PL112	;call to abstracted procedure
 16719  0793  1903               	skipnz
 16720  0794  2F9D               	goto	i1l4678
 16721  0795  27CB  3185         	fcall	PL104	;call to abstracted procedure
 16722  0797  1903               	skipnz
 16723  0798  2F9D               	goto	i1l4678
 16724  0799  27D0  3185         	fcall	PL106	;call to abstracted procedure
 16725  079B  1D03               	skipz
 16726  079C  2FBD               	goto	i1l4680
 16727  079D                     i1l4678:	
 16728  079D  0872               	movf	IR_GetKeyType@keynum,w
 16729                           
 16730                           ; Switch size 1, requested type "space"
 16731                           ; Number of cases is 10, Range of values is 4 to 15
 16732                           ; switch strategies available:
 16733                           ; Name         Instructions Cycles
 16734                           ; simple_byte           31    16 (average)
 16735                           ; direct_byte           33     9 (fixed)
 16736                           ; jumptable            263     9 (fixed)
 16737                           ;	Chosen strategy is simple_byte
 16738  079E  3A04               	xorlw	4	; case 4
 16739  079F  1903               	skipnz
 16740  07A0  2EC7               	goto	i1l936
 16741  07A1  3A01               	xorlw	1	; case 5
 16742  07A2  1903               	skipnz
 16743  07A3  2EC7               	goto	i1l936
 16744  07A4  3A0D               	xorlw	13	; case 8
 16745  07A5  1903               	skipnz
 16746  07A6  2EC7               	goto	i1l936
 16747  07A7  3A01               	xorlw	1	; case 9
 16748  07A8  1903               	skipnz
 16749  07A9  2EC7               	goto	i1l936
 16750  07AA  3A03               	xorlw	3	; case 10
 16751  07AB  1903               	skipnz
 16752  07AC  2EC7               	goto	i1l936
 16753  07AD  3A01               	xorlw	1	; case 11
 16754  07AE  1903               	skipnz
 16755  07AF  2EC7               	goto	i1l936
 16756  07B0  3A07               	xorlw	7	; case 12
 16757  07B1  1903               	skipnz
 16758  07B2  2EE4               	goto	i1l947
 16759  07B3  3A01               	xorlw	1	; case 13
 16760  07B4  1903               	skipnz
 16761  07B5  2EC7               	goto	i1l936
 16762  07B6  3A03               	xorlw	3	; case 14
 16763  07B7  1903               	skipnz
 16764  07B8  2EC7               	goto	i1l936
 16765  07B9  3A01               	xorlw	1	; case 15
 16766  07BA  1903               	skipnz
 16767  07BB  2EC7               	goto	i1l936
 16768  07BC  2F5F               	goto	i1l4662
 16769  07BD                     i1l4680:	
 16770                           
 16771                           ;ir.c: 211: }
 16772                           ;ir.c: 212: return result;
 16773  07BD  0871               	movf	IR_GetKeyType@result,w
 16774  07BE  0008               	return
 16775  07BF                     __end_of_IR_GetKeyType:	
 16776  07BF                     __ptext101:	
 16777 ;; *************** function i1_TMR2_EnableInterrupt *****************
 16778 ;; Defined at:
 16779 ;;		line 45 in file "driver/src/tmr2.c"
 16780 ;; Parameters:    Size  Location     Type
 16781 ;;		None
 16782 ;; Auto vars:     Size  Location     Type
 16783 ;;		None
 16784 ;; Return value:  Size  Location     Type
 16785 ;;                  1    wreg      void 
 16786 ;; Registers used:
 16787 ;;		None
 16788 ;; Tracked objects:
 16789 ;;		On entry : 1F/0
 16790 ;;		On exit  : 1F/1
 16791 ;;		Unchanged: 0/0
 16792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16797 ;;Total ram usage:        0 bytes
 16798 ;; Hardware stack levels used:    1
 16799 ;; This function calls:
 16800 ;;		Nothing
 16801 ;; This function is called by:
 16802 ;;		_IR_Decode
 16803 ;; This function uses a non-reentrant model
 16804 ;;
 16805                           
 16806                           
 16807                           ;psect for function i1_TMR2_EnableInterrupt
 16808  07BF                     i1_TMR2_EnableInterrupt:	
 16809                           
 16810                           ;tmr2.c: 47: PIE1bits.TMR2IE = 1;
 16811                           
 16812                           ;incstack = 0
 16813                           ; Regs used in i1_TMR2_EnableInterrupt: []
 16814  07BF  0021               	movlb	1	; select bank1
 16815  07C0  1491               	bsf	17,1	;volatile
 16816  07C1  0008               	return
 16817  07C2                     __end_ofi1_TMR2_EnableInterrupt:	
 16818  07C2                     __ptext102:	
 16819 ;; *************** function i1_TMR2_DisableInterrupt *****************
 16820 ;; Defined at:
 16821 ;;		line 40 in file "driver/src/tmr2.c"
 16822 ;; Parameters:    Size  Location     Type
 16823 ;;		None
 16824 ;; Auto vars:     Size  Location     Type
 16825 ;;		None
 16826 ;; Return value:  Size  Location     Type
 16827 ;;                  1    wreg      void 
 16828 ;; Registers used:
 16829 ;;		None
 16830 ;; Tracked objects:
 16831 ;;		On entry : 1F/0
 16832 ;;		On exit  : 1F/1
 16833 ;;		Unchanged: 0/0
 16834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16839 ;;Total ram usage:        0 bytes
 16840 ;; Hardware stack levels used:    1
 16841 ;; This function calls:
 16842 ;;		Nothing
 16843 ;; This function is called by:
 16844 ;;		_IR_Decode
 16845 ;; This function uses a non-reentrant model
 16846 ;;
 16847                           
 16848                           
 16849                           ;psect for function i1_TMR2_DisableInterrupt
 16850  07C2                     i1_TMR2_DisableInterrupt:	
 16851                           
 16852                           ;tmr2.c: 42: PIE1bits.TMR2IE = 0;
 16853                           
 16854                           ;incstack = 0
 16855                           ; Regs used in i1_TMR2_DisableInterrupt: []
 16856  07C2  0021               	movlb	1	; select bank1
 16857  07C3  1091               	bcf	17,1	;volatile
 16858  07C4  0008               	return
 16859  07C5                     __end_ofi1_TMR2_DisableInterrupt:	
 16860  07C5                     PL60:	
 16861  07C5  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 16862  07C6  00F0               	movwf	??_IR_GetKeyType
 16863  07C7  0CF0               	rrf	??_IR_GetKeyType,f
 16864  07C8  0C70               	rrf	??_IR_GetKeyType,w
 16865  07C9  390F               	andlw	15
 16866  07CA  0008               	return
 16867  07CB                     __end_ofPL60:	
 16868  07CB                     PL104:	
 16869  07CB  0E36               	swapf	_ir_state,w	;volatile
 16870  07CC  0C89               	rrf	9,f
 16871  07CD  3907               	andlw	7
 16872  07CE  3A02               	xorlw	2
 16873  07CF  0008               	return
 16874  07D0                     __end_ofPL104:	
 16875  07D0                     PL106:	
 16876  07D0  0E36               	swapf	_ir_state,w	;volatile
 16877  07D1  0C89               	rrf	9,f
 16878  07D2  3907               	andlw	7
 16879  07D3  3A03               	xorlw	3
 16880  07D4  0008               	return
 16881  07D5                     __end_ofPL106:	
 16882  07D5                     PL112:	
 16883  07D5  0E36               	swapf	_ir_state,w	;volatile
 16884  07D6  0C89               	rrf	9,f
 16885  07D7  3907               	andlw	7
 16886  07D8  3A01               	xorlw	1
 16887  07D9  0008               	return
 16888  07DA                     __end_ofPL112:	
 16889                           
 16890                           	psect	text104
 16891  14AB                     __ptext104:	
 16892 ;; *************** function _TMR0_ISR *****************
 16893 ;; Defined at:
 16894 ;;		line 27 in file "driver/src/tmr0.c"
 16895 ;; Parameters:    Size  Location     Type
 16896 ;;		None
 16897 ;; Auto vars:     Size  Location     Type
 16898 ;;		None
 16899 ;; Return value:  Size  Location     Type
 16900 ;;                  1    wreg      void 
 16901 ;; Registers used:
 16902 ;;		wreg, status,2, status,0, pclath, cstack
 16903 ;; Tracked objects:
 16904 ;;		On entry : 1F/0
 16905 ;;		On exit  : 0/0
 16906 ;;		Unchanged: 0/0
 16907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16912 ;;Total ram usage:        0 bytes
 16913 ;; Hardware stack levels used:    1
 16914 ;; Hardware stack levels required when called:    1
 16915 ;; This function calls:
 16916 ;;		Absolute function
 16917 ;;		_RTC_OnSecond
 16918 ;; This function is called by:
 16919 ;;		_ISR
 16920 ;; This function uses a non-reentrant model
 16921 ;;
 16922                           
 16923                           
 16924                           ;psect for function _TMR0_ISR
 16925  14AB                     _TMR0_ISR:	
 16926                           
 16927                           ;tmr0.c: 29: PIR0bits.TMR0IF = 0;
 16928                           
 16929                           ;incstack = 0
 16930                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 16931  14AB  1290               	bcf	16,5	;volatile
 16932                           
 16933                           ;tmr0.c: 31: if ( tmr0_isr_handler )
 16934  14AC  0021               	movlb	1	; select bank1
 16935  14AD  0862               	movf	_tmr0_isr_handler^(0+128),w
 16936  14AE  0463               	iorwf	(_tmr0_isr_handler+1)^(0+128),w
 16937  14AF  1903               	btfsc	3,2
 16938  14B0  0008               	return
 16939                           
 16940                           ;tmr0.c: 32: {
 16941                           ;tmr0.c: 33: tmr0_isr_handler ( );
 16942  14B1  0863               	movf	(_tmr0_isr_handler+1)^(0+128),w
 16943  14B2  008A               	movwf	10
 16944  14B3  0862               	movf	_tmr0_isr_handler^(0+128),w
 16945  14B4  000A               	callw
 16946  14B5  3194               	pagesel	$
 16947  14B6  0008               	return
 16948  14B7                     __end_of_TMR0_ISR:	
 16949                           
 16950                           	psect	text105
 16951  1523                     __ptext105:	
 16952 ;; *************** function _RTC_OnSecond *****************
 16953 ;; Defined at:
 16954 ;;		line 19 in file "user/src/rtc.c"
 16955 ;; Parameters:    Size  Location     Type
 16956 ;;		None
 16957 ;; Auto vars:     Size  Location     Type
 16958 ;;		None
 16959 ;; Return value:  Size  Location     Type
 16960 ;;                  1    wreg      void 
 16961 ;; Registers used:
 16962 ;;		wreg, status,2, status,0
 16963 ;; Tracked objects:
 16964 ;;		On entry : 1F/1
 16965 ;;		On exit  : 1F/0
 16966 ;;		Unchanged: 0/0
 16967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16972 ;;Total ram usage:        0 bytes
 16973 ;; Hardware stack levels used:    1
 16974 ;; This function calls:
 16975 ;;		Nothing
 16976 ;; This function is called by:
 16977 ;;		_Interrupt_Initialize
 16978 ;;		_TMR0_ISR
 16979 ;; This function uses a non-reentrant model
 16980 ;;
 16981                           
 16982                           
 16983                           ;psect for function _RTC_OnSecond
 16984  1523                     _RTC_OnSecond:	
 16985                           
 16986                           ;rtc.c: 21: rtc_time.second++;
 16987                           
 16988                           ;incstack = 0
 16989                           ; Regs used in _RTC_OnSecond: [wreg+status,2+status,0]
 16990  1523  0020               	movlb	0	; select bank0
 16991  1524  303C               	movlw	60
 16992  1525  0ABF               	incf	_rtc_time+2,f
 16993                           
 16994                           ;rtc.c: 22: if( rtc_time.second > 59 )
 16995  1526  023F               	subwf	_rtc_time+2,w
 16996  1527  1C03               	skipc
 16997  1528  2D37               	goto	i1l4964
 16998  1529  303C               	movlw	60
 16999                           
 17000                           ;rtc.c: 23: {
 17001                           ;rtc.c: 24: rtc_time.second = 0;
 17002  152A  01BF               	clrf	_rtc_time+2
 17003                           
 17004                           ;rtc.c: 25: rtc_time.minute++;
 17005  152B  0ABE               	incf	_rtc_time+1,f
 17006                           
 17007                           ;rtc.c: 26: if( rtc_time.minute > 59 )
 17008  152C  023E               	subwf	_rtc_time+1,w
 17009  152D  1C03               	skipc
 17010  152E  2D36               	goto	i1l4962
 17011  152F  3018               	movlw	24
 17012                           
 17013                           ;rtc.c: 27: {
 17014                           ;rtc.c: 28: rtc_time.minute = 0;
 17015  1530  01BE               	clrf	_rtc_time+1
 17016                           
 17017                           ;rtc.c: 29: rtc_time.hour++;
 17018  1531  0ABD               	incf	_rtc_time,f
 17019                           
 17020                           ;rtc.c: 30: if( rtc_time.hour > 23 )
 17021  1532  023D               	subwf	_rtc_time,w
 17022  1533  1803               	btfsc	3,0
 17023                           
 17024                           ;rtc.c: 31: {
 17025                           ;rtc.c: 32: rtc_time.hour = 0;
 17026  1534  01BD               	clrf	_rtc_time
 17027                           
 17028                           ;rtc.c: 33: }
 17029                           ;rtc.c: 34: rtc_status.mHour = 1;
 17030  1535  1533               	bsf	_rtc_status,2	;volatile
 17031  1536                     i1l4962:	
 17032                           
 17033                           ;rtc.c: 35: }
 17034                           ;rtc.c: 36: rtc_status.mMin = 1;
 17035  1536  14B3               	bsf	_rtc_status,1	;volatile
 17036  1537                     i1l4964:	
 17037                           
 17038                           ;rtc.c: 37: }
 17039                           ;rtc.c: 38: rtc_status.mSec = 1;
 17040  1537  1433               	bsf	_rtc_status,0	;volatile
 17041  1538  0008               	return
 17042  1539                     __end_of_RTC_OnSecond:	
 17043                           
 17044                           	psect	text106
 17045  1539                     __ptext106:	
 17046 ;; *************** function _EUSART_Transmit_ISR *****************
 17047 ;; Defined at:
 17048 ;;		line 63 in file "driver/src/eusart.c"
 17049 ;; Parameters:    Size  Location     Type
 17050 ;;		None
 17051 ;; Auto vars:     Size  Location     Type
 17052 ;;		None
 17053 ;; Return value:  Size  Location     Type
 17054 ;;                  1    wreg      void 
 17055 ;; Registers used:
 17056 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17057 ;; Tracked objects:
 17058 ;;		On entry : 1F/0
 17059 ;;		On exit  : 1E/0
 17060 ;;		Unchanged: 0/0
 17061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17066 ;;Total ram usage:        0 bytes
 17067 ;; Hardware stack levels used:    1
 17068 ;; This function calls:
 17069 ;;		Nothing
 17070 ;; This function is called by:
 17071 ;;		_ISR
 17072 ;; This function uses a non-reentrant model
 17073 ;;
 17074                           
 17075                           
 17076                           ;psect for function _EUSART_Transmit_ISR
 17077  1539                     _EUSART_Transmit_ISR:	
 17078                           
 17079                           ;eusart.c: 65: if ( sizeof (txBuf ) > txRemain )
 17080                           
 17081                           ;incstack = 0
 17082                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 17083  1539  3020               	movlw	32
 17084  153A  025E               	subwf	_txRemain,w
 17085  153B  1803               	skipnc
 17086  153C  2D4D               	goto	i1l105
 17087                           
 17088                           ;eusart.c: 66: {
 17089                           ;eusart.c: 67: TXREG = txBuf[txTail++];
 17090  153D  0835               	movf	_txTail,w
 17091  153E  3EA0               	addlw	(low (_txBuf| (0+256)))& (0+255)
 17092  153F  0086               	movwf	6
 17093  1540  3001               	movlw	1	; select bank3/4
 17094  1541  0087               	movwf	7
 17095  1542  0801               	movf	1,w
 17096  1543  0023               	movlb	3	; select bank3
 17097  1544  009A               	movwf	26	;volatile
 17098  1545  0020               	movlb	0	; select bank0
 17099  1546  3020               	movlw	32
 17100  1547  0AB5               	incf	_txTail,f
 17101                           
 17102                           ;eusart.c: 68: if ( sizeof (txBuf ) <= txTail )
 17103  1548  0235               	subwf	_txTail,w
 17104  1549  1803               	btfsc	3,0
 17105                           
 17106                           ;eusart.c: 69: {
 17107                           ;eusart.c: 70: txTail = 0;
 17108  154A  01B5               	clrf	_txTail
 17109                           
 17110                           ;eusart.c: 71: }
 17111                           ;eusart.c: 72: txRemain++;
 17112  154B  0ADE               	incf	_txRemain,f
 17113                           
 17114                           ;eusart.c: 73: }
 17115  154C  0008               	return
 17116  154D                     i1l105:	
 17117                           
 17118                           ;eusart.c: 74: else
 17119                           ;eusart.c: 75: {
 17120                           ;eusart.c: 76: PIE1bits.TXIE = 0;
 17121  154D  0021               	movlb	1	; select bank1
 17122  154E  1211               	bcf	17,4	;volatile
 17123  154F  0008               	return
 17124  1550                     __end_of_EUSART_Transmit_ISR:	
 17125  007E                     btemp	set	126	;btemp
 17126  007E                     int$flags	set	126
 17127  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    10
    Data        50
    BSS         166
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      63
    BANK1            80      0      74
    BANK2            80      0      76
    BANK3            80     18      60
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Util_DecValue@pSrc	PTR unsigned int  size(2) Largest target is 76
		 -> gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara(BANK1[26]), gLedPara.mVolume(BANK2[1]), gLedPara(BANK2[76]), 

    Util_IncValue@pSrc	PTR unsigned int  size(2) Largest target is 76
		 -> gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara.mCurrentBright(BANK1[10]), gLedRunPara(BANK1[26]), gLedPara.mVolume(BANK2[1]), 
		 -> gLedPara(BANK2[76]), 

    IR_IsValidTime@tm	PTR unsigned char  size(1) Largest target is 7
		 -> ir_state.time(BANK0[4]), ir_state(BANK0[7]), 

    Led_SetCustom@pValue	PTR unsigned int  size(1) Largest target is 26
		 -> gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara(BANK1[26]), 

    sp__RTC_GetTime	PTR struct . size(1) Largest target is 3
		 -> rtc_time(BANK0[3]), 

    loadDuty	PTR FTN(unsigned int ,)void [5] size(2) Largest target is 1
		 -> PWM5_LoadDutyValue(), PWM4_LoadDutyValue(), PWM3_LoadDutyValue(), PWM2_LoadDutyValue(), 
		 -> PWM1_LoadDutyValue(), 

    TMR4_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Notice(), 

    tmr4_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Notice(), Absolute function(), 

    TMR2_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Run(), 

    tmr2_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Run(), Absolute function(), 

    TMR1_Gate_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> IR_Decode(), 

    tmr1_gate_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> IR_Decode(), Absolute function(), 

    tmr1_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> RTC_OnSecond(), 

    tmr0_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> RTC_OnSecond(), Absolute function(), 

    eusart_rcv_isr_handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    DATAEE_ReadBuffer@buf	PTR unsigned char  size(1) Largest target is 76
		 -> gLedPara(BANK2[76]), 

    DATAEE_WriteBuffer@buf	PTR unsigned char  size(1) Largest target is 76
		 -> gLedPara(BANK2[76]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR4_ISR->_Led_Notice
    _Led_Run->_IR_ScanLongPress
    _Led_RunMusic->_Led_DynamicCloud
    _Led_RunMusic->_Led_DynamicMoon
    _Led_RunMusic->_Led_DynamicStorm
    _Led_RunMusic->_Led_DynamicWave
    _Led_DynamicWave->i1___wmul
    _Led_DynamicStorm->i1___wmul
    _Led_DynamicMoon->i1___wmul
    _Led_DynamicCloud->i1___wmul
    i1_Led_UpdateBright->i1_PWM5_LoadDutyValue
    _Audio_SelectSound->i1_EUSART_Write
    _Audio_PlaySound->i1_EUSART_Write
    _Led_Ramp->i1_PWM5_LoadDutyValue
    _IR_ScanLongPress->_Led_SetCustom
    _Led_SetCustom->i1___bmul
    _TMR1_GATE_ISR->_IR_Decode
    _IR_Decode->_IR_GetKeyType

Critical Paths under _main in BANK0

    _main->_Led_CheckAutoStatus
    _SYSTEM_Initialize->_PIN_Initialize
    _Led_SaveParaIfChanged->_DATAEE_WriteBuffer
    _DATAEE_WriteBuffer->_DATAEE_WriteByte
    _Led_InitPara->_DATAEE_ReadBuffer
    _DATAEE_ReadBuffer->_DATAEE_ReadByte
    _Led_CheckAutoStatus->___wmul
    _Led_AutoRun->_Util_IncValue
    _Interrupt_Initialize->_TMR0_SetInterruptHandler
    _Interrupt_Initialize->_TMR1_Gate_SetInterruptHandler
    _Interrupt_Initialize->_TMR2_SetInterruptHandler
    _Interrupt_Initialize->_TMR4_SetInterruptHandler
    _IR_ExitTimeout->_Led_Initialize
    _IR_KeyAction->_Led_Initialize
    _IR_IsValidTime->___bmul
    _IR_ExitSet->_Led_Initialize
    _Led_Initialize->___wmul
    _Led_UpdateBright->_PWM5_LoadDutyValue
    _Audio_StopSound->_EUSART_Write
    _Audio_SetVolume->_EUSART_Write
    _Audio_SetPlayMode->_EUSART_Write
    _Audio_GetValue->___wmul

Critical Paths under _ISR in BANK0

    _TMR2_ISR->_Led_Run
    _Led_RunMusic->_Led_DynamicCloud
    _Led_RunMusic->_Led_DynamicMoon
    _Led_RunMusic->_Led_DynamicStorm
    _Led_RunMusic->_Led_DynamicWave

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _IR_KeyAtionIfPressed->_IR_KeyAction

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   40161
                     _Audio_GetValue
               _IR_KeyAtionIfPressed
             _IR_ResetIfTMR1Overflow
                 _IR_UpdateSetStatus
               _Interrupt_Initialize
                        _Led_AutoRun
                _Led_CheckAutoStatus
                       _Led_InitPara
                     _Led_Initialize
              _Led_SaveParaIfChanged
                      _RTC_HourReady
                    _RTC_MinuteReady
                    _RTC_SecondReady
                  _SYSTEM_Initialize
                    _TMR0_StartTimer
                    _TMR1_StartTimer
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
             _ADC_Initialize_Default
          _EUSART_Initialize_Default
              _OSCILLATOR_Initialize
                     _PIN_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM3_Initialize
                    _PWM4_Initialize
                    _PWM5_Initialize
            _TMR0_Initialize_Default
            _TMR1_Initialize_Default
            _TMR2_Initialize_Default
            _TMR4_Initialize_Default
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_Initialize                                       1     1      0      23
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize_Default                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize_Default                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_SecondReady                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_MinuteReady                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_HourReady                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_SaveParaIfChanged                                0     0      0     584
                 _DATAEE_WriteBuffer
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteBuffer                                   5     1      4     584
                                             18 BANK0      5     1      4
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     4     1      3     242
                                             14 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Led_InitPara                                         7     7      0    1733
                                             21 BANK0      7     7      0
                  _DATAEE_ReadBuffer
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadBuffer                                    5     1      4     463
                                             16 BANK0      5     1      4
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      2     0      2     121
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Led_CheckAutoStatus                                 10    10      0    3996
                                             20 BANK0     10    10      0
                   _Led_UpdateBright
                        _RTC_GetTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Led_AutoRun                                          5     5      0    2097
                                             24 BANK0      5     5      0
                   _Led_UpdateBright
                      _Util_IncValue
 ---------------------------------------------------------------------------------
 (1) _Interrupt_Initialize                                 0     0      0     392
           _TMR0_SetInterruptHandler
      _TMR1_Gate_SetInterruptHandler
           _TMR2_SetInterruptHandler
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR4_SetInterruptHandler                             2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_Gate_SetInterruptHandler                        2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _IR_UpdateSetStatus                                   0     0      0    4664
                     _IR_ExitTimeout
 ---------------------------------------------------------------------------------
 (2) _IR_ExitTimeout                                       0     0      0    4664
                     _Led_Initialize
                    _Led_StartNotice
 ---------------------------------------------------------------------------------
 (1) _IR_ResetIfTMR1Overflow                               0     0      0       0
                    _TMR1_StartTimer
                     _TMR1_StopTimer
               _TMR2_EnableInterrupt
 ---------------------------------------------------------------------------------
 (2) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_KeyAtionIfPressed                                 0     0      0   18862
                       _IR_KeyAction
 ---------------------------------------------------------------------------------
 (2) _IR_KeyAction                                        18    18      0   18862
                                              0 BANK3     18    18      0
                    _Audio_SetVolume
                    _Audio_StopSound
                         _IR_ExitSet
                        _IR_GetIndex
                     _IR_IsValidTime
                     _Led_Initialize
                    _Led_StartNotice
                        _RTC_GetTime
              _TMR2_DisableInterrupt
               _TMR2_EnableInterrupt
                      _Util_DecValue
                      _Util_IncValue
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Util_IncValue                                       10     4      6    1463
                                             14 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (3) _Util_DecValue                                       10     4      6    1023
                                             14 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _TMR2_EnableInterrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_DisableInterrupt                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _IR_IsValidTime                                       5     4      1    1479
                                             17 BANK0      5     4      1
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     824
                                             14 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _IR_GetIndex                                          2     2      0     250
                                             14 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _IR_ExitSet                                           0     0      0    4664
                     _Led_Initialize
                    _Led_StartNotice
 ---------------------------------------------------------------------------------
 (3) _Led_StartNotice                                      2     2      0      31
                                             14 BANK0      2     2      0
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (4) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_Initialize                                       8     8      0    4633
                                             20 BANK0      8     8      0
                  _Audio_SetPlayMode
                    _Audio_SetVolume
                    _Audio_StopSound
                    _Led_TurnOffRamp
                     _Led_TurnOnRamp
                   _Led_UpdateBright
                        _RTC_GetTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _RTC_GetTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Led_UpdateBright                                     1     1      0     380
                                             18 BANK0      1     1      0
                 _PWM1_LoadDutyValue *
                 _PWM2_LoadDutyValue *
                 _PWM3_LoadDutyValue *
                 _PWM4_LoadDutyValue *
                 _PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (3) _PWM5_LoadDutyValue                                   4     2      2     126
                                             14 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _PWM4_LoadDutyValue                                   2     0      2      31
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM3_LoadDutyValue                                   2     0      2      31
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM2_LoadDutyValue                                   2     0      2      31
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM1_LoadDutyValue                                   2     0      2      31
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOnRamp                                       1     1      0     130
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOffRamp                                      1     1      0      99
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Audio_StopSound                                      1     1      0     133
                                             15 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _Audio_SetVolume                                      2     2      0     167
                                             15 BANK0      2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _Audio_SetPlayMode                                    2     2      0     167
                                             15 BANK0      2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      93
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Audio_GetValue                                       6     6      0    3177
                                             20 BANK0      6     6      0
                     _ADC_Conversion
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2966
                                             14 BANK0      6     2      4
                        _RTC_GetTime (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADC_Conversion                                       4     2      2      22
                                             14 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    8491
                _EUSART_Transmit_ISR
                           _TMR0_ISR
                      _TMR1_GATE_ISR
                           _TMR2_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR4_ISR                                             0     0      0       0
                   Absolute function *
                         _Led_Notice *
 ---------------------------------------------------------------------------------
 (9) _Led_Notice                                           1     1      0       0
                                              0 COMMON     1     1      0
                  _Led_TurnOffDirect
                   _Led_TurnOnDirect
                     _TMR4_StopTimer
 ---------------------------------------------------------------------------------
 (10) _TMR4_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Led_TurnOnDirect                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Led_TurnOffDirect                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR2_ISR                                             0     0      0    7855
                   Absolute function *
                            _Led_Run *
 ---------------------------------------------------------------------------------
 (9) _Led_Run                                              1     1      0    7855
                                             13 BANK0      1     1      0
                   _IR_ScanLongPress
                           _Led_Ramp
                       _Led_RunMusic
 ---------------------------------------------------------------------------------
 (10) _Led_RunMusic                                        1     1      0    5788
                                             12 COMMON     1     1      0
                    _Audio_PlaySound
                  _Audio_SelectSound
                   _Led_DynamicCloud
                    _Led_DynamicMoon
                   _Led_DynamicStorm
                    _Led_DynamicWave
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicWave                                    19    17      2    1268
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicStorm                                   19    17      2    1438
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicMoon                                    19    17      2    1299
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicCloud                                   19    17      2    1577
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (12) i1___wmul                                            6     2      4     388
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (12) i1_Led_UpdateBright                                  1     1      0     292
                                              4 COMMON     1     1      0
               i1_PWM1_LoadDutyValue *
               i1_PWM2_LoadDutyValue *
               i1_PWM3_LoadDutyValue *
               i1_PWM4_LoadDutyValue *
               i1_PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (11) _Audio_SelectSound                                   2     2      0     115
                                              1 COMMON     2     2      0
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (11) _Audio_PlaySound                                     1     1      0      91
                                              1 COMMON     1     1      0
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (12) i1_EUSART_Write                                      1     1      0      66
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _Led_Ramp                                            7     7      0     540
                                              4 COMMON     7     7      0
               i1_PWM1_LoadDutyValue *
               i1_PWM2_LoadDutyValue *
               i1_PWM3_LoadDutyValue *
               i1_PWM4_LoadDutyValue *
               i1_PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (13) i1_PWM5_LoadDutyValue                                4     2      2      74
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM4_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM3_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM2_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM1_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _IR_ScanLongPress                                    3     3      0    1527
                                             11 COMMON     3     3      0
                      _Led_SetCustom
                      i1_IR_GetIndex
                  i1_Led_StartNotice
                    i1_Util_DecValue
                    i1_Util_IncValue
 ---------------------------------------------------------------------------------
 (11) i1_Util_IncValue                                    10     4      6     207
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (11) i1_Util_DecValue                                    10     4      6     207
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (11) i1_Led_StartNotice                                   2     2      0      22
                                              0 COMMON     2     2      0
                  i1_TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (12) i1_TMR4_StartTimer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_IR_GetIndex                                       2     2      0     165
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _Led_SetCustom                                       8     7      1     437
                                              3 COMMON     8     7      1
                           i1___bmul
 ---------------------------------------------------------------------------------
 (12) i1___bmul                                            3     2      1      87
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (8) _TMR1_GATE_ISR                                        0     0      0     636
                   Absolute function *
                          _IR_Decode *
 ---------------------------------------------------------------------------------
 (9) _IR_Decode                                            9     9      0     636
                                              3 COMMON     9     9      0
                      _IR_GetKeyType
            i1_TMR2_DisableInterrupt
             i1_TMR2_EnableInterrupt
 ---------------------------------------------------------------------------------
 (10) i1_TMR2_EnableInterrupt                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_TMR2_DisableInterrupt                             0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _IR_GetKeyType                                       3     3      0     256
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
                       _RTC_OnSecond *
 ---------------------------------------------------------------------------------
 (9) _RTC_OnSecond                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Audio_GetValue
     _ADC_Conversion
     ___wmul
       _RTC_GetTime (ARG)
   _IR_KeyAtionIfPressed
     _IR_KeyAction
       _Audio_SetVolume
         _EUSART_Write
       _Audio_StopSound
         _EUSART_Write
       _IR_ExitSet
         _Led_Initialize
           _Audio_SetPlayMode
             _EUSART_Write
           _Audio_SetVolume
             _EUSART_Write
           _Audio_StopSound
             _EUSART_Write
           _Led_TurnOffRamp
           _Led_TurnOnRamp
           _Led_UpdateBright
             _PWM1_LoadDutyValue *
             _PWM2_LoadDutyValue *
             _PWM3_LoadDutyValue *
             _PWM4_LoadDutyValue *
             _PWM5_LoadDutyValue *
           _RTC_GetTime
           ___wmul
             _RTC_GetTime (ARG)
         _Led_StartNotice
           _TMR4_StartTimer
       _IR_GetIndex
       _IR_IsValidTime
         ___bmul
       _Led_Initialize
         _Audio_SetPlayMode
           _EUSART_Write
         _Audio_SetVolume
           _EUSART_Write
         _Audio_StopSound
           _EUSART_Write
         _Led_TurnOffRamp
         _Led_TurnOnRamp
         _Led_UpdateBright
           _PWM1_LoadDutyValue *
           _PWM2_LoadDutyValue *
           _PWM3_LoadDutyValue *
           _PWM4_LoadDutyValue *
           _PWM5_LoadDutyValue *
         _RTC_GetTime
         ___wmul
           _RTC_GetTime (ARG)
       _Led_StartNotice
         _TMR4_StartTimer
       _RTC_GetTime
       _TMR2_DisableInterrupt
       _TMR2_EnableInterrupt
       _Util_DecValue
       _Util_IncValue
       ___bmul
       ___wmul
         _RTC_GetTime (ARG)
   _IR_ResetIfTMR1Overflow
     _TMR1_StartTimer
     _TMR1_StopTimer
     _TMR2_EnableInterrupt
   _IR_UpdateSetStatus
     _IR_ExitTimeout
       _Led_Initialize
         _Audio_SetPlayMode
           _EUSART_Write
         _Audio_SetVolume
           _EUSART_Write
         _Audio_StopSound
           _EUSART_Write
         _Led_TurnOffRamp
         _Led_TurnOnRamp
         _Led_UpdateBright
           _PWM1_LoadDutyValue *
           _PWM2_LoadDutyValue *
           _PWM3_LoadDutyValue *
           _PWM4_LoadDutyValue *
           _PWM5_LoadDutyValue *
         _RTC_GetTime
         ___wmul
           _RTC_GetTime (ARG)
       _Led_StartNotice
         _TMR4_StartTimer
   _Interrupt_Initialize
     _TMR0_SetInterruptHandler
     _TMR1_Gate_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR4_SetInterruptHandler
   _Led_AutoRun
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _Util_IncValue
   _Led_CheckAutoStatus
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _RTC_GetTime
     ___wmul
       _RTC_GetTime (ARG)
   _Led_InitPara
     _DATAEE_ReadBuffer
       _DATAEE_ReadByte
     ___bmul
   _Led_Initialize
     _Audio_SetPlayMode
       _EUSART_Write
     _Audio_SetVolume
       _EUSART_Write
     _Audio_StopSound
       _EUSART_Write
     _Led_TurnOffRamp
     _Led_TurnOnRamp
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _RTC_GetTime
     ___wmul
       _RTC_GetTime (ARG)
   _Led_SaveParaIfChanged
     _DATAEE_WriteBuffer
       _DATAEE_WriteByte
   _RTC_HourReady
   _RTC_MinuteReady
   _RTC_SecondReady
   _SYSTEM_Initialize
     _ADC_Initialize_Default
     _EUSART_Initialize_Default
     _OSCILLATOR_Initialize
     _PIN_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _PWM3_Initialize
     _PWM4_Initialize
     _PWM5_Initialize
     _TMR0_Initialize_Default
     _TMR1_Initialize_Default
     _TMR2_Initialize_Default
     _TMR4_Initialize_Default
   _TMR0_StartTimer
   _TMR1_StartTimer
   _TMR2_StartTimer

 _ISR (ROOT)
   _EUSART_Transmit_ISR
   _TMR0_ISR
     Absolute function(Fake) *
     _RTC_OnSecond *
   _TMR1_GATE_ISR
     Absolute function(Fake) *
     _IR_Decode *
       _IR_GetKeyType
       i1_TMR2_DisableInterrupt
       i1_TMR2_EnableInterrupt
   _TMR2_ISR
     Absolute function(Fake) *
     _Led_Run *
       _IR_ScanLongPress
         _Led_SetCustom
           i1___bmul
         i1_IR_GetIndex
         i1_Led_StartNotice
           i1_TMR4_StartTimer
         i1_Util_DecValue
         i1_Util_IncValue
       _Led_Ramp
         i1_PWM1_LoadDutyValue *
         i1_PWM2_LoadDutyValue *
         i1_PWM3_LoadDutyValue *
         i1_PWM4_LoadDutyValue *
         i1_PWM5_LoadDutyValue *
       _Led_RunMusic
         _Audio_PlaySound
           i1_EUSART_Write
         _Audio_SelectSound
           i1_EUSART_Write
         _Led_DynamicCloud
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicMoon
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicStorm
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicWave
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
   _TMR4_ISR
     Absolute function(Fake) *
     _Led_Notice *
       _Led_TurnOffDirect
       _Led_TurnOnDirect
       _TMR4_StopTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1E      3F       5       78.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4C       9       95.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     12      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     11F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     11F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Nov 22 10:41:50 2017

                      ??i1_EUSART_Write 0070              __size_of_Audio_SetPlayMode 0017  
      __end_of_TMR2_SetInterruptHandler 0FF8                          ___bmul@product 004F  
            __size_of_Audio_SelectSound 001B                             __CFG_CP$OFF 0000  
                                    PL2 0EB7                                      PL4 02DC  
                                    PL6 05B0                                      PL8 0EBF  
                                    l26 08F1                                      l46 0FCE  
                                    l95 0CF2                    i1_PWM1_LoadDutyValue 14E7  
                   ?_IR_UpdateSetStatus 0070                           _Util_IncValue 0D30  
                   ___wmul@multiplicand 0050                        i1___wmul@product 0074  
                ??i1_PWM4_LoadDutyValue 0072           i1PWM5_LoadDutyValue@dutyValue 0070  
                _ADC_Initialize_Default 17D9                                     PL10 02E6  
                                   PL20 0ED9                                     PL12 05B7  
                                   PL30 0F08                                     PL22 02F1  
                                   PL14 0EC7                                     PL40 0F23  
                                   PL32 0F11                                     PL24 0EEA  
                                   PL16 16F9                     IR_ScanLongPress@cnt 0028  
                                   PL50 0F34                                     PL42 0310  
                                   PL34 0F1E                                     PL26 0EEF  
                                   PL18 05C9                                     PL60 07C5  
                                   PL52 0F3F                                     PL44 0F28  
                                   PL36 02F8                                     PL28 0EF9  
                                   PL70 0348                                     PL62 0328  
                                   PL54 0F49                                     PL46 009B  
                                   PL38 0304                             __CFG_LVP$ON 0000  
                                   PL80 1703                                     PL72 0350  
                                   PL64 0330                                     PL56 00A7  
                                   PL48 031C                     IR_ScanLongPress@idx 007D  
                                   PL90 17F5                                     PL82 1709  
                                   PL74 00B1                                     PL66 0338  
                                   PL58 0F53                                     PL92 0F67  
                                   PL84 0F5A                                     PL76 05D0  
                                   PL68 0340                                     PL94 0F6D  
                                   PL86 0F60                                     PL78 05D8  
                                   PL96 17FA                                     PL88 0358  
                                   PL98 05E0                                     l343 08A5  
                                   l505 0856                                     l610 165E  
                                   l609 1651                                     l628 0999  
                                   l911 0D82                                     l903 0D7C  
                                   l907 0D7F                                     l888 0D70  
                                   l899 0D79                                     _GIE 005F  
                                   _PR2 001E                                     _PR4 0416  
                          __CFG_CPD$OFF 0000                                     _ISR 0004  
                       _Led_TurnOffRamp 0A24                        ?_Led_DynamicMoon 0076  
       __end_of_TMR2_Initialize_Default 17CE                        ?_Led_DynamicWave 0076  
                       _PWM4_Initialize 1799                                     wreg 0009  
                 ?_Interrupt_Initialize 0070                          ?_RTC_HourReady 0070  
                                  PL100 05E5                                    PL110 0F7D  
                                  PL102 0F73                                    PL112 07D5  
                                  PL104 07CB                                    PL106 07D0  
                                  PL108 0F78                                    ?_ISR 0070  
                                  l1031 0E57                                    l1041 0E57  
                                  l1026 0E85               _EUSART_Initialize_Default 17E1  
                                  l1206 0C1E                                    l1142 0A95  
                                  l1151 0ADD                                    l1164 0B0B  
                                  l1158 0AFE                                    l1183 0B94  
                                  l1177 0B6E                                    l6010 099A  
                                  l6020 09AF                                    l6006 0988  
                                  l6040 09E4                                    l6008 0998  
                                  l6034 09D3                                    l6018 09CC  
                                  l6026 09CE                                    l7002 160B  
                   PIN_Initialize@state 004E                                    l6046 09E5  
                                  l7022 1628                                    l7014 161F  
                                  l6216 0D00                                    l7040 0042  
                                  l4704 17D9                                    l7112 085F  
                                  l6420 0D6E                                    l7052 0064  
                                  l7124 0872                                    l6430 0D7C  
                                  l6422 0D73                                    l4822 0E48  
                                  l7070 0088                                    l7046 0055  
                                  l4726 0FA0                                    l7134 088A  
                                  l6432 0D7F                                    l6424 0D75  
                                  l6440 0D89                                    l7056 0070  
                                  l4744 16D6                                    l4728 0FA2  
                                  l5810 1514                                    l6434 0D82  
                                  l6426 0D77                                    l6442 0DEB  
                                  l6602 0AB5                                    l7074 0094  
                                  l7066 0079                                    l5812 07DD  
                                  l5804 14DE                                    l6436 0D85  
                                  l6428 0D79                                    l6452 0E04  
                                  l6700 0B2D                                    l6612 0AC4  
                                  l6532 0A63                                    l5902 0CD3  
                                  l5806 14F0                                    l5814 0D67  
                                  l6606 0AC2                                    l6542 0A6F  
                                  l6518 0FE8                                    l4846 0FF8  
                                  l7078 0099                                    l5808 1502  
                                  l6448 0DFA                                    l6712 0B3E  
                                  l6560 0A7F                                    l6544 0A71  
                                  l6528 0A5F                                    l5906 0CD9  
                                  l6466 0E18                                    l6458 0E0B  
                                  l6802 0BEE                                    l6650 0AF9  
                                  l6634 0ADD                                    l6546 0A74  
                                  l5860 0A24                                    l6476 0E34  
                                  l6716 0B42                                    l6652 0AFC  
                                  l6628 0ACE                                    l6478 0E42  
                                  l6830 0C23                                    l6814 0C09  
                                  l6734 0B56                                    l6654 0AFE  
                                  l6574 0A8A                                    l6910 166A  
                                  l6902 1644                                    l5784 0CE7  
                                  l5880 0A48                                    l5928 08FE  
                                  l6680 0B13                                    l6920 16A0  
                                  l5874 0A46                                    l5938 091B  
                                  l6834 0C2A                                    l6818 0C10  
                                  l6762 0B82                                    l6738 0B5A  
                                  l6690 0B23                                    l6674 0B0B  
                                  l5868 0A27                                    l5964 095F  
                                  l6780 0BAE                                    l6756 0B71  
                                  l6588 0A95                                    l6940 16CD  
                                  l6932 16BE                                    l6916 166B  
                                  l5798 0CF8                                    l5894 0A38  
                                  l5982 097F                                    l5974 0970  
                                  l5958 0953                                    l6846 0C38  
                                  l6782 0BB1                                    l6774 0BA2  
                                  l6880 08B1                                    l5992 0983  
                                  l5976 0971                                    l5968 0964  
                                  l6792 0BD5                                    l6776 0BA3  
                                  l6768 0B94                                    l6856 0C40  
                                  l6936 16C7                                    l6928 16B4  
                                  l6874 089B                                    l5994 0985  
                                  l6858 0CBB                                    l6964 0E59  
                                  l6878 08AD                                    l6966 0E86  
                                  l6982 15E6                 __end_of_RTC_MinuteReady 0FE1  
                                  l6994 1602                            __CFG_WDTE$ON 0000  
                                  _GAIN 1800                 __end_of_PWM1_Initialize 1785  
                                  _LATA 010C                                    _LATB 010D  
                                  _LATC 010E                                    u5215 0D44  
               __end_of_RTC_SecondReady 0FE6                                    u3480 177D  
                                  u6025 005E                                    u6035 006A  
                                  u5510 0AC0                                    u4705 07E3  
                                  u6307 08EC                                    u5445 0D1E  
                                  u4815 09A3                                    u4825 09AC  
                                  u6267 0904                                    u4845 09B5  
                                  u6277 0910                                    i1l95 0189  
                                  u4855 09BE                                    u6287 0927  
                                  u4865 09CA                                    u6297 0933  
                                  u5765 08A1                                    u5925 15E3  
                  ??_IR_UpdateSetStatus 005C                                    u5775 08AB  
                                  u5945 1608                                    u5965 1625  
                                  _TMR1 0019                                    _TMR2 001D  
                                  _TMR4 0415                                    _WPUA 020C  
                                  _WPUB 020D                                    _WPUC 020E  
                      _Led_TurnOnDirect 15A8                            __CFG_WRT$OFF 0000  
                   __end_of_Led_AutoRun 009B                                    _main 0845  
                     ?_Led_DynamicCloud 0076                         _TMR0_StartTimer 0EB5  
                                  fsr0h 0005                                    fsr1h 0007  
                                  indf0 0000                                    fsr0l 0004  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                          ?_Util_DecValue 004E  
                    Led_DynamicMoon@val 004A                      Led_DynamicMoon@ptp 0076  
                     ?_Led_DynamicStorm 0076                                    start 002E  
                    ??_Led_DynamicCloud 0078                        Util_DecValue@min 0050  
                       _PWM5_Initialize 17A4                 _TMR0_Initialize_Default 17AA  
                  _IR_KeyAtionIfPressed 0E44                           __CFG_CSWEN$ON 0000  
                    Led_DynamicWave@val 004A                      Led_DynamicWave@ptp 0076  
                     ___bmul@multiplier 0050                           __CFG_MCLRE$ON 0000  
                       __end_of_Led_Run 037F                      ??_Led_DynamicStorm 0078  
            ??_TMR4_SetInterruptHandler 0050              __end_of_PWM5_LoadDutyValue 07EF  
                       IR_Decode@keyNum 0079                                   ??_ISR 007E  
                   Led_DynamicCloud@val 004A                     Led_DynamicCloud@ptp 0076  
                    i1_Led_UpdateBright 02C9                   ?i1_PWM1_LoadDutyValue 0070  
             __size_of_DATAEE_WriteByte 0021                          ?_Util_IncValue 004E  
                       IR_Decode@rptCnt 002F                 __end_of_PWM2_Initialize 178E  
                   _Led_CheckAutoStatus 15B4                           ?_EUSART_Write 0070  
        __size_of_OSCILLATOR_Initialize 000A           __end_of_OSCILLATOR_Initialize 1732  
                                 _ADACT 009F                                   ?_main 0070  
               __end_of_Led_StartNotice 0D64           __size_ofi1_PWM3_LoadDutyValue 0006  
                                 _ADRES 009B                                   _CCPR1 0291  
                                 _CCPR2 0295                                   _CCPR3 0311  
                                 _CCPR4 0315          ?_TMR1_Gate_SetInterruptHandler 004E  
                       _TMR1_StartTimer 0E48                                   _T1CON 001B  
                                 _T2CON 001F                                   _T4CON 0417  
                        __CFG_DEBUG$OFF 0000                                   i1l105 154D  
                            _Led_Notice 1578                                   i1l521 001E  
                                 i1l523 0024                                   i1l517 000D  
                                 i1l526 002C                                   i1l519 0017  
                                 i1l802 014F                                   i1l911 0477  
                                 i1l903 0471                                   i1l751 01C0  
                                 i1l808 0370                                   i1l762 0273  
                                 i1l907 0474                                   i1l941 0752  
                                 i1l936 06C7                                   i1l954 06E5  
                                 i1l938 06E0                                   i1l947 06E4  
                                 i1l972 06FB                                   i1l964 06F3  
                                 i1l991 075E                                   i1l959 06EC  
                                 i1l888 0465                                   i1l978 06FB  
                                 i1l899 046E                     ?i1_Led_UpdateBright 0070  
                                 _OSCEN 091D                      _PWM4_LoadDutyValue 1511  
                                 _TMR0H 0016                                   _TMR0L 0015  
              __end_of_IR_ScanLongPress 045F                                   _TRISA 008C  
                                 _TRISB 008D                                   _TRISC 008E  
                     _Led_TurnOffDirect 159F                                   _TXREG 019A  
                  i1_PWM5_LoadDutyValue 07EF                      __size_of_IR_Decode 00CE  
     __size_of_TMR0_SetInterruptHandler 0008                 __size_of_PIN_Initialize 004D  
             ?_TMR0_SetInterruptHandler 004E                           __CFG_PWRTE$ON 0000  
                           ?_IR_ExitSet 0070                          __CFG_FCMEN$OFF 0000  
                    _DATAEE_WriteBuffer 0FA0                        __end_of_TMR0_ISR 14B7  
                      __end_of_TMR2_ISR 14CF                        __end_of_TMR4_ISR 14DB  
                    ?_Led_TurnOffDirect 0070                        _tmr4_isr_handler 00E8  
                       _DATAEE_ReadByte 16EB         __end_ofi1_TMR2_DisableInterrupt 07C5  
                   ?_PWM4_LoadDutyValue 004E                                   _txBuf 01A0  
                  __end_of_Led_InitPara 16D4                    ?_Led_CheckAutoStatus 0070  
                      __end_ofi1___bmul 052A            __end_ofi1_PWM2_LoadDutyValue 14FF  
               __end_of_PWM3_Initialize 1799                          __CFG_BOREN$OFF 0000  
                                 pclath 000A                        __end_ofi1___wmul 02C9  
                        __CFG_BORV$HIGH 0000                     Led_DynamicMoon@duty 0040  
                   ?_DATAEE_WriteBuffer 0052                     ??_Led_TurnOffDirect 0070  
                                 status 0003                     i1___wmul@multiplier 0070  
                                 wtemp0 007E                   Audio_SetPlayMode@type 004F  
                       _TMR2_StartTimer 0FE6                       Util_DecValue@pSrc 004E  
                          __end_ofPL100 05EA                            __end_ofPL110 0F82  
                          __end_ofPL102 0F78                            __end_ofPL112 07DA  
                          __end_ofPL104 07D0                    ??i1_Led_UpdateBright 0074  
                          __end_ofPL106 07D5                            __end_ofPL108 0F7D  
              __end_of_Led_UpdateBright 0A5F                   ?_IR_KeyAtionIfPressed 0070  
                          __end_of_GAIN 1805                 __size_of_Audio_GetValue 0050  
                   Led_DynamicWave@duty 0040                         Led_TurnOnRamp@i 004E  
                   i1Util_IncValue@pSrc 0070                        __end_of_Led_Ramp 05B0  
                       __initialization 080A                    __end_of_Led_RunMusic 0150  
                      IR_Decode@codeVal 0026                            __end_of_main 088D  
                  ??_PWM4_LoadDutyValue 0050                 __end_of_Led_TurnOffRamp 0A34  
                       i1_Util_DecValue 052A                  IR_ScanLongPress@i_1415 007C  
               Audio_PlaySound@checksum 0071                          ??_EUSART_Write 004E  
               __end_of_PWM4_Initialize 17A4                      Led_SetCustom@value 0078  
                    Led_StartNotice@cnt 004F                    ??_DATAEE_WriteBuffer 0056  
                  Led_DynamicCloud@duty 0040               __end_of_Led_TurnOffDirect 15A8  
              _TMR2_SetInterruptHandler 0FF0                                  ??_main 005E  
                        IR_GetIndex@idx 004E                   ?i1_PWM5_LoadDutyValue 0070  
                   Led_DynamicStorm@val 004A                         ??_RTC_HourReady 004E  
                  DATAEE_ReadBuffer@buf 0052                     Led_DynamicStorm@ptp 0076  
                  DATAEE_ReadBuffer@len 0053                  ??_Interrupt_Initialize 0050  
                       i1_Util_IncValue 0550                             _Led_AutoRun 0030  
               __end_of_TMR0_StartTimer 0EB7                                  _ADCON0 009D  
                                _ADCON1 009E                                  _ADRESH 009C  
                                _ADRESL 009B                   ??_Led_CheckAutoStatus 0054  
                                _ANSELA 018C                                  _ANSELB 018D  
                                _ANSELC 018E                      __CFG_RSTOSC$HFINT1 0000  
         __size_of_TMR2_EnableInterrupt 0003                                  _T0CON0 0017  
                                _T0CON1 0018                                  _T1GCON 001C  
                      ?_RTC_MinuteReady 0070                                  _RC1STA 019D  
                                i1l1103 03A3                                  i1l1108 03B3  
                      ?_PWM1_Initialize 0070                                  i1l1082 06A3  
                                i1l1091 045E                                  i1l1096 0384  
                          ?_IR_GetIndex 0070                                  _ODCONA 028C  
                                _ODCONB 028D                                  _ODCONC 028E  
                                i1l5000 0638                                  i1l5010 064B  
                                i1l4300 047A                                  i1l5030 066E  
                                i1l4304 047E                                  i1l5042 067D  
                                i1l5050 0689                                  i1l4306 04E0  
                                i1l5052 068B                                  i1l6100 00F8  
               __end_of_PWM5_Initialize 17AA                                  i1l5038 0675  
                                i1l6110 0191                                  i1l5064 06A5  
                                i1l5056 068F                                  i1l5048 0686  
                                i1l6200 0222                                  i1l6104 0104  
                                i1l4290 046C                                  i1l5068 06A8  
                                i1l4292 046E                                  i1l4284 0463  
                                i1l3900 018D                                  i1l6132 01DC  
                                i1l6124 01C1                                  i1l6204 0231  
                                i1l4294 0471                                  i1l4286 0468  
                                i1l6150 0280                                  i1l6118 01BE  
                                i1l4624 06CA                                  i1l6072 0518  
                                i1l6064 04F4                                  i1l4296 0474  
                                i1l4288 046A                                  i1l6320 03B3  
                                i1l6312 03A3                                  i1l6304 0384  
                                i1l6232 0579                                  i1l6152 0282  
                                i1l6128 01D0                                  i1l6208 023D  
                                i1l6080 00B9                                  i1l4634 06DE  
                                i1l4298 0477                                  i1l6402 0416  
                                i1l6242 058A                                  i1l3922 02B6  
                                i1l6138 0244                                  i1l6090 00E8  
                                i1l3780 07EF                                  i1l3772 14E7  
                                i1l6172 02AD                                  i1l6164 0292  
                                i1l6260 010B                                  i1l4662 075F  
                                i1l4646 06F9                                  i1l4654 0702  
                                i1l6334 03C6                                  i1l3774 14F9  
                                i1l6246 0598                                  i1l6238 057A  
                                i1l3926 02BC                                  i1l6158 0291  
                                i1l6270 011A                                  i1l6262 0124  
                                i1l4680 07BD                                  i1l4656 0753  
                                i1l6416 0423                                  i1l3776 150B  
                                i1l6248 05A0                                  i1l6168 02A1  
                                i1l6096 00E9                                  i1l6280 0125  
                                i1l6504 0366                        ?_RTC_SecondReady 0070  
                                i1l4666 0762                                  i1l3938 0520  
                                i1l6346 03D3                                  i1l3778 151D  
                                i1l6194 0221                                  i1l6186 0210  
                                i1l6178 01E3                                  i1l6290 0149  
                                i1l4914 1597                                  i1l4668 0791  
                                i1l6380 03FB                                  i1l6372 03EA  
                                i1l6188 0212                                  i1l6284 0137  
                                i1l6508 036F                                  i1l4678 079D  
                                i1l6358 03E0                                  i1l3886 017E  
                                i1l6286 013D                                  i1l4918 159B  
                                i1l6288 0143                                  i1l4962 1536  
                                i1l6394 0405                                  i1l5922 02CA  
                                i1l4964 1537                                  i1l4972 05F3  
                                i1l4990 061A                                  i1l4984 060A  
                                i1l4988 0618                                  i1l4998 0636  
                                u510_20 01FF                                  u238_25 07F4  
                                u503_20 0260                                  u511_25 0209  
                                _SP1BRG 019B                                  u505_25 0279  
                                u373_20 065C                                  u293_25 0564  
                                u374_20 065D                                  u294_25 053E  
                                u368_24 062F                                  u368_25 062D  
                       ??_Util_DecValue 0054                                  _OSCFRQ 091F  
                                u493_20 00D5                                  u498_20 01AD  
                                u499_25 01B7                                  _PWM5DC 0617  
                                _TX1STA 019E                   __end_of_IR_GetKeyType 07BF  
               __size_of_IR_IsValidTime 004E                               ??_Led_Run 004D  
             ??_TMR0_Initialize_Default 004E                                  _VOLUME 1805  
                       _TMR4_StartTimer 0D67                 __size_of_Led_Initialize 00F8  
                     __end_of_IR_Decode 06B8                   __end_of_TMR1_GATE_ISR 14C3  
      __size_of_TMR2_Initialize_Default 000A                         ??_Util_IncValue 0054  
                                ___bmul 0CFD                     __size_of_IR_ExitSet 0009  
                ??i1_PWM1_LoadDutyValue 0072             __size_of_PWM3_LoadDutyValue 000C  
               __end_of_TMR1_StartTimer 0E4B                                  ___wmul 0CD1  
                        __CFG_STVREN$ON 0000                    Led_DynamicMoon@F8316 00AA  
                   Audio_GetValue@value 0058                     _EUSART_Transmit_ISR 1539  
                      ?_PWM2_Initialize 0070                                  _txHead 0034  
                                _txTail 0035                 __end_of_DATAEE_ReadByte 16F9  
                      ?_Led_StartNotice 0070                             ?_Led_Notice 0070  
                      IR_IsValidTime@tm 0055                    Led_DynamicWave@F8306 00B4  
               __end_of_TMR2_StartTimer 0FE8                   __end_of_Led_SetCustom 051E  
              ??_IR_ResetIfTMR1Overflow 004E                ?_TMR1_Initialize_Default 0070  
              ?_TMR4_Initialize_Default 0070                    ?_EUSART_Transmit_ISR 0070  
                    Util_DecValue@delta 0052                      i1Util_DecValue@min 0072  
                      ?_PWM3_Initialize 0070                       _SYSTEM_Initialize 170F  
                          ?_RTC_GetTime 0070                 __end_of__initialization 0842  
                ??_IR_KeyAtionIfPressed 005C                      ?_SYSTEM_Initialize 0070  
                   i1Led_UpdateBright@i 0074          __size_of_Led_SaveParaIfChanged 000E  
            __end_of_PWM2_LoadDutyValue 14F9           __end_of_Led_SaveParaIfChanged 0FA0  
                      Led_TurnOffRamp@i 004E                 __end_ofi1_Util_DecValue 0550  
               __size_of_IR_ExitTimeout 0008             PWM1_LoadDutyValue@dutyValue 004E  
                  i1Util_IncValue@delta 0074                     ___bmul@multiplicand 004E  
                      Led_DynamicMoon@i 004C                        Led_DynamicWave@i 004C  
       TMR4_SetInterruptHandler@handler 004E                          __pcstackCOMMON 0070  
                     IR_GetIndex@keynum 004F                            __pidataBANK1 1550  
                          __pidataBANK3 0800                     ??_SYSTEM_Initialize 004F  
                             ?_TMR0_ISR 0070          __size_of_TMR2_DisableInterrupt 0003  
                             ?_TMR2_ISR 0070                   Led_DynamicCloud@F8326 00A0  
                             ?_TMR4_ISR 0070                 ?_ADC_Initialize_Default 0070  
         __end_of_TMR2_DisableInterrupt 0D67                        _DATAEE_WriteByte 0FB7  
                      ?_Led_TurnOffRamp 0070                 __end_ofi1_Util_IncValue 0576  
                            _adc_result 002A                      _PWM1_LoadDutyValue 14DB  
                      ?_PWM4_Initialize 0070                              __end_ofPL2 0EBF  
                            __end_ofPL4 02E6                              __end_ofPL6 05B7  
                            __end_ofPL8 0EC7        __size_ofi1_TMR2_DisableInterrupt 0003  
              __end_of_Led_TurnOnDirect 15B1                    i1_PWM2_LoadDutyValue 14F9  
                             ?i1___bmul 0070                     Led_SetCustom@pValue 0073  
            __size_of_Led_TurnOffDirect 0009             PWM4_LoadDutyValue@dutyValue 004E  
                ??i1_PWM5_LoadDutyValue 0072                               ?i1___wmul 0070  
                    DATAEE_ReadBuffer@i 0054                          _PIN_Initialize 1732  
                 __size_of_Led_InitPara 009C                     ?_PWM1_LoadDutyValue 004E  
                      Led_Initialize@ct 0059                        i1___bmul@product 0072  
                             ?_Led_Ramp 0070                        ?_TMR0_StartTimer 0070  
               __end_of_TMR4_StartTimer 0D6A               __end_of_SYSTEM_Initialize 1728  
                 ??_EUSART_Transmit_ISR 0070                __size_of_Audio_PlaySound 0012  
                            __pbssBANK0 0020                              __pbssBANK1 00C8  
                            __pbssBANK2 0120                              __pbssBANK3 01A0  
              __size_of_Audio_SetVolume 0017                    __end_of_EUSART_Write 0CFD  
                      ?_PWM5_Initialize 0070                 __size_of_Led_TurnOnRamp 0012  
          _PWM2_LoadDutyValue$intlevel0 14F0                   DATAEE_ReadBuffer@addr 0050  
                  Led_DynamicStorm@duty 0040                   __size_of_Led_RunMusic 0045  
                   IR_GetKeyType@keynum 0072                 __size_of_ADC_Conversion 0021  
                   IR_GetKeyType@result 0071                          _Audio_GetValue 088D  
                  ??_PWM1_LoadDutyValue 0050                     __size_of_Led_Notice 0027  
                            __pmaintext 0845           i1PWM3_LoadDutyValue@dutyValue 0070  
        __end_of_ADC_Initialize_Default 17E1                                 ?___bmul 004E  
      __end_of_TMR0_SetInterruptHandler 0F8A                ??i1_TMR2_EnableInterrupt 0070  
                               ?___wmul 004E                        ?_TMR1_StartTimer 0070  
                            ??_TMR0_ISR 0070                         __CFG_PPS1WAY$ON 0000  
                            ??_TMR2_ISR 007E                              ??_TMR4_ISR 0071  
       TMR2_SetInterruptHandler@handler 004E            _PWM5_LoadDutyValue$intlevel0 07DD  
                            __pintentry 0004                            _Led_InitPara 1638  
                               _CCP1CON 0293                                 _CCP2CON 0297  
                               _CCP3CON 0313                                 _CCP4CON 0317  
                 ?i1_PWM2_LoadDutyValue 0070                __size_of_Audio_StopSound 0012  
             __size_of_Led_DynamicCloud 0070                              ??i1___bmul 0071  
                __end_of_PIN_Initialize 177F                  __size_ofi1_IR_GetIndex 0083  
                            ??i1___wmul 0074                 __size_of_TMR1_StopTimer 0002  
             __size_of_Led_DynamicStorm 0061                        ?_DATAEE_ReadByte 004E  
         __size_ofi1_PWM4_LoadDutyValue 0006         __end_of_TMR1_Initialize_Default 17C4  
       __end_of_TMR4_Initialize_Default 17D9                       ?_IR_ScanLongPress 0070  
                    _PWM5_LoadDutyValue 07DA                            ??_IR_ExitSet 005C  
                               _OSCCON1 0919                                 _OSCCON3 091B  
                               _NVMADRH 0892                                 _NVMADRL 0891  
                               _OSCTUNE 091E                                 _NVMDATL 0893  
                               _NVMCON2 0896                                 _PWM5CON 0619  
                          _Led_RunMusic 010B                                 _PPSLOCK 0E0F  
                    ??_IR_ScanLongPress 007B                              ??_Led_Ramp 0074  
                      ?_TMR2_StartTimer 0070                           ?_IR_KeyAction 0070  
       __size_of_IR_ResetIfTMR1Overflow 003E                     ?_PWM5_LoadDutyValue 004E  
           __size_of_IR_UpdateSetStatus 000C                __size_of_Led_DynamicMoon 0052  
              __size_of_Led_DynamicWave 0052         ??_TMR1_Gate_SetInterruptHandler 0050  
          __end_ofi1_PWM3_LoadDutyValue 1511                        Util_IncValue@max 0050  
                        _IR_IsValidTime 0DF6                          Led_SetCustom@i 007A  
                __end_of_Audio_GetValue 08DD                    DATAEE_WriteByte@addr 004E  
                               _Led_Run 035E                    DATAEE_WriteByte@byte 0050  
                  __size_of_IR_GetIndex 0083                          _Led_Initialize 08FE  
                      ?i1_Util_DecValue 0070                       ?_Led_UpdateBright 0070  
               _TMR2_Initialize_Default 17C4              ??_TMR2_SetInterruptHandler 0050  
                    ??_Led_UpdateBright 0052                 __size_of_TMR4_StopTimer 0003  
                       __size_of___bmul 000D                      __end_of_IR_ExitSet 0DF6  
                       __size_of___wmul 0015                    ??_PWM5_LoadDutyValue 0050  
                     _DATAEE_ReadBuffer 16D4                        ?i1_Util_IncValue 0070  
       TMR0_SetInterruptHandler@handler 004E                                 __ptext1 0FE6  
                               __ptext2 0EB5                                 __ptext3 170F  
                               __ptext4 17CE                                 __ptext5 17C4  
                               __ptext6 17B5                                 __ptext7 17AA  
                               __ptext8 17A4                                 __ptext9 1799  
                       ?_PIN_Initialize 0070                      ?_DATAEE_ReadBuffer 0050  
                          __size_of_ISR 002A                               _T1CONbits 001B  
                 _OSCILLATOR_Initialize 1728                               _T2CONbits 001F  
               __size_ofi1_EUSART_Write 0014                               _T4CONbits 0417  
     __size_of_TMR4_SetInterruptHandler 0008                     i1___bmul@multiplier 0071  
             ?_TMR4_SetInterruptHandler 004E                   _tmr1_gate_isr_handler 00E4  
                   ??_DATAEE_ReadBuffer 0054                            ?_Led_AutoRun 0070  
                        ??_IR_KeyAction 01C0              __size_of_SYSTEM_Initialize 0019  
                               clrloop0 14A0                        ?_TMR4_StartTimer 0070  
                __end_of_IR_IsValidTime 0E44                    end_of_initialization 0842  
                           _gLedRunPara 00C8                  __end_of_Led_Initialize 09F6  
                         i1_IR_GetIndex 045F                                 init_ram 14A5  
               Audio_SetVolume@checksum 0050                         ?_Audio_GetValue 0070  
                               initloop 14A6                        i1IR_GetIndex@idx 0070  
                     IR_IsValidTime@len 0051                       IR_IsValidTime@min 0052  
               Audio_StopSound@checksum 004F                       ??_Audio_PlaySound 0071  
           __size_ofi1_Led_UpdateBright 0013                          _IR_ExitTimeout 0FE8  
                  __size_of_RTC_GetTime 0001               Audio_SetPlayMode@checksum 0050  
                     ??_Audio_SetVolume 004F               __end_of_DATAEE_ReadBuffer 16EB  
          __end_of_TMR2_EnableInterrupt 0E8C                  _IR_ResetIfTMR1Overflow 0E4B  
                ??i1_PWM2_LoadDutyValue 0072         __size_ofi1_TMR2_EnableInterrupt 0003  
           __size_of_PWM4_LoadDutyValue 000C                            __pstringtext 1800  
               i1_TMR2_DisableInterrupt 07C2                               _IR_Decode 05EA  
                 i1___wmul@multiplicand 0072                               Led_Ramp@i 007A  
           __size_of_DATAEE_WriteBuffer 0017                _TMR0_SetInterruptHandler 0F82  
                   i1Util_DecValue@pSrc 0070                            ??_Led_Notice 0070  
                DATAEE_WriteBuffer@addr 0052                              _rtc_status 0033  
           __end_of_Led_CheckAutoStatus 1638                       ??_Audio_StopSound 004F  
                 __size_of_EUSART_Write 0017                   __end_of_RTC_HourReady 0FDD  
         __size_of_Interrupt_Initialize 001B                        __CFG_FEXTOSC$OFF 0000  
                       ?_IR_IsValidTime 0051                __end_of_DATAEE_WriteByte 0FD8  
                         ?_RTC_OnSecond 0070                          _Led_TurnOnRamp 0A34  
                        ?i1_IR_GetIndex 0070                           IR_Decode@nBit 002E  
                         IR_Decode@hVal 007A                  __end_of_IR_ExitTimeout 0FF0  
                       ?_Led_Initialize 0070                       Led_DynamicCloud@i 004C  
                        _ADC_Conversion 08DD                           IR_Decode@type 0078  
             ??_TMR2_Initialize_Default 004E                   __end_of_Util_DecValue 0D30  
                   _Led_Initialize$1200 0056                          __end_of_VOLUME 180A  
            __end_of_PWM3_LoadDutyValue 150B                      Util_IncValue@delta 0052  
                    __end_of_Led_Notice 159F                __size_of_RTC_MinuteReady 0004  
                     ??_Led_DynamicMoon 0078                       ??_Led_DynamicWave 0078  
              __size_of_PWM1_Initialize 0006                __size_of_RTC_SecondReady 0005  
                      Led_SetCustom@idx 0077        __size_of_TMR1_Initialize_Default 000F  
      __size_of_TMR4_Initialize_Default 000B                       Led_DynamicStorm@i 004C  
                            ?_IR_Decode 0070                          __end_of___bmul 0D0A  
                 __end_of_Util_IncValue 0D56           __size_ofi1_PWM1_LoadDutyValue 0006  
                        __end_of___wmul 0CE6                        _Led_DynamicCloud 0244  
                          _EUSART_Write 0CE6                       __size_of_TMR0_ISR 000C  
                     __size_of_TMR2_ISR 000C                      _PWM2_LoadDutyValue 14ED  
                     __size_of_TMR4_ISR 000C                       Audio_GetValue@cnt 0020  
                     ?_Led_TurnOnDirect 0070                       Audio_GetValue@max 0022  
                     Audio_GetValue@min 0024                          _TMR1_StopTimer 0E8C  
                ?_OSCILLATOR_Initialize 0070                    i1_PWM3_LoadDutyValue 150B  
                      _Led_DynamicStorm 01E3                  __size_of_IR_GetKeyType 0107  
                    ??_Led_TurnOnDirect 0070                       i1_Led_StartNotice 04E2  
                     __size_ofi1___bmul 000C                             __end_ofPL10 02F1  
                           __end_ofPL20 0EEA                             __end_ofPL12 05C9  
                           __end_ofPL30 0F11                             __end_ofPL22 02F8  
                           __end_ofPL14 0ED9                             __end_ofPL40 0F28  
                           __end_ofPL32 0F1E                             __end_ofPL24 0EEF  
                           __end_ofPL16 1703                             __end_ofPL50 0F3F  
                           __end_ofPL42 031C                             __end_ofPL34 0F23  
                           __end_ofPL26 0EF9                             __end_ofPL18 05D0  
                           __end_ofPL60 07CB                             __end_ofPL52 0F49  
                           __end_ofPL44 0F34                             __end_ofPL36 0304  
                           __end_ofPL28 0F08                             __end_ofPL70 0350  
                           __end_ofPL62 0330                             __end_ofPL54 0F53  
                           __end_ofPL46 00A7                             __end_ofPL38 0310  
                           __end_ofPL80 1709                             __end_ofPL72 0358  
                           __end_ofPL64 0338                             __end_ofPL56 00B1  
                           __end_ofPL48 0328                             __end_ofPL90 17FA  
                           __end_ofPL82 170F                             __end_ofPL74 00B9  
                           __end_ofPL66 0340                             __end_ofPL58 0F5A  
                           __end_ofPL92 0F6D                             __end_ofPL84 0F60  
                           __end_ofPL76 05D8                             __end_ofPL68 0348  
                           __end_ofPL94 0F73                             __end_ofPL86 0F67  
                           __end_ofPL78 05E0                             __end_ofPL96 1800  
                           __end_ofPL88 035E                             __end_ofPL98 05E5  
                   start_initialization 080A                       __size_ofi1___wmul 0015  
                           __end_of_ISR 002E                      i1Util_IncValue@max 0072  
              __size_of_PWM2_Initialize 0009                     ?_PWM2_LoadDutyValue 004E  
                    ?i1_Led_StartNotice 0070                  __size_of_TMR1_GATE_ISR 000C  
                __end_of_Led_TurnOnRamp 0A46                  i1_TMR2_EnableInterrupt 07BF  
              __size_of_Led_StartNotice 000D                ?_TMR0_Initialize_Default 0070  
                        ??_RTC_OnSecond 0070                  __end_of_ADC_Conversion 08FE  
                     __size_of_Led_Ramp 0037                     ??i1_Led_StartNotice 0070  
                       ?_IR_ExitTimeout 0070                     DATAEE_ReadByte@addr 004E  
         __size_of_IR_KeyAtionIfPressed 0004                        __CFG_LPBOREN$OFF 0000  
                       IR_KeyAction@idx 01D1                    ??_PWM2_LoadDutyValue 0050  
                    IR_Decode@revKeyNum 0077               ??i1_TMR2_DisableInterrupt 0070  
              __size_of_PWM3_Initialize 000B                   _Led_SaveParaIfChanged 0F92  
                        _TMR4_StopTimer 15B1                                ??___bmul 004F  
           PWM2_LoadDutyValue@dutyValue 004E              __size_of_DATAEE_ReadBuffer 0017  
                              ??___wmul 0052                             _CCPTMRSbits 029F  
                  __end_of_IR_KeyAction 0CBF                  __end_of_TMR1_StopTimer 0E8E  
                           __pdataBANK1 00A0                             __pdataBANK3 01D2  
                __size_of_Led_SetCustom 0030                   Led_DynamicStorm@F8336 01D2  
                 ?i1_PWM3_LoadDutyValue 0070                   _TMR2_DisableInterrupt 0D64  
             __end_ofi1_Led_StartNotice 04EE                          i1_EUSART_Write 017D  
           __end_of_EUSART_Transmit_ISR 1550             PWM5_LoadDutyValue@dutyValue 004E  
         __size_ofi1_PWM5_LoadDutyValue 000F                __size_of_Led_TurnOffRamp 0010  
                             ___latbits 0002                           __pcstackBANK0 0040  
                         __pcstackBANK3 01C0                __size_of_PWM4_Initialize 000B  
                Audio_SelectSound@index 0071                     i1IR_GetIndex@keynum 0071  
                       ?_Led_TurnOnRamp 0070                         ??i1_IR_GetIndex 0070  
                     ADC_Conversion@chn 0051                    IR_IsValidTime@result 0053  
                  _TMR2_EnableInterrupt 0E89                    __size_of_Led_AutoRun 006B  
                       ?_ADC_Conversion 004E                           Led_InitPara@i 005B  
                         Led_InitPara@j 005A                         Led_Initialize@i 005B  
                         IR_KeyAction@i 01CA           i1PWM1_LoadDutyValue@dutyValue 0070  
                              ?_Led_Run 0070            __end_ofi1_PWM4_LoadDutyValue 1523  
                         _IR_GetKeyType 06B8                               __pnvBANK0 005E  
                             __pnvBANK1 00E2            _PWM3_LoadDutyValue$intlevel0 1502  
              __size_of_TMR0_StartTimer 0002               __size_of_IR_ScanLongPress 00E0  
                __end_of_TMR4_StopTimer 15B4             __size_of_PWM1_LoadDutyValue 000C  
              __size_of_PWM5_Initialize 0006               Audio_SelectSound@checksum 0072  
                         _TMR1_GATE_ISR 14B7                        ??_PIN_Initialize 004E  
      __end_of_TMR4_SetInterruptHandler 1000      __size_of_EUSART_Initialize_Default 0014  
                             __ptext100 05EA                               __ptext101 07BF  
                             __ptext102 07C2                               __ptext103 06B8  
                             __ptext104 14AB                               __ptext105 1523  
                             __ptext106 1539           i1PWM4_LoadDutyValue@dutyValue 0070  
                           ??_IR_Decode 0073              ?_EUSART_Initialize_Default 0070  
                       ?_TMR1_StopTimer 0070                  __end_ofi1_EUSART_Write 0191  
                     ??_RTC_MinuteReady 004E                       ??_PWM1_Initialize 004E  
                     ??_RTC_SecondReady 004E                     DATAEE_WriteBuffer@i 0056  
                              _BAUD1CON 019F                __size_of_TMR1_StartTimer 0003  
             __size_of_Led_UpdateBright 0019         __end_of_TMR0_Initialize_Default 17B5  
                       _Audio_PlaySound 0150                        ??_Audio_GetValue 0054  
            __end_of_IR_UpdateSetStatus 0E9A                   ?_TMR2_EnableInterrupt 0070  
              __size_of_DATAEE_ReadByte 000E                         _Audio_SetVolume 0A0D  
                         ??_IR_GetIndex 004E                           _Led_SetCustom 04EE  
                         Led_Notice@cnt 0030                       ??_PWM2_Initialize 004E  
                        ?_IR_GetKeyType 0070                             _audio_value 002C  
                        ___wmul@product 0052                               clear_ram0 149F  
                              _PIE0bits 0090                       ??_Led_StartNotice 004E  
                              _PIE1bits 0091                                _PIE2bits 0092  
              __size_of_TMR2_StartTimer 0002                   i1___bmul@multiplicand 0070  
                ?_Led_SaveParaIfChanged 0070                         ?_TMR4_StopTimer 0070  
               ?_IR_ResetIfTMR1Overflow 0070                 _TMR1_Initialize_Default 17B5  
               _TMR4_Initialize_Default 17CE              ??_TMR0_SetInterruptHandler 0050  
                              _PIR0bits 0010                          ?_TMR1_GATE_ISR 0070  
                              _PIR1bits 0011                                _PIR2bits 0012  
                              _TMR0_ISR 14AB                                _TMR2_ISR 14C3  
                              _TMR4_ISR 14CF                         _Audio_StopSound 0CBF  
                      EUSART_Write@byte 004E                   DATAEE_WriteBuffer@buf 0054  
                ??i1_PWM3_LoadDutyValue 0072                   DATAEE_WriteBuffer@len 0055  
                ?_TMR2_DisableInterrupt 0070                    __end_of_RTC_OnSecond 1539  
           __size_of_PWM5_LoadDutyValue 0015                __size_ofi1_Util_DecValue 0026  
     __end_of_EUSART_Initialize_Default 17F5                         ?i1_EUSART_Write 0070  
                     ??_PWM3_Initialize 004E                                i1___bmul 051E  
            __size_ofi1_Led_StartNotice 000C                              _ADCON0bits 009D  
                     ___wmul@multiplier 004E                                i1___wmul 02B4  
                     IR_ScanLongPress@i 007B                    Led_Initialize@result 0058  
                      ??_IR_IsValidTime 0052       __size_of_TMR2_SetInterruptHandler 0008  
             ?_TMR2_SetInterruptHandler 004E                       Util_IncValue@pSrc 004E  
              __size_ofi1_Util_IncValue 0026                   Led_CheckAutoStatus@ct 0059  
                      ??_Led_Initialize 0054                      IR_KeyAction@i_1421 01CB  
                    IR_KeyAction@i_1422 01CC                      IR_KeyAction@i_1423 01CF  
                    IR_KeyAction@i_1424 01D0                      IR_KeyAction@i_1427 01CD  
                    IR_KeyAction@i_1428 01CE                                _Led_Ramp 0579  
                        ?_Led_SetCustom 0073                         _Led_DynamicMoon 0191  
                       _Led_DynamicWave 00B9                       ?_DATAEE_WriteByte 004E  
                     ??_Led_TurnOffRamp 004E                       i1_TMR4_StartTimer 0576  
                         ??_RTC_GetTime 004E              __end_ofi1_Led_UpdateBright 02DC  
              __end_of_Led_DynamicCloud 02B4                       ??_PWM4_Initialize 004E  
              ??_ADC_Initialize_Default 004E                      ??_DATAEE_WriteByte 0051  
              __end_of_Led_DynamicStorm 0244                      ?i1_TMR4_StartTimer 0070  
        __end_of_IR_ResetIfTMR1Overflow 0E89                        __size_of_Led_Run 0021  
              __size_of_TMR4_StartTimer 0003                   __size_of_IR_KeyAction 0260  
                   __end_of_IR_GetIndex 0DED            __end_of_Interrupt_Initialize 0EB5  
            __end_of_PWM4_LoadDutyValue 151D                                _gLedPara 0120  
                   ??i1_TMR4_StartTimer 0070              __end_of_DATAEE_WriteBuffer 0FB7  
               ??_OSCILLATOR_Initialize 004E                       ??_TMR0_StartTimer 004E  
                     _Audio_SetPlayMode 09F6           __size_ofi1_PWM2_LoadDutyValue 0006  
                          Led_AutoRun@i 005C                       _Audio_SelectSound 0162  
                     ??_PWM5_Initialize 004E                 __end_of_Audio_PlaySound 0162  
                    ?_Audio_SetPlayMode 0070                _TMR4_SetInterruptHandler 0FF8  
                    _PWM3_LoadDutyValue 14FF                    i1_PWM4_LoadDutyValue 151D  
               __end_of_Audio_SetVolume 0A24                      ?_Audio_SelectSound 0070  
               ?i1_TMR2_EnableInterrupt 0070                              _T0CON0bits 0017  
            Led_CheckAutoStatus@sunrise 0055                        _tmr0_isr_handler 00E2  
                ??_TMR2_EnableInterrupt 004E                     ??_Audio_SetPlayMode 004F  
                      ??_IR_ExitTimeout 005C                                __ptext10 178E  
                              __ptext11 1785                                __ptext20 0F92  
                              __ptext12 177F                                __ptext21 0FA0  
                              __ptext13 1732                                __ptext30 0FF0  
                              __ptext22 0FB7                                __ptext14 1728  
                              __ptext31 0F8A                                __ptext23 1638  
                              __ptext15 17E1                                __ptext40 0D30  
                              __ptext32 0F82                                __ptext24 16D4  
                              __ptext16 17D9                                __ptext41 0D0A  
                              __ptext33 0E8E                                __ptext25 16EB  
                              __ptext17 0FE1                                __ptext50 08FE  
                              __ptext42 0E89                                __ptext34 0FE8  
                              __ptext26 15B4                                __ptext18 0FDD  
                              __ptext51 0D56                                __ptext43 0D64  
                              __ptext35 0E4B                                __ptext27 0030  
                              __ptext19 0FD8                                __ptext60 0CBF  
                              __ptext52 0A46                                __ptext44 0DF6  
                              __ptext36 0E8C                                __ptext28 0E9A  
                              __ptext61 0A0D                                __ptext53 1511  
                              __ptext45 0CFD                                __ptext37 0E48  
                              __ptext29 0FF8                                __ptext70 15B1  
                              __ptext62 09F6                                __ptext54 14FF  
                              __ptext46 0D6A                                __ptext38 0E44  
                              __ptext71 15A8                                __ptext63 0CE6  
                              __ptext55 14ED                                __ptext47 0DED  
                              __ptext39 0A5F                                __ptext80 02B4  
                              __ptext72 159F                                __ptext64 088D  
                              __ptext56 14DB                                __ptext48 0D57  
                              __ptext81 02C9                                __ptext73 14C3  
                              __ptext65 0CD1                                __ptext57 07DA  
                              __ptext49 0D67                                __ptext90 07EF  
                              __ptext82 0162                                __ptext74 035E  
                              __ptext66 08DD                                __ptext58 0A34  
                   ?_PWM3_LoadDutyValue 004E                                __ptext91 037F  
                              __ptext83 0150                                __ptext75 010B  
                              __ptext59 0A24                                __ptext92 0550  
                              __ptext84 017D                                __ptext76 00B9  
                              __ptext68 14CF                                __ptext93 052A  
                              __ptext85 0579                                __ptext77 01E3  
                              __ptext69 1578                                __ptext94 04E2  
                              __ptext86 151D                                __ptext78 0191  
                              __ptext95 0576                                __ptext87 150B  
                              __ptext79 0244                                __ptext96 045F  
                              __ptext88 14F9                                __ptext97 04EE  
                              __ptext89 14E7                                __ptext98 051E  
                              __ptext99 14B7               __end_ofi1_TMR4_StartTimer 0579  
          __end_ofi1_PWM1_LoadDutyValue 14ED                     ??_Audio_SelectSound 0071  
                     ??_TMR1_StartTimer 004E                            _IR_KeyAction 0A5F  
          __size_of_Led_CheckAutoStatus 0084                         ??_IR_GetKeyType 0070  
           DATAEE_WriteByte@GIEBitValue 0051               __size_of_Led_TurnOnDirect 0009  
                              _keyValue 0032                                _loadDuty 00BE  
                            _T1GPPSbits 0E13                           __size_of_main 0048  
             ??_TMR1_Initialize_Default 004E                                _ir_state 0036  
             ??_TMR4_Initialize_Default 004E                         ??_TMR1_GATE_ISR 007C  
                      _IR_ScanLongPress 037F                              _RA2PPSbits 0E92  
               __end_of_Audio_StopSound 0CD1                       ??_DATAEE_ReadByte 0050  
                            _RC1PPSbits 0EA1                     __end_of_RTC_GetTime 0D57  
      __size_of_TMR0_Initialize_Default 000B                    ??_PWM3_LoadDutyValue 0050  
                            _RC3PPSbits 0EA3               __end_of_Audio_SetPlayMode 0A0D  
                              _txRemain 005E                  __size_of_RTC_HourReady 0005  
                              _rtc_time 003D                                int$flags 007E  
                            _RC5PPSbits 0EA5                              _RB7PPSbits 0E9F  
                         ?_Led_InitPara 0070               __end_of_Audio_SelectSound 017D  
                     ??_TMR2_StartTimer 004E                              _RC7PPSbits 0EA7  
  TMR1_Gate_SetInterruptHandler@handler 004E                    i1Led_StartNotice@cnt 0071  
                  Led_CheckAutoStatus@i 005D          __end_ofi1_TMR2_EnableInterrupt 07C2  
                 ?i1_PWM4_LoadDutyValue 0070               Led_CheckAutoStatus@i_1230 005B  
             Led_CheckAutoStatus@i_1231 005C                       Led_UpdateBright@i 0052  
                      ??_Led_TurnOnRamp 004E                        _Led_UpdateBright 0A46  
               __end_of_Led_DynamicMoon 01E3            __end_of_IR_KeyAtionIfPressed 0E48  
               __end_of_Led_DynamicWave 010B                              _INTCONbits 000B  
                __size_of_Util_DecValue 0026                             _NVMCON1bits 0895  
                     ??i1_Util_DecValue 0076                        ??_ADC_Conversion 0050  
                       ??_Led_SetCustom 0074                           ?_Led_RunMusic 0070  
              ?_TMR2_Initialize_Default 0070                      IR_IsValidTime@hour 0054  
                              intlevel1 0000                             _IR_GetIndex 0D6A  
                __size_of_Util_IncValue 0026               Led_CheckAutoStatus@sunset 0057  
                     ??i1_Util_IncValue 0076         __size_of_ADC_Initialize_Default 0008  
                     __CFG_CLKOUTEN$OFF 0000            __end_ofi1_PWM5_LoadDutyValue 07FE  
                           _PPSLOCKbits 0E0F                         _RTC_MinuteReady 0FDD  
                    i1EUSART_Write@byte 0070                         _PWM1_Initialize 177F  
                       _RTC_SecondReady 0FE1                        ??_TMR1_StopTimer 004E  
                 __size_of_RTC_OnSecond 0016             __size_of_PWM2_LoadDutyValue 000C  
                        ??_Led_InitPara 0055   __end_of_TMR1_Gate_SetInterruptHandler 0F92  
__size_of_TMR1_Gate_SetInterruptHandler 0008           _TMR1_Gate_SetInterruptHandler 0F8A  
           PWM3_LoadDutyValue@dutyValue 004E             ??_EUSART_Initialize_Default 004E  
                     ??_TMR4_StartTimer 004E                        ?_Audio_PlaySound 0070  
                      ?_Audio_SetVolume 0070                         _PWM2_Initialize 1785  
                        ??_Led_RunMusic 007C                              Led_Run@cnt 0031  
                            _IR_ExitSet 0DED                           ??_Led_AutoRun 0058  
                      _tmr2_isr_handler 00E6                         _Led_StartNotice 0D57  
                  _Interrupt_Initialize 0E9A                           _RTC_HourReady 0FD8  
            __size_ofi1_TMR4_StartTimer 0003            _PWM1_LoadDutyValue$intlevel0 14DE  
                  i1Util_DecValue@delta 0074            __size_of_EUSART_Transmit_ISR 0017  
                 __end_ofi1_IR_GetIndex 04E2                        ??_TMR4_StopTimer 0070  
                          _RTC_OnSecond 1523                             _RTC_GetTime 0D56  
               ??_Led_SaveParaIfChanged 0057                      Audio_SetVolume@vol 004F  
                           _PWMTMRSbits 061F              __end_of_PWM1_LoadDutyValue 14E7  
              ?i1_TMR2_DisableInterrupt 0070           i1PWM2_LoadDutyValue@dutyValue 0070  
                         _Util_DecValue 0D0A                        ?_Audio_StopSound 0070  
                       _PWM3_Initialize 178E                      _IR_UpdateSetStatus 0E8E  
          _PWM4_LoadDutyValue$intlevel0 1514                 ??_TMR2_DisableInterrupt 004E  
