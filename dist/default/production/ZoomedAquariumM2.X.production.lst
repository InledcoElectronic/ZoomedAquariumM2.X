

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Tue Dec 05 14:30:56 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	text35,local,class=CODE,merge=1,delta=2
    21                           	psect	text54,local,class=CODE,merge=1,delta=2
    22                           	psect	text55,local,class=CODE,merge=1,delta=2
    23                           	psect	text56,local,class=CODE,merge=1,delta=2
    24                           	psect	text57,local,class=CODE,merge=1,delta=2
    25                           	psect	text58,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text69,local,class=CODE,merge=1,delta=2
    28                           	psect	text70,local,class=CODE,merge=1,delta=2
    29                           	psect	text74,local,class=CODE,merge=1,delta=2
    30                           	psect	text75,local,class=CODE,merge=1,delta=2
    31                           	psect	text99,local,class=CODE,merge=1,delta=2
    32                           	psect	text104,local,class=CODE,merge=1,delta=2
    33                           	psect	text105,local,class=CODE,merge=1,delta=2
    34                           	psect	text106,local,class=CODE,merge=1,delta=2
    35                           	psect	pa_nodes0,global,class=CODE,delta=2
    36                           	dabs	1,0x620,48
    37                           	dabs	1,0x5AB,69
    38                           	dabs	1,0x237B,0,_gLedPara
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 1.41
    42                           ; Generated 25/01/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F18345 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  0090                     	;# 
   113  0091                     	;# 
   114  0092                     	;# 
   115  0093                     	;# 
   116  0094                     	;# 
   117  0097                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  018C                     	;# 
   137  018D                     	;# 
   138  018E                     	;# 
   139  0197                     	;# 
   140  0199                     	;# 
   141  0199                     	;# 
   142  0199                     	;# 
   143  019A                     	;# 
   144  019A                     	;# 
   145  019A                     	;# 
   146  019B                     	;# 
   147  019B                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019C                     	;# 
   152  019C                     	;# 
   153  019C                     	;# 
   154  019D                     	;# 
   155  019D                     	;# 
   156  019D                     	;# 
   157  019E                     	;# 
   158  019E                     	;# 
   159  019E                     	;# 
   160  019F                     	;# 
   161  019F                     	;# 
   162  019F                     	;# 
   163  019F                     	;# 
   164  019F                     	;# 
   165  020C                     	;# 
   166  020D                     	;# 
   167  020E                     	;# 
   168  0211                     	;# 
   169  0211                     	;# 
   170  0212                     	;# 
   171  0212                     	;# 
   172  0213                     	;# 
   173  0213                     	;# 
   174  0214                     	;# 
   175  0214                     	;# 
   176  0215                     	;# 
   177  0215                     	;# 
   178  0215                     	;# 
   179  0215                     	;# 
   180  0216                     	;# 
   181  0216                     	;# 
   182  0217                     	;# 
   183  0217                     	;# 
   184  0219                     	;# 
   185  021A                     	;# 
   186  021B                     	;# 
   187  021C                     	;# 
   188  021D                     	;# 
   189  021D                     	;# 
   190  021E                     	;# 
   191  021F                     	;# 
   192  028C                     	;# 
   193  028D                     	;# 
   194  028E                     	;# 
   195  0291                     	;# 
   196  0291                     	;# 
   197  0292                     	;# 
   198  0293                     	;# 
   199  0294                     	;# 
   200  0295                     	;# 
   201  0295                     	;# 
   202  0296                     	;# 
   203  0297                     	;# 
   204  0298                     	;# 
   205  029F                     	;# 
   206  030C                     	;# 
   207  030D                     	;# 
   208  030E                     	;# 
   209  0311                     	;# 
   210  0311                     	;# 
   211  0312                     	;# 
   212  0313                     	;# 
   213  0314                     	;# 
   214  0315                     	;# 
   215  0315                     	;# 
   216  0316                     	;# 
   217  0317                     	;# 
   218  0318                     	;# 
   219  038C                     	;# 
   220  038D                     	;# 
   221  038E                     	;# 
   222  0391                     	;# 
   223  0392                     	;# 
   224  0393                     	;# 
   225  0394                     	;# 
   226  0395                     	;# 
   227  0396                     	;# 
   228  0397                     	;# 
   229  0398                     	;# 
   230  0399                     	;# 
   231  039A                     	;# 
   232  039C                     	;# 
   233  039D                     	;# 
   234  039E                     	;# 
   235  039F                     	;# 
   236  0411                     	;# 
   237  0411                     	;# 
   238  0412                     	;# 
   239  0413                     	;# 
   240  0414                     	;# 
   241  0415                     	;# 
   242  0416                     	;# 
   243  0417                     	;# 
   244  0418                     	;# 
   245  0418                     	;# 
   246  0419                     	;# 
   247  041A                     	;# 
   248  041B                     	;# 
   249  041C                     	;# 
   250  041D                     	;# 
   251  041E                     	;# 
   252  041F                     	;# 
   253  0498                     	;# 
   254  0498                     	;# 
   255  0499                     	;# 
   256  049A                     	;# 
   257  049B                     	;# 
   258  049B                     	;# 
   259  049C                     	;# 
   260  049D                     	;# 
   261  049E                     	;# 
   262  049F                     	;# 
   263  0617                     	;# 
   264  0618                     	;# 
   265  0619                     	;# 
   266  0619                     	;# 
   267  061A                     	;# 
   268  061B                     	;# 
   269  061C                     	;# 
   270  061C                     	;# 
   271  061F                     	;# 
   272  0691                     	;# 
   273  0692                     	;# 
   274  0693                     	;# 
   275  0694                     	;# 
   276  0695                     	;# 
   277  0696                     	;# 
   278  0697                     	;# 
   279  0698                     	;# 
   280  0699                     	;# 
   281  0711                     	;# 
   282  0712                     	;# 
   283  0713                     	;# 
   284  0714                     	;# 
   285  0715                     	;# 
   286  0716                     	;# 
   287  0717                     	;# 
   288  0718                     	;# 
   289  0719                     	;# 
   290  0891                     	;# 
   291  0891                     	;# 
   292  0891                     	;# 
   293  0891                     	;# 
   294  0891                     	;# 
   295  0891                     	;# 
   296  0892                     	;# 
   297  0892                     	;# 
   298  0892                     	;# 
   299  0893                     	;# 
   300  0893                     	;# 
   301  0893                     	;# 
   302  0893                     	;# 
   303  0893                     	;# 
   304  0893                     	;# 
   305  0894                     	;# 
   306  0894                     	;# 
   307  0894                     	;# 
   308  0895                     	;# 
   309  0895                     	;# 
   310  0895                     	;# 
   311  0896                     	;# 
   312  0896                     	;# 
   313  0896                     	;# 
   314  089B                     	;# 
   315  0911                     	;# 
   316  0912                     	;# 
   317  0913                     	;# 
   318  0914                     	;# 
   319  0915                     	;# 
   320  0916                     	;# 
   321  0918                     	;# 
   322  0919                     	;# 
   323  091A                     	;# 
   324  091B                     	;# 
   325  091C                     	;# 
   326  091D                     	;# 
   327  091E                     	;# 
   328  091F                     	;# 
   329  0E0F                     	;# 
   330  0E10                     	;# 
   331  0E11                     	;# 
   332  0E12                     	;# 
   333  0E13                     	;# 
   334  0E14                     	;# 
   335  0E15                     	;# 
   336  0E16                     	;# 
   337  0E17                     	;# 
   338  0E18                     	;# 
   339  0E19                     	;# 
   340  0E1A                     	;# 
   341  0E1B                     	;# 
   342  0E1C                     	;# 
   343  0E1D                     	;# 
   344  0E1E                     	;# 
   345  0E1F                     	;# 
   346  0E20                     	;# 
   347  0E21                     	;# 
   348  0E22                     	;# 
   349  0E24                     	;# 
   350  0E25                     	;# 
   351  0E28                     	;# 
   352  0E29                     	;# 
   353  0E2A                     	;# 
   354  0E2B                     	;# 
   355  0E2C                     	;# 
   356  0E2D                     	;# 
   357  0E2E                     	;# 
   358  0E2F                     	;# 
   359  0E90                     	;# 
   360  0E91                     	;# 
   361  0E92                     	;# 
   362  0E94                     	;# 
   363  0E95                     	;# 
   364  0E9C                     	;# 
   365  0E9D                     	;# 
   366  0E9E                     	;# 
   367  0E9F                     	;# 
   368  0EA0                     	;# 
   369  0EA1                     	;# 
   370  0EA2                     	;# 
   371  0EA3                     	;# 
   372  0EA4                     	;# 
   373  0EA5                     	;# 
   374  0EA6                     	;# 
   375  0EA7                     	;# 
   376  0F0F                     	;# 
   377  0F10                     	;# 
   378  0F11                     	;# 
   379  0F12                     	;# 
   380  0F13                     	;# 
   381  0F14                     	;# 
   382  0F15                     	;# 
   383  0F16                     	;# 
   384  0F17                     	;# 
   385  0F18                     	;# 
   386  0F19                     	;# 
   387  0F1A                     	;# 
   388  0F1B                     	;# 
   389  0F1C                     	;# 
   390  0F1D                     	;# 
   391  0F1E                     	;# 
   392  0F1F                     	;# 
   393  0F20                     	;# 
   394  0F21                     	;# 
   395  0F22                     	;# 
   396  0F23                     	;# 
   397  0F24                     	;# 
   398  0F25                     	;# 
   399  0F26                     	;# 
   400  0F27                     	;# 
   401  0F28                     	;# 
   402  0F29                     	;# 
   403  0F2A                     	;# 
   404  0F2B                     	;# 
   405  0F2C                     	;# 
   406  0F2D                     	;# 
   407  0F2E                     	;# 
   408  0F2F                     	;# 
   409  0F30                     	;# 
   410  0F31                     	;# 
   411  0F32                     	;# 
   412  0F33                     	;# 
   413  0F34                     	;# 
   414  0F35                     	;# 
   415  0F36                     	;# 
   416  0F37                     	;# 
   417  0FE4                     	;# 
   418  0FE5                     	;# 
   419  0FE6                     	;# 
   420  0FE7                     	;# 
   421  0FE8                     	;# 
   422  0FE9                     	;# 
   423  0FEA                     	;# 
   424  0FEB                     	;# 
   425  0FED                     	;# 
   426  0FEE                     	;# 
   427  0FEF                     	;# 
   428  0000                     	;# 
   429  0001                     	;# 
   430  0002                     	;# 
   431  0003                     	;# 
   432  0004                     	;# 
   433  0005                     	;# 
   434  0006                     	;# 
   435  0007                     	;# 
   436  0008                     	;# 
   437  0009                     	;# 
   438  000A                     	;# 
   439  000B                     	;# 
   440  000C                     	;# 
   441  000D                     	;# 
   442  000E                     	;# 
   443  0010                     	;# 
   444  0011                     	;# 
   445  0012                     	;# 
   446  0013                     	;# 
   447  0014                     	;# 
   448  0015                     	;# 
   449  0015                     	;# 
   450  0016                     	;# 
   451  0016                     	;# 
   452  0017                     	;# 
   453  0018                     	;# 
   454  0019                     	;# 
   455  0019                     	;# 
   456  001A                     	;# 
   457  001B                     	;# 
   458  001C                     	;# 
   459  001D                     	;# 
   460  001E                     	;# 
   461  001F                     	;# 
   462  008C                     	;# 
   463  008D                     	;# 
   464  008E                     	;# 
   465  0090                     	;# 
   466  0091                     	;# 
   467  0092                     	;# 
   468  0093                     	;# 
   469  0094                     	;# 
   470  0097                     	;# 
   471  009B                     	;# 
   472  009B                     	;# 
   473  009C                     	;# 
   474  009D                     	;# 
   475  009E                     	;# 
   476  009F                     	;# 
   477  010C                     	;# 
   478  010D                     	;# 
   479  010E                     	;# 
   480  0111                     	;# 
   481  0112                     	;# 
   482  0113                     	;# 
   483  0114                     	;# 
   484  0115                     	;# 
   485  0116                     	;# 
   486  0117                     	;# 
   487  0118                     	;# 
   488  0119                     	;# 
   489  018C                     	;# 
   490  018D                     	;# 
   491  018E                     	;# 
   492  0197                     	;# 
   493  0199                     	;# 
   494  0199                     	;# 
   495  0199                     	;# 
   496  019A                     	;# 
   497  019A                     	;# 
   498  019A                     	;# 
   499  019B                     	;# 
   500  019B                     	;# 
   501  019B                     	;# 
   502  019B                     	;# 
   503  019B                     	;# 
   504  019C                     	;# 
   505  019C                     	;# 
   506  019C                     	;# 
   507  019D                     	;# 
   508  019D                     	;# 
   509  019D                     	;# 
   510  019E                     	;# 
   511  019E                     	;# 
   512  019E                     	;# 
   513  019F                     	;# 
   514  019F                     	;# 
   515  019F                     	;# 
   516  019F                     	;# 
   517  019F                     	;# 
   518  020C                     	;# 
   519  020D                     	;# 
   520  020E                     	;# 
   521  0211                     	;# 
   522  0211                     	;# 
   523  0212                     	;# 
   524  0212                     	;# 
   525  0213                     	;# 
   526  0213                     	;# 
   527  0214                     	;# 
   528  0214                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0215                     	;# 
   533  0216                     	;# 
   534  0216                     	;# 
   535  0217                     	;# 
   536  0217                     	;# 
   537  0219                     	;# 
   538  021A                     	;# 
   539  021B                     	;# 
   540  021C                     	;# 
   541  021D                     	;# 
   542  021D                     	;# 
   543  021E                     	;# 
   544  021F                     	;# 
   545  028C                     	;# 
   546  028D                     	;# 
   547  028E                     	;# 
   548  0291                     	;# 
   549  0291                     	;# 
   550  0292                     	;# 
   551  0293                     	;# 
   552  0294                     	;# 
   553  0295                     	;# 
   554  0295                     	;# 
   555  0296                     	;# 
   556  0297                     	;# 
   557  0298                     	;# 
   558  029F                     	;# 
   559  030C                     	;# 
   560  030D                     	;# 
   561  030E                     	;# 
   562  0311                     	;# 
   563  0311                     	;# 
   564  0312                     	;# 
   565  0313                     	;# 
   566  0314                     	;# 
   567  0315                     	;# 
   568  0315                     	;# 
   569  0316                     	;# 
   570  0317                     	;# 
   571  0318                     	;# 
   572  038C                     	;# 
   573  038D                     	;# 
   574  038E                     	;# 
   575  0391                     	;# 
   576  0392                     	;# 
   577  0393                     	;# 
   578  0394                     	;# 
   579  0395                     	;# 
   580  0396                     	;# 
   581  0397                     	;# 
   582  0398                     	;# 
   583  0399                     	;# 
   584  039A                     	;# 
   585  039C                     	;# 
   586  039D                     	;# 
   587  039E                     	;# 
   588  039F                     	;# 
   589  0411                     	;# 
   590  0411                     	;# 
   591  0412                     	;# 
   592  0413                     	;# 
   593  0414                     	;# 
   594  0415                     	;# 
   595  0416                     	;# 
   596  0417                     	;# 
   597  0418                     	;# 
   598  0418                     	;# 
   599  0419                     	;# 
   600  041A                     	;# 
   601  041B                     	;# 
   602  041C                     	;# 
   603  041D                     	;# 
   604  041E                     	;# 
   605  041F                     	;# 
   606  0498                     	;# 
   607  0498                     	;# 
   608  0499                     	;# 
   609  049A                     	;# 
   610  049B                     	;# 
   611  049B                     	;# 
   612  049C                     	;# 
   613  049D                     	;# 
   614  049E                     	;# 
   615  049F                     	;# 
   616  0617                     	;# 
   617  0618                     	;# 
   618  0619                     	;# 
   619  0619                     	;# 
   620  061A                     	;# 
   621  061B                     	;# 
   622  061C                     	;# 
   623  061C                     	;# 
   624  061F                     	;# 
   625  0691                     	;# 
   626  0692                     	;# 
   627  0693                     	;# 
   628  0694                     	;# 
   629  0695                     	;# 
   630  0696                     	;# 
   631  0697                     	;# 
   632  0698                     	;# 
   633  0699                     	;# 
   634  0711                     	;# 
   635  0712                     	;# 
   636  0713                     	;# 
   637  0714                     	;# 
   638  0715                     	;# 
   639  0716                     	;# 
   640  0717                     	;# 
   641  0718                     	;# 
   642  0719                     	;# 
   643  0891                     	;# 
   644  0891                     	;# 
   645  0891                     	;# 
   646  0891                     	;# 
   647  0891                     	;# 
   648  0891                     	;# 
   649  0892                     	;# 
   650  0892                     	;# 
   651  0892                     	;# 
   652  0893                     	;# 
   653  0893                     	;# 
   654  0893                     	;# 
   655  0893                     	;# 
   656  0893                     	;# 
   657  0893                     	;# 
   658  0894                     	;# 
   659  0894                     	;# 
   660  0894                     	;# 
   661  0895                     	;# 
   662  0895                     	;# 
   663  0895                     	;# 
   664  0896                     	;# 
   665  0896                     	;# 
   666  0896                     	;# 
   667  089B                     	;# 
   668  0911                     	;# 
   669  0912                     	;# 
   670  0913                     	;# 
   671  0914                     	;# 
   672  0915                     	;# 
   673  0916                     	;# 
   674  0918                     	;# 
   675  0919                     	;# 
   676  091A                     	;# 
   677  091B                     	;# 
   678  091C                     	;# 
   679  091D                     	;# 
   680  091E                     	;# 
   681  091F                     	;# 
   682  0E0F                     	;# 
   683  0E10                     	;# 
   684  0E11                     	;# 
   685  0E12                     	;# 
   686  0E13                     	;# 
   687  0E14                     	;# 
   688  0E15                     	;# 
   689  0E16                     	;# 
   690  0E17                     	;# 
   691  0E18                     	;# 
   692  0E19                     	;# 
   693  0E1A                     	;# 
   694  0E1B                     	;# 
   695  0E1C                     	;# 
   696  0E1D                     	;# 
   697  0E1E                     	;# 
   698  0E1F                     	;# 
   699  0E20                     	;# 
   700  0E21                     	;# 
   701  0E22                     	;# 
   702  0E24                     	;# 
   703  0E25                     	;# 
   704  0E28                     	;# 
   705  0E29                     	;# 
   706  0E2A                     	;# 
   707  0E2B                     	;# 
   708  0E2C                     	;# 
   709  0E2D                     	;# 
   710  0E2E                     	;# 
   711  0E2F                     	;# 
   712  0E90                     	;# 
   713  0E91                     	;# 
   714  0E92                     	;# 
   715  0E94                     	;# 
   716  0E95                     	;# 
   717  0E9C                     	;# 
   718  0E9D                     	;# 
   719  0E9E                     	;# 
   720  0E9F                     	;# 
   721  0EA0                     	;# 
   722  0EA1                     	;# 
   723  0EA2                     	;# 
   724  0EA3                     	;# 
   725  0EA4                     	;# 
   726  0EA5                     	;# 
   727  0EA6                     	;# 
   728  0EA7                     	;# 
   729  0F0F                     	;# 
   730  0F10                     	;# 
   731  0F11                     	;# 
   732  0F12                     	;# 
   733  0F13                     	;# 
   734  0F14                     	;# 
   735  0F15                     	;# 
   736  0F16                     	;# 
   737  0F17                     	;# 
   738  0F18                     	;# 
   739  0F19                     	;# 
   740  0F1A                     	;# 
   741  0F1B                     	;# 
   742  0F1C                     	;# 
   743  0F1D                     	;# 
   744  0F1E                     	;# 
   745  0F1F                     	;# 
   746  0F20                     	;# 
   747  0F21                     	;# 
   748  0F22                     	;# 
   749  0F23                     	;# 
   750  0F24                     	;# 
   751  0F25                     	;# 
   752  0F26                     	;# 
   753  0F27                     	;# 
   754  0F28                     	;# 
   755  0F29                     	;# 
   756  0F2A                     	;# 
   757  0F2B                     	;# 
   758  0F2C                     	;# 
   759  0F2D                     	;# 
   760  0F2E                     	;# 
   761  0F2F                     	;# 
   762  0F30                     	;# 
   763  0F31                     	;# 
   764  0F32                     	;# 
   765  0F33                     	;# 
   766  0F34                     	;# 
   767  0F35                     	;# 
   768  0F36                     	;# 
   769  0F37                     	;# 
   770  0FE4                     	;# 
   771  0FE5                     	;# 
   772  0FE6                     	;# 
   773  0FE7                     	;# 
   774  0FE8                     	;# 
   775  0FE9                     	;# 
   776  0FEA                     	;# 
   777  0FEB                     	;# 
   778  0FED                     	;# 
   779  0FEE                     	;# 
   780  0FEF                     	;# 
   781  0000                     	;# 
   782  0001                     	;# 
   783  0002                     	;# 
   784  0003                     	;# 
   785  0004                     	;# 
   786  0005                     	;# 
   787  0006                     	;# 
   788  0007                     	;# 
   789  0008                     	;# 
   790  0009                     	;# 
   791  000A                     	;# 
   792  000B                     	;# 
   793  000C                     	;# 
   794  000D                     	;# 
   795  000E                     	;# 
   796  0010                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0013                     	;# 
   800  0014                     	;# 
   801  0015                     	;# 
   802  0015                     	;# 
   803  0016                     	;# 
   804  0016                     	;# 
   805  0017                     	;# 
   806  0018                     	;# 
   807  0019                     	;# 
   808  0019                     	;# 
   809  001A                     	;# 
   810  001B                     	;# 
   811  001C                     	;# 
   812  001D                     	;# 
   813  001E                     	;# 
   814  001F                     	;# 
   815  008C                     	;# 
   816  008D                     	;# 
   817  008E                     	;# 
   818  0090                     	;# 
   819  0091                     	;# 
   820  0092                     	;# 
   821  0093                     	;# 
   822  0094                     	;# 
   823  0097                     	;# 
   824  009B                     	;# 
   825  009B                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009E                     	;# 
   829  009F                     	;# 
   830  010C                     	;# 
   831  010D                     	;# 
   832  010E                     	;# 
   833  0111                     	;# 
   834  0112                     	;# 
   835  0113                     	;# 
   836  0114                     	;# 
   837  0115                     	;# 
   838  0116                     	;# 
   839  0117                     	;# 
   840  0118                     	;# 
   841  0119                     	;# 
   842  018C                     	;# 
   843  018D                     	;# 
   844  018E                     	;# 
   845  0197                     	;# 
   846  0199                     	;# 
   847  0199                     	;# 
   848  0199                     	;# 
   849  019A                     	;# 
   850  019A                     	;# 
   851  019A                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019C                     	;# 
   858  019C                     	;# 
   859  019C                     	;# 
   860  019D                     	;# 
   861  019D                     	;# 
   862  019D                     	;# 
   863  019E                     	;# 
   864  019E                     	;# 
   865  019E                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  019F                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  020C                     	;# 
   872  020D                     	;# 
   873  020E                     	;# 
   874  0211                     	;# 
   875  0211                     	;# 
   876  0212                     	;# 
   877  0212                     	;# 
   878  0213                     	;# 
   879  0213                     	;# 
   880  0214                     	;# 
   881  0214                     	;# 
   882  0215                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0216                     	;# 
   887  0216                     	;# 
   888  0217                     	;# 
   889  0217                     	;# 
   890  0219                     	;# 
   891  021A                     	;# 
   892  021B                     	;# 
   893  021C                     	;# 
   894  021D                     	;# 
   895  021D                     	;# 
   896  021E                     	;# 
   897  021F                     	;# 
   898  028C                     	;# 
   899  028D                     	;# 
   900  028E                     	;# 
   901  0291                     	;# 
   902  0291                     	;# 
   903  0292                     	;# 
   904  0293                     	;# 
   905  0294                     	;# 
   906  0295                     	;# 
   907  0295                     	;# 
   908  0296                     	;# 
   909  0297                     	;# 
   910  0298                     	;# 
   911  029F                     	;# 
   912  030C                     	;# 
   913  030D                     	;# 
   914  030E                     	;# 
   915  0311                     	;# 
   916  0311                     	;# 
   917  0312                     	;# 
   918  0313                     	;# 
   919  0314                     	;# 
   920  0315                     	;# 
   921  0315                     	;# 
   922  0316                     	;# 
   923  0317                     	;# 
   924  0318                     	;# 
   925  038C                     	;# 
   926  038D                     	;# 
   927  038E                     	;# 
   928  0391                     	;# 
   929  0392                     	;# 
   930  0393                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0397                     	;# 
   935  0398                     	;# 
   936  0399                     	;# 
   937  039A                     	;# 
   938  039C                     	;# 
   939  039D                     	;# 
   940  039E                     	;# 
   941  039F                     	;# 
   942  0411                     	;# 
   943  0411                     	;# 
   944  0412                     	;# 
   945  0413                     	;# 
   946  0414                     	;# 
   947  0415                     	;# 
   948  0416                     	;# 
   949  0417                     	;# 
   950  0418                     	;# 
   951  0418                     	;# 
   952  0419                     	;# 
   953  041A                     	;# 
   954  041B                     	;# 
   955  041C                     	;# 
   956  041D                     	;# 
   957  041E                     	;# 
   958  041F                     	;# 
   959  0498                     	;# 
   960  0498                     	;# 
   961  0499                     	;# 
   962  049A                     	;# 
   963  049B                     	;# 
   964  049B                     	;# 
   965  049C                     	;# 
   966  049D                     	;# 
   967  049E                     	;# 
   968  049F                     	;# 
   969  0617                     	;# 
   970  0618                     	;# 
   971  0619                     	;# 
   972  0619                     	;# 
   973  061A                     	;# 
   974  061B                     	;# 
   975  061C                     	;# 
   976  061C                     	;# 
   977  061F                     	;# 
   978  0691                     	;# 
   979  0692                     	;# 
   980  0693                     	;# 
   981  0694                     	;# 
   982  0695                     	;# 
   983  0696                     	;# 
   984  0697                     	;# 
   985  0698                     	;# 
   986  0699                     	;# 
   987  0711                     	;# 
   988  0712                     	;# 
   989  0713                     	;# 
   990  0714                     	;# 
   991  0715                     	;# 
   992  0716                     	;# 
   993  0717                     	;# 
   994  0718                     	;# 
   995  0719                     	;# 
   996  0891                     	;# 
   997  0891                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0892                     	;# 
  1003  0892                     	;# 
  1004  0892                     	;# 
  1005  0893                     	;# 
  1006  0893                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0894                     	;# 
  1012  0894                     	;# 
  1013  0894                     	;# 
  1014  0895                     	;# 
  1015  0895                     	;# 
  1016  0895                     	;# 
  1017  0896                     	;# 
  1018  0896                     	;# 
  1019  0896                     	;# 
  1020  089B                     	;# 
  1021  0911                     	;# 
  1022  0912                     	;# 
  1023  0913                     	;# 
  1024  0914                     	;# 
  1025  0915                     	;# 
  1026  0916                     	;# 
  1027  0918                     	;# 
  1028  0919                     	;# 
  1029  091A                     	;# 
  1030  091B                     	;# 
  1031  091C                     	;# 
  1032  091D                     	;# 
  1033  091E                     	;# 
  1034  091F                     	;# 
  1035  0E0F                     	;# 
  1036  0E10                     	;# 
  1037  0E11                     	;# 
  1038  0E12                     	;# 
  1039  0E13                     	;# 
  1040  0E14                     	;# 
  1041  0E15                     	;# 
  1042  0E16                     	;# 
  1043  0E17                     	;# 
  1044  0E18                     	;# 
  1045  0E19                     	;# 
  1046  0E1A                     	;# 
  1047  0E1B                     	;# 
  1048  0E1C                     	;# 
  1049  0E1D                     	;# 
  1050  0E1E                     	;# 
  1051  0E1F                     	;# 
  1052  0E20                     	;# 
  1053  0E21                     	;# 
  1054  0E22                     	;# 
  1055  0E24                     	;# 
  1056  0E25                     	;# 
  1057  0E28                     	;# 
  1058  0E29                     	;# 
  1059  0E2A                     	;# 
  1060  0E2B                     	;# 
  1061  0E2C                     	;# 
  1062  0E2D                     	;# 
  1063  0E2E                     	;# 
  1064  0E2F                     	;# 
  1065  0E90                     	;# 
  1066  0E91                     	;# 
  1067  0E92                     	;# 
  1068  0E94                     	;# 
  1069  0E95                     	;# 
  1070  0E9C                     	;# 
  1071  0E9D                     	;# 
  1072  0E9E                     	;# 
  1073  0E9F                     	;# 
  1074  0EA0                     	;# 
  1075  0EA1                     	;# 
  1076  0EA2                     	;# 
  1077  0EA3                     	;# 
  1078  0EA4                     	;# 
  1079  0EA5                     	;# 
  1080  0EA6                     	;# 
  1081  0EA7                     	;# 
  1082  0F0F                     	;# 
  1083  0F10                     	;# 
  1084  0F11                     	;# 
  1085  0F12                     	;# 
  1086  0F13                     	;# 
  1087  0F14                     	;# 
  1088  0F15                     	;# 
  1089  0F16                     	;# 
  1090  0F17                     	;# 
  1091  0F18                     	;# 
  1092  0F19                     	;# 
  1093  0F1A                     	;# 
  1094  0F1B                     	;# 
  1095  0F1C                     	;# 
  1096  0F1D                     	;# 
  1097  0F1E                     	;# 
  1098  0F1F                     	;# 
  1099  0F20                     	;# 
  1100  0F21                     	;# 
  1101  0F22                     	;# 
  1102  0F23                     	;# 
  1103  0F24                     	;# 
  1104  0F25                     	;# 
  1105  0F26                     	;# 
  1106  0F27                     	;# 
  1107  0F28                     	;# 
  1108  0F29                     	;# 
  1109  0F2A                     	;# 
  1110  0F2B                     	;# 
  1111  0F2C                     	;# 
  1112  0F2D                     	;# 
  1113  0F2E                     	;# 
  1114  0F2F                     	;# 
  1115  0F30                     	;# 
  1116  0F31                     	;# 
  1117  0F32                     	;# 
  1118  0F33                     	;# 
  1119  0F34                     	;# 
  1120  0F35                     	;# 
  1121  0F36                     	;# 
  1122  0F37                     	;# 
  1123  0FE4                     	;# 
  1124  0FE5                     	;# 
  1125  0FE6                     	;# 
  1126  0FE7                     	;# 
  1127  0FE8                     	;# 
  1128  0FE9                     	;# 
  1129  0FEA                     	;# 
  1130  0FEB                     	;# 
  1131  0FED                     	;# 
  1132  0FEE                     	;# 
  1133  0FEF                     	;# 
  1134  0000                     	;# 
  1135  0001                     	;# 
  1136  0002                     	;# 
  1137  0003                     	;# 
  1138  0004                     	;# 
  1139  0005                     	;# 
  1140  0006                     	;# 
  1141  0007                     	;# 
  1142  0008                     	;# 
  1143  0009                     	;# 
  1144  000A                     	;# 
  1145  000B                     	;# 
  1146  000C                     	;# 
  1147  000D                     	;# 
  1148  000E                     	;# 
  1149  0010                     	;# 
  1150  0011                     	;# 
  1151  0012                     	;# 
  1152  0013                     	;# 
  1153  0014                     	;# 
  1154  0015                     	;# 
  1155  0015                     	;# 
  1156  0016                     	;# 
  1157  0016                     	;# 
  1158  0017                     	;# 
  1159  0018                     	;# 
  1160  0019                     	;# 
  1161  0019                     	;# 
  1162  001A                     	;# 
  1163  001B                     	;# 
  1164  001C                     	;# 
  1165  001D                     	;# 
  1166  001E                     	;# 
  1167  001F                     	;# 
  1168  008C                     	;# 
  1169  008D                     	;# 
  1170  008E                     	;# 
  1171  0090                     	;# 
  1172  0091                     	;# 
  1173  0092                     	;# 
  1174  0093                     	;# 
  1175  0094                     	;# 
  1176  0097                     	;# 
  1177  009B                     	;# 
  1178  009B                     	;# 
  1179  009C                     	;# 
  1180  009D                     	;# 
  1181  009E                     	;# 
  1182  009F                     	;# 
  1183  010C                     	;# 
  1184  010D                     	;# 
  1185  010E                     	;# 
  1186  0111                     	;# 
  1187  0112                     	;# 
  1188  0113                     	;# 
  1189  0114                     	;# 
  1190  0115                     	;# 
  1191  0116                     	;# 
  1192  0117                     	;# 
  1193  0118                     	;# 
  1194  0119                     	;# 
  1195  018C                     	;# 
  1196  018D                     	;# 
  1197  018E                     	;# 
  1198  0197                     	;# 
  1199  0199                     	;# 
  1200  0199                     	;# 
  1201  0199                     	;# 
  1202  019A                     	;# 
  1203  019A                     	;# 
  1204  019A                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019C                     	;# 
  1211  019C                     	;# 
  1212  019C                     	;# 
  1213  019D                     	;# 
  1214  019D                     	;# 
  1215  019D                     	;# 
  1216  019E                     	;# 
  1217  019E                     	;# 
  1218  019E                     	;# 
  1219  019F                     	;# 
  1220  019F                     	;# 
  1221  019F                     	;# 
  1222  019F                     	;# 
  1223  019F                     	;# 
  1224  020C                     	;# 
  1225  020D                     	;# 
  1226  020E                     	;# 
  1227  0211                     	;# 
  1228  0211                     	;# 
  1229  0212                     	;# 
  1230  0212                     	;# 
  1231  0213                     	;# 
  1232  0213                     	;# 
  1233  0214                     	;# 
  1234  0214                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0216                     	;# 
  1240  0216                     	;# 
  1241  0217                     	;# 
  1242  0217                     	;# 
  1243  0219                     	;# 
  1244  021A                     	;# 
  1245  021B                     	;# 
  1246  021C                     	;# 
  1247  021D                     	;# 
  1248  021D                     	;# 
  1249  021E                     	;# 
  1250  021F                     	;# 
  1251  028C                     	;# 
  1252  028D                     	;# 
  1253  028E                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0294                     	;# 
  1259  0295                     	;# 
  1260  0295                     	;# 
  1261  0296                     	;# 
  1262  0297                     	;# 
  1263  0298                     	;# 
  1264  029F                     	;# 
  1265  030C                     	;# 
  1266  030D                     	;# 
  1267  030E                     	;# 
  1268  0311                     	;# 
  1269  0311                     	;# 
  1270  0312                     	;# 
  1271  0313                     	;# 
  1272  0314                     	;# 
  1273  0315                     	;# 
  1274  0315                     	;# 
  1275  0316                     	;# 
  1276  0317                     	;# 
  1277  0318                     	;# 
  1278  038C                     	;# 
  1279  038D                     	;# 
  1280  038E                     	;# 
  1281  0391                     	;# 
  1282  0392                     	;# 
  1283  0393                     	;# 
  1284  0394                     	;# 
  1285  0395                     	;# 
  1286  0396                     	;# 
  1287  0397                     	;# 
  1288  0398                     	;# 
  1289  0399                     	;# 
  1290  039A                     	;# 
  1291  039C                     	;# 
  1292  039D                     	;# 
  1293  039E                     	;# 
  1294  039F                     	;# 
  1295  0411                     	;# 
  1296  0411                     	;# 
  1297  0412                     	;# 
  1298  0413                     	;# 
  1299  0414                     	;# 
  1300  0415                     	;# 
  1301  0416                     	;# 
  1302  0417                     	;# 
  1303  0418                     	;# 
  1304  0418                     	;# 
  1305  0419                     	;# 
  1306  041A                     	;# 
  1307  041B                     	;# 
  1308  041C                     	;# 
  1309  041D                     	;# 
  1310  041E                     	;# 
  1311  041F                     	;# 
  1312  0498                     	;# 
  1313  0498                     	;# 
  1314  0499                     	;# 
  1315  049A                     	;# 
  1316  049B                     	;# 
  1317  049B                     	;# 
  1318  049C                     	;# 
  1319  049D                     	;# 
  1320  049E                     	;# 
  1321  049F                     	;# 
  1322  0617                     	;# 
  1323  0618                     	;# 
  1324  0619                     	;# 
  1325  0619                     	;# 
  1326  061A                     	;# 
  1327  061B                     	;# 
  1328  061C                     	;# 
  1329  061C                     	;# 
  1330  061F                     	;# 
  1331  0691                     	;# 
  1332  0692                     	;# 
  1333  0693                     	;# 
  1334  0694                     	;# 
  1335  0695                     	;# 
  1336  0696                     	;# 
  1337  0697                     	;# 
  1338  0698                     	;# 
  1339  0699                     	;# 
  1340  0711                     	;# 
  1341  0712                     	;# 
  1342  0713                     	;# 
  1343  0714                     	;# 
  1344  0715                     	;# 
  1345  0716                     	;# 
  1346  0717                     	;# 
  1347  0718                     	;# 
  1348  0719                     	;# 
  1349  0891                     	;# 
  1350  0891                     	;# 
  1351  0891                     	;# 
  1352  0891                     	;# 
  1353  0891                     	;# 
  1354  0891                     	;# 
  1355  0892                     	;# 
  1356  0892                     	;# 
  1357  0892                     	;# 
  1358  0893                     	;# 
  1359  0893                     	;# 
  1360  0893                     	;# 
  1361  0893                     	;# 
  1362  0893                     	;# 
  1363  0893                     	;# 
  1364  0894                     	;# 
  1365  0894                     	;# 
  1366  0894                     	;# 
  1367  0895                     	;# 
  1368  0895                     	;# 
  1369  0895                     	;# 
  1370  0896                     	;# 
  1371  0896                     	;# 
  1372  0896                     	;# 
  1373  089B                     	;# 
  1374  0911                     	;# 
  1375  0912                     	;# 
  1376  0913                     	;# 
  1377  0914                     	;# 
  1378  0915                     	;# 
  1379  0916                     	;# 
  1380  0918                     	;# 
  1381  0919                     	;# 
  1382  091A                     	;# 
  1383  091B                     	;# 
  1384  091C                     	;# 
  1385  091D                     	;# 
  1386  091E                     	;# 
  1387  091F                     	;# 
  1388  0E0F                     	;# 
  1389  0E10                     	;# 
  1390  0E11                     	;# 
  1391  0E12                     	;# 
  1392  0E13                     	;# 
  1393  0E14                     	;# 
  1394  0E15                     	;# 
  1395  0E16                     	;# 
  1396  0E17                     	;# 
  1397  0E18                     	;# 
  1398  0E19                     	;# 
  1399  0E1A                     	;# 
  1400  0E1B                     	;# 
  1401  0E1C                     	;# 
  1402  0E1D                     	;# 
  1403  0E1E                     	;# 
  1404  0E1F                     	;# 
  1405  0E20                     	;# 
  1406  0E21                     	;# 
  1407  0E22                     	;# 
  1408  0E24                     	;# 
  1409  0E25                     	;# 
  1410  0E28                     	;# 
  1411  0E29                     	;# 
  1412  0E2A                     	;# 
  1413  0E2B                     	;# 
  1414  0E2C                     	;# 
  1415  0E2D                     	;# 
  1416  0E2E                     	;# 
  1417  0E2F                     	;# 
  1418  0E90                     	;# 
  1419  0E91                     	;# 
  1420  0E92                     	;# 
  1421  0E94                     	;# 
  1422  0E95                     	;# 
  1423  0E9C                     	;# 
  1424  0E9D                     	;# 
  1425  0E9E                     	;# 
  1426  0E9F                     	;# 
  1427  0EA0                     	;# 
  1428  0EA1                     	;# 
  1429  0EA2                     	;# 
  1430  0EA3                     	;# 
  1431  0EA4                     	;# 
  1432  0EA5                     	;# 
  1433  0EA6                     	;# 
  1434  0EA7                     	;# 
  1435  0F0F                     	;# 
  1436  0F10                     	;# 
  1437  0F11                     	;# 
  1438  0F12                     	;# 
  1439  0F13                     	;# 
  1440  0F14                     	;# 
  1441  0F15                     	;# 
  1442  0F16                     	;# 
  1443  0F17                     	;# 
  1444  0F18                     	;# 
  1445  0F19                     	;# 
  1446  0F1A                     	;# 
  1447  0F1B                     	;# 
  1448  0F1C                     	;# 
  1449  0F1D                     	;# 
  1450  0F1E                     	;# 
  1451  0F1F                     	;# 
  1452  0F20                     	;# 
  1453  0F21                     	;# 
  1454  0F22                     	;# 
  1455  0F23                     	;# 
  1456  0F24                     	;# 
  1457  0F25                     	;# 
  1458  0F26                     	;# 
  1459  0F27                     	;# 
  1460  0F28                     	;# 
  1461  0F29                     	;# 
  1462  0F2A                     	;# 
  1463  0F2B                     	;# 
  1464  0F2C                     	;# 
  1465  0F2D                     	;# 
  1466  0F2E                     	;# 
  1467  0F2F                     	;# 
  1468  0F30                     	;# 
  1469  0F31                     	;# 
  1470  0F32                     	;# 
  1471  0F33                     	;# 
  1472  0F34                     	;# 
  1473  0F35                     	;# 
  1474  0F36                     	;# 
  1475  0F37                     	;# 
  1476  0FE4                     	;# 
  1477  0FE5                     	;# 
  1478  0FE6                     	;# 
  1479  0FE7                     	;# 
  1480  0FE8                     	;# 
  1481  0FE9                     	;# 
  1482  0FEA                     	;# 
  1483  0FEB                     	;# 
  1484  0FED                     	;# 
  1485  0FEE                     	;# 
  1486  0FEF                     	;# 
  1487  0000                     	;# 
  1488  0001                     	;# 
  1489  0002                     	;# 
  1490  0003                     	;# 
  1491  0004                     	;# 
  1492  0005                     	;# 
  1493  0006                     	;# 
  1494  0007                     	;# 
  1495  0008                     	;# 
  1496  0009                     	;# 
  1497  000A                     	;# 
  1498  000B                     	;# 
  1499  000C                     	;# 
  1500  000D                     	;# 
  1501  000E                     	;# 
  1502  0010                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0013                     	;# 
  1506  0014                     	;# 
  1507  0015                     	;# 
  1508  0015                     	;# 
  1509  0016                     	;# 
  1510  0016                     	;# 
  1511  0017                     	;# 
  1512  0018                     	;# 
  1513  0019                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  001D                     	;# 
  1519  001E                     	;# 
  1520  001F                     	;# 
  1521  008C                     	;# 
  1522  008D                     	;# 
  1523  008E                     	;# 
  1524  0090                     	;# 
  1525  0091                     	;# 
  1526  0092                     	;# 
  1527  0093                     	;# 
  1528  0094                     	;# 
  1529  0097                     	;# 
  1530  009B                     	;# 
  1531  009B                     	;# 
  1532  009C                     	;# 
  1533  009D                     	;# 
  1534  009E                     	;# 
  1535  009F                     	;# 
  1536  010C                     	;# 
  1537  010D                     	;# 
  1538  010E                     	;# 
  1539  0111                     	;# 
  1540  0112                     	;# 
  1541  0113                     	;# 
  1542  0114                     	;# 
  1543  0115                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  0118                     	;# 
  1547  0119                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  0199                     	;# 
  1554  0199                     	;# 
  1555  019A                     	;# 
  1556  019A                     	;# 
  1557  019A                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019C                     	;# 
  1566  019D                     	;# 
  1567  019D                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019E                     	;# 
  1571  019E                     	;# 
  1572  019F                     	;# 
  1573  019F                     	;# 
  1574  019F                     	;# 
  1575  019F                     	;# 
  1576  019F                     	;# 
  1577  020C                     	;# 
  1578  020D                     	;# 
  1579  020E                     	;# 
  1580  0211                     	;# 
  1581  0211                     	;# 
  1582  0212                     	;# 
  1583  0212                     	;# 
  1584  0213                     	;# 
  1585  0213                     	;# 
  1586  0214                     	;# 
  1587  0214                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0216                     	;# 
  1593  0216                     	;# 
  1594  0217                     	;# 
  1595  0217                     	;# 
  1596  0219                     	;# 
  1597  021A                     	;# 
  1598  021B                     	;# 
  1599  021C                     	;# 
  1600  021D                     	;# 
  1601  021D                     	;# 
  1602  021E                     	;# 
  1603  021F                     	;# 
  1604  028C                     	;# 
  1605  028D                     	;# 
  1606  028E                     	;# 
  1607  0291                     	;# 
  1608  0291                     	;# 
  1609  0292                     	;# 
  1610  0293                     	;# 
  1611  0294                     	;# 
  1612  0295                     	;# 
  1613  0295                     	;# 
  1614  0296                     	;# 
  1615  0297                     	;# 
  1616  0298                     	;# 
  1617  029F                     	;# 
  1618  030C                     	;# 
  1619  030D                     	;# 
  1620  030E                     	;# 
  1621  0311                     	;# 
  1622  0311                     	;# 
  1623  0312                     	;# 
  1624  0313                     	;# 
  1625  0314                     	;# 
  1626  0315                     	;# 
  1627  0315                     	;# 
  1628  0316                     	;# 
  1629  0317                     	;# 
  1630  0318                     	;# 
  1631  038C                     	;# 
  1632  038D                     	;# 
  1633  038E                     	;# 
  1634  0391                     	;# 
  1635  0392                     	;# 
  1636  0393                     	;# 
  1637  0394                     	;# 
  1638  0395                     	;# 
  1639  0396                     	;# 
  1640  0397                     	;# 
  1641  0398                     	;# 
  1642  0399                     	;# 
  1643  039A                     	;# 
  1644  039C                     	;# 
  1645  039D                     	;# 
  1646  039E                     	;# 
  1647  039F                     	;# 
  1648  0411                     	;# 
  1649  0411                     	;# 
  1650  0412                     	;# 
  1651  0413                     	;# 
  1652  0414                     	;# 
  1653  0415                     	;# 
  1654  0416                     	;# 
  1655  0417                     	;# 
  1656  0418                     	;# 
  1657  0418                     	;# 
  1658  0419                     	;# 
  1659  041A                     	;# 
  1660  041B                     	;# 
  1661  041C                     	;# 
  1662  041D                     	;# 
  1663  041E                     	;# 
  1664  041F                     	;# 
  1665  0498                     	;# 
  1666  0498                     	;# 
  1667  0499                     	;# 
  1668  049A                     	;# 
  1669  049B                     	;# 
  1670  049B                     	;# 
  1671  049C                     	;# 
  1672  049D                     	;# 
  1673  049E                     	;# 
  1674  049F                     	;# 
  1675  0617                     	;# 
  1676  0618                     	;# 
  1677  0619                     	;# 
  1678  0619                     	;# 
  1679  061A                     	;# 
  1680  061B                     	;# 
  1681  061C                     	;# 
  1682  061C                     	;# 
  1683  061F                     	;# 
  1684  0691                     	;# 
  1685  0692                     	;# 
  1686  0693                     	;# 
  1687  0694                     	;# 
  1688  0695                     	;# 
  1689  0696                     	;# 
  1690  0697                     	;# 
  1691  0698                     	;# 
  1692  0699                     	;# 
  1693  0711                     	;# 
  1694  0712                     	;# 
  1695  0713                     	;# 
  1696  0714                     	;# 
  1697  0715                     	;# 
  1698  0716                     	;# 
  1699  0717                     	;# 
  1700  0718                     	;# 
  1701  0719                     	;# 
  1702  0891                     	;# 
  1703  0891                     	;# 
  1704  0891                     	;# 
  1705  0891                     	;# 
  1706  0891                     	;# 
  1707  0891                     	;# 
  1708  0892                     	;# 
  1709  0892                     	;# 
  1710  0892                     	;# 
  1711  0893                     	;# 
  1712  0893                     	;# 
  1713  0893                     	;# 
  1714  0893                     	;# 
  1715  0893                     	;# 
  1716  0893                     	;# 
  1717  0894                     	;# 
  1718  0894                     	;# 
  1719  0894                     	;# 
  1720  0895                     	;# 
  1721  0895                     	;# 
  1722  0895                     	;# 
  1723  0896                     	;# 
  1724  0896                     	;# 
  1725  0896                     	;# 
  1726  089B                     	;# 
  1727  0911                     	;# 
  1728  0912                     	;# 
  1729  0913                     	;# 
  1730  0914                     	;# 
  1731  0915                     	;# 
  1732  0916                     	;# 
  1733  0918                     	;# 
  1734  0919                     	;# 
  1735  091A                     	;# 
  1736  091B                     	;# 
  1737  091C                     	;# 
  1738  091D                     	;# 
  1739  091E                     	;# 
  1740  091F                     	;# 
  1741  0E0F                     	;# 
  1742  0E10                     	;# 
  1743  0E11                     	;# 
  1744  0E12                     	;# 
  1745  0E13                     	;# 
  1746  0E14                     	;# 
  1747  0E15                     	;# 
  1748  0E16                     	;# 
  1749  0E17                     	;# 
  1750  0E18                     	;# 
  1751  0E19                     	;# 
  1752  0E1A                     	;# 
  1753  0E1B                     	;# 
  1754  0E1C                     	;# 
  1755  0E1D                     	;# 
  1756  0E1E                     	;# 
  1757  0E1F                     	;# 
  1758  0E20                     	;# 
  1759  0E21                     	;# 
  1760  0E22                     	;# 
  1761  0E24                     	;# 
  1762  0E25                     	;# 
  1763  0E28                     	;# 
  1764  0E29                     	;# 
  1765  0E2A                     	;# 
  1766  0E2B                     	;# 
  1767  0E2C                     	;# 
  1768  0E2D                     	;# 
  1769  0E2E                     	;# 
  1770  0E2F                     	;# 
  1771  0E90                     	;# 
  1772  0E91                     	;# 
  1773  0E92                     	;# 
  1774  0E94                     	;# 
  1775  0E95                     	;# 
  1776  0E9C                     	;# 
  1777  0E9D                     	;# 
  1778  0E9E                     	;# 
  1779  0E9F                     	;# 
  1780  0EA0                     	;# 
  1781  0EA1                     	;# 
  1782  0EA2                     	;# 
  1783  0EA3                     	;# 
  1784  0EA4                     	;# 
  1785  0EA5                     	;# 
  1786  0EA6                     	;# 
  1787  0EA7                     	;# 
  1788  0F0F                     	;# 
  1789  0F10                     	;# 
  1790  0F11                     	;# 
  1791  0F12                     	;# 
  1792  0F13                     	;# 
  1793  0F14                     	;# 
  1794  0F15                     	;# 
  1795  0F16                     	;# 
  1796  0F17                     	;# 
  1797  0F18                     	;# 
  1798  0F19                     	;# 
  1799  0F1A                     	;# 
  1800  0F1B                     	;# 
  1801  0F1C                     	;# 
  1802  0F1D                     	;# 
  1803  0F1E                     	;# 
  1804  0F1F                     	;# 
  1805  0F20                     	;# 
  1806  0F21                     	;# 
  1807  0F22                     	;# 
  1808  0F23                     	;# 
  1809  0F24                     	;# 
  1810  0F25                     	;# 
  1811  0F26                     	;# 
  1812  0F27                     	;# 
  1813  0F28                     	;# 
  1814  0F29                     	;# 
  1815  0F2A                     	;# 
  1816  0F2B                     	;# 
  1817  0F2C                     	;# 
  1818  0F2D                     	;# 
  1819  0F2E                     	;# 
  1820  0F2F                     	;# 
  1821  0F30                     	;# 
  1822  0F31                     	;# 
  1823  0F32                     	;# 
  1824  0F33                     	;# 
  1825  0F34                     	;# 
  1826  0F35                     	;# 
  1827  0F36                     	;# 
  1828  0F37                     	;# 
  1829  0FE4                     	;# 
  1830  0FE5                     	;# 
  1831  0FE6                     	;# 
  1832  0FE7                     	;# 
  1833  0FE8                     	;# 
  1834  0FE9                     	;# 
  1835  0FEA                     	;# 
  1836  0FEB                     	;# 
  1837  0FED                     	;# 
  1838  0FEE                     	;# 
  1839  0FEF                     	;# 
  1840  0000                     	;# 
  1841  0001                     	;# 
  1842  0002                     	;# 
  1843  0003                     	;# 
  1844  0004                     	;# 
  1845  0005                     	;# 
  1846  0006                     	;# 
  1847  0007                     	;# 
  1848  0008                     	;# 
  1849  0009                     	;# 
  1850  000A                     	;# 
  1851  000B                     	;# 
  1852  000C                     	;# 
  1853  000D                     	;# 
  1854  000E                     	;# 
  1855  0010                     	;# 
  1856  0011                     	;# 
  1857  0012                     	;# 
  1858  0013                     	;# 
  1859  0014                     	;# 
  1860  0015                     	;# 
  1861  0015                     	;# 
  1862  0016                     	;# 
  1863  0016                     	;# 
  1864  0017                     	;# 
  1865  0018                     	;# 
  1866  0019                     	;# 
  1867  0019                     	;# 
  1868  001A                     	;# 
  1869  001B                     	;# 
  1870  001C                     	;# 
  1871  001D                     	;# 
  1872  001E                     	;# 
  1873  001F                     	;# 
  1874  008C                     	;# 
  1875  008D                     	;# 
  1876  008E                     	;# 
  1877  0090                     	;# 
  1878  0091                     	;# 
  1879  0092                     	;# 
  1880  0093                     	;# 
  1881  0094                     	;# 
  1882  0097                     	;# 
  1883  009B                     	;# 
  1884  009B                     	;# 
  1885  009C                     	;# 
  1886  009D                     	;# 
  1887  009E                     	;# 
  1888  009F                     	;# 
  1889  010C                     	;# 
  1890  010D                     	;# 
  1891  010E                     	;# 
  1892  0111                     	;# 
  1893  0112                     	;# 
  1894  0113                     	;# 
  1895  0114                     	;# 
  1896  0115                     	;# 
  1897  0116                     	;# 
  1898  0117                     	;# 
  1899  0118                     	;# 
  1900  0119                     	;# 
  1901  018C                     	;# 
  1902  018D                     	;# 
  1903  018E                     	;# 
  1904  0197                     	;# 
  1905  0199                     	;# 
  1906  0199                     	;# 
  1907  0199                     	;# 
  1908  019A                     	;# 
  1909  019A                     	;# 
  1910  019A                     	;# 
  1911  019B                     	;# 
  1912  019B                     	;# 
  1913  019B                     	;# 
  1914  019B                     	;# 
  1915  019B                     	;# 
  1916  019C                     	;# 
  1917  019C                     	;# 
  1918  019C                     	;# 
  1919  019D                     	;# 
  1920  019D                     	;# 
  1921  019D                     	;# 
  1922  019E                     	;# 
  1923  019E                     	;# 
  1924  019E                     	;# 
  1925  019F                     	;# 
  1926  019F                     	;# 
  1927  019F                     	;# 
  1928  019F                     	;# 
  1929  019F                     	;# 
  1930  020C                     	;# 
  1931  020D                     	;# 
  1932  020E                     	;# 
  1933  0211                     	;# 
  1934  0211                     	;# 
  1935  0212                     	;# 
  1936  0212                     	;# 
  1937  0213                     	;# 
  1938  0213                     	;# 
  1939  0214                     	;# 
  1940  0214                     	;# 
  1941  0215                     	;# 
  1942  0215                     	;# 
  1943  0215                     	;# 
  1944  0215                     	;# 
  1945  0216                     	;# 
  1946  0216                     	;# 
  1947  0217                     	;# 
  1948  0217                     	;# 
  1949  0219                     	;# 
  1950  021A                     	;# 
  1951  021B                     	;# 
  1952  021C                     	;# 
  1953  021D                     	;# 
  1954  021D                     	;# 
  1955  021E                     	;# 
  1956  021F                     	;# 
  1957  028C                     	;# 
  1958  028D                     	;# 
  1959  028E                     	;# 
  1960  0291                     	;# 
  1961  0291                     	;# 
  1962  0292                     	;# 
  1963  0293                     	;# 
  1964  0294                     	;# 
  1965  0295                     	;# 
  1966  0295                     	;# 
  1967  0296                     	;# 
  1968  0297                     	;# 
  1969  0298                     	;# 
  1970  029F                     	;# 
  1971  030C                     	;# 
  1972  030D                     	;# 
  1973  030E                     	;# 
  1974  0311                     	;# 
  1975  0311                     	;# 
  1976  0312                     	;# 
  1977  0313                     	;# 
  1978  0314                     	;# 
  1979  0315                     	;# 
  1980  0315                     	;# 
  1981  0316                     	;# 
  1982  0317                     	;# 
  1983  0318                     	;# 
  1984  038C                     	;# 
  1985  038D                     	;# 
  1986  038E                     	;# 
  1987  0391                     	;# 
  1988  0392                     	;# 
  1989  0393                     	;# 
  1990  0394                     	;# 
  1991  0395                     	;# 
  1992  0396                     	;# 
  1993  0397                     	;# 
  1994  0398                     	;# 
  1995  0399                     	;# 
  1996  039A                     	;# 
  1997  039C                     	;# 
  1998  039D                     	;# 
  1999  039E                     	;# 
  2000  039F                     	;# 
  2001  0411                     	;# 
  2002  0411                     	;# 
  2003  0412                     	;# 
  2004  0413                     	;# 
  2005  0414                     	;# 
  2006  0415                     	;# 
  2007  0416                     	;# 
  2008  0417                     	;# 
  2009  0418                     	;# 
  2010  0418                     	;# 
  2011  0419                     	;# 
  2012  041A                     	;# 
  2013  041B                     	;# 
  2014  041C                     	;# 
  2015  041D                     	;# 
  2016  041E                     	;# 
  2017  041F                     	;# 
  2018  0498                     	;# 
  2019  0498                     	;# 
  2020  0499                     	;# 
  2021  049A                     	;# 
  2022  049B                     	;# 
  2023  049B                     	;# 
  2024  049C                     	;# 
  2025  049D                     	;# 
  2026  049E                     	;# 
  2027  049F                     	;# 
  2028  0617                     	;# 
  2029  0618                     	;# 
  2030  0619                     	;# 
  2031  0619                     	;# 
  2032  061A                     	;# 
  2033  061B                     	;# 
  2034  061C                     	;# 
  2035  061C                     	;# 
  2036  061F                     	;# 
  2037  0691                     	;# 
  2038  0692                     	;# 
  2039  0693                     	;# 
  2040  0694                     	;# 
  2041  0695                     	;# 
  2042  0696                     	;# 
  2043  0697                     	;# 
  2044  0698                     	;# 
  2045  0699                     	;# 
  2046  0711                     	;# 
  2047  0712                     	;# 
  2048  0713                     	;# 
  2049  0714                     	;# 
  2050  0715                     	;# 
  2051  0716                     	;# 
  2052  0717                     	;# 
  2053  0718                     	;# 
  2054  0719                     	;# 
  2055  0891                     	;# 
  2056  0891                     	;# 
  2057  0891                     	;# 
  2058  0891                     	;# 
  2059  0891                     	;# 
  2060  0891                     	;# 
  2061  0892                     	;# 
  2062  0892                     	;# 
  2063  0892                     	;# 
  2064  0893                     	;# 
  2065  0893                     	;# 
  2066  0893                     	;# 
  2067  0893                     	;# 
  2068  0893                     	;# 
  2069  0893                     	;# 
  2070  0894                     	;# 
  2071  0894                     	;# 
  2072  0894                     	;# 
  2073  0895                     	;# 
  2074  0895                     	;# 
  2075  0895                     	;# 
  2076  0896                     	;# 
  2077  0896                     	;# 
  2078  0896                     	;# 
  2079  089B                     	;# 
  2080  0911                     	;# 
  2081  0912                     	;# 
  2082  0913                     	;# 
  2083  0914                     	;# 
  2084  0915                     	;# 
  2085  0916                     	;# 
  2086  0918                     	;# 
  2087  0919                     	;# 
  2088  091A                     	;# 
  2089  091B                     	;# 
  2090  091C                     	;# 
  2091  091D                     	;# 
  2092  091E                     	;# 
  2093  091F                     	;# 
  2094  0E0F                     	;# 
  2095  0E10                     	;# 
  2096  0E11                     	;# 
  2097  0E12                     	;# 
  2098  0E13                     	;# 
  2099  0E14                     	;# 
  2100  0E15                     	;# 
  2101  0E16                     	;# 
  2102  0E17                     	;# 
  2103  0E18                     	;# 
  2104  0E19                     	;# 
  2105  0E1A                     	;# 
  2106  0E1B                     	;# 
  2107  0E1C                     	;# 
  2108  0E1D                     	;# 
  2109  0E1E                     	;# 
  2110  0E1F                     	;# 
  2111  0E20                     	;# 
  2112  0E21                     	;# 
  2113  0E22                     	;# 
  2114  0E24                     	;# 
  2115  0E25                     	;# 
  2116  0E28                     	;# 
  2117  0E29                     	;# 
  2118  0E2A                     	;# 
  2119  0E2B                     	;# 
  2120  0E2C                     	;# 
  2121  0E2D                     	;# 
  2122  0E2E                     	;# 
  2123  0E2F                     	;# 
  2124  0E90                     	;# 
  2125  0E91                     	;# 
  2126  0E92                     	;# 
  2127  0E94                     	;# 
  2128  0E95                     	;# 
  2129  0E9C                     	;# 
  2130  0E9D                     	;# 
  2131  0E9E                     	;# 
  2132  0E9F                     	;# 
  2133  0EA0                     	;# 
  2134  0EA1                     	;# 
  2135  0EA2                     	;# 
  2136  0EA3                     	;# 
  2137  0EA4                     	;# 
  2138  0EA5                     	;# 
  2139  0EA6                     	;# 
  2140  0EA7                     	;# 
  2141  0F0F                     	;# 
  2142  0F10                     	;# 
  2143  0F11                     	;# 
  2144  0F12                     	;# 
  2145  0F13                     	;# 
  2146  0F14                     	;# 
  2147  0F15                     	;# 
  2148  0F16                     	;# 
  2149  0F17                     	;# 
  2150  0F18                     	;# 
  2151  0F19                     	;# 
  2152  0F1A                     	;# 
  2153  0F1B                     	;# 
  2154  0F1C                     	;# 
  2155  0F1D                     	;# 
  2156  0F1E                     	;# 
  2157  0F1F                     	;# 
  2158  0F20                     	;# 
  2159  0F21                     	;# 
  2160  0F22                     	;# 
  2161  0F23                     	;# 
  2162  0F24                     	;# 
  2163  0F25                     	;# 
  2164  0F26                     	;# 
  2165  0F27                     	;# 
  2166  0F28                     	;# 
  2167  0F29                     	;# 
  2168  0F2A                     	;# 
  2169  0F2B                     	;# 
  2170  0F2C                     	;# 
  2171  0F2D                     	;# 
  2172  0F2E                     	;# 
  2173  0F2F                     	;# 
  2174  0F30                     	;# 
  2175  0F31                     	;# 
  2176  0F32                     	;# 
  2177  0F33                     	;# 
  2178  0F34                     	;# 
  2179  0F35                     	;# 
  2180  0F36                     	;# 
  2181  0F37                     	;# 
  2182  0FE4                     	;# 
  2183  0FE5                     	;# 
  2184  0FE6                     	;# 
  2185  0FE7                     	;# 
  2186  0FE8                     	;# 
  2187  0FE9                     	;# 
  2188  0FEA                     	;# 
  2189  0FEB                     	;# 
  2190  0FED                     	;# 
  2191  0FEE                     	;# 
  2192  0FEF                     	;# 
  2193  0000                     	;# 
  2194  0001                     	;# 
  2195  0002                     	;# 
  2196  0003                     	;# 
  2197  0004                     	;# 
  2198  0005                     	;# 
  2199  0006                     	;# 
  2200  0007                     	;# 
  2201  0008                     	;# 
  2202  0009                     	;# 
  2203  000A                     	;# 
  2204  000B                     	;# 
  2205  000C                     	;# 
  2206  000D                     	;# 
  2207  000E                     	;# 
  2208  0010                     	;# 
  2209  0011                     	;# 
  2210  0012                     	;# 
  2211  0013                     	;# 
  2212  0014                     	;# 
  2213  0015                     	;# 
  2214  0015                     	;# 
  2215  0016                     	;# 
  2216  0016                     	;# 
  2217  0017                     	;# 
  2218  0018                     	;# 
  2219  0019                     	;# 
  2220  0019                     	;# 
  2221  001A                     	;# 
  2222  001B                     	;# 
  2223  001C                     	;# 
  2224  001D                     	;# 
  2225  001E                     	;# 
  2226  001F                     	;# 
  2227  008C                     	;# 
  2228  008D                     	;# 
  2229  008E                     	;# 
  2230  0090                     	;# 
  2231  0091                     	;# 
  2232  0092                     	;# 
  2233  0093                     	;# 
  2234  0094                     	;# 
  2235  0097                     	;# 
  2236  009B                     	;# 
  2237  009B                     	;# 
  2238  009C                     	;# 
  2239  009D                     	;# 
  2240  009E                     	;# 
  2241  009F                     	;# 
  2242  010C                     	;# 
  2243  010D                     	;# 
  2244  010E                     	;# 
  2245  0111                     	;# 
  2246  0112                     	;# 
  2247  0113                     	;# 
  2248  0114                     	;# 
  2249  0115                     	;# 
  2250  0116                     	;# 
  2251  0117                     	;# 
  2252  0118                     	;# 
  2253  0119                     	;# 
  2254  018C                     	;# 
  2255  018D                     	;# 
  2256  018E                     	;# 
  2257  0197                     	;# 
  2258  0199                     	;# 
  2259  0199                     	;# 
  2260  0199                     	;# 
  2261  019A                     	;# 
  2262  019A                     	;# 
  2263  019A                     	;# 
  2264  019B                     	;# 
  2265  019B                     	;# 
  2266  019B                     	;# 
  2267  019B                     	;# 
  2268  019B                     	;# 
  2269  019C                     	;# 
  2270  019C                     	;# 
  2271  019C                     	;# 
  2272  019D                     	;# 
  2273  019D                     	;# 
  2274  019D                     	;# 
  2275  019E                     	;# 
  2276  019E                     	;# 
  2277  019E                     	;# 
  2278  019F                     	;# 
  2279  019F                     	;# 
  2280  019F                     	;# 
  2281  019F                     	;# 
  2282  019F                     	;# 
  2283  020C                     	;# 
  2284  020D                     	;# 
  2285  020E                     	;# 
  2286  0211                     	;# 
  2287  0211                     	;# 
  2288  0212                     	;# 
  2289  0212                     	;# 
  2290  0213                     	;# 
  2291  0213                     	;# 
  2292  0214                     	;# 
  2293  0214                     	;# 
  2294  0215                     	;# 
  2295  0215                     	;# 
  2296  0215                     	;# 
  2297  0215                     	;# 
  2298  0216                     	;# 
  2299  0216                     	;# 
  2300  0217                     	;# 
  2301  0217                     	;# 
  2302  0219                     	;# 
  2303  021A                     	;# 
  2304  021B                     	;# 
  2305  021C                     	;# 
  2306  021D                     	;# 
  2307  021D                     	;# 
  2308  021E                     	;# 
  2309  021F                     	;# 
  2310  028C                     	;# 
  2311  028D                     	;# 
  2312  028E                     	;# 
  2313  0291                     	;# 
  2314  0291                     	;# 
  2315  0292                     	;# 
  2316  0293                     	;# 
  2317  0294                     	;# 
  2318  0295                     	;# 
  2319  0295                     	;# 
  2320  0296                     	;# 
  2321  0297                     	;# 
  2322  0298                     	;# 
  2323  029F                     	;# 
  2324  030C                     	;# 
  2325  030D                     	;# 
  2326  030E                     	;# 
  2327  0311                     	;# 
  2328  0311                     	;# 
  2329  0312                     	;# 
  2330  0313                     	;# 
  2331  0314                     	;# 
  2332  0315                     	;# 
  2333  0315                     	;# 
  2334  0316                     	;# 
  2335  0317                     	;# 
  2336  0318                     	;# 
  2337  038C                     	;# 
  2338  038D                     	;# 
  2339  038E                     	;# 
  2340  0391                     	;# 
  2341  0392                     	;# 
  2342  0393                     	;# 
  2343  0394                     	;# 
  2344  0395                     	;# 
  2345  0396                     	;# 
  2346  0397                     	;# 
  2347  0398                     	;# 
  2348  0399                     	;# 
  2349  039A                     	;# 
  2350  039C                     	;# 
  2351  039D                     	;# 
  2352  039E                     	;# 
  2353  039F                     	;# 
  2354  0411                     	;# 
  2355  0411                     	;# 
  2356  0412                     	;# 
  2357  0413                     	;# 
  2358  0414                     	;# 
  2359  0415                     	;# 
  2360  0416                     	;# 
  2361  0417                     	;# 
  2362  0418                     	;# 
  2363  0418                     	;# 
  2364  0419                     	;# 
  2365  041A                     	;# 
  2366  041B                     	;# 
  2367  041C                     	;# 
  2368  041D                     	;# 
  2369  041E                     	;# 
  2370  041F                     	;# 
  2371  0498                     	;# 
  2372  0498                     	;# 
  2373  0499                     	;# 
  2374  049A                     	;# 
  2375  049B                     	;# 
  2376  049B                     	;# 
  2377  049C                     	;# 
  2378  049D                     	;# 
  2379  049E                     	;# 
  2380  049F                     	;# 
  2381  0617                     	;# 
  2382  0618                     	;# 
  2383  0619                     	;# 
  2384  0619                     	;# 
  2385  061A                     	;# 
  2386  061B                     	;# 
  2387  061C                     	;# 
  2388  061C                     	;# 
  2389  061F                     	;# 
  2390  0691                     	;# 
  2391  0692                     	;# 
  2392  0693                     	;# 
  2393  0694                     	;# 
  2394  0695                     	;# 
  2395  0696                     	;# 
  2396  0697                     	;# 
  2397  0698                     	;# 
  2398  0699                     	;# 
  2399  0711                     	;# 
  2400  0712                     	;# 
  2401  0713                     	;# 
  2402  0714                     	;# 
  2403  0715                     	;# 
  2404  0716                     	;# 
  2405  0717                     	;# 
  2406  0718                     	;# 
  2407  0719                     	;# 
  2408  0891                     	;# 
  2409  0891                     	;# 
  2410  0891                     	;# 
  2411  0891                     	;# 
  2412  0891                     	;# 
  2413  0891                     	;# 
  2414  0892                     	;# 
  2415  0892                     	;# 
  2416  0892                     	;# 
  2417  0893                     	;# 
  2418  0893                     	;# 
  2419  0893                     	;# 
  2420  0893                     	;# 
  2421  0893                     	;# 
  2422  0893                     	;# 
  2423  0894                     	;# 
  2424  0894                     	;# 
  2425  0894                     	;# 
  2426  0895                     	;# 
  2427  0895                     	;# 
  2428  0895                     	;# 
  2429  0896                     	;# 
  2430  0896                     	;# 
  2431  0896                     	;# 
  2432  089B                     	;# 
  2433  0911                     	;# 
  2434  0912                     	;# 
  2435  0913                     	;# 
  2436  0914                     	;# 
  2437  0915                     	;# 
  2438  0916                     	;# 
  2439  0918                     	;# 
  2440  0919                     	;# 
  2441  091A                     	;# 
  2442  091B                     	;# 
  2443  091C                     	;# 
  2444  091D                     	;# 
  2445  091E                     	;# 
  2446  091F                     	;# 
  2447  0E0F                     	;# 
  2448  0E10                     	;# 
  2449  0E11                     	;# 
  2450  0E12                     	;# 
  2451  0E13                     	;# 
  2452  0E14                     	;# 
  2453  0E15                     	;# 
  2454  0E16                     	;# 
  2455  0E17                     	;# 
  2456  0E18                     	;# 
  2457  0E19                     	;# 
  2458  0E1A                     	;# 
  2459  0E1B                     	;# 
  2460  0E1C                     	;# 
  2461  0E1D                     	;# 
  2462  0E1E                     	;# 
  2463  0E1F                     	;# 
  2464  0E20                     	;# 
  2465  0E21                     	;# 
  2466  0E22                     	;# 
  2467  0E24                     	;# 
  2468  0E25                     	;# 
  2469  0E28                     	;# 
  2470  0E29                     	;# 
  2471  0E2A                     	;# 
  2472  0E2B                     	;# 
  2473  0E2C                     	;# 
  2474  0E2D                     	;# 
  2475  0E2E                     	;# 
  2476  0E2F                     	;# 
  2477  0E90                     	;# 
  2478  0E91                     	;# 
  2479  0E92                     	;# 
  2480  0E94                     	;# 
  2481  0E95                     	;# 
  2482  0E9C                     	;# 
  2483  0E9D                     	;# 
  2484  0E9E                     	;# 
  2485  0E9F                     	;# 
  2486  0EA0                     	;# 
  2487  0EA1                     	;# 
  2488  0EA2                     	;# 
  2489  0EA3                     	;# 
  2490  0EA4                     	;# 
  2491  0EA5                     	;# 
  2492  0EA6                     	;# 
  2493  0EA7                     	;# 
  2494  0F0F                     	;# 
  2495  0F10                     	;# 
  2496  0F11                     	;# 
  2497  0F12                     	;# 
  2498  0F13                     	;# 
  2499  0F14                     	;# 
  2500  0F15                     	;# 
  2501  0F16                     	;# 
  2502  0F17                     	;# 
  2503  0F18                     	;# 
  2504  0F19                     	;# 
  2505  0F1A                     	;# 
  2506  0F1B                     	;# 
  2507  0F1C                     	;# 
  2508  0F1D                     	;# 
  2509  0F1E                     	;# 
  2510  0F1F                     	;# 
  2511  0F20                     	;# 
  2512  0F21                     	;# 
  2513  0F22                     	;# 
  2514  0F23                     	;# 
  2515  0F24                     	;# 
  2516  0F25                     	;# 
  2517  0F26                     	;# 
  2518  0F27                     	;# 
  2519  0F28                     	;# 
  2520  0F29                     	;# 
  2521  0F2A                     	;# 
  2522  0F2B                     	;# 
  2523  0F2C                     	;# 
  2524  0F2D                     	;# 
  2525  0F2E                     	;# 
  2526  0F2F                     	;# 
  2527  0F30                     	;# 
  2528  0F31                     	;# 
  2529  0F32                     	;# 
  2530  0F33                     	;# 
  2531  0F34                     	;# 
  2532  0F35                     	;# 
  2533  0F36                     	;# 
  2534  0F37                     	;# 
  2535  0FE4                     	;# 
  2536  0FE5                     	;# 
  2537  0FE6                     	;# 
  2538  0FE7                     	;# 
  2539  0FE8                     	;# 
  2540  0FE9                     	;# 
  2541  0FEA                     	;# 
  2542  0FEB                     	;# 
  2543  0FED                     	;# 
  2544  0FEE                     	;# 
  2545  0FEF                     	;# 
  2546  0000                     	;# 
  2547  0001                     	;# 
  2548  0002                     	;# 
  2549  0003                     	;# 
  2550  0004                     	;# 
  2551  0005                     	;# 
  2552  0006                     	;# 
  2553  0007                     	;# 
  2554  0008                     	;# 
  2555  0009                     	;# 
  2556  000A                     	;# 
  2557  000B                     	;# 
  2558  000C                     	;# 
  2559  000D                     	;# 
  2560  000E                     	;# 
  2561  0010                     	;# 
  2562  0011                     	;# 
  2563  0012                     	;# 
  2564  0013                     	;# 
  2565  0014                     	;# 
  2566  0015                     	;# 
  2567  0015                     	;# 
  2568  0016                     	;# 
  2569  0016                     	;# 
  2570  0017                     	;# 
  2571  0018                     	;# 
  2572  0019                     	;# 
  2573  0019                     	;# 
  2574  001A                     	;# 
  2575  001B                     	;# 
  2576  001C                     	;# 
  2577  001D                     	;# 
  2578  001E                     	;# 
  2579  001F                     	;# 
  2580  008C                     	;# 
  2581  008D                     	;# 
  2582  008E                     	;# 
  2583  0090                     	;# 
  2584  0091                     	;# 
  2585  0092                     	;# 
  2586  0093                     	;# 
  2587  0094                     	;# 
  2588  0097                     	;# 
  2589  009B                     	;# 
  2590  009B                     	;# 
  2591  009C                     	;# 
  2592  009D                     	;# 
  2593  009E                     	;# 
  2594  009F                     	;# 
  2595  010C                     	;# 
  2596  010D                     	;# 
  2597  010E                     	;# 
  2598  0111                     	;# 
  2599  0112                     	;# 
  2600  0113                     	;# 
  2601  0114                     	;# 
  2602  0115                     	;# 
  2603  0116                     	;# 
  2604  0117                     	;# 
  2605  0118                     	;# 
  2606  0119                     	;# 
  2607  018C                     	;# 
  2608  018D                     	;# 
  2609  018E                     	;# 
  2610  0197                     	;# 
  2611  0199                     	;# 
  2612  0199                     	;# 
  2613  0199                     	;# 
  2614  019A                     	;# 
  2615  019A                     	;# 
  2616  019A                     	;# 
  2617  019B                     	;# 
  2618  019B                     	;# 
  2619  019B                     	;# 
  2620  019B                     	;# 
  2621  019B                     	;# 
  2622  019C                     	;# 
  2623  019C                     	;# 
  2624  019C                     	;# 
  2625  019D                     	;# 
  2626  019D                     	;# 
  2627  019D                     	;# 
  2628  019E                     	;# 
  2629  019E                     	;# 
  2630  019E                     	;# 
  2631  019F                     	;# 
  2632  019F                     	;# 
  2633  019F                     	;# 
  2634  019F                     	;# 
  2635  019F                     	;# 
  2636  020C                     	;# 
  2637  020D                     	;# 
  2638  020E                     	;# 
  2639  0211                     	;# 
  2640  0211                     	;# 
  2641  0212                     	;# 
  2642  0212                     	;# 
  2643  0213                     	;# 
  2644  0213                     	;# 
  2645  0214                     	;# 
  2646  0214                     	;# 
  2647  0215                     	;# 
  2648  0215                     	;# 
  2649  0215                     	;# 
  2650  0215                     	;# 
  2651  0216                     	;# 
  2652  0216                     	;# 
  2653  0217                     	;# 
  2654  0217                     	;# 
  2655  0219                     	;# 
  2656  021A                     	;# 
  2657  021B                     	;# 
  2658  021C                     	;# 
  2659  021D                     	;# 
  2660  021D                     	;# 
  2661  021E                     	;# 
  2662  021F                     	;# 
  2663  028C                     	;# 
  2664  028D                     	;# 
  2665  028E                     	;# 
  2666  0291                     	;# 
  2667  0291                     	;# 
  2668  0292                     	;# 
  2669  0293                     	;# 
  2670  0294                     	;# 
  2671  0295                     	;# 
  2672  0295                     	;# 
  2673  0296                     	;# 
  2674  0297                     	;# 
  2675  0298                     	;# 
  2676  029F                     	;# 
  2677  030C                     	;# 
  2678  030D                     	;# 
  2679  030E                     	;# 
  2680  0311                     	;# 
  2681  0311                     	;# 
  2682  0312                     	;# 
  2683  0313                     	;# 
  2684  0314                     	;# 
  2685  0315                     	;# 
  2686  0315                     	;# 
  2687  0316                     	;# 
  2688  0317                     	;# 
  2689  0318                     	;# 
  2690  038C                     	;# 
  2691  038D                     	;# 
  2692  038E                     	;# 
  2693  0391                     	;# 
  2694  0392                     	;# 
  2695  0393                     	;# 
  2696  0394                     	;# 
  2697  0395                     	;# 
  2698  0396                     	;# 
  2699  0397                     	;# 
  2700  0398                     	;# 
  2701  0399                     	;# 
  2702  039A                     	;# 
  2703  039C                     	;# 
  2704  039D                     	;# 
  2705  039E                     	;# 
  2706  039F                     	;# 
  2707  0411                     	;# 
  2708  0411                     	;# 
  2709  0412                     	;# 
  2710  0413                     	;# 
  2711  0414                     	;# 
  2712  0415                     	;# 
  2713  0416                     	;# 
  2714  0417                     	;# 
  2715  0418                     	;# 
  2716  0418                     	;# 
  2717  0419                     	;# 
  2718  041A                     	;# 
  2719  041B                     	;# 
  2720  041C                     	;# 
  2721  041D                     	;# 
  2722  041E                     	;# 
  2723  041F                     	;# 
  2724  0498                     	;# 
  2725  0498                     	;# 
  2726  0499                     	;# 
  2727  049A                     	;# 
  2728  049B                     	;# 
  2729  049B                     	;# 
  2730  049C                     	;# 
  2731  049D                     	;# 
  2732  049E                     	;# 
  2733  049F                     	;# 
  2734  0617                     	;# 
  2735  0618                     	;# 
  2736  0619                     	;# 
  2737  0619                     	;# 
  2738  061A                     	;# 
  2739  061B                     	;# 
  2740  061C                     	;# 
  2741  061C                     	;# 
  2742  061F                     	;# 
  2743  0691                     	;# 
  2744  0692                     	;# 
  2745  0693                     	;# 
  2746  0694                     	;# 
  2747  0695                     	;# 
  2748  0696                     	;# 
  2749  0697                     	;# 
  2750  0698                     	;# 
  2751  0699                     	;# 
  2752  0711                     	;# 
  2753  0712                     	;# 
  2754  0713                     	;# 
  2755  0714                     	;# 
  2756  0715                     	;# 
  2757  0716                     	;# 
  2758  0717                     	;# 
  2759  0718                     	;# 
  2760  0719                     	;# 
  2761  0891                     	;# 
  2762  0891                     	;# 
  2763  0891                     	;# 
  2764  0891                     	;# 
  2765  0891                     	;# 
  2766  0891                     	;# 
  2767  0892                     	;# 
  2768  0892                     	;# 
  2769  0892                     	;# 
  2770  0893                     	;# 
  2771  0893                     	;# 
  2772  0893                     	;# 
  2773  0893                     	;# 
  2774  0893                     	;# 
  2775  0893                     	;# 
  2776  0894                     	;# 
  2777  0894                     	;# 
  2778  0894                     	;# 
  2779  0895                     	;# 
  2780  0895                     	;# 
  2781  0895                     	;# 
  2782  0896                     	;# 
  2783  0896                     	;# 
  2784  0896                     	;# 
  2785  089B                     	;# 
  2786  0911                     	;# 
  2787  0912                     	;# 
  2788  0913                     	;# 
  2789  0914                     	;# 
  2790  0915                     	;# 
  2791  0916                     	;# 
  2792  0918                     	;# 
  2793  0919                     	;# 
  2794  091A                     	;# 
  2795  091B                     	;# 
  2796  091C                     	;# 
  2797  091D                     	;# 
  2798  091E                     	;# 
  2799  091F                     	;# 
  2800  0E0F                     	;# 
  2801  0E10                     	;# 
  2802  0E11                     	;# 
  2803  0E12                     	;# 
  2804  0E13                     	;# 
  2805  0E14                     	;# 
  2806  0E15                     	;# 
  2807  0E16                     	;# 
  2808  0E17                     	;# 
  2809  0E18                     	;# 
  2810  0E19                     	;# 
  2811  0E1A                     	;# 
  2812  0E1B                     	;# 
  2813  0E1C                     	;# 
  2814  0E1D                     	;# 
  2815  0E1E                     	;# 
  2816  0E1F                     	;# 
  2817  0E20                     	;# 
  2818  0E21                     	;# 
  2819  0E22                     	;# 
  2820  0E24                     	;# 
  2821  0E25                     	;# 
  2822  0E28                     	;# 
  2823  0E29                     	;# 
  2824  0E2A                     	;# 
  2825  0E2B                     	;# 
  2826  0E2C                     	;# 
  2827  0E2D                     	;# 
  2828  0E2E                     	;# 
  2829  0E2F                     	;# 
  2830  0E90                     	;# 
  2831  0E91                     	;# 
  2832  0E92                     	;# 
  2833  0E94                     	;# 
  2834  0E95                     	;# 
  2835  0E9C                     	;# 
  2836  0E9D                     	;# 
  2837  0E9E                     	;# 
  2838  0E9F                     	;# 
  2839  0EA0                     	;# 
  2840  0EA1                     	;# 
  2841  0EA2                     	;# 
  2842  0EA3                     	;# 
  2843  0EA4                     	;# 
  2844  0EA5                     	;# 
  2845  0EA6                     	;# 
  2846  0EA7                     	;# 
  2847  0F0F                     	;# 
  2848  0F10                     	;# 
  2849  0F11                     	;# 
  2850  0F12                     	;# 
  2851  0F13                     	;# 
  2852  0F14                     	;# 
  2853  0F15                     	;# 
  2854  0F16                     	;# 
  2855  0F17                     	;# 
  2856  0F18                     	;# 
  2857  0F19                     	;# 
  2858  0F1A                     	;# 
  2859  0F1B                     	;# 
  2860  0F1C                     	;# 
  2861  0F1D                     	;# 
  2862  0F1E                     	;# 
  2863  0F1F                     	;# 
  2864  0F20                     	;# 
  2865  0F21                     	;# 
  2866  0F22                     	;# 
  2867  0F23                     	;# 
  2868  0F24                     	;# 
  2869  0F25                     	;# 
  2870  0F26                     	;# 
  2871  0F27                     	;# 
  2872  0F28                     	;# 
  2873  0F29                     	;# 
  2874  0F2A                     	;# 
  2875  0F2B                     	;# 
  2876  0F2C                     	;# 
  2877  0F2D                     	;# 
  2878  0F2E                     	;# 
  2879  0F2F                     	;# 
  2880  0F30                     	;# 
  2881  0F31                     	;# 
  2882  0F32                     	;# 
  2883  0F33                     	;# 
  2884  0F34                     	;# 
  2885  0F35                     	;# 
  2886  0F36                     	;# 
  2887  0F37                     	;# 
  2888  0FE4                     	;# 
  2889  0FE5                     	;# 
  2890  0FE6                     	;# 
  2891  0FE7                     	;# 
  2892  0FE8                     	;# 
  2893  0FE9                     	;# 
  2894  0FEA                     	;# 
  2895  0FEB                     	;# 
  2896  0FED                     	;# 
  2897  0FEE                     	;# 
  2898  0FEF                     	;# 
  2899  0000                     	;# 
  2900  0001                     	;# 
  2901  0002                     	;# 
  2902  0003                     	;# 
  2903  0004                     	;# 
  2904  0005                     	;# 
  2905  0006                     	;# 
  2906  0007                     	;# 
  2907  0008                     	;# 
  2908  0009                     	;# 
  2909  000A                     	;# 
  2910  000B                     	;# 
  2911  000C                     	;# 
  2912  000D                     	;# 
  2913  000E                     	;# 
  2914  0010                     	;# 
  2915  0011                     	;# 
  2916  0012                     	;# 
  2917  0013                     	;# 
  2918  0014                     	;# 
  2919  0015                     	;# 
  2920  0015                     	;# 
  2921  0016                     	;# 
  2922  0016                     	;# 
  2923  0017                     	;# 
  2924  0018                     	;# 
  2925  0019                     	;# 
  2926  0019                     	;# 
  2927  001A                     	;# 
  2928  001B                     	;# 
  2929  001C                     	;# 
  2930  001D                     	;# 
  2931  001E                     	;# 
  2932  001F                     	;# 
  2933  008C                     	;# 
  2934  008D                     	;# 
  2935  008E                     	;# 
  2936  0090                     	;# 
  2937  0091                     	;# 
  2938  0092                     	;# 
  2939  0093                     	;# 
  2940  0094                     	;# 
  2941  0097                     	;# 
  2942  009B                     	;# 
  2943  009B                     	;# 
  2944  009C                     	;# 
  2945  009D                     	;# 
  2946  009E                     	;# 
  2947  009F                     	;# 
  2948  010C                     	;# 
  2949  010D                     	;# 
  2950  010E                     	;# 
  2951  0111                     	;# 
  2952  0112                     	;# 
  2953  0113                     	;# 
  2954  0114                     	;# 
  2955  0115                     	;# 
  2956  0116                     	;# 
  2957  0117                     	;# 
  2958  0118                     	;# 
  2959  0119                     	;# 
  2960  018C                     	;# 
  2961  018D                     	;# 
  2962  018E                     	;# 
  2963  0197                     	;# 
  2964  0199                     	;# 
  2965  0199                     	;# 
  2966  0199                     	;# 
  2967  019A                     	;# 
  2968  019A                     	;# 
  2969  019A                     	;# 
  2970  019B                     	;# 
  2971  019B                     	;# 
  2972  019B                     	;# 
  2973  019B                     	;# 
  2974  019B                     	;# 
  2975  019C                     	;# 
  2976  019C                     	;# 
  2977  019C                     	;# 
  2978  019D                     	;# 
  2979  019D                     	;# 
  2980  019D                     	;# 
  2981  019E                     	;# 
  2982  019E                     	;# 
  2983  019E                     	;# 
  2984  019F                     	;# 
  2985  019F                     	;# 
  2986  019F                     	;# 
  2987  019F                     	;# 
  2988  019F                     	;# 
  2989  020C                     	;# 
  2990  020D                     	;# 
  2991  020E                     	;# 
  2992  0211                     	;# 
  2993  0211                     	;# 
  2994  0212                     	;# 
  2995  0212                     	;# 
  2996  0213                     	;# 
  2997  0213                     	;# 
  2998  0214                     	;# 
  2999  0214                     	;# 
  3000  0215                     	;# 
  3001  0215                     	;# 
  3002  0215                     	;# 
  3003  0215                     	;# 
  3004  0216                     	;# 
  3005  0216                     	;# 
  3006  0217                     	;# 
  3007  0217                     	;# 
  3008  0219                     	;# 
  3009  021A                     	;# 
  3010  021B                     	;# 
  3011  021C                     	;# 
  3012  021D                     	;# 
  3013  021D                     	;# 
  3014  021E                     	;# 
  3015  021F                     	;# 
  3016  028C                     	;# 
  3017  028D                     	;# 
  3018  028E                     	;# 
  3019  0291                     	;# 
  3020  0291                     	;# 
  3021  0292                     	;# 
  3022  0293                     	;# 
  3023  0294                     	;# 
  3024  0295                     	;# 
  3025  0295                     	;# 
  3026  0296                     	;# 
  3027  0297                     	;# 
  3028  0298                     	;# 
  3029  029F                     	;# 
  3030  030C                     	;# 
  3031  030D                     	;# 
  3032  030E                     	;# 
  3033  0311                     	;# 
  3034  0311                     	;# 
  3035  0312                     	;# 
  3036  0313                     	;# 
  3037  0314                     	;# 
  3038  0315                     	;# 
  3039  0315                     	;# 
  3040  0316                     	;# 
  3041  0317                     	;# 
  3042  0318                     	;# 
  3043  038C                     	;# 
  3044  038D                     	;# 
  3045  038E                     	;# 
  3046  0391                     	;# 
  3047  0392                     	;# 
  3048  0393                     	;# 
  3049  0394                     	;# 
  3050  0395                     	;# 
  3051  0396                     	;# 
  3052  0397                     	;# 
  3053  0398                     	;# 
  3054  0399                     	;# 
  3055  039A                     	;# 
  3056  039C                     	;# 
  3057  039D                     	;# 
  3058  039E                     	;# 
  3059  039F                     	;# 
  3060  0411                     	;# 
  3061  0411                     	;# 
  3062  0412                     	;# 
  3063  0413                     	;# 
  3064  0414                     	;# 
  3065  0415                     	;# 
  3066  0416                     	;# 
  3067  0417                     	;# 
  3068  0418                     	;# 
  3069  0418                     	;# 
  3070  0419                     	;# 
  3071  041A                     	;# 
  3072  041B                     	;# 
  3073  041C                     	;# 
  3074  041D                     	;# 
  3075  041E                     	;# 
  3076  041F                     	;# 
  3077  0498                     	;# 
  3078  0498                     	;# 
  3079  0499                     	;# 
  3080  049A                     	;# 
  3081  049B                     	;# 
  3082  049B                     	;# 
  3083  049C                     	;# 
  3084  049D                     	;# 
  3085  049E                     	;# 
  3086  049F                     	;# 
  3087  0617                     	;# 
  3088  0618                     	;# 
  3089  0619                     	;# 
  3090  0619                     	;# 
  3091  061A                     	;# 
  3092  061B                     	;# 
  3093  061C                     	;# 
  3094  061C                     	;# 
  3095  061F                     	;# 
  3096  0691                     	;# 
  3097  0692                     	;# 
  3098  0693                     	;# 
  3099  0694                     	;# 
  3100  0695                     	;# 
  3101  0696                     	;# 
  3102  0697                     	;# 
  3103  0698                     	;# 
  3104  0699                     	;# 
  3105  0711                     	;# 
  3106  0712                     	;# 
  3107  0713                     	;# 
  3108  0714                     	;# 
  3109  0715                     	;# 
  3110  0716                     	;# 
  3111  0717                     	;# 
  3112  0718                     	;# 
  3113  0719                     	;# 
  3114  0891                     	;# 
  3115  0891                     	;# 
  3116  0891                     	;# 
  3117  0891                     	;# 
  3118  0891                     	;# 
  3119  0891                     	;# 
  3120  0892                     	;# 
  3121  0892                     	;# 
  3122  0892                     	;# 
  3123  0893                     	;# 
  3124  0893                     	;# 
  3125  0893                     	;# 
  3126  0893                     	;# 
  3127  0893                     	;# 
  3128  0893                     	;# 
  3129  0894                     	;# 
  3130  0894                     	;# 
  3131  0894                     	;# 
  3132  0895                     	;# 
  3133  0895                     	;# 
  3134  0895                     	;# 
  3135  0896                     	;# 
  3136  0896                     	;# 
  3137  0896                     	;# 
  3138  089B                     	;# 
  3139  0911                     	;# 
  3140  0912                     	;# 
  3141  0913                     	;# 
  3142  0914                     	;# 
  3143  0915                     	;# 
  3144  0916                     	;# 
  3145  0918                     	;# 
  3146  0919                     	;# 
  3147  091A                     	;# 
  3148  091B                     	;# 
  3149  091C                     	;# 
  3150  091D                     	;# 
  3151  091E                     	;# 
  3152  091F                     	;# 
  3153  0E0F                     	;# 
  3154  0E10                     	;# 
  3155  0E11                     	;# 
  3156  0E12                     	;# 
  3157  0E13                     	;# 
  3158  0E14                     	;# 
  3159  0E15                     	;# 
  3160  0E16                     	;# 
  3161  0E17                     	;# 
  3162  0E18                     	;# 
  3163  0E19                     	;# 
  3164  0E1A                     	;# 
  3165  0E1B                     	;# 
  3166  0E1C                     	;# 
  3167  0E1D                     	;# 
  3168  0E1E                     	;# 
  3169  0E1F                     	;# 
  3170  0E20                     	;# 
  3171  0E21                     	;# 
  3172  0E22                     	;# 
  3173  0E24                     	;# 
  3174  0E25                     	;# 
  3175  0E28                     	;# 
  3176  0E29                     	;# 
  3177  0E2A                     	;# 
  3178  0E2B                     	;# 
  3179  0E2C                     	;# 
  3180  0E2D                     	;# 
  3181  0E2E                     	;# 
  3182  0E2F                     	;# 
  3183  0E90                     	;# 
  3184  0E91                     	;# 
  3185  0E92                     	;# 
  3186  0E94                     	;# 
  3187  0E95                     	;# 
  3188  0E9C                     	;# 
  3189  0E9D                     	;# 
  3190  0E9E                     	;# 
  3191  0E9F                     	;# 
  3192  0EA0                     	;# 
  3193  0EA1                     	;# 
  3194  0EA2                     	;# 
  3195  0EA3                     	;# 
  3196  0EA4                     	;# 
  3197  0EA5                     	;# 
  3198  0EA6                     	;# 
  3199  0EA7                     	;# 
  3200  0F0F                     	;# 
  3201  0F10                     	;# 
  3202  0F11                     	;# 
  3203  0F12                     	;# 
  3204  0F13                     	;# 
  3205  0F14                     	;# 
  3206  0F15                     	;# 
  3207  0F16                     	;# 
  3208  0F17                     	;# 
  3209  0F18                     	;# 
  3210  0F19                     	;# 
  3211  0F1A                     	;# 
  3212  0F1B                     	;# 
  3213  0F1C                     	;# 
  3214  0F1D                     	;# 
  3215  0F1E                     	;# 
  3216  0F1F                     	;# 
  3217  0F20                     	;# 
  3218  0F21                     	;# 
  3219  0F22                     	;# 
  3220  0F23                     	;# 
  3221  0F24                     	;# 
  3222  0F25                     	;# 
  3223  0F26                     	;# 
  3224  0F27                     	;# 
  3225  0F28                     	;# 
  3226  0F29                     	;# 
  3227  0F2A                     	;# 
  3228  0F2B                     	;# 
  3229  0F2C                     	;# 
  3230  0F2D                     	;# 
  3231  0F2E                     	;# 
  3232  0F2F                     	;# 
  3233  0F30                     	;# 
  3234  0F31                     	;# 
  3235  0F32                     	;# 
  3236  0F33                     	;# 
  3237  0F34                     	;# 
  3238  0F35                     	;# 
  3239  0F36                     	;# 
  3240  0F37                     	;# 
  3241  0FE4                     	;# 
  3242  0FE5                     	;# 
  3243  0FE6                     	;# 
  3244  0FE7                     	;# 
  3245  0FE8                     	;# 
  3246  0FE9                     	;# 
  3247  0FEA                     	;# 
  3248  0FEB                     	;# 
  3249  0FED                     	;# 
  3250  0FEE                     	;# 
  3251  0FEF                     	;# 
  3252  0000                     	;# 
  3253  0001                     	;# 
  3254  0002                     	;# 
  3255  0003                     	;# 
  3256  0004                     	;# 
  3257  0005                     	;# 
  3258  0006                     	;# 
  3259  0007                     	;# 
  3260  0008                     	;# 
  3261  0009                     	;# 
  3262  000A                     	;# 
  3263  000B                     	;# 
  3264  000C                     	;# 
  3265  000D                     	;# 
  3266  000E                     	;# 
  3267  0010                     	;# 
  3268  0011                     	;# 
  3269  0012                     	;# 
  3270  0013                     	;# 
  3271  0014                     	;# 
  3272  0015                     	;# 
  3273  0015                     	;# 
  3274  0016                     	;# 
  3275  0016                     	;# 
  3276  0017                     	;# 
  3277  0018                     	;# 
  3278  0019                     	;# 
  3279  0019                     	;# 
  3280  001A                     	;# 
  3281  001B                     	;# 
  3282  001C                     	;# 
  3283  001D                     	;# 
  3284  001E                     	;# 
  3285  001F                     	;# 
  3286  008C                     	;# 
  3287  008D                     	;# 
  3288  008E                     	;# 
  3289  0090                     	;# 
  3290  0091                     	;# 
  3291  0092                     	;# 
  3292  0093                     	;# 
  3293  0094                     	;# 
  3294  0097                     	;# 
  3295  009B                     	;# 
  3296  009B                     	;# 
  3297  009C                     	;# 
  3298  009D                     	;# 
  3299  009E                     	;# 
  3300  009F                     	;# 
  3301  010C                     	;# 
  3302  010D                     	;# 
  3303  010E                     	;# 
  3304  0111                     	;# 
  3305  0112                     	;# 
  3306  0113                     	;# 
  3307  0114                     	;# 
  3308  0115                     	;# 
  3309  0116                     	;# 
  3310  0117                     	;# 
  3311  0118                     	;# 
  3312  0119                     	;# 
  3313  018C                     	;# 
  3314  018D                     	;# 
  3315  018E                     	;# 
  3316  0197                     	;# 
  3317  0199                     	;# 
  3318  0199                     	;# 
  3319  0199                     	;# 
  3320  019A                     	;# 
  3321  019A                     	;# 
  3322  019A                     	;# 
  3323  019B                     	;# 
  3324  019B                     	;# 
  3325  019B                     	;# 
  3326  019B                     	;# 
  3327  019B                     	;# 
  3328  019C                     	;# 
  3329  019C                     	;# 
  3330  019C                     	;# 
  3331  019D                     	;# 
  3332  019D                     	;# 
  3333  019D                     	;# 
  3334  019E                     	;# 
  3335  019E                     	;# 
  3336  019E                     	;# 
  3337  019F                     	;# 
  3338  019F                     	;# 
  3339  019F                     	;# 
  3340  019F                     	;# 
  3341  019F                     	;# 
  3342  020C                     	;# 
  3343  020D                     	;# 
  3344  020E                     	;# 
  3345  0211                     	;# 
  3346  0211                     	;# 
  3347  0212                     	;# 
  3348  0212                     	;# 
  3349  0213                     	;# 
  3350  0213                     	;# 
  3351  0214                     	;# 
  3352  0214                     	;# 
  3353  0215                     	;# 
  3354  0215                     	;# 
  3355  0215                     	;# 
  3356  0215                     	;# 
  3357  0216                     	;# 
  3358  0216                     	;# 
  3359  0217                     	;# 
  3360  0217                     	;# 
  3361  0219                     	;# 
  3362  021A                     	;# 
  3363  021B                     	;# 
  3364  021C                     	;# 
  3365  021D                     	;# 
  3366  021D                     	;# 
  3367  021E                     	;# 
  3368  021F                     	;# 
  3369  028C                     	;# 
  3370  028D                     	;# 
  3371  028E                     	;# 
  3372  0291                     	;# 
  3373  0291                     	;# 
  3374  0292                     	;# 
  3375  0293                     	;# 
  3376  0294                     	;# 
  3377  0295                     	;# 
  3378  0295                     	;# 
  3379  0296                     	;# 
  3380  0297                     	;# 
  3381  0298                     	;# 
  3382  029F                     	;# 
  3383  030C                     	;# 
  3384  030D                     	;# 
  3385  030E                     	;# 
  3386  0311                     	;# 
  3387  0311                     	;# 
  3388  0312                     	;# 
  3389  0313                     	;# 
  3390  0314                     	;# 
  3391  0315                     	;# 
  3392  0315                     	;# 
  3393  0316                     	;# 
  3394  0317                     	;# 
  3395  0318                     	;# 
  3396  038C                     	;# 
  3397  038D                     	;# 
  3398  038E                     	;# 
  3399  0391                     	;# 
  3400  0392                     	;# 
  3401  0393                     	;# 
  3402  0394                     	;# 
  3403  0395                     	;# 
  3404  0396                     	;# 
  3405  0397                     	;# 
  3406  0398                     	;# 
  3407  0399                     	;# 
  3408  039A                     	;# 
  3409  039C                     	;# 
  3410  039D                     	;# 
  3411  039E                     	;# 
  3412  039F                     	;# 
  3413  0411                     	;# 
  3414  0411                     	;# 
  3415  0412                     	;# 
  3416  0413                     	;# 
  3417  0414                     	;# 
  3418  0415                     	;# 
  3419  0416                     	;# 
  3420  0417                     	;# 
  3421  0418                     	;# 
  3422  0418                     	;# 
  3423  0419                     	;# 
  3424  041A                     	;# 
  3425  041B                     	;# 
  3426  041C                     	;# 
  3427  041D                     	;# 
  3428  041E                     	;# 
  3429  041F                     	;# 
  3430  0498                     	;# 
  3431  0498                     	;# 
  3432  0499                     	;# 
  3433  049A                     	;# 
  3434  049B                     	;# 
  3435  049B                     	;# 
  3436  049C                     	;# 
  3437  049D                     	;# 
  3438  049E                     	;# 
  3439  049F                     	;# 
  3440  0617                     	;# 
  3441  0618                     	;# 
  3442  0619                     	;# 
  3443  0619                     	;# 
  3444  061A                     	;# 
  3445  061B                     	;# 
  3446  061C                     	;# 
  3447  061C                     	;# 
  3448  061F                     	;# 
  3449  0691                     	;# 
  3450  0692                     	;# 
  3451  0693                     	;# 
  3452  0694                     	;# 
  3453  0695                     	;# 
  3454  0696                     	;# 
  3455  0697                     	;# 
  3456  0698                     	;# 
  3457  0699                     	;# 
  3458  0711                     	;# 
  3459  0712                     	;# 
  3460  0713                     	;# 
  3461  0714                     	;# 
  3462  0715                     	;# 
  3463  0716                     	;# 
  3464  0717                     	;# 
  3465  0718                     	;# 
  3466  0719                     	;# 
  3467  0891                     	;# 
  3468  0891                     	;# 
  3469  0891                     	;# 
  3470  0891                     	;# 
  3471  0891                     	;# 
  3472  0891                     	;# 
  3473  0892                     	;# 
  3474  0892                     	;# 
  3475  0892                     	;# 
  3476  0893                     	;# 
  3477  0893                     	;# 
  3478  0893                     	;# 
  3479  0893                     	;# 
  3480  0893                     	;# 
  3481  0893                     	;# 
  3482  0894                     	;# 
  3483  0894                     	;# 
  3484  0894                     	;# 
  3485  0895                     	;# 
  3486  0895                     	;# 
  3487  0895                     	;# 
  3488  0896                     	;# 
  3489  0896                     	;# 
  3490  0896                     	;# 
  3491  089B                     	;# 
  3492  0911                     	;# 
  3493  0912                     	;# 
  3494  0913                     	;# 
  3495  0914                     	;# 
  3496  0915                     	;# 
  3497  0916                     	;# 
  3498  0918                     	;# 
  3499  0919                     	;# 
  3500  091A                     	;# 
  3501  091B                     	;# 
  3502  091C                     	;# 
  3503  091D                     	;# 
  3504  091E                     	;# 
  3505  091F                     	;# 
  3506  0E0F                     	;# 
  3507  0E10                     	;# 
  3508  0E11                     	;# 
  3509  0E12                     	;# 
  3510  0E13                     	;# 
  3511  0E14                     	;# 
  3512  0E15                     	;# 
  3513  0E16                     	;# 
  3514  0E17                     	;# 
  3515  0E18                     	;# 
  3516  0E19                     	;# 
  3517  0E1A                     	;# 
  3518  0E1B                     	;# 
  3519  0E1C                     	;# 
  3520  0E1D                     	;# 
  3521  0E1E                     	;# 
  3522  0E1F                     	;# 
  3523  0E20                     	;# 
  3524  0E21                     	;# 
  3525  0E22                     	;# 
  3526  0E24                     	;# 
  3527  0E25                     	;# 
  3528  0E28                     	;# 
  3529  0E29                     	;# 
  3530  0E2A                     	;# 
  3531  0E2B                     	;# 
  3532  0E2C                     	;# 
  3533  0E2D                     	;# 
  3534  0E2E                     	;# 
  3535  0E2F                     	;# 
  3536  0E90                     	;# 
  3537  0E91                     	;# 
  3538  0E92                     	;# 
  3539  0E94                     	;# 
  3540  0E95                     	;# 
  3541  0E9C                     	;# 
  3542  0E9D                     	;# 
  3543  0E9E                     	;# 
  3544  0E9F                     	;# 
  3545  0EA0                     	;# 
  3546  0EA1                     	;# 
  3547  0EA2                     	;# 
  3548  0EA3                     	;# 
  3549  0EA4                     	;# 
  3550  0EA5                     	;# 
  3551  0EA6                     	;# 
  3552  0EA7                     	;# 
  3553  0F0F                     	;# 
  3554  0F10                     	;# 
  3555  0F11                     	;# 
  3556  0F12                     	;# 
  3557  0F13                     	;# 
  3558  0F14                     	;# 
  3559  0F15                     	;# 
  3560  0F16                     	;# 
  3561  0F17                     	;# 
  3562  0F18                     	;# 
  3563  0F19                     	;# 
  3564  0F1A                     	;# 
  3565  0F1B                     	;# 
  3566  0F1C                     	;# 
  3567  0F1D                     	;# 
  3568  0F1E                     	;# 
  3569  0F1F                     	;# 
  3570  0F20                     	;# 
  3571  0F21                     	;# 
  3572  0F22                     	;# 
  3573  0F23                     	;# 
  3574  0F24                     	;# 
  3575  0F25                     	;# 
  3576  0F26                     	;# 
  3577  0F27                     	;# 
  3578  0F28                     	;# 
  3579  0F29                     	;# 
  3580  0F2A                     	;# 
  3581  0F2B                     	;# 
  3582  0F2C                     	;# 
  3583  0F2D                     	;# 
  3584  0F2E                     	;# 
  3585  0F2F                     	;# 
  3586  0F30                     	;# 
  3587  0F31                     	;# 
  3588  0F32                     	;# 
  3589  0F33                     	;# 
  3590  0F34                     	;# 
  3591  0F35                     	;# 
  3592  0F36                     	;# 
  3593  0F37                     	;# 
  3594  0FE4                     	;# 
  3595  0FE5                     	;# 
  3596  0FE6                     	;# 
  3597  0FE7                     	;# 
  3598  0FE8                     	;# 
  3599  0FE9                     	;# 
  3600  0FEA                     	;# 
  3601  0FEB                     	;# 
  3602  0FED                     	;# 
  3603  0FEE                     	;# 
  3604  0FEF                     	;# 
  3605  0000                     	;# 
  3606  0001                     	;# 
  3607  0002                     	;# 
  3608  0003                     	;# 
  3609  0004                     	;# 
  3610  0005                     	;# 
  3611  0006                     	;# 
  3612  0007                     	;# 
  3613  0008                     	;# 
  3614  0009                     	;# 
  3615  000A                     	;# 
  3616  000B                     	;# 
  3617  000C                     	;# 
  3618  000D                     	;# 
  3619  000E                     	;# 
  3620  0010                     	;# 
  3621  0011                     	;# 
  3622  0012                     	;# 
  3623  0013                     	;# 
  3624  0014                     	;# 
  3625  0015                     	;# 
  3626  0015                     	;# 
  3627  0016                     	;# 
  3628  0016                     	;# 
  3629  0017                     	;# 
  3630  0018                     	;# 
  3631  0019                     	;# 
  3632  0019                     	;# 
  3633  001A                     	;# 
  3634  001B                     	;# 
  3635  001C                     	;# 
  3636  001D                     	;# 
  3637  001E                     	;# 
  3638  001F                     	;# 
  3639  008C                     	;# 
  3640  008D                     	;# 
  3641  008E                     	;# 
  3642  0090                     	;# 
  3643  0091                     	;# 
  3644  0092                     	;# 
  3645  0093                     	;# 
  3646  0094                     	;# 
  3647  0097                     	;# 
  3648  009B                     	;# 
  3649  009B                     	;# 
  3650  009C                     	;# 
  3651  009D                     	;# 
  3652  009E                     	;# 
  3653  009F                     	;# 
  3654  010C                     	;# 
  3655  010D                     	;# 
  3656  010E                     	;# 
  3657  0111                     	;# 
  3658  0112                     	;# 
  3659  0113                     	;# 
  3660  0114                     	;# 
  3661  0115                     	;# 
  3662  0116                     	;# 
  3663  0117                     	;# 
  3664  0118                     	;# 
  3665  0119                     	;# 
  3666  018C                     	;# 
  3667  018D                     	;# 
  3668  018E                     	;# 
  3669  0197                     	;# 
  3670  0199                     	;# 
  3671  0199                     	;# 
  3672  0199                     	;# 
  3673  019A                     	;# 
  3674  019A                     	;# 
  3675  019A                     	;# 
  3676  019B                     	;# 
  3677  019B                     	;# 
  3678  019B                     	;# 
  3679  019B                     	;# 
  3680  019B                     	;# 
  3681  019C                     	;# 
  3682  019C                     	;# 
  3683  019C                     	;# 
  3684  019D                     	;# 
  3685  019D                     	;# 
  3686  019D                     	;# 
  3687  019E                     	;# 
  3688  019E                     	;# 
  3689  019E                     	;# 
  3690  019F                     	;# 
  3691  019F                     	;# 
  3692  019F                     	;# 
  3693  019F                     	;# 
  3694  019F                     	;# 
  3695  020C                     	;# 
  3696  020D                     	;# 
  3697  020E                     	;# 
  3698  0211                     	;# 
  3699  0211                     	;# 
  3700  0212                     	;# 
  3701  0212                     	;# 
  3702  0213                     	;# 
  3703  0213                     	;# 
  3704  0214                     	;# 
  3705  0214                     	;# 
  3706  0215                     	;# 
  3707  0215                     	;# 
  3708  0215                     	;# 
  3709  0215                     	;# 
  3710  0216                     	;# 
  3711  0216                     	;# 
  3712  0217                     	;# 
  3713  0217                     	;# 
  3714  0219                     	;# 
  3715  021A                     	;# 
  3716  021B                     	;# 
  3717  021C                     	;# 
  3718  021D                     	;# 
  3719  021D                     	;# 
  3720  021E                     	;# 
  3721  021F                     	;# 
  3722  028C                     	;# 
  3723  028D                     	;# 
  3724  028E                     	;# 
  3725  0291                     	;# 
  3726  0291                     	;# 
  3727  0292                     	;# 
  3728  0293                     	;# 
  3729  0294                     	;# 
  3730  0295                     	;# 
  3731  0295                     	;# 
  3732  0296                     	;# 
  3733  0297                     	;# 
  3734  0298                     	;# 
  3735  029F                     	;# 
  3736  030C                     	;# 
  3737  030D                     	;# 
  3738  030E                     	;# 
  3739  0311                     	;# 
  3740  0311                     	;# 
  3741  0312                     	;# 
  3742  0313                     	;# 
  3743  0314                     	;# 
  3744  0315                     	;# 
  3745  0315                     	;# 
  3746  0316                     	;# 
  3747  0317                     	;# 
  3748  0318                     	;# 
  3749  038C                     	;# 
  3750  038D                     	;# 
  3751  038E                     	;# 
  3752  0391                     	;# 
  3753  0392                     	;# 
  3754  0393                     	;# 
  3755  0394                     	;# 
  3756  0395                     	;# 
  3757  0396                     	;# 
  3758  0397                     	;# 
  3759  0398                     	;# 
  3760  0399                     	;# 
  3761  039A                     	;# 
  3762  039C                     	;# 
  3763  039D                     	;# 
  3764  039E                     	;# 
  3765  039F                     	;# 
  3766  0411                     	;# 
  3767  0411                     	;# 
  3768  0412                     	;# 
  3769  0413                     	;# 
  3770  0414                     	;# 
  3771  0415                     	;# 
  3772  0416                     	;# 
  3773  0417                     	;# 
  3774  0418                     	;# 
  3775  0418                     	;# 
  3776  0419                     	;# 
  3777  041A                     	;# 
  3778  041B                     	;# 
  3779  041C                     	;# 
  3780  041D                     	;# 
  3781  041E                     	;# 
  3782  041F                     	;# 
  3783  0498                     	;# 
  3784  0498                     	;# 
  3785  0499                     	;# 
  3786  049A                     	;# 
  3787  049B                     	;# 
  3788  049B                     	;# 
  3789  049C                     	;# 
  3790  049D                     	;# 
  3791  049E                     	;# 
  3792  049F                     	;# 
  3793  0617                     	;# 
  3794  0618                     	;# 
  3795  0619                     	;# 
  3796  0619                     	;# 
  3797  061A                     	;# 
  3798  061B                     	;# 
  3799  061C                     	;# 
  3800  061C                     	;# 
  3801  061F                     	;# 
  3802  0691                     	;# 
  3803  0692                     	;# 
  3804  0693                     	;# 
  3805  0694                     	;# 
  3806  0695                     	;# 
  3807  0696                     	;# 
  3808  0697                     	;# 
  3809  0698                     	;# 
  3810  0699                     	;# 
  3811  0711                     	;# 
  3812  0712                     	;# 
  3813  0713                     	;# 
  3814  0714                     	;# 
  3815  0715                     	;# 
  3816  0716                     	;# 
  3817  0717                     	;# 
  3818  0718                     	;# 
  3819  0719                     	;# 
  3820  0891                     	;# 
  3821  0891                     	;# 
  3822  0891                     	;# 
  3823  0891                     	;# 
  3824  0891                     	;# 
  3825  0891                     	;# 
  3826  0892                     	;# 
  3827  0892                     	;# 
  3828  0892                     	;# 
  3829  0893                     	;# 
  3830  0893                     	;# 
  3831  0893                     	;# 
  3832  0893                     	;# 
  3833  0893                     	;# 
  3834  0893                     	;# 
  3835  0894                     	;# 
  3836  0894                     	;# 
  3837  0894                     	;# 
  3838  0895                     	;# 
  3839  0895                     	;# 
  3840  0895                     	;# 
  3841  0896                     	;# 
  3842  0896                     	;# 
  3843  0896                     	;# 
  3844  089B                     	;# 
  3845  0911                     	;# 
  3846  0912                     	;# 
  3847  0913                     	;# 
  3848  0914                     	;# 
  3849  0915                     	;# 
  3850  0916                     	;# 
  3851  0918                     	;# 
  3852  0919                     	;# 
  3853  091A                     	;# 
  3854  091B                     	;# 
  3855  091C                     	;# 
  3856  091D                     	;# 
  3857  091E                     	;# 
  3858  091F                     	;# 
  3859  0E0F                     	;# 
  3860  0E10                     	;# 
  3861  0E11                     	;# 
  3862  0E12                     	;# 
  3863  0E13                     	;# 
  3864  0E14                     	;# 
  3865  0E15                     	;# 
  3866  0E16                     	;# 
  3867  0E17                     	;# 
  3868  0E18                     	;# 
  3869  0E19                     	;# 
  3870  0E1A                     	;# 
  3871  0E1B                     	;# 
  3872  0E1C                     	;# 
  3873  0E1D                     	;# 
  3874  0E1E                     	;# 
  3875  0E1F                     	;# 
  3876  0E20                     	;# 
  3877  0E21                     	;# 
  3878  0E22                     	;# 
  3879  0E24                     	;# 
  3880  0E25                     	;# 
  3881  0E28                     	;# 
  3882  0E29                     	;# 
  3883  0E2A                     	;# 
  3884  0E2B                     	;# 
  3885  0E2C                     	;# 
  3886  0E2D                     	;# 
  3887  0E2E                     	;# 
  3888  0E2F                     	;# 
  3889  0E90                     	;# 
  3890  0E91                     	;# 
  3891  0E92                     	;# 
  3892  0E94                     	;# 
  3893  0E95                     	;# 
  3894  0E9C                     	;# 
  3895  0E9D                     	;# 
  3896  0E9E                     	;# 
  3897  0E9F                     	;# 
  3898  0EA0                     	;# 
  3899  0EA1                     	;# 
  3900  0EA2                     	;# 
  3901  0EA3                     	;# 
  3902  0EA4                     	;# 
  3903  0EA5                     	;# 
  3904  0EA6                     	;# 
  3905  0EA7                     	;# 
  3906  0F0F                     	;# 
  3907  0F10                     	;# 
  3908  0F11                     	;# 
  3909  0F12                     	;# 
  3910  0F13                     	;# 
  3911  0F14                     	;# 
  3912  0F15                     	;# 
  3913  0F16                     	;# 
  3914  0F17                     	;# 
  3915  0F18                     	;# 
  3916  0F19                     	;# 
  3917  0F1A                     	;# 
  3918  0F1B                     	;# 
  3919  0F1C                     	;# 
  3920  0F1D                     	;# 
  3921  0F1E                     	;# 
  3922  0F1F                     	;# 
  3923  0F20                     	;# 
  3924  0F21                     	;# 
  3925  0F22                     	;# 
  3926  0F23                     	;# 
  3927  0F24                     	;# 
  3928  0F25                     	;# 
  3929  0F26                     	;# 
  3930  0F27                     	;# 
  3931  0F28                     	;# 
  3932  0F29                     	;# 
  3933  0F2A                     	;# 
  3934  0F2B                     	;# 
  3935  0F2C                     	;# 
  3936  0F2D                     	;# 
  3937  0F2E                     	;# 
  3938  0F2F                     	;# 
  3939  0F30                     	;# 
  3940  0F31                     	;# 
  3941  0F32                     	;# 
  3942  0F33                     	;# 
  3943  0F34                     	;# 
  3944  0F35                     	;# 
  3945  0F36                     	;# 
  3946  0F37                     	;# 
  3947  0FE4                     	;# 
  3948  0FE5                     	;# 
  3949  0FE6                     	;# 
  3950  0FE7                     	;# 
  3951  0FE8                     	;# 
  3952  0FE9                     	;# 
  3953  0FEA                     	;# 
  3954  0FEB                     	;# 
  3955  0FED                     	;# 
  3956  0FEE                     	;# 
  3957  0FEF                     	;# 
  3958  0000                     	;# 
  3959  0001                     	;# 
  3960  0002                     	;# 
  3961  0003                     	;# 
  3962  0004                     	;# 
  3963  0005                     	;# 
  3964  0006                     	;# 
  3965  0007                     	;# 
  3966  0008                     	;# 
  3967  0009                     	;# 
  3968  000A                     	;# 
  3969  000B                     	;# 
  3970  000C                     	;# 
  3971  000D                     	;# 
  3972  000E                     	;# 
  3973  0010                     	;# 
  3974  0011                     	;# 
  3975  0012                     	;# 
  3976  0013                     	;# 
  3977  0014                     	;# 
  3978  0015                     	;# 
  3979  0015                     	;# 
  3980  0016                     	;# 
  3981  0016                     	;# 
  3982  0017                     	;# 
  3983  0018                     	;# 
  3984  0019                     	;# 
  3985  0019                     	;# 
  3986  001A                     	;# 
  3987  001B                     	;# 
  3988  001C                     	;# 
  3989  001D                     	;# 
  3990  001E                     	;# 
  3991  001F                     	;# 
  3992  008C                     	;# 
  3993  008D                     	;# 
  3994  008E                     	;# 
  3995  0090                     	;# 
  3996  0091                     	;# 
  3997  0092                     	;# 
  3998  0093                     	;# 
  3999  0094                     	;# 
  4000  0097                     	;# 
  4001  009B                     	;# 
  4002  009B                     	;# 
  4003  009C                     	;# 
  4004  009D                     	;# 
  4005  009E                     	;# 
  4006  009F                     	;# 
  4007  010C                     	;# 
  4008  010D                     	;# 
  4009  010E                     	;# 
  4010  0111                     	;# 
  4011  0112                     	;# 
  4012  0113                     	;# 
  4013  0114                     	;# 
  4014  0115                     	;# 
  4015  0116                     	;# 
  4016  0117                     	;# 
  4017  0118                     	;# 
  4018  0119                     	;# 
  4019  018C                     	;# 
  4020  018D                     	;# 
  4021  018E                     	;# 
  4022  0197                     	;# 
  4023  0199                     	;# 
  4024  0199                     	;# 
  4025  0199                     	;# 
  4026  019A                     	;# 
  4027  019A                     	;# 
  4028  019A                     	;# 
  4029  019B                     	;# 
  4030  019B                     	;# 
  4031  019B                     	;# 
  4032  019B                     	;# 
  4033  019B                     	;# 
  4034  019C                     	;# 
  4035  019C                     	;# 
  4036  019C                     	;# 
  4037  019D                     	;# 
  4038  019D                     	;# 
  4039  019D                     	;# 
  4040  019E                     	;# 
  4041  019E                     	;# 
  4042  019E                     	;# 
  4043  019F                     	;# 
  4044  019F                     	;# 
  4045  019F                     	;# 
  4046  019F                     	;# 
  4047  019F                     	;# 
  4048  020C                     	;# 
  4049  020D                     	;# 
  4050  020E                     	;# 
  4051  0211                     	;# 
  4052  0211                     	;# 
  4053  0212                     	;# 
  4054  0212                     	;# 
  4055  0213                     	;# 
  4056  0213                     	;# 
  4057  0214                     	;# 
  4058  0214                     	;# 
  4059  0215                     	;# 
  4060  0215                     	;# 
  4061  0215                     	;# 
  4062  0215                     	;# 
  4063  0216                     	;# 
  4064  0216                     	;# 
  4065  0217                     	;# 
  4066  0217                     	;# 
  4067  0219                     	;# 
  4068  021A                     	;# 
  4069  021B                     	;# 
  4070  021C                     	;# 
  4071  021D                     	;# 
  4072  021D                     	;# 
  4073  021E                     	;# 
  4074  021F                     	;# 
  4075  028C                     	;# 
  4076  028D                     	;# 
  4077  028E                     	;# 
  4078  0291                     	;# 
  4079  0291                     	;# 
  4080  0292                     	;# 
  4081  0293                     	;# 
  4082  0294                     	;# 
  4083  0295                     	;# 
  4084  0295                     	;# 
  4085  0296                     	;# 
  4086  0297                     	;# 
  4087  0298                     	;# 
  4088  029F                     	;# 
  4089  030C                     	;# 
  4090  030D                     	;# 
  4091  030E                     	;# 
  4092  0311                     	;# 
  4093  0311                     	;# 
  4094  0312                     	;# 
  4095  0313                     	;# 
  4096  0314                     	;# 
  4097  0315                     	;# 
  4098  0315                     	;# 
  4099  0316                     	;# 
  4100  0317                     	;# 
  4101  0318                     	;# 
  4102  038C                     	;# 
  4103  038D                     	;# 
  4104  038E                     	;# 
  4105  0391                     	;# 
  4106  0392                     	;# 
  4107  0393                     	;# 
  4108  0394                     	;# 
  4109  0395                     	;# 
  4110  0396                     	;# 
  4111  0397                     	;# 
  4112  0398                     	;# 
  4113  0399                     	;# 
  4114  039A                     	;# 
  4115  039C                     	;# 
  4116  039D                     	;# 
  4117  039E                     	;# 
  4118  039F                     	;# 
  4119  0411                     	;# 
  4120  0411                     	;# 
  4121  0412                     	;# 
  4122  0413                     	;# 
  4123  0414                     	;# 
  4124  0415                     	;# 
  4125  0416                     	;# 
  4126  0417                     	;# 
  4127  0418                     	;# 
  4128  0418                     	;# 
  4129  0419                     	;# 
  4130  041A                     	;# 
  4131  041B                     	;# 
  4132  041C                     	;# 
  4133  041D                     	;# 
  4134  041E                     	;# 
  4135  041F                     	;# 
  4136  0498                     	;# 
  4137  0498                     	;# 
  4138  0499                     	;# 
  4139  049A                     	;# 
  4140  049B                     	;# 
  4141  049B                     	;# 
  4142  049C                     	;# 
  4143  049D                     	;# 
  4144  049E                     	;# 
  4145  049F                     	;# 
  4146  0617                     	;# 
  4147  0618                     	;# 
  4148  0619                     	;# 
  4149  0619                     	;# 
  4150  061A                     	;# 
  4151  061B                     	;# 
  4152  061C                     	;# 
  4153  061C                     	;# 
  4154  061F                     	;# 
  4155  0691                     	;# 
  4156  0692                     	;# 
  4157  0693                     	;# 
  4158  0694                     	;# 
  4159  0695                     	;# 
  4160  0696                     	;# 
  4161  0697                     	;# 
  4162  0698                     	;# 
  4163  0699                     	;# 
  4164  0711                     	;# 
  4165  0712                     	;# 
  4166  0713                     	;# 
  4167  0714                     	;# 
  4168  0715                     	;# 
  4169  0716                     	;# 
  4170  0717                     	;# 
  4171  0718                     	;# 
  4172  0719                     	;# 
  4173  0891                     	;# 
  4174  0891                     	;# 
  4175  0891                     	;# 
  4176  0891                     	;# 
  4177  0891                     	;# 
  4178  0891                     	;# 
  4179  0892                     	;# 
  4180  0892                     	;# 
  4181  0892                     	;# 
  4182  0893                     	;# 
  4183  0893                     	;# 
  4184  0893                     	;# 
  4185  0893                     	;# 
  4186  0893                     	;# 
  4187  0893                     	;# 
  4188  0894                     	;# 
  4189  0894                     	;# 
  4190  0894                     	;# 
  4191  0895                     	;# 
  4192  0895                     	;# 
  4193  0895                     	;# 
  4194  0896                     	;# 
  4195  0896                     	;# 
  4196  0896                     	;# 
  4197  089B                     	;# 
  4198  0911                     	;# 
  4199  0912                     	;# 
  4200  0913                     	;# 
  4201  0914                     	;# 
  4202  0915                     	;# 
  4203  0916                     	;# 
  4204  0918                     	;# 
  4205  0919                     	;# 
  4206  091A                     	;# 
  4207  091B                     	;# 
  4208  091C                     	;# 
  4209  091D                     	;# 
  4210  091E                     	;# 
  4211  091F                     	;# 
  4212  0E0F                     	;# 
  4213  0E10                     	;# 
  4214  0E11                     	;# 
  4215  0E12                     	;# 
  4216  0E13                     	;# 
  4217  0E14                     	;# 
  4218  0E15                     	;# 
  4219  0E16                     	;# 
  4220  0E17                     	;# 
  4221  0E18                     	;# 
  4222  0E19                     	;# 
  4223  0E1A                     	;# 
  4224  0E1B                     	;# 
  4225  0E1C                     	;# 
  4226  0E1D                     	;# 
  4227  0E1E                     	;# 
  4228  0E1F                     	;# 
  4229  0E20                     	;# 
  4230  0E21                     	;# 
  4231  0E22                     	;# 
  4232  0E24                     	;# 
  4233  0E25                     	;# 
  4234  0E28                     	;# 
  4235  0E29                     	;# 
  4236  0E2A                     	;# 
  4237  0E2B                     	;# 
  4238  0E2C                     	;# 
  4239  0E2D                     	;# 
  4240  0E2E                     	;# 
  4241  0E2F                     	;# 
  4242  0E90                     	;# 
  4243  0E91                     	;# 
  4244  0E92                     	;# 
  4245  0E94                     	;# 
  4246  0E95                     	;# 
  4247  0E9C                     	;# 
  4248  0E9D                     	;# 
  4249  0E9E                     	;# 
  4250  0E9F                     	;# 
  4251  0EA0                     	;# 
  4252  0EA1                     	;# 
  4253  0EA2                     	;# 
  4254  0EA3                     	;# 
  4255  0EA4                     	;# 
  4256  0EA5                     	;# 
  4257  0EA6                     	;# 
  4258  0EA7                     	;# 
  4259  0F0F                     	;# 
  4260  0F10                     	;# 
  4261  0F11                     	;# 
  4262  0F12                     	;# 
  4263  0F13                     	;# 
  4264  0F14                     	;# 
  4265  0F15                     	;# 
  4266  0F16                     	;# 
  4267  0F17                     	;# 
  4268  0F18                     	;# 
  4269  0F19                     	;# 
  4270  0F1A                     	;# 
  4271  0F1B                     	;# 
  4272  0F1C                     	;# 
  4273  0F1D                     	;# 
  4274  0F1E                     	;# 
  4275  0F1F                     	;# 
  4276  0F20                     	;# 
  4277  0F21                     	;# 
  4278  0F22                     	;# 
  4279  0F23                     	;# 
  4280  0F24                     	;# 
  4281  0F25                     	;# 
  4282  0F26                     	;# 
  4283  0F27                     	;# 
  4284  0F28                     	;# 
  4285  0F29                     	;# 
  4286  0F2A                     	;# 
  4287  0F2B                     	;# 
  4288  0F2C                     	;# 
  4289  0F2D                     	;# 
  4290  0F2E                     	;# 
  4291  0F2F                     	;# 
  4292  0F30                     	;# 
  4293  0F31                     	;# 
  4294  0F32                     	;# 
  4295  0F33                     	;# 
  4296  0F34                     	;# 
  4297  0F35                     	;# 
  4298  0F36                     	;# 
  4299  0F37                     	;# 
  4300  0FE4                     	;# 
  4301  0FE5                     	;# 
  4302  0FE6                     	;# 
  4303  0FE7                     	;# 
  4304  0FE8                     	;# 
  4305  0FE9                     	;# 
  4306  0FEA                     	;# 
  4307  0FEB                     	;# 
  4308  0FED                     	;# 
  4309  0FEE                     	;# 
  4310  0FEF                     	;_gLedPara
  4311                           
  4312                           	psect	idataBANK1
  4313  0807                     __pidataBANK1:	
  4314                           
  4315                           ;initializer for Led_DynamicCloud@F8372
  4316  0807  34C8               	retlw	200
  4317  0808  3400               	retlw	0
  4318  0809  34C8               	retlw	200
  4319  080A  3400               	retlw	0
  4320  080B  3490               	retlw	144
  4321  080C  3401               	retlw	1
  4322  080D  3440               	retlw	64
  4323  080E  3401               	retlw	1
  4324  080F  3490               	retlw	144
  4325  0810  3401               	retlw	1
  4326                           
  4327                           ;initializer for Led_DynamicMoon@F8362
  4328  0811  3400               	retlw	0
  4329  0812  3400               	retlw	0
  4330  0813  3400               	retlw	0
  4331  0814  3400               	retlw	0
  4332  0815  34E8               	retlw	232
  4333  0816  3403               	retlw	3
  4334  0817  34C8               	retlw	200
  4335  0818  3400               	retlw	0
  4336  0819  3400               	retlw	0
  4337  081A  3400               	retlw	0
  4338                           
  4339                           ;initializer for Led_DynamicWave@F8352
  4340  081B  34F4               	retlw	244
  4341  081C  3401               	retlw	1
  4342  081D  34F4               	retlw	244
  4343  081E  3401               	retlw	1
  4344  081F  34F4               	retlw	244
  4345  0820  3401               	retlw	1
  4346  0821  34C8               	retlw	200
  4347  0822  3400               	retlw	0
  4348  0823  34F4               	retlw	244
  4349  0824  3401               	retlw	1
  4350                           
  4351                           ;initializer for _loadDuty
  4352  0825  3483               	retlw	low _PWM5_LoadDutyValue
  4353  0826  3411               	retlw	high _PWM5_LoadDutyValue
  4354  0827  3437               	retlw	low _PWM2_LoadDutyValue
  4355  0828  3411               	retlw	high _PWM2_LoadDutyValue
  4356  0829  345B               	retlw	low _PWM4_LoadDutyValue
  4357  082A  3411               	retlw	high _PWM4_LoadDutyValue
  4358  082B  3449               	retlw	low _PWM3_LoadDutyValue
  4359  082C  3411               	retlw	high _PWM3_LoadDutyValue
  4360  082D  3425               	retlw	low _PWM1_LoadDutyValue
  4361  082E  3411               	retlw	high _PWM1_LoadDutyValue
  4362                           
  4363                           	psect	idataBANK2
  4364  10D3                     __pidataBANK2:	
  4365                           
  4366                           ;initializer for Led_DynamicStorm@F8382
  4367  10D3  3400               	retlw	0
  4368  10D4  3400               	retlw	0
  4369  10D5  3400               	retlw	0
  4370  10D6  3400               	retlw	0
  4371  10D7  3458               	retlw	88
  4372  10D8  3402               	retlw	2
  4373  10D9  3440               	retlw	64
  4374  10DA  3400               	retlw	0
  4375  10DB  3400               	retlw	0
  4376  10DC  3400               	retlw	0
  4377                           
  4378                           	psect	stringtext
  4379  1800                     __pstringtext:	
  4380  1800                     _GAIN:	
  4381  1800  3407               	retlw	7
  4382  1801  3405               	retlw	5
  4383  1802  3403               	retlw	3
  4384  1803  3401               	retlw	1
  4385  1804  3400               	retlw	0
  4386  1805                     __end_of_GAIN:	
  4387  1805                     _VOLUME:	
  4388  1805  340E               	retlw	14
  4389  1806  3411               	retlw	17
  4390  1807  3414               	retlw	20
  4391  1808  3417               	retlw	23
  4392  1809  341A               	retlw	26
  4393  180A                     __end_of_VOLUME:	
  4394                           
  4395                           	psect	nvBANK0
  4396  005E                     __pnvBANK0:	
  4397  005E                     _txRemain:	
  4398  005E                     	ds	1
  4399                           
  4400                           	psect	nvBANK1
  4401  00E4                     __pnvBANK1:	
  4402  00E4                     _tmr4_isr_handler:	
  4403  00E4                     	ds	2
  4404  00E6                     _tmr2_isr_handler:	
  4405  00E6                     	ds	2
  4406  00E8                     _tmr1_gate_isr_handler:	
  4407  00E8                     	ds	2
  4408  00EA                     _tmr0_isr_handler:	
  4409  00EA                     	ds	2
  4410  0019                     _TMR1	set	25
  4411  0012                     _PIR2bits	set	18
  4412  001F                     _T2CONbits	set	31
  4413  001D                     _TMR2	set	29
  4414  001E                     _PR2	set	30
  4415  001F                     _T2CON	set	31
  4416  001B                     _T1CONbits	set	27
  4417  001C                     _T1GCON	set	28
  4418  001B                     _T1CON	set	27
  4419  0017                     _T0CON0bits	set	23
  4420  0010                     _PIR0bits	set	16
  4421  0015                     _TMR0L	set	21
  4422  0016                     _TMR0H	set	22
  4423  0018                     _T0CON1	set	24
  4424  0017                     _T0CON0	set	23
  4425  000B                     _INTCONbits	set	11
  4426  0011                     _PIR1bits	set	17
  4427  005F                     _GIE	set	95
  4428  009B                     _ADRES	set	155
  4429  008E                     _TRISC	set	142
  4430  008D                     _TRISB	set	141
  4431  008C                     _TRISA	set	140
  4432  0092                     _PIE2bits	set	146
  4433  0090                     _PIE0bits	set	144
  4434  0091                     _PIE1bits	set	145
  4435  009D                     _ADCON0bits	set	157
  4436  009B                     _ADRESL	set	155
  4437  009C                     _ADRESH	set	156
  4438  009F                     _ADACT	set	159
  4439  009E                     _ADCON1	set	158
  4440  009D                     _ADCON0	set	157
  4441  010E                     _LATC	set	270
  4442  010D                     _LATB	set	269
  4443  010C                     _LATA	set	268
  4444  019B                     _SP1BRG	set	411
  4445  018C                     _ANSELA	set	396
  4446  018D                     _ANSELB	set	397
  4447  018E                     _ANSELC	set	398
  4448  019A                     _TXREG	set	410
  4449  019E                     _TX1STA	set	414
  4450  019D                     _RC1STA	set	413
  4451  019F                     _BAUD1CON	set	415
  4452  020E                     _WPUC	set	526
  4453  020C                     _WPUA	set	524
  4454  020D                     _WPUB	set	525
  4455  0295                     _CCPR2	set	661
  4456  0291                     _CCPR1	set	657
  4457  028E                     _ODCONC	set	654
  4458  028D                     _ODCONB	set	653
  4459  028C                     _ODCONA	set	652
  4460  0297                     _CCP2CON	set	663
  4461  029F                     _CCPTMRSbits	set	671
  4462  0293                     _CCP1CON	set	659
  4463  0315                     _CCPR4	set	789
  4464  0311                     _CCPR3	set	785
  4465  0317                     _CCP4CON	set	791
  4466  0313                     _CCP3CON	set	787
  4467  0417                     _T4CONbits	set	1047
  4468  0415                     _TMR4	set	1045
  4469  0416                     _PR4	set	1046
  4470  0417                     _T4CON	set	1047
  4471  0617                     _PWM5DC	set	1559
  4472  061F                     _PWMTMRSbits	set	1567
  4473  0619                     _PWM5CON	set	1561
  4474  0896                     _NVMCON2	set	2198
  4475  0895                     _NVMCON1bits	set	2197
  4476  0893                     _NVMDATL	set	2195
  4477  0891                     _NVMADRL	set	2193
  4478  0892                     _NVMADRH	set	2194
  4479  091E                     _OSCTUNE	set	2334
  4480  091F                     _OSCFRQ	set	2335
  4481  091D                     _OSCEN	set	2333
  4482  091B                     _OSCCON3	set	2331
  4483  0919                     _OSCCON1	set	2329
  4484  0E13                     _T1GPPSbits	set	3603
  4485  0E0F                     _PPSLOCKbits	set	3599
  4486  0E0F                     _PPSLOCK	set	3599
  4487  0E9F                     _RB7PPSbits	set	3743
  4488  0EA7                     _RC7PPSbits	set	3751
  4489  0EA1                     _RC1PPSbits	set	3745
  4490  0E92                     _RA2PPSbits	set	3730
  4491  0EA3                     _RC3PPSbits	set	3747
  4492  0EA5                     _RC5PPSbits	set	3749
  4493                           
  4494                           ; #config settings
  4495  0000                     
  4496                           	psect	cinit
  4497  082F                     start_initialization:	
  4498  082F                     __initialization:		;BIGRAM
  4499                           
  4500                           ; Initialize objects allocated to BANK1
  4501  082F  3007               	movlw	low __pidataBANK1
  4502  0830  0084               	movwf	4
  4503  0831  3088               	movlw	(high __pidataBANK1)| (0+128)
  4504  0832  0085               	movwf	5
  4505  0833  30A0               	movlw	low __pdataBANK1
  4506  0834  0086               	movwf	6
  4507  0835  3000               	movlw	high __pdataBANK1
  4508  0836  0087               	movwf	7
  4509  0837  3000               	movlw	0
  4510  0838  00FF               	movwf	127
  4511  0839  3028               	movlw	40
  4512  083A  3191  2119  3188   	fcall	init_ram
  4513                           
  4514                           ; Initialize objects allocated to BANK2
  4515  083D  30D3               	movlw	low __pidataBANK2
  4516  083E  0084               	movwf	4
  4517  083F  3090               	movlw	(high __pidataBANK2)| (0+128)
  4518  0840  0085               	movwf	5
  4519  0841  3054               	movlw	low __pdataBANK2
  4520  0842  0086               	movwf	6
  4521  0843  3001               	movlw	high __pdataBANK2
  4522  0844  0087               	movwf	7
  4523  0845  3000               	movlw	0
  4524  0846  00FF               	movwf	127
  4525  0847  300A               	movlw	10
  4526  0848  3191  2119  3188   	fcall	init_ram
  4527                           
  4528                           ; Clear objects allocated to BIGRAM
  4529  084B  307B               	movlw	123
  4530  084C  0084               	movwf	4
  4531  084D  3023               	movlw	35
  4532  084E  0085               	movwf	5
  4533  084F  3075               	movlw	117
  4534  0850  00FE               	movwf	126
  4535  0851  3000               	movlw	0
  4536  0852  00FF               	movwf	127
  4537  0853  3191  210D  3188   	fcall	clear_ram0
  4538                           
  4539                           ; Clear objects allocated to BANK0
  4540  0856  3040               	movlw	low __pbssBANK0
  4541  0857  0084               	movwf	4
  4542  0858  3000               	movlw	high __pbssBANK0
  4543  0859  0085               	movwf	5
  4544  085A  301E               	movlw	30
  4545  085B  00FE               	movwf	126
  4546  085C  3000               	movlw	0
  4547  085D  00FF               	movwf	127
  4548  085E  3191  210D  3188   	fcall	clear_ram0
  4549                           
  4550                           ; Clear objects allocated to BANK1
  4551  0861  30C8               	movlw	low __pbssBANK1
  4552  0862  0084               	movwf	4
  4553  0863  3000               	movlw	high __pbssBANK1
  4554  0864  0085               	movwf	5
  4555  0865  301C               	movlw	28
  4556  0866  00FE               	movwf	126
  4557  0867  3000               	movlw	0
  4558  0868  00FF               	movwf	127
  4559  0869  3191  210D  3188   	fcall	clear_ram0
  4560                           
  4561                           ; Clear objects allocated to BANK2
  4562  086C  3020               	movlw	low __pbssBANK2
  4563  086D  0084               	movwf	4
  4564  086E  3001               	movlw	high __pbssBANK2
  4565  086F  0085               	movwf	5
  4566  0870  3020               	movlw	32
  4567  0871  00FE               	movwf	126
  4568  0872  3000               	movlw	0
  4569  0873  00FF               	movwf	127
  4570  0874  3191  210D  3188   	fcall	clear_ram0
  4571  0877                     end_of_initialization:	
  4572                           ;End of C runtime variable initialization code
  4573                           
  4574  0877                     __end_of__initialization:	
  4575  0877  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4576  0878  0020               	movlb	0
  4577  0879  287A               	ljmp	_main	;jump to C main() function
  4578  087A                     __pmaintext:	
  4579                           ; 1 bytes @ 0x20
  4580 ;;
  4581 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4582 ;;
  4583 ;; *************** function _main *****************
  4584 ;; Defined at:
  4585 ;;		line 37 in file "user/src/main.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;		None
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  1    wreg      void 
  4592 ;; Registers used:
  4593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4594 ;; Tracked objects:
  4595 ;;		On entry : B1F/0
  4596 ;;		On exit  : 1E/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4603 ;;Total ram usage:        0 bytes
  4604 ;; Hardware stack levels required when called:   13
  4605 ;; This function calls:
  4606 ;;		_Audio_GetValue
  4607 ;;		_IR_KeyAtionIfPressed
  4608 ;;		_IR_ResetIfTMR1Overflow
  4609 ;;		_IR_UpdateSetStatus
  4610 ;;		_Interrupt_Initialize
  4611 ;;		_Led_AutoRun
  4612 ;;		_Led_CheckAutoStatus
  4613 ;;		_Led_InitPara
  4614 ;;		_Led_Initialize
  4615 ;;		_Led_SaveParaIfChanged
  4616 ;;		_RTC_HourReady
  4617 ;;		_RTC_MinuteReady
  4618 ;;		_RTC_SecondReady
  4619 ;;		_SYSTEM_Initialize
  4620 ;;		_TMR0_StartTimer
  4621 ;;		_TMR1_StartTimer
  4622 ;;		_TMR2_StartTimer
  4623 ;; This function is called by:
  4624 ;;		Startup code after reset
  4625 ;; This function uses a non-reentrant model
  4626 ;;
  4627                           
  4628                           
  4629                           ;psect for function _main
  4630  087A                     _main:	
  4631                           
  4632                           ;main.c: 38: SYSTEM_Initialize();
  4633                           
  4634                           ;incstack = 0
  4635                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4636  087A  2564  3188         	fcall	_SYSTEM_Initialize
  4637                           
  4638                           ;main.c: 39: Interrupt_Initialize();
  4639  087C  2318  3188         	fcall	_Interrupt_Initialize
  4640                           
  4641                           ;main.c: 40: (INTCONbits.GIE = 1);
  4642  087E  178B               	bsf	11,7	;volatile
  4643                           
  4644                           ;main.c: 41: (INTCONbits.PEIE = 1);
  4645  087F  170B               	bsf	11,6	;volatile
  4646                           
  4647                           ;main.c: 42: Led_InitPara();
  4648  0880  2353  3188         	fcall	_Led_InitPara
  4649                           
  4650                           ;main.c: 43: Led_Initialize();
  4651  0882  213C  3188         	fcall	_Led_Initialize
  4652                           
  4653                           ;main.c: 44: TMR0_StartTimer();
  4654  0884  2702  3188         	fcall	_TMR0_StartTimer
  4655                           
  4656                           ;main.c: 45: TMR1_StartTimer();
  4657  0886  22C8  3188         	fcall	_TMR1_StartTimer
  4658                           
  4659                           ;main.c: 46: TMR2_StartTimer();
  4660  0888  2705               	fcall	_TMR2_StartTimer
  4661  0889                     l505:	
  4662                           ;main.c: 48: while (1) {
  4663                           
  4664  0889  0064               	clrwdt	;# 
  4665                           
  4666                           ;main.c: 51: if (!gLedPara.mAuto && gLedPara.mOn && gLedPara.mDyn) {
  4667  088A  3187  2791  3188   	fcall	PL108	;call to abstracted procedure
  4668  088D  1801               	btfsc	1,0
  4669  088E  289B               	goto	l7270
  4670  088F  307B               	movlw	123
  4671  0890  0086               	movwf	6
  4672  0891  3023               	movlw	35
  4673  0892  1C81               	btfss	1,1
  4674  0893  289B               	goto	l7270
  4675  0894  307B               	movlw	123
  4676  0895  0086               	movwf	6
  4677  0896  3023               	movlw	35
  4678  0897  1F81               	btfss	1,7
  4679  0898  289B               	goto	l7270
  4680                           
  4681                           ;main.c: 52: Audio_GetValue();
  4682  0899  20CA  3188         	fcall	_Audio_GetValue
  4683  089B                     l7270:	
  4684                           
  4685                           ;main.c: 53: }
  4686                           ;main.c: 54: IR_KeyAtionIfPressed();
  4687  089B  22C3  3188         	fcall	_IR_KeyAtionIfPressed
  4688                           
  4689                           ;main.c: 55: IR_ResetIfTMR1Overflow();
  4690  089D  22CB  3188         	fcall	_IR_ResetIfTMR1Overflow
  4691                           
  4692                           ;main.c: 56: Led_SaveParaIfChanged();
  4693  089F  2343  3188         	fcall	_Led_SaveParaIfChanged
  4694                           
  4695                           ;main.c: 58: if (RTC_HourReady()) {
  4696  08A1  2556  3188         	fcall	_RTC_HourReady
  4697                           
  4698                           ;main.c: 59: }
  4699                           ;main.c: 60: if (RTC_MinuteReady()) {
  4700  08A3  255B  3188         	fcall	_RTC_MinuteReady
  4701  08A5  3A00               	xorlw	0
  4702  08A6  1903               	skipnz
  4703  08A7  28AF               	goto	l7282
  4704                           
  4705                           ;main.c: 61: if (gLedPara.mAuto) {
  4706  08A8  3187  2791  3188   	fcall	PL108	;call to abstracted procedure
  4707  08AB  1C01               	btfss	1,0
  4708  08AC  28AF               	goto	l7282
  4709                           
  4710                           ;main.c: 62: Led_CheckAutoStatus();
  4711  08AD  24B3  3188         	fcall	_Led_CheckAutoStatus
  4712  08AF                     l7282:	
  4713                           
  4714                           ;main.c: 63: }
  4715                           ;main.c: 64: }
  4716                           ;main.c: 65: if (RTC_SecondReady()) {
  4717  08AF  255F  3188         	fcall	_RTC_SecondReady
  4718  08B1  3A00               	xorlw	0
  4719  08B2  1903               	skipnz
  4720  08B3  2889               	goto	l505
  4721                           
  4722                           ;main.c: 66: if (gLedPara.mAuto && ir_state.mState != 4 && ir_state.mState != 5) {
  4723  08B4  3187  2791  3188   	fcall	PL108	;call to abstracted procedure
  4724  08B7  1C01               	btfss	1,0
  4725  08B8  28C7               	goto	l7292
  4726  08B9  0C54               	rrf	_ir_state,w	;volatile
  4727  08BA  0C89               	rrf	9,f
  4728  08BB  3907               	andlw	7
  4729  08BC  3A04               	xorlw	4
  4730  08BD  1903               	skipnz
  4731  08BE  28C7               	goto	l7292
  4732  08BF  0C54               	rrf	_ir_state,w	;volatile
  4733  08C0  0C89               	rrf	9,f
  4734  08C1  3907               	andlw	7
  4735  08C2  3A05               	xorlw	5
  4736  08C3  1903               	skipnz
  4737  08C4  28C7               	goto	l7292
  4738                           
  4739                           ;main.c: 67: Led_AutoRun();
  4740  08C5  2449  3188         	fcall	_Led_AutoRun
  4741  08C7                     l7292:	
  4742                           
  4743                           ;main.c: 68: }
  4744                           ;main.c: 69: IR_UpdateSetStatus();
  4745  08C7  230C  3188         	fcall	_IR_UpdateSetStatus
  4746  08C9  2889               	goto	l505
  4747  08CA                     __end_of_main:	
  4748  08CA                     __ptext65:	
  4749 ;; *************** function _Audio_GetValue *****************
  4750 ;; Defined at:
  4751 ;;		line 59 in file "user/src/audio.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;		None
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;  value           2   23[BANK0 ] unsigned int 
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  1    wreg      void 
  4758 ;; Registers used:
  4759 ;;		wreg, status,2, status,0, pclath, cstack
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 1F/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4766 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4767 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4768 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;Total ram usage:        6 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; Hardware stack levels required when called:    8
  4772 ;; This function calls:
  4773 ;;		_ADC_Conversion
  4774 ;;		___wmul
  4775 ;; This function is called by:
  4776 ;;		_main
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           
  4781                           ;psect for function _Audio_GetValue
  4782  08CA                     _Audio_GetValue:	
  4783                           
  4784                           ;audio.c: 61: static uint16_t max = 0;
  4785                           ;audio.c: 62: static uint16_t min = 0;
  4786                           ;audio.c: 63: static uint16_t cnt = 0;
  4787                           ;audio.c: 64: uint16_t value;
  4788                           ;audio.c: 66: value = ADC_Conversion ( 0x12 );
  4789                           
  4790                           ;incstack = 0
  4791                           ; Regs used in _Audio_GetValue: [wreg+status,2+status,0+pclath+cstack]
  4792  08CA  3012               	movlw	18
  4793  08CB  211B  3188         	fcall	_ADC_Conversion
  4794  08CD  082E               	movf	?_ADC_Conversion+1,w
  4795  08CE  00B8               	movwf	Audio_GetValue@value+1
  4796  08CF  082D               	movf	?_ADC_Conversion,w
  4797  08D0  00B7               	movwf	Audio_GetValue@value
  4798                           
  4799                           ;audio.c: 67: if ( cnt == 0 )
  4800  08D1  0844               	movf	Audio_GetValue@cnt,w
  4801  08D2  0445               	iorwf	Audio_GetValue@cnt+1,w
  4802  08D3  1D03               	btfss	3,2
  4803  08D4  28D8               	goto	l7026
  4804                           
  4805                           ;audio.c: 68: {
  4806                           ;audio.c: 69: max = value;
  4807  08D5  2690  3188         	fcall	PL164	;call to abstracted procedure
  4808  08D7  28EA               	goto	l7030
  4809  08D8                     l7026:	
  4810                           ;audio.c: 71: }
  4811                           
  4812                           ;audio.c: 70: min = value;
  4813                           
  4814                           
  4815                           ;audio.c: 72: else
  4816                           ;audio.c: 73: {
  4817                           ;audio.c: 74: if ( max < value )
  4818  08D8  0838               	movf	Audio_GetValue@value+1,w
  4819  08D9  0249               	subwf	Audio_GetValue@max+1,w
  4820  08DA  1D03               	skipz
  4821  08DB  28DE               	goto	u6235
  4822  08DC  0837               	movf	Audio_GetValue@value,w
  4823  08DD  0248               	subwf	Audio_GetValue@max,w
  4824  08DE                     u6235:	
  4825  08DE  1803               	skipnc
  4826  08DF  28E2               	goto	l343
  4827                           
  4828                           ;audio.c: 75: {
  4829                           ;audio.c: 76: max = value;
  4830  08E0  2690  3188         	fcall	PL164	;call to abstracted procedure
  4831  08E2                     l343:	
  4832                           
  4833                           ;audio.c: 77: }
  4834                           ;audio.c: 78: if ( min > value )
  4835  08E2  0847               	movf	Audio_GetValue@min+1,w
  4836  08E3  0238               	subwf	Audio_GetValue@value+1,w
  4837  08E4  1D03               	skipz
  4838  08E5  28E8               	goto	u6245
  4839  08E6  0846               	movf	Audio_GetValue@min,w
  4840  08E7  0237               	subwf	Audio_GetValue@value,w
  4841  08E8                     u6245:	
  4842  08E8  1803               	skipnc
  4843  08E9  28EE               	goto	l7032
  4844  08EA                     l7030:	
  4845                           
  4846                           ;audio.c: 79: {
  4847                           ;audio.c: 80: min = value;
  4848  08EA  0838               	movf	Audio_GetValue@value+1,w
  4849  08EB  00C7               	movwf	Audio_GetValue@min+1
  4850  08EC  0837               	movf	Audio_GetValue@value,w
  4851  08ED  00C6               	movwf	Audio_GetValue@min
  4852  08EE                     l7032:	
  4853                           
  4854                           ;audio.c: 81: }
  4855                           ;audio.c: 82: }
  4856                           ;audio.c: 83: cnt++;
  4857  08EE  0AC4               	incf	Audio_GetValue@cnt,f
  4858  08EF  1903               	skipnz
  4859  08F0  0AC5               	incf	Audio_GetValue@cnt+1,f
  4860                           
  4861                           ;audio.c: 84: if ( cnt >= 256 )
  4862  08F1  3001               	movlw	1
  4863  08F2  0245               	subwf	Audio_GetValue@cnt+1,w
  4864  08F3  3000               	movlw	0
  4865  08F4  1903               	skipnz
  4866  08F5  0244               	subwf	Audio_GetValue@cnt,w
  4867  08F6  1C03               	skipc
  4868  08F7  0008               	return
  4869                           
  4870                           ;audio.c: 85: {
  4871                           ;audio.c: 86: cnt = 0;
  4872  08F8  01C4               	clrf	Audio_GetValue@cnt
  4873  08F9  01C5               	clrf	Audio_GetValue@cnt+1
  4874                           
  4875                           ;audio.c: 87: (INTCONbits.GIE = 0);
  4876  08FA  138B               	bcf	11,7	;volatile
  4877                           
  4878                           ;audio.c: 88: audio_value = ( audio_value * 15 + max - min ) >> 4;
  4879  08FB  084B               	movf	_audio_value+1,w	;volatile
  4880  08FC  00AE               	movwf	___wmul@multiplier+1
  4881  08FD  084A               	movf	_audio_value,w	;volatile
  4882  08FE  00AD               	movwf	___wmul@multiplier
  4883  08FF  300F               	movlw	15
  4884  0900  00AF               	movwf	___wmul@multiplicand
  4885  0901  01B0               	clrf	___wmul@multiplicand+1
  4886  0902  3195  2569         	fcall	___wmul
  4887  0904  0846               	movf	Audio_GetValue@min,w
  4888  0905  022D               	subwf	?___wmul,w
  4889  0906  00B3               	movwf	??_Audio_GetValue
  4890  0907  0847               	movf	Audio_GetValue@min+1,w
  4891  0908  3B2E               	subwfb	?___wmul+1,w
  4892  0909  00B4               	movwf	??_Audio_GetValue+1
  4893  090A  0848               	movf	Audio_GetValue@max,w
  4894  090B  0733               	addwf	??_Audio_GetValue,w
  4895  090C  00B5               	movwf	??_Audio_GetValue+2
  4896  090D  0849               	movf	Audio_GetValue@max+1,w
  4897  090E  3D34               	addwfc	??_Audio_GetValue+1,w
  4898  090F  00B6               	movwf	??_Audio_GetValue+3
  4899  0910  0E35               	swapf	??_Audio_GetValue+2,w
  4900  0911  390F               	andlw	15
  4901  0912  00CA               	movwf	_audio_value	;volatile
  4902  0913  0E36               	swapf	??_Audio_GetValue+3,w
  4903  0914  39F0               	andlw	240
  4904  0915  04CA               	iorwf	_audio_value,f	;volatile
  4905  0916  0E36               	swapf	??_Audio_GetValue+3,w
  4906  0917  390F               	andlw	15
  4907  0918  00CB               	movwf	_audio_value+1	;volatile
  4908                           
  4909                           ;audio.c: 89: (INTCONbits.GIE = 1);
  4910  0919  178B               	bsf	11,7	;volatile
  4911  091A  0008               	return
  4912  091B                     __end_of_Audio_GetValue:	
  4913  091B                     __ptext67:	
  4914 ;; *************** function _ADC_Conversion *****************
  4915 ;; Defined at:
  4916 ;;		line 23 in file "driver/src/adc.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;  chn             1    wreg     unsigned char 
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  chn             1   16[BANK0 ] unsigned char 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;                  2   13[BANK0 ] unsigned int 
  4923 ;; Registers used:
  4924 ;;		wreg, status,2, status,0
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 1F/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4930 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;Total ram usage:        4 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:    7
  4937 ;; This function calls:
  4938 ;;		Nothing
  4939 ;; This function is called by:
  4940 ;;		_Audio_GetValue
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           
  4945                           ;psect for function _ADC_Conversion
  4946  091B                     _ADC_Conversion:	
  4947                           
  4948                           ;incstack = 0
  4949                           ; Regs used in _ADC_Conversion: [wreg+status,2+status,0]
  4950                           ;ADC_Conversion@chn stored from wreg
  4951  091B  0020               	movlb	0	; select bank0
  4952  091C  00B0               	movwf	ADC_Conversion@chn
  4953                           
  4954                           ;adc.c: 25: ADCON0bits.CHS = chn;
  4955  091D  00AF               	movwf	??_ADC_Conversion
  4956  091E  0DAF               	rlf	??_ADC_Conversion,f
  4957  091F  0DAF               	rlf	??_ADC_Conversion,f
  4958  0920  0021               	movlb	1	; select bank1
  4959  0921  081D               	movf	29,w	;volatile
  4960  0922  0020               	movlb	0	; select bank0
  4961  0923  062F               	xorwf	??_ADC_Conversion,w
  4962  0924  3903               	andlw	-253
  4963  0925  062F               	xorwf	??_ADC_Conversion,w
  4964  0926  0021               	movlb	1	; select bank1
  4965  0927  009D               	movwf	29	;volatile
  4966                           
  4967                           ;adc.c: 26: ADCON0bits.ADON = 1;
  4968  0928  141D               	bsf	29,0	;volatile
  4969                           
  4970                           ;adc.c: 27: _delay((unsigned long)((4)*(16000000/4000000.0)));
  4971  0929  3005               	movlw	5
  4972  092A                     u6817:	
  4973  092A  0B89               	decfsz	9,f
  4974  092B  292A               	goto	u6817
  4975  092C  0000               	nop
  4976                           
  4977                           ;adc.c: 28: ADCON0bits.GO_nDONE = 1;
  4978  092D  0021               	movlb	1	; select bank1
  4979  092E  149D               	bsf	29,1	;volatile
  4980  092F                     l26:	
  4981                           ;adc.c: 29: while ( !PIR1bits.ADIF );
  4982                           
  4983  092F  0020               	movlb	0	; select bank0
  4984  0930  1F11               	btfss	17,6	;volatile
  4985  0931  292F               	goto	l26
  4986                           
  4987                           ;adc.c: 30: PIR1bits.ADIF = 0;
  4988  0932  1311               	bcf	17,6	;volatile
  4989                           
  4990                           ;adc.c: 31: return ADRES;
  4991  0933  0021               	movlb	1	; select bank1
  4992  0934  081C               	movf	28,w	;volatile
  4993  0935  0020               	movlb	0	; select bank0
  4994  0936  00AE               	movwf	?_ADC_Conversion+1
  4995  0937  0021               	movlb	1	; select bank1
  4996  0938  081B               	movf	27,w	;volatile
  4997  0939  0020               	movlb	0	; select bank0
  4998  093A  00AD               	movwf	?_ADC_Conversion
  4999  093B  0008               	return
  5000  093C                     __end_of_ADC_Conversion:	
  5001  093C                     __ptext51:	
  5002 ;; *************** function _Led_Initialize *****************
  5003 ;; Defined at:
  5004 ;;		line 88 in file "user/src/led.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;		None
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;  i               1   28[BANK0 ] unsigned char 
  5009 ;;  result          1   25[BANK0 ] unsigned char 
  5010 ;;  ct              2   26[BANK0 ] unsigned int 
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      void 
  5013 ;; Registers used:
  5014 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 16/0
  5017 ;;		On exit  : 1E/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5021 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5022 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5023 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5024 ;;Total ram usage:       10 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    9
  5027 ;; This function calls:
  5028 ;;		_Audio_SetPlayMode
  5029 ;;		_Audio_SetVolume
  5030 ;;		_Audio_StopSound
  5031 ;;		_Led_TurnOffRamp
  5032 ;;		_Led_TurnOnRamp
  5033 ;;		_Led_UpdateBright
  5034 ;;		_RTC_GetTime
  5035 ;;		___wmul
  5036 ;; This function is called by:
  5037 ;;		_main
  5038 ;;		_IR_ExitSet
  5039 ;;		_IR_ExitTimeout
  5040 ;;		_IR_KeyAction
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           
  5045                           ;psect for function _Led_Initialize
  5046  093C                     _Led_Initialize:	
  5047  093C                     l6156:	
  5048                           ;incstack = 0
  5049                           ; Regs used in _Led_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5050                           
  5051                           
  5052                           ;led.c: 89: _delay((unsigned long)((640)*(16000000/4000.0)));
  5053  093C  300D               	movlw	13
  5054  093D  0020               	movlb	0	; select bank0
  5055  093E  00B4               	movwf	??_Led_Initialize+1
  5056  093F  30FD               	movlw	253
  5057  0940  00B3               	movwf	??_Led_Initialize
  5058  0941  30A2               	movlw	162
  5059  0942                     u6777:	
  5060  0942  0B89               	decfsz	9,f
  5061  0943  2942               	goto	u6777
  5062  0944  0BB3               	decfsz	??_Led_Initialize,f
  5063  0945  2942               	goto	u6777
  5064  0946  0BB4               	decfsz	??_Led_Initialize+1,f
  5065  0947  2942               	goto	u6777
  5066  0948  0000               	nop
  5067  0949  0064               	clrwdt	;# 
  5068                           
  5069                           ;led.c: 91: Audio_StopSound();
  5070  094A  3195  2557  3188   	fcall	_Audio_StopSound
  5071                           
  5072                           ;led.c: 92: _delay((unsigned long)((64)*(16000000/4000.0)));
  5073  094D  3002               	movlw	2
  5074  094E  0020               	movlb	0	; select bank0
  5075  094F  00B4               	movwf	??_Led_Initialize+1
  5076  0950  304D               	movlw	77
  5077  0951  00B3               	movwf	??_Led_Initialize
  5078  0952  3074               	movlw	116
  5079  0953                     u6787:	
  5080  0953  0B89               	decfsz	9,f
  5081  0954  2953               	goto	u6787
  5082  0955  0BB3               	decfsz	??_Led_Initialize,f
  5083  0956  2953               	goto	u6787
  5084  0957  0BB4               	decfsz	??_Led_Initialize+1,f
  5085  0958  2953               	goto	u6787
  5086  0959  0000               	nop
  5087                           
  5088                           ;led.c: 93: Audio_SetVolume(gLedPara.mVolOn ? VOLUME[ gLedPara.mVolume ] : 0);
  5089  095A  3187  2791  3188   	fcall	PL108	;call to abstracted procedure
  5090  095D  1901               	btfsc	1,2
  5091  095E  2962               	goto	l6166
  5092  095F  0020               	movlb	0	; select bank0
  5093  0960  01B7               	clrf	_Led_Initialize$1218
  5094  0961  2968               	goto	L18
  5095  0962                     l6166:	
  5096  0962  307B               	movlw	123
  5097  0963  3196  26E2  3188   	fcall	PL18	;call to abstracted procedure
  5098  0966  0020               	movlb	0	; select bank0
  5099  0967  00B7               	movwf	_Led_Initialize$1218
  5100  0968                     L18:	
  5101  0968  01B8               	clrf	_Led_Initialize$1218+1
  5102  0969  0837               	movf	_Led_Initialize$1218,w
  5103  096A  3196  2601  3188   	fcall	_Audio_SetVolume
  5104                           
  5105                           ;led.c: 94: _delay((unsigned long)((64)*(16000000/4000.0)));
  5106  096D  3002               	movlw	2
  5107  096E  0020               	movlb	0	; select bank0
  5108  096F  00B4               	movwf	??_Led_Initialize+1
  5109  0970  304D               	movlw	77
  5110  0971  00B3               	movwf	??_Led_Initialize
  5111  0972  3074               	movlw	116
  5112  0973                     u6797:	
  5113  0973  0B89               	decfsz	9,f
  5114  0974  2973               	goto	u6797
  5115  0975  0BB3               	decfsz	??_Led_Initialize,f
  5116  0976  2973               	goto	u6797
  5117  0977  0BB4               	decfsz	??_Led_Initialize+1,f
  5118  0978  2973               	goto	u6797
  5119  0979  0000               	nop
  5120                           
  5121                           ;led.c: 95: Audio_SetPlayMode(0x02);
  5122  097A  3002               	movlw	2
  5123  097B  3196  2617  3188   	fcall	_Audio_SetPlayMode
  5124                           
  5125                           ;led.c: 96: _delay((unsigned long)((64)*(16000000/4000.0)));
  5126  097E  3002               	movlw	2
  5127  097F  0020               	movlb	0	; select bank0
  5128  0980  00B4               	movwf	??_Led_Initialize+1
  5129  0981  304D               	movlw	77
  5130  0982  00B3               	movwf	??_Led_Initialize
  5131  0983  3074               	movlw	116
  5132  0984                     u6807:	
  5133  0984  0B89               	decfsz	9,f
  5134  0985  2984               	goto	u6807
  5135  0986  0BB3               	decfsz	??_Led_Initialize,f
  5136  0987  2984               	goto	u6807
  5137  0988  0BB4               	decfsz	??_Led_Initialize+1,f
  5138  0989  2984               	goto	u6807
  5139  098A  0000               	nop
  5140                           
  5141                           ;led.c: 97: uint16_t ct = RTC_GetTime()->hour * 60u + RTC_GetTime()->minute;
  5142  098B  227A  3188         	fcall	_RTC_GetTime
  5143  098D  2651               	fcall	PL114	;call to abstracted procedure
  5144  098E  3195  2569  3188   	fcall	___wmul
  5145  0991  082E               	movf	?___wmul+1,w
  5146  0992  00BB               	movwf	Led_Initialize@ct+1
  5147  0993  082D               	movf	?___wmul,w
  5148  0994  00BA               	movwf	Led_Initialize@ct
  5149  0995  227A               	fcall	_RTC_GetTime
  5150  0996  0020               	movlb	0	; select bank0
  5151  0997  00B3               	movwf	??_Led_Initialize
  5152  0998  3E01               	addlw	1
  5153  0999  0086               	movwf	6
  5154  099A  0187               	clrf	7
  5155  099B  0801               	movf	1,w
  5156  099C  07BA               	addwf	Led_Initialize@ct,f
  5157  099D  1803               	skipnc
  5158  099E  0ABB               	incf	Led_Initialize@ct+1,f
  5159                           
  5160                           ;led.c: 98: if (!gLedPara.mAuto) {
  5161  099F  3187  2791  3188   	fcall	PL108	;call to abstracted procedure
  5162  09A2  1801               	btfsc	1,0
  5163  09A3  2A10               	goto	l6206
  5164                           
  5165                           ;led.c: 99: if (!gLedPara.mOn) {
  5166  09A4  307B               	movlw	123
  5167  09A5  0086               	movwf	6
  5168  09A6  1881               	btfsc	1,1
  5169  09A7  29A9               	goto	l6186
  5170                           
  5171                           ;led.c: 100: Led_TurnOffRamp();
  5172  09A8  2A7B               	ljmp	l6088
  5173  09A9                     l6186:	
  5174                           ;led.c: 101: } else {
  5175                           
  5176                           
  5177                           ;led.c: 102: if (gLedPara.mMsc) {
  5178  09A9  307B               	movlw	123
  5179  09AA  0086               	movwf	6
  5180  09AB  3023               	movlw	35
  5181  09AC  0087               	movwf	7
  5182  09AD  2685  3188         	fcall	PL148	;call to abstracted procedure
  5183  09AF  1903               	skipnz
  5184  09B0  2A0E               	goto	l6204
  5185                           
  5186                           ;led.c: 103: gLedRunPara.music_index = gLedPara.mMsc;
  5187  09B1  307B               	movlw	123
  5188  09B2  0086               	movwf	6
  5189  09B3  3023               	movlw	35
  5190  09B4  2685  3188         	fcall	PL148	;call to abstracted procedure
  5191  09B6  0021               	movlb	1	; select bank1
  5192  09B7  00E2               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
  5193                           
  5194                           ;led.c: 104: gLedRunPara.music_state = 1;
  5195  09B8  3001               	movlw	1
  5196  09B9  00E3               	movwf	(_gLedRunPara^(0+128)+25)	;volatile
  5197                           
  5198                           ;led.c: 105: switch (gLedPara.mMsc) {
  5199  09BA  307B               	movlw	123
  5200  09BB  0086               	movwf	6
  5201  09BC  3023               	movlw	35
  5202  09BD  0087               	movwf	7
  5203  09BE  0C01               	rrf	1,w
  5204  09BF  0020               	movlb	0	; select bank0
  5205  09C0  00B3               	movwf	??_Led_Initialize
  5206  09C1  0CB3               	rrf	??_Led_Initialize,f
  5207  09C2  0C33               	rrf	??_Led_Initialize,w
  5208  09C3  390F               	andlw	15
  5209                           
  5210                           ; Switch size 1, requested type "space"
  5211                           ; Number of cases is 4, Range of values is 1 to 4
  5212                           ; switch strategies available:
  5213                           ; Name         Instructions Cycles
  5214                           ; simple_byte           13     7 (average)
  5215                           ; direct_byte           17     9 (fixed)
  5216                           ; jumptable            263     9 (fixed)
  5217                           ;	Chosen strategy is simple_byte
  5218  09C4  3A01               	xorlw	1	; case 1
  5219  09C5  1903               	skipnz
  5220  09C6  29D1               	goto	l6192
  5221  09C7  3A03               	xorlw	3	; case 2
  5222  09C8  1903               	skipnz
  5223  09C9  29E4               	goto	l6194
  5224  09CA  3A01               	xorlw	1	; case 3
  5225  09CB  1903               	skipnz
  5226  09CC  29F2               	goto	l6196
  5227  09CD  3A07               	xorlw	7	; case 4
  5228  09CE  1903               	skipnz
  5229  09CF  2A00               	goto	l6198
  5230  09D0  2A0F               	goto	l638
  5231  09D1                     l6192:	
  5232                           
  5233                           ;led.c: 107: gLedRunPara.mTargetBright[0] = gLedPara.mStaticDayBright[0];
  5234  09D1  30B0               	movlw	176
  5235  09D2  261A               	fcall	PL48	;call to abstracted procedure
  5236                           
  5237                           ;led.c: 108: gLedRunPara.mTargetBright[1] = gLedPara.mStaticDayBright[0];
  5238  09D3  3F40               	moviw [0]fsr1
  5239  09D4  00D6               	movwf	(_gLedRunPara^(0+128)+12)	;volatile
  5240  09D5  3F41               	moviw [1]fsr1
  5241  09D6  00D7               	movwf	((_gLedRunPara+1)^(0+128)+12)	;volatile
  5242                           
  5243                           ;led.c: 109: gLedRunPara.mTargetBright[2] = gLedPara.mStaticDayBright[0];
  5244  09D7  3F40               	moviw [0]fsr1
  5245  09D8  00D8               	movwf	(_gLedRunPara^(0+128)+14)	;volatile
  5246  09D9  3F41               	moviw [1]fsr1
  5247  09DA  00D9               	movwf	((_gLedRunPara+1)^(0+128)+14)	;volatile
  5248                           
  5249                           ;led.c: 110: gLedRunPara.mTargetBright[3] = gLedPara.mStaticDayBright[0];
  5250  09DB  3F40               	moviw [0]fsr1
  5251  09DC  00DA               	movwf	(_gLedRunPara^(0+128)+16)	;volatile
  5252  09DD  3F41               	moviw [1]fsr1
  5253  09DE  00DB               	movwf	((_gLedRunPara+1)^(0+128)+16)	;volatile
  5254                           
  5255                           ;led.c: 111: gLedRunPara.mTargetBright[4] = gLedPara.mStaticDayBright[0];
  5256  09DF  3F40               	moviw [0]fsr1
  5257  09E0  00DC               	movwf	(_gLedRunPara^(0+128)+18)	;volatile
  5258  09E1  3F41               	moviw [1]fsr1
  5259  09E2  00DD               	movwf	((_gLedRunPara+1)^(0+128)+18)	;volatile
  5260                           
  5261                           ;led.c: 113: break;
  5262  09E3  0008               	return
  5263  09E4                     l6194:	
  5264                           
  5265                           ;led.c: 115: gLedRunPara.mTargetBright[0] = gLedPara.mStaticNightBright[0];
  5266  09E4  30BA               	movlw	186
  5267  09E5  261A  3188         	fcall	PL48	;call to abstracted procedure
  5268                           
  5269                           ;led.c: 116: gLedRunPara.mTargetBright[1] = gLedPara.mStaticNightBright[1];
  5270  09E7  30BC               	movlw	188
  5271  09E8  2673  3188         	fcall	PL140	;call to abstracted procedure
  5272                           
  5273                           ;led.c: 117: gLedRunPara.mTargetBright[2] = gLedPara.mStaticNightBright[2];
  5274  09EA  30BE               	movlw	190
  5275  09EB  2679  3188         	fcall	PL142	;call to abstracted procedure
  5276                           
  5277                           ;led.c: 118: gLedRunPara.mTargetBright[3] = gLedPara.mStaticNightBright[3];
  5278  09ED  30C0               	movlw	192
  5279  09EE  267F  3188         	fcall	PL144	;call to abstracted procedure
  5280                           
  5281                           ;led.c: 119: gLedRunPara.mTargetBright[4] = gLedPara.mStaticNightBright[4];
  5282  09F0  30C2               	movlw	194
  5283                           
  5284                           ;led.c: 121: break;
  5285  09F1  2E65               	ljmp	PL118	;call to abstracted procedure
  5286  09F2                     l6196:	
  5287                           
  5288                           ;led.c: 123: gLedRunPara.mTargetBright[0] = gLedPara.mStaticFishBright[0];
  5289  09F2  30C4               	movlw	196
  5290  09F3  261A  3188         	fcall	PL48	;call to abstracted procedure
  5291                           
  5292                           ;led.c: 124: gLedRunPara.mTargetBright[1] = gLedPara.mStaticFishBright[1];
  5293  09F5  30C6               	movlw	198
  5294  09F6  2673  3188         	fcall	PL140	;call to abstracted procedure
  5295                           
  5296                           ;led.c: 125: gLedRunPara.mTargetBright[2] = gLedPara.mStaticFishBright[2];
  5297  09F8  30C8               	movlw	200
  5298  09F9  2679  3188         	fcall	PL142	;call to abstracted procedure
  5299                           
  5300                           ;led.c: 126: gLedRunPara.mTargetBright[3] = gLedPara.mStaticFishBright[3];
  5301  09FB  30CA               	movlw	202
  5302  09FC  267F  3188         	fcall	PL144	;call to abstracted procedure
  5303                           
  5304                           ;led.c: 127: gLedRunPara.mTargetBright[4] = gLedPara.mStaticFishBright[4];
  5305  09FE  30CC               	movlw	204
  5306                           
  5307                           ;led.c: 129: break;
  5308  09FF  2E65               	ljmp	PL118	;call to abstracted procedure
  5309  0A00                     l6198:	
  5310                           
  5311                           ;led.c: 131: gLedRunPara.mTargetBright[0] = gLedPara.mStaticPlantBright[0];
  5312  0A00  30CE               	movlw	206
  5313  0A01  261A  3188         	fcall	PL48	;call to abstracted procedure
  5314                           
  5315                           ;led.c: 132: gLedRunPara.mTargetBright[1] = gLedPara.mStaticPlantBright[1];
  5316  0A03  30D0               	movlw	208
  5317  0A04  2673  3188         	fcall	PL140	;call to abstracted procedure
  5318                           
  5319                           ;led.c: 133: gLedRunPara.mTargetBright[2] = gLedPara.mStaticPlantBright[2];
  5320  0A06  30D2               	movlw	210
  5321  0A07  2679  3188         	fcall	PL142	;call to abstracted procedure
  5322                           
  5323                           ;led.c: 134: gLedRunPara.mTargetBright[3] = gLedPara.mStaticPlantBright[3];
  5324  0A09  30D4               	movlw	212
  5325  0A0A  267F  3188         	fcall	PL144	;call to abstracted procedure
  5326                           
  5327                           ;led.c: 135: gLedRunPara.mTargetBright[4] = gLedPara.mStaticPlantBright[4];
  5328  0A0C  30D6               	movlw	214
  5329                           
  5330                           ;led.c: 137: break;
  5331  0A0D  2E65               	ljmp	PL118	;call to abstracted procedure
  5332  0A0E                     l6204:	
  5333                           
  5334                           ;led.c: 142: Led_TurnOnRamp();
  5335  0A0E  228E               	fcall	_Led_TurnOnRamp
  5336  0A0F                     l638:	
  5337                           
  5338                           ;led.c: 143: }
  5339                           ;led.c: 144: }
  5340                           ;led.c: 145: } else {
  5341  0A0F  0008               	return
  5342  0A10                     l6206:	
  5343  0A10  30E4               	movlw	228
  5344                           
  5345                           ;led.c: 146: bool result = 0;
  5346  0A11  01B9               	clrf	Led_Initialize@result
  5347                           
  5348                           ;led.c: 147: uint8_t i;
  5349                           ;led.c: 148: if (gLedPara.mSunrise < gLedPara.mSunset) {
  5350  0A12  2640  3188         	fcall	PL100	;call to abstracted procedure
  5351  0A14  00B4               	movwf	??_Led_Initialize+1
  5352  0A15  30D8               	movlw	216
  5353  0A16  2634  3188         	fcall	PL98	;call to abstracted procedure
  5354                           
  5355                           ;led.c: 149: if (ct >= gLedPara.mSunrise && ct < gLedPara.mSunset) {
  5356  0A18  30D8               	movlw	216
  5357  0A19  0086               	movwf	6
  5358  0A1A  3023               	movlw	35
  5359  0A1B  0087               	movwf	7
  5360  0A1C  1803               	skipnc
  5361  0A1D  2A2A               	goto	L20
  5362  0A1E  3F40               	moviw [0]fsr1
  5363  0A1F  00B3               	movwf	??_Led_Initialize
  5364  0A20  3F41               	moviw [1]fsr1
  5365  0A21  00B4               	movwf	??_Led_Initialize+1
  5366  0A22  023B               	subwf	Led_Initialize@ct+1,w
  5367  0A23  1D03               	skipz
  5368  0A24  2A27               	goto	u5285
  5369  0A25  0833               	movf	??_Led_Initialize,w
  5370  0A26  023A               	subwf	Led_Initialize@ct,w
  5371  0A27                     u5285:	
  5372  0A27  1C03               	skipc
  5373  0A28  2A4B               	goto	l6222
  5374  0A29  2A3E               	goto	L36
  5375  0A2A                     L20:	
  5376  0A2A  3F40               	moviw [0]fsr1
  5377  0A2B  00B3               	movwf	??_Led_Initialize
  5378  0A2C  3F41               	moviw [1]fsr1
  5379  0A2D  00B4               	movwf	??_Led_Initialize+1
  5380  0A2E  30E4               	movlw	228
  5381  0A2F  2634  3188         	fcall	PL98	;call to abstracted procedure
  5382  0A31  1803               	skipnc
  5383  0A32  2A4B               	goto	l6222
  5384                           
  5385                           ;led.c: 153: if (ct >= gLedPara.mSunrise || ct < gLedPara.mSunset) {
  5386  0A33  30D8               	movlw	216
  5387  0A34  2640  3188         	fcall	PL100	;call to abstracted procedure
  5388  0A36  00B4               	movwf	??_Led_Initialize+1
  5389  0A37  023B               	subwf	Led_Initialize@ct+1,w
  5390  0A38  1D03               	skipz
  5391  0A39  2A3C               	goto	u5315
  5392  0A3A  0833               	movf	??_Led_Initialize,w
  5393  0A3B  023A               	subwf	Led_Initialize@ct,w
  5394  0A3C                     u5315:	
  5395  0A3C  1803               	skipnc
  5396  0A3D  2A49               	goto	l6214
  5397  0A3E                     L36:	
  5398  0A3E  30E4               	movlw	228
  5399  0A3F  2640  3188         	fcall	PL100	;call to abstracted procedure
  5400  0A41  00B4               	movwf	??_Led_Initialize+1
  5401  0A42  023B               	subwf	Led_Initialize@ct+1,w
  5402  0A43  1D03               	skipz
  5403  0A44  2A47               	goto	u5325
  5404  0A45  0833               	movf	??_Led_Initialize,w
  5405  0A46  023A               	subwf	Led_Initialize@ct,w
  5406  0A47                     u5325:	
  5407  0A47  1803               	skipnc
  5408  0A48  2A4B               	goto	l6222
  5409  0A49                     l6214:	
  5410                           
  5411                           ;led.c: 150: result = 1;
  5412  0A49  01B9               	clrf	Led_Initialize@result
  5413  0A4A  0AB9               	incf	Led_Initialize@result,f
  5414  0A4B                     l6222:	
  5415                           
  5416                           ;led.c: 155: }
  5417                           ;led.c: 156: }
  5418                           ;led.c: 157: if (result) {
  5419  0A4B  0839               	movf	Led_Initialize@result,w
  5420  0A4C  1903               	btfsc	3,2
  5421  0A4D  2A64               	goto	l6236
  5422                           
  5423                           ;led.c: 158: for (i = 0; i < 5; i++) {
  5424  0A4E  01BC               	clrf	Led_Initialize@i
  5425  0A4F                     l6230:	
  5426                           
  5427                           ;led.c: 159: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
  5428  0A4F  083C               	movf	Led_Initialize@i,w
  5429  0A50  00B3               	movwf	??_Led_Initialize
  5430  0A51  30DA               	movlw	218
  5431  0A52  25F0  3188         	fcall	PL20	;call to abstracted procedure
  5432  0A54  25FE  3188         	fcall	PL22	;call to abstracted procedure
  5433                           
  5434                           ;led.c: 160: gLedRunPara.mCurrentBright[i] = gLedPara.mDayBright[i];
  5435  0A56  083C               	movf	Led_Initialize@i,w
  5436  0A57  00B3               	movwf	??_Led_Initialize
  5437  0A58  30DA               	movlw	218
  5438  0A59  25F0  3188         	fcall	PL20	;call to abstracted procedure
  5439  0A5B  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
  5440  0A5C  0084               	movwf	4
  5441  0A5D  2623  3188         	fcall	PL56	;call to abstracted procedure
  5442  0A5F  0ABC               	incf	Led_Initialize@i,f
  5443  0A60  023C               	subwf	Led_Initialize@i,w
  5444  0A61  1803               	btfsc	3,0
  5445  0A62  2A79               	goto	l6248
  5446  0A63  2A4F               	goto	l6230
  5447  0A64                     l6236:	
  5448                           
  5449                           ;led.c: 163: for (i = 0; i < 5; i++) {
  5450  0A64  01BC               	clrf	Led_Initialize@i
  5451  0A65                     l6242:	
  5452                           
  5453                           ;led.c: 164: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
  5454  0A65  083C               	movf	Led_Initialize@i,w
  5455  0A66  00B3               	movwf	??_Led_Initialize
  5456  0A67  30E6               	movlw	230
  5457  0A68  25F0  3188         	fcall	PL20	;call to abstracted procedure
  5458  0A6A  25FE  3188         	fcall	PL22	;call to abstracted procedure
  5459                           
  5460                           ;led.c: 165: gLedRunPara.mCurrentBright[i] = gLedPara.mNightBright[i];
  5461  0A6C  083C               	movf	Led_Initialize@i,w
  5462  0A6D  00B3               	movwf	??_Led_Initialize
  5463  0A6E  30E6               	movlw	230
  5464  0A6F  25F0  3188         	fcall	PL20	;call to abstracted procedure
  5465  0A71  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
  5466  0A72  0084               	movwf	4
  5467  0A73  2623  3188         	fcall	PL56	;call to abstracted procedure
  5468  0A75  0ABC               	incf	Led_Initialize@i,f
  5469  0A76  023C               	subwf	Led_Initialize@i,w
  5470  0A77  1C03               	skipc
  5471  0A78  2A65               	goto	l6242
  5472  0A79                     l6248:	
  5473                           
  5474                           ;led.c: 166: }
  5475                           ;led.c: 167: }
  5476                           ;led.c: 168: Led_UpdateBright();
  5477  0A79  2AAA               	ljmp	l6116
  5478  0A7A                     __end_of_Led_Initialize:	
  5479  0A7A                     __ptext52:	
  5480 ;; *************** function _RTC_GetTime *****************
  5481 ;; Defined at:
  5482 ;;		line 14 in file "user/src/rtc.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;		None
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;		None
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  1    wreg      PTR struct .
  5489 ;; Registers used:
  5490 ;;		wreg
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;Total ram usage:        0 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:    7
  5503 ;; This function calls:
  5504 ;;		Nothing
  5505 ;; This function is called by:
  5506 ;;		_Led_Initialize
  5507 ;;		_Led_CheckAutoStatus
  5508 ;;		_IR_KeyAction
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           
  5513                           ;psect for function _RTC_GetTime
  5514  0A7A                     _RTC_GetTime:	
  5515                           
  5516                           ;rtc.c: 16: return &rtc_time;
  5517                           
  5518                           ;incstack = 0
  5519                           ; Regs used in _RTC_GetTime: [wreg]
  5520  0A7A  345B               	retlw	(low (_rtc_time| 0))& (0+255)
  5521  0A7B                     __end_of_RTC_GetTime:	
  5522  0A7B                     __ptext60:	
  5523 ;; *************** function _Led_TurnOffRamp *****************
  5524 ;; Defined at:
  5525 ;;		line 208 in file "user/src/led.c"
  5526 ;; Parameters:    Size  Location     Type
  5527 ;;		None
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  i               1   13[BANK0 ] unsigned char 
  5530 ;; Return value:  Size  Location     Type
  5531 ;;                  1    wreg      void 
  5532 ;; Registers used:
  5533 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5534 ;; Tracked objects:
  5535 ;;		On entry : 1F/0
  5536 ;;		On exit  : 1F/0
  5537 ;;		Unchanged: 0/0
  5538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;Total ram usage:        1 bytes
  5544 ;; Hardware stack levels used:    1
  5545 ;; Hardware stack levels required when called:    7
  5546 ;; This function calls:
  5547 ;;		Nothing
  5548 ;; This function is called by:
  5549 ;;		_Led_Initialize
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           
  5554                           ;psect for function _Led_TurnOffRamp
  5555  0A7B                     _Led_TurnOffRamp:	
  5556  0A7B                     l6088:	
  5557                           ;incstack = 0
  5558                           ; Regs used in _Led_TurnOffRamp: [wreg+fsr1l+fsr1h+status,2+status,0]
  5559                           
  5560                           
  5561                           ;led.c: 209: gLedPara.mOn = 0;
  5562  0A7B  307B               	movlw	123
  5563  0A7C  0086               	movwf	6
  5564  0A7D  3023               	movlw	35
  5565  0A7E  0087               	movwf	7
  5566  0A7F  1081               	bcf	1,1
  5567                           
  5568                           ;led.c: 210: for (uint8_t i = 0; i < 5; i++) {
  5569  0A80  01AD               	clrf	Led_TurnOffRamp@i
  5570  0A81                     l6096:	
  5571                           
  5572                           ;led.c: 211: gLedRunPara.mTargetBright[i] = 0;
  5573  0A81  352D               	lslf	Led_TurnOffRamp@i,w
  5574  0A82  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  5575  0A83  0086               	movwf	6
  5576  0A84  3000               	movlw	0
  5577  0A85  0187               	clrf	7
  5578  0A86  3FC0               	movwi [0]fsr1
  5579  0A87  3FC1               	movwi [1]fsr1
  5580  0A88  3005               	movlw	5
  5581  0A89  0AAD               	incf	Led_TurnOffRamp@i,f
  5582  0A8A  022D               	subwf	Led_TurnOffRamp@i,w
  5583  0A8B  1803               	btfsc	3,0
  5584  0A8C  0008               	return
  5585  0A8D  2A81               	goto	l6096
  5586  0A8E                     __end_of_Led_TurnOffRamp:	
  5587  0A8E                     __ptext59:	
  5588 ;; *************** function _Led_TurnOnRamp *****************
  5589 ;; Defined at:
  5590 ;;		line 201 in file "user/src/led.c"
  5591 ;; Parameters:    Size  Location     Type
  5592 ;;		None
  5593 ;; Auto vars:     Size  Location     Type
  5594 ;;  i               1   17[BANK0 ] unsigned char 
  5595 ;; Return value:  Size  Location     Type
  5596 ;;                  1    wreg      void 
  5597 ;; Registers used:
  5598 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5599 ;; Tracked objects:
  5600 ;;		On entry : 1F/0
  5601 ;;		On exit  : 1F/0
  5602 ;;		Unchanged: 0/0
  5603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5605 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5606 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5607 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5608 ;;Total ram usage:        5 bytes
  5609 ;; Hardware stack levels used:    1
  5610 ;; Hardware stack levels required when called:    7
  5611 ;; This function calls:
  5612 ;;		Nothing
  5613 ;; This function is called by:
  5614 ;;		_Led_Initialize
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           
  5619                           ;psect for function _Led_TurnOnRamp
  5620  0A8E                     _Led_TurnOnRamp:	
  5621                           
  5622                           ;led.c: 202: gLedPara.mOn = 1;
  5623                           
  5624                           ;incstack = 0
  5625                           ; Regs used in _Led_TurnOnRamp: [wreg-fsr1h+status,2+status,0]
  5626  0A8E  3197  27EB  3188   	fcall	PL156	;call to abstracted procedure
  5627                           
  5628                           ;led.c: 203: for (uint8_t i = 0; i < 5; i++) {
  5629  0A91  01B1               	clrf	Led_TurnOnRamp@i
  5630  0A92                     l6110:	
  5631                           
  5632                           ;led.c: 204: gLedRunPara.mTargetBright[i] = gLedPara.mBright[i];
  5633  0A92  0831               	movf	Led_TurnOnRamp@i,w
  5634  0A93  00AD               	movwf	??_Led_TurnOnRamp
  5635  0A94  307E               	movlw	126
  5636  0A95  01AE               	clrf	??_Led_TurnOnRamp+1
  5637  0A96  35AD               	lslf	??_Led_TurnOnRamp,f
  5638  0A97  0DAE               	rlf	??_Led_TurnOnRamp+1,f
  5639  0A98  00AF               	movwf	??_Led_TurnOnRamp+2
  5640  0A99  3023               	movlw	35
  5641  0A9A  00B0               	movwf	??_Led_TurnOnRamp+3
  5642  0A9B  082D               	movf	??_Led_TurnOnRamp,w
  5643  0A9C  072F               	addwf	??_Led_TurnOnRamp+2,w
  5644  0A9D  0086               	movwf	6
  5645  0A9E  082E               	movf	??_Led_TurnOnRamp+1,w
  5646  0A9F  3D30               	addwfc	??_Led_TurnOnRamp+3,w
  5647  0AA0  0087               	movwf	7
  5648  0AA1  3531               	lslf	Led_TurnOnRamp@i,w
  5649  0AA2  25FE  3188         	fcall	PL22	;call to abstracted procedure
  5650  0AA4  3005               	movlw	5
  5651  0AA5  0AB1               	incf	Led_TurnOnRamp@i,f
  5652  0AA6  0231               	subwf	Led_TurnOnRamp@i,w
  5653  0AA7  1803               	btfsc	3,0
  5654  0AA8  0008               	return
  5655  0AA9  2A92               	goto	l6110
  5656  0AAA                     __end_of_Led_TurnOnRamp:	
  5657  0AAA                     __ptext53:	
  5658 ;; *************** function _Led_UpdateBright *****************
  5659 ;; Defined at:
  5660 ;;		line 179 in file "user/src/led.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;		None
  5663 ;; Auto vars:     Size  Location     Type
  5664 ;;  i               1   17[BANK0 ] unsigned char 
  5665 ;; Return value:  Size  Location     Type
  5666 ;;                  1    wreg      void 
  5667 ;; Registers used:
  5668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5669 ;; Tracked objects:
  5670 ;;		On entry : 1E/1
  5671 ;;		On exit  : 1F/0
  5672 ;;		Unchanged: 0/0
  5673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5678 ;;Total ram usage:        1 bytes
  5679 ;; Hardware stack levels used:    1
  5680 ;; Hardware stack levels required when called:    8
  5681 ;; This function calls:
  5682 ;;		_PWM1_LoadDutyValue
  5683 ;;		_PWM2_LoadDutyValue
  5684 ;;		_PWM3_LoadDutyValue
  5685 ;;		_PWM4_LoadDutyValue
  5686 ;;		_PWM5_LoadDutyValue
  5687 ;; This function is called by:
  5688 ;;		_Led_Initialize
  5689 ;;		_Led_CheckAutoStatus
  5690 ;;		_Led_AutoRun
  5691 ;; This function uses a non-reentrant model
  5692 ;;
  5693                           
  5694                           
  5695                           ;psect for function _Led_UpdateBright
  5696  0AAA                     _Led_UpdateBright:	
  5697  0AAA                     l6116:	
  5698                           ;incstack = 0
  5699                           ; Regs used in _Led_UpdateBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5700                           
  5701                           
  5702                           ;led.c: 180: for (uint8_t i = 0; i < 5; i++) {
  5703  0AAA  0020               	movlb	0	; select bank0
  5704  0AAB  01B1               	clrf	Led_UpdateBright@i
  5705  0AAC                     l6122:	
  5706                           
  5707                           ;led.c: 181: loadDuty[i](gLedRunPara.mCurrentBright[i]);
  5708  0AAC  3531               	lslf	Led_UpdateBright@i,w
  5709  0AAD  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
  5710  0AAE  0086               	movwf	6
  5711  0AAF  0187               	clrf	7
  5712  0AB0  3F40               	moviw [0]fsr1
  5713  0AB1  00AD               	movwf	PWM5_LoadDutyValue@dutyValue
  5714  0AB2  3F41               	moviw [1]fsr1
  5715  0AB3  00AE               	movwf	PWM5_LoadDutyValue@dutyValue+1
  5716  0AB4  3531               	lslf	Led_UpdateBright@i,w
  5717  0AB5  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
  5718  0AB6  0086               	movwf	6
  5719  0AB7  3F41               	moviw [1]fsr1
  5720  0AB8  008A               	movwf	10
  5721  0AB9  3F40               	moviw [0]fsr1
  5722  0ABA  000A               	callw
  5723  0ABB  3188               	pagesel	$
  5724  0ABC  0020               	movlb	0	; select bank0
  5725  0ABD  3005               	movlw	5
  5726  0ABE  0AB1               	incf	Led_UpdateBright@i,f
  5727  0ABF  0231               	subwf	Led_UpdateBright@i,w
  5728  0AC0  1803               	btfsc	3,0
  5729  0AC1  0008               	return
  5730  0AC2  2AAC               	goto	l6122
  5731  0AC3                     __end_of_Led_UpdateBright:	
  5732  0AC3                     __ptext39:	
  5733 ;; *************** function _IR_KeyAtionIfPressed *****************
  5734 ;; Defined at:
  5735 ;;		line 739 in file "user/src/ir.c"
  5736 ;; Parameters:    Size  Location     Type
  5737 ;;		None
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;		None
  5740 ;; Return value:  Size  Location     Type
  5741 ;;                  1    wreg      void 
  5742 ;; Registers used:
  5743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5744 ;; Tracked objects:
  5745 ;;		On entry : 0/0
  5746 ;;		On exit  : 1F/0
  5747 ;;		Unchanged: 0/0
  5748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5753 ;;Total ram usage:        0 bytes
  5754 ;; Hardware stack levels used:    1
  5755 ;; Hardware stack levels required when called:   12
  5756 ;; This function calls:
  5757 ;;		_IR_KeyAction
  5758 ;; This function is called by:
  5759 ;;		_main
  5760 ;; This function uses a non-reentrant model
  5761 ;;
  5762                           
  5763                           
  5764                           ;psect for function _IR_KeyAtionIfPressed
  5765  0AC3                     _IR_KeyAtionIfPressed:	
  5766                           
  5767                           ;ir.c: 740: if (ir_state.mKeyRcv) {
  5768                           
  5769                           ;incstack = 0
  5770                           ; Regs used in _IR_KeyAtionIfPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5771  0AC3  0020               	movlb	0	; select bank0
  5772  0AC4  1C54               	btfss	_ir_state,0	;volatile
  5773  0AC5  0008               	return
  5774                           
  5775                           ;ir.c: 741: IR_KeyAction();
  5776  0AC6  3191  29AF         	ljmp	l6590
  5777  0AC8                     __end_of_IR_KeyAtionIfPressed:	
  5778  0AC8                     __ptext38:	
  5779 ;; *************** function _TMR1_StartTimer *****************
  5780 ;; Defined at:
  5781 ;;		line 21 in file "driver/src/tmr1.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;		None
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;		None
  5786 ;; Return value:  Size  Location     Type
  5787 ;;                  1    wreg      void 
  5788 ;; Registers used:
  5789 ;;		None
  5790 ;; Tracked objects:
  5791 ;;		On entry : 1E/0
  5792 ;;		On exit  : 1F/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5799 ;;Total ram usage:        0 bytes
  5800 ;; Hardware stack levels used:    1
  5801 ;; Hardware stack levels required when called:    7
  5802 ;; This function calls:
  5803 ;;		Nothing
  5804 ;; This function is called by:
  5805 ;;		_main
  5806 ;;		_IR_ResetIfTMR1Overflow
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809                           
  5810                           
  5811                           ;psect for function _TMR1_StartTimer
  5812  0AC8                     _TMR1_StartTimer:	
  5813  0AC8                     l4926:	
  5814                           ;incstack = 0
  5815                           ; Regs used in _TMR1_StartTimer: []
  5816                           
  5817                           
  5818                           ;tmr1.c: 23: T1CONbits.TMR1ON = 1;
  5819  0AC8  0020               	movlb	0	; select bank0
  5820  0AC9  141B               	bsf	27,0	;volatile
  5821  0ACA  0008               	return
  5822  0ACB                     __end_of_TMR1_StartTimer:	
  5823  0ACB                     __ptext36:	
  5824 ;; *************** function _IR_ResetIfTMR1Overflow *****************
  5825 ;; Defined at:
  5826 ;;		line 216 in file "user/src/ir.c"
  5827 ;; Parameters:    Size  Location     Type
  5828 ;;		None
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;		None
  5831 ;; Return value:  Size  Location     Type
  5832 ;;                  1    wreg      void 
  5833 ;; Registers used:
  5834 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 1F/0
  5837 ;;		On exit  : 1F/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5844 ;;Total ram usage:        0 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    8
  5847 ;; This function calls:
  5848 ;;		_TMR1_StartTimer
  5849 ;;		_TMR1_StopTimer
  5850 ;;		_TMR2_EnableInterrupt
  5851 ;; This function is called by:
  5852 ;;		_main
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           
  5857                           ;psect for function _IR_ResetIfTMR1Overflow
  5858  0ACB                     _IR_ResetIfTMR1Overflow:	
  5859                           
  5860                           ;ir.c: 217: if (PIR1bits.TMR1IF) {
  5861                           
  5862                           ;incstack = 0
  5863                           ; Regs used in _IR_ResetIfTMR1Overflow: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5864  0ACB  1C11               	btfss	17,0	;volatile
  5865  0ACC  0008               	return
  5866                           
  5867                           ;ir.c: 218: PIR1bits.TMR1IF = 0;
  5868  0ACD  1011               	bcf	17,0	;volatile
  5869                           
  5870                           ;ir.c: 219: TMR1_StopTimer();
  5871  0ACE  230A  3188         	fcall	_TMR1_StopTimer
  5872                           
  5873                           ;ir.c: 220: TMR1 = 0;
  5874  0AD0  0199               	clrf	25	;volatile
  5875  0AD1  019A               	clrf	26	;volatile
  5876                           
  5877                           ;ir.c: 221: ir_state.mState = 0;
  5878  0AD2  30E3               	movlw	-29
  5879  0AD3  05D4               	andwf	_ir_state,f	;volatile
  5880                           
  5881                           ;ir.c: 222: if (!ir_state.mKeyRpt) {
  5882  0AD4  1CD4               	btfss	_ir_state,1	;volatile
  5883  0AD5  2AD9               	goto	l7122
  5884  0AD6  2B05               	goto	l1039
  5885  0AD7                     l1044:	
  5886  0AD7                     l1054:	
  5887                           
  5888                           ;ir.c: 225: case 0x59:
  5889                           ;ir.c: 226: case 0x45:
  5890                           ;ir.c: 227: case 0x44:
  5891                           ;ir.c: 228: case 0x41:
  5892                           ;ir.c: 229: case 0x54:
  5893                           ;ir.c: 230: case 0x55:
  5894                           ;ir.c: 231: case 0x49:
  5895                           ;ir.c: 232: case 0x48:
  5896                           ;ir.c: 233: case 0x40:
  5897                           ;ir.c: 234: case 0x50:
  5898                           ;ir.c: 235: case 0x51:
  5899                           ;ir.c: 236: case 0x4D:
  5900                           ;ir.c: 237: case 0x4C:
  5901                           ;ir.c: 238: ir_state.mKeyRcv = 1;
  5902  0AD7  1454               	bsf	_ir_state,0	;volatile
  5903                           
  5904                           ;ir.c: 239: break;
  5905  0AD8  2B06               	goto	l7124
  5906  0AD9                     l7122:	
  5907  0AD9  084E               	movf	_keyValue,w	;volatile
  5908                           
  5909                           ; Switch size 1, requested type "space"
  5910                           ; Number of cases is 14, Range of values is 64 to 89
  5911                           ; switch strategies available:
  5912                           ; Name         Instructions Cycles
  5913                           ; simple_byte           43    22 (average)
  5914                           ; direct_byte           61     9 (fixed)
  5915                           ; jumptable            263     9 (fixed)
  5916                           ;	Chosen strategy is simple_byte
  5917  0ADA  3A40               	xorlw	64	; case 64
  5918  0ADB  1903               	skipnz
  5919  0ADC  2AD7               	goto	l1054
  5920  0ADD  3A01               	xorlw	1	; case 65
  5921  0ADE  1903               	skipnz
  5922  0ADF  2AD7               	goto	l1054
  5923  0AE0  3A05               	xorlw	5	; case 68
  5924  0AE1  1903               	skipnz
  5925  0AE2  2AD7               	goto	l1054
  5926  0AE3  3A01               	xorlw	1	; case 69
  5927  0AE4  1903               	skipnz
  5928  0AE5  2AD7               	goto	l1044
  5929  0AE6  3A0D               	xorlw	13	; case 72
  5930  0AE7  1903               	skipnz
  5931  0AE8  2AD7               	goto	l1054
  5932  0AE9  3A01               	xorlw	1	; case 73
  5933  0AEA  1903               	skipnz
  5934  0AEB  2AD7               	goto	l1054
  5935  0AEC  3A05               	xorlw	5	; case 76
  5936  0AED  1903               	skipnz
  5937  0AEE  2AD7               	goto	l1054
  5938  0AEF  3A01               	xorlw	1	; case 77
  5939  0AF0  1903               	skipnz
  5940  0AF1  2AD7               	goto	l1054
  5941  0AF2  3A1D               	xorlw	29	; case 80
  5942  0AF3  1903               	skipnz
  5943  0AF4  2AD7               	goto	l1054
  5944  0AF5  3A01               	xorlw	1	; case 81
  5945  0AF6  1903               	skipnz
  5946  0AF7  2AD7               	goto	l1054
  5947  0AF8  3A05               	xorlw	5	; case 84
  5948  0AF9  1903               	skipnz
  5949  0AFA  2AD7               	goto	l1054
  5950  0AFB  3A01               	xorlw	1	; case 85
  5951  0AFC  1903               	skipnz
  5952  0AFD  2AD7               	goto	l1054
  5953  0AFE  3A0D               	xorlw	13	; case 88
  5954  0AFF  1903               	skipnz
  5955  0B00  2AD7               	goto	l1044
  5956  0B01  3A01               	xorlw	1	; case 89
  5957  0B02  1903               	skipnz
  5958  0B03  2AD7               	goto	l1044
  5959  0B04  2B06               	goto	l7124
  5960  0B05                     l1039:	
  5961                           
  5962                           ;ir.c: 244: ir_state.mKeyRpt = 0;
  5963  0B05  10D4               	bcf	_ir_state,1	;volatile
  5964  0B06                     l7124:	
  5965                           
  5966                           ;ir.c: 245: }
  5967                           ;ir.c: 246: TMR2_EnableInterrupt();
  5968  0B06  3196  26BB  3188   	fcall	_TMR2_EnableInterrupt
  5969                           
  5970                           ;ir.c: 247: TMR1_StartTimer();
  5971  0B09  2AC8               	ljmp	l4926
  5972  0B0A                     __end_of_IR_ResetIfTMR1Overflow:	
  5973  0B0A                     __ptext37:	
  5974 ;; *************** function _TMR1_StopTimer *****************
  5975 ;; Defined at:
  5976 ;;		line 26 in file "driver/src/tmr1.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;		None
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;		None
  5981 ;; Return value:  Size  Location     Type
  5982 ;;                  1    wreg      void 
  5983 ;; Registers used:
  5984 ;;		None
  5985 ;; Tracked objects:
  5986 ;;		On entry : 1F/0
  5987 ;;		On exit  : 1F/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5994 ;;Total ram usage:        0 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; Hardware stack levels required when called:    7
  5997 ;; This function calls:
  5998 ;;		Nothing
  5999 ;; This function is called by:
  6000 ;;		_IR_ResetIfTMR1Overflow
  6001 ;; This function uses a non-reentrant model
  6002 ;;
  6003                           
  6004                           
  6005                           ;psect for function _TMR1_StopTimer
  6006  0B0A                     _TMR1_StopTimer:	
  6007                           
  6008                           ;tmr1.c: 28: T1CONbits.TMR1ON = 0;
  6009                           
  6010                           ;incstack = 0
  6011                           ; Regs used in _TMR1_StopTimer: []
  6012  0B0A  101B               	bcf	27,0	;volatile
  6013  0B0B  0008               	return
  6014  0B0C                     __end_of_TMR1_StopTimer:	
  6015  0B0C                     __ptext34:	
  6016 ;; *************** function _IR_UpdateSetStatus *****************
  6017 ;; Defined at:
  6018 ;;		line 748 in file "user/src/ir.c"
  6019 ;; Parameters:    Size  Location     Type
  6020 ;;		None
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;		None
  6023 ;; Return value:  Size  Location     Type
  6024 ;;                  1    wreg      void 
  6025 ;; Registers used:
  6026 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6027 ;; Tracked objects:
  6028 ;;		On entry : 1F/0
  6029 ;;		On exit  : 1E/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6036 ;;Total ram usage:        0 bytes
  6037 ;; Hardware stack levels used:    1
  6038 ;; Hardware stack levels required when called:   11
  6039 ;; This function calls:
  6040 ;;		_IR_ExitTimeout
  6041 ;; This function is called by:
  6042 ;;		_main
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           
  6047                           ;psect for function _IR_UpdateSetStatus
  6048  0B0C                     _IR_UpdateSetStatus:	
  6049                           
  6050                           ;ir.c: 749: if (ir_state.mSet) {
  6051                           
  6052                           ;incstack = 0
  6053                           ; Regs used in _IR_UpdateSetStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6054  0B0C  0E54               	swapf	_ir_state,w	;volatile
  6055  0B0D  0C89               	rrf	9,f
  6056  0B0E  3907               	andlw	7
  6057  0B0F  1903               	skipnz
  6058  0B10  0008               	return
  6059                           
  6060                           ;ir.c: 750: ir_state.mSetDelay++;
  6061  0B11  0ADA               	incf	_ir_state+6,f	;volatile
  6062                           
  6063                           ;ir.c: 751: if (ir_state.mSetDelay > 10) {
  6064  0B12  300B               	movlw	11
  6065  0B13  025A               	subwf	_ir_state+6,w	;volatile
  6066  0B14  1C03               	skipc
  6067  0B15  0008               	return
  6068                           
  6069                           ;ir.c: 752: IR_ExitTimeout();
  6070  0B16  3191  29A7         	ljmp	l6580
  6071  0B18                     __end_of_IR_UpdateSetStatus:	
  6072  0B18                     __ptext29:	
  6073 ;; *************** function _Interrupt_Initialize *****************
  6074 ;; Defined at:
  6075 ;;		line 159 in file "user/src/main.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;		None
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;		None
  6080 ;; Return value:  Size  Location     Type
  6081 ;;                  1    wreg      void 
  6082 ;; Registers used:
  6083 ;;		wreg, status,2, status,0, pclath, cstack
  6084 ;; Tracked objects:
  6085 ;;		On entry : 1F/1
  6086 ;;		On exit  : 1F/1
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;Total ram usage:        0 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:    8
  6096 ;; This function calls:
  6097 ;;		_TMR0_SetInterruptHandler
  6098 ;;		_TMR1_Gate_SetInterruptHandler
  6099 ;;		_TMR2_SetInterruptHandler
  6100 ;;		_TMR4_SetInterruptHandler
  6101 ;; This function is called by:
  6102 ;;		_main
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           
  6107                           ;psect for function _Interrupt_Initialize
  6108  0B18                     _Interrupt_Initialize:	
  6109                           
  6110                           ;main.c: 160: TMR1_Gate_SetInterruptHandler(IR_Decode);
  6111                           
  6112                           ;incstack = 0
  6113                           ; Regs used in _Interrupt_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6114  0B18  3095               	movlw	low _IR_Decode
  6115  0B19  0020               	movlb	0	; select bank0
  6116  0B1A  00AD               	movwf	TMR1_Gate_SetInterruptHandler@handler
  6117  0B1B  3005               	movlw	high _IR_Decode
  6118  0B1C  00AE               	movwf	TMR1_Gate_SetInterruptHandler@handler+1
  6119  0B1D  233B  3188         	fcall	_TMR1_Gate_SetInterruptHandler
  6120                           
  6121                           ;main.c: 161: TMR0_SetInterruptHandler(RTC_OnSecond);
  6122  0B1F  306D               	movlw	low _RTC_OnSecond
  6123  0B20  0020               	movlb	0	; select bank0
  6124  0B21  00AD               	movwf	TMR0_SetInterruptHandler@handler
  6125  0B22  3011               	movlw	high _RTC_OnSecond
  6126  0B23  00AE               	movwf	TMR0_SetInterruptHandler@handler+1
  6127  0B24  2333  3188         	fcall	_TMR0_SetInterruptHandler
  6128                           
  6129                           ;main.c: 162: TMR2_SetInterruptHandler(Led_Run);
  6130  0B26  3030               	movlw	low _Led_Run
  6131  0B27  0020               	movlb	0	; select bank0
  6132  0B28  00AD               	movwf	TMR2_SetInterruptHandler@handler
  6133  0B29  3000               	movlw	high _Led_Run
  6134  0B2A  00AE               	movwf	TMR2_SetInterruptHandler@handler+1
  6135  0B2B  2707  3188         	fcall	_TMR2_SetInterruptHandler
  6136                           
  6137                           ;main.c: 163: TMR4_SetInterruptHandler(Led_Notice);
  6138  0B2D  30A5               	movlw	low _Led_Notice
  6139  0B2E  0020               	movlb	0	; select bank0
  6140  0B2F  00AD               	movwf	TMR4_SetInterruptHandler@handler
  6141  0B30  3007               	movlw	high _Led_Notice
  6142  0B31  00AE               	movwf	TMR4_SetInterruptHandler@handler+1
  6143  0B32  2F0F               	ljmp	l4950
  6144  0B33                     __end_of_Interrupt_Initialize:	
  6145  0B33                     __ptext33:	
  6146 ;; *************** function _TMR0_SetInterruptHandler *****************
  6147 ;; Defined at:
  6148 ;;		line 37 in file "driver/src/tmr0.c"
  6149 ;; Parameters:    Size  Location     Type
  6150 ;;  handler         2   13[BANK0 ] PTR FTN()void 
  6151 ;;		 -> RTC_OnSecond(1), 
  6152 ;; Auto vars:     Size  Location     Type
  6153 ;;		None
  6154 ;; Return value:  Size  Location     Type
  6155 ;;                  1    wreg      void 
  6156 ;; Registers used:
  6157 ;;		wreg
  6158 ;; Tracked objects:
  6159 ;;		On entry : 1F/0
  6160 ;;		On exit  : 1F/1
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6163 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6166 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6167 ;;Total ram usage:        2 bytes
  6168 ;; Hardware stack levels used:    1
  6169 ;; Hardware stack levels required when called:    7
  6170 ;; This function calls:
  6171 ;;		Nothing
  6172 ;; This function is called by:
  6173 ;;		_Interrupt_Initialize
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           
  6178                           ;psect for function _TMR0_SetInterruptHandler
  6179  0B33                     _TMR0_SetInterruptHandler:	
  6180                           
  6181                           ;tmr0.c: 39: tmr0_isr_handler = handler;
  6182                           
  6183                           ;incstack = 0
  6184                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  6185  0B33  082E               	movf	TMR0_SetInterruptHandler@handler+1,w
  6186  0B34  0021               	movlb	1	; select bank1
  6187  0B35  00EB               	movwf	(_tmr0_isr_handler+1)^(0+128)
  6188  0B36  0020               	movlb	0	; select bank0
  6189  0B37  082D               	movf	TMR0_SetInterruptHandler@handler,w
  6190  0B38  0021               	movlb	1	; select bank1
  6191  0B39  00EA               	movwf	_tmr0_isr_handler^(0+128)
  6192  0B3A  0008               	return
  6193  0B3B                     __end_of_TMR0_SetInterruptHandler:	
  6194  0B3B                     __ptext32:	
  6195 ;; *************** function _TMR1_Gate_SetInterruptHandler *****************
  6196 ;; Defined at:
  6197 ;;		line 54 in file "driver/src/tmr1.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  handler         2   13[BANK0 ] PTR FTN()void 
  6200 ;;		 -> IR_Decode(1), 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;		None
  6203 ;; Return value:  Size  Location     Type
  6204 ;;                  1    wreg      void 
  6205 ;; Registers used:
  6206 ;;		wreg
  6207 ;; Tracked objects:
  6208 ;;		On entry : 1F/0
  6209 ;;		On exit  : 1F/1
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6212 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;Total ram usage:        2 bytes
  6217 ;; Hardware stack levels used:    1
  6218 ;; Hardware stack levels required when called:    7
  6219 ;; This function calls:
  6220 ;;		Nothing
  6221 ;; This function is called by:
  6222 ;;		_Interrupt_Initialize
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           
  6227                           ;psect for function _TMR1_Gate_SetInterruptHandler
  6228  0B3B                     _TMR1_Gate_SetInterruptHandler:	
  6229                           
  6230                           ;tmr1.c: 56: tmr1_gate_isr_handler = handler;
  6231                           
  6232                           ;incstack = 0
  6233                           ; Regs used in _TMR1_Gate_SetInterruptHandler: [wreg]
  6234  0B3B  082E               	movf	TMR1_Gate_SetInterruptHandler@handler+1,w
  6235  0B3C  0021               	movlb	1	; select bank1
  6236  0B3D  00E9               	movwf	(_tmr1_gate_isr_handler+1)^(0+128)
  6237  0B3E  0020               	movlb	0	; select bank0
  6238  0B3F  082D               	movf	TMR1_Gate_SetInterruptHandler@handler,w
  6239  0B40  0021               	movlb	1	; select bank1
  6240  0B41  00E8               	movwf	_tmr1_gate_isr_handler^(0+128)
  6241  0B42  0008               	return
  6242  0B43                     __end_of_TMR1_Gate_SetInterruptHandler:	
  6243  0B43                     __ptext20:	
  6244 ;; *************** function _Led_SaveParaIfChanged *****************
  6245 ;; Defined at:
  6246 ;;		line 172 in file "user/src/led.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;		None
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;		None
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  1    wreg      void 
  6253 ;; Registers used:
  6254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6255 ;; Tracked objects:
  6256 ;;		On entry : 1F/0
  6257 ;;		On exit  : 1E/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;Total ram usage:        0 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    9
  6267 ;; This function calls:
  6268 ;;		_DATAEE_WriteBuffer
  6269 ;; This function is called by:
  6270 ;;		_main
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           
  6275                           ;psect for function _Led_SaveParaIfChanged
  6276  0B43                     _Led_SaveParaIfChanged:	
  6277                           
  6278                           ;led.c: 173: if (gLedRunPara.mParaChanged) {
  6279                           
  6280                           ;incstack = 0
  6281                           ; Regs used in _Led_SaveParaIfChanged: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6282  0B43  0021               	movlb	1	; select bank1
  6283  0B44  1C5E               	btfss	(_gLedRunPara^(0+128)+20),0	;volatile
  6284  0B45  0008               	return
  6285                           
  6286                           ;led.c: 174: gLedRunPara.mParaChanged = 0;
  6287  0B46  105E               	bcf	(_gLedRunPara^(0+128)+20),0	;volatile
  6288                           
  6289                           ;led.c: 175: DATAEE_WriteBuffer(0x7010, (uint8_t *) & gLedPara, sizeof ( gLedPara));
  6290  0B47  3010               	movlw	16
  6291  0B48  0020               	movlb	0	; select bank0
  6292  0B49  00B1               	movwf	DATAEE_WriteBuffer@addr
  6293  0B4A  3070               	movlw	112
  6294  0B4B  00B2               	movwf	DATAEE_WriteBuffer@addr+1
  6295  0B4C  307B               	movlw	123
  6296  0B4D  00B3               	movwf	DATAEE_WriteBuffer@buf
  6297  0B4E  3023               	movlw	35
  6298  0B4F  00B4               	movwf	DATAEE_WriteBuffer@buf+1
  6299  0B50  3075               	movlw	117
  6300  0B51  00B5               	movwf	DATAEE_WriteBuffer@len
  6301  0B52  2FAA               	ljmp	l4830
  6302  0B53                     __end_of_Led_SaveParaIfChanged:	
  6303  0B53                     __ptext23:	
  6304 ;; *************** function _Led_InitPara *****************
  6305 ;; Defined at:
  6306 ;;		line 38 in file "user/src/led.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;		None
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;  j               1   30[BANK0 ] unsigned char 
  6311 ;;  i               1   31[BANK0 ] unsigned char 
  6312 ;; Return value:  Size  Location     Type
  6313 ;;                  1    wreg      void 
  6314 ;; Registers used:
  6315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6316 ;; Tracked objects:
  6317 ;;		On entry : 1F/1
  6318 ;;		On exit  : 1F/0
  6319 ;;		Unchanged: 0/0
  6320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6322 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6323 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6324 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6325 ;;Total ram usage:       10 bytes
  6326 ;; Hardware stack levels used:    1
  6327 ;; Hardware stack levels required when called:    9
  6328 ;; This function calls:
  6329 ;;		_DATAEE_ReadBuffer
  6330 ;;		_Led_FirstPowerUp
  6331 ;;		___wmul
  6332 ;; This function is called by:
  6333 ;;		_main
  6334 ;; This function uses a non-reentrant model
  6335 ;;
  6336                           
  6337                           
  6338                           ;psect for function _Led_InitPara
  6339  0B53                     _Led_InitPara:	
  6340                           
  6341                           ;led.c: 39: DATAEE_ReadBuffer(0x7010, (uint8_t *) & gLedPara, sizeof ( gLedPara));
  6342                           
  6343                           ;incstack = 0
  6344                           ; Regs used in _Led_InitPara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6345  0B53  3010               	movlw	16
  6346  0B54  0020               	movlb	0	; select bank0
  6347  0B55  00AF               	movwf	DATAEE_ReadBuffer@addr
  6348  0B56  3070               	movlw	112
  6349  0B57  00B0               	movwf	DATAEE_ReadBuffer@addr+1
  6350  0B58  307B               	movlw	123
  6351  0B59  00B1               	movwf	DATAEE_ReadBuffer@buf
  6352  0B5A  3023               	movlw	35
  6353  0B5B  00B2               	movwf	DATAEE_ReadBuffer@buf+1
  6354  0B5C  3075               	movlw	117
  6355  0B5D  00B3               	movwf	DATAEE_ReadBuffer@len
  6356  0B5E  252D  3188         	fcall	_DATAEE_ReadBuffer
  6357                           
  6358                           ;led.c: 40: for (uint8_t i = 0; i < 5; i++) {
  6359  0B60  01BF               	clrf	Led_InitPara@i
  6360  0B61                     l7054:	
  6361                           
  6362                           ;led.c: 41: if (gLedPara.mBright[i] > 1000) {
  6363  0B61  083F               	movf	Led_InitPara@i,w
  6364  0B62  00B6               	movwf	??_Led_InitPara
  6365  0B63  307E               	movlw	126
  6366  0B64  25CC  3188         	fcall	PL2	;call to abstracted procedure
  6367  0B66  1903               	skipnz
  6368  0B67  023A               	subwf	??_Led_InitPara+4,w
  6369  0B68  1C03               	skipc
  6370  0B69  2B6F               	goto	l615
  6371                           
  6372                           ;led.c: 42: gLedPara.mBright[i] = 1000;
  6373  0B6A  2613  3188         	fcall	PL36	;call to abstracted procedure
  6374  0B6C  307E               	movlw	126
  6375  0B6D  25DF  3188         	fcall	PL6	;call to abstracted procedure
  6376  0B6F                     l615:	
  6377                           
  6378                           ;led.c: 43: }
  6379                           ;led.c: 44: if (gLedPara.mDayBright[i] > 1000) {
  6380  0B6F  083F               	movf	Led_InitPara@i,w
  6381  0B70  00B6               	movwf	??_Led_InitPara
  6382  0B71  30DA               	movlw	218
  6383  0B72  25CC  3188         	fcall	PL2	;call to abstracted procedure
  6384  0B74  1903               	skipnz
  6385  0B75  023A               	subwf	??_Led_InitPara+4,w
  6386  0B76  1C03               	skipc
  6387  0B77  2B7D               	goto	l616
  6388                           
  6389                           ;led.c: 45: gLedPara.mDayBright[i] = 1000;
  6390  0B78  2613  3188         	fcall	PL36	;call to abstracted procedure
  6391  0B7A  30DA               	movlw	218
  6392  0B7B  25DF  3188         	fcall	PL6	;call to abstracted procedure
  6393  0B7D                     l616:	
  6394                           
  6395                           ;led.c: 46: }
  6396                           ;led.c: 47: if (gLedPara.mNightBright[i] > 1000) {
  6397  0B7D  083F               	movf	Led_InitPara@i,w
  6398  0B7E  00B6               	movwf	??_Led_InitPara
  6399  0B7F  30E6               	movlw	230
  6400  0B80  25CC  3188         	fcall	PL2	;call to abstracted procedure
  6401  0B82  1903               	skipnz
  6402  0B83  023A               	subwf	??_Led_InitPara+4,w
  6403  0B84  1C03               	skipc
  6404  0B85  2B8B               	goto	l617
  6405                           
  6406                           ;led.c: 48: gLedPara.mNightBright[i] = 1000;
  6407  0B86  2613  3188         	fcall	PL36	;call to abstracted procedure
  6408  0B88  30E6               	movlw	230
  6409  0B89  25DF  3188         	fcall	PL6	;call to abstracted procedure
  6410  0B8B                     l617:	
  6411                           
  6412                           ;led.c: 49: }
  6413                           ;led.c: 50: if (gLedPara.mStaticDayBright[i] > 1000) {
  6414  0B8B  083F               	movf	Led_InitPara@i,w
  6415  0B8C  00B6               	movwf	??_Led_InitPara
  6416  0B8D  30B0               	movlw	176
  6417  0B8E  25CC  3188         	fcall	PL2	;call to abstracted procedure
  6418  0B90  1903               	skipnz
  6419  0B91  023A               	subwf	??_Led_InitPara+4,w
  6420  0B92  1C03               	skipc
  6421  0B93  2B99               	goto	l618
  6422                           
  6423                           ;led.c: 51: gLedPara.mStaticDayBright[i] = 1000;
  6424  0B94  2613  3188         	fcall	PL36	;call to abstracted procedure
  6425  0B96  30B0               	movlw	176
  6426  0B97  25DF  3188         	fcall	PL6	;call to abstracted procedure
  6427  0B99                     l618:	
  6428                           
  6429                           ;led.c: 52: }
  6430                           ;led.c: 53: if (gLedPara.mStaticNightBright[i] > 1000) {
  6431  0B99  083F               	movf	Led_InitPara@i,w
  6432  0B9A  00B6               	movwf	??_Led_InitPara
  6433  0B9B  30BA               	movlw	186
  6434  0B9C  25CC  3188         	fcall	PL2	;call to abstracted procedure
  6435  0B9E  1903               	skipnz
  6436  0B9F  023A               	subwf	??_Led_InitPara+4,w
  6437  0BA0  1C03               	skipc
  6438  0BA1  2BA7               	goto	l619
  6439                           
  6440                           ;led.c: 54: gLedPara.mStaticNightBright[i] = 1000;
  6441  0BA2  2613  3188         	fcall	PL36	;call to abstracted procedure
  6442  0BA4  30BA               	movlw	186
  6443  0BA5  25DF  3188         	fcall	PL6	;call to abstracted procedure
  6444  0BA7                     l619:	
  6445                           
  6446                           ;led.c: 55: }
  6447                           ;led.c: 56: if (gLedPara.mStaticFishBright[i] > 1000) {
  6448  0BA7  083F               	movf	Led_InitPara@i,w
  6449  0BA8  00B6               	movwf	??_Led_InitPara
  6450  0BA9  30C4               	movlw	196
  6451  0BAA  25CC  3188         	fcall	PL2	;call to abstracted procedure
  6452  0BAC  1903               	skipnz
  6453  0BAD  023A               	subwf	??_Led_InitPara+4,w
  6454  0BAE  1C03               	skipc
  6455  0BAF  2BB5               	goto	l620
  6456                           
  6457                           ;led.c: 57: gLedPara.mStaticFishBright[i] = 1000;
  6458  0BB0  2613  3188         	fcall	PL36	;call to abstracted procedure
  6459  0BB2  30C4               	movlw	196
  6460  0BB3  25DF  3188         	fcall	PL6	;call to abstracted procedure
  6461  0BB5                     l620:	
  6462                           
  6463                           ;led.c: 58: }
  6464                           ;led.c: 59: if (gLedPara.mStaticPlantBright[i] > 1000) {
  6465  0BB5  083F               	movf	Led_InitPara@i,w
  6466  0BB6  00B6               	movwf	??_Led_InitPara
  6467  0BB7  30CE               	movlw	206
  6468  0BB8  25CC  3188         	fcall	PL2	;call to abstracted procedure
  6469  0BBA  1903               	skipnz
  6470  0BBB  023A               	subwf	??_Led_InitPara+4,w
  6471  0BBC  1C03               	skipc
  6472  0BBD  2BC2               	goto	l7070
  6473                           
  6474                           ;led.c: 60: gLedPara.mStaticPlantBright[i] = 1000;
  6475  0BBE  2613  3188         	fcall	PL36	;call to abstracted procedure
  6476  0BC0  30CE               	movlw	206
  6477  0BC1  25DF               	fcall	PL6	;call to abstracted procedure
  6478  0BC2                     l7070:	
  6479                           
  6480                           ;led.c: 61: }
  6481                           ;led.c: 62: for (uint8_t j = 0; j < 4; j++) {
  6482  0BC2  01BE               	clrf	Led_InitPara@j
  6483  0BC3                     l7076:	
  6484                           
  6485                           ;led.c: 63: if (gLedPara.mCustom[j][i] > 1000) {
  6486  0BC3  083F               	movf	Led_InitPara@i,w
  6487  0BC4  00B6               	movwf	??_Led_InitPara
  6488  0BC5  01B7               	clrf	??_Led_InitPara+1
  6489  0BC6  35B6               	lslf	??_Led_InitPara,f
  6490  0BC7  0DB7               	rlf	??_Led_InitPara+1,f
  6491  0BC8  083E               	movf	Led_InitPara@j,w
  6492  0BC9  3197  27B5  3188   	fcall	PL84	;call to abstracted procedure
  6493  0BCC  3195  2569  3188   	fcall	___wmul
  6494  0BCF  3088               	movlw	136
  6495  0BD0  00B8               	movwf	??_Led_InitPara+2
  6496  0BD1  3023               	movlw	35
  6497  0BD2  00B9               	movwf	??_Led_InitPara+3
  6498  0BD3  082D               	movf	?___wmul,w
  6499  0BD4  0738               	addwf	??_Led_InitPara+2,w
  6500  0BD5  00BA               	movwf	??_Led_InitPara+4
  6501  0BD6  082E               	movf	?___wmul+1,w
  6502  0BD7  3D39               	addwfc	??_Led_InitPara+3,w
  6503  0BD8  00BB               	movwf	??_Led_InitPara+5
  6504  0BD9  0836               	movf	??_Led_InitPara,w
  6505  0BDA  073A               	addwf	??_Led_InitPara+4,w
  6506  0BDB  0086               	movwf	6
  6507  0BDC  0837               	movf	??_Led_InitPara+1,w
  6508  0BDD  3D3B               	addwfc	??_Led_InitPara+5,w
  6509  0BDE  0087               	movwf	7
  6510  0BDF  3F40               	moviw [0]fsr1
  6511  0BE0  00BC               	movwf	??_Led_InitPara+6
  6512  0BE1  3F41               	moviw [1]fsr1
  6513  0BE2  00BD               	movwf	??_Led_InitPara+7
  6514  0BE3  3003               	movlw	3
  6515  0BE4  023D               	subwf	??_Led_InitPara+7,w
  6516  0BE5  30E9               	movlw	233
  6517  0BE6  1903               	skipnz
  6518  0BE7  023C               	subwf	??_Led_InitPara+6,w
  6519  0BE8  1C03               	skipc
  6520  0BE9  2C09               	goto	l7080
  6521                           
  6522                           ;led.c: 64: gLedPara.mCustom[j][i] = 1000;
  6523  0BEA  2613               	fcall	PL36	;call to abstracted procedure
  6524  0BEB  01B9               	clrf	??_Led_InitPara+3
  6525  0BEC  35B8               	lslf	??_Led_InitPara+2,f
  6526  0BED  0DB9               	rlf	??_Led_InitPara+3,f
  6527  0BEE  083E               	movf	Led_InitPara@j,w
  6528  0BEF  3197  27B5  3188   	fcall	PL84	;call to abstracted procedure
  6529  0BF2  3195  2569  3188   	fcall	___wmul
  6530  0BF5  3088               	movlw	136
  6531  0BF6  00BA               	movwf	??_Led_InitPara+4
  6532  0BF7  3023               	movlw	35
  6533  0BF8  00BB               	movwf	??_Led_InitPara+5
  6534  0BF9  082D               	movf	?___wmul,w
  6535  0BFA  073A               	addwf	??_Led_InitPara+4,w
  6536  0BFB  00BC               	movwf	??_Led_InitPara+6
  6537  0BFC  082E               	movf	?___wmul+1,w
  6538  0BFD  3D3B               	addwfc	??_Led_InitPara+5,w
  6539  0BFE  00BD               	movwf	??_Led_InitPara+7
  6540  0BFF  0838               	movf	??_Led_InitPara+2,w
  6541  0C00  073C               	addwf	??_Led_InitPara+6,w
  6542  0C01  0086               	movwf	6
  6543  0C02  0839               	movf	??_Led_InitPara+3,w
  6544  0C03  3D3D               	addwfc	??_Led_InitPara+7,w
  6545  0C04  0087               	movwf	7
  6546  0C05  0836               	movf	??_Led_InitPara,w
  6547  0C06  3FC0               	movwi [0]fsr1
  6548  0C07  0837               	movf	??_Led_InitPara+1,w
  6549  0C08  3FC1               	movwi [1]fsr1
  6550  0C09                     l7080:	
  6551  0C09  3004               	movlw	4
  6552  0C0A  0ABE               	incf	Led_InitPara@j,f
  6553  0C0B  023E               	subwf	Led_InitPara@j,w
  6554  0C0C  1C03               	skipc
  6555  0C0D  2BC3               	goto	l7076
  6556                           
  6557                           ;led.c: 65: }
  6558                           ;led.c: 66: }
  6559                           ;led.c: 67: if (gLedPara.mMsc > 8) {
  6560  0C0E  307B               	movlw	123
  6561  0C0F  0086               	movwf	6
  6562  0C10  3023               	movlw	35
  6563  0C11  0087               	movwf	7
  6564  0C12  0C01               	rrf	1,w
  6565  0C13  00B6               	movwf	??_Led_InitPara
  6566  0C14  0CB6               	rrf	??_Led_InitPara,f
  6567  0C15  0C36               	rrf	??_Led_InitPara,w
  6568  0C16  390F               	andlw	15
  6569  0C17  00B7               	movwf	??_Led_InitPara+1
  6570  0C18  3009               	movlw	9
  6571  0C19  0237               	subwf	??_Led_InitPara+1,w
  6572  0C1A  1C03               	skipc
  6573  0C1B  2C20               	goto	l625
  6574                           
  6575                           ;led.c: 68: gLedPara.mMsc = 0;
  6576  0C1C  307B               	movlw	123
  6577  0C1D  0086               	movwf	6
  6578  0C1E  3087               	movlw	-121
  6579  0C1F  0581               	andwf	1,f
  6580  0C20                     l625:	
  6581                           
  6582                           ;led.c: 69: }
  6583                           ;led.c: 70: if (gLedPara.mSunrise > 1439) {
  6584  0C20  30D8               	movlw	216
  6585  0C21  2647  3188         	fcall	PL104	;call to abstracted procedure
  6586  0C23  1903               	skipnz
  6587  0C24  0236               	subwf	??_Led_InitPara,w
  6588  0C25  1C03               	skipc
  6589  0C26  2C2A               	goto	l626
  6590                           
  6591                           ;led.c: 71: gLedPara.mSunrise = 0;
  6592  0C27  30D8               	movlw	216
  6593  0C28  2695  3188         	fcall	PL170	;call to abstracted procedure
  6594  0C2A                     l626:	
  6595                           
  6596                           ;led.c: 72: }
  6597                           ;led.c: 73: if (gLedPara.mSunset > 1439) {
  6598  0C2A  30E4               	movlw	228
  6599  0C2B  2647  3188         	fcall	PL104	;call to abstracted procedure
  6600  0C2D  1903               	skipnz
  6601  0C2E  0236               	subwf	??_Led_InitPara,w
  6602  0C2F  1C03               	skipc
  6603  0C30  2C34               	goto	l7092
  6604                           
  6605                           ;led.c: 74: gLedPara.mSunset = 0;
  6606  0C31  30E4               	movlw	228
  6607  0C32  2695  3188         	fcall	PL170	;call to abstracted procedure
  6608  0C34                     l7092:	
  6609                           
  6610                           ;led.c: 75: }
  6611                           ;led.c: 76: if (gLedPara.mVolume > 4) {
  6612  0C34  307B               	movlw	123
  6613  0C35  0086               	movwf	6
  6614  0C36  3023               	movlw	35
  6615  0C37  0087               	movwf	7
  6616  0C38  3005               	movlw	5
  6617  0C39  3142               	addfsr 1,2
  6618  0C3A  0201               	subwf	1,w
  6619  0C3B  1C03               	skipc
  6620  0C3C  2C43               	goto	l7096
  6621                           
  6622                           ;led.c: 77: gLedPara.mVolume = 4;
  6623  0C3D  307D               	movlw	125
  6624  0C3E  0086               	movwf	6
  6625  0C3F  3023               	movlw	35
  6626  0C40  0087               	movwf	7
  6627  0C41  3004               	movlw	4
  6628  0C42  0081               	movwf	1
  6629  0C43                     l7096:	
  6630  0C43  3005               	movlw	5
  6631  0C44  0ABF               	incf	Led_InitPara@i,f
  6632  0C45  023F               	subwf	Led_InitPara@i,w
  6633  0C46  1C03               	skipc
  6634  0C47  2B61               	goto	l7054
  6635                           
  6636                           ;led.c: 78: }
  6637                           ;led.c: 84: }
  6638                           ;led.c: 85: Led_FirstPowerUp();
  6639  0C48  2F17               	ljmp	l5004
  6640  0C49                     __end_of_Led_InitPara:	
  6641  0C49                     __ptext28:	
  6642 ;; *************** function _Led_AutoRun *****************
  6643 ;; Defined at:
  6644 ;;		line 367 in file "user/src/led.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;		None
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;  i               1   27[BANK0 ] unsigned char 
  6649 ;; Return value:  Size  Location     Type
  6650 ;;                  1    wreg      void 
  6651 ;; Registers used:
  6652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 1F/0
  6655 ;;		On exit  : 1F/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;Total ram usage:        5 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    9
  6665 ;; This function calls:
  6666 ;;		_Led_UpdateBright
  6667 ;;		_Util_IncValue
  6668 ;; This function is called by:
  6669 ;;		_main
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           
  6674                           ;psect for function _Led_AutoRun
  6675  0C49                     _Led_AutoRun:	
  6676                           
  6677                           ;led.c: 368: if (gLedRunPara.auto_state == 1 && gLedRunPara.auto_num < 250) {
  6678                           
  6679                           ;incstack = 0
  6680                           ; Regs used in _Led_AutoRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6681  0C49  0021               	movlb	1	; select bank1
  6682  0C4A  0B5F               	decfsz	(_gLedRunPara^(0+128)+21),w	;volatile
  6683  0C4B  2C5B               	goto	l7198
  6684  0C4C  3000               	movlw	0
  6685  0C4D  0261               	subwf	((_gLedRunPara+1)^(0+128)+22),w	;volatile
  6686  0C4E  30FA               	movlw	250
  6687  0C4F  1903               	skipnz
  6688  0C50  0260               	subwf	(_gLedRunPara^(0+128)+22),w	;volatile
  6689  0C51  1803               	skipnc
  6690  0C52  2C5B               	goto	l7198
  6691                           
  6692                           ;led.c: 369: Util_IncValue((uint16_t *) & gLedRunPara.mCurrentBright[0], 1000, 4);
  6693  0C53  265B               	fcall	PL116	;call to abstracted procedure
  6694  0C54  3004               	movlw	4
  6695  0C55  00B1               	movwf	Util_IncValue@delta
  6696  0C56  01B2               	clrf	Util_IncValue@delta+1
  6697  0C57  3195  2531  3188   	fcall	_Util_IncValue
  6698                           
  6699                           ;led.c: 370: } else if (gLedRunPara.auto_state == 2 && gLedRunPara.auto_num < 1000) {
  6700  0C5A  2C87               	goto	l7214
  6701  0C5B                     l7198:	
  6702  0C5B  3002               	movlw	2
  6703  0C5C  065F               	xorwf	(_gLedRunPara^(0+128)+21),w	;volatile
  6704  0C5D  1D03               	btfss	3,2
  6705  0C5E  2C6E               	goto	l7204
  6706  0C5F  3003               	movlw	3
  6707  0C60  0261               	subwf	((_gLedRunPara+1)^(0+128)+22),w	;volatile
  6708  0C61  30E8               	movlw	232
  6709  0C62  1903               	skipnz
  6710  0C63  0260               	subwf	(_gLedRunPara^(0+128)+22),w	;volatile
  6711  0C64  1803               	skipnc
  6712  0C65  2C6E               	goto	l7204
  6713                           
  6714                           ;led.c: 371: Util_IncValue((uint16_t *) & gLedRunPara.mCurrentBright[0], 1000, 1);
  6715  0C66  265B               	fcall	PL116	;call to abstracted procedure
  6716  0C67  01B1               	clrf	Util_IncValue@delta
  6717  0C68  0AB1               	incf	Util_IncValue@delta,f
  6718  0C69  01B2               	clrf	Util_IncValue@delta+1
  6719  0C6A  3195  2531  3188   	fcall	_Util_IncValue
  6720                           
  6721                           ;led.c: 372: } else {
  6722  0C6D  2C87               	goto	l7214
  6723  0C6E                     l7204:	
  6724                           
  6725                           ;led.c: 373: gLedRunPara.auto_state = 0;
  6726  0C6E  01DF               	clrf	(_gLedRunPara^(0+128)+21)	;volatile
  6727                           
  6728                           ;led.c: 374: if (gLedRunPara.mCurrentBright[0] < gLedRunPara.mTargetBright[0]) {
  6729  0C6F  0855               	movf	((_gLedRunPara+1)^(0+128)+10),w	;volatile
  6730  0C70  024B               	subwf	(_gLedRunPara+1)^(0+128),w	;volatile
  6731  0C71  1D03               	skipz
  6732  0C72  2C75               	goto	u6535
  6733  0C73  0854               	movf	(_gLedRunPara^(0+128)+10),w	;volatile
  6734  0C74  024A               	subwf	_gLedRunPara^(0+128),w	;volatile
  6735  0C75                     u6535:	
  6736  0C75  1803               	skipnc
  6737  0C76  2C7B               	goto	l7210
  6738                           
  6739                           ;led.c: 375: gLedRunPara.mCurrentBright[0]++;
  6740  0C77  0ACA               	incf	_gLedRunPara^(0+128),f	;volatile
  6741  0C78  1903               	skipnz
  6742  0C79  0ACB               	incf	(_gLedRunPara+1)^(0+128),f	;volatile
  6743                           
  6744                           ;led.c: 376: } else if (gLedRunPara.mCurrentBright[0] > gLedRunPara.mTargetBright[0]) {
  6745  0C7A  2C87               	goto	l7214
  6746  0C7B                     l7210:	
  6747  0C7B  084B               	movf	(_gLedRunPara+1)^(0+128),w	;volatile
  6748  0C7C  0255               	subwf	((_gLedRunPara+1)^(0+128)+10),w	;volatile
  6749  0C7D  1D03               	skipz
  6750  0C7E  2C81               	goto	u6545
  6751  0C7F  084A               	movf	_gLedRunPara^(0+128),w	;volatile
  6752  0C80  0254               	subwf	(_gLedRunPara^(0+128)+10),w	;volatile
  6753  0C81                     u6545:	
  6754  0C81  1803               	skipnc
  6755  0C82  2C87               	goto	l7214
  6756                           
  6757                           ;led.c: 377: gLedRunPara.mCurrentBright[0]--;
  6758  0C83  3001               	movlw	1
  6759  0C84  02CA               	subwf	_gLedRunPara^(0+128),f	;volatile
  6760  0C85  3000               	movlw	0
  6761  0C86  3BCB               	subwfb	(_gLedRunPara+1)^(0+128),f	;volatile
  6762  0C87                     l7214:	
  6763                           
  6764                           ;led.c: 378: }
  6765                           ;led.c: 379: }
  6766                           ;led.c: 380: gLedRunPara.auto_num++;
  6767  0C87  0021               	movlb	1	; select bank1
  6768  0C88  0AE0               	incf	(_gLedRunPara^(0+128)+22),f	;volatile
  6769  0C89  1903               	skipnz
  6770  0C8A  0AE1               	incf	((_gLedRunPara+1)^(0+128)+22),f	;volatile
  6771                           
  6772                           ;led.c: 381: if ((gLedRunPara.auto_num & 0x01) == 0) {
  6773  0C8B  1860               	btfsc	(_gLedRunPara^(0+128)+22),0	;volatile
  6774  0C8C  2CB2               	goto	l7236
  6775                           
  6776                           ;led.c: 382: for (uint8_t i = 1; i < 5; i++) {
  6777  0C8D  0020               	movlb	0	; select bank0
  6778  0C8E  01BB               	clrf	Led_AutoRun@i
  6779  0C8F  0ABB               	incf	Led_AutoRun@i,f
  6780  0C90                     l7224:	
  6781                           
  6782                           ;led.c: 383: if (gLedRunPara.mCurrentBright[i] < gLedRunPara.mTargetBright[i]) {
  6783  0C90  353B               	lslf	Led_AutoRun@i,w
  6784  0C91  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6785  0C92  266B  3188         	fcall	PL136	;call to abstracted procedure
  6786  0C94  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
  6787  0C95  2628  3188         	fcall	PL92	;call to abstracted procedure
  6788  0C97  1803               	skipnc
  6789  0C98  2CA0               	goto	l7228
  6790                           
  6791                           ;led.c: 384: gLedRunPara.mCurrentBright[i]++;
  6792  0C99  353B               	lslf	Led_AutoRun@i,w
  6793  0C9A  3184  24FB  3188   	fcall	PL54	;call to abstracted procedure
  6794  0C9D  1803               	skipnc
  6795  0C9E  0A81               	incf	1,f
  6796                           
  6797                           ;led.c: 385: } else if (gLedRunPara.mCurrentBright[i] > gLedRunPara.mTargetBright[i]) {
  6798  0C9F  2CAD               	goto	l7232
  6799  0CA0                     l7228:	
  6800  0CA0  353B               	lslf	Led_AutoRun@i,w
  6801  0CA1  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
  6802  0CA2  266B  3188         	fcall	PL136	;call to abstracted procedure
  6803  0CA4  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6804  0CA5  2628  3188         	fcall	PL92	;call to abstracted procedure
  6805  0CA7  1803               	skipnc
  6806  0CA8  2CAD               	goto	l7232
  6807                           
  6808                           ;led.c: 386: gLedRunPara.mCurrentBright[i]--;
  6809  0CA9  353B               	lslf	Led_AutoRun@i,w
  6810  0CAA  3184  24D8  3188   	fcall	PL24	;call to abstracted procedure
  6811  0CAD                     l7232:	
  6812  0CAD  3005               	movlw	5
  6813  0CAE  0ABB               	incf	Led_AutoRun@i,f
  6814  0CAF  023B               	subwf	Led_AutoRun@i,w
  6815  0CB0  1C03               	skipc
  6816  0CB1  2C90               	goto	l7224
  6817  0CB2                     l7236:	
  6818                           
  6819                           ;led.c: 387: }
  6820                           ;led.c: 388: }
  6821                           ;led.c: 389: }
  6822                           ;led.c: 390: Led_UpdateBright();
  6823  0CB2  2AAA               	ljmp	l6116
  6824  0CB3                     __end_of_Led_AutoRun:	
  6825  0CB3                     __ptext27:	
  6826 ;; *************** function _Led_CheckAutoStatus *****************
  6827 ;; Defined at:
  6828 ;;		line 335 in file "user/src/led.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;		None
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;  i               1   30[BANK0 ] unsigned char 
  6833 ;;  i               1   29[BANK0 ] unsigned char 
  6834 ;;  i               1   31[BANK0 ] unsigned char 
  6835 ;;  ct              2   27[BANK0 ] unsigned int 
  6836 ;;  sunset          2   25[BANK0 ] unsigned int 
  6837 ;;  sunrise         2   23[BANK0 ] unsigned int 
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  1    wreg      void 
  6840 ;; Registers used:
  6841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6842 ;; Tracked objects:
  6843 ;;		On entry : 1F/0
  6844 ;;		On exit  : 1E/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6848 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6849 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6850 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6851 ;;Total ram usage:       13 bytes
  6852 ;; Hardware stack levels used:    1
  6853 ;; Hardware stack levels required when called:    9
  6854 ;; This function calls:
  6855 ;;		_Led_UpdateBright
  6856 ;;		_RTC_GetTime
  6857 ;;		___wmul
  6858 ;; This function is called by:
  6859 ;;		_main
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           
  6864                           ;psect for function _Led_CheckAutoStatus
  6865  0CB3                     _Led_CheckAutoStatus:	
  6866                           
  6867                           ;led.c: 336: uint16_t ct = RTC_GetTime()->hour * 60u + RTC_GetTime()->minute;
  6868                           
  6869                           ;incstack = 0
  6870                           ; Regs used in _Led_CheckAutoStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6871  0CB3  227A  3188         	fcall	_RTC_GetTime
  6872  0CB5  2651               	fcall	PL114	;call to abstracted procedure
  6873  0CB6  3195  2569  3188   	fcall	___wmul
  6874  0CB9  082E               	movf	?___wmul+1,w
  6875  0CBA  00BC               	movwf	Led_CheckAutoStatus@ct+1
  6876  0CBB  082D               	movf	?___wmul,w
  6877  0CBC  00BB               	movwf	Led_CheckAutoStatus@ct
  6878  0CBD  227A  3188         	fcall	_RTC_GetTime
  6879  0CBF  0020               	movlb	0	; select bank0
  6880  0CC0  00B3               	movwf	??_Led_CheckAutoStatus
  6881  0CC1  3E01               	addlw	1
  6882  0CC2  0086               	movwf	6
  6883  0CC3  0187               	clrf	7
  6884  0CC4  0801               	movf	1,w
  6885  0CC5  07BB               	addwf	Led_CheckAutoStatus@ct,f
  6886  0CC6  1803               	skipnc
  6887  0CC7  0ABC               	incf	Led_CheckAutoStatus@ct+1,f
  6888                           
  6889                           ;led.c: 337: uint16_t sunrise = gLedPara.mSunrise;
  6890  0CC8  30D8               	movlw	216
  6891  0CC9  0086               	movwf	6
  6892  0CCA  3023               	movlw	35
  6893  0CCB  0087               	movwf	7
  6894  0CCC  3F40               	moviw [0]fsr1
  6895  0CCD  00B7               	movwf	Led_CheckAutoStatus@sunrise
  6896  0CCE  3F41               	moviw [1]fsr1
  6897  0CCF  00B8               	movwf	Led_CheckAutoStatus@sunrise+1
  6898                           
  6899                           ;led.c: 338: uint16_t sunset = gLedPara.mSunset;
  6900  0CD0  30E4               	movlw	228
  6901  0CD1  0086               	movwf	6
  6902  0CD2  3F40               	moviw [0]fsr1
  6903  0CD3  00B9               	movwf	Led_CheckAutoStatus@sunset
  6904  0CD4  3F41               	moviw [1]fsr1
  6905  0CD5  00BA               	movwf	Led_CheckAutoStatus@sunset+1
  6906                           
  6907                           ;led.c: 339: if (sunrise == sunset) {
  6908  0CD6  0638               	xorwf	Led_CheckAutoStatus@sunrise+1,w
  6909  0CD7  1D03               	skipz
  6910  0CD8  2CDB               	goto	u6435
  6911  0CD9  0839               	movf	Led_CheckAutoStatus@sunset,w
  6912  0CDA  0637               	xorwf	Led_CheckAutoStatus@sunrise,w
  6913  0CDB                     u6435:	
  6914  0CDB  1D03               	skipz
  6915  0CDC  2CF9               	goto	l7152
  6916                           
  6917                           ;led.c: 340: for (uint8_t i = 0; i < 5; i++) {
  6918  0CDD  01BF               	clrf	Led_CheckAutoStatus@i
  6919  0CDE                     l7140:	
  6920                           
  6921                           ;led.c: 341: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
  6922  0CDE  083F               	movf	Led_CheckAutoStatus@i,w
  6923  0CDF  00B3               	movwf	??_Led_CheckAutoStatus
  6924  0CE0  30E6               	movlw	230
  6925  0CE1  2606  3188         	fcall	PL26	;call to abstracted procedure
  6926  0CE3  353F               	lslf	Led_CheckAutoStatus@i,w
  6927  0CE4  25FE  3188         	fcall	PL22	;call to abstracted procedure
  6928                           
  6929                           ;led.c: 342: gLedRunPara.mCurrentBright[i] = gLedPara.mNightBright[i];
  6930  0CE6  083F               	movf	Led_CheckAutoStatus@i,w
  6931  0CE7  00B3               	movwf	??_Led_CheckAutoStatus
  6932  0CE8  30E6               	movlw	230
  6933  0CE9  2606  3188         	fcall	PL26	;call to abstracted procedure
  6934  0CEB  353F               	lslf	Led_CheckAutoStatus@i,w
  6935  0CEC  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
  6936  0CED  0084               	movwf	4
  6937  0CEE  2623  3188         	fcall	PL56	;call to abstracted procedure
  6938  0CF0  0ABF               	incf	Led_CheckAutoStatus@i,f
  6939  0CF1  023F               	subwf	Led_CheckAutoStatus@i,w
  6940  0CF2  1C03               	skipc
  6941  0CF3  2CDE               	goto	l7140
  6942                           
  6943                           ;led.c: 343: }
  6944                           ;led.c: 344: gLedRunPara.auto_state = 0;
  6945  0CF4  0021               	movlb	1	; select bank1
  6946  0CF5  01DF               	clrf	(_gLedRunPara^(0+128)+21)	;volatile
  6947                           
  6948                           ;led.c: 345: gLedRunPara.auto_num = 0;
  6949  0CF6  01E0               	clrf	(_gLedRunPara^(0+128)+22)	;volatile
  6950  0CF7  01E1               	clrf	((_gLedRunPara+1)^(0+128)+22)	;volatile
  6951                           
  6952                           ;led.c: 346: Led_UpdateBright();
  6953  0CF8  2AAA               	ljmp	l6116
  6954  0CF9                     l7152:	
  6955                           
  6956                           ;led.c: 348: }
  6957                           ;led.c: 349: if (ct == sunrise) {
  6958  0CF9  0838               	movf	Led_CheckAutoStatus@sunrise+1,w
  6959  0CFA  063C               	xorwf	Led_CheckAutoStatus@ct+1,w
  6960  0CFB  1D03               	skipz
  6961  0CFC  2CFF               	goto	u6455
  6962  0CFD  0837               	movf	Led_CheckAutoStatus@sunrise,w
  6963  0CFE  063B               	xorwf	Led_CheckAutoStatus@ct,w
  6964  0CFF                     u6455:	
  6965  0CFF  1D03               	skipz
  6966  0D00  2D15               	goto	l7172
  6967                           
  6968                           ;led.c: 350: for (uint8_t i = 0; i < 5; i++) {
  6969  0D01  01BD               	clrf	Led_CheckAutoStatus@i_1248
  6970  0D02                     l7160:	
  6971                           
  6972                           ;led.c: 351: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
  6973  0D02  083D               	movf	Led_CheckAutoStatus@i_1248,w
  6974  0D03  00B3               	movwf	??_Led_CheckAutoStatus
  6975  0D04  30DA               	movlw	218
  6976  0D05  2606  3188         	fcall	PL26	;call to abstracted procedure
  6977  0D07  353D               	lslf	Led_CheckAutoStatus@i_1248,w
  6978  0D08  25FE  3188         	fcall	PL22	;call to abstracted procedure
  6979  0D0A  3005               	movlw	5
  6980  0D0B  0ABD               	incf	Led_CheckAutoStatus@i_1248,f
  6981  0D0C  023D               	subwf	Led_CheckAutoStatus@i_1248,w
  6982  0D0D  1C03               	skipc
  6983  0D0E  2D02               	goto	l7160
  6984                           
  6985                           ;led.c: 352: }
  6986                           ;led.c: 353: gLedRunPara.auto_state = 1;
  6987  0D0F  3001               	movlw	1
  6988  0D10                     L1:	
  6989  0D10  0021               	movlb	1	; select bank1
  6990  0D11  00DF               	movwf	(_gLedRunPara^(0+128)+21)	;volatile
  6991                           
  6992                           ;led.c: 354: gLedRunPara.auto_num = 0;
  6993  0D12  01E0               	clrf	(_gLedRunPara^(0+128)+22)	;volatile
  6994  0D13  01E1               	clrf	((_gLedRunPara+1)^(0+128)+22)	;volatile
  6995  0D14  0008               	return
  6996  0D15                     l7172:	
  6997                           
  6998                           ;led.c: 356: }
  6999                           ;led.c: 357: if (ct == sunset) {
  7000  0D15  083A               	movf	Led_CheckAutoStatus@sunset+1,w
  7001  0D16  063C               	xorwf	Led_CheckAutoStatus@ct+1,w
  7002  0D17  1D03               	skipz
  7003  0D18  2D1B               	goto	u6475
  7004  0D19  0839               	movf	Led_CheckAutoStatus@sunset,w
  7005  0D1A  063B               	xorwf	Led_CheckAutoStatus@ct,w
  7006  0D1B                     u6475:	
  7007  0D1B  1D03               	skipz
  7008  0D1C  0008               	return
  7009                           
  7010                           ;led.c: 358: for (uint8_t i = 0; i < 5; i++) {
  7011  0D1D  01BE               	clrf	Led_CheckAutoStatus@i_1249
  7012  0D1E                     l7180:	
  7013                           
  7014                           ;led.c: 359: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
  7015  0D1E  083E               	movf	Led_CheckAutoStatus@i_1249,w
  7016  0D1F  00B3               	movwf	??_Led_CheckAutoStatus
  7017  0D20  30E6               	movlw	230
  7018  0D21  2606  3188         	fcall	PL26	;call to abstracted procedure
  7019  0D23  353E               	lslf	Led_CheckAutoStatus@i_1249,w
  7020  0D24  25FE  3188         	fcall	PL22	;call to abstracted procedure
  7021  0D26  3005               	movlw	5
  7022  0D27  0ABE               	incf	Led_CheckAutoStatus@i_1249,f
  7023  0D28  023E               	subwf	Led_CheckAutoStatus@i_1249,w
  7024  0D29  1C03               	skipc
  7025  0D2A  2D1E               	goto	l7180
  7026                           
  7027                           ;led.c: 360: }
  7028                           ;led.c: 361: gLedRunPara.auto_state = 2;
  7029  0D2B  3002               	movlw	2
  7030  0D2C  2D10               	goto	L1
  7031  0D2D                     __end_of_Led_CheckAutoStatus:	
  7032  0D2D                     __ptext25:	
  7033 ;; *************** function _DATAEE_ReadBuffer *****************
  7034 ;; Defined at:
  7035 ;;		line 55 in file "driver/src/eeprom.c"
  7036 ;; Parameters:    Size  Location     Type
  7037 ;;  addr            2   15[BANK0 ] unsigned int 
  7038 ;;  buf             2   17[BANK0 ] PTR unsigned char 
  7039 ;;		 -> gLedPara(117), 
  7040 ;;  len             1   19[BANK0 ] unsigned char 
  7041 ;; Auto vars:     Size  Location     Type
  7042 ;;  i               1   21[BANK0 ] unsigned char 
  7043 ;; Return value:  Size  Location     Type
  7044 ;;                  1    wreg      void 
  7045 ;; Registers used:
  7046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7047 ;; Tracked objects:
  7048 ;;		On entry : 1F/0
  7049 ;;		On exit  : 1F/0
  7050 ;;		Unchanged: 0/0
  7051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7052 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7055 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;Total ram usage:        7 bytes
  7057 ;; Hardware stack levels used:    1
  7058 ;; Hardware stack levels required when called:    8
  7059 ;; This function calls:
  7060 ;;		_DATAEE_ReadByte
  7061 ;; This function is called by:
  7062 ;;		_Led_InitPara
  7063 ;; This function uses a non-reentrant model
  7064 ;;
  7065                           
  7066                           
  7067                           ;psect for function _DATAEE_ReadBuffer
  7068  0D2D                     _DATAEE_ReadBuffer:	
  7069                           
  7070                           ;eeprom.c: 57: for ( uint8_t i = len; i != 0; i-- )
  7071                           
  7072                           ;incstack = 0
  7073                           ; Regs used in _DATAEE_ReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7074  0D2D  0833               	movf	DATAEE_ReadBuffer@len,w
  7075  0D2E  00B5               	movwf	DATAEE_ReadBuffer@i
  7076  0D2F                     l4848:	
  7077  0D2F  0835               	movf	DATAEE_ReadBuffer@i,w
  7078  0D30  1903               	btfsc	3,2
  7079  0D31  0008               	return
  7080                           
  7081                           ;eeprom.c: 58: {
  7082                           ;eeprom.c: 59: *buf++ = DATAEE_ReadByte ( addr++ );
  7083  0D32  0830               	movf	DATAEE_ReadBuffer@addr+1,w
  7084  0D33  00AE               	movwf	DATAEE_ReadByte@addr+1
  7085  0D34  082F               	movf	DATAEE_ReadBuffer@addr,w
  7086  0D35  00AD               	movwf	DATAEE_ReadByte@addr
  7087  0D36  2548  3188         	fcall	_DATAEE_ReadByte
  7088  0D38  0020               	movlb	0	; select bank0
  7089  0D39  00B4               	movwf	??_DATAEE_ReadBuffer
  7090  0D3A  0831               	movf	DATAEE_ReadBuffer@buf,w
  7091  0D3B  0086               	movwf	6
  7092  0D3C  0832               	movf	DATAEE_ReadBuffer@buf+1,w
  7093  0D3D  0087               	movwf	7
  7094  0D3E  0834               	movf	??_DATAEE_ReadBuffer,w
  7095  0D3F  0081               	movwf	1
  7096  0D40  0AAF               	incf	DATAEE_ReadBuffer@addr,f
  7097  0D41  1903               	skipnz
  7098  0D42  0AB0               	incf	DATAEE_ReadBuffer@addr+1,f
  7099  0D43  0AB1               	incf	DATAEE_ReadBuffer@buf,f
  7100  0D44  1903               	skipnz
  7101  0D45  0AB2               	incf	DATAEE_ReadBuffer@buf+1,f
  7102  0D46  03B5               	decf	DATAEE_ReadBuffer@i,f
  7103  0D47  2D2F               	goto	l4848
  7104  0D48                     __end_of_DATAEE_ReadBuffer:	
  7105  0D48                     __ptext26:	
  7106 ;; *************** function _DATAEE_ReadByte *****************
  7107 ;; Defined at:
  7108 ;;		line 23 in file "driver/src/eeprom.c"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;  addr            2   13[BANK0 ] unsigned int 
  7111 ;; Auto vars:     Size  Location     Type
  7112 ;;		None
  7113 ;; Return value:  Size  Location     Type
  7114 ;;                  1    wreg      unsigned char 
  7115 ;; Registers used:
  7116 ;;		wreg
  7117 ;; Tracked objects:
  7118 ;;		On entry : 1F/0
  7119 ;;		On exit  : 1F/11
  7120 ;;		Unchanged: 0/0
  7121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7122 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;Total ram usage:        2 bytes
  7127 ;; Hardware stack levels used:    1
  7128 ;; Hardware stack levels required when called:    7
  7129 ;; This function calls:
  7130 ;;		Nothing
  7131 ;; This function is called by:
  7132 ;;		_DATAEE_ReadBuffer
  7133 ;; This function uses a non-reentrant model
  7134 ;;
  7135                           
  7136                           
  7137                           ;psect for function _DATAEE_ReadByte
  7138  0D48                     _DATAEE_ReadByte:	
  7139                           
  7140                           ;eeprom.c: 25: NVMADRH = addr >> 8;
  7141                           
  7142                           ;incstack = 0
  7143                           ; Regs used in _DATAEE_ReadByte: [wreg]
  7144  0D48  082E               	movf	DATAEE_ReadByte@addr+1,w
  7145  0D49  0031               	movlb	17	; select bank17
  7146  0D4A  0092               	movwf	18	;volatile
  7147                           
  7148                           ;eeprom.c: 26: NVMADRL = addr & 0xFF;
  7149  0D4B  0020               	movlb	0	; select bank0
  7150  0D4C  082D               	movf	DATAEE_ReadByte@addr,w
  7151  0D4D  0031               	movlb	17	; select bank17
  7152  0D4E  0091               	movwf	17	;volatile
  7153                           
  7154                           ;eeprom.c: 27: NVMCON1bits.NVMREGS = 1;
  7155  0D4F  1715               	bsf	21,6	;volsfr
  7156                           
  7157                           ;eeprom.c: 28: NVMCON1bits.RD = 1;
  7158  0D50  1415               	bsf	21,0	;volsfr
  7159                           
  7160                           ;eeprom.c: 29: __nop();
  7161  0D51  0000               	nop
  7162                           
  7163                           ;eeprom.c: 30: __nop();
  7164  0D52  0000               	nop
  7165                           
  7166                           ;eeprom.c: 32: return ( NVMDATL );
  7167  0D53  0031               	movlb	17	; select bank17
  7168  0D54  0813               	movf	19,w	;volatile
  7169  0D55  0008               	return
  7170  0D56                     __end_of_DATAEE_ReadByte:	
  7171  0D56                     __ptext19:	
  7172 ;; *************** function _RTC_HourReady *****************
  7173 ;; Defined at:
  7174 ;;		line 61 in file "user/src/rtc.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;		None
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;		None
  7179 ;; Return value:  Size  Location     Type
  7180 ;;                  1    wreg      unsigned char 
  7181 ;; Registers used:
  7182 ;;		wreg
  7183 ;; Tracked objects:
  7184 ;;		On entry : 1E/0
  7185 ;;		On exit  : 1F/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;Total ram usage:        0 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:    7
  7195 ;; This function calls:
  7196 ;;		Nothing
  7197 ;; This function is called by:
  7198 ;;		_main
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           
  7203                           ;psect for function _RTC_HourReady
  7204  0D56                     _RTC_HourReady:	
  7205                           
  7206                           ;rtc.c: 63: if( rtc_status.mHour )
  7207                           
  7208                           ;incstack = 0
  7209                           ; Regs used in _RTC_HourReady: [wreg]
  7210  0D56  0020               	movlb	0	; select bank0
  7211  0D57  1D4F               	btfss	_rtc_status,2	;volatile
  7212  0D58  3400               	retlw	0
  7213                           
  7214                           ;rtc.c: 64: {
  7215                           ;rtc.c: 65: rtc_status.mHour = 0;
  7216  0D59  114F               	bcf	_rtc_status,2	;volatile
  7217                           
  7218                           ;rtc.c: 66: return 1;
  7219  0D5A  3401               	retlw	1
  7220  0D5B                     __end_of_RTC_HourReady:	
  7221                           ;rtc.c: 67: }
  7222                           ;rtc.c: 68: return 0;
  7223                           
  7224  0D5B                     __ptext18:	
  7225 ;; *************** function _RTC_MinuteReady *****************
  7226 ;; Defined at:
  7227 ;;		line 51 in file "user/src/rtc.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;		None
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;		None
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      unsigned char 
  7234 ;; Registers used:
  7235 ;;		wreg
  7236 ;; Tracked objects:
  7237 ;;		On entry : 1F/0
  7238 ;;		On exit  : 1F/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;Total ram usage:        0 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    7
  7248 ;; This function calls:
  7249 ;;		Nothing
  7250 ;; This function is called by:
  7251 ;;		_main
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           
  7256                           ;psect for function _RTC_MinuteReady
  7257  0D5B                     _RTC_MinuteReady:	
  7258                           
  7259                           ;rtc.c: 53: if( rtc_status.mMin )
  7260                           
  7261                           ;incstack = 0
  7262                           ; Regs used in _RTC_MinuteReady: [wreg]
  7263  0D5B  1CCF               	btfss	_rtc_status,1	;volatile
  7264  0D5C  3400               	retlw	0
  7265                           
  7266                           ;rtc.c: 54: {
  7267                           ;rtc.c: 55: rtc_status.mMin = 0;
  7268  0D5D  10CF               	bcf	_rtc_status,1	;volatile
  7269                           
  7270                           ;rtc.c: 56: return 1;
  7271  0D5E  3401               	retlw	1
  7272  0D5F                     __end_of_RTC_MinuteReady:	
  7273                           ;rtc.c: 57: }
  7274                           ;rtc.c: 58: return 0;
  7275                           
  7276  0D5F                     __ptext17:	
  7277 ;; *************** function _RTC_SecondReady *****************
  7278 ;; Defined at:
  7279 ;;		line 41 in file "user/src/rtc.c"
  7280 ;; Parameters:    Size  Location     Type
  7281 ;;		None
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;		None
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  1    wreg      unsigned char 
  7286 ;; Registers used:
  7287 ;;		wreg
  7288 ;; Tracked objects:
  7289 ;;		On entry : 1E/0
  7290 ;;		On exit  : 1F/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7297 ;;Total ram usage:        0 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; Hardware stack levels required when called:    7
  7300 ;; This function calls:
  7301 ;;		Nothing
  7302 ;; This function is called by:
  7303 ;;		_main
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           
  7308                           ;psect for function _RTC_SecondReady
  7309  0D5F                     _RTC_SecondReady:	
  7310                           
  7311                           ;rtc.c: 43: if( rtc_status.mSec )
  7312                           
  7313                           ;incstack = 0
  7314                           ; Regs used in _RTC_SecondReady: [wreg]
  7315  0D5F  0020               	movlb	0	; select bank0
  7316  0D60  1C4F               	btfss	_rtc_status,0	;volatile
  7317  0D61  3400               	retlw	0
  7318                           
  7319                           ;rtc.c: 44: {
  7320                           ;rtc.c: 45: rtc_status.mSec = 0;
  7321  0D62  104F               	bcf	_rtc_status,0	;volatile
  7322                           
  7323                           ;rtc.c: 46: return 1;
  7324  0D63  3401               	retlw	1
  7325  0D64                     __end_of_RTC_SecondReady:	
  7326                           ;rtc.c: 47: }
  7327                           ;rtc.c: 48: return 0;
  7328                           
  7329  0D64                     __ptext3:	
  7330 ;; *************** function _SYSTEM_Initialize *****************
  7331 ;; Defined at:
  7332 ;;		line 143 in file "user/src/main.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;		None
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;		None
  7337 ;; Return value:  Size  Location     Type
  7338 ;;                  1    wreg      void 
  7339 ;; Registers used:
  7340 ;;		wreg, status,2, status,0, pclath, cstack
  7341 ;; Tracked objects:
  7342 ;;		On entry : B1F/0
  7343 ;;		On exit  : 1F/1
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7350 ;;Total ram usage:        0 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:    8
  7353 ;; This function calls:
  7354 ;;		_ADC_Initialize_Default
  7355 ;;		_EUSART_Initialize_Default
  7356 ;;		_OSCILLATOR_Initialize
  7357 ;;		_PIN_Initialize
  7358 ;;		_PWM1_Initialize
  7359 ;;		_PWM2_Initialize
  7360 ;;		_PWM3_Initialize
  7361 ;;		_PWM4_Initialize
  7362 ;;		_PWM5_Initialize
  7363 ;;		_TMR0_Initialize_Default
  7364 ;;		_TMR1_Initialize_Default
  7365 ;;		_TMR2_Initialize_Default
  7366 ;;		_TMR4_Initialize_Default
  7367 ;; This function is called by:
  7368 ;;		_main
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372                           
  7373                           ;psect for function _SYSTEM_Initialize
  7374  0D64                     _SYSTEM_Initialize:	
  7375                           
  7376                           ;main.c: 144: PIN_Initialize();
  7377                           
  7378                           ;incstack = 0
  7379                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7380  0D64  269A  3188         	fcall	_PIN_Initialize
  7381                           
  7382                           ;main.c: 145: OSCILLATOR_Initialize();
  7383  0D66  257D  3188         	fcall	_OSCILLATOR_Initialize
  7384                           
  7385                           ;main.c: 146: TMR0_Initialize_Default();
  7386  0D68  25B2  3188         	fcall	_TMR0_Initialize_Default
  7387                           
  7388                           ;main.c: 147: TMR1_Initialize_Default();
  7389  0D6A  25BD  3188         	fcall	_TMR1_Initialize_Default
  7390                           
  7391                           ;main.c: 148: TMR2_Initialize_Default();
  7392  0D6C  26ED  3188         	fcall	_TMR2_Initialize_Default
  7393                           
  7394                           ;main.c: 149: TMR4_Initialize_Default();
  7395  0D6E  26F7  3188         	fcall	_TMR4_Initialize_Default
  7396                           
  7397                           ;main.c: 150: PWM1_Initialize();
  7398  0D70  2587  3188         	fcall	_PWM1_Initialize
  7399                           
  7400                           ;main.c: 151: PWM2_Initialize();
  7401  0D72  258D  3188         	fcall	_PWM2_Initialize
  7402                           
  7403                           ;main.c: 152: PWM3_Initialize();
  7404  0D74  2596  3188         	fcall	_PWM3_Initialize
  7405                           
  7406                           ;main.c: 153: PWM4_Initialize();
  7407  0D76  25A1  3188         	fcall	_PWM4_Initialize
  7408                           
  7409                           ;main.c: 154: PWM5_Initialize();
  7410  0D78  25AC  3188         	fcall	_PWM5_Initialize
  7411                           
  7412                           ;main.c: 155: EUSART_Initialize_Default();
  7413  0D7A  27EC  3188         	fcall	_EUSART_Initialize_Default
  7414                           
  7415                           ;main.c: 156: ADC_Initialize_Default();
  7416  0D7C  2FE4               	ljmp	l4808
  7417  0D7D                     __end_of_SYSTEM_Initialize:	
  7418  0D7D                     __ptext14:	
  7419 ;; *************** function _OSCILLATOR_Initialize *****************
  7420 ;; Defined at:
  7421 ;;		line 88 in file "user/src/main.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;		None
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;		None
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  1    wreg      void 
  7428 ;; Registers used:
  7429 ;;		wreg, status,2
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 1F/12
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;Total ram usage:        0 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    7
  7442 ;; This function calls:
  7443 ;;		Nothing
  7444 ;; This function is called by:
  7445 ;;		_SYSTEM_Initialize
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           
  7450                           ;psect for function _OSCILLATOR_Initialize
  7451  0D7D                     _OSCILLATOR_Initialize:	
  7452                           
  7453                           ;main.c: 90: OSCCON1 = 0x60;
  7454                           
  7455                           ;incstack = 0
  7456                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7457  0D7D  3060               	movlw	96
  7458  0D7E  0032               	movlb	18	; select bank18
  7459  0D7F  0099               	movwf	25	;volatile
  7460                           
  7461                           ;main.c: 92: OSCCON3 = 0x00;
  7462  0D80  019B               	clrf	27	;volatile
  7463                           
  7464                           ;main.c: 94: OSCEN = 0x48;
  7465  0D81  3048               	movlw	72
  7466  0D82  009D               	movwf	29	;volatile
  7467                           
  7468                           ;main.c: 96: OSCFRQ = 0x06;
  7469  0D83  3006               	movlw	6
  7470  0D84  009F               	movwf	31	;volatile
  7471                           
  7472                           ;main.c: 98: OSCTUNE = 0x00;
  7473  0D85  019E               	clrf	30	;volatile
  7474  0D86  0008               	return
  7475  0D87                     __end_of_OSCILLATOR_Initialize:	
  7476  0D87                     __ptext12:	
  7477 ;; *************** function _PWM1_Initialize *****************
  7478 ;; Defined at:
  7479 ;;		line 6 in file "driver/src/pwm.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;		None
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;		None
  7484 ;; Return value:  Size  Location     Type
  7485 ;;                  1    wreg      void 
  7486 ;; Registers used:
  7487 ;;		wreg, status,2, status,0
  7488 ;; Tracked objects:
  7489 ;;		On entry : 1F/1
  7490 ;;		On exit  : 1F/5
  7491 ;;		Unchanged: 0/0
  7492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;Total ram usage:        0 bytes
  7498 ;; Hardware stack levels used:    1
  7499 ;; Hardware stack levels required when called:    7
  7500 ;; This function calls:
  7501 ;;		Nothing
  7502 ;; This function is called by:
  7503 ;;		_SYSTEM_Initialize
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           
  7508                           ;psect for function _PWM1_Initialize
  7509  0D87                     _PWM1_Initialize:	
  7510                           
  7511                           ;pwm.c: 8: CCP1CON = 0x8F;
  7512                           
  7513                           ;incstack = 0
  7514                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
  7515  0D87  308F               	movlw	143
  7516  0D88  0025               	movlb	5	; select bank5
  7517  0D89  0093               	movwf	19	;volatile
  7518                           
  7519                           ;pwm.c: 9: CCPR1 = 0;
  7520  0D8A  0191               	clrf	17	;volatile
  7521  0D8B  0192               	clrf	18	;volatile
  7522                           
  7523                           ;pwm.c: 10: CCPTMRSbits.C1TSEL = 0x1;
  7524  0D8C  2E8B               	ljmp	PL150	;call to abstracted procedure
  7525  0D8D                     __end_of_PWM1_Initialize:	
  7526  0D8D                     __ptext11:	
  7527 ;; *************** function _PWM2_Initialize *****************
  7528 ;; Defined at:
  7529 ;;		line 18 in file "driver/src/pwm.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;		None
  7532 ;; Auto vars:     Size  Location     Type
  7533 ;;		None
  7534 ;; Return value:  Size  Location     Type
  7535 ;;                  1    wreg      void 
  7536 ;; Registers used:
  7537 ;;		wreg, status,2, status,0
  7538 ;; Tracked objects:
  7539 ;;		On entry : 1F/5
  7540 ;;		On exit  : 1F/5
  7541 ;;		Unchanged: 0/0
  7542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;Total ram usage:        0 bytes
  7548 ;; Hardware stack levels used:    1
  7549 ;; Hardware stack levels required when called:    7
  7550 ;; This function calls:
  7551 ;;		Nothing
  7552 ;; This function is called by:
  7553 ;;		_SYSTEM_Initialize
  7554 ;; This function uses a non-reentrant model
  7555 ;;
  7556                           
  7557                           
  7558                           ;psect for function _PWM2_Initialize
  7559  0D8D                     _PWM2_Initialize:	
  7560                           
  7561                           ;pwm.c: 20: CCP2CON = 0x8F;
  7562                           
  7563                           ;incstack = 0
  7564                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
  7565  0D8D  308F               	movlw	143
  7566  0D8E  0097               	movwf	23	;volatile
  7567                           
  7568                           ;pwm.c: 21: CCPR2 = 0;
  7569  0D8F  0195               	clrf	21	;volatile
  7570  0D90  0196               	clrf	22	;volatile
  7571                           
  7572                           ;pwm.c: 22: CCPTMRSbits.C2TSEL = 0x1;
  7573  0D91  081F               	movf	31,w	;volatile
  7574  0D92  39F3               	andlw	-13
  7575  0D93  3804               	iorlw	4
  7576  0D94  009F               	movwf	31	;volatile
  7577  0D95  0008               	return
  7578  0D96                     __end_of_PWM2_Initialize:	
  7579  0D96                     __ptext10:	
  7580 ;; *************** function _PWM3_Initialize *****************
  7581 ;; Defined at:
  7582 ;;		line 30 in file "driver/src/pwm.c"
  7583 ;; Parameters:    Size  Location     Type
  7584 ;;		None
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;		None
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  1    wreg      void 
  7589 ;; Registers used:
  7590 ;;		wreg, status,2, status,0
  7591 ;; Tracked objects:
  7592 ;;		On entry : 1F/5
  7593 ;;		On exit  : 1F/5
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;Total ram usage:        0 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    7
  7603 ;; This function calls:
  7604 ;;		Nothing
  7605 ;; This function is called by:
  7606 ;;		_SYSTEM_Initialize
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           
  7611                           ;psect for function _PWM3_Initialize
  7612  0D96                     _PWM3_Initialize:	
  7613                           
  7614                           ;pwm.c: 32: CCP3CON = 0x8F;
  7615                           
  7616                           ;incstack = 0
  7617                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  7618  0D96  308F               	movlw	143
  7619  0D97  0026               	movlb	6	; select bank6
  7620  0D98  0093               	movwf	19	;volatile
  7621                           
  7622                           ;pwm.c: 33: CCPR3 = 0;
  7623  0D99  0191               	clrf	17	;volatile
  7624  0D9A  0192               	clrf	18	;volatile
  7625                           
  7626                           ;pwm.c: 34: CCPTMRSbits.C3TSEL = 0x1;
  7627  0D9B  0025               	movlb	5	; select bank5
  7628  0D9C  081F               	movf	31,w	;volatile
  7629  0D9D  39CF               	andlw	-49
  7630  0D9E  3810               	iorlw	16
  7631  0D9F  009F               	movwf	31	;volatile
  7632  0DA0  0008               	return
  7633  0DA1                     __end_of_PWM3_Initialize:	
  7634  0DA1                     __ptext9:	
  7635 ;; *************** function _PWM4_Initialize *****************
  7636 ;; Defined at:
  7637 ;;		line 42 in file "driver/src/pwm.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;		None
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;		None
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  1    wreg      void 
  7644 ;; Registers used:
  7645 ;;		wreg, status,2, status,0
  7646 ;; Tracked objects:
  7647 ;;		On entry : 1F/5
  7648 ;;		On exit  : 1F/5
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7655 ;;Total ram usage:        0 bytes
  7656 ;; Hardware stack levels used:    1
  7657 ;; Hardware stack levels required when called:    7
  7658 ;; This function calls:
  7659 ;;		Nothing
  7660 ;; This function is called by:
  7661 ;;		_SYSTEM_Initialize
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665                           
  7666                           ;psect for function _PWM4_Initialize
  7667  0DA1                     _PWM4_Initialize:	
  7668                           
  7669                           ;pwm.c: 44: CCP4CON = 0x8F;
  7670                           
  7671                           ;incstack = 0
  7672                           ; Regs used in _PWM4_Initialize: [wreg+status,2+status,0]
  7673  0DA1  308F               	movlw	143
  7674  0DA2  0026               	movlb	6	; select bank6
  7675  0DA3  0097               	movwf	23	;volatile
  7676                           
  7677                           ;pwm.c: 45: CCPR4 = 0;
  7678  0DA4  0195               	clrf	21	;volatile
  7679  0DA5  0196               	clrf	22	;volatile
  7680                           
  7681                           ;pwm.c: 46: CCPTMRSbits.C4TSEL = 0x1;
  7682  0DA6  0025               	movlb	5	; select bank5
  7683  0DA7  081F               	movf	31,w	;volatile
  7684  0DA8  393F               	andlw	-193
  7685  0DA9  3840               	iorlw	64
  7686  0DAA  009F               	movwf	31	;volatile
  7687  0DAB  0008               	return
  7688  0DAC                     __end_of_PWM4_Initialize:	
  7689  0DAC                     __ptext8:	
  7690 ;; *************** function _PWM5_Initialize *****************
  7691 ;; Defined at:
  7692 ;;		line 54 in file "driver/src/pwm.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;		None
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;		None
  7697 ;; Return value:  Size  Location     Type
  7698 ;;                  1    wreg      void 
  7699 ;; Registers used:
  7700 ;;		wreg, status,2, status,0
  7701 ;; Tracked objects:
  7702 ;;		On entry : 1F/5
  7703 ;;		On exit  : 1F/C
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7710 ;;Total ram usage:        0 bytes
  7711 ;; Hardware stack levels used:    1
  7712 ;; Hardware stack levels required when called:    7
  7713 ;; This function calls:
  7714 ;;		Nothing
  7715 ;; This function is called by:
  7716 ;;		_SYSTEM_Initialize
  7717 ;; This function uses a non-reentrant model
  7718 ;;
  7719                           
  7720                           
  7721                           ;psect for function _PWM5_Initialize
  7722  0DAC                     _PWM5_Initialize:	
  7723                           
  7724                           ;pwm.c: 56: PWM5CON = 0x80;
  7725                           
  7726                           ;incstack = 0
  7727                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
  7728  0DAC  3080               	movlw	128
  7729  0DAD  002C               	movlb	12	; select bank12
  7730  0DAE  0099               	movwf	25	;volatile
  7731                           
  7732                           ;pwm.c: 57: PWM5DC = 0;
  7733  0DAF  0197               	clrf	23	;volatile
  7734  0DB0  0198               	clrf	24	;volatile
  7735                           
  7736                           ;pwm.c: 58: PWMTMRSbits.P5TSEL = 0x1;
  7737  0DB1  2E8B               	ljmp	PL150	;call to abstracted procedure
  7738  0DB2                     __end_of_PWM5_Initialize:	
  7739  0DB2                     __ptext7:	
  7740 ;; *************** function _TMR0_Initialize_Default *****************
  7741 ;; Defined at:
  7742 ;;		line 5 in file "driver/src/tmr0.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;		None
  7745 ;; Auto vars:     Size  Location     Type
  7746 ;;		None
  7747 ;; Return value:  Size  Location     Type
  7748 ;;                  1    wreg      void 
  7749 ;; Registers used:
  7750 ;;		wreg, status,2
  7751 ;; Tracked objects:
  7752 ;;		On entry : 1F/12
  7753 ;;		On exit  : 1F/1
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;Total ram usage:        0 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; Hardware stack levels required when called:    7
  7763 ;; This function calls:
  7764 ;;		Nothing
  7765 ;; This function is called by:
  7766 ;;		_SYSTEM_Initialize
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           
  7771                           ;psect for function _TMR0_Initialize_Default
  7772  0DB2                     _TMR0_Initialize_Default:	
  7773                           
  7774                           ;tmr0.c: 7: T0CON0 = 0x00;
  7775                           
  7776                           ;incstack = 0
  7777                           ; Regs used in _TMR0_Initialize_Default: [wreg+status,2]
  7778  0DB2  0020               	movlb	0	; select bank0
  7779  0DB3  0197               	clrf	23	;volatile
  7780                           
  7781                           ;tmr0.c: 8: T0CON1 = 0xC0 | 0x10 | 0x07;
  7782  0DB4  30D7               	movlw	215
  7783  0DB5  0098               	movwf	24	;volatile
  7784                           
  7785                           ;tmr0.c: 10: TMR0H = 0xFF;
  7786  0DB6  30FF               	movlw	255
  7787  0DB7  0096               	movwf	22	;volatile
  7788                           
  7789                           ;tmr0.c: 11: TMR0L = 0x00;
  7790  0DB8  0195               	clrf	21	;volatile
  7791                           
  7792                           ;tmr0.c: 13: PIR0bits.TMR0IF = 0;
  7793  0DB9  1290               	bcf	16,5	;volatile
  7794                           
  7795                           ;tmr0.c: 14: PIE0bits.TMR0IE = 1;
  7796  0DBA  0021               	movlb	1	; select bank1
  7797  0DBB  1690               	bsf	16,5	;volatile
  7798  0DBC  0008               	return
  7799  0DBD                     __end_of_TMR0_Initialize_Default:	
  7800  0DBD                     __ptext6:	
  7801 ;; *************** function _TMR1_Initialize_Default *****************
  7802 ;; Defined at:
  7803 ;;		line 9 in file "driver/src/tmr1.c"
  7804 ;; Parameters:    Size  Location     Type
  7805 ;;		None
  7806 ;; Auto vars:     Size  Location     Type
  7807 ;;		None
  7808 ;; Return value:  Size  Location     Type
  7809 ;;                  1    wreg      void 
  7810 ;; Registers used:
  7811 ;;		wreg, status,2
  7812 ;; Tracked objects:
  7813 ;;		On entry : 1F/1
  7814 ;;		On exit  : 1F/1
  7815 ;;		Unchanged: 0/0
  7816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7821 ;;Total ram usage:        0 bytes
  7822 ;; Hardware stack levels used:    1
  7823 ;; Hardware stack levels required when called:    7
  7824 ;; This function calls:
  7825 ;;		Nothing
  7826 ;; This function is called by:
  7827 ;;		_SYSTEM_Initialize
  7828 ;; This function uses a non-reentrant model
  7829 ;;
  7830                           
  7831                           
  7832                           ;psect for function _TMR1_Initialize_Default
  7833  0DBD                     _TMR1_Initialize_Default:	
  7834                           
  7835                           ;tmr1.c: 11: T1CON = 0x30 | 0x04 | 0x00;
  7836                           
  7837                           ;incstack = 0
  7838                           ; Regs used in _TMR1_Initialize_Default: [wreg+status,2]
  7839  0DBD  3034               	movlw	52
  7840  0DBE  0020               	movlb	0	; select bank0
  7841  0DBF  009B               	movwf	27	;volatile
  7842                           
  7843                           ;tmr1.c: 12: T1GCON = 0x00 | 0x80 | 0x40 | 0x08;
  7844  0DC0  30C8               	movlw	200
  7845  0DC1  009C               	movwf	28	;volatile
  7846                           
  7847                           ;tmr1.c: 14: TMR1 = 0x00;
  7848  0DC2  0199               	clrf	25	;volatile
  7849  0DC3  019A               	clrf	26	;volatile
  7850                           
  7851                           ;tmr1.c: 15: PIR1bits.TMR1IF = 0;
  7852  0DC4  1011               	bcf	17,0	;volatile
  7853                           
  7854                           ;tmr1.c: 16: PIE1bits.TMR1IE = 0;
  7855  0DC5  0021               	movlb	1	; select bank1
  7856  0DC6  1011               	bcf	17,0	;volatile
  7857                           
  7858                           ;tmr1.c: 17: PIR1bits.TMR1GIF = 0;
  7859  0DC7  0020               	movlb	0	; select bank0
  7860  0DC8  1391               	bcf	17,7	;volatile
  7861                           
  7862                           ;tmr1.c: 18: PIE1bits.TMR1GIE = 1;
  7863  0DC9  0021               	movlb	1	; select bank1
  7864  0DCA  1791               	bsf	17,7	;volatile
  7865  0DCB  0008               	return
  7866  0DCC                     __end_of_TMR1_Initialize_Default:	
  7867  0DCC                     PL2:	
  7868  0DCC  01B7               	clrf	??_Led_InitPara+1
  7869  0DCD  35B6               	lslf	??_Led_InitPara,f
  7870  0DCE  0DB7               	rlf	??_Led_InitPara+1,f
  7871  0DCF  00B8               	movwf	??_Led_InitPara+2
  7872  0DD0  3023               	movlw	35
  7873  0DD1  00B9               	movwf	??_Led_InitPara+3
  7874  0DD2  0836               	movf	??_Led_InitPara,w
  7875  0DD3  0738               	addwf	??_Led_InitPara+2,w
  7876  0DD4  0086               	movwf	6
  7877  0DD5  0837               	movf	??_Led_InitPara+1,w
  7878  0DD6  3D39               	addwfc	??_Led_InitPara+3,w
  7879  0DD7  0087               	movwf	7
  7880  0DD8  3F40               	moviw [0]fsr1
  7881  0DD9  00BA               	movwf	??_Led_InitPara+4
  7882  0DDA  3F41               	moviw [1]fsr1
  7883  0DDB  00BB               	movwf	??_Led_InitPara+5
  7884  0DDC  3003               	movlw	3
  7885  0DDD  023B               	subwf	??_Led_InitPara+5,w
  7886  0DDE  34E9               	retlw	233
  7887  0DDF                     __end_ofPL2:	
  7888  0DDF                     PL6:	
  7889  0DDF  01B9               	clrf	??_Led_InitPara+3
  7890  0DE0  35B8               	lslf	??_Led_InitPara+2,f
  7891  0DE1  0DB9               	rlf	??_Led_InitPara+3,f
  7892  0DE2  00BA               	movwf	??_Led_InitPara+4
  7893  0DE3  3023               	movlw	35
  7894  0DE4  00BB               	movwf	??_Led_InitPara+5
  7895  0DE5  0838               	movf	??_Led_InitPara+2,w
  7896  0DE6  073A               	addwf	??_Led_InitPara+4,w
  7897  0DE7  0086               	movwf	6
  7898  0DE8  0839               	movf	??_Led_InitPara+3,w
  7899  0DE9  3D3B               	addwfc	??_Led_InitPara+5,w
  7900  0DEA  0087               	movwf	7
  7901  0DEB  0836               	movf	??_Led_InitPara,w
  7902  0DEC  3FC0               	movwi [0]fsr1
  7903  0DED  0837               	movf	??_Led_InitPara+1,w
  7904  0DEE  3FC1               	movwi [1]fsr1
  7905  0DEF  0008               	return
  7906  0DF0                     __end_ofPL6:	
  7907  0DF0                     PL20:	
  7908  0DF0  01B4               	clrf	??_Led_Initialize+1
  7909  0DF1  35B3               	lslf	??_Led_Initialize,f
  7910  0DF2  0DB4               	rlf	??_Led_Initialize+1,f
  7911  0DF3  00B5               	movwf	??_Led_Initialize+2
  7912  0DF4  3023               	movlw	35
  7913  0DF5  00B6               	movwf	??_Led_Initialize+3
  7914  0DF6  0833               	movf	??_Led_Initialize,w
  7915  0DF7  0735               	addwf	??_Led_Initialize+2,w
  7916  0DF8  0086               	movwf	6
  7917  0DF9  0834               	movf	??_Led_Initialize+1,w
  7918  0DFA  3D36               	addwfc	??_Led_Initialize+3,w
  7919  0DFB  0087               	movwf	7
  7920  0DFC  353C               	lslf	Led_Initialize@i,w
  7921  0DFD  0008               	return
  7922  0DFE                     __end_ofPL20:	
  7923  0DFE                     PL22:	
  7924  0DFE  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  7925  0DFF  0084               	movwf	4
  7926  0E00  0185               	clrf	5
  7927  0E01  3F40               	moviw [0]fsr1
  7928  0E02  3F80               	movwi [0]fsr0
  7929  0E03  3F41               	moviw [1]fsr1
  7930  0E04  3F81               	movwi [1]fsr0
  7931  0E05  0008               	return
  7932  0E06                     __end_ofPL22:	
  7933  0E06                     PL26:	
  7934  0E06  01B4               	clrf	??_Led_CheckAutoStatus+1
  7935  0E07  35B3               	lslf	??_Led_CheckAutoStatus,f
  7936  0E08  0DB4               	rlf	??_Led_CheckAutoStatus+1,f
  7937  0E09  00B5               	movwf	??_Led_CheckAutoStatus+2
  7938  0E0A  3023               	movlw	35
  7939  0E0B  00B6               	movwf	??_Led_CheckAutoStatus+3
  7940  0E0C  0833               	movf	??_Led_CheckAutoStatus,w
  7941  0E0D  0735               	addwf	??_Led_CheckAutoStatus+2,w
  7942  0E0E  0086               	movwf	6
  7943  0E0F  0834               	movf	??_Led_CheckAutoStatus+1,w
  7944  0E10  3D36               	addwfc	??_Led_CheckAutoStatus+3,w
  7945  0E11  0087               	movwf	7
  7946  0E12  0008               	return
  7947  0E13                     __end_ofPL26:	
  7948  0E13                     PL36:	
  7949  0E13  30E8               	movlw	232
  7950  0E14  00B6               	movwf	??_Led_InitPara
  7951  0E15  3003               	movlw	3
  7952  0E16  00B7               	movwf	??_Led_InitPara+1
  7953  0E17  083F               	movf	Led_InitPara@i,w
  7954  0E18  00B8               	movwf	??_Led_InitPara+2
  7955  0E19  0008               	return
  7956  0E1A                     __end_ofPL36:	
  7957  0E1A                     PL48:	
  7958  0E1A  0086               	movwf	6
  7959  0E1B  3023               	movlw	35
  7960  0E1C  0087               	movwf	7
  7961  0E1D  3F40               	moviw [0]fsr1
  7962  0E1E  0021               	movlb	1	; select bank1
  7963  0E1F  00D4               	movwf	(_gLedRunPara^(0+128)+10)	;volatile
  7964  0E20  3F41               	moviw [1]fsr1
  7965  0E21  00D5               	movwf	((_gLedRunPara+1)^(0+128)+10)	;volatile
  7966  0E22  0008               	return
  7967  0E23                     __end_ofPL48:	
  7968  0E23                     PL56:	
  7969  0E23  3F40               	moviw [0]fsr1
  7970  0E24  3F80               	movwi [0]fsr0
  7971  0E25  3F41               	moviw [1]fsr1
  7972  0E26  3F81               	movwi [1]fsr0
  7973  0E27  3405               	retlw	5
  7974  0E28                     __end_ofPL56:	
  7975  0E28                     PL92:	
  7976  0E28  0086               	movwf	6
  7977  0E29  3F40               	moviw [0]fsr1
  7978  0E2A  00B9               	movwf	??_Led_AutoRun+2
  7979  0E2B  3F41               	moviw [1]fsr1
  7980  0E2C  00BA               	movwf	??_Led_AutoRun+3
  7981  0E2D  0838               	movf	??_Led_AutoRun+1,w
  7982  0E2E  023A               	subwf	??_Led_AutoRun+3,w
  7983  0E2F  1D03               	skipz
  7984  0E30  0008               	return
  7985  0E31  0837               	movf	??_Led_AutoRun,w
  7986  0E32  0239               	subwf	??_Led_AutoRun+2,w
  7987  0E33  0008               	return
  7988  0E34                     __end_ofPL92:	
  7989  0E34                     PL98:	
  7990  0E34  0086               	movwf	6
  7991  0E35  3F40               	moviw [0]fsr1
  7992  0E36  00B5               	movwf	??_Led_Initialize+2
  7993  0E37  3F41               	moviw [1]fsr1
  7994  0E38  00B6               	movwf	??_Led_Initialize+3
  7995  0E39  0834               	movf	??_Led_Initialize+1,w
  7996  0E3A  0236               	subwf	??_Led_Initialize+3,w
  7997  0E3B  1D03               	skipz
  7998  0E3C  0008               	return
  7999  0E3D  0833               	movf	??_Led_Initialize,w
  8000  0E3E  0235               	subwf	??_Led_Initialize+2,w
  8001  0E3F  0008               	return
  8002  0E40                     __end_ofPL98:	
  8003  0E40                     PL100:	
  8004  0E40  0086               	movwf	6
  8005  0E41  3023               	movlw	35
  8006  0E42  0087               	movwf	7
  8007  0E43  3F40               	moviw [0]fsr1
  8008  0E44  00B3               	movwf	??_Led_Initialize
  8009  0E45  3F41               	moviw [1]fsr1
  8010  0E46  0008               	return
  8011  0E47                     __end_ofPL100:	
  8012  0E47                     PL104:	
  8013  0E47  0086               	movwf	6
  8014  0E48  3023               	movlw	35
  8015  0E49  0087               	movwf	7
  8016  0E4A  3F40               	moviw [0]fsr1
  8017  0E4B  00B6               	movwf	??_Led_InitPara
  8018  0E4C  3F41               	moviw [1]fsr1
  8019  0E4D  00B7               	movwf	??_Led_InitPara+1
  8020  0E4E  3005               	movlw	5
  8021  0E4F  0237               	subwf	??_Led_InitPara+1,w
  8022  0E50  34A0               	retlw	160
  8023  0E51                     __end_ofPL104:	
  8024  0E51                     PL114:	
  8025  0E51  0086               	movwf	6
  8026  0E52  0187               	clrf	7
  8027  0E53  0801               	movf	1,w
  8028  0E54  0020               	movlb	0	; select bank0
  8029  0E55  00AD               	movwf	___wmul@multiplier
  8030  0E56  303C               	movlw	60
  8031  0E57  01AE               	clrf	___wmul@multiplier+1
  8032  0E58  00AF               	movwf	___wmul@multiplicand
  8033  0E59  01B0               	clrf	___wmul@multiplicand+1
  8034  0E5A  0008               	return
  8035  0E5B                     __end_ofPL114:	
  8036  0E5B                     PL116:	
  8037  0E5B  30CA               	movlw	low _gLedRunPara
  8038  0E5C  0020               	movlb	0	; select bank0
  8039  0E5D  00AD               	movwf	Util_IncValue@pSrc
  8040  0E5E  3000               	movlw	high _gLedRunPara
  8041  0E5F  00AE               	movwf	Util_IncValue@pSrc+1
  8042  0E60  30E8               	movlw	232
  8043  0E61  00AF               	movwf	Util_IncValue@max
  8044  0E62  3003               	movlw	3
  8045  0E63  00B0               	movwf	Util_IncValue@max+1
  8046  0E64  0008               	return
  8047  0E65                     __end_ofPL116:	
  8048  0E65                     PL118:	
  8049  0E65  0086               	movwf	6
  8050  0E66  3F40               	moviw [0]fsr1
  8051  0E67  00DC               	movwf	(_gLedRunPara^(0+128)+18)	;volatile
  8052  0E68  3F41               	moviw [1]fsr1
  8053  0E69  00DD               	movwf	((_gLedRunPara+1)^(0+128)+18)	;volatile
  8054  0E6A  0008               	return
  8055  0E6B                     __end_ofPL118:	
  8056  0E6B                     PL136:	
  8057  0E6B  0086               	movwf	6
  8058  0E6C  0187               	clrf	7
  8059  0E6D  3F40               	moviw [0]fsr1
  8060  0E6E  00B7               	movwf	??_Led_AutoRun
  8061  0E6F  3F41               	moviw [1]fsr1
  8062  0E70  00B8               	movwf	??_Led_AutoRun+1
  8063  0E71  353B               	lslf	Led_AutoRun@i,w
  8064  0E72  0008               	return
  8065  0E73                     __end_ofPL136:	
  8066  0E73                     PL140:	
  8067  0E73  0086               	movwf	6
  8068  0E74  3F40               	moviw [0]fsr1
  8069  0E75  00D6               	movwf	(_gLedRunPara^(0+128)+12)	;volatile
  8070  0E76  3F41               	moviw [1]fsr1
  8071  0E77  00D7               	movwf	((_gLedRunPara+1)^(0+128)+12)	;volatile
  8072  0E78  0008               	return
  8073  0E79                     __end_ofPL140:	
  8074  0E79                     PL142:	
  8075  0E79  0086               	movwf	6
  8076  0E7A  3F40               	moviw [0]fsr1
  8077  0E7B  00D8               	movwf	(_gLedRunPara^(0+128)+14)	;volatile
  8078  0E7C  3F41               	moviw [1]fsr1
  8079  0E7D  00D9               	movwf	((_gLedRunPara+1)^(0+128)+14)	;volatile
  8080  0E7E  0008               	return
  8081  0E7F                     __end_ofPL142:	
  8082  0E7F                     PL144:	
  8083  0E7F  0086               	movwf	6
  8084  0E80  3F40               	moviw [0]fsr1
  8085  0E81  00DA               	movwf	(_gLedRunPara^(0+128)+16)	;volatile
  8086  0E82  3F41               	moviw [1]fsr1
  8087  0E83  00DB               	movwf	((_gLedRunPara+1)^(0+128)+16)	;volatile
  8088  0E84  0008               	return
  8089  0E85                     __end_ofPL144:	
  8090  0E85                     PL148:	
  8091  0E85  0C01               	rrf	1,w
  8092  0E86  00B3               	movwf	??_Led_Initialize
  8093  0E87  0CB3               	rrf	??_Led_Initialize,f
  8094  0E88  0C33               	rrf	??_Led_Initialize,w
  8095  0E89  390F               	andlw	15
  8096  0E8A  0008               	return
  8097  0E8B                     __end_ofPL148:	
  8098  0E8B                     PL150:	
  8099  0E8B  081F               	movf	31,w	;volatile
  8100  0E8C  39FC               	andlw	-4
  8101  0E8D  3801               	iorlw	1
  8102  0E8E  009F               	movwf	31	;volatile
  8103  0E8F  0008               	return
  8104  0E90                     __end_ofPL150:	
  8105  0E90                     PL164:	
  8106  0E90  0838               	movf	Audio_GetValue@value+1,w
  8107  0E91  00C9               	movwf	Audio_GetValue@max+1
  8108  0E92  0837               	movf	Audio_GetValue@value,w
  8109  0E93  00C8               	movwf	Audio_GetValue@max
  8110  0E94  0008               	return
  8111  0E95                     __end_ofPL164:	
  8112  0E95                     PL170:	
  8113  0E95  0086               	movwf	6
  8114  0E96  3000               	movlw	0
  8115  0E97  3FC0               	movwi [0]fsr1
  8116  0E98  3FC1               	movwi [1]fsr1
  8117  0E99  0008               	return
  8118  0E9A                     __end_ofPL170:	
  8119  0E9A                     __ptext13:	
  8120 ;; *************** function _PIN_Initialize *****************
  8121 ;; Defined at:
  8122 ;;		line 101 in file "user/src/main.c"
  8123 ;; Parameters:    Size  Location     Type
  8124 ;;		None
  8125 ;; Auto vars:     Size  Location     Type
  8126 ;;  state           1   13[BANK0 ] unsigned char 
  8127 ;; Return value:  Size  Location     Type
  8128 ;;                  1    wreg      void 
  8129 ;; Registers used:
  8130 ;;		wreg, status,2, status,0
  8131 ;; Tracked objects:
  8132 ;;		On entry : B1F/0
  8133 ;;		On exit  : 0/0
  8134 ;;		Unchanged: 0/0
  8135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8137 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8139 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8140 ;;Total ram usage:        1 bytes
  8141 ;; Hardware stack levels used:    1
  8142 ;; Hardware stack levels required when called:    7
  8143 ;; This function calls:
  8144 ;;		Nothing
  8145 ;; This function is called by:
  8146 ;;		_SYSTEM_Initialize
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           
  8151                           ;psect for function _PIN_Initialize
  8152  0E9A                     _PIN_Initialize:	
  8153                           
  8154                           ;main.c: 102: LATA = 0x00;
  8155                           
  8156                           ;incstack = 0
  8157                           ; Regs used in _PIN_Initialize: [wreg+status,2+status,0]
  8158  0E9A  0022               	movlb	2	; select bank2
  8159  0E9B  018C               	clrf	12	;volatile
  8160                           
  8161                           ;main.c: 103: LATB = 0x80;
  8162  0E9C  3080               	movlw	128
  8163  0E9D  008D               	movwf	13	;volatile
  8164                           
  8165                           ;main.c: 104: LATC = 0x00;
  8166  0E9E  018E               	clrf	14	;volatile
  8167                           
  8168                           ;main.c: 106: TRISA = 0x30;
  8169  0E9F  3030               	movlw	48
  8170  0EA0  0021               	movlb	1	; select bank1
  8171  0EA1  008C               	movwf	12	;volatile
  8172                           
  8173                           ;main.c: 107: TRISB = 0x60;
  8174  0EA2  3060               	movlw	96
  8175  0EA3  008D               	movwf	13	;volatile
  8176                           
  8177                           ;main.c: 108: TRISC = 0x05;
  8178  0EA4  3005               	movlw	5
  8179  0EA5  008E               	movwf	14	;volatile
  8180                           
  8181                           ;main.c: 110: ANSELC = 0x04;
  8182  0EA6  3004               	movlw	4
  8183  0EA7  0023               	movlb	3	; select bank3
  8184  0EA8  008E               	movwf	14	;volatile
  8185                           
  8186                           ;main.c: 111: ANSELB = 0x00;
  8187  0EA9  018D               	clrf	13	;volatile
  8188                           
  8189                           ;main.c: 112: ANSELA = 0x00;
  8190  0EAA  018C               	clrf	12	;volatile
  8191                           
  8192                           ;main.c: 114: WPUB = 0x60;
  8193  0EAB  3060               	movlw	96
  8194  0EAC  0024               	movlb	4	; select bank4
  8195  0EAD  008D               	movwf	13	;volatile
  8196                           
  8197                           ;main.c: 115: WPUA = 0x00;
  8198  0EAE  018C               	clrf	12	;volatile
  8199                           
  8200                           ;main.c: 116: WPUC = 0x01;
  8201  0EAF  3001               	movlw	1
  8202  0EB0  008E               	movwf	14	;volatile
  8203                           
  8204                           ;main.c: 118: ODCONA = 0x00;
  8205  0EB1  0025               	movlb	5	; select bank5
  8206  0EB2  018C               	clrf	12	;volatile
  8207                           
  8208                           ;main.c: 119: ODCONB = 0x00;
  8209  0EB3  018D               	clrf	13	;volatile
  8210                           
  8211                           ;main.c: 120: ODCONC = 0x00;
  8212  0EB4  018E               	clrf	14	;volatile
  8213                           
  8214                           ;main.c: 122: uint8_t state = GIE;
  8215  0EB5  3000               	movlw	0
  8216  0EB6  1B8B               	btfsc	11,7	;volatile
  8217  0EB7  3001               	movlw	1
  8218  0EB8  0020               	movlb	0	; select bank0
  8219  0EB9  00AD               	movwf	PIN_Initialize@state
  8220                           
  8221                           ;main.c: 123: GIE = 0;
  8222  0EBA  138B               	bcf	11,7	;volatile
  8223                           
  8224                           ;main.c: 124: PPSLOCK = 0x55;
  8225                           
  8226                           ;main.c: 125: PPSLOCK = 0xAA;
  8227  0EBB  26E7  3188         	fcall	PL146	;call to abstracted procedure
  8228                           
  8229                           ;main.c: 126: PPSLOCKbits.PPSLOCKED = 0x00;
  8230  0EBD  100F               	bcf	15,0	;volatile
  8231                           
  8232                           ;main.c: 128: RC5PPSbits.RC5PPS = 0x0C;
  8233  0EBE  003D               	movlb	29	; select bank29
  8234  0EBF  0825               	movf	37,w	;volatile
  8235  0EC0  39E0               	andlw	-32
  8236  0EC1  380C               	iorlw	12
  8237  0EC2  00A5               	movwf	37	;volatile
  8238                           
  8239                           ;main.c: 129: RC3PPSbits.RC3PPS = 0x0D;
  8240  0EC3  0823               	movf	35,w	;volatile
  8241  0EC4  39E0               	andlw	-32
  8242  0EC5  380D               	iorlw	13
  8243  0EC6  00A3               	movwf	35	;volatile
  8244                           
  8245                           ;main.c: 130: RA2PPSbits.RA2PPS = 0x0E;
  8246  0EC7  0812               	movf	18,w	;volatile
  8247  0EC8  39E0               	andlw	-32
  8248  0EC9  380E               	iorlw	14
  8249  0ECA  0092               	movwf	18	;volatile
  8250                           
  8251                           ;main.c: 131: RC1PPSbits.RC1PPS = 0x0F;
  8252  0ECB  0821               	movf	33,w	;volatile
  8253  0ECC  39E0               	andlw	-32
  8254  0ECD  380F               	iorlw	15
  8255  0ECE  00A1               	movwf	33	;volatile
  8256                           
  8257                           ;main.c: 132: RC7PPSbits.RC7PPS = 0x02;
  8258  0ECF  0827               	movf	39,w	;volatile
  8259  0ED0  39E0               	andlw	-32
  8260  0ED1  3802               	iorlw	2
  8261  0ED2  00A7               	movwf	39	;volatile
  8262                           
  8263                           ;main.c: 133: T1GPPSbits.T1GPPS = 0x10;
  8264  0ED3  003C               	movlb	28	; select bank28
  8265  0ED4  0813               	movf	19,w	;volatile
  8266  0ED5  39E0               	andlw	-32
  8267  0ED6  3810               	iorlw	16
  8268  0ED7  0093               	movwf	19	;volatile
  8269                           
  8270                           ;main.c: 134: RB7PPSbits.RB7PPS = 0x14;
  8271  0ED8  003D               	movlb	29	; select bank29
  8272  0ED9  081F               	movf	31,w	;volatile
  8273  0EDA  39E0               	andlw	-32
  8274  0EDB  3814               	iorlw	20
  8275  0EDC  009F               	movwf	31	;volatile
  8276                           
  8277                           ;main.c: 136: PPSLOCK = 0x55;
  8278                           
  8279                           ;main.c: 137: PPSLOCK = 0xAA;
  8280  0EDD  26E7  3188         	fcall	PL146	;call to abstracted procedure
  8281                           
  8282                           ;main.c: 138: PPSLOCKbits.PPSLOCKED = 0x01;
  8283  0EDF  140F               	bsf	15,0	;volatile
  8284                           
  8285                           ;main.c: 140: GIE = state;
  8286  0EE0  0020               	movlb	0	; select bank0
  8287  0EE1  1C2D               	btfss	PIN_Initialize@state,0
  8288  0EE2  2EE5               	goto	u3730
  8289  0EE3  178B               	bsf	11,7	;volatile
  8290  0EE4  0008               	return
  8291  0EE5                     u3730:	
  8292  0EE5  138B               	bcf	11,7	;volatile
  8293  0EE6  0008               	return
  8294  0EE7                     __end_of_PIN_Initialize:	
  8295  0EE7                     PL146:	
  8296  0EE7  3055               	movlw	85
  8297  0EE8  003C               	movlb	28	; select bank28
  8298  0EE9  008F               	movwf	15	;volatile
  8299  0EEA  30AA               	movlw	170
  8300  0EEB  008F               	movwf	15	;volatile
  8301  0EEC  0008               	return
  8302  0EED                     __end_ofPL146:	
  8303  0EED                     __ptext5:	
  8304 ;; *************** function _TMR2_Initialize_Default *****************
  8305 ;; Defined at:
  8306 ;;		line 7 in file "driver/src/tmr2.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;		None
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;		None
  8311 ;; Return value:  Size  Location     Type
  8312 ;;                  1    wreg      void 
  8313 ;; Registers used:
  8314 ;;		wreg, status,2
  8315 ;; Tracked objects:
  8316 ;;		On entry : 1F/1
  8317 ;;		On exit  : 1F/1
  8318 ;;		Unchanged: 0/0
  8319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;Total ram usage:        0 bytes
  8325 ;; Hardware stack levels used:    1
  8326 ;; Hardware stack levels required when called:    7
  8327 ;; This function calls:
  8328 ;;		Nothing
  8329 ;; This function is called by:
  8330 ;;		_SYSTEM_Initialize
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334                           
  8335                           ;psect for function _TMR2_Initialize_Default
  8336  0EED                     _TMR2_Initialize_Default:	
  8337                           
  8338                           ;tmr2.c: 9: T2CON = 0x00 | 0x78;
  8339                           
  8340                           ;incstack = 0
  8341                           ; Regs used in _TMR2_Initialize_Default: [wreg+status,2]
  8342  0EED  3078               	movlw	120
  8343  0EEE  0020               	movlb	0	; select bank0
  8344  0EEF  009F               	movwf	31	;volatile
  8345                           
  8346                           ;tmr2.c: 10: PR2 = 0xF9;
  8347  0EF0  30F9               	movlw	249
  8348  0EF1  009E               	movwf	30	;volatile
  8349                           
  8350                           ;tmr2.c: 11: TMR2 = 0x00;
  8351  0EF2  019D               	clrf	29	;volatile
  8352                           
  8353                           ;tmr2.c: 12: PIR1bits.TMR2IF = 0;
  8354  0EF3  1091               	bcf	17,1	;volatile
  8355                           
  8356                           ;tmr2.c: 13: PIE1bits.TMR2IE = 1;
  8357  0EF4  0021               	movlb	1	; select bank1
  8358  0EF5  1491               	bsf	17,1	;volatile
  8359  0EF6  0008               	return
  8360  0EF7                     __end_of_TMR2_Initialize_Default:	
  8361  0EF7                     __ptext4:	
  8362 ;; *************** function _TMR4_Initialize_Default *****************
  8363 ;; Defined at:
  8364 ;;		line 7 in file "driver/src/tmr4.c"
  8365 ;; Parameters:    Size  Location     Type
  8366 ;;		None
  8367 ;; Auto vars:     Size  Location     Type
  8368 ;;		None
  8369 ;; Return value:  Size  Location     Type
  8370 ;;                  1    wreg      void 
  8371 ;; Registers used:
  8372 ;;		wreg, status,2
  8373 ;; Tracked objects:
  8374 ;;		On entry : 1F/1
  8375 ;;		On exit  : 1F/1
  8376 ;;		Unchanged: 0/0
  8377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8382 ;;Total ram usage:        0 bytes
  8383 ;; Hardware stack levels used:    1
  8384 ;; Hardware stack levels required when called:    7
  8385 ;; This function calls:
  8386 ;;		Nothing
  8387 ;; This function is called by:
  8388 ;;		_SYSTEM_Initialize
  8389 ;; This function uses a non-reentrant model
  8390 ;;
  8391                           
  8392                           
  8393                           ;psect for function _TMR4_Initialize_Default
  8394  0EF7                     _TMR4_Initialize_Default:	
  8395                           
  8396                           ;tmr4.c: 9: T4CON = 0x03 | 0x78;
  8397                           
  8398                           ;incstack = 0
  8399                           ; Regs used in _TMR4_Initialize_Default: [wreg+status,2]
  8400  0EF7  307B               	movlw	123
  8401  0EF8  0028               	movlb	8	; select bank8
  8402  0EF9  0097               	movwf	23	;volatile
  8403                           
  8404                           ;tmr4.c: 10: PR4 = 0xF9;
  8405  0EFA  30F9               	movlw	249
  8406  0EFB  0096               	movwf	22	;volatile
  8407                           
  8408                           ;tmr4.c: 11: TMR4 = 0x00;
  8409  0EFC  0195               	clrf	21	;volatile
  8410                           
  8411                           ;tmr4.c: 13: PIR2bits.TMR4IF = 0;
  8412  0EFD  0020               	movlb	0	; select bank0
  8413  0EFE  1092               	bcf	18,1	;volatile
  8414                           
  8415                           ;tmr4.c: 14: PIE2bits.TMR4IE = 1;
  8416  0EFF  0021               	movlb	1	; select bank1
  8417  0F00  1492               	bsf	18,1	;volatile
  8418  0F01  0008               	return
  8419  0F02                     __end_of_TMR4_Initialize_Default:	
  8420  0F02                     __ptext2:	
  8421 ;; *************** function _TMR0_StartTimer *****************
  8422 ;; Defined at:
  8423 ;;		line 17 in file "driver/src/tmr0.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;		None
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  1    wreg      void 
  8430 ;; Registers used:
  8431 ;;		None
  8432 ;; Tracked objects:
  8433 ;;		On entry : 1E/0
  8434 ;;		On exit  : 1F/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;Total ram usage:        0 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:    7
  8444 ;; This function calls:
  8445 ;;		Nothing
  8446 ;; This function is called by:
  8447 ;;		_main
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           
  8452                           ;psect for function _TMR0_StartTimer
  8453  0F02                     _TMR0_StartTimer:	
  8454                           
  8455                           ;tmr0.c: 19: T0CON0bits.T0EN = 1;
  8456                           
  8457                           ;incstack = 0
  8458                           ; Regs used in _TMR0_StartTimer: []
  8459  0F02  0020               	movlb	0	; select bank0
  8460  0F03  1797               	bsf	23,7	;volatile
  8461  0F04  0008               	return
  8462  0F05                     __end_of_TMR0_StartTimer:	
  8463  0F05                     __ptext1:	
  8464 ;; *************** function _TMR2_StartTimer *****************
  8465 ;; Defined at:
  8466 ;;		line 16 in file "driver/src/tmr2.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;		None
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;		None
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  1    wreg      void 
  8473 ;; Registers used:
  8474 ;;		None
  8475 ;; Tracked objects:
  8476 ;;		On entry : 1F/0
  8477 ;;		On exit  : 1F/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;Total ram usage:        0 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    7
  8487 ;; This function calls:
  8488 ;;		Nothing
  8489 ;; This function is called by:
  8490 ;;		_main
  8491 ;; This function uses a non-reentrant model
  8492 ;;
  8493                           
  8494                           
  8495                           ;psect for function _TMR2_StartTimer
  8496  0F05                     _TMR2_StartTimer:	
  8497                           
  8498                           ;tmr2.c: 18: T2CONbits.TMR2ON = 1;
  8499                           
  8500                           ;incstack = 0
  8501                           ; Regs used in _TMR2_StartTimer: []
  8502  0F05  151F               	bsf	31,2	;volatile
  8503  0F06  0008               	return
  8504  0F07                     __end_of_TMR2_StartTimer:	
  8505  0F07                     __ptext31:	
  8506 ;; *************** function _TMR2_SetInterruptHandler *****************
  8507 ;; Defined at:
  8508 ;;		line 35 in file "driver/src/tmr2.c"
  8509 ;; Parameters:    Size  Location     Type
  8510 ;;  handler         2   13[BANK0 ] PTR FTN()void 
  8511 ;;		 -> Led_Run(1), 
  8512 ;; Auto vars:     Size  Location     Type
  8513 ;;		None
  8514 ;; Return value:  Size  Location     Type
  8515 ;;                  1    wreg      void 
  8516 ;; Registers used:
  8517 ;;		wreg
  8518 ;; Tracked objects:
  8519 ;;		On entry : 1F/0
  8520 ;;		On exit  : 1F/1
  8521 ;;		Unchanged: 0/0
  8522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8523 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;Total ram usage:        2 bytes
  8528 ;; Hardware stack levels used:    1
  8529 ;; Hardware stack levels required when called:    7
  8530 ;; This function calls:
  8531 ;;		Nothing
  8532 ;; This function is called by:
  8533 ;;		_Interrupt_Initialize
  8534 ;; This function uses a non-reentrant model
  8535 ;;
  8536                           
  8537                           
  8538                           ;psect for function _TMR2_SetInterruptHandler
  8539  0F07                     _TMR2_SetInterruptHandler:	
  8540                           
  8541                           ;tmr2.c: 37: tmr2_isr_handler = handler;
  8542                           
  8543                           ;incstack = 0
  8544                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  8545  0F07  082E               	movf	TMR2_SetInterruptHandler@handler+1,w
  8546  0F08  0021               	movlb	1	; select bank1
  8547  0F09  00E7               	movwf	(_tmr2_isr_handler+1)^(0+128)
  8548  0F0A  0020               	movlb	0	; select bank0
  8549  0F0B  082D               	movf	TMR2_SetInterruptHandler@handler,w
  8550  0F0C  0021               	movlb	1	; select bank1
  8551  0F0D  00E6               	movwf	_tmr2_isr_handler^(0+128)
  8552  0F0E  0008               	return
  8553  0F0F                     __end_of_TMR2_SetInterruptHandler:	
  8554  0F0F                     __ptext30:	
  8555 ;; *************** function _TMR4_SetInterruptHandler *****************
  8556 ;; Defined at:
  8557 ;;		line 37 in file "driver/src/tmr4.c"
  8558 ;; Parameters:    Size  Location     Type
  8559 ;;  handler         2   13[BANK0 ] PTR FTN()void 
  8560 ;;		 -> Led_Notice(1), 
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;		None
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  1    wreg      void 
  8565 ;; Registers used:
  8566 ;;		wreg
  8567 ;; Tracked objects:
  8568 ;;		On entry : 1F/0
  8569 ;;		On exit  : 1F/1
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8572 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8575 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8576 ;;Total ram usage:        2 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; Hardware stack levels required when called:    7
  8579 ;; This function calls:
  8580 ;;		Nothing
  8581 ;; This function is called by:
  8582 ;;		_Interrupt_Initialize
  8583 ;; This function uses a non-reentrant model
  8584 ;;
  8585                           
  8586                           
  8587                           ;psect for function _TMR4_SetInterruptHandler
  8588  0F0F                     _TMR4_SetInterruptHandler:	
  8589  0F0F                     l4950:	
  8590                           ;incstack = 0
  8591                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  8592                           
  8593                           
  8594                           ;tmr4.c: 39: tmr4_isr_handler = handler;
  8595  0F0F  082E               	movf	TMR4_SetInterruptHandler@handler+1,w
  8596  0F10  0021               	movlb	1	; select bank1
  8597  0F11  00E5               	movwf	(_tmr4_isr_handler+1)^(0+128)
  8598  0F12  0020               	movlb	0	; select bank0
  8599  0F13  082D               	movf	TMR4_SetInterruptHandler@handler,w
  8600  0F14  0021               	movlb	1	; select bank1
  8601  0F15  00E4               	movwf	_tmr4_isr_handler^(0+128)
  8602  0F16  0008               	return
  8603  0F17                     __end_of_TMR4_SetInterruptHandler:	
  8604  0F17                     __ptext24:	
  8605 ;; *************** function _Led_FirstPowerUp *****************
  8606 ;; Defined at:
  8607 ;;		line 17 in file "user/src/led.c"
  8608 ;; Parameters:    Size  Location     Type
  8609 ;;		None
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;  i               1   19[BANK0 ] unsigned char 
  8612 ;; Return value:  Size  Location     Type
  8613 ;;                  1    wreg      void 
  8614 ;; Registers used:
  8615 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8616 ;; Tracked objects:
  8617 ;;		On entry : 1F/0
  8618 ;;		On exit  : 1F/0
  8619 ;;		Unchanged: 0/0
  8620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8625 ;;Total ram usage:        7 bytes
  8626 ;; Hardware stack levels used:    1
  8627 ;; Hardware stack levels required when called:    7
  8628 ;; This function calls:
  8629 ;;		Nothing
  8630 ;; This function is called by:
  8631 ;;		_Led_InitPara
  8632 ;; This function uses a non-reentrant model
  8633 ;;
  8634                           
  8635                           
  8636                           ;psect for function _Led_FirstPowerUp
  8637  0F17                     _Led_FirstPowerUp:	
  8638  0F17                     l5004:	
  8639                           ;incstack = 0
  8640                           ; Regs used in _Led_FirstPowerUp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8641                           
  8642                           
  8643                           ;led.c: 19: if(gLedPara.mFirstPowerUp != 0x55){
  8644  0F17  307B               	movlw	123
  8645  0F18  0086               	movwf	6
  8646  0F19  3023               	movlw	35
  8647  0F1A  0087               	movwf	7
  8648  0F1B  3055               	movlw	85
  8649  0F1C  3141               	addfsr 1,1
  8650  0F1D  0601               	xorwf	1,w
  8651  0F1E  1903               	btfsc	3,2
  8652  0F1F  0008               	return
  8653                           
  8654                           ;led.c: 20: gLedPara.mFirstPowerUp = 0x55;
  8655  0F20  307C               	movlw	124
  8656  0F21  0086               	movwf	6
  8657  0F22  3023               	movlw	35
  8658  0F23  0087               	movwf	7
  8659  0F24  3055               	movlw	85
  8660  0F25  0081               	movwf	1
  8661                           
  8662                           ;led.c: 21: for (uint8_t i = 0; i < 5; i++) {
  8663  0F26  01B3               	clrf	Led_FirstPowerUp@i
  8664  0F27                     l5014:	
  8665                           
  8666                           ;led.c: 22: gLedPara.mDayBright[i] = 1000;
  8667  0F27  27A3  3188         	fcall	PL88	;call to abstracted procedure
  8668  0F29  30DA               	movlw	218
  8669  0F2A  2773  3188         	fcall	PL10	;call to abstracted procedure
  8670                           
  8671                           ;led.c: 23: gLedPara.mNightBright[i] = 0;
  8672  0F2C  0833               	movf	Led_FirstPowerUp@i,w
  8673  0F2D  00AD               	movwf	??_Led_FirstPowerUp
  8674  0F2E  30E6               	movlw	230
  8675                           
  8676                           ;led.c: 24: gLedPara.mStaticDayBright[i] = 1000;
  8677  0F2F  2784  3188         	fcall	PL38	;call to abstracted procedure
  8678  0F31  30B0               	movlw	176
  8679  0F32  2773  3188         	fcall	PL10	;call to abstracted procedure
  8680                           
  8681                           ;led.c: 25: gLedPara.mStaticNightBright[i] = 0;
  8682  0F34  0833               	movf	Led_FirstPowerUp@i,w
  8683  0F35  00AD               	movwf	??_Led_FirstPowerUp
  8684  0F36  30BA               	movlw	186
  8685                           
  8686                           ;led.c: 26: gLedPara.mStaticFishBright[i] = 1000;
  8687  0F37  2784  3188         	fcall	PL38	;call to abstracted procedure
  8688  0F39  30C4               	movlw	196
  8689  0F3A  2773  3188         	fcall	PL10	;call to abstracted procedure
  8690                           
  8691                           ;led.c: 27: gLedPara.mStaticPlantBright[i] = 1000;
  8692  0F3C  27A3  3188         	fcall	PL88	;call to abstracted procedure
  8693  0F3E  30CE               	movlw	206
  8694  0F3F  2773  3188         	fcall	PL10	;call to abstracted procedure
  8695  0F41  3005               	movlw	5
  8696  0F42  0AB3               	incf	Led_FirstPowerUp@i,f
  8697  0F43  0233               	subwf	Led_FirstPowerUp@i,w
  8698  0F44  1C03               	skipc
  8699  0F45  2F27               	goto	l5014
  8700                           
  8701                           ;led.c: 28: }
  8702                           ;led.c: 29: gLedPara.mSunrise = 390;
  8703  0F46  3086               	movlw	134
  8704  0F47  00AD               	movwf	??_Led_FirstPowerUp
  8705  0F48  3001               	movlw	1
  8706  0F49  00AE               	movwf	??_Led_FirstPowerUp+1
  8707  0F4A  30D8               	movlw	216
  8708  0F4B  0086               	movwf	6
  8709  0F4C  3023               	movlw	35
  8710  0F4D  0087               	movwf	7
  8711  0F4E  082D               	movf	??_Led_FirstPowerUp,w
  8712  0F4F  3FC0               	movwi [0]fsr1
  8713  0F50  082E               	movf	??_Led_FirstPowerUp+1,w
  8714  0F51  3FC1               	movwi [1]fsr1
  8715                           
  8716                           ;led.c: 30: gLedPara.mSunset = 1110;
  8717  0F52  3056               	movlw	86
  8718  0F53  00AD               	movwf	??_Led_FirstPowerUp
  8719  0F54  3004               	movlw	4
  8720  0F55  00AE               	movwf	??_Led_FirstPowerUp+1
  8721  0F56  30E4               	movlw	228
  8722  0F57  0086               	movwf	6
  8723                           
  8724                           ;led.c: 31: gLedPara.mNightBright[2] = 1000;
  8725  0F58  279A  3188         	fcall	PL68	;call to abstracted procedure
  8726  0F5A  30EA               	movlw	234
  8727  0F5B  0086               	movwf	6
  8728                           
  8729                           ;led.c: 32: gLedPara.mStaticNightBright[2] = 1000;
  8730  0F5C  279A               	fcall	PL68	;call to abstracted procedure
  8731  0F5D  30BE               	movlw	190
  8732  0F5E  0086               	movwf	6
  8733  0F5F  082D               	movf	??_Led_FirstPowerUp,w
  8734  0F60  3FC0               	movwi [0]fsr1
  8735  0F61  082E               	movf	??_Led_FirstPowerUp+1,w
  8736  0F62  3FC1               	movwi [1]fsr1
  8737                           
  8738                           ;led.c: 33: gLedPara.mStaticFishBright[0] = 0;
  8739  0F63  30C4               	movlw	196
  8740  0F64  0086               	movwf	6
  8741  0F65  3000               	movlw	0
  8742  0F66  3FC0               	movwi [0]fsr1
  8743  0F67  3FC1               	movwi [1]fsr1
  8744                           
  8745                           ;led.c: 34: gLedPara.mStaticFishBright[1] = 0;
  8746  0F68  30C6               	movlw	198
  8747  0F69  0086               	movwf	6
  8748  0F6A  3000               	movlw	0
  8749  0F6B  3FC0               	movwi [0]fsr1
  8750  0F6C  3FC1               	movwi [1]fsr1
  8751                           
  8752                           ;led.c: 35: gLedPara.mStaticPlantBright[1] = 0;
  8753  0F6D  30D0               	movlw	208
  8754  0F6E  0086               	movwf	6
  8755  0F6F  3000               	movlw	0
  8756  0F70  3FC0               	movwi [0]fsr1
  8757  0F71  3FC1               	movwi [1]fsr1
  8758  0F72  0008               	return
  8759  0F73                     __end_of_Led_FirstPowerUp:	
  8760  0F73                     PL10:	
  8761  0F73  01B0               	clrf	??_Led_FirstPowerUp+3
  8762  0F74  35AF               	lslf	??_Led_FirstPowerUp+2,f
  8763  0F75  0DB0               	rlf	??_Led_FirstPowerUp+3,f
  8764  0F76  00B1               	movwf	??_Led_FirstPowerUp+4
  8765  0F77  3023               	movlw	35
  8766  0F78  00B2               	movwf	??_Led_FirstPowerUp+5
  8767  0F79  082F               	movf	??_Led_FirstPowerUp+2,w
  8768  0F7A  0731               	addwf	??_Led_FirstPowerUp+4,w
  8769  0F7B  0086               	movwf	6
  8770  0F7C  0830               	movf	??_Led_FirstPowerUp+3,w
  8771  0F7D  3D32               	addwfc	??_Led_FirstPowerUp+5,w
  8772  0F7E  0087               	movwf	7
  8773  0F7F  082D               	movf	??_Led_FirstPowerUp,w
  8774  0F80  3FC0               	movwi [0]fsr1
  8775  0F81  082E               	movf	??_Led_FirstPowerUp+1,w
  8776  0F82  3FC1               	movwi [1]fsr1
  8777  0F83  0008               	return
  8778  0F84                     __end_ofPL10:	
  8779  0F84                     PL38:	
  8780  0F84  01AE               	clrf	??_Led_FirstPowerUp+1
  8781  0F85  35AD               	lslf	??_Led_FirstPowerUp,f
  8782  0F86  0DAE               	rlf	??_Led_FirstPowerUp+1,f
  8783  0F87  00AF               	movwf	??_Led_FirstPowerUp+2
  8784  0F88  3023               	movlw	35
  8785  0F89  00B0               	movwf	??_Led_FirstPowerUp+3
  8786  0F8A  082D               	movf	??_Led_FirstPowerUp,w
  8787  0F8B  072F               	addwf	??_Led_FirstPowerUp+2,w
  8788  0F8C  0086               	movwf	6
  8789  0F8D  082E               	movf	??_Led_FirstPowerUp+1,w
  8790  0F8E  3D30               	addwfc	??_Led_FirstPowerUp+3,w
  8791  0F8F  0087               	movwf	7
  8792  0F90  3000               	movlw	0
  8793  0F91  3FC0               	movwi [0]fsr1
  8794  0F92  3FC1               	movwi [1]fsr1
  8795  0F93  30E8               	movlw	232
  8796  0F94  00AD               	movwf	??_Led_FirstPowerUp
  8797  0F95  3003               	movlw	3
  8798  0F96  00AE               	movwf	??_Led_FirstPowerUp+1
  8799  0F97  0833               	movf	Led_FirstPowerUp@i,w
  8800  0F98  00AF               	movwf	??_Led_FirstPowerUp+2
  8801  0F99  0008               	return
  8802  0F9A                     __end_ofPL38:	
  8803  0F9A                     PL68:	
  8804  0F9A  082D               	movf	??_Led_FirstPowerUp,w
  8805  0F9B  3FC0               	movwi [0]fsr1
  8806  0F9C  082E               	movf	??_Led_FirstPowerUp+1,w
  8807  0F9D  3FC1               	movwi [1]fsr1
  8808  0F9E  30E8               	movlw	232
  8809  0F9F  00AD               	movwf	??_Led_FirstPowerUp
  8810  0FA0  3003               	movlw	3
  8811  0FA1  00AE               	movwf	??_Led_FirstPowerUp+1
  8812  0FA2  0008               	return
  8813  0FA3                     __end_ofPL68:	
  8814  0FA3                     PL88:	
  8815  0FA3  30E8               	movlw	232
  8816  0FA4  00AD               	movwf	??_Led_FirstPowerUp
  8817  0FA5  3003               	movlw	3
  8818  0FA6  00AE               	movwf	??_Led_FirstPowerUp+1
  8819  0FA7  0833               	movf	Led_FirstPowerUp@i,w
  8820  0FA8  00AF               	movwf	??_Led_FirstPowerUp+2
  8821  0FA9  0008               	return
  8822  0FAA                     __end_ofPL88:	
  8823  0FAA                     __ptext21:	
  8824 ;; *************** function _DATAEE_WriteBuffer *****************
  8825 ;; Defined at:
  8826 ;;		line 41 in file "driver/src/eeprom.c"
  8827 ;; Parameters:    Size  Location     Type
  8828 ;;  addr            2   17[BANK0 ] unsigned int 
  8829 ;;  buf             2   19[BANK0 ] PTR unsigned char 
  8830 ;;		 -> gLedPara(117), 
  8831 ;;  len             1   21[BANK0 ] unsigned char 
  8832 ;; Auto vars:     Size  Location     Type
  8833 ;;  i               1   22[BANK0 ] unsigned char 
  8834 ;; Return value:  Size  Location     Type
  8835 ;;                  1    wreg      void 
  8836 ;; Registers used:
  8837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8838 ;; Tracked objects:
  8839 ;;		On entry : 1F/0
  8840 ;;		On exit  : 1F/0
  8841 ;;		Unchanged: 0/0
  8842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8843 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;Total ram usage:        6 bytes
  8848 ;; Hardware stack levels used:    1
  8849 ;; Hardware stack levels required when called:    8
  8850 ;; This function calls:
  8851 ;;		_DATAEE_WriteByte
  8852 ;; This function is called by:
  8853 ;;		_Led_SaveParaIfChanged
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           
  8858                           ;psect for function _DATAEE_WriteBuffer
  8859  0FAA                     _DATAEE_WriteBuffer:	
  8860  0FAA                     l4830:	
  8861                           ;incstack = 0
  8862                           ; Regs used in _DATAEE_WriteBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8863                           
  8864                           
  8865                           ;eeprom.c: 43: for ( uint8_t i = len; i != 0; i-- )
  8866  0FAA  0835               	movf	DATAEE_WriteBuffer@len,w
  8867  0FAB  00B6               	movwf	DATAEE_WriteBuffer@i
  8868  0FAC                     l4832:	
  8869  0FAC  0836               	movf	DATAEE_WriteBuffer@i,w
  8870  0FAD  1903               	btfsc	3,2
  8871  0FAE  0008               	return
  8872                           
  8873                           ;eeprom.c: 44: {
  8874                           ;eeprom.c: 45: DATAEE_WriteByte ( addr++, *buf++ );
  8875  0FAF  0832               	movf	DATAEE_WriteBuffer@addr+1,w
  8876  0FB0  00AE               	movwf	DATAEE_WriteByte@addr+1
  8877  0FB1  0831               	movf	DATAEE_WriteBuffer@addr,w
  8878  0FB2  00AD               	movwf	DATAEE_WriteByte@addr
  8879  0FB3  0833               	movf	DATAEE_WriteBuffer@buf,w
  8880  0FB4  0086               	movwf	6
  8881  0FB5  0834               	movf	DATAEE_WriteBuffer@buf+1,w
  8882  0FB6  0087               	movwf	7
  8883  0FB7  0801               	movf	1,w
  8884  0FB8  00AF               	movwf	DATAEE_WriteByte@byte
  8885  0FB9  27C3  3188         	fcall	_DATAEE_WriteByte
  8886  0FBB  0AB3               	incf	DATAEE_WriteBuffer@buf,f
  8887  0FBC  1903               	skipnz
  8888  0FBD  0AB4               	incf	DATAEE_WriteBuffer@buf+1,f
  8889  0FBE  0AB1               	incf	DATAEE_WriteBuffer@addr,f
  8890  0FBF  1903               	skipnz
  8891  0FC0  0AB2               	incf	DATAEE_WriteBuffer@addr+1,f
  8892  0FC1  03B6               	decf	DATAEE_WriteBuffer@i,f
  8893  0FC2  2FAC               	goto	l4832
  8894  0FC3                     __end_of_DATAEE_WriteBuffer:	
  8895  0FC3                     __ptext22:	
  8896 ;; *************** function _DATAEE_WriteByte *****************
  8897 ;; Defined at:
  8898 ;;		line 3 in file "driver/src/eeprom.c"
  8899 ;; Parameters:    Size  Location     Type
  8900 ;;  addr            2   13[BANK0 ] unsigned int 
  8901 ;;  byte            1   15[BANK0 ] unsigned char 
  8902 ;; Auto vars:     Size  Location     Type
  8903 ;;  GIEBitValue     1   16[BANK0 ] unsigned char 
  8904 ;; Return value:  Size  Location     Type
  8905 ;;                  1    wreg      void 
  8906 ;; Registers used:
  8907 ;;		wreg, status,2, status,0
  8908 ;; Tracked objects:
  8909 ;;		On entry : 1F/0
  8910 ;;		On exit  : 1F/0
  8911 ;;		Unchanged: 0/0
  8912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8913 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;Total ram usage:        4 bytes
  8918 ;; Hardware stack levels used:    1
  8919 ;; Hardware stack levels required when called:    7
  8920 ;; This function calls:
  8921 ;;		Nothing
  8922 ;; This function is called by:
  8923 ;;		_DATAEE_WriteBuffer
  8924 ;; This function uses a non-reentrant model
  8925 ;;
  8926                           
  8927                           
  8928                           ;psect for function _DATAEE_WriteByte
  8929  0FC3                     _DATAEE_WriteByte:	
  8930                           
  8931                           ;eeprom.c: 5: uint8_t GIEBitValue = INTCONbits.GIE;
  8932                           
  8933                           ;incstack = 0
  8934                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  8935  0FC3  3000               	movlw	0
  8936  0FC4  1B8B               	btfsc	11,7	;volatile
  8937  0FC5  3001               	movlw	1
  8938  0FC6  00B0               	movwf	DATAEE_WriteByte@GIEBitValue
  8939                           
  8940                           ;eeprom.c: 7: NVMADRH = addr >> 8;
  8941  0FC7  082E               	movf	DATAEE_WriteByte@addr+1,w
  8942  0FC8  0031               	movlb	17	; select bank17
  8943  0FC9  0092               	movwf	18	;volatile
  8944                           
  8945                           ;eeprom.c: 8: NVMADRL = addr & 0xFF;
  8946  0FCA  0020               	movlb	0	; select bank0
  8947  0FCB  082D               	movf	DATAEE_WriteByte@addr,w
  8948  0FCC  0031               	movlb	17	; select bank17
  8949  0FCD  0091               	movwf	17	;volatile
  8950                           
  8951                           ;eeprom.c: 9: NVMDATL = byte;
  8952  0FCE  0020               	movlb	0	; select bank0
  8953  0FCF  082F               	movf	DATAEE_WriteByte@byte,w
  8954  0FD0  0031               	movlb	17	; select bank17
  8955  0FD1  0093               	movwf	19	;volatile
  8956                           
  8957                           ;eeprom.c: 10: NVMCON1bits.NVMREGS = 1;
  8958  0FD2  1715               	bsf	21,6	;volsfr
  8959                           
  8960                           ;eeprom.c: 11: NVMCON1bits.WREN = 1;
  8961  0FD3  1515               	bsf	21,2	;volsfr
  8962                           
  8963                           ;eeprom.c: 12: INTCONbits.GIE = 0;
  8964  0FD4  138B               	bcf	11,7	;volatile
  8965                           
  8966                           ;eeprom.c: 13: NVMCON2 = 0x55;
  8967  0FD5  3055               	movlw	85
  8968  0FD6  0096               	movwf	22	;volsfr
  8969                           
  8970                           ;eeprom.c: 14: NVMCON2 = 0xAA;
  8971  0FD7  30AA               	movlw	170
  8972  0FD8  0096               	movwf	22	;volsfr
  8973                           
  8974                           ;eeprom.c: 15: NVMCON1bits.WR = 1;
  8975  0FD9  1495               	bsf	21,1	;volsfr
  8976  0FDA                     l46:	
  8977                           ;eeprom.c: 17: while ( NVMCON1bits.WR );
  8978                           
  8979  0FDA  1895               	btfsc	21,1	;volsfr
  8980  0FDB  2FDA               	goto	l46
  8981                           
  8982                           ;eeprom.c: 19: NVMCON1bits.WREN = 0;
  8983  0FDC  1115               	bcf	21,2	;volsfr
  8984                           
  8985                           ;eeprom.c: 20: INTCONbits.GIE = GIEBitValue;
  8986  0FDD  0020               	movlb	0	; select bank0
  8987  0FDE  0C30               	rrf	DATAEE_WriteByte@GIEBitValue,w
  8988  0FDF  1C03               	skipc
  8989  0FE0  138B               	bcf	11,7	;volatile
  8990  0FE1  1803               	skipnc
  8991  0FE2  178B               	bsf	11,7	;volatile
  8992  0FE3  0008               	return
  8993  0FE4                     __end_of_DATAEE_WriteByte:	
  8994  0FE4                     __ptext16:	
  8995 ;; *************** function _ADC_Initialize_Default *****************
  8996 ;; Defined at:
  8997 ;;		line 14 in file "driver/src/adc.c"
  8998 ;; Parameters:    Size  Location     Type
  8999 ;;		None
  9000 ;; Auto vars:     Size  Location     Type
  9001 ;;		None
  9002 ;; Return value:  Size  Location     Type
  9003 ;;                  1    wreg      void 
  9004 ;; Registers used:
  9005 ;;		wreg, status,2
  9006 ;; Tracked objects:
  9007 ;;		On entry : 1F/0
  9008 ;;		On exit  : 1F/1
  9009 ;;		Unchanged: 0/0
  9010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9015 ;;Total ram usage:        0 bytes
  9016 ;; Hardware stack levels used:    1
  9017 ;; Hardware stack levels required when called:    7
  9018 ;; This function calls:
  9019 ;;		Nothing
  9020 ;; This function is called by:
  9021 ;;		_SYSTEM_Initialize
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           
  9026                           ;psect for function _ADC_Initialize_Default
  9027  0FE4                     _ADC_Initialize_Default:	
  9028  0FE4                     l4808:	
  9029                           ;incstack = 0
  9030                           ; Regs used in _ADC_Initialize_Default: [wreg+status,2]
  9031                           
  9032                           
  9033                           ;adc.c: 16: ADCON0 = 0x00;
  9034  0FE4  0021               	movlb	1	; select bank1
  9035  0FE5  019D               	clrf	29	;volatile
  9036                           
  9037                           ;adc.c: 17: ADCON1 = 0x80 | 0x50;
  9038  0FE6  30D0               	movlw	208
  9039  0FE7  009E               	movwf	30	;volatile
  9040                           
  9041                           ;adc.c: 18: ADACT = 0x00;
  9042  0FE8  019F               	clrf	31	;volatile
  9043                           
  9044                           ;adc.c: 19: ADRESH = 0x00;
  9045  0FE9  019C               	clrf	28	;volatile
  9046                           
  9047                           ;adc.c: 20: ADRESL = 0x00;
  9048  0FEA  019B               	clrf	27	;volatile
  9049  0FEB  0008               	return
  9050  0FEC                     __end_of_ADC_Initialize_Default:	
  9051  0FEC                     __ptext15:	
  9052 ;; *************** function _EUSART_Initialize_Default *****************
  9053 ;; Defined at:
  9054 ;;		line 17 in file "driver/src/eusart.c"
  9055 ;; Parameters:    Size  Location     Type
  9056 ;;		None
  9057 ;; Auto vars:     Size  Location     Type
  9058 ;;		None
  9059 ;; Return value:  Size  Location     Type
  9060 ;;                  1    wreg      void 
  9061 ;; Registers used:
  9062 ;;		wreg, status,2
  9063 ;; Tracked objects:
  9064 ;;		On entry : 1F/C
  9065 ;;		On exit  : 1F/0
  9066 ;;		Unchanged: 0/0
  9067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;Total ram usage:        0 bytes
  9073 ;; Hardware stack levels used:    1
  9074 ;; Hardware stack levels required when called:    7
  9075 ;; This function calls:
  9076 ;;		Nothing
  9077 ;; This function is called by:
  9078 ;;		_SYSTEM_Initialize
  9079 ;; This function uses a non-reentrant model
  9080 ;;
  9081                           
  9082                           
  9083                           ;psect for function _EUSART_Initialize_Default
  9084  0FEC                     _EUSART_Initialize_Default:	
  9085                           
  9086                           ;eusart.c: 19: PIE1bits.RCIE = 0;
  9087                           
  9088                           ;incstack = 0
  9089                           ; Regs used in _EUSART_Initialize_Default: [wreg+status,2]
  9090  0FEC  0021               	movlb	1	; select bank1
  9091  0FED  1291               	bcf	17,5	;volatile
  9092                           
  9093                           ;eusart.c: 20: PIE1bits.TXIE = 0;
  9094  0FEE  1211               	bcf	17,4	;volatile
  9095                           
  9096                           ;eusart.c: 21: BAUD1CON = 0x08;
  9097  0FEF  3008               	movlw	8
  9098  0FF0  0023               	movlb	3	; select bank3
  9099  0FF1  009F               	movwf	31	;volatile
  9100                           
  9101                           ;eusart.c: 22: RC1STA = 0x80 | 0x10;
  9102  0FF2  3090               	movlw	144
  9103  0FF3  009D               	movwf	29	;volatile
  9104                           
  9105                           ;eusart.c: 23: TX1STA = 0x20 | 0x04;
  9106  0FF4  3024               	movlw	36
  9107  0FF5  009E               	movwf	30	;volatile
  9108                           
  9109                           ;eusart.c: 24: SP1BRG = 0x01A0;
  9110  0FF6  3001               	movlw	1
  9111  0FF7  009C               	movwf	28	;volatile
  9112  0FF8  30A0               	movlw	160
  9113  0FF9  009B               	movwf	27	;volatile
  9114                           
  9115                           ;eusart.c: 27: txTail = 0;
  9116  0FFA  0020               	movlb	0	; select bank0
  9117  0FFB  3020               	movlw	32
  9118  0FFC  01D3               	clrf	_txTail
  9119  0FFD  01D2               	clrf	_txHead
  9120                           
  9121                           ;eusart.c: 29: txRemain = sizeof (txBuf );
  9122  0FFE  00DE               	movwf	_txRemain
  9123  0FFF  0008               	return
  9124  1000                     __end_of_EUSART_Initialize_Default:	
  9125                           
  9126                           	psect	bssBANK0
  9127  0040                     __pbssBANK0:	
  9128  0040                     IR_ScanLongPress@cnt:	
  9129  0040                     	ds	2
  9130  0042                     IR_Decode@codeVal:	
  9131  0042                     	ds	2
  9132  0044                     Audio_GetValue@cnt:	
  9133  0044                     	ds	2
  9134  0046                     Audio_GetValue@min:	
  9135  0046                     	ds	2
  9136  0048                     Audio_GetValue@max:	
  9137  0048                     	ds	2
  9138  004A                     _audio_value:	
  9139  004A                     	ds	2
  9140  004C                     IR_Decode@rptCnt:	
  9141  004C                     	ds	1
  9142  004D                     IR_Decode@nBit:	
  9143  004D                     	ds	1
  9144  004E                     _keyValue:	
  9145  004E                     	ds	1
  9146  004F                     _rtc_status:	
  9147  004F                     	ds	1
  9148  0050                     Led_Run@cnt:	
  9149  0050                     	ds	1
  9150  0051                     Led_Notice@cnt:	
  9151  0051                     	ds	1
  9152  0052                     _txHead:	
  9153  0052                     	ds	1
  9154  0053                     _txTail:	
  9155  0053                     	ds	1
  9156  0054                     _ir_state:	
  9157  0054                     	ds	7
  9158  005B                     _rtc_time:	
  9159  005B                     	ds	3
  9160                           
  9161                           	psect	bssBANK1
  9162  00C8                     __pbssBANK1:	
  9163  00C8                     _adc_result:	
  9164  00C8                     	ds	2
  9165  00CA                     _gLedRunPara:	
  9166  00CA                     	ds	26
  9167                           
  9168                           	psect	dataBANK1
  9169  00A0                     __pdataBANK1:	
  9170  00A0                     Led_DynamicCloud@F8372:	
  9171  00A0                     	ds	10
  9172  00AA                     Led_DynamicMoon@F8362:	
  9173  00AA                     	ds	10
  9174  00B4                     Led_DynamicWave@F8352:	
  9175  00B4                     	ds	10
  9176  00BE                     _loadDuty:	
  9177  00BE                     	ds	10
  9178                           
  9179                           	psect	bssBANK2
  9180  0120                     __pbssBANK2:	
  9181  0120                     _txBuf:	
  9182  0120                     	ds	32
  9183                           
  9184                           	psect	dataBANK2
  9185  0154                     __pdataBANK2:	
  9186  0154                     Led_DynamicStorm@F8382:	
  9187  0154                     	ds	10
  9188                           
  9189                           	psect	inittext
  9190  1119                     init_ram:	
  9191  1119  00FE               	movwf	126
  9192  111A                     initloop:	
  9193  111A  0012               	moviw fsr0++
  9194  111B  001E               	movwi fsr1++
  9195  111C  3001               	movlw	1
  9196  111D  02FE               	subwf	126,f
  9197  111E  3000               	movlw	0
  9198  111F  3BFF               	subwfb	127,f
  9199  1120  087F               	movf	127,w
  9200  1121  047E               	iorwf	126,w
  9201  1122  1903               	btfsc	3,2
  9202  1123  3400               	retlw	0
  9203  1124  291A               	goto	initloop
  9204                           
  9205                           	psect	clrtext
  9206  110D                     clear_ram0:	
  9207                           ;	Called with FSR0 containing the base address, and
  9208                           ;	btemp/btemp+1 has the size to clear
  9209                           
  9210  110D  0064               	clrwdt	;clear the watchdog before getting into this loop
  9211  110E                     clrloop0:	
  9212  110E  3001               	movlw	1
  9213  110F  0180               	clrf	0	;clear RAM location pointed to by FSR
  9214  1110  3101               	addfsr 0,1
  9215  1111  02FE               	subwf	126,f
  9216  1112  3000               	movlw	0
  9217  1113  3BFF               	subwfb	127,f
  9218  1114  087F               	movf	127,w
  9219  1115  047E               	iorwf	126,w
  9220  1116  1903               	btfsc	3,2
  9221  1117  3400               	retlw	0	;all done for this memory range, return
  9222  1118  290E               	goto	clrloop0	;have we reached the end yet?
  9223                           
  9224                           	psect	cstackBANK2
  9225  0140                     __pcstackBANK2:	
  9226  0140                     ??_IR_KeyAction:	
  9227                           
  9228                           ; 1 bytes @ 0x0
  9229  0140                     	ds	10
  9230  014A                     IR_KeyAction@i:	
  9231                           
  9232                           ; 1 bytes @ 0xA
  9233  014A                     	ds	1
  9234  014B                     IR_KeyAction@i_1444:	
  9235                           
  9236                           ; 1 bytes @ 0xB
  9237  014B                     	ds	1
  9238  014C                     IR_KeyAction@i_1445:	
  9239                           
  9240                           ; 1 bytes @ 0xC
  9241  014C                     	ds	1
  9242  014D                     IR_KeyAction@i_1452:	
  9243                           
  9244                           ; 1 bytes @ 0xD
  9245  014D                     	ds	1
  9246  014E                     IR_KeyAction@i_1453:	
  9247                           
  9248                           ; 1 bytes @ 0xE
  9249  014E                     	ds	1
  9250  014F                     IR_KeyAction@i_1446:	
  9251                           
  9252                           ; 1 bytes @ 0xF
  9253  014F                     	ds	1
  9254  0150                     IR_KeyAction@i_1447:	
  9255                           
  9256                           ; 1 bytes @ 0x10
  9257  0150                     	ds	1
  9258  0151                     IR_KeyAction@i_1448:	
  9259                           
  9260                           ; 1 bytes @ 0x11
  9261  0151                     	ds	1
  9262  0152                     IR_KeyAction@i_1449:	
  9263                           
  9264                           ; 1 bytes @ 0x12
  9265  0152                     	ds	1
  9266  0153                     IR_KeyAction@idx:	
  9267                           
  9268                           ; 1 bytes @ 0x13
  9269  0153                     	ds	1
  9270                           
  9271                           	psect	cstackCOMMON
  9272  0070                     __pcstackCOMMON:	
  9273  0070                     ?_SYSTEM_Initialize:	
  9274  0070                     ?_Interrupt_Initialize:	
  9275                           ; 1 bytes @ 0x0
  9276                           
  9277  0070                     ?_Led_InitPara:	
  9278                           ; 1 bytes @ 0x0
  9279                           
  9280  0070                     ?_Led_Initialize:	
  9281                           ; 1 bytes @ 0x0
  9282                           
  9283  0070                     ?_IR_KeyAtionIfPressed:	
  9284                           ; 1 bytes @ 0x0
  9285                           
  9286  0070                     ?_IR_ResetIfTMR1Overflow:	
  9287                           ; 1 bytes @ 0x0
  9288                           
  9289  0070                     ?_Led_SaveParaIfChanged:	
  9290                           ; 1 bytes @ 0x0
  9291                           
  9292  0070                     ?_RTC_HourReady:	
  9293                           ; 1 bytes @ 0x0
  9294                           
  9295  0070                     ?_RTC_MinuteReady:	
  9296                           ; 1 bytes @ 0x0
  9297                           
  9298  0070                     ?_Led_CheckAutoStatus:	
  9299                           ; 1 bytes @ 0x0
  9300                           
  9301  0070                     ?_RTC_SecondReady:	
  9302                           ; 1 bytes @ 0x0
  9303                           
  9304  0070                     ?_Led_AutoRun:	
  9305                           ; 1 bytes @ 0x0
  9306                           
  9307  0070                     ?_IR_UpdateSetStatus:	
  9308                           ; 1 bytes @ 0x0
  9309                           
  9310  0070                     ?_IR_Decode:	
  9311                           ; 1 bytes @ 0x0
  9312                           
  9313  0070                     ?_RTC_OnSecond:	
  9314                           ; 1 bytes @ 0x0
  9315                           
  9316  0070                     ??_RTC_OnSecond:	
  9317                           ; 1 bytes @ 0x0
  9318                           
  9319  0070                     ?_Led_Run:	
  9320                           ; 1 bytes @ 0x0
  9321                           
  9322  0070                     ?_Led_Notice:	
  9323                           ; 1 bytes @ 0x0
  9324                           
  9325  0070                     ??_Led_Notice:	
  9326                           ; 1 bytes @ 0x0
  9327                           
  9328  0070                     ?_RTC_GetTime:	
  9329                           ; 1 bytes @ 0x0
  9330                           
  9331  0070                     ?_Led_TurnOffRamp:	
  9332                           ; 1 bytes @ 0x0
  9333                           
  9334  0070                     ?_Led_TurnOnRamp:	
  9335                           ; 1 bytes @ 0x0
  9336                           
  9337  0070                     ?_Led_UpdateBright:	
  9338                           ; 1 bytes @ 0x0
  9339                           
  9340  0070                     ?_IR_ScanLongPress:	
  9341                           ; 1 bytes @ 0x0
  9342                           
  9343  0070                     ?_ADC_Initialize_Default:	
  9344                           ; 1 bytes @ 0x0
  9345                           
  9346  0070                     ?_EUSART_Initialize_Default:	
  9347                           ; 1 bytes @ 0x0
  9348                           
  9349  0070                     ?_EUSART_Write:	
  9350                           ; 1 bytes @ 0x0
  9351                           
  9352  0070                     ?_EUSART_Transmit_ISR:	
  9353                           ; 1 bytes @ 0x0
  9354                           
  9355  0070                     ??_EUSART_Transmit_ISR:	
  9356                           ; 1 bytes @ 0x0
  9357                           
  9358  0070                     ?_PWM1_Initialize:	
  9359                           ; 1 bytes @ 0x0
  9360                           
  9361  0070                     ?_PWM2_Initialize:	
  9362                           ; 1 bytes @ 0x0
  9363                           
  9364  0070                     ?_PWM3_Initialize:	
  9365                           ; 1 bytes @ 0x0
  9366                           
  9367  0070                     ?_PWM4_Initialize:	
  9368                           ; 1 bytes @ 0x0
  9369                           
  9370  0070                     ?_PWM5_Initialize:	
  9371                           ; 1 bytes @ 0x0
  9372                           
  9373  0070                     ?_TMR0_Initialize_Default:	
  9374                           ; 1 bytes @ 0x0
  9375                           
  9376  0070                     ?_TMR0_StartTimer:	
  9377                           ; 1 bytes @ 0x0
  9378                           
  9379  0070                     ?_TMR0_ISR:	
  9380                           ; 1 bytes @ 0x0
  9381                           
  9382  0070                     ??_TMR0_ISR:	
  9383                           ; 1 bytes @ 0x0
  9384                           
  9385  0070                     ?_TMR1_Initialize_Default:	
  9386                           ; 1 bytes @ 0x0
  9387                           
  9388  0070                     ?_TMR1_StartTimer:	
  9389                           ; 1 bytes @ 0x0
  9390                           
  9391  0070                     ?_TMR1_StopTimer:	
  9392                           ; 1 bytes @ 0x0
  9393                           
  9394  0070                     ?_TMR1_GATE_ISR:	
  9395                           ; 1 bytes @ 0x0
  9396                           
  9397  0070                     ?_TMR2_Initialize_Default:	
  9398                           ; 1 bytes @ 0x0
  9399                           
  9400  0070                     ?_TMR2_StartTimer:	
  9401                           ; 1 bytes @ 0x0
  9402                           
  9403  0070                     ?_TMR2_ISR:	
  9404                           ; 1 bytes @ 0x0
  9405                           
  9406  0070                     ?_TMR2_DisableInterrupt:	
  9407                           ; 1 bytes @ 0x0
  9408                           
  9409  0070                     ?_TMR2_EnableInterrupt:	
  9410                           ; 1 bytes @ 0x0
  9411                           
  9412  0070                     ?_TMR4_Initialize_Default:	
  9413                           ; 1 bytes @ 0x0
  9414                           
  9415  0070                     ?_TMR4_StartTimer:	
  9416                           ; 1 bytes @ 0x0
  9417                           
  9418  0070                     ?_TMR4_StopTimer:	
  9419                           ; 1 bytes @ 0x0
  9420                           
  9421  0070                     ??_TMR4_StopTimer:	
  9422                           ; 1 bytes @ 0x0
  9423                           
  9424  0070                     ?_TMR4_ISR:	
  9425                           ; 1 bytes @ 0x0
  9426                           
  9427  0070                     ?_Audio_PlaySound:	
  9428                           ; 1 bytes @ 0x0
  9429                           
  9430  0070                     ?_Audio_StopSound:	
  9431                           ; 1 bytes @ 0x0
  9432                           
  9433  0070                     ?_Audio_SelectSound:	
  9434                           ; 1 bytes @ 0x0
  9435                           
  9436  0070                     ?_Audio_SetPlayMode:	
  9437                           ; 1 bytes @ 0x0
  9438                           
  9439  0070                     ?_Audio_SetVolume:	
  9440                           ; 1 bytes @ 0x0
  9441                           
  9442  0070                     ?_Audio_GetValue:	
  9443                           ; 1 bytes @ 0x0
  9444                           
  9445  0070                     ?_main:	
  9446                           ; 1 bytes @ 0x0
  9447                           
  9448  0070                     ?_ISR:	
  9449                           ; 1 bytes @ 0x0
  9450                           
  9451  0070                     ?_OSCILLATOR_Initialize:	
  9452                           ; 1 bytes @ 0x0
  9453                           
  9454  0070                     ?_PIN_Initialize:	
  9455                           ; 1 bytes @ 0x0
  9456                           
  9457  0070                     ?_Led_FirstPowerUp:	
  9458                           ; 1 bytes @ 0x0
  9459                           
  9460  0070                     ?_Led_TurnOnDirect:	
  9461                           ; 1 bytes @ 0x0
  9462                           
  9463  0070                     ??_Led_TurnOnDirect:	
  9464                           ; 1 bytes @ 0x0
  9465                           
  9466  0070                     ?_Led_TurnOffDirect:	
  9467                           ; 1 bytes @ 0x0
  9468                           
  9469  0070                     ??_Led_TurnOffDirect:	
  9470                           ; 1 bytes @ 0x0
  9471                           
  9472  0070                     ?_Led_Ramp:	
  9473                           ; 1 bytes @ 0x0
  9474                           
  9475  0070                     ?_Led_StartNotice:	
  9476                           ; 1 bytes @ 0x0
  9477                           
  9478  0070                     ?_Led_RunMusic:	
  9479                           ; 1 bytes @ 0x0
  9480                           
  9481  0070                     ?_IR_GetIndex:	
  9482                           ; 1 bytes @ 0x0
  9483                           
  9484  0070                     ?_IR_GetKeyType:	
  9485                           ; 1 bytes @ 0x0
  9486                           
  9487  0070                     ??_IR_GetKeyType:	
  9488                           ; 1 bytes @ 0x0
  9489                           
  9490  0070                     ?_IR_ExitSet:	
  9491                           ; 1 bytes @ 0x0
  9492                           
  9493  0070                     ?_IR_ExitTimeout:	
  9494                           ; 1 bytes @ 0x0
  9495                           
  9496  0070                     ?_IR_KeyAction:	
  9497                           ; 1 bytes @ 0x0
  9498                           
  9499  0070                     ?i1_EUSART_Write:	
  9500                           ; 1 bytes @ 0x0
  9501                           
  9502  0070                     ??i1_EUSART_Write:	
  9503                           ; 1 bytes @ 0x0
  9504                           
  9505  0070                     ?i1_PWM1_LoadDutyValue:	
  9506                           ; 1 bytes @ 0x0
  9507                           
  9508  0070                     ?i1_PWM2_LoadDutyValue:	
  9509                           ; 1 bytes @ 0x0
  9510                           
  9511  0070                     ?i1_PWM3_LoadDutyValue:	
  9512                           ; 1 bytes @ 0x0
  9513                           
  9514  0070                     ?i1_PWM4_LoadDutyValue:	
  9515                           ; 1 bytes @ 0x0
  9516                           
  9517  0070                     ?i1_PWM5_LoadDutyValue:	
  9518                           ; 1 bytes @ 0x0
  9519                           
  9520  0070                     ?i1_TMR2_DisableInterrupt:	
  9521                           ; 1 bytes @ 0x0
  9522                           
  9523  0070                     ??i1_TMR2_DisableInterrupt:	
  9524                           ; 1 bytes @ 0x0
  9525                           
  9526  0070                     ?i1_TMR2_EnableInterrupt:	
  9527                           ; 1 bytes @ 0x0
  9528                           
  9529  0070                     ??i1_TMR2_EnableInterrupt:	
  9530                           ; 1 bytes @ 0x0
  9531                           
  9532  0070                     ?i1_TMR4_StartTimer:	
  9533                           ; 1 bytes @ 0x0
  9534                           
  9535  0070                     ??i1_TMR4_StartTimer:	
  9536                           ; 1 bytes @ 0x0
  9537                           
  9538  0070                     ?i1_Led_UpdateBright:	
  9539                           ; 1 bytes @ 0x0
  9540                           
  9541  0070                     ?i1_Led_StartNotice:	
  9542                           ; 1 bytes @ 0x0
  9543                           
  9544  0070                     ??i1_Led_StartNotice:	
  9545                           ; 1 bytes @ 0x0
  9546                           
  9547  0070                     ?i1_IR_GetIndex:	
  9548                           ; 1 bytes @ 0x0
  9549                           
  9550  0070                     ??i1_IR_GetIndex:	
  9551                           ; 1 bytes @ 0x0
  9552                           
  9553  0070                     ?i1_Util_IncValue:	
  9554                           ; 1 bytes @ 0x0
  9555                           
  9556  0070                     ?i1_Util_DecValue:	
  9557                           ; 1 bytes @ 0x0
  9558                           
  9559  0070                     ?i1___wmul:	
  9560                           ; 1 bytes @ 0x0
  9561                           
  9562  0070                     i1EUSART_Write@byte:	
  9563                           ; 2 bytes @ 0x0
  9564                           
  9565  0070                     i1IR_GetIndex@idx:	
  9566                           ; 1 bytes @ 0x0
  9567                           
  9568  0070                     i1PWM1_LoadDutyValue@dutyValue:	
  9569                           ; 1 bytes @ 0x0
  9570                           
  9571  0070                     i1PWM2_LoadDutyValue@dutyValue:	
  9572                           ; 2 bytes @ 0x0
  9573                           
  9574  0070                     i1PWM3_LoadDutyValue@dutyValue:	
  9575                           ; 2 bytes @ 0x0
  9576                           
  9577  0070                     i1PWM4_LoadDutyValue@dutyValue:	
  9578                           ; 2 bytes @ 0x0
  9579                           
  9580  0070                     i1PWM5_LoadDutyValue@dutyValue:	
  9581                           ; 2 bytes @ 0x0
  9582                           
  9583  0070                     i1Util_IncValue@pSrc:	
  9584                           ; 2 bytes @ 0x0
  9585                           
  9586  0070                     i1Util_DecValue@pSrc:	
  9587                           ; 2 bytes @ 0x0
  9588                           
  9589  0070                     i1___wmul@multiplier:	
  9590                           ; 2 bytes @ 0x0
  9591                           
  9592                           
  9593                           ; 2 bytes @ 0x0
  9594  0070                     	ds	1
  9595  0071                     ??_TMR4_ISR:	
  9596  0071                     ??_Audio_PlaySound:	
  9597                           ; 1 bytes @ 0x1
  9598                           
  9599  0071                     ??_Audio_SelectSound:	
  9600                           ; 1 bytes @ 0x1
  9601                           
  9602  0071                     Audio_PlaySound@checksum:	
  9603                           ; 1 bytes @ 0x1
  9604                           
  9605  0071                     Audio_SelectSound@index:	
  9606                           ; 1 bytes @ 0x1
  9607                           
  9608  0071                     IR_GetKeyType@result:	
  9609                           ; 1 bytes @ 0x1
  9610                           
  9611  0071                     i1Led_StartNotice@cnt:	
  9612                           ; 1 bytes @ 0x1
  9613                           
  9614  0071                     i1IR_GetIndex@keynum:	
  9615                           ; 1 bytes @ 0x1
  9616                           
  9617                           
  9618                           ; 1 bytes @ 0x1
  9619  0071                     	ds	1
  9620  0072                     ??i1_PWM1_LoadDutyValue:	
  9621  0072                     ??i1_PWM2_LoadDutyValue:	
  9622                           ; 1 bytes @ 0x2
  9623                           
  9624  0072                     ??i1_PWM3_LoadDutyValue:	
  9625                           ; 1 bytes @ 0x2
  9626                           
  9627  0072                     ??i1_PWM4_LoadDutyValue:	
  9628                           ; 1 bytes @ 0x2
  9629                           
  9630  0072                     ??i1_PWM5_LoadDutyValue:	
  9631                           ; 1 bytes @ 0x2
  9632                           
  9633  0072                     Audio_SelectSound@checksum:	
  9634                           ; 1 bytes @ 0x2
  9635                           
  9636  0072                     IR_GetKeyType@keynum:	
  9637                           ; 1 bytes @ 0x2
  9638                           
  9639  0072                     i1Util_IncValue@max:	
  9640                           ; 1 bytes @ 0x2
  9641                           
  9642  0072                     i1Util_DecValue@min:	
  9643                           ; 2 bytes @ 0x2
  9644                           
  9645  0072                     i1___wmul@multiplicand:	
  9646                           ; 2 bytes @ 0x2
  9647                           
  9648                           
  9649                           ; 2 bytes @ 0x2
  9650  0072                     	ds	1
  9651  0073                     ??_IR_Decode:	
  9652                           
  9653                           ; 1 bytes @ 0x3
  9654  0073                     	ds	1
  9655  0074                     ??_Led_Ramp:	
  9656  0074                     ??i1_Led_UpdateBright:	
  9657                           ; 1 bytes @ 0x4
  9658                           
  9659  0074                     ??i1___wmul:	
  9660                           ; 1 bytes @ 0x4
  9661                           
  9662  0074                     i1Led_UpdateBright@i:	
  9663                           ; 1 bytes @ 0x4
  9664                           
  9665  0074                     i1Util_IncValue@delta:	
  9666                           ; 1 bytes @ 0x4
  9667                           
  9668  0074                     i1Util_DecValue@delta:	
  9669                           ; 2 bytes @ 0x4
  9670                           
  9671  0074                     i1___wmul@product:	
  9672                           ; 2 bytes @ 0x4
  9673                           
  9674                           
  9675                           ; 2 bytes @ 0x4
  9676  0074                     	ds	2
  9677  0076                     ?_Led_SetCustom:	
  9678  0076                     ?_Led_DynamicWave:	
  9679                           ; 1 bytes @ 0x6
  9680                           
  9681  0076                     ?_Led_DynamicMoon:	
  9682                           ; 1 bytes @ 0x6
  9683                           
  9684  0076                     ?_Led_DynamicCloud:	
  9685                           ; 1 bytes @ 0x6
  9686                           
  9687  0076                     ?_Led_DynamicStorm:	
  9688                           ; 1 bytes @ 0x6
  9689                           
  9690  0076                     ??i1_Util_IncValue:	
  9691                           ; 1 bytes @ 0x6
  9692                           
  9693  0076                     ??i1_Util_DecValue:	
  9694                           ; 1 bytes @ 0x6
  9695                           
  9696  0076                     Led_SetCustom@pValue:	
  9697                           ; 1 bytes @ 0x6
  9698                           
  9699  0076                     Led_DynamicWave@ptp:	
  9700                           ; 1 bytes @ 0x6
  9701                           
  9702  0076                     Led_DynamicMoon@ptp:	
  9703                           ; 2 bytes @ 0x6
  9704                           
  9705  0076                     Led_DynamicCloud@ptp:	
  9706                           ; 2 bytes @ 0x6
  9707                           
  9708  0076                     Led_DynamicStorm@ptp:	
  9709                           ; 2 bytes @ 0x6
  9710                           
  9711                           
  9712                           ; 2 bytes @ 0x6
  9713  0076                     	ds	1
  9714  0077                     ??_Led_SetCustom:	
  9715  0077                     IR_Decode@revKeyNum:	
  9716                           ; 1 bytes @ 0x7
  9717                           
  9718                           
  9719                           ; 1 bytes @ 0x7
  9720  0077                     	ds	1
  9721  0078                     ??_Led_DynamicWave:	
  9722  0078                     ??_Led_DynamicMoon:	
  9723                           ; 1 bytes @ 0x8
  9724                           
  9725  0078                     ??_Led_DynamicCloud:	
  9726                           ; 1 bytes @ 0x8
  9727                           
  9728  0078                     ??_Led_DynamicStorm:	
  9729                           ; 1 bytes @ 0x8
  9730                           
  9731  0078                     IR_Decode@type:	
  9732                           ; 1 bytes @ 0x8
  9733                           
  9734                           
  9735                           ; 1 bytes @ 0x8
  9736  0078                     	ds	1
  9737  0079                     IR_Decode@keyNum:	
  9738                           
  9739                           ; 1 bytes @ 0x9
  9740  0079                     	ds	1
  9741  007A                     Led_Ramp@i:	
  9742  007A                     IR_Decode@hVal:	
  9743                           ; 1 bytes @ 0xA
  9744                           
  9745                           
  9746                           ; 2 bytes @ 0xA
  9747  007A                     	ds	2
  9748  007C                     ??_TMR1_GATE_ISR:	
  9749  007C                     ??_Led_RunMusic:	
  9750                           ; 1 bytes @ 0xC
  9751                           
  9752                           
  9753                           ; 1 bytes @ 0xC
  9754  007C                     	ds	1
  9755  007D                     ??_Led_Run:	
  9756                           
  9757                           ; 1 bytes @ 0xD
  9758  007D                     	ds	1
  9759  007E                     ??_TMR2_ISR:	
  9760  007E                     ??_ISR:	
  9761                           ; 1 bytes @ 0xE
  9762                           
  9763                           
  9764                           	psect	cstackBANK0
  9765  0020                     __pcstackBANK0:	
  9766                           ; 1 bytes @ 0xE
  9767                           
  9768  0020                     Led_SetCustom@value:	
  9769  0020                     Led_DynamicWave@duty:	
  9770                           ; 2 bytes @ 0x0
  9771                           
  9772  0020                     Led_DynamicMoon@duty:	
  9773                           ; 10 bytes @ 0x0
  9774                           
  9775  0020                     Led_DynamicCloud@duty:	
  9776                           ; 10 bytes @ 0x0
  9777                           
  9778  0020                     Led_DynamicStorm@duty:	
  9779                           ; 10 bytes @ 0x0
  9780                           
  9781                           
  9782                           ; 10 bytes @ 0x0
  9783  0020                     	ds	2
  9784  0022                     Led_SetCustom@idx:	
  9785                           
  9786                           ; 1 bytes @ 0x2
  9787  0022                     	ds	1
  9788  0023                     Led_SetCustom@i:	
  9789                           
  9790                           ; 1 bytes @ 0x3
  9791  0023                     	ds	1
  9792  0024                     ??_IR_ScanLongPress:	
  9793                           
  9794                           ; 1 bytes @ 0x4
  9795  0024                     	ds	4
  9796  0028                     IR_ScanLongPress@i:	
  9797                           
  9798                           ; 1 bytes @ 0x8
  9799  0028                     	ds	1
  9800  0029                     IR_ScanLongPress@i_1438:	
  9801                           
  9802                           ; 1 bytes @ 0x9
  9803  0029                     	ds	1
  9804  002A                     IR_ScanLongPress@idx:	
  9805  002A                     Led_DynamicWave@val:	
  9806                           ; 1 bytes @ 0xA
  9807                           
  9808  002A                     Led_DynamicMoon@val:	
  9809                           ; 2 bytes @ 0xA
  9810                           
  9811  002A                     Led_DynamicCloud@val:	
  9812                           ; 2 bytes @ 0xA
  9813                           
  9814  002A                     Led_DynamicStorm@val:	
  9815                           ; 2 bytes @ 0xA
  9816                           
  9817                           
  9818                           ; 2 bytes @ 0xA
  9819  002A                     	ds	2
  9820  002C                     Led_DynamicWave@i:	
  9821  002C                     Led_DynamicMoon@i:	
  9822                           ; 1 bytes @ 0xC
  9823                           
  9824  002C                     Led_DynamicCloud@i:	
  9825                           ; 1 bytes @ 0xC
  9826                           
  9827  002C                     Led_DynamicStorm@i:	
  9828                           ; 1 bytes @ 0xC
  9829                           
  9830                           
  9831                           ; 1 bytes @ 0xC
  9832  002C                     	ds	1
  9833  002D                     ??_IR_ResetIfTMR1Overflow:	
  9834  002D                     ??_RTC_HourReady:	
  9835                           ; 1 bytes @ 0xD
  9836                           
  9837  002D                     ??_RTC_MinuteReady:	
  9838                           ; 1 bytes @ 0xD
  9839                           
  9840  002D                     ??_RTC_SecondReady:	
  9841                           ; 1 bytes @ 0xD
  9842                           
  9843  002D                     ??_RTC_GetTime:	
  9844                           ; 1 bytes @ 0xD
  9845                           
  9846  002D                     ??_Led_TurnOffRamp:	
  9847                           ; 1 bytes @ 0xD
  9848                           
  9849  002D                     ??_Led_TurnOnRamp:	
  9850                           ; 1 bytes @ 0xD
  9851                           
  9852  002D                     ?_Util_IncValue:	
  9853                           ; 1 bytes @ 0xD
  9854                           
  9855  002D                     ?_Util_DecValue:	
  9856                           ; 1 bytes @ 0xD
  9857                           
  9858  002D                     ??_ADC_Initialize_Default:	
  9859                           ; 1 bytes @ 0xD
  9860                           
  9861  002D                     ?_DATAEE_WriteByte:	
  9862                           ; 1 bytes @ 0xD
  9863                           
  9864  002D                     ?_DATAEE_ReadByte:	
  9865                           ; 1 bytes @ 0xD
  9866                           
  9867  002D                     ??_EUSART_Initialize_Default:	
  9868                           ; 1 bytes @ 0xD
  9869                           
  9870  002D                     ??_EUSART_Write:	
  9871                           ; 1 bytes @ 0xD
  9872                           
  9873  002D                     ??_PWM1_Initialize:	
  9874                           ; 1 bytes @ 0xD
  9875                           
  9876  002D                     ?_PWM1_LoadDutyValue:	
  9877                           ; 1 bytes @ 0xD
  9878                           
  9879  002D                     ??_PWM2_Initialize:	
  9880                           ; 1 bytes @ 0xD
  9881                           
  9882  002D                     ?_PWM2_LoadDutyValue:	
  9883                           ; 1 bytes @ 0xD
  9884                           
  9885  002D                     ??_PWM3_Initialize:	
  9886                           ; 1 bytes @ 0xD
  9887                           
  9888  002D                     ?_PWM3_LoadDutyValue:	
  9889                           ; 1 bytes @ 0xD
  9890                           
  9891  002D                     ??_PWM4_Initialize:	
  9892                           ; 1 bytes @ 0xD
  9893                           
  9894  002D                     ?_PWM4_LoadDutyValue:	
  9895                           ; 1 bytes @ 0xD
  9896                           
  9897  002D                     ??_PWM5_Initialize:	
  9898                           ; 1 bytes @ 0xD
  9899                           
  9900  002D                     ?_PWM5_LoadDutyValue:	
  9901                           ; 1 bytes @ 0xD
  9902                           
  9903  002D                     ??_TMR0_Initialize_Default:	
  9904                           ; 1 bytes @ 0xD
  9905                           
  9906  002D                     ??_TMR0_StartTimer:	
  9907                           ; 1 bytes @ 0xD
  9908                           
  9909  002D                     ?_TMR0_SetInterruptHandler:	
  9910                           ; 1 bytes @ 0xD
  9911                           
  9912  002D                     ??_TMR1_Initialize_Default:	
  9913                           ; 1 bytes @ 0xD
  9914                           
  9915  002D                     ??_TMR1_StartTimer:	
  9916                           ; 1 bytes @ 0xD
  9917                           
  9918  002D                     ??_TMR1_StopTimer:	
  9919                           ; 1 bytes @ 0xD
  9920                           
  9921  002D                     ?_TMR1_Gate_SetInterruptHandler:	
  9922                           ; 1 bytes @ 0xD
  9923                           
  9924  002D                     ??_TMR2_Initialize_Default:	
  9925                           ; 1 bytes @ 0xD
  9926                           
  9927  002D                     ??_TMR2_StartTimer:	
  9928                           ; 1 bytes @ 0xD
  9929                           
  9930  002D                     ?_TMR2_SetInterruptHandler:	
  9931                           ; 1 bytes @ 0xD
  9932                           
  9933  002D                     ??_TMR2_DisableInterrupt:	
  9934                           ; 1 bytes @ 0xD
  9935                           
  9936  002D                     ??_TMR2_EnableInterrupt:	
  9937                           ; 1 bytes @ 0xD
  9938                           
  9939  002D                     ??_TMR4_Initialize_Default:	
  9940                           ; 1 bytes @ 0xD
  9941                           
  9942  002D                     ??_TMR4_StartTimer:	
  9943                           ; 1 bytes @ 0xD
  9944                           
  9945  002D                     ?_TMR4_SetInterruptHandler:	
  9946                           ; 1 bytes @ 0xD
  9947                           
  9948  002D                     ??_OSCILLATOR_Initialize:	
  9949                           ; 1 bytes @ 0xD
  9950                           
  9951  002D                     ??_PIN_Initialize:	
  9952                           ; 1 bytes @ 0xD
  9953                           
  9954  002D                     ??_Led_FirstPowerUp:	
  9955                           ; 1 bytes @ 0xD
  9956                           
  9957  002D                     ??_Led_StartNotice:	
  9958                           ; 1 bytes @ 0xD
  9959                           
  9960  002D                     ??_IR_GetIndex:	
  9961                           ; 1 bytes @ 0xD
  9962                           
  9963  002D                     ?___bmul:	
  9964                           ; 1 bytes @ 0xD
  9965                           
  9966  002D                     ?_ADC_Conversion:	
  9967                           ; 1 bytes @ 0xD
  9968                           
  9969  002D                     ?___wmul:	
  9970                           ; 2 bytes @ 0xD
  9971                           
  9972  002D                     EUSART_Write@byte:	
  9973                           ; 2 bytes @ 0xD
  9974                           
  9975  002D                     PIN_Initialize@state:	
  9976                           ; 1 bytes @ 0xD
  9977                           
  9978  002D                     Led_TurnOffRamp@i:	
  9979                           ; 1 bytes @ 0xD
  9980                           
  9981  002D                     IR_GetIndex@idx:	
  9982                           ; 1 bytes @ 0xD
  9983                           
  9984  002D                     ___bmul@multiplicand:	
  9985                           ; 1 bytes @ 0xD
  9986                           
  9987  002D                     DATAEE_WriteByte@addr:	
  9988                           ; 1 bytes @ 0xD
  9989                           
  9990  002D                     DATAEE_ReadByte@addr:	
  9991                           ; 2 bytes @ 0xD
  9992                           
  9993  002D                     PWM1_LoadDutyValue@dutyValue:	
  9994                           ; 2 bytes @ 0xD
  9995                           
  9996  002D                     PWM2_LoadDutyValue@dutyValue:	
  9997                           ; 2 bytes @ 0xD
  9998                           
  9999  002D                     PWM3_LoadDutyValue@dutyValue:	
 10000                           ; 2 bytes @ 0xD
 10001                           
 10002  002D                     PWM4_LoadDutyValue@dutyValue:	
 10003                           ; 2 bytes @ 0xD
 10004                           
 10005  002D                     PWM5_LoadDutyValue@dutyValue:	
 10006                           ; 2 bytes @ 0xD
 10007                           
 10008  002D                     TMR0_SetInterruptHandler@handler:	
 10009                           ; 2 bytes @ 0xD
 10010                           
 10011  002D                     TMR1_Gate_SetInterruptHandler@handler:	
 10012                           ; 2 bytes @ 0xD
 10013                           
 10014  002D                     TMR2_SetInterruptHandler@handler:	
 10015                           ; 2 bytes @ 0xD
 10016                           
 10017  002D                     TMR4_SetInterruptHandler@handler:	
 10018                           ; 2 bytes @ 0xD
 10019                           
 10020  002D                     Util_IncValue@pSrc:	
 10021                           ; 2 bytes @ 0xD
 10022                           
 10023  002D                     Util_DecValue@pSrc:	
 10024                           ; 2 bytes @ 0xD
 10025                           
 10026  002D                     ___wmul@multiplier:	
 10027                           ; 2 bytes @ 0xD
 10028                           
 10029                           
 10030                           ; 2 bytes @ 0xD
 10031  002D                     	ds	1
 10032  002E                     ??_SYSTEM_Initialize:	
 10033  002E                     ??_Audio_StopSound:	
 10034                           ; 1 bytes @ 0xE
 10035                           
 10036  002E                     ??_Audio_SetPlayMode:	
 10037                           ; 1 bytes @ 0xE
 10038                           
 10039  002E                     ??_Audio_SetVolume:	
 10040                           ; 1 bytes @ 0xE
 10041                           
 10042  002E                     ??___bmul:	
 10043                           ; 1 bytes @ 0xE
 10044                           
 10045  002E                     Audio_StopSound@checksum:	
 10046                           ; 1 bytes @ 0xE
 10047                           
 10048  002E                     Audio_SetPlayMode@type:	
 10049                           ; 1 bytes @ 0xE
 10050                           
 10051  002E                     Audio_SetVolume@vol:	
 10052                           ; 1 bytes @ 0xE
 10053                           
 10054  002E                     Led_StartNotice@cnt:	
 10055                           ; 1 bytes @ 0xE
 10056                           
 10057  002E                     IR_GetIndex@keynum:	
 10058                           ; 1 bytes @ 0xE
 10059                           
 10060  002E                     ___bmul@product:	
 10061                           ; 1 bytes @ 0xE
 10062                           
 10063                           
 10064                           ; 1 bytes @ 0xE
 10065  002E                     	ds	1
 10066  002F                     ??_Interrupt_Initialize:	
 10067  002F                     ??_ADC_Conversion:	
 10068                           ; 1 bytes @ 0xF
 10069                           
 10070  002F                     ??_DATAEE_ReadByte:	
 10071                           ; 1 bytes @ 0xF
 10072                           
 10073  002F                     ?_DATAEE_ReadBuffer:	
 10074                           ; 1 bytes @ 0xF
 10075                           
 10076  002F                     ??_PWM1_LoadDutyValue:	
 10077                           ; 1 bytes @ 0xF
 10078                           
 10079  002F                     ??_PWM2_LoadDutyValue:	
 10080                           ; 1 bytes @ 0xF
 10081                           
 10082  002F                     ??_PWM3_LoadDutyValue:	
 10083                           ; 1 bytes @ 0xF
 10084                           
 10085  002F                     ??_PWM4_LoadDutyValue:	
 10086                           ; 1 bytes @ 0xF
 10087                           
 10088  002F                     ??_PWM5_LoadDutyValue:	
 10089                           ; 1 bytes @ 0xF
 10090                           
 10091  002F                     ??_TMR0_SetInterruptHandler:	
 10092                           ; 1 bytes @ 0xF
 10093                           
 10094  002F                     ??_TMR1_Gate_SetInterruptHandler:	
 10095                           ; 1 bytes @ 0xF
 10096                           
 10097  002F                     ??_TMR2_SetInterruptHandler:	
 10098                           ; 1 bytes @ 0xF
 10099                           
 10100  002F                     ??_TMR4_SetInterruptHandler:	
 10101                           ; 1 bytes @ 0xF
 10102                           
 10103  002F                     DATAEE_WriteByte@byte:	
 10104                           ; 1 bytes @ 0xF
 10105                           
 10106  002F                     Audio_SetPlayMode@checksum:	
 10107                           ; 1 bytes @ 0xF
 10108                           
 10109  002F                     Audio_SetVolume@checksum:	
 10110                           ; 1 bytes @ 0xF
 10111                           
 10112  002F                     ___bmul@multiplier:	
 10113                           ; 1 bytes @ 0xF
 10114                           
 10115  002F                     DATAEE_ReadBuffer@addr:	
 10116                           ; 1 bytes @ 0xF
 10117                           
 10118  002F                     Util_IncValue@max:	
 10119                           ; 2 bytes @ 0xF
 10120                           
 10121  002F                     Util_DecValue@min:	
 10122                           ; 2 bytes @ 0xF
 10123                           
 10124  002F                     ___wmul@multiplicand:	
 10125                           ; 2 bytes @ 0xF
 10126                           
 10127                           
 10128                           ; 2 bytes @ 0xF
 10129  002F                     	ds	1
 10130  0030                     ??_DATAEE_WriteByte:	
 10131  0030                     ?_IR_IsValidTime:	
 10132                           ; 1 bytes @ 0x10
 10133                           
 10134  0030                     ADC_Conversion@chn:	
 10135                           ; 1 bytes @ 0x10
 10136                           
 10137  0030                     DATAEE_WriteByte@GIEBitValue:	
 10138                           ; 1 bytes @ 0x10
 10139                           
 10140  0030                     IR_IsValidTime@len:	
 10141                           ; 1 bytes @ 0x10
 10142                           
 10143                           
 10144                           ; 1 bytes @ 0x10
 10145  0030                     	ds	1
 10146  0031                     ??_Led_UpdateBright:	
 10147  0031                     ?_DATAEE_WriteBuffer:	
 10148                           ; 1 bytes @ 0x11
 10149                           
 10150  0031                     ??_IR_IsValidTime:	
 10151                           ; 1 bytes @ 0x11
 10152                           
 10153  0031                     ??___wmul:	
 10154                           ; 1 bytes @ 0x11
 10155                           
 10156  0031                     Led_UpdateBright@i:	
 10157                           ; 1 bytes @ 0x11
 10158                           
 10159  0031                     Led_TurnOnRamp@i:	
 10160                           ; 1 bytes @ 0x11
 10161                           
 10162  0031                     IR_IsValidTime@min:	
 10163                           ; 1 bytes @ 0x11
 10164                           
 10165  0031                     DATAEE_WriteBuffer@addr:	
 10166                           ; 1 bytes @ 0x11
 10167                           
 10168  0031                     DATAEE_ReadBuffer@buf:	
 10169                           ; 2 bytes @ 0x11
 10170                           
 10171  0031                     Util_IncValue@delta:	
 10172                           ; 2 bytes @ 0x11
 10173                           
 10174  0031                     Util_DecValue@delta:	
 10175                           ; 2 bytes @ 0x11
 10176                           
 10177  0031                     ___wmul@product:	
 10178                           ; 2 bytes @ 0x11
 10179                           
 10180                           
 10181                           ; 2 bytes @ 0x11
 10182  0031                     	ds	1
 10183  0032                     IR_IsValidTime@result:	
 10184                           
 10185                           ; 1 bytes @ 0x12
 10186  0032                     	ds	1
 10187  0033                     ??_Led_Initialize:	
 10188  0033                     ??_Led_CheckAutoStatus:	
 10189                           ; 1 bytes @ 0x13
 10190                           
 10191  0033                     ??_Util_IncValue:	
 10192                           ; 1 bytes @ 0x13
 10193                           
 10194  0033                     ??_Util_DecValue:	
 10195                           ; 1 bytes @ 0x13
 10196                           
 10197  0033                     ??_Audio_GetValue:	
 10198                           ; 1 bytes @ 0x13
 10199                           
 10200  0033                     DATAEE_ReadBuffer@len:	
 10201                           ; 1 bytes @ 0x13
 10202                           
 10203  0033                     Led_FirstPowerUp@i:	
 10204                           ; 1 bytes @ 0x13
 10205                           
 10206  0033                     IR_IsValidTime@hour:	
 10207                           ; 1 bytes @ 0x13
 10208                           
 10209  0033                     DATAEE_WriteBuffer@buf:	
 10210                           ; 1 bytes @ 0x13
 10211                           
 10212                           
 10213                           ; 2 bytes @ 0x13
 10214  0033                     	ds	1
 10215  0034                     ??_DATAEE_ReadBuffer:	
 10216  0034                     IR_IsValidTime@tm:	
 10217                           ; 1 bytes @ 0x14
 10218                           
 10219                           
 10220                           ; 1 bytes @ 0x14
 10221  0034                     	ds	1
 10222  0035                     DATAEE_WriteBuffer@len:	
 10223  0035                     DATAEE_ReadBuffer@i:	
 10224                           ; 1 bytes @ 0x15
 10225                           
 10226                           
 10227                           ; 1 bytes @ 0x15
 10228  0035                     	ds	1
 10229  0036                     ??_Led_InitPara:	
 10230  0036                     ??_DATAEE_WriteBuffer:	
 10231                           ; 1 bytes @ 0x16
 10232                           
 10233  0036                     DATAEE_WriteBuffer@i:	
 10234                           ; 1 bytes @ 0x16
 10235                           
 10236                           
 10237                           ; 1 bytes @ 0x16
 10238  0036                     	ds	1
 10239  0037                     ??_Led_SaveParaIfChanged:	
 10240  0037                     ??_Led_AutoRun:	
 10241                           ; 1 bytes @ 0x17
 10242                           
 10243  0037                     Audio_GetValue@value:	
 10244                           ; 1 bytes @ 0x17
 10245                           
 10246  0037                     _Led_Initialize$1218:	
 10247                           ; 2 bytes @ 0x17
 10248                           
 10249  0037                     Led_CheckAutoStatus@sunrise:	
 10250                           ; 2 bytes @ 0x17
 10251                           
 10252                           
 10253                           ; 2 bytes @ 0x17
 10254  0037                     	ds	2
 10255  0039                     Led_Initialize@result:	
 10256  0039                     Led_CheckAutoStatus@sunset:	
 10257                           ; 1 bytes @ 0x19
 10258                           
 10259                           
 10260                           ; 2 bytes @ 0x19
 10261  0039                     	ds	1
 10262  003A                     Led_Initialize@ct:	
 10263                           
 10264                           ; 2 bytes @ 0x1A
 10265  003A                     	ds	1
 10266  003B                     Led_AutoRun@i:	
 10267  003B                     Led_CheckAutoStatus@ct:	
 10268                           ; 1 bytes @ 0x1B
 10269                           
 10270                           
 10271                           ; 2 bytes @ 0x1B
 10272  003B                     	ds	1
 10273  003C                     Led_Initialize@i:	
 10274                           
 10275                           ; 1 bytes @ 0x1C
 10276  003C                     	ds	1
 10277  003D                     ??_IR_KeyAtionIfPressed:	
 10278  003D                     ??_IR_UpdateSetStatus:	
 10279                           ; 1 bytes @ 0x1D
 10280                           
 10281  003D                     ??_IR_ExitSet:	
 10282                           ; 1 bytes @ 0x1D
 10283                           
 10284  003D                     ??_IR_ExitTimeout:	
 10285                           ; 1 bytes @ 0x1D
 10286                           
 10287  003D                     Led_CheckAutoStatus@i_1248:	
 10288                           ; 1 bytes @ 0x1D
 10289                           
 10290                           
 10291                           ; 1 bytes @ 0x1D
 10292  003D                     	ds	1
 10293  003E                     Led_InitPara@j:	
 10294  003E                     Led_CheckAutoStatus@i_1249:	
 10295                           ; 1 bytes @ 0x1E
 10296                           
 10297                           
 10298                           ; 1 bytes @ 0x1E
 10299  003E                     	ds	1
 10300  003F                     Led_InitPara@i:	
 10301  003F                     Led_CheckAutoStatus@i:	
 10302                           ; 1 bytes @ 0x1F
 10303                           
 10304                           
 10305                           ; 1 bytes @ 0x1F
 10306  003F                     	ds	1
 10307  0040                     ??_main:	
 10308                           
 10309                           	psect	text35
 10310  11A7                     __ptext35:	
 10311 ;; *************** function _IR_ExitTimeout *****************
 10312 ;; Defined at:
 10313 ;;		line 443 in file "user/src/ir.c"
 10314 ;; Parameters:    Size  Location     Type
 10315 ;;		None
 10316 ;; Auto vars:     Size  Location     Type
 10317 ;;		None
 10318 ;; Return value:  Size  Location     Type
 10319 ;;                  1    wreg      void 
 10320 ;; Registers used:
 10321 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10322 ;; Tracked objects:
 10323 ;;		On entry : 1F/0
 10324 ;;		On exit  : 1E/0
 10325 ;;		Unchanged: 0/0
 10326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10331 ;;Total ram usage:        0 bytes
 10332 ;; Hardware stack levels used:    1
 10333 ;; Hardware stack levels required when called:   10
 10334 ;; This function calls:
 10335 ;;		_Led_Initialize
 10336 ;;		_Led_StartNotice
 10337 ;; This function is called by:
 10338 ;;		_IR_UpdateSetStatus
 10339 ;; This function uses a non-reentrant model
 10340 ;;
 10341                           
 10342                           
 10343                           ;psect for function _IR_ExitTimeout
 10344  11A7                     _IR_ExitTimeout:	
 10345  11A7                     l6580:	
 10346                           ;incstack = 0
 10347                           ; Regs used in _IR_ExitTimeout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10348                           
 10349                           
 10350                           ;ir.c: 444: ir_state.mSet = 0;
 10351  11A7  301F               	movlw	-225
 10352  11A8  05D4               	andwf	_ir_state,f	;volatile
 10353                           
 10354                           ;ir.c: 445: ir_state.tmIdx = 0;
 10355  11A9  01D5               	clrf	_ir_state+1	;volatile
 10356                           
 10357                           ;ir.c: 446: ir_state.mSetDelay = 0;
 10358  11AA  01DA               	clrf	_ir_state+6	;volatile
 10359                           
 10360                           ;ir.c: 447: Led_StartNotice(2);
 10361  11AB  3002               	movlw	2
 10362  11AC  2645               	fcall	_Led_StartNotice
 10363                           
 10364                           ;ir.c: 448: Led_Initialize();
 10365  11AD  3189  293C         	ljmp	l6156
 10366  11AF                     __end_of_IR_ExitTimeout:	
 10367  11AF                     __ptext40:	
 10368 ;; *************** function _IR_KeyAction *****************
 10369 ;; Defined at:
 10370 ;;		line 451 in file "user/src/ir.c"
 10371 ;; Parameters:    Size  Location     Type
 10372 ;;		None
 10373 ;; Auto vars:     Size  Location     Type
 10374 ;;  i               1   18[BANK2 ] unsigned char 
 10375 ;;  i               1   16[BANK2 ] unsigned char 
 10376 ;;  i               1   14[BANK2 ] unsigned char 
 10377 ;;  i               1   13[BANK2 ] unsigned char 
 10378 ;;  i               1   17[BANK2 ] unsigned char 
 10379 ;;  i               1   15[BANK2 ] unsigned char 
 10380 ;;  i               1   12[BANK2 ] unsigned char 
 10381 ;;  i               1   10[BANK2 ] unsigned char 
 10382 ;;  i               1   11[BANK2 ] unsigned char 
 10383 ;;  idx             1   19[BANK2 ] unsigned char 
 10384 ;; Return value:  Size  Location     Type
 10385 ;;                  1    wreg      void 
 10386 ;; Registers used:
 10387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10388 ;; Tracked objects:
 10389 ;;		On entry : 1F/0
 10390 ;;		On exit  : 1F/0
 10391 ;;		Unchanged: 0/0
 10392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;      Locals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;      Temps:          0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;Total ram usage:       20 bytes
 10398 ;; Hardware stack levels used:    1
 10399 ;; Hardware stack levels required when called:   11
 10400 ;; This function calls:
 10401 ;;		_Audio_SetVolume
 10402 ;;		_Audio_StopSound
 10403 ;;		_IR_ExitSet
 10404 ;;		_IR_GetIndex
 10405 ;;		_IR_IsValidTime
 10406 ;;		_Led_Initialize
 10407 ;;		_Led_StartNotice
 10408 ;;		_RTC_GetTime
 10409 ;;		_TMR2_DisableInterrupt
 10410 ;;		_TMR2_EnableInterrupt
 10411 ;;		_Util_DecValue
 10412 ;;		_Util_IncValue
 10413 ;;		___bmul
 10414 ;;		___wmul
 10415 ;; This function is called by:
 10416 ;;		_IR_KeyAtionIfPressed
 10417 ;; This function uses a non-reentrant model
 10418 ;;
 10419                           
 10420                           
 10421                           ;psect for function _IR_KeyAction
 10422  11AF                     _IR_KeyAction:	
 10423  11AF                     l6590:	
 10424                           ;incstack = 0
 10425                           ; Regs used in _IR_KeyAction: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10426                           
 10427                           
 10428                           ;ir.c: 452: uint8_t idx;
 10429                           ;ir.c: 453: ir_state.mKeyRcv = 0;
 10430  11AF  1054               	bcf	_ir_state,0	;volatile
 10431                           
 10432                           ;ir.c: 454: TMR2_DisableInterrupt();
 10433  11B0  26B5  3191         	fcall	_TMR2_DisableInterrupt
 10434                           
 10435                           ;ir.c: 455: switch (keyValue) {
 10436  11B2  2C8C               	goto	l7008
 10437  11B3                     l6594:	
 10438                           
 10439                           ;ir.c: 457: Audio_StopSound();
 10440  11B3  2557  3191         	fcall	_Audio_StopSound
 10441                           
 10442                           ;ir.c: 458: gLedPara.mMsc = 1;
 10443  11B5  27BB               	fcall	PL86	;call to abstracted procedure
 10444  11B6  3808               	iorlw	8
 10445  11B7  0081               	movwf	1
 10446                           
 10447                           ;ir.c: 459: gLedPara.mDyn = 0;
 10448  11B8  3001               	movlw	1
 10449  11B9                     L6:	
 10450  11B9  1381               	bcf	1,7
 10451                           
 10452                           ;ir.c: 460: gLedPara.mAuto = 0;
 10453  11BA  1001               	bcf	1,0
 10454                           
 10455                           ;ir.c: 461: gLedRunPara.music_index = 1;
 10456  11BB  0021               	movlb	1	; select bank1
 10457  11BC  00E2               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
 10458  11BD                     l6604:	
 10459                           
 10460                           ;ir.c: 462: gLedRunPara.mParaChanged = 1;
 10461  11BD  0021               	movlb	1	; select bank1
 10462  11BE  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 10463  11BF                     l6606:	
 10464                           
 10465                           ;ir.c: 463: Led_Initialize();
 10466  11BF  3189  213C  3191   	fcall	_Led_Initialize
 10467                           
 10468                           ;ir.c: 464: break;
 10469  11C2  2D07               	goto	l7010
 10470  11C3                     l6608:	
 10471                           
 10472                           ;ir.c: 466: Audio_StopSound();
 10473  11C3  2557  3191         	fcall	_Audio_StopSound
 10474                           
 10475                           ;ir.c: 467: gLedPara.mMsc = 2;
 10476  11C5  27BB  3191         	fcall	PL86	;call to abstracted procedure
 10477  11C7  3810               	iorlw	16
 10478  11C8  0081               	movwf	1
 10479                           
 10480                           ;ir.c: 468: gLedPara.mDyn = 0;
 10481  11C9  3002               	movlw	2
 10482  11CA  29B9               	goto	L6
 10483  11CB                     l6622:	
 10484                           ;ir.c: 470: gLedRunPara.music_index = 2;
 10485                           
 10486                           ;ir.c: 469: gLedPara.mAuto = 0;
 10487                           
 10488                           
 10489                           ;ir.c: 475: Audio_StopSound();
 10490  11CB  2557  3191         	fcall	_Audio_StopSound
 10491                           
 10492                           ;ir.c: 476: gLedPara.mMsc = 3;
 10493  11CD  27BB  3191         	fcall	PL86	;call to abstracted procedure
 10494  11CF  3818               	iorlw	24
 10495  11D0  0081               	movwf	1
 10496                           
 10497                           ;ir.c: 477: gLedPara.mDyn = 0;
 10498  11D1  3003               	movlw	3
 10499  11D2  29B9               	goto	L6
 10500  11D3                     l6636:	
 10501                           ;ir.c: 479: gLedRunPara.music_index = 3;
 10502                           
 10503                           ;ir.c: 478: gLedPara.mAuto = 0;
 10504                           
 10505                           
 10506                           ;ir.c: 484: Audio_StopSound();
 10507  11D3  2557  3191         	fcall	_Audio_StopSound
 10508                           
 10509                           ;ir.c: 485: gLedPara.mMsc = 4;
 10510  11D5  27BB  3191         	fcall	PL86	;call to abstracted procedure
 10511  11D7  3820               	iorlw	32
 10512  11D8  0081               	movwf	1
 10513                           
 10514                           ;ir.c: 486: gLedPara.mDyn = 0;
 10515  11D9  3004               	movlw	4
 10516  11DA  29B9               	goto	L6
 10517  11DB                     l1155:	
 10518                           ;ir.c: 488: gLedRunPara.music_index = 4;
 10519                           
 10520                           ;ir.c: 487: gLedPara.mAuto = 0;
 10521                           
 10522  11DB                     l6650:	
 10523                           
 10524                           ;ir.c: 493: case 0x15:
 10525                           ;ir.c: 494: case 0x16:
 10526                           ;ir.c: 495: case 0x17:
 10527                           ;ir.c: 496: Audio_StopSound();
 10528  11DB  2557  3191         	fcall	_Audio_StopSound
 10529                           
 10530                           ;ir.c: 497: gLedPara.mMsc = IR_GetIndex(keyValue);
 10531  11DD  084E               	movf	_keyValue,w	;volatile
 10532  11DE  257E  3191         	fcall	_IR_GetIndex
 10533  11E0  0022               	movlb	2	; select bank2
 10534  11E1  00C0               	movwf	??_IR_KeyAction^(0+256)
 10535  11E2  307B               	movlw	123
 10536  11E3  0086               	movwf	6
 10537  11E4  3023               	movlw	35
 10538  11E5  0087               	movwf	7
 10539  11E6  0DC0               	rlf	??_IR_KeyAction^(0+256),f
 10540  11E7  0DC0               	rlf	??_IR_KeyAction^(0+256),f
 10541  11E8  0DC0               	rlf	??_IR_KeyAction^(0+256),f
 10542  11E9  0801               	movf	1,w
 10543  11EA  0640               	xorwf	??_IR_KeyAction^(0+256),w
 10544  11EB  3987               	andlw	-121
 10545  11EC  0640               	xorwf	??_IR_KeyAction^(0+256),w
 10546  11ED  0081               	movwf	1
 10547                           
 10548                           ;ir.c: 498: gLedPara.mDyn = 1;
 10549  11EE  1781               	bsf	1,7
 10550                           
 10551                           ;ir.c: 499: gLedPara.mAuto = 0;
 10552  11EF  1001               	bcf	1,0
 10553                           
 10554                           ;ir.c: 500: gLedRunPara.mParaChanged = 1;
 10555  11F0  0021               	movlb	1	; select bank1
 10556  11F1  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 10557                           
 10558                           ;ir.c: 501: gLedRunPara.music_index = gLedPara.mMsc;
 10559  11F2  3023               	movlw	35
 10560  11F3  0C01               	rrf	1,w
 10561  11F4  0022               	movlb	2	; select bank2
 10562  11F5  00C0               	movwf	??_IR_KeyAction^(0+256)
 10563  11F6  0CC0               	rrf	??_IR_KeyAction^(0+256),f
 10564  11F7  0C40               	rrf	??_IR_KeyAction^(0+256),w
 10565  11F8  390F               	andlw	15
 10566  11F9  0021               	movlb	1	; select bank1
 10567  11FA  00E2               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
 10568  11FB  29BF               	goto	l6606
 10569  11FC                     l6664:	
 10570                           
 10571                           ;ir.c: 505: Audio_StopSound();
 10572  11FC  2557  3191         	fcall	_Audio_StopSound
 10573                           
 10574                           ;ir.c: 506: gLedPara.mOn = !gLedPara.mOn;
 10575  11FE  307B               	movlw	123
 10576  11FF  0086               	movwf	6
 10577  1200  3023               	movlw	35
 10578  1201  0087               	movwf	7
 10579  1202  1003               	clrc
 10580  1203  1C81               	btfss	1,1
 10581  1204  1403               	setc
 10582  1205  3000               	movlw	0
 10583  1206  3D09               	addwfc	9,w
 10584  1207  0022               	movlb	2	; select bank2
 10585  1208  00C0               	movwf	??_IR_KeyAction^(0+256)
 10586  1209  3023               	movlw	35
 10587  120A  0DC0               	rlf	??_IR_KeyAction^(0+256),f
 10588  120B  0801               	movf	1,w
 10589  120C  0640               	xorwf	??_IR_KeyAction^(0+256),w
 10590  120D  39FD               	andlw	-3
 10591  120E  0640               	xorwf	??_IR_KeyAction^(0+256),w
 10592  120F  0081               	movwf	1
 10593                           
 10594                           ;ir.c: 507: gLedPara.mAuto = 0;
 10595  1210  3023               	movlw	35
 10596  1211  1001               	bcf	1,0
 10597  1212  29BD               	goto	l6604
 10598  1213                     l6674:	
 10599                           
 10600                           ;ir.c: 512: if(!gLedPara.mAuto)
 10601  1213  3187  2791  3191   	fcall	PL108	;call to abstracted procedure
 10602  1216  1801               	btfsc	1,0
 10603  1217  2D07               	goto	l7010
 10604                           
 10605                           ;ir.c: 513: {
 10606                           ;ir.c: 514: Audio_StopSound();
 10607  1218  2557  3191         	fcall	_Audio_StopSound
 10608                           
 10609                           ;ir.c: 515: gLedPara.mOn = 1;
 10610  121A  27EB               	fcall	PL156	;call to abstracted procedure
 10611                           
 10612                           ;ir.c: 516: gLedPara.mAuto = 1;
 10613  121B  1401               	bsf	1,0
 10614                           
 10615                           ;ir.c: 517: gLedRunPara.mParaChanged = 1;
 10616  121C  0021               	movlb	1	; select bank1
 10617  121D  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 10618                           
 10619                           ;ir.c: 518: Led_Initialize();
 10620  121E  3189  213C  3191   	fcall	_Led_Initialize
 10621                           
 10622                           ;ir.c: 519: for (uint8_t i = 0; i < 5; i++) {
 10623  1221  0022               	movlb	2	; select bank2
 10624  1222  01CA               	clrf	IR_KeyAction@i^(0+256)
 10625  1223                     l6692:	
 10626                           
 10627                           ;ir.c: 520: gLedRunPara.mCurrentBright[i] = gLedRunPara.mTargetBright[i];
 10628  1223  354A               	lslf	IR_KeyAction@i^(0+256),w
 10629  1224  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 10630  1225  0086               	movwf	6
 10631  1226  0187               	clrf	7
 10632  1227  354A               	lslf	IR_KeyAction@i^(0+256),w
 10633  1228  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 10634  1229  26F6  3191         	fcall	PL30	;call to abstracted procedure
 10635  122B  3005               	movlw	5
 10636  122C  0ACA               	incf	IR_KeyAction@i^(0+256),f
 10637  122D  024A               	subwf	IR_KeyAction@i^(0+256),w
 10638  122E  1803               	btfsc	3,0
 10639  122F  2D07               	goto	l7010
 10640  1230  2A23               	goto	l6692
 10641  1231                     l1165:	
 10642  1231                     l6698:	
 10643                           
 10644                           ;ir.c: 525: case 0x59:
 10645                           ;ir.c: 526: case 0x45:
 10646                           ;ir.c: 527: case 0x44:
 10647                           ;ir.c: 528: case 0x41:
 10648                           ;ir.c: 529: Audio_StopSound();
 10649  1231  2557  3191         	fcall	_Audio_StopSound
 10650                           
 10651                           ;ir.c: 530: idx = IR_GetIndex(keyValue);
 10652  1233  084E               	movf	_keyValue,w	;volatile
 10653  1234  257E  3191         	fcall	_IR_GetIndex
 10654  1236  0022               	movlb	2	; select bank2
 10655  1237  00D3               	movwf	IR_KeyAction@idx^(0+256)
 10656                           
 10657                           ;ir.c: 531: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 1000, 200);
 10658  1238  3553               	lslf	IR_KeyAction@idx^(0+256),w
 10659  1239  274D  3191         	fcall	PL44	;call to abstracted procedure
 10660  123B  26EF  3191         	fcall	PL28	;call to abstracted procedure
 10661  123D  2531  3191         	fcall	_Util_IncValue
 10662  123F                     L4:	
 10663                           
 10664                           ;ir.c: 532: if (ir_state.mSet == 0) {
 10665  123F  0E54               	swapf	_ir_state,w	;volatile
 10666  1240  0C89               	rrf	9,f
 10667  1241  3907               	andlw	7
 10668  1242  1D03               	skipz
 10669  1243  2A52               	goto	l6716
 10670                           
 10671                           ;ir.c: 533: gLedPara.mAuto = 0;
 10672                           
 10673                           ;ir.c: 534: gLedPara.mMsc = 0;
 10674                           
 10675                           ;ir.c: 535: gLedPara.mDyn = 0;
 10676                           
 10677                           ;ir.c: 536: gLedPara.mBright[idx] = gLedRunPara.mTargetBright[idx];
 10678  1244  27AB  3191         	fcall	PL78	;call to abstracted procedure
 10679  1246  3553               	lslf	IR_KeyAction@idx^(0+256),w
 10680  1247  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 10681  1248  0086               	movwf	6
 10682  1249  0187               	clrf	7
 10683  124A  0853               	movf	IR_KeyAction@idx^(0+256),w
 10684  124B  00C0               	movwf	??_IR_KeyAction^(0+256)
 10685  124C  307E               	movlw	126
 10686  124D  26BE  3191         	fcall	PL4	;call to abstracted procedure
 10687  124F                     l6714:	
 10688                           
 10689                           ;ir.c: 537: gLedRunPara.mParaChanged = 1;
 10690  124F  0021               	movlb	1	; select bank1
 10691  1250  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 10692                           
 10693                           ;ir.c: 538: } else {
 10694  1251  2D07               	goto	l7010
 10695  1252                     l6716:	
 10696                           
 10697                           ;ir.c: 539: ir_state.mSetDelay = 0;
 10698  1252  0020               	movlb	0	; select bank0
 10699  1253  01DA               	clrf	_ir_state+6	;volatile
 10700  1254  2D07               	goto	l7010
 10701  1255                     l1172:	
 10702  1255                     l6718:	
 10703                           
 10704                           ;ir.c: 543: case 0x55:
 10705                           ;ir.c: 544: case 0x49:
 10706                           ;ir.c: 545: case 0x48:
 10707                           ;ir.c: 546: case 0x40:
 10708                           ;ir.c: 547: Audio_StopSound();
 10709  1255  2557  3191         	fcall	_Audio_StopSound
 10710                           
 10711                           ;ir.c: 548: idx = IR_GetIndex(keyValue);
 10712  1257  084E               	movf	_keyValue,w	;volatile
 10713  1258  257E  3191         	fcall	_IR_GetIndex
 10714  125A  0022               	movlb	2	; select bank2
 10715  125B  00D3               	movwf	IR_KeyAction@idx^(0+256)
 10716                           
 10717                           ;ir.c: 549: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 0, 200);
 10718  125C  3553               	lslf	IR_KeyAction@idx^(0+256),w
 10719  125D  27D3  3191         	fcall	PL112	;call to abstracted procedure
 10720  125F  250B  3191         	fcall	_Util_DecValue
 10721  1261  2A3F               	goto	L4
 10722  1262                     l1178:	
 10723                           ;ir.c: 553: gLedPara.mDyn = 0;
 10724                           
 10725                           ;ir.c: 552: gLedPara.mMsc = 0;
 10726                           
 10727                           ;ir.c: 551: gLedPara.mAuto = 0;
 10728                           
 10729                           ;ir.c: 550: if (ir_state.mSet == 0) {
 10730                           
 10731  1262                     l6738:	
 10732                           
 10733                           ;ir.c: 561: case 0x51:
 10734                           ;ir.c: 562: case 0x4D:
 10735                           ;ir.c: 563: case 0x4C:
 10736                           ;ir.c: 564: Audio_StopSound();
 10737  1262  2557  3191         	fcall	_Audio_StopSound
 10738                           
 10739                           ;ir.c: 565: idx = IR_GetIndex(keyValue);
 10740  1264  084E               	movf	_keyValue,w	;volatile
 10741  1265  257E  3191         	fcall	_IR_GetIndex
 10742  1267  0022               	movlb	2	; select bank2
 10743  1268  00D3               	movwf	IR_KeyAction@idx^(0+256)
 10744                           
 10745                           ;ir.c: 566: for (uint8_t i = 0; i < 5; i++) {
 10746  1269  01CB               	clrf	IR_KeyAction@i_1444^(0+256)
 10747  126A                     l6744:	
 10748  126A  3005               	movlw	5
 10749  126B  024B               	subwf	IR_KeyAction@i_1444^(0+256),w
 10750  126C  1803               	btfsc	3,0
 10751  126D  2A7C               	goto	l6754
 10752                           
 10753                           ;ir.c: 567: gLedRunPara.mTargetBright[i] = gLedPara.mCustom[idx][i];
 10754  126E  084B               	movf	IR_KeyAction@i_1444^(0+256),w
 10755  126F  27C2  3191         	fcall	PL96	;call to abstracted procedure
 10756  1271  27B5  3191         	fcall	PL84	;call to abstracted procedure
 10757  1273  2569  3191         	fcall	___wmul
 10758  1275  2721               	fcall	PL40	;call to abstracted procedure
 10759  1276  354B               	lslf	IR_KeyAction@i_1444^(0+256),w
 10760  1277  318D  25FE  3191   	fcall	PL22	;call to abstracted procedure
 10761  127A  0ACB               	incf	IR_KeyAction@i_1444^(0+256),f
 10762  127B  2A6A               	goto	l6744
 10763  127C                     l6754:	
 10764                           
 10765                           ;ir.c: 568: }
 10766                           ;ir.c: 569: if (ir_state.mSet == 0) {
 10767  127C  0020               	movlb	0	; select bank0
 10768  127D  0E54               	swapf	_ir_state,w	;volatile
 10769  127E  0C89               	rrf	9,f
 10770  127F  3907               	andlw	7
 10771  1280  1D03               	skipz
 10772  1281  2A52               	goto	l6716
 10773                           
 10774                           ;ir.c: 570: gLedPara.mAuto = 0;
 10775                           
 10776                           ;ir.c: 571: gLedPara.mMsc = 0;
 10777                           
 10778                           ;ir.c: 572: gLedPara.mDyn = 0;
 10779                           
 10780                           ;ir.c: 573: for (uint8_t i = 0; i < 5; i++) {
 10781  1282  27AB  3191         	fcall	PL78	;call to abstracted procedure
 10782  1284  01CC               	clrf	IR_KeyAction@i_1445^(0+256)
 10783  1285                     l6764:	
 10784  1285  3005               	movlw	5
 10785  1286  024C               	subwf	IR_KeyAction@i_1445^(0+256),w
 10786  1287  1803               	btfsc	3,0
 10787  1288  2A4F               	goto	l6714
 10788                           
 10789                           ;ir.c: 574: gLedPara.mBright[i] = gLedPara.mCustom[idx][i];
 10790  1289  084C               	movf	IR_KeyAction@i_1445^(0+256),w
 10791  128A  27C2  3191         	fcall	PL96	;call to abstracted procedure
 10792  128C  27B5  3191         	fcall	PL84	;call to abstracted procedure
 10793  128E  2569  3191         	fcall	___wmul
 10794  1290  2721               	fcall	PL40	;call to abstracted procedure
 10795  1291  084C               	movf	IR_KeyAction@i_1445^(0+256),w
 10796  1292  00C6               	movwf	(??_IR_KeyAction+6)^(0+256)
 10797  1293  307E               	movlw	126
 10798  1294  01C7               	clrf	((??_IR_KeyAction+6)^(0+256)+1)
 10799  1295  35C6               	lslf	(??_IR_KeyAction+6)^(0+256),f
 10800  1296  0DC7               	rlf	((??_IR_KeyAction+6)^(0+256)+1),f
 10801  1297  00C8               	movwf	(??_IR_KeyAction+8)^(0+256)
 10802  1298  3023               	movlw	35
 10803  1299  00C9               	movwf	((??_IR_KeyAction+8)^(0+256)+1)
 10804  129A  0846               	movf	(??_IR_KeyAction+6)^(0+256),w
 10805  129B  0748               	addwf	(??_IR_KeyAction+8)^(0+256),w
 10806  129C  0084               	movwf	4
 10807  129D  0847               	movf	(??_IR_KeyAction+7)^(0+256),w
 10808  129E  3D49               	addwfc	(??_IR_KeyAction+9)^(0+256),w
 10809  129F  3185  2502  3191   	fcall	PL58	;call to abstracted procedure
 10810  12A2  0ACC               	incf	IR_KeyAction@i_1445^(0+256),f
 10811  12A3  2A85               	goto	l6764
 10812  12A4                     l6776:	
 10813                           
 10814                           ;ir.c: 583: if(gLedPara.mMsc == 0) {
 10815  12A4  307B               	movlw	123
 10816  12A5  27C9  3191         	fcall	PL110	;call to abstracted procedure
 10817  12A7  1D03               	skipz
 10818  12A8  2AC1               	goto	l6792
 10819                           
 10820                           ;ir.c: 584: for (uint8_t i = 0; i < 5; i++) {
 10821  12A9  01CF               	clrf	IR_KeyAction@i_1446^(0+256)
 10822  12AA                     l6780:	
 10823  12AA  3005               	movlw	5
 10824  12AB  024F               	subwf	IR_KeyAction@i_1446^(0+256),w
 10825  12AC  1803               	btfsc	3,0
 10826  12AD  2BB9               	goto	l6902
 10827                           
 10828                           ;ir.c: 585: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[i], 1000, 200);
 10829  12AE  354F               	lslf	IR_KeyAction@i_1446^(0+256),w
 10830  12AF  274D  3191         	fcall	PL44	;call to abstracted procedure
 10831  12B1  26EF  3191         	fcall	PL28	;call to abstracted procedure
 10832  12B3  2531  3191         	fcall	_Util_IncValue
 10833                           
 10834                           ;ir.c: 586: gLedPara.mBright[i] = gLedRunPara.mTargetBright[i];
 10835  12B5  0022               	movlb	2	; select bank2
 10836  12B6  354F               	lslf	IR_KeyAction@i_1446^(0+256),w
 10837  12B7  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 10838  12B8  0086               	movwf	6
 10839  12B9  0187               	clrf	7
 10840  12BA  084F               	movf	IR_KeyAction@i_1446^(0+256),w
 10841  12BB  00C0               	movwf	??_IR_KeyAction^(0+256)
 10842  12BC  307E               	movlw	126
 10843  12BD  26BE  3191         	fcall	PL4	;call to abstracted procedure
 10844  12BF  0ACF               	incf	IR_KeyAction@i_1446^(0+256),f
 10845  12C0  2AAA               	goto	l6780
 10846  12C1                     l6792:	
 10847                           
 10848                           ;ir.c: 589: if(gLedPara.mMsc == 1) {
 10849  12C1  26CF  3191         	fcall	PL8	;call to abstracted procedure
 10850  12C3  3A01               	xorlw	1
 10851  12C4  1D03               	skipz
 10852  12C5  2ADE               	goto	l6808
 10853                           
 10854                           ;ir.c: 590: for(uint8_t i = 0;i < 5; i++) {
 10855  12C6  01D0               	clrf	IR_KeyAction@i_1447^(0+256)
 10856  12C7                     l6796:	
 10857  12C7  3005               	movlw	5
 10858  12C8  0250               	subwf	IR_KeyAction@i_1447^(0+256),w
 10859  12C9  1803               	btfsc	3,0
 10860  12CA  2BB9               	goto	l6902
 10861                           
 10862                           ;ir.c: 591: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[i], 1000, 200);
 10863  12CB  3550               	lslf	IR_KeyAction@i_1447^(0+256),w
 10864  12CC  274D  3191         	fcall	PL44	;call to abstracted procedure
 10865  12CE  26EF  3191         	fcall	PL28	;call to abstracted procedure
 10866  12D0  2531  3191         	fcall	_Util_IncValue
 10867                           
 10868                           ;ir.c: 592: gLedPara.mStaticDayBright[i] = gLedRunPara.mTargetBright[i];
 10869  12D2  0022               	movlb	2	; select bank2
 10870  12D3  3550               	lslf	IR_KeyAction@i_1447^(0+256),w
 10871  12D4  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 10872  12D5  0086               	movwf	6
 10873  12D6  0187               	clrf	7
 10874  12D7  0850               	movf	IR_KeyAction@i_1447^(0+256),w
 10875  12D8  00C0               	movwf	??_IR_KeyAction^(0+256)
 10876  12D9  30B0               	movlw	176
 10877  12DA  26BE  3191         	fcall	PL4	;call to abstracted procedure
 10878  12DC  0AD0               	incf	IR_KeyAction@i_1447^(0+256),f
 10879  12DD  2AC7               	goto	l6796
 10880  12DE                     l6808:	
 10881  12DE  26CF  3191         	fcall	PL8	;call to abstracted procedure
 10882  12E0  3A02               	xorlw	2
 10883  12E1  1D03               	skipz
 10884  12E2  2AED               	goto	l6814
 10885                           
 10886                           ;ir.c: 595: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[2],1000,200);
 10887  12E3  27A3  3191         	fcall	PL74	;call to abstracted procedure
 10888  12E5  26D9  3191         	fcall	PL14	;call to abstracted procedure
 10889  12E7  2531  3191         	fcall	_Util_IncValue
 10890                           
 10891                           ;ir.c: 596: gLedPara.mStaticNightBright[2] = gLedRunPara.mTargetBright[2];
 10892  12E9  30BE               	movlw	190
 10893  12EA  2753  3191         	fcall	PL46	;call to abstracted procedure
 10894                           
 10895                           ;ir.c: 597: } else if (gLedPara.mMsc == 3) {
 10896  12EC  2BB9               	goto	l6902
 10897  12ED                     l6814:	
 10898  12ED  26CF  3191         	fcall	PL8	;call to abstracted procedure
 10899  12EF  3A03               	xorlw	3
 10900  12F0  1D03               	skipz
 10901  12F1  2B09               	goto	l6824
 10902                           
 10903                           ;ir.c: 598: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[2],1000,200);
 10904  12F2  27A3  3191         	fcall	PL74	;call to abstracted procedure
 10905  12F4  26D9  3191         	fcall	PL14	;call to abstracted procedure
 10906  12F6  2531  3191         	fcall	_Util_IncValue
 10907                           
 10908                           ;ir.c: 599: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[3],1000,200);
 10909  12F8  30DA               	movlw	low (_gLedRunPara+16)
 10910  12F9  00AD               	movwf	Util_IncValue@pSrc
 10911  12FA  3000               	movlw	high (_gLedRunPara+16)
 10912  12FB  26D9  3191         	fcall	PL14	;call to abstracted procedure
 10913  12FD  2531  3191         	fcall	_Util_IncValue
 10914                           
 10915                           ;ir.c: 600: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[4],1000,200);
 10916  12FF  30DC               	movlw	low (_gLedRunPara+18)
 10917  1300  00AD               	movwf	Util_IncValue@pSrc
 10918  1301  3000               	movlw	high (_gLedRunPara+18)
 10919  1302  26D9  3191         	fcall	PL14	;call to abstracted procedure
 10920  1304  2531  3191         	fcall	_Util_IncValue
 10921                           
 10922                           ;ir.c: 601: gLedPara.mStaticFishBright[2] = gLedRunPara.mTargetBright[2];
 10923                           
 10924                           ;ir.c: 602: gLedPara.mStaticFishBright[3] = gLedRunPara.mTargetBright[3];
 10925                           
 10926                           ;ir.c: 603: gLedPara.mStaticFishBright[4] = gLedRunPara.mTargetBright[4];
 10927  1306  2737  3191         	fcall	PL42	;call to abstracted procedure
 10928                           
 10929                           ;ir.c: 604: } else if (gLedPara.mMsc == 4) {
 10930  1308  2BB9               	goto	l6902
 10931  1309                     l6824:	
 10932  1309  26CF  3191         	fcall	PL8	;call to abstracted procedure
 10933  130B  3A04               	xorlw	4
 10934  130C  1D03               	skipz
 10935  130D  2BB9               	goto	l6902
 10936                           
 10937                           ;ir.c: 605: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[0],1000,200);
 10938  130E  30D4               	movlw	low (_gLedRunPara+10)
 10939  130F  0020               	movlb	0	; select bank0
 10940  1310  00AD               	movwf	Util_IncValue@pSrc
 10941  1311  3000               	movlw	high (_gLedRunPara+10)
 10942  1312  26D9  3191         	fcall	PL14	;call to abstracted procedure
 10943  1314  2531  3191         	fcall	_Util_IncValue
 10944                           
 10945                           ;ir.c: 606: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[2],1000,200);
 10946  1316  30D8               	movlw	low (_gLedRunPara+14)
 10947  1317  00AD               	movwf	Util_IncValue@pSrc
 10948  1318  3000               	movlw	high (_gLedRunPara+14)
 10949  1319  26D9  3191         	fcall	PL14	;call to abstracted procedure
 10950  131B  2531  3191         	fcall	_Util_IncValue
 10951                           
 10952                           ;ir.c: 607: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[3],1000,200);
 10953  131D  30DA               	movlw	low (_gLedRunPara+16)
 10954  131E  00AD               	movwf	Util_IncValue@pSrc
 10955  131F  3000               	movlw	high (_gLedRunPara+16)
 10956  1320  26D9  3191         	fcall	PL14	;call to abstracted procedure
 10957  1322  2531  3191         	fcall	_Util_IncValue
 10958                           
 10959                           ;ir.c: 608: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[4],1000,200);
 10960  1324  30DC               	movlw	low (_gLedRunPara+18)
 10961  1325  00AD               	movwf	Util_IncValue@pSrc
 10962  1326  3000               	movlw	high (_gLedRunPara+18)
 10963  1327  26D9  3191         	fcall	PL14	;call to abstracted procedure
 10964  1329  2531  3191         	fcall	_Util_IncValue
 10965  132B  2BB7               	goto	L34
 10966  132C                     l6842:	
 10967                           ;ir.c: 617: gLedPara.mDyn = 0;
 10968                           
 10969                           ;ir.c: 613: }
 10970                           ;ir.c: 614: }
 10971                           ;ir.c: 615: gLedPara.mAuto = 0;
 10972                           
 10973                           ;ir.c: 609: gLedPara.mStaticPlantBright[0] = gLedRunPara.mTargetBright[0];
 10974                           
 10975                           ;ir.c: 610: gLedPara.mStaticPlantBright[2] = gLedRunPara.mTargetBright[2];
 10976                           
 10977                           ;ir.c: 611: gLedPara.mStaticPlantBright[3] = gLedRunPara.mTargetBright[3];
 10978                           
 10979                           ;ir.c: 612: gLedPara.mStaticPlantBright[4] = gLedRunPara.mTargetBright[4];
 10980                           
 10981                           
 10982                           ;ir.c: 622: if(gLedPara.mMsc == 0) {
 10983  132C  307B               	movlw	123
 10984  132D  27C9  3191         	fcall	PL110	;call to abstracted procedure
 10985  132F  1D03               	skipz
 10986  1330  2B47               	goto	l6858
 10987                           
 10988                           ;ir.c: 623: for(uint8_t i = 0;i < 5; i++) {
 10989  1331  01D1               	clrf	IR_KeyAction@i_1448^(0+256)
 10990  1332                     l6846:	
 10991  1332  3005               	movlw	5
 10992  1333  0251               	subwf	IR_KeyAction@i_1448^(0+256),w
 10993  1334  1803               	btfsc	3,0
 10994  1335  2BB9               	goto	l6902
 10995                           
 10996                           ;ir.c: 624: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[i], 0, 200);
 10997  1336  3551               	lslf	IR_KeyAction@i_1448^(0+256),w
 10998  1337  27D3  3191         	fcall	PL112	;call to abstracted procedure
 10999  1339  250B  3191         	fcall	_Util_DecValue
 11000                           
 11001                           ;ir.c: 625: gLedPara.mBright[i] = gLedRunPara.mTargetBright[i];
 11002  133B  0022               	movlb	2	; select bank2
 11003  133C  3551               	lslf	IR_KeyAction@i_1448^(0+256),w
 11004  133D  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11005  133E  0086               	movwf	6
 11006  133F  0187               	clrf	7
 11007  1340  0851               	movf	IR_KeyAction@i_1448^(0+256),w
 11008  1341  00C0               	movwf	??_IR_KeyAction^(0+256)
 11009  1342  307E               	movlw	126
 11010  1343  26BE  3191         	fcall	PL4	;call to abstracted procedure
 11011  1345  0AD1               	incf	IR_KeyAction@i_1448^(0+256),f
 11012  1346  2B32               	goto	l6846
 11013  1347                     l6858:	
 11014                           
 11015                           ;ir.c: 628: if(gLedPara.mMsc == 1) {
 11016  1347  26CF  3191         	fcall	PL8	;call to abstracted procedure
 11017  1349  3A01               	xorlw	1
 11018  134A  1D03               	skipz
 11019  134B  2B6A               	goto	l6874
 11020                           
 11021                           ;ir.c: 629: for(uint8_t i = 0;i < 5; i++) {
 11022  134C  01D2               	clrf	IR_KeyAction@i_1449^(0+256)
 11023  134D                     l6862:	
 11024  134D  3005               	movlw	5
 11025  134E  0252               	subwf	IR_KeyAction@i_1449^(0+256),w
 11026  134F  1803               	btfsc	3,0
 11027  1350  2BB9               	goto	l6902
 11028                           
 11029                           ;ir.c: 630: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[i], 100, 200);
 11030  1351  3552               	lslf	IR_KeyAction@i_1449^(0+256),w
 11031  1352  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11032  1353  0020               	movlb	0	; select bank0
 11033  1354  00AD               	movwf	Util_DecValue@pSrc
 11034  1355  3064               	movlw	100
 11035  1356  01AE               	clrf	Util_DecValue@pSrc+1
 11036  1357  00AF               	movwf	Util_DecValue@min
 11037  1358  30C8               	movlw	200
 11038  1359  01B0               	clrf	Util_DecValue@min+1
 11039  135A  00B1               	movwf	Util_DecValue@delta
 11040  135B  01B2               	clrf	Util_DecValue@delta+1
 11041  135C  250B  3191         	fcall	_Util_DecValue
 11042                           
 11043                           ;ir.c: 631: gLedPara.mStaticDayBright[i] = gLedRunPara.mTargetBright[i];
 11044  135E  0022               	movlb	2	; select bank2
 11045  135F  3552               	lslf	IR_KeyAction@i_1449^(0+256),w
 11046  1360  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11047  1361  0086               	movwf	6
 11048  1362  0187               	clrf	7
 11049  1363  0852               	movf	IR_KeyAction@i_1449^(0+256),w
 11050  1364  00C0               	movwf	??_IR_KeyAction^(0+256)
 11051  1365  30B0               	movlw	176
 11052  1366  26BE  3191         	fcall	PL4	;call to abstracted procedure
 11053  1368  0AD2               	incf	IR_KeyAction@i_1449^(0+256),f
 11054  1369  2B4D               	goto	l6862
 11055  136A                     l6874:	
 11056  136A  26CF  3191         	fcall	PL8	;call to abstracted procedure
 11057  136C  3A02               	xorlw	2
 11058  136D  1D03               	skipz
 11059  136E  2B79               	goto	l6880
 11060                           
 11061                           ;ir.c: 634: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[2], 100, 200);
 11062  136F  27A7  3191         	fcall	PL76	;call to abstracted procedure
 11063  1371  26FD  3191         	fcall	PL32	;call to abstracted procedure
 11064  1373  250B  3191         	fcall	_Util_DecValue
 11065                           
 11066                           ;ir.c: 635: gLedPara.mStaticNightBright[2] = gLedRunPara.mTargetBright[2];
 11067  1375  30BE               	movlw	190
 11068  1376  2753  3191         	fcall	PL46	;call to abstracted procedure
 11069                           
 11070                           ;ir.c: 636: } else if (gLedPara.mMsc == 3) {
 11071  1378  2BB9               	goto	l6902
 11072  1379                     l6880:	
 11073  1379  26CF  3191         	fcall	PL8	;call to abstracted procedure
 11074  137B  3A03               	xorlw	3
 11075  137C  1D03               	skipz
 11076  137D  2B95               	goto	l6890
 11077                           
 11078                           ;ir.c: 637: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[2], 100, 200);
 11079  137E  27A7  3191         	fcall	PL76	;call to abstracted procedure
 11080  1380  26FD  3191         	fcall	PL32	;call to abstracted procedure
 11081  1382  250B  3191         	fcall	_Util_DecValue
 11082                           
 11083                           ;ir.c: 638: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[3], 100, 200);
 11084  1384  30DA               	movlw	low (_gLedRunPara+16)
 11085  1385  00AD               	movwf	Util_DecValue@pSrc
 11086  1386  3000               	movlw	high (_gLedRunPara+16)
 11087  1387  26FD  3191         	fcall	PL32	;call to abstracted procedure
 11088  1389  250B  3191         	fcall	_Util_DecValue
 11089                           
 11090                           ;ir.c: 639: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[4], 100, 200);
 11091  138B  30DC               	movlw	low (_gLedRunPara+18)
 11092  138C  00AD               	movwf	Util_DecValue@pSrc
 11093  138D  3000               	movlw	high (_gLedRunPara+18)
 11094  138E  26FD  3191         	fcall	PL32	;call to abstracted procedure
 11095  1390  250B  3191         	fcall	_Util_DecValue
 11096                           
 11097                           ;ir.c: 640: gLedPara.mStaticFishBright[2] = gLedRunPara.mTargetBright[2];
 11098                           
 11099                           ;ir.c: 641: gLedPara.mStaticFishBright[3] = gLedRunPara.mTargetBright[3];
 11100                           
 11101                           ;ir.c: 642: gLedPara.mStaticFishBright[4] = gLedRunPara.mTargetBright[4];
 11102  1392  2737  3191         	fcall	PL42	;call to abstracted procedure
 11103                           
 11104                           ;ir.c: 643: } else if (gLedPara.mMsc == 4) {
 11105  1394  2BB9               	goto	l6902
 11106  1395                     l6890:	
 11107  1395  26CF  3191         	fcall	PL8	;call to abstracted procedure
 11108  1397  3A04               	xorlw	4
 11109  1398  1D03               	skipz
 11110  1399  2BB9               	goto	l6902
 11111                           
 11112                           ;ir.c: 644: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[0], 100, 200);
 11113  139A  30D4               	movlw	low (_gLedRunPara+10)
 11114  139B  0020               	movlb	0	; select bank0
 11115  139C  00AD               	movwf	Util_DecValue@pSrc
 11116  139D  3000               	movlw	high (_gLedRunPara+10)
 11117  139E  26FD  3191         	fcall	PL32	;call to abstracted procedure
 11118  13A0  250B  3191         	fcall	_Util_DecValue
 11119                           
 11120                           ;ir.c: 645: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[2], 100, 200);
 11121  13A2  30D8               	movlw	low (_gLedRunPara+14)
 11122  13A3  00AD               	movwf	Util_DecValue@pSrc
 11123  13A4  3000               	movlw	high (_gLedRunPara+14)
 11124  13A5  26FD  3191         	fcall	PL32	;call to abstracted procedure
 11125  13A7  250B  3191         	fcall	_Util_DecValue
 11126                           
 11127                           ;ir.c: 646: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[3], 100, 200);
 11128  13A9  30DA               	movlw	low (_gLedRunPara+16)
 11129  13AA  00AD               	movwf	Util_DecValue@pSrc
 11130  13AB  3000               	movlw	high (_gLedRunPara+16)
 11131  13AC  26FD  3191         	fcall	PL32	;call to abstracted procedure
 11132  13AE  250B  3191         	fcall	_Util_DecValue
 11133                           
 11134                           ;ir.c: 647: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[4], 100, 200);
 11135  13B0  30DC               	movlw	low (_gLedRunPara+18)
 11136  13B1  00AD               	movwf	Util_DecValue@pSrc
 11137  13B2  3000               	movlw	high (_gLedRunPara+18)
 11138  13B3  26FD  3191         	fcall	PL32	;call to abstracted procedure
 11139  13B5  250B  3191         	fcall	_Util_DecValue
 11140  13B7                     L34:	
 11141                           
 11142                           ;ir.c: 648: gLedPara.mStaticPlantBright[0] = gLedRunPara.mTargetBright[0];
 11143                           
 11144                           ;ir.c: 649: gLedPara.mStaticPlantBright[2] = gLedRunPara.mTargetBright[2];
 11145                           
 11146                           ;ir.c: 650: gLedPara.mStaticPlantBright[3] = gLedRunPara.mTargetBright[3];
 11147                           
 11148                           ;ir.c: 651: gLedPara.mStaticPlantBright[4] = gLedRunPara.mTargetBright[4];
 11149  13B7  2705  3191         	fcall	PL34	;call to abstracted procedure
 11150  13B9                     l6902:	
 11151                           
 11152                           ;ir.c: 652: }
 11153                           ;ir.c: 653: }
 11154                           ;ir.c: 654: gLedPara.mAuto = 0;
 11155  13B9  307B               	movlw	123
 11156  13BA  0086               	movwf	6
 11157  13BB  3023               	movlw	35
 11158  13BC  0087               	movwf	7
 11159  13BD  1001               	bcf	1,0
 11160                           
 11161                           ;ir.c: 656: gLedPara.mDyn = 0;
 11162  13BE  1381               	bcf	1,7
 11163  13BF  2A4F               	goto	l6714
 11164  13C0                     l6908:	
 11165                           
 11166                           ;ir.c: 660: Util_DecValue((uint16_t*) & gLedPara.mVolume, 0, 1);
 11167  13C0  307D               	movlw	125
 11168  13C1  00AD               	movwf	Util_DecValue@pSrc
 11169  13C2  3023               	movlw	35
 11170  13C3  00AE               	movwf	Util_DecValue@pSrc+1
 11171  13C4  01AF               	clrf	Util_DecValue@min
 11172  13C5  01B0               	clrf	Util_DecValue@min+1
 11173  13C6  01B1               	clrf	Util_DecValue@delta
 11174  13C7  0AB1               	incf	Util_DecValue@delta,f
 11175  13C8  01B2               	clrf	Util_DecValue@delta+1
 11176  13C9  250B  3191         	fcall	_Util_DecValue
 11177                           
 11178                           ;ir.c: 661: Audio_SetVolume(VOLUME[ gLedPara.mVolume ]);
 11179  13CB  307B               	movlw	123
 11180  13CC  26E2  3191         	fcall	PL18	;call to abstracted procedure
 11181  13CE  2601  3191         	fcall	_Audio_SetVolume
 11182  13D0  2A4F               	goto	l6714
 11183  13D1                     l6914:	
 11184                           
 11185                           ;ir.c: 665: Util_IncValue((uint16_t*) & gLedPara.mVolume, 4, 1);
 11186  13D1  307D               	movlw	125
 11187  13D2  00AD               	movwf	Util_IncValue@pSrc
 11188  13D3  3023               	movlw	35
 11189  13D4  00AE               	movwf	Util_IncValue@pSrc+1
 11190  13D5  3004               	movlw	4
 11191  13D6  00AF               	movwf	Util_IncValue@max
 11192  13D7  01B0               	clrf	Util_IncValue@max+1
 11193  13D8  01B1               	clrf	Util_IncValue@delta
 11194  13D9  0AB1               	incf	Util_IncValue@delta,f
 11195  13DA  01B2               	clrf	Util_IncValue@delta+1
 11196  13DB  2531  3191         	fcall	_Util_IncValue
 11197                           
 11198                           ;ir.c: 666: Audio_SetVolume(VOLUME[ gLedPara.mVolume ]);
 11199  13DD  307B               	movlw	123
 11200  13DE  26E2  3191         	fcall	PL18	;call to abstracted procedure
 11201  13E0  2601  3191         	fcall	_Audio_SetVolume
 11202  13E2  2A4F               	goto	l6714
 11203  13E3                     l1219:	
 11204  13E3                     l6920:	
 11205                           
 11206                           ;ir.c: 670: case 0x0D:
 11207                           ;ir.c: 671: case 0x0E:
 11208                           ;ir.c: 672: case 0x0F:
 11209                           ;ir.c: 673: case 0x08:
 11210                           ;ir.c: 674: case 0x09:
 11211                           ;ir.c: 675: case 0x0A:
 11212                           ;ir.c: 676: case 0x0B:
 11213                           ;ir.c: 677: case 0x04:
 11214                           ;ir.c: 678: case 0x05:
 11215                           ;ir.c: 679: if (ir_state.tmIdx < 4) {
 11216  13E3  3004               	movlw	4
 11217  13E4  0255               	subwf	_ir_state+1,w	;volatile
 11218  13E5  1803               	skipnc
 11219  13E6  2BF1               	goto	l6926
 11220                           
 11221                           ;ir.c: 680: ir_state.time[ir_state.tmIdx++] = IR_GetIndex(keyValue);
 11222  13E7  0855               	movf	_ir_state+1,w	;volatile
 11223  13E8  3E56               	addlw	(low ((_ir_state| 0+2)))& (0+255)
 11224  13E9  0086               	movwf	6
 11225  13EA  0187               	clrf	7
 11226  13EB  084E               	movf	_keyValue,w	;volatile
 11227  13EC  257E  3191         	fcall	_IR_GetIndex
 11228  13EE  0081               	movwf	1
 11229  13EF  0AD5               	incf	_ir_state+1,f	;volatile
 11230                           
 11231                           ;ir.c: 681: } else {
 11232  13F0  2BF2               	goto	l6928
 11233  13F1                     l6926:	
 11234                           
 11235                           ;ir.c: 682: ir_state.tmIdx = 0;
 11236  13F1  01D5               	clrf	_ir_state+1	;volatile
 11237  13F2                     l6928:	
 11238                           
 11239                           ;ir.c: 683: }
 11240                           ;ir.c: 684: if (IR_IsValidTime((uint8_t*) & ir_state.time[0], ir_state.tmIdx) == 0) {
 11241  13F2  0855               	movf	_ir_state+1,w	;volatile
 11242  13F3  00B0               	movwf	IR_IsValidTime@len
 11243  13F4  3056               	movlw	(low ((_ir_state| 0+2)))& (0+255)
 11244  13F5  2667  3191         	fcall	_IR_IsValidTime
 11245  13F7  3A00               	xorlw	0
 11246  13F8  1D03               	skipz
 11247  13F9  2C00               	goto	l6934
 11248                           
 11249                           ;ir.c: 685: Led_StartNotice(3);
 11250  13FA  3003               	movlw	3
 11251  13FB  2645  3191         	fcall	_Led_StartNotice
 11252  13FD                     l6932:	
 11253                           
 11254                           ;ir.c: 686: IR_ExitSet();
 11255  13FD  2652  3191         	fcall	_IR_ExitSet
 11256                           
 11257                           ;ir.c: 687: } else if (ir_state.tmIdx == 4) {
 11258  13FF  2A52               	goto	l6716
 11259  1400                     l6934:	
 11260  1400  3004               	movlw	4
 11261  1401  0655               	xorwf	_ir_state+1,w	;volatile
 11262  1402  1D03               	btfss	3,2
 11263  1403  2A52               	goto	l6716
 11264                           
 11265                           ;ir.c: 688: if (ir_state.mSet == 1) {
 11266  1404  3187  2796  3191   	fcall	PL162	;call to abstracted procedure
 11267  1407  1D03               	skipz
 11268  1408  2C27               	goto	l6944
 11269                           
 11270                           ;ir.c: 689: RTC_GetTime()->hour = ir_state.time[0]*10 + ir_state.time[1];
 11271  1409  318A  227A  3191   	fcall	_RTC_GetTime
 11272  140C  27E5  3191         	fcall	PL152	;call to abstracted procedure
 11273  140E  0856               	movf	_ir_state+2,w	;volatile
 11274  140F  265B               	fcall	___bmul
 11275  1410  0757               	addwf	_ir_state+3,w	;volatile
 11276  1411  0081               	movwf	1
 11277                           
 11278                           ;ir.c: 690: RTC_GetTime()->minute = ir_state.time[2]*10 + ir_state.time[3];
 11279  1412  318A  227A  3191   	fcall	_RTC_GetTime
 11280  1415  0022               	movlb	2	; select bank2
 11281  1416  00C0               	movwf	??_IR_KeyAction^(0+256)
 11282  1417  3E01               	addlw	1
 11283  1418  27E5  3191         	fcall	PL152	;call to abstracted procedure
 11284  141A  0858               	movf	_ir_state+4,w	;volatile
 11285  141B  265B               	fcall	___bmul
 11286  141C  0759               	addwf	_ir_state+5,w	;volatile
 11287  141D  0081               	movwf	1
 11288  141E                     L3:	
 11289                           
 11290                           ;ir.c: 691: if (gLedPara.mAuto) {
 11291  141E  3187  2791  3191   	fcall	PL108	;call to abstracted procedure
 11292  1421  1C01               	btfss	1,0
 11293  1422  2BFD               	goto	l6932
 11294                           
 11295                           ;ir.c: 692: Led_Initialize();
 11296  1423  3189  213C  3191   	fcall	_Led_Initialize
 11297  1426  2BFD               	goto	l6932
 11298  1427                     l6944:	
 11299  1427  3187  279B  3191   	fcall	PL166	;call to abstracted procedure
 11300  142A  1D03               	skipz
 11301  142B  2C3C               	goto	l6954
 11302                           
 11303                           ;ir.c: 695: gLedPara.mSunrise = ir_state.time[0]*600 + ir_state.time[1]*60 + ir_state.ti
      +                          me[2]*10 + ir_state.time[3];
 11304  142C  2796  3191         	fcall	PL72	;call to abstracted procedure
 11305  142E  2569  3191         	fcall	___wmul
 11306  1430  2787  3191         	fcall	PL66	;call to abstracted procedure
 11307  1432  2569  3191         	fcall	___wmul
 11308  1434  2776  3191         	fcall	PL64	;call to abstracted procedure
 11309  1436  2569  3191         	fcall	___wmul
 11310  1438  275C  3191         	fcall	PL60	;call to abstracted procedure
 11311  143A  30D8               	movlw	216
 11312  143B  2C50               	goto	L35
 11313  143C                     l6954:	
 11314                           ;ir.c: 697: if (gLedPara.mAuto) {
 11315                           
 11316                           ;ir.c: 696: gLedRunPara.mParaChanged = 1;
 11317                           
 11318  143C  3187  27A0  3191   	fcall	PL168	;call to abstracted procedure
 11319  143F  1D03               	skipz
 11320  1440  2BFD               	goto	l6932
 11321                           
 11322                           ;ir.c: 701: gLedPara.mSunset = ir_state.time[0]*600 + ir_state.time[1]*60 + ir_state.tim
      +                          e[2]*10 + ir_state.time[3];
 11323  1441  2796  3191         	fcall	PL72	;call to abstracted procedure
 11324  1443  2569  3191         	fcall	___wmul
 11325  1445  2787  3191         	fcall	PL66	;call to abstracted procedure
 11326  1447  2569  3191         	fcall	___wmul
 11327  1449  2776  3191         	fcall	PL64	;call to abstracted procedure
 11328  144B  2569  3191         	fcall	___wmul
 11329  144D  275C  3191         	fcall	PL60	;call to abstracted procedure
 11330  144F  30E4               	movlw	228
 11331  1450                     L35:	
 11332  1450  27DD  3191         	fcall	PL120	;call to abstracted procedure
 11333                           
 11334                           ;ir.c: 702: gLedRunPara.mParaChanged = 1;
 11335  1452  0021               	movlb	1	; select bank1
 11336  1453  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 11337  1454  2C1E               	goto	L3
 11338  1455                     l6966:	
 11339                           ;ir.c: 703: if (gLedPara.mAuto) {
 11340                           
 11341                           
 11342                           ;ir.c: 712: if (ir_state.mSet == 4) {
 11343  1455  27F6  3191         	fcall	PL160	;call to abstracted procedure
 11344  1457  1D03               	skipz
 11345  1458  2C6F               	goto	l6982
 11346                           
 11347                           ;ir.c: 713: for (uint8_t i = 0; i < 5; i++) {
 11348  1459  0022               	movlb	2	; select bank2
 11349  145A  01CD               	clrf	IR_KeyAction@i_1452^(0+256)
 11350  145B                     l6970:	
 11351  145B  3005               	movlw	5
 11352  145C  024D               	subwf	IR_KeyAction@i_1452^(0+256),w
 11353  145D  1803               	btfsc	3,0
 11354  145E  2C6A               	goto	l1242
 11355                           
 11356                           ;ir.c: 714: gLedPara.mDayBright[i] = gLedRunPara.mTargetBright[i];
 11357  145F  354D               	lslf	IR_KeyAction@i_1452^(0+256),w
 11358  1460  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11359  1461  0086               	movwf	6
 11360  1462  0187               	clrf	7
 11361  1463  084D               	movf	IR_KeyAction@i_1452^(0+256),w
 11362  1464  00C0               	movwf	??_IR_KeyAction^(0+256)
 11363  1465  30DA               	movlw	218
 11364  1466  26BE  3191         	fcall	PL4	;call to abstracted procedure
 11365  1468  0ACD               	incf	IR_KeyAction@i_1452^(0+256),f
 11366  1469  2C5B               	goto	l6970
 11367  146A                     l1242:	
 11368                           
 11369                           ;ir.c: 715: }
 11370                           ;ir.c: 716: gLedRunPara.mParaChanged = 1;
 11371  146A  0021               	movlb	1	; select bank1
 11372  146B  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 11373                           
 11374                           ;ir.c: 717: IR_ExitSet();
 11375  146C  2652  3191         	fcall	_IR_ExitSet
 11376                           
 11377                           ;ir.c: 718: } else if (ir_state.mSet == 5) {
 11378  146E  2D07               	goto	l7010
 11379  146F                     l6982:	
 11380  146F  27F1  3191         	fcall	PL158	;call to abstracted procedure
 11381  1471  1D03               	skipz
 11382  1472  2D07               	goto	l7010
 11383                           
 11384                           ;ir.c: 719: for (uint8_t i = 0; i < 5; i++) {
 11385  1473  0022               	movlb	2	; select bank2
 11386  1474  01CE               	clrf	IR_KeyAction@i_1453^(0+256)
 11387  1475                     l6986:	
 11388  1475  3005               	movlw	5
 11389  1476  024E               	subwf	IR_KeyAction@i_1453^(0+256),w
 11390  1477  1803               	btfsc	3,0
 11391  1478  2C6A               	goto	l1242
 11392                           
 11393                           ;ir.c: 720: gLedPara.mNightBright[i] = gLedRunPara.mTargetBright[i];
 11394  1479  354E               	lslf	IR_KeyAction@i_1453^(0+256),w
 11395  147A  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11396  147B  0086               	movwf	6
 11397  147C  0187               	clrf	7
 11398  147D  084E               	movf	IR_KeyAction@i_1453^(0+256),w
 11399  147E  00C0               	movwf	??_IR_KeyAction^(0+256)
 11400  147F  30E6               	movlw	230
 11401  1480  26BE  3191         	fcall	PL4	;call to abstracted procedure
 11402  1482  0ACE               	incf	IR_KeyAction@i_1453^(0+256),f
 11403  1483  2C75               	goto	l6986
 11404  1484                     l6998:	
 11405                           
 11406                           ;ir.c: 727: ir_state.mSet = 0;
 11407  1484  301F               	movlw	-225
 11408  1485  05D4               	andwf	_ir_state,f	;volatile
 11409                           
 11410                           ;ir.c: 728: ir_state.tmIdx = 0;
 11411  1486  01D5               	clrf	_ir_state+1	;volatile
 11412                           
 11413                           ;ir.c: 729: ir_state.mSetDelay = 0;
 11414  1487  01DA               	clrf	_ir_state+6	;volatile
 11415                           
 11416                           ;ir.c: 730: Led_StartNotice(3);
 11417  1488  3003               	movlw	3
 11418  1489  2645  3191         	fcall	_Led_StartNotice
 11419                           
 11420                           ;ir.c: 731: break;
 11421  148B  2D07               	goto	l7010
 11422  148C                     l7008:	
 11423  148C  0020               	movlb	0	; select bank0
 11424  148D  084E               	movf	_keyValue,w	;volatile
 11425                           
 11426                           ; Switch size 1, requested type "space"
 11427                           ; Number of cases is 40, Range of values is 4 to 255
 11428                           ; switch strategies available:
 11429                           ; Name         Instructions Cycles
 11430                           ; simple_byte          121    61 (average)
 11431                           ; jumptable            263     9 (fixed)
 11432                           ;	Chosen strategy is simple_byte
 11433  148E  3A04               	xorlw	4	; case 4
 11434  148F  1903               	skipnz
 11435  1490  2BE3               	goto	l6920
 11436  1491  3A01               	xorlw	1	; case 5
 11437  1492  1903               	skipnz
 11438  1493  2BE3               	goto	l6920
 11439  1494  3A02               	xorlw	2	; case 7
 11440  1495  1903               	skipnz
 11441  1496  2C55               	goto	l6966
 11442  1497  3A0F               	xorlw	15	; case 8
 11443  1498  1903               	skipnz
 11444  1499  2BE3               	goto	l6920
 11445  149A  3A01               	xorlw	1	; case 9
 11446  149B  1903               	skipnz
 11447  149C  2BE3               	goto	l6920
 11448  149D  3A03               	xorlw	3	; case 10
 11449  149E  1903               	skipnz
 11450  149F  2BE3               	goto	l6920
 11451  14A0  3A01               	xorlw	1	; case 11
 11452  14A1  1903               	skipnz
 11453  14A2  2BE3               	goto	l6920
 11454  14A3  3A07               	xorlw	7	; case 12
 11455  14A4  1903               	skipnz
 11456  14A5  2BE3               	goto	l1219
 11457  14A6  3A01               	xorlw	1	; case 13
 11458  14A7  1903               	skipnz
 11459  14A8  2BE3               	goto	l1219
 11460  14A9  3A03               	xorlw	3	; case 14
 11461  14AA  1903               	skipnz
 11462  14AB  2BE3               	goto	l6920
 11463  14AC  3A01               	xorlw	1	; case 15
 11464  14AD  1903               	skipnz
 11465  14AE  2BE3               	goto	l6920
 11466  14AF  3A1B               	xorlw	27	; case 20
 11467  14B0  1903               	skipnz
 11468  14B1  29DB               	goto	l1155
 11469  14B2  3A01               	xorlw	1	; case 21
 11470  14B3  1903               	skipnz
 11471  14B4  29DB               	goto	l6650
 11472  14B5  3A03               	xorlw	3	; case 22
 11473  14B6  1903               	skipnz
 11474  14B7  29DB               	goto	l6650
 11475  14B8  3A01               	xorlw	1	; case 23
 11476  14B9  1903               	skipnz
 11477  14BA  29DB               	goto	l6650
 11478  14BB  3A0F               	xorlw	15	; case 24
 11479  14BC  1903               	skipnz
 11480  14BD  2B2C               	goto	l6842
 11481  14BE  3A01               	xorlw	1	; case 25
 11482  14BF  1903               	skipnz
 11483  14C0  2AA4               	goto	l6776
 11484  14C1  3A03               	xorlw	3	; case 26
 11485  14C2  1903               	skipnz
 11486  14C3  2BC0               	goto	l6908
 11487  14C4  3A01               	xorlw	1	; case 27
 11488  14C5  1903               	skipnz
 11489  14C6  2BD1               	goto	l6914
 11490  14C7  3A07               	xorlw	7	; case 28
 11491  14C8  1903               	skipnz
 11492  14C9  29B3               	goto	l6594
 11493  14CA  3A01               	xorlw	1	; case 29
 11494  14CB  1903               	skipnz
 11495  14CC  29C3               	goto	l6608
 11496  14CD  3A03               	xorlw	3	; case 30
 11497  14CE  1903               	skipnz
 11498  14CF  29CB               	goto	l6622
 11499  14D0  3A01               	xorlw	1	; case 31
 11500  14D1  1903               	skipnz
 11501  14D2  29D3               	goto	l6636
 11502  14D3  3A5F               	xorlw	95	; case 64
 11503  14D4  1903               	skipnz
 11504  14D5  2A55               	goto	l6718
 11505  14D6  3A01               	xorlw	1	; case 65
 11506  14D7  1903               	skipnz
 11507  14D8  2A31               	goto	l6698
 11508  14D9  3A05               	xorlw	5	; case 68
 11509  14DA  1903               	skipnz
 11510  14DB  2A31               	goto	l6698
 11511  14DC  3A01               	xorlw	1	; case 69
 11512  14DD  1903               	skipnz
 11513  14DE  2A31               	goto	l6698
 11514  14DF  3A0D               	xorlw	13	; case 72
 11515  14E0  1903               	skipnz
 11516  14E1  2A55               	goto	l6718
 11517  14E2  3A01               	xorlw	1	; case 73
 11518  14E3  1903               	skipnz
 11519  14E4  2A55               	goto	l6718
 11520  14E5  3A05               	xorlw	5	; case 76
 11521  14E6  1903               	skipnz
 11522  14E7  2A62               	goto	l6738
 11523  14E8  3A01               	xorlw	1	; case 77
 11524  14E9  1903               	skipnz
 11525  14EA  2A62               	goto	l6738
 11526  14EB  3A1D               	xorlw	29	; case 80
 11527  14EC  1903               	skipnz
 11528  14ED  2A62               	goto	l1178
 11529  14EE  3A01               	xorlw	1	; case 81
 11530  14EF  1903               	skipnz
 11531  14F0  2A62               	goto	l6738
 11532  14F1  3A05               	xorlw	5	; case 84
 11533  14F2  1903               	skipnz
 11534  14F3  2A55               	goto	l1172
 11535  14F4  3A01               	xorlw	1	; case 85
 11536  14F5  1903               	skipnz
 11537  14F6  2A55               	goto	l6718
 11538  14F7  3A0D               	xorlw	13	; case 88
 11539  14F8  1903               	skipnz
 11540  14F9  2A31               	goto	l1165
 11541  14FA  3A01               	xorlw	1	; case 89
 11542  14FB  1903               	skipnz
 11543  14FC  2A31               	goto	l6698
 11544  14FD  3A05               	xorlw	5	; case 92
 11545  14FE  1903               	skipnz
 11546  14FF  29FC               	goto	l6664
 11547  1500  3A01               	xorlw	1	; case 93
 11548  1501  1903               	skipnz
 11549  1502  2A13               	goto	l6674
 11550  1503  3AA2               	xorlw	162	; case 255
 11551  1504  1903               	skipnz
 11552  1505  2C84               	goto	l6998
 11553  1506  2D07               	goto	l7010
 11554  1507                     l7010:	
 11555                           
 11556                           ;ir.c: 735: TMR2_EnableInterrupt();
 11557  1507  26BB               	fcall	_TMR2_EnableInterrupt
 11558                           
 11559                           ;ir.c: 736: keyValue = 0x00;
 11560  1508  0020               	movlb	0	; select bank0
 11561  1509  01CE               	clrf	_keyValue	;volatile
 11562  150A  0008               	return
 11563  150B                     __end_of_IR_KeyAction:	
 11564  150B                     __ptext42:	
 11565 ;; *************** function _Util_DecValue *****************
 11566 ;; Defined at:
 11567 ;;		line 15 in file "user/src/util.c"
 11568 ;; Parameters:    Size  Location     Type
 11569 ;;  pSrc            2   13[BANK0 ] PTR unsigned int 
 11570 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), gLedPara(117), 
 11571 ;;  min             2   15[BANK0 ] unsigned int 
 11572 ;;  delta           2   17[BANK0 ] unsigned int 
 11573 ;; Auto vars:     Size  Location     Type
 11574 ;;		None
 11575 ;; Return value:  Size  Location     Type
 11576 ;;                  1    wreg      void 
 11577 ;; Registers used:
 11578 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11579 ;; Tracked objects:
 11580 ;;		On entry : 1F/0
 11581 ;;		On exit  : 1F/0
 11582 ;;		Unchanged: 0/0
 11583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11584 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11586 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11587 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11588 ;;Total ram usage:       10 bytes
 11589 ;; Hardware stack levels used:    1
 11590 ;; Hardware stack levels required when called:    7
 11591 ;; This function calls:
 11592 ;;		Nothing
 11593 ;; This function is called by:
 11594 ;;		_IR_KeyAction
 11595 ;; This function uses a non-reentrant model
 11596 ;;
 11597                           
 11598                           
 11599                           ;psect for function _Util_DecValue
 11600  150B                     _Util_DecValue:	
 11601                           
 11602                           ;util.c: 17: if( *pSrc > min + delta )
 11603                           
 11604                           ;incstack = 0
 11605                           ; Regs used in _Util_DecValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 11606  150B  082D               	movf	Util_DecValue@pSrc,w
 11607  150C  0086               	movwf	6
 11608  150D  082E               	movf	Util_DecValue@pSrc+1,w
 11609  150E  0087               	movwf	7
 11610  150F  3F40               	moviw [0]fsr1
 11611  1510  00B3               	movwf	??_Util_DecValue
 11612  1511  3F41               	moviw [1]fsr1
 11613  1512  00B4               	movwf	??_Util_DecValue+1
 11614  1513  0831               	movf	Util_DecValue@delta,w
 11615  1514  072F               	addwf	Util_DecValue@min,w
 11616  1515  00B5               	movwf	??_Util_DecValue+2
 11617  1516  0832               	movf	Util_DecValue@delta+1,w
 11618  1517  3D30               	addwfc	Util_DecValue@min+1,w
 11619  1518  00B6               	movwf	??_Util_DecValue+3
 11620  1519  0834               	movf	??_Util_DecValue+1,w
 11621  151A  0236               	subwf	??_Util_DecValue+3,w
 11622  151B  1D03               	skipz
 11623  151C  2D1F               	goto	u5765
 11624  151D  0833               	movf	??_Util_DecValue,w
 11625  151E  0235               	subwf	??_Util_DecValue+2,w
 11626  151F                     u5765:	
 11627                           
 11628                           ;util.c: 18: {
 11629                           ;util.c: 19: (*pSrc) -= delta;
 11630  151F  082D               	movf	Util_DecValue@pSrc,w
 11631  1520  0086               	movwf	6
 11632  1521  082E               	movf	Util_DecValue@pSrc+1,w
 11633  1522  0087               	movwf	7
 11634  1523  1803               	skipnc
 11635  1524  2D2C               	goto	L8
 11636  1525  0831               	movf	Util_DecValue@delta,w
 11637  1526  0281               	subwf	1,f
 11638  1527  3141               	addfsr 1,1
 11639  1528  0832               	movf	Util_DecValue@delta+1,w
 11640  1529  3B81               	subwfb	1,f
 11641  152A  317F               	addfsr 1,-1
 11642                           
 11643                           ;util.c: 20: }
 11644  152B  0008               	return
 11645  152C                     L8:	
 11646                           ;util.c: 21: else
 11647                           ;util.c: 22: {
 11648                           ;util.c: 23: *pSrc = min;
 11649                           
 11650  152C  082F               	movf	Util_DecValue@min,w
 11651  152D  3FC0               	movwi [0]fsr1
 11652  152E  0830               	movf	Util_DecValue@min+1,w
 11653  152F  3FC1               	movwi [1]fsr1
 11654  1530  0008               	return
 11655  1531                     __end_of_Util_DecValue:	
 11656  1531                     __ptext41:	
 11657 ;; *************** function _Util_IncValue *****************
 11658 ;; Defined at:
 11659 ;;		line 3 in file "user/src/util.c"
 11660 ;; Parameters:    Size  Location     Type
 11661 ;;  pSrc            2   13[BANK0 ] PTR unsigned int 
 11662 ;;		 -> gLedRunPara.mCurrentBright(10), gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), 
 11663 ;;		 -> gLedPara(117), 
 11664 ;;  max             2   15[BANK0 ] unsigned int 
 11665 ;;  delta           2   17[BANK0 ] unsigned int 
 11666 ;; Auto vars:     Size  Location     Type
 11667 ;;		None
 11668 ;; Return value:  Size  Location     Type
 11669 ;;                  1    wreg      void 
 11670 ;; Registers used:
 11671 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11672 ;; Tracked objects:
 11673 ;;		On entry : 1F/0
 11674 ;;		On exit  : 1F/0
 11675 ;;		Unchanged: 0/0
 11676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11677 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;Total ram usage:       10 bytes
 11682 ;; Hardware stack levels used:    1
 11683 ;; Hardware stack levels required when called:    7
 11684 ;; This function calls:
 11685 ;;		Nothing
 11686 ;; This function is called by:
 11687 ;;		_Led_AutoRun
 11688 ;;		_IR_KeyAction
 11689 ;; This function uses a non-reentrant model
 11690 ;;
 11691                           
 11692                           
 11693                           ;psect for function _Util_IncValue
 11694  1531                     _Util_IncValue:	
 11695                           
 11696                           ;util.c: 5: if( *pSrc + delta < max )
 11697                           
 11698                           ;incstack = 0
 11699                           ; Regs used in _Util_IncValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 11700  1531  082D               	movf	Util_IncValue@pSrc,w
 11701  1532  0086               	movwf	6
 11702  1533  082E               	movf	Util_IncValue@pSrc+1,w
 11703  1534  0087               	movwf	7
 11704  1535  3F40               	moviw [0]fsr1
 11705  1536  00B3               	movwf	??_Util_IncValue
 11706  1537  3F41               	moviw [1]fsr1
 11707  1538  00B4               	movwf	??_Util_IncValue+1
 11708  1539  0831               	movf	Util_IncValue@delta,w
 11709  153A  0733               	addwf	??_Util_IncValue,w
 11710  153B  00B5               	movwf	??_Util_IncValue+2
 11711  153C  0832               	movf	Util_IncValue@delta+1,w
 11712  153D  3D34               	addwfc	??_Util_IncValue+1,w
 11713  153E  00B6               	movwf	??_Util_IncValue+3
 11714  153F  0830               	movf	Util_IncValue@max+1,w
 11715  1540  0236               	subwf	??_Util_IncValue+3,w
 11716  1541  1D03               	skipz
 11717  1542  2D45               	goto	u5645
 11718  1543  082F               	movf	Util_IncValue@max,w
 11719  1544  0235               	subwf	??_Util_IncValue+2,w
 11720  1545                     u5645:	
 11721                           
 11722                           ;util.c: 6: {
 11723                           ;util.c: 7: (*pSrc) += delta;
 11724  1545  082D               	movf	Util_IncValue@pSrc,w
 11725  1546  0086               	movwf	6
 11726  1547  082E               	movf	Util_IncValue@pSrc+1,w
 11727  1548  0087               	movwf	7
 11728  1549  1803               	skipnc
 11729  154A  2D52               	goto	L7
 11730  154B  0831               	movf	Util_IncValue@delta,w
 11731  154C  0781               	addwf	1,f
 11732  154D  3141               	addfsr 1,1
 11733  154E  0832               	movf	Util_IncValue@delta+1,w
 11734  154F  3D81               	addwfc	1,f
 11735  1550  317F               	addfsr 1,-1
 11736                           
 11737                           ;util.c: 8: }
 11738  1551  0008               	return
 11739  1552                     L7:	
 11740                           ;util.c: 9: else
 11741                           ;util.c: 10: {
 11742                           ;util.c: 11: *pSrc = max;
 11743                           
 11744  1552  082F               	movf	Util_IncValue@max,w
 11745  1553  3FC0               	movwi [0]fsr1
 11746  1554  0830               	movf	Util_IncValue@max+1,w
 11747  1555  3FC1               	movwi [1]fsr1
 11748  1556  0008               	return
 11749  1557                     __end_of_Util_IncValue:	
 11750  1557                     __ptext61:	
 11751 ;; *************** function _Audio_StopSound *****************
 11752 ;; Defined at:
 11753 ;;		line 15 in file "user/src/audio.c"
 11754 ;; Parameters:    Size  Location     Type
 11755 ;;		None
 11756 ;; Auto vars:     Size  Location     Type
 11757 ;;  checksum        1   14[BANK0 ] unsigned char 
 11758 ;; Return value:  Size  Location     Type
 11759 ;;                  1    wreg      void 
 11760 ;; Registers used:
 11761 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11762 ;; Tracked objects:
 11763 ;;		On entry : 0/0
 11764 ;;		On exit  : 1F/0
 11765 ;;		Unchanged: 0/0
 11766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11770 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;Total ram usage:        1 bytes
 11772 ;; Hardware stack levels used:    1
 11773 ;; Hardware stack levels required when called:    8
 11774 ;; This function calls:
 11775 ;;		_EUSART_Write
 11776 ;; This function is called by:
 11777 ;;		_Led_Initialize
 11778 ;;		_IR_KeyAction
 11779 ;; This function uses a non-reentrant model
 11780 ;;
 11781                           
 11782                           
 11783                           ;psect for function _Audio_StopSound
 11784  1557                     _Audio_StopSound:	
 11785                           
 11786                           ;audio.c: 17: uint8_t checksum = 0x00;
 11787                           
 11788                           ;incstack = 0
 11789                           ; Regs used in _Audio_StopSound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11790  1557  0020               	movlb	0	; select bank0
 11791  1558  307E               	movlw	126
 11792  1559  01AE               	clrf	Audio_StopSound@checksum
 11793                           
 11794                           ;audio.c: 18: EUSART_Write ( 0x7E );
 11795  155A  262E  3191         	fcall	_EUSART_Write
 11796                           
 11797                           ;audio.c: 19: checksum ^= EUSART_Write ( 0x03 );
 11798  155C  3003               	movlw	3
 11799  155D  262E  3191         	fcall	_EUSART_Write
 11800  155F  06AE               	xorwf	Audio_StopSound@checksum,f
 11801                           
 11802                           ;audio.c: 20: checksum ^= EUSART_Write ( 0x1E );
 11803  1560  301E               	movlw	30
 11804  1561  262E  3191         	fcall	_EUSART_Write
 11805  1563  06AE               	xorwf	Audio_StopSound@checksum,f
 11806                           
 11807                           ;audio.c: 21: EUSART_Write ( checksum );
 11808  1564  082E               	movf	Audio_StopSound@checksum,w
 11809  1565  262E  3191         	fcall	_EUSART_Write
 11810                           
 11811                           ;audio.c: 22: EUSART_Write ( 0xEF );
 11812  1567  30EF               	movlw	239
 11813  1568  2E2E               	ljmp	_EUSART_Write
 11814  1569                     __end_of_Audio_StopSound:	
 11815  1569                     __ptext66:	
 11816 ;; *************** function ___wmul *****************
 11817 ;; Defined at:
 11818 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11819 ;; Parameters:    Size  Location     Type
 11820 ;;  multiplier      2   13[BANK0 ] unsigned int 
 11821 ;;  multiplicand    2   15[BANK0 ] unsigned int 
 11822 ;; Auto vars:     Size  Location     Type
 11823 ;;  product         2   17[BANK0 ] unsigned int 
 11824 ;; Return value:  Size  Location     Type
 11825 ;;                  2   13[BANK0 ] unsigned int 
 11826 ;; Registers used:
 11827 ;;		wreg, status,2, status,0
 11828 ;; Tracked objects:
 11829 ;;		On entry : 1F/0
 11830 ;;		On exit  : 1F/0
 11831 ;;		Unchanged: 0/0
 11832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11833 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11834 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11836 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11837 ;;Total ram usage:        6 bytes
 11838 ;; Hardware stack levels used:    1
 11839 ;; Hardware stack levels required when called:    7
 11840 ;; This function calls:
 11841 ;;		Nothing
 11842 ;; This function is called by:
 11843 ;;		_Audio_GetValue
 11844 ;;		_Led_InitPara
 11845 ;;		_Led_Initialize
 11846 ;;		_Led_CheckAutoStatus
 11847 ;;		_IR_KeyAction
 11848 ;; This function uses a non-reentrant model
 11849 ;;
 11850                           
 11851                           
 11852                           ;psect for function ___wmul
 11853  1569                     ___wmul:	
 11854                           
 11855                           ;incstack = 0
 11856                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11857  1569  01B1               	clrf	___wmul@product
 11858  156A  01B2               	clrf	___wmul@product+1
 11859  156B                     l6130:	
 11860  156B  1C2D               	btfss	___wmul@multiplier,0
 11861  156C  2D71               	goto	l6134
 11862  156D  082F               	movf	___wmul@multiplicand,w
 11863  156E  07B1               	addwf	___wmul@product,f
 11864  156F  0830               	movf	___wmul@multiplicand+1,w
 11865  1570  3DB2               	addwfc	___wmul@product+1,f
 11866  1571                     l6134:	
 11867  1571  35AF               	lslf	___wmul@multiplicand,f
 11868  1572  0DB0               	rlf	___wmul@multiplicand+1,f
 11869  1573  36AE               	lsrf	___wmul@multiplier+1,f
 11870  1574  0CAD               	rrf	___wmul@multiplier,f
 11871  1575  082D               	movf	___wmul@multiplier,w
 11872  1576  042E               	iorwf	___wmul@multiplier+1,w
 11873  1577  1D03               	btfss	3,2
 11874  1578  2D6B               	goto	l6130
 11875  1579  0832               	movf	___wmul@product+1,w
 11876  157A  00AE               	movwf	?___wmul+1
 11877  157B  0831               	movf	___wmul@product,w
 11878  157C  00AD               	movwf	?___wmul
 11879  157D  0008               	return
 11880  157E                     __end_of___wmul:	
 11881  157E                     __ptext47:	
 11882 ;; *************** function _IR_GetIndex *****************
 11883 ;; Defined at:
 11884 ;;		line 10 in file "user/src/ir.c"
 11885 ;; Parameters:    Size  Location     Type
 11886 ;;  keynum          1    wreg     unsigned char 
 11887 ;; Auto vars:     Size  Location     Type
 11888 ;;  keynum          1   14[BANK0 ] unsigned char 
 11889 ;;  idx             1   13[BANK0 ] unsigned char 
 11890 ;; Return value:  Size  Location     Type
 11891 ;;                  1    wreg      unsigned char 
 11892 ;; Registers used:
 11893 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11894 ;; Tracked objects:
 11895 ;;		On entry : 1F/0
 11896 ;;		On exit  : 1F/0
 11897 ;;		Unchanged: 0/0
 11898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11903 ;;Total ram usage:        2 bytes
 11904 ;; Hardware stack levels used:    1
 11905 ;; Hardware stack levels required when called:    7
 11906 ;; This function calls:
 11907 ;;		Nothing
 11908 ;; This function is called by:
 11909 ;;		_IR_KeyAction
 11910 ;; This function uses a non-reentrant model
 11911 ;;
 11912                           
 11913                           
 11914                           ;psect for function _IR_GetIndex
 11915  157E                     _IR_GetIndex:	
 11916                           
 11917                           ;incstack = 0
 11918                           ; Regs used in _IR_GetIndex: [wreg-fsr0h+status,2+status,0]
 11919                           ;IR_GetIndex@keynum stored from wreg
 11920  157E  00AE               	movwf	IR_GetIndex@keynum
 11921                           
 11922                           ;ir.c: 11: uint8_t idx = 0xFF;
 11923  157F  30FF               	movlw	255
 11924  1580  00AD               	movwf	IR_GetIndex@idx
 11925                           
 11926                           ;ir.c: 12: switch (keynum) {
 11927  1581  2D9D               	goto	l6492
 11928  1582                     l6472:	
 11929                           
 11930                           ;ir.c: 14: case 0x54:
 11931                           ;ir.c: 15: case 0x50:
 11932                           ;ir.c: 16: idx = 0;
 11933  1582  01AD               	clrf	IR_GetIndex@idx
 11934                           
 11935                           ;ir.c: 17: break;
 11936  1583  2DFF               	goto	l6494
 11937  1584                     l901:	
 11938                           
 11939                           ;ir.c: 19: case 0x55:
 11940                           ;ir.c: 20: case 0x51:
 11941                           ;ir.c: 21: idx = 1;
 11942  1584  01AD               	clrf	IR_GetIndex@idx
 11943  1585  0AAD               	incf	IR_GetIndex@idx,f
 11944                           
 11945                           ;ir.c: 22: break;
 11946  1586  2DFF               	goto	l6494
 11947  1587                     l6474:	
 11948                           
 11949                           ;ir.c: 24: case 0x49:
 11950                           ;ir.c: 25: case 0x4D:
 11951                           ;ir.c: 26: idx = 2;
 11952  1587  3002               	movlw	2
 11953  1588  2D9B               	goto	L17
 11954  1589                     l6476:	
 11955                           ;ir.c: 27: break;
 11956                           
 11957                           
 11958                           ;ir.c: 29: case 0x44:
 11959                           ;ir.c: 30: case 0x4C:
 11960                           ;ir.c: 31: idx = 3;
 11961  1589  3003               	movlw	3
 11962  158A  2D9B               	goto	L17
 11963  158B                     l6478:	
 11964                           ;ir.c: 32: break;
 11965                           
 11966                           
 11967                           ;ir.c: 34: case 0x40:
 11968                           ;ir.c: 35: idx = 4;
 11969  158B  3004               	movlw	4
 11970  158C  2D9B               	goto	L17
 11971  158D                     l912:	
 11972                           ;ir.c: 36: break;
 11973                           
 11974  158D                     l6480:	
 11975                           
 11976                           ;ir.c: 38: case 0x1D:
 11977                           ;ir.c: 39: case 0x1E:
 11978                           ;ir.c: 40: case 0x1F:
 11979                           ;ir.c: 41: idx = keynum - 0x1C + 1;
 11980  158D  082E               	movf	IR_GetIndex@keynum,w
 11981  158E  3EE5               	addlw	229
 11982  158F  2D9B               	goto	L17
 11983  1590                     l916:	
 11984                           ;ir.c: 42: break;
 11985                           
 11986  1590                     l6482:	
 11987                           
 11988                           ;ir.c: 44: case 0x15:
 11989                           ;ir.c: 45: case 0x16:
 11990                           ;ir.c: 46: case 0x17:
 11991                           ;ir.c: 47: idx = keynum - 0x14 + 5;
 11992  1590  082E               	movf	IR_GetIndex@keynum,w
 11993  1591  3EF1               	addlw	241
 11994  1592  2D9B               	goto	L17
 11995  1593                     l920:	
 11996                           ;ir.c: 48: break;
 11997                           
 11998  1593                     l6484:	
 11999                           
 12000                           ;ir.c: 50: case 0x0D:
 12001                           ;ir.c: 51: case 0x0E:
 12002                           ;ir.c: 52: case 0x0F:
 12003                           ;ir.c: 53: idx = keynum - 0x0C;
 12004  1593  082E               	movf	IR_GetIndex@keynum,w
 12005  1594  3EF4               	addlw	244
 12006  1595  2D9B               	goto	L17
 12007  1596                     l924:	
 12008                           ;ir.c: 54: break;
 12009                           
 12010  1596                     l6486:	
 12011                           
 12012                           ;ir.c: 56: case 0x09:
 12013                           ;ir.c: 57: case 0x0A:
 12014                           ;ir.c: 58: case 0x0B:
 12015                           ;ir.c: 59: idx = keynum - 0x08 + 4;
 12016  1596  082E               	movf	IR_GetIndex@keynum,w
 12017  1597  3EFC               	addlw	252
 12018  1598  2D9B               	goto	L17
 12019  1599                     l6488:	
 12020                           ;ir.c: 60: break;
 12021                           
 12022                           
 12023                           ;ir.c: 62: case 0x05:
 12024                           ;ir.c: 63: idx = keynum - 0x04 + 8;
 12025  1599  082E               	movf	IR_GetIndex@keynum,w
 12026  159A  3E04               	addlw	4
 12027  159B                     L17:	
 12028  159B  00AD               	movwf	IR_GetIndex@idx
 12029                           
 12030                           ;ir.c: 64: break;
 12031  159C  2DFF               	goto	l6494
 12032  159D                     l6492:	
 12033  159D  082E               	movf	IR_GetIndex@keynum,w
 12034                           
 12035                           ; Switch size 1, requested type "space"
 12036                           ; Number of cases is 32, Range of values is 4 to 89
 12037                           ; switch strategies available:
 12038                           ; Name         Instructions Cycles
 12039                           ; simple_byte           97    49 (average)
 12040                           ; direct_byte          181     9 (fixed)
 12041                           ; jumptable            263     9 (fixed)
 12042                           ;	Chosen strategy is simple_byte
 12043  159E  3A04               	xorlw	4	; case 4
 12044  159F  1903               	skipnz
 12045  15A0  2D99               	goto	l6488
 12046  15A1  3A01               	xorlw	1	; case 5
 12047  15A2  1903               	skipnz
 12048  15A3  2D99               	goto	l6488
 12049  15A4  3A0D               	xorlw	13	; case 8
 12050  15A5  1903               	skipnz
 12051  15A6  2D96               	goto	l924
 12052  15A7  3A01               	xorlw	1	; case 9
 12053  15A8  1903               	skipnz
 12054  15A9  2D96               	goto	l6486
 12055  15AA  3A03               	xorlw	3	; case 10
 12056  15AB  1903               	skipnz
 12057  15AC  2D96               	goto	l6486
 12058  15AD  3A01               	xorlw	1	; case 11
 12059  15AE  1903               	skipnz
 12060  15AF  2D96               	goto	l6486
 12061  15B0  3A07               	xorlw	7	; case 12
 12062  15B1  1903               	skipnz
 12063  15B2  2D93               	goto	l920
 12064  15B3  3A01               	xorlw	1	; case 13
 12065  15B4  1903               	skipnz
 12066  15B5  2D93               	goto	l6484
 12067  15B6  3A03               	xorlw	3	; case 14
 12068  15B7  1903               	skipnz
 12069  15B8  2D93               	goto	l6484
 12070  15B9  3A01               	xorlw	1	; case 15
 12071  15BA  1903               	skipnz
 12072  15BB  2D93               	goto	l6484
 12073  15BC  3A1B               	xorlw	27	; case 20
 12074  15BD  1903               	skipnz
 12075  15BE  2D90               	goto	l916
 12076  15BF  3A01               	xorlw	1	; case 21
 12077  15C0  1903               	skipnz
 12078  15C1  2D90               	goto	l6482
 12079  15C2  3A03               	xorlw	3	; case 22
 12080  15C3  1903               	skipnz
 12081  15C4  2D90               	goto	l6482
 12082  15C5  3A01               	xorlw	1	; case 23
 12083  15C6  1903               	skipnz
 12084  15C7  2D90               	goto	l6482
 12085  15C8  3A0B               	xorlw	11	; case 28
 12086  15C9  1903               	skipnz
 12087  15CA  2D8D               	goto	l912
 12088  15CB  3A01               	xorlw	1	; case 29
 12089  15CC  1903               	skipnz
 12090  15CD  2D8D               	goto	l6480
 12091  15CE  3A03               	xorlw	3	; case 30
 12092  15CF  1903               	skipnz
 12093  15D0  2D8D               	goto	l6480
 12094  15D1  3A01               	xorlw	1	; case 31
 12095  15D2  1903               	skipnz
 12096  15D3  2D8D               	goto	l6480
 12097  15D4  3A5F               	xorlw	95	; case 64
 12098  15D5  1903               	skipnz
 12099  15D6  2D8B               	goto	l6478
 12100  15D7  3A01               	xorlw	1	; case 65
 12101  15D8  1903               	skipnz
 12102  15D9  2D8B               	goto	l6478
 12103  15DA  3A05               	xorlw	5	; case 68
 12104  15DB  1903               	skipnz
 12105  15DC  2D89               	goto	l6476
 12106  15DD  3A01               	xorlw	1	; case 69
 12107  15DE  1903               	skipnz
 12108  15DF  2D87               	goto	l6474
 12109  15E0  3A0D               	xorlw	13	; case 72
 12110  15E1  1903               	skipnz
 12111  15E2  2D89               	goto	l6476
 12112  15E3  3A01               	xorlw	1	; case 73
 12113  15E4  1903               	skipnz
 12114  15E5  2D87               	goto	l6474
 12115  15E6  3A05               	xorlw	5	; case 76
 12116  15E7  1903               	skipnz
 12117  15E8  2D89               	goto	l6476
 12118  15E9  3A01               	xorlw	1	; case 77
 12119  15EA  1903               	skipnz
 12120  15EB  2D87               	goto	l6474
 12121  15EC  3A1D               	xorlw	29	; case 80
 12122  15ED  1903               	skipnz
 12123  15EE  2D82               	goto	l6472
 12124  15EF  3A01               	xorlw	1	; case 81
 12125  15F0  1903               	skipnz
 12126  15F1  2D84               	goto	l901
 12127  15F2  3A05               	xorlw	5	; case 84
 12128  15F3  1903               	skipnz
 12129  15F4  2D82               	goto	l6472
 12130  15F5  3A01               	xorlw	1	; case 85
 12131  15F6  1903               	skipnz
 12132  15F7  2D84               	goto	l901
 12133  15F8  3A0D               	xorlw	13	; case 88
 12134  15F9  1903               	skipnz
 12135  15FA  2D82               	goto	l6472
 12136  15FB  3A01               	xorlw	1	; case 89
 12137  15FC  1903               	skipnz
 12138  15FD  2D84               	goto	l901
 12139  15FE  2DFF               	goto	l6494
 12140  15FF                     l6494:	
 12141                           
 12142                           ;ir.c: 68: return idx;
 12143  15FF  082D               	movf	IR_GetIndex@idx,w
 12144  1600  0008               	return
 12145  1601                     __end_of_IR_GetIndex:	
 12146  1601                     __ptext62:	
 12147 ;; *************** function _Audio_SetVolume *****************
 12148 ;; Defined at:
 12149 ;;		line 48 in file "user/src/audio.c"
 12150 ;; Parameters:    Size  Location     Type
 12151 ;;  vol             1    wreg     unsigned char 
 12152 ;; Auto vars:     Size  Location     Type
 12153 ;;  vol             1   14[BANK0 ] unsigned char 
 12154 ;;  checksum        1   15[BANK0 ] unsigned char 
 12155 ;; Return value:  Size  Location     Type
 12156 ;;                  1    wreg      void 
 12157 ;; Registers used:
 12158 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12159 ;; Tracked objects:
 12160 ;;		On entry : 1F/0
 12161 ;;		On exit  : 1F/0
 12162 ;;		Unchanged: 0/0
 12163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12165 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12167 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12168 ;;Total ram usage:        2 bytes
 12169 ;; Hardware stack levels used:    1
 12170 ;; Hardware stack levels required when called:    8
 12171 ;; This function calls:
 12172 ;;		_EUSART_Write
 12173 ;; This function is called by:
 12174 ;;		_Led_Initialize
 12175 ;;		_IR_KeyAction
 12176 ;; This function uses a non-reentrant model
 12177 ;;
 12178                           
 12179                           
 12180                           ;psect for function _Audio_SetVolume
 12181  1601                     _Audio_SetVolume:	
 12182                           
 12183                           ;incstack = 0
 12184                           ; Regs used in _Audio_SetVolume: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12185                           ;Audio_SetVolume@vol stored from wreg
 12186  1601  00AE               	movwf	Audio_SetVolume@vol
 12187  1602  307E               	movlw	126
 12188                           
 12189                           ;audio.c: 50: uint8_t checksum = 0x00;
 12190  1603  01AF               	clrf	Audio_SetVolume@checksum
 12191                           
 12192                           ;audio.c: 51: EUSART_Write ( 0x7E );
 12193  1604  262E  3191         	fcall	_EUSART_Write
 12194                           
 12195                           ;audio.c: 52: checksum ^= EUSART_Write ( 0x04 );
 12196  1606  3004               	movlw	4
 12197  1607  262E  3191         	fcall	_EUSART_Write
 12198  1609  06AF               	xorwf	Audio_SetVolume@checksum,f
 12199                           
 12200                           ;audio.c: 53: checksum ^= EUSART_Write ( 0x31 );
 12201  160A  3031               	movlw	49
 12202  160B  262E  3191         	fcall	_EUSART_Write
 12203  160D  06AF               	xorwf	Audio_SetVolume@checksum,f
 12204                           
 12205                           ;audio.c: 54: checksum ^= EUSART_Write ( vol );
 12206  160E  082E               	movf	Audio_SetVolume@vol,w
 12207  160F  262E  3191         	fcall	_EUSART_Write
 12208  1611  06AF               	xorwf	Audio_SetVolume@checksum,f
 12209                           
 12210                           ;audio.c: 55: EUSART_Write ( checksum );
 12211  1612  082F               	movf	Audio_SetVolume@checksum,w
 12212  1613  262E  3191         	fcall	_EUSART_Write
 12213                           
 12214                           ;audio.c: 56: EUSART_Write ( 0xEF );
 12215  1615  30EF               	movlw	239
 12216  1616  2E2E               	ljmp	_EUSART_Write
 12217  1617                     __end_of_Audio_SetVolume:	
 12218  1617                     __ptext63:	
 12219 ;; *************** function _Audio_SetPlayMode *****************
 12220 ;; Defined at:
 12221 ;;		line 37 in file "user/src/audio.c"
 12222 ;; Parameters:    Size  Location     Type
 12223 ;;  type            1    wreg     unsigned char 
 12224 ;; Auto vars:     Size  Location     Type
 12225 ;;  type            1   14[BANK0 ] unsigned char 
 12226 ;;  checksum        1   15[BANK0 ] unsigned char 
 12227 ;; Return value:  Size  Location     Type
 12228 ;;                  1    wreg      void 
 12229 ;; Registers used:
 12230 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12231 ;; Tracked objects:
 12232 ;;		On entry : 0/0
 12233 ;;		On exit  : 1F/0
 12234 ;;		Unchanged: 0/0
 12235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12237 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12239 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;Total ram usage:        2 bytes
 12241 ;; Hardware stack levels used:    1
 12242 ;; Hardware stack levels required when called:    8
 12243 ;; This function calls:
 12244 ;;		_EUSART_Write
 12245 ;; This function is called by:
 12246 ;;		_Led_Initialize
 12247 ;; This function uses a non-reentrant model
 12248 ;;
 12249                           
 12250                           
 12251                           ;psect for function _Audio_SetPlayMode
 12252  1617                     _Audio_SetPlayMode:	
 12253                           
 12254                           ;incstack = 0
 12255                           ; Regs used in _Audio_SetPlayMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12256                           ;Audio_SetPlayMode@type stored from wreg
 12257  1617  0020               	movlb	0	; select bank0
 12258  1618  00AE               	movwf	Audio_SetPlayMode@type
 12259  1619  307E               	movlw	126
 12260                           
 12261                           ;audio.c: 39: uint8_t checksum = 0x00;
 12262  161A  01AF               	clrf	Audio_SetPlayMode@checksum
 12263                           
 12264                           ;audio.c: 40: EUSART_Write ( 0x7E );
 12265  161B  262E  3191         	fcall	_EUSART_Write
 12266                           
 12267                           ;audio.c: 41: checksum ^= EUSART_Write ( 0x04 );
 12268  161D  3004               	movlw	4
 12269  161E  262E  3191         	fcall	_EUSART_Write
 12270  1620  06AF               	xorwf	Audio_SetPlayMode@checksum,f
 12271                           
 12272                           ;audio.c: 42: checksum ^= EUSART_Write ( 0x33 );
 12273  1621  3033               	movlw	51
 12274  1622  262E  3191         	fcall	_EUSART_Write
 12275  1624  06AF               	xorwf	Audio_SetPlayMode@checksum,f
 12276                           
 12277                           ;audio.c: 43: checksum ^= EUSART_Write ( type );
 12278  1625  082E               	movf	Audio_SetPlayMode@type,w
 12279  1626  262E  3191         	fcall	_EUSART_Write
 12280  1628  06AF               	xorwf	Audio_SetPlayMode@checksum,f
 12281                           
 12282                           ;audio.c: 44: EUSART_Write ( checksum );
 12283  1629  082F               	movf	Audio_SetPlayMode@checksum,w
 12284  162A  262E  3191         	fcall	_EUSART_Write
 12285                           
 12286                           ;audio.c: 45: EUSART_Write ( 0xEF );
 12287  162C  30EF               	movlw	239
 12288  162D  2E2E               	ljmp	_EUSART_Write
 12289  162E                     __end_of_Audio_SetPlayMode:	
 12290  162E                     __ptext64:	
 12291 ;; *************** function _EUSART_Write *****************
 12292 ;; Defined at:
 12293 ;;		line 32 in file "driver/src/eusart.c"
 12294 ;; Parameters:    Size  Location     Type
 12295 ;;  byte            1    wreg     unsigned char 
 12296 ;; Auto vars:     Size  Location     Type
 12297 ;;  byte            1   13[BANK0 ] unsigned char 
 12298 ;; Return value:  Size  Location     Type
 12299 ;;                  1    wreg      unsigned char 
 12300 ;; Registers used:
 12301 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12302 ;; Tracked objects:
 12303 ;;		On entry : 1F/0
 12304 ;;		On exit  : 1F/0
 12305 ;;		Unchanged: 0/0
 12306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12308 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;Total ram usage:        1 bytes
 12312 ;; Hardware stack levels used:    1
 12313 ;; Hardware stack levels required when called:    7
 12314 ;; This function calls:
 12315 ;;		Nothing
 12316 ;; This function is called by:
 12317 ;;		_Audio_StopSound
 12318 ;;		_Audio_SetPlayMode
 12319 ;;		_Audio_SetVolume
 12320 ;; This function uses a non-reentrant model
 12321 ;;
 12322                           
 12323                           
 12324                           ;psect for function _EUSART_Write
 12325  162E                     _EUSART_Write:	
 12326                           
 12327                           ;incstack = 0
 12328                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 12329                           ;EUSART_Write@byte stored from wreg
 12330  162E  00AD               	movwf	EUSART_Write@byte
 12331  162F                     l6012:	
 12332                           ;eusart.c: 34: while ( 0 == txRemain );
 12333                           
 12334  162F  085E               	movf	_txRemain,w
 12335  1630  1903               	btfsc	3,2
 12336  1631  2E2F               	goto	l6012
 12337                           
 12338                           ;eusart.c: 36: if ( !PIE1bits.TXIE )
 12339  1632  0021               	movlb	1	; select bank1
 12340  1633  1A11               	btfsc	17,4	;volatile
 12341  1634  2E3A               	goto	l95
 12342                           
 12343                           ;eusart.c: 37: {
 12344                           ;eusart.c: 38: TXREG = byte;
 12345  1635  0020               	movlb	0	; select bank0
 12346  1636  082D               	movf	EUSART_Write@byte,w
 12347  1637  0023               	movlb	3	; select bank3
 12348  1638  009A               	movwf	26	;volatile
 12349                           
 12350                           ;eusart.c: 39: }
 12351  1639  2E40               	goto	l6026
 12352  163A                     l95:	
 12353                           
 12354                           ;eusart.c: 40: else
 12355                           ;eusart.c: 41: {
 12356                           ;eusart.c: 42: PIE1bits.TXIE = 0;
 12357                           
 12358                           ;eusart.c: 43: txBuf[txHead++] = byte;
 12359  163A  3185  256F  3191   	fcall	PL130	;call to abstracted procedure
 12360  163D  082D               	movf	EUSART_Write@byte,w
 12361                           
 12362                           ;eusart.c: 44: if ( sizeof (txBuf ) <= txHead )
 12363                           
 12364                           ;eusart.c: 45: {
 12365                           ;eusart.c: 46: txHead = 0;
 12366                           
 12367                           ;eusart.c: 47: }
 12368                           ;eusart.c: 48: txRemain--;
 12369  163E  3185  2557         	fcall	PL124	;call to abstracted procedure
 12370  1640                     l6026:	
 12371                           
 12372                           ;eusart.c: 49: }
 12373                           ;eusart.c: 50: PIE1bits.TXIE = 1;
 12374  1640  0021               	movlb	1	; select bank1
 12375  1641  1611               	bsf	17,4	;volatile
 12376                           
 12377                           ;eusart.c: 51: return byte;
 12378  1642  0020               	movlb	0	; select bank0
 12379  1643  082D               	movf	EUSART_Write@byte,w
 12380  1644  0008               	return
 12381  1645                     __end_of_EUSART_Write:	
 12382  1645                     __ptext49:	
 12383 ;; *************** function _Led_StartNotice *****************
 12384 ;; Defined at:
 12385 ;;		line 415 in file "user/src/led.c"
 12386 ;; Parameters:    Size  Location     Type
 12387 ;;  cnt             1    wreg     unsigned char 
 12388 ;; Auto vars:     Size  Location     Type
 12389 ;;  cnt             1   14[BANK0 ] unsigned char 
 12390 ;; Return value:  Size  Location     Type
 12391 ;;                  1    wreg      void 
 12392 ;; Registers used:
 12393 ;;		wreg, status,2, status,0, pclath, cstack
 12394 ;; Tracked objects:
 12395 ;;		On entry : 1F/0
 12396 ;;		On exit  : 1F/8
 12397 ;;		Unchanged: 0/0
 12398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12401 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12402 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12403 ;;Total ram usage:        2 bytes
 12404 ;; Hardware stack levels used:    1
 12405 ;; Hardware stack levels required when called:    8
 12406 ;; This function calls:
 12407 ;;		_TMR4_StartTimer
 12408 ;; This function is called by:
 12409 ;;		_IR_ExitSet
 12410 ;;		_IR_ExitTimeout
 12411 ;;		_IR_KeyAction
 12412 ;; This function uses a non-reentrant model
 12413 ;;
 12414                           
 12415                           
 12416                           ;psect for function _Led_StartNotice
 12417  1645                     _Led_StartNotice:	
 12418                           
 12419                           ;incstack = 0
 12420                           ; Regs used in _Led_StartNotice: [wreg+status,2+status,0+pclath+cstack]
 12421                           ;Led_StartNotice@cnt stored from wreg
 12422  1645  00AE               	movwf	Led_StartNotice@cnt
 12423                           
 12424                           ;led.c: 416: gLedRunPara.mNoticeCount = cnt;
 12425  1646  00AD               	movwf	??_Led_StartNotice
 12426  1647  0DAD               	rlf	??_Led_StartNotice,f
 12427  1648  0DAD               	rlf	??_Led_StartNotice,f
 12428  1649  0021               	movlb	1	; select bank1
 12429  164A  085E               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
 12430  164B  0020               	movlb	0	; select bank0
 12431  164C  062D               	xorwf	??_Led_StartNotice,w
 12432  164D  3903               	andlw	-253
 12433  164E  062D               	xorwf	??_Led_StartNotice,w
 12434  164F  0021               	movlb	1	; select bank1
 12435  1650  00DE               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
 12436                           
 12437                           ;led.c: 417: TMR4_StartTimer();
 12438  1651  2EB8               	ljmp	l6042
 12439  1652                     __end_of_Led_StartNotice:	
 12440  1652                     __ptext48:	
 12441 ;; *************** function _IR_ExitSet *****************
 12442 ;; Defined at:
 12443 ;;		line 435 in file "user/src/ir.c"
 12444 ;; Parameters:    Size  Location     Type
 12445 ;;		None
 12446 ;; Auto vars:     Size  Location     Type
 12447 ;;		None
 12448 ;; Return value:  Size  Location     Type
 12449 ;;                  1    wreg      void 
 12450 ;; Registers used:
 12451 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12452 ;; Tracked objects:
 12453 ;;		On entry : 16/8
 12454 ;;		On exit  : 1E/0
 12455 ;;		Unchanged: 0/0
 12456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12461 ;;Total ram usage:        0 bytes
 12462 ;; Hardware stack levels used:    1
 12463 ;; Hardware stack levels required when called:   10
 12464 ;; This function calls:
 12465 ;;		_Led_Initialize
 12466 ;;		_Led_StartNotice
 12467 ;; This function is called by:
 12468 ;;		_IR_KeyAction
 12469 ;; This function uses a non-reentrant model
 12470 ;;
 12471                           
 12472                           
 12473                           ;psect for function _IR_ExitSet
 12474  1652                     _IR_ExitSet:	
 12475                           
 12476                           ;ir.c: 436: ir_state.mSet = 0;
 12477                           
 12478                           ;incstack = 0
 12479                           ; Regs used in _IR_ExitSet: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12480  1652  301F               	movlw	-225
 12481  1653  0020               	movlb	0	; select bank0
 12482  1654  05D4               	andwf	_ir_state,f	;volatile
 12483                           
 12484                           ;ir.c: 437: ir_state.tmIdx = 0;
 12485  1655  01D5               	clrf	_ir_state+1	;volatile
 12486                           
 12487                           ;ir.c: 438: ir_state.mSetDelay = 0;
 12488  1656  01DA               	clrf	_ir_state+6	;volatile
 12489                           
 12490                           ;ir.c: 439: Led_StartNotice(1);
 12491  1657  3001               	movlw	1
 12492  1658  2645               	fcall	_Led_StartNotice
 12493                           
 12494                           ;ir.c: 440: Led_Initialize();
 12495  1659  3189  293C         	ljmp	l6156
 12496  165B                     __end_of_IR_ExitSet:	
 12497  165B                     __ptext46:	
 12498 ;; *************** function ___bmul *****************
 12499 ;; Defined at:
 12500 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul8.c"
 12501 ;; Parameters:    Size  Location     Type
 12502 ;;  multiplier      1    wreg     unsigned char 
 12503 ;;  multiplicand    1   13[BANK0 ] unsigned char 
 12504 ;; Auto vars:     Size  Location     Type
 12505 ;;  multiplier      1   15[BANK0 ] unsigned char 
 12506 ;;  product         1   14[BANK0 ] unsigned char 
 12507 ;; Return value:  Size  Location     Type
 12508 ;;                  1    wreg      unsigned char 
 12509 ;; Registers used:
 12510 ;;		wreg, status,2, status,0
 12511 ;; Tracked objects:
 12512 ;;		On entry : 1F/0
 12513 ;;		On exit  : 1F/0
 12514 ;;		Unchanged: 0/0
 12515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12516 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12517 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12519 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12520 ;;Total ram usage:        3 bytes
 12521 ;; Hardware stack levels used:    1
 12522 ;; Hardware stack levels required when called:    7
 12523 ;; This function calls:
 12524 ;;		Nothing
 12525 ;; This function is called by:
 12526 ;;		_IR_IsValidTime
 12527 ;;		_IR_KeyAction
 12528 ;; This function uses a non-reentrant model
 12529 ;;
 12530                           
 12531                           
 12532                           ;psect for function ___bmul
 12533  165B                     ___bmul:	
 12534                           
 12535                           ;incstack = 0
 12536                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 12537                           ;___bmul@multiplier stored from wreg
 12538  165B  00AF               	movwf	___bmul@multiplier
 12539  165C  01AE               	clrf	___bmul@product
 12540  165D                     l6390:	
 12541  165D  082D               	movf	___bmul@multiplicand,w
 12542  165E  182F               	btfsc	___bmul@multiplier,0
 12543  165F  07AE               	addwf	___bmul@product,f
 12544  1660  35AD               	lslf	___bmul@multiplicand,f
 12545  1661  36AF               	lsrf	___bmul@multiplier,f
 12546  1662  082F               	movf	___bmul@multiplier,w
 12547  1663  1D03               	btfss	3,2
 12548  1664  2E5D               	goto	l6390
 12549  1665  082E               	movf	___bmul@product,w
 12550  1666  0008               	return
 12551  1667                     __end_of___bmul:	
 12552  1667                     __ptext45:	
 12553 ;; *************** function _IR_IsValidTime *****************
 12554 ;; Defined at:
 12555 ;;		line 71 in file "user/src/ir.c"
 12556 ;; Parameters:    Size  Location     Type
 12557 ;;  tm              1    wreg     PTR unsigned char 
 12558 ;;		 -> ir_state.time(4), ir_state(7), 
 12559 ;;  len             1   16[BANK0 ] unsigned char 
 12560 ;; Auto vars:     Size  Location     Type
 12561 ;;  tm              1   20[BANK0 ] PTR unsigned char 
 12562 ;;		 -> ir_state.time(4), ir_state(7), 
 12563 ;;  hour            1   19[BANK0 ] unsigned char 
 12564 ;;  result          1   18[BANK0 ] unsigned char 
 12565 ;;  min             1   17[BANK0 ] unsigned char 
 12566 ;; Return value:  Size  Location     Type
 12567 ;;                  1    wreg      unsigned char 
 12568 ;; Registers used:
 12569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12570 ;; Tracked objects:
 12571 ;;		On entry : 1F/0
 12572 ;;		On exit  : 1F/0
 12573 ;;		Unchanged: 0/0
 12574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12575 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12576 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12578 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12579 ;;Total ram usage:        5 bytes
 12580 ;; Hardware stack levels used:    1
 12581 ;; Hardware stack levels required when called:    8
 12582 ;; This function calls:
 12583 ;;		___bmul
 12584 ;; This function is called by:
 12585 ;;		_IR_KeyAction
 12586 ;; This function uses a non-reentrant model
 12587 ;;
 12588                           
 12589                           
 12590                           ;psect for function _IR_IsValidTime
 12591  1667                     _IR_IsValidTime:	
 12592                           
 12593                           ;incstack = 0
 12594                           ; Regs used in _IR_IsValidTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12595                           ;IR_IsValidTime@tm stored from wreg
 12596  1667  00B4               	movwf	IR_IsValidTime@tm
 12597                           
 12598                           ;ir.c: 72: bool result = 0;
 12599  1668  01B2               	clrf	IR_IsValidTime@result
 12600                           
 12601                           ;ir.c: 74: uint8_t min = 0;
 12602  1669  01B1               	clrf	IR_IsValidTime@min
 12603                           
 12604                           ;ir.c: 76: switch (len) {
 12605  166A  2EA5               	goto	l6528
 12606  166B                     l6500:	
 12607                           
 12608                           ;ir.c: 78: if ((*tm) < 3) {
 12609  166B  0834               	movf	IR_IsValidTime@tm,w
 12610  166C  0086               	movwf	6
 12611  166D  3003               	movlw	3
 12612  166E                     L10:	
 12613  166E  0187               	clrf	7
 12614  166F  0201               	subwf	1,w
 12615  1670                     L9:	
 12616  1670  1803               	skipnc
 12617  1671  2EB3               	goto	l6530
 12618                           
 12619                           ;ir.c: 79: result = 1;
 12620  1672  01B2               	clrf	IR_IsValidTime@result
 12621  1673  0AB2               	incf	IR_IsValidTime@result,f
 12622  1674  2EB3               	goto	l6530
 12623  1675                     l6504:	
 12624                           
 12625                           ;ir.c: 83: hour = (*tm)*10 + (*(tm + 1));
 12626  1675  276C  3191         	fcall	PL62	;call to abstracted procedure
 12627  1677  265B  3191         	fcall	___bmul
 12628                           
 12629                           ;ir.c: 84: if (hour < 24) {
 12630  1679  27FB  3191         	fcall	PL172	;call to abstracted procedure
 12631  167B  2E70               	goto	L9
 12632  167C                     l6510:	
 12633                           
 12634                           ;ir.c: 89: hour = (*tm)*10 + (*(tm + 1));
 12635  167C  276C  3191         	fcall	PL62	;call to abstracted procedure
 12636  167E  265B  3191         	fcall	___bmul
 12637                           
 12638                           ;ir.c: 90: if (hour < 24 && (*(tm + 2)) < 6) {
 12639  1680  27FB  3191         	fcall	PL172	;call to abstracted procedure
 12640  1682  1803               	skipnc
 12641  1683  2EB3               	goto	l6530
 12642  1684  0834               	movf	IR_IsValidTime@tm,w
 12643  1685  3E02               	addlw	2
 12644  1686  0086               	movwf	6
 12645  1687  3006               	movlw	6
 12646  1688  2E6E               	goto	L10
 12647  1689                     l6518:	
 12648                           
 12649                           ;ir.c: 95: hour = (*tm)*10 + (*(tm + 1));
 12650  1689  276C  3191         	fcall	PL62	;call to abstracted procedure
 12651  168B  265B  3191         	fcall	___bmul
 12652  168D  0701               	addwf	1,w
 12653  168E  00B3               	movwf	IR_IsValidTime@hour
 12654                           
 12655                           ;ir.c: 96: min = (*(tm + 2))*10 + (*(tm + 3));
 12656  168F  0834               	movf	IR_IsValidTime@tm,w
 12657  1690  3E03               	addlw	3
 12658  1691  0086               	movwf	6
 12659  1692  300A               	movlw	10
 12660  1693  0187               	clrf	7
 12661  1694  00AD               	movwf	___bmul@multiplicand
 12662  1695  0834               	movf	IR_IsValidTime@tm,w
 12663  1696  3E02               	addlw	2
 12664  1697  0084               	movwf	4
 12665  1698  0185               	clrf	5
 12666  1699  0800               	movf	0,w
 12667  169A  265B  3191         	fcall	___bmul
 12668  169C  0701               	addwf	1,w
 12669  169D  00B1               	movwf	IR_IsValidTime@min
 12670                           
 12671                           ;ir.c: 97: if (hour < 24 && min < 60) {
 12672  169E  3018               	movlw	24
 12673  169F  0233               	subwf	IR_IsValidTime@hour,w
 12674  16A0  1803               	skipnc
 12675  16A1  2EB3               	goto	l6530
 12676  16A2  303C               	movlw	60
 12677  16A3  0231               	subwf	IR_IsValidTime@min,w
 12678  16A4  2E70               	goto	L9
 12679  16A5                     l6528:	
 12680  16A5  0830               	movf	IR_IsValidTime@len,w
 12681                           
 12682                           ; Switch size 1, requested type "space"
 12683                           ; Number of cases is 4, Range of values is 1 to 4
 12684                           ; switch strategies available:
 12685                           ; Name         Instructions Cycles
 12686                           ; simple_byte           13     7 (average)
 12687                           ; direct_byte           17     9 (fixed)
 12688                           ; jumptable            263     9 (fixed)
 12689                           ;	Chosen strategy is simple_byte
 12690  16A6  3A01               	xorlw	1	; case 1
 12691  16A7  1903               	skipnz
 12692  16A8  2E6B               	goto	l6500
 12693  16A9  3A03               	xorlw	3	; case 2
 12694  16AA  1903               	skipnz
 12695  16AB  2E75               	goto	l6504
 12696  16AC  3A01               	xorlw	1	; case 3
 12697  16AD  1903               	skipnz
 12698  16AE  2E7C               	goto	l6510
 12699  16AF  3A07               	xorlw	7	; case 4
 12700  16B0  1903               	skipnz
 12701  16B1  2E89               	goto	l6518
 12702  16B2  2EB3               	goto	l6530
 12703  16B3                     l6530:	
 12704                           
 12705                           ;ir.c: 104: return result;
 12706  16B3  0832               	movf	IR_IsValidTime@result,w
 12707  16B4  0008               	return
 12708  16B5                     __end_of_IR_IsValidTime:	
 12709  16B5                     __ptext44:	
 12710 ;; *************** function _TMR2_DisableInterrupt *****************
 12711 ;; Defined at:
 12712 ;;		line 40 in file "driver/src/tmr2.c"
 12713 ;; Parameters:    Size  Location     Type
 12714 ;;		None
 12715 ;; Auto vars:     Size  Location     Type
 12716 ;;		None
 12717 ;; Return value:  Size  Location     Type
 12718 ;;                  1    wreg      void 
 12719 ;; Registers used:
 12720 ;;		None
 12721 ;; Tracked objects:
 12722 ;;		On entry : 1F/0
 12723 ;;		On exit  : 1F/1
 12724 ;;		Unchanged: 0/0
 12725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;Total ram usage:        0 bytes
 12731 ;; Hardware stack levels used:    1
 12732 ;; Hardware stack levels required when called:    7
 12733 ;; This function calls:
 12734 ;;		Nothing
 12735 ;; This function is called by:
 12736 ;;		_IR_KeyAction
 12737 ;; This function uses a non-reentrant model
 12738 ;;
 12739                           
 12740                           
 12741                           ;psect for function _TMR2_DisableInterrupt
 12742  16B5                     _TMR2_DisableInterrupt:	
 12743                           
 12744                           ;tmr2.c: 42: PIE1bits.TMR2IE = 0;
 12745                           
 12746                           ;incstack = 0
 12747                           ; Regs used in _TMR2_DisableInterrupt: []
 12748  16B5  0021               	movlb	1	; select bank1
 12749  16B6  1091               	bcf	17,1	;volatile
 12750  16B7  0008               	return
 12751  16B8                     __end_of_TMR2_DisableInterrupt:	
 12752  16B8                     __ptext50:	
 12753 ;; *************** function _TMR4_StartTimer *****************
 12754 ;; Defined at:
 12755 ;;		line 17 in file "driver/src/tmr4.c"
 12756 ;; Parameters:    Size  Location     Type
 12757 ;;		None
 12758 ;; Auto vars:     Size  Location     Type
 12759 ;;		None
 12760 ;; Return value:  Size  Location     Type
 12761 ;;                  1    wreg      void 
 12762 ;; Registers used:
 12763 ;;		None
 12764 ;; Tracked objects:
 12765 ;;		On entry : 1F/1
 12766 ;;		On exit  : 1F/8
 12767 ;;		Unchanged: 0/0
 12768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12773 ;;Total ram usage:        0 bytes
 12774 ;; Hardware stack levels used:    1
 12775 ;; Hardware stack levels required when called:    7
 12776 ;; This function calls:
 12777 ;;		Nothing
 12778 ;; This function is called by:
 12779 ;;		_Led_StartNotice
 12780 ;; This function uses a non-reentrant model
 12781 ;;
 12782                           
 12783                           
 12784                           ;psect for function _TMR4_StartTimer
 12785  16B8                     _TMR4_StartTimer:	
 12786  16B8                     l6042:	
 12787                           ;incstack = 0
 12788                           ; Regs used in _TMR4_StartTimer: []
 12789                           
 12790                           
 12791                           ;tmr4.c: 19: T4CONbits.TMR4ON = 1;
 12792  16B8  0028               	movlb	8	; select bank8
 12793  16B9  1517               	bsf	23,2	;volatile
 12794  16BA  0008               	return
 12795  16BB                     __end_of_TMR4_StartTimer:	
 12796  16BB                     __ptext43:	
 12797 ;; *************** function _TMR2_EnableInterrupt *****************
 12798 ;; Defined at:
 12799 ;;		line 45 in file "driver/src/tmr2.c"
 12800 ;; Parameters:    Size  Location     Type
 12801 ;;		None
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;		None
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  1    wreg      void 
 12806 ;; Registers used:
 12807 ;;		None
 12808 ;; Tracked objects:
 12809 ;;		On entry : 14/0
 12810 ;;		On exit  : 1F/1
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;Total ram usage:        0 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; Hardware stack levels required when called:    7
 12820 ;; This function calls:
 12821 ;;		Nothing
 12822 ;; This function is called by:
 12823 ;;		_IR_ResetIfTMR1Overflow
 12824 ;;		_IR_KeyAction
 12825 ;; This function uses a non-reentrant model
 12826 ;;
 12827                           
 12828                           
 12829                           ;psect for function _TMR2_EnableInterrupt
 12830  16BB                     _TMR2_EnableInterrupt:	
 12831                           
 12832                           ;tmr2.c: 47: PIE1bits.TMR2IE = 1;
 12833                           
 12834                           ;incstack = 0
 12835                           ; Regs used in _TMR2_EnableInterrupt: []
 12836  16BB  0021               	movlb	1	; select bank1
 12837  16BC  1491               	bsf	17,1	;volatile
 12838  16BD  0008               	return
 12839  16BE                     __end_of_TMR2_EnableInterrupt:	
 12840  16BE                     PL4:	
 12841  16BE  01C1               	clrf	(??_IR_KeyAction^(0+256)+1)
 12842  16BF  35C0               	lslf	??_IR_KeyAction^(0+256),f
 12843  16C0  0DC1               	rlf	(??_IR_KeyAction^(0+256)+1),f
 12844  16C1  00C2               	movwf	(??_IR_KeyAction+2)^(0+256)
 12845  16C2  3023               	movlw	35
 12846  16C3  00C3               	movwf	((??_IR_KeyAction+2)^(0+256)+1)
 12847  16C4  0840               	movf	??_IR_KeyAction^(0+256),w
 12848  16C5  0742               	addwf	(??_IR_KeyAction+2)^(0+256),w
 12849  16C6  0084               	movwf	4
 12850  16C7  0841               	movf	(??_IR_KeyAction+1)^(0+256),w
 12851  16C8  3D43               	addwfc	(??_IR_KeyAction+3)^(0+256),w
 12852  16C9  0085               	movwf	5
 12853  16CA  3F40               	moviw [0]fsr1
 12854  16CB  3F80               	movwi [0]fsr0
 12855  16CC  3F41               	moviw [1]fsr1
 12856  16CD  3F81               	movwi [1]fsr0
 12857  16CE  0008               	return
 12858  16CF                     __end_ofPL4:	
 12859  16CF                     PL8:	
 12860  16CF  307B               	movlw	123
 12861  16D0  0086               	movwf	6
 12862  16D1  3023               	movlw	35
 12863  16D2  0087               	movwf	7
 12864  16D3  0C01               	rrf	1,w
 12865  16D4  00C0               	movwf	??_IR_KeyAction^(0+256)
 12866  16D5  0CC0               	rrf	??_IR_KeyAction^(0+256),f
 12867  16D6  0C40               	rrf	??_IR_KeyAction^(0+256),w
 12868  16D7  390F               	andlw	15
 12869  16D8  0008               	return
 12870  16D9                     __end_ofPL8:	
 12871  16D9                     PL14:	
 12872  16D9  00AE               	movwf	Util_IncValue@pSrc+1
 12873  16DA  30E8               	movlw	232
 12874  16DB  00AF               	movwf	Util_IncValue@max
 12875  16DC  3003               	movlw	3
 12876  16DD  00B0               	movwf	Util_IncValue@max+1
 12877  16DE  30C8               	movlw	200
 12878  16DF  00B1               	movwf	Util_IncValue@delta
 12879  16E0  01B2               	clrf	Util_IncValue@delta+1
 12880  16E1  0008               	return
 12881  16E2                     __end_ofPL14:	
 12882  16E2                     PL18:	
 12883  16E2  0086               	movwf	6
 12884  16E3  3023               	movlw	35
 12885  16E4  0087               	movwf	7
 12886  16E5  3142               	addfsr 1,2
 12887  16E6  0801               	movf	1,w
 12888  16E7  3E05               	addlw	low (_VOLUME| (0+32768))
 12889  16E8  0084               	movwf	4
 12890  16E9  3098               	movlw	high (_VOLUME| (0+32768))
 12891  16EA  1803               	skipnc
 12892  16EB  3E01               	addlw	1
 12893  16EC  0085               	movwf	5
 12894  16ED  0800               	movf	0,w	;code access
 12895  16EE  0008               	return
 12896  16EF                     __end_ofPL18:	
 12897  16EF                     PL28:	
 12898  16EF  00AF               	movwf	Util_IncValue@max
 12899  16F0  3003               	movlw	3
 12900  16F1  00B0               	movwf	Util_IncValue@max+1
 12901  16F2  30C8               	movlw	200
 12902  16F3  00B1               	movwf	Util_IncValue@delta
 12903  16F4  01B2               	clrf	Util_IncValue@delta+1
 12904  16F5  0008               	return
 12905  16F6                     __end_ofPL28:	
 12906  16F6                     PL30:	
 12907  16F6  0084               	movwf	4
 12908  16F7  0185               	clrf	5
 12909  16F8  3F40               	moviw [0]fsr1
 12910  16F9  3F80               	movwi [0]fsr0
 12911  16FA  3F41               	moviw [1]fsr1
 12912  16FB  3F81               	movwi [1]fsr0
 12913  16FC  0008               	return
 12914  16FD                     __end_ofPL30:	
 12915  16FD                     PL32:	
 12916  16FD  00AE               	movwf	Util_DecValue@pSrc+1
 12917  16FE  3064               	movlw	100
 12918  16FF  00AF               	movwf	Util_DecValue@min
 12919  1700  30C8               	movlw	200
 12920  1701  01B0               	clrf	Util_DecValue@min+1
 12921  1702  00B1               	movwf	Util_DecValue@delta
 12922  1703  01B2               	clrf	Util_DecValue@delta+1
 12923  1704  0008               	return
 12924  1705                     __end_ofPL32:	
 12925  1705                     PL34:	
 12926  1705  30CE               	movlw	206
 12927  1706  0086               	movwf	6
 12928  1707  3023               	movlw	35
 12929  1708  0087               	movwf	7
 12930  1709  0021               	movlb	1	; select bank1
 12931  170A  0854               	movf	(_gLedRunPara^(0+128)+10),w	;volatile
 12932  170B  3FC0               	movwi [0]fsr1
 12933  170C  0855               	movf	((_gLedRunPara+1)^(0+128)+10),w	;volatile
 12934  170D  3FC1               	movwi [1]fsr1
 12935  170E  30D2               	movlw	210
 12936  170F  0086               	movwf	6
 12937  1710  0858               	movf	(_gLedRunPara^(0+128)+14),w	;volatile
 12938  1711  3FC0               	movwi [0]fsr1
 12939  1712  0859               	movf	((_gLedRunPara+1)^(0+128)+14),w	;volatile
 12940  1713  3FC1               	movwi [1]fsr1
 12941  1714  30D4               	movlw	212
 12942  1715  0086               	movwf	6
 12943  1716  085A               	movf	(_gLedRunPara^(0+128)+16),w	;volatile
 12944  1717  3FC0               	movwi [0]fsr1
 12945  1718  085B               	movf	((_gLedRunPara+1)^(0+128)+16),w	;volatile
 12946  1719  3FC1               	movwi [1]fsr1
 12947  171A  30D6               	movlw	214
 12948  171B  0086               	movwf	6
 12949  171C  085C               	movf	(_gLedRunPara^(0+128)+18),w	;volatile
 12950  171D  3FC0               	movwi [0]fsr1
 12951  171E  085D               	movf	((_gLedRunPara+1)^(0+128)+18),w	;volatile
 12952  171F  3FC1               	movwi [1]fsr1
 12953  1720  0008               	return
 12954  1721                     __end_ofPL34:	
 12955  1721                     PL40:	
 12956  1721  3088               	movlw	136
 12957  1722  0022               	movlb	2	; select bank2
 12958  1723  00C2               	movwf	(??_IR_KeyAction+2)^(0+256)
 12959  1724  3023               	movlw	35
 12960  1725  00C3               	movwf	((??_IR_KeyAction+2)^(0+256)+1)
 12961  1726  0020               	movlb	0	; select bank0
 12962  1727  082D               	movf	?___wmul,w
 12963  1728  0022               	movlb	2	; select bank2
 12964  1729  0742               	addwf	(??_IR_KeyAction+2)^(0+256),w
 12965  172A  00C4               	movwf	(??_IR_KeyAction+4)^(0+256)
 12966  172B  0020               	movlb	0	; select bank0
 12967  172C  082E               	movf	?___wmul+1,w
 12968  172D  0022               	movlb	2	; select bank2
 12969  172E  3D43               	addwfc	(??_IR_KeyAction+3)^(0+256),w
 12970  172F  00C5               	movwf	(??_IR_KeyAction+5)^(0+256)
 12971  1730  0840               	movf	??_IR_KeyAction^(0+256),w
 12972  1731  0744               	addwf	(??_IR_KeyAction+4)^(0+256),w
 12973  1732  0086               	movwf	6
 12974  1733  0841               	movf	(??_IR_KeyAction+1)^(0+256),w
 12975  1734  3D45               	addwfc	(??_IR_KeyAction+5)^(0+256),w
 12976  1735  0087               	movwf	7
 12977  1736  0008               	return
 12978  1737                     __end_ofPL40:	
 12979  1737                     PL42:	
 12980  1737  30C8               	movlw	200
 12981  1738  0086               	movwf	6
 12982  1739  3023               	movlw	35
 12983  173A  0087               	movwf	7
 12984  173B  0021               	movlb	1	; select bank1
 12985  173C  0858               	movf	(_gLedRunPara^(0+128)+14),w	;volatile
 12986  173D  3FC0               	movwi [0]fsr1
 12987  173E  0859               	movf	((_gLedRunPara+1)^(0+128)+14),w	;volatile
 12988  173F  3FC1               	movwi [1]fsr1
 12989  1740  30CA               	movlw	202
 12990  1741  0086               	movwf	6
 12991  1742  085A               	movf	(_gLedRunPara^(0+128)+16),w	;volatile
 12992  1743  3FC0               	movwi [0]fsr1
 12993  1744  085B               	movf	((_gLedRunPara+1)^(0+128)+16),w	;volatile
 12994  1745  3FC1               	movwi [1]fsr1
 12995  1746  30CC               	movlw	204
 12996  1747  0086               	movwf	6
 12997  1748  085C               	movf	(_gLedRunPara^(0+128)+18),w	;volatile
 12998  1749  3FC0               	movwi [0]fsr1
 12999  174A  085D               	movf	((_gLedRunPara+1)^(0+128)+18),w	;volatile
 13000  174B  3FC1               	movwi [1]fsr1
 13001  174C  0008               	return
 13002  174D                     __end_ofPL42:	
 13003  174D                     PL44:	
 13004  174D  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 13005  174E  0020               	movlb	0	; select bank0
 13006  174F  00AD               	movwf	Util_IncValue@pSrc
 13007  1750  30E8               	movlw	232
 13008  1751  01AE               	clrf	Util_IncValue@pSrc+1
 13009  1752  0008               	return
 13010  1753                     __end_ofPL44:	
 13011  1753                     PL46:	
 13012  1753  0086               	movwf	6
 13013  1754  3023               	movlw	35
 13014  1755  0087               	movwf	7
 13015  1756  0021               	movlb	1	; select bank1
 13016  1757  0858               	movf	(_gLedRunPara^(0+128)+14),w	;volatile
 13017  1758  3FC0               	movwi [0]fsr1
 13018  1759  0859               	movf	((_gLedRunPara+1)^(0+128)+14),w	;volatile
 13019  175A  3FC1               	movwi [1]fsr1
 13020  175B  0008               	return
 13021  175C                     __end_ofPL46:	
 13022  175C                     PL60:	
 13023  175C  082D               	movf	?___wmul,w
 13024  175D  0022               	movlb	2	; select bank2
 13025  175E  0744               	addwf	(??_IR_KeyAction+4)^(0+256),w
 13026  175F  00C6               	movwf	(??_IR_KeyAction+6)^(0+256)
 13027  1760  0020               	movlb	0	; select bank0
 13028  1761  082E               	movf	?___wmul+1,w
 13029  1762  0022               	movlb	2	; select bank2
 13030  1763  3D45               	addwfc	(??_IR_KeyAction+5)^(0+256),w
 13031  1764  00C7               	movwf	(??_IR_KeyAction+7)^(0+256)
 13032  1765  0840               	movf	??_IR_KeyAction^(0+256),w
 13033  1766  0746               	addwf	(??_IR_KeyAction+6)^(0+256),w
 13034  1767  00C8               	movwf	(??_IR_KeyAction+8)^(0+256)
 13035  1768  0841               	movf	(??_IR_KeyAction+1)^(0+256),w
 13036  1769  3D47               	addwfc	(??_IR_KeyAction+7)^(0+256),w
 13037  176A  00C9               	movwf	(??_IR_KeyAction+9)^(0+256)
 13038  176B  0008               	return
 13039  176C                     __end_ofPL60:	
 13040  176C                     PL62:	
 13041  176C  0A34               	incf	IR_IsValidTime@tm,w
 13042  176D  0086               	movwf	6
 13043  176E  300A               	movlw	10
 13044  176F  0187               	clrf	7
 13045  1770  00AD               	movwf	___bmul@multiplicand
 13046  1771  0834               	movf	IR_IsValidTime@tm,w
 13047  1772  0084               	movwf	4
 13048  1773  0185               	clrf	5
 13049  1774  0800               	movf	0,w
 13050  1775  0008               	return
 13051  1776                     __end_ofPL62:	
 13052  1776                     PL64:	
 13053  1776  082D               	movf	?___wmul,w
 13054  1777  0022               	movlb	2	; select bank2
 13055  1778  0742               	addwf	(??_IR_KeyAction+2)^(0+256),w
 13056  1779  00C4               	movwf	(??_IR_KeyAction+4)^(0+256)
 13057  177A  0020               	movlb	0	; select bank0
 13058  177B  082E               	movf	?___wmul+1,w
 13059  177C  0022               	movlb	2	; select bank2
 13060  177D  3D43               	addwfc	(??_IR_KeyAction+3)^(0+256),w
 13061  177E  00C5               	movwf	(??_IR_KeyAction+5)^(0+256)
 13062  177F  0020               	movlb	0	; select bank0
 13063  1780  0858               	movf	_ir_state+4,w	;volatile
 13064  1781  00AD               	movwf	___wmul@multiplier
 13065  1782  300A               	movlw	10
 13066  1783  01AE               	clrf	___wmul@multiplier+1
 13067  1784  00AF               	movwf	___wmul@multiplicand
 13068  1785  01B0               	clrf	___wmul@multiplicand+1
 13069  1786  0008               	return
 13070  1787                     __end_ofPL64:	
 13071  1787                     PL66:	
 13072  1787  082D               	movf	?___wmul,w
 13073  1788  0022               	movlb	2	; select bank2
 13074  1789  00C2               	movwf	(??_IR_KeyAction+2)^(0+256)
 13075  178A  0020               	movlb	0	; select bank0
 13076  178B  082E               	movf	?___wmul+1,w
 13077  178C  0022               	movlb	2	; select bank2
 13078  178D  00C3               	movwf	((??_IR_KeyAction+2)^(0+256)+1)
 13079  178E  0020               	movlb	0	; select bank0
 13080  178F  0857               	movf	_ir_state+3,w	;volatile
 13081  1790  00AD               	movwf	___wmul@multiplier
 13082  1791  303C               	movlw	60
 13083  1792  01AE               	clrf	___wmul@multiplier+1
 13084  1793  00AF               	movwf	___wmul@multiplicand
 13085  1794  01B0               	clrf	___wmul@multiplicand+1
 13086  1795  0008               	return
 13087  1796                     __end_ofPL66:	
 13088  1796                     PL72:	
 13089  1796  0859               	movf	_ir_state+5,w	;volatile
 13090  1797  0022               	movlb	2	; select bank2
 13091  1798  00C0               	movwf	??_IR_KeyAction^(0+256)
 13092  1799  01C1               	clrf	(??_IR_KeyAction^(0+256)+1)
 13093  179A  0020               	movlb	0	; select bank0
 13094  179B  0856               	movf	_ir_state+2,w	;volatile
 13095  179C  00AD               	movwf	___wmul@multiplier
 13096  179D  3058               	movlw	88
 13097  179E  01AE               	clrf	___wmul@multiplier+1
 13098  179F  00AF               	movwf	___wmul@multiplicand
 13099  17A0  3002               	movlw	2
 13100  17A1  00B0               	movwf	___wmul@multiplicand+1
 13101  17A2  0008               	return
 13102  17A3                     __end_ofPL72:	
 13103  17A3                     PL74:	
 13104  17A3  30D8               	movlw	low (_gLedRunPara+14)
 13105  17A4  0020               	movlb	0	; select bank0
 13106  17A5  00AD               	movwf	Util_IncValue@pSrc
 13107  17A6  3400               	retlw	high (_gLedRunPara+14)
 13108  17A7                     __end_ofPL74:	
 13109  17A7                     PL76:	
 13110  17A7  30D8               	movlw	low (_gLedRunPara+14)
 13111  17A8  0020               	movlb	0	; select bank0
 13112  17A9  00AD               	movwf	Util_DecValue@pSrc
 13113  17AA  3400               	retlw	high (_gLedRunPara+14)
 13114  17AB                     __end_ofPL76:	
 13115  17AB                     PL78:	
 13116  17AB  307B               	movlw	123
 13117  17AC  0086               	movwf	6
 13118  17AD  3023               	movlw	35
 13119  17AE  0087               	movwf	7
 13120  17AF  3087               	movlw	-121
 13121  17B0  1001               	bcf	1,0
 13122  17B1  0581               	andwf	1,f
 13123  17B2  1381               	bcf	1,7
 13124  17B3  0022               	movlb	2	; select bank2
 13125  17B4  0008               	return
 13126  17B5                     __end_ofPL78:	
 13127  17B5                     PL84:	
 13128  17B5  00AD               	movwf	___wmul@multiplier
 13129  17B6  300A               	movlw	10
 13130  17B7  01AE               	clrf	___wmul@multiplier+1
 13131  17B8  00AF               	movwf	___wmul@multiplicand
 13132  17B9  01B0               	clrf	___wmul@multiplicand+1
 13133  17BA  0008               	return
 13134  17BB                     __end_ofPL84:	
 13135  17BB                     PL86:	
 13136  17BB  307B               	movlw	123
 13137  17BC  0086               	movwf	6
 13138  17BD  3023               	movlw	35
 13139  17BE  0087               	movwf	7
 13140  17BF  0801               	movf	1,w
 13141  17C0  3987               	andlw	-121
 13142  17C1  0008               	return
 13143  17C2                     __end_ofPL86:	
 13144  17C2                     PL96:	
 13145  17C2  00C0               	movwf	??_IR_KeyAction^(0+256)
 13146  17C3  01C1               	clrf	(??_IR_KeyAction^(0+256)+1)
 13147  17C4  35C0               	lslf	??_IR_KeyAction^(0+256),f
 13148  17C5  0DC1               	rlf	(??_IR_KeyAction^(0+256)+1),f
 13149  17C6  0853               	movf	IR_KeyAction@idx^(0+256),w
 13150  17C7  0020               	movlb	0	; select bank0
 13151  17C8  0008               	return
 13152  17C9                     __end_ofPL96:	
 13153  17C9                     PL110:	
 13154  17C9  0086               	movwf	6
 13155  17CA  3023               	movlw	35
 13156  17CB  0087               	movwf	7
 13157  17CC  0C01               	rrf	1,w
 13158  17CD  0022               	movlb	2	; select bank2
 13159  17CE  00C0               	movwf	??_IR_KeyAction^(0+256)
 13160  17CF  0CC0               	rrf	??_IR_KeyAction^(0+256),f
 13161  17D0  0C40               	rrf	??_IR_KeyAction^(0+256),w
 13162  17D1  390F               	andlw	15
 13163  17D2  0008               	return
 13164  17D3                     __end_ofPL110:	
 13165  17D3                     PL112:	
 13166  17D3  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 13167  17D4  0020               	movlb	0	; select bank0
 13168  17D5  00AD               	movwf	Util_DecValue@pSrc
 13169  17D6  30C8               	movlw	200
 13170  17D7  01AE               	clrf	Util_DecValue@pSrc+1
 13171  17D8  01AF               	clrf	Util_DecValue@min
 13172  17D9  01B0               	clrf	Util_DecValue@min+1
 13173  17DA  00B1               	movwf	Util_DecValue@delta
 13174  17DB  01B2               	clrf	Util_DecValue@delta+1
 13175  17DC  0008               	return
 13176  17DD                     __end_ofPL112:	
 13177  17DD                     PL120:	
 13178  17DD  0086               	movwf	6
 13179  17DE  3023               	movlw	35
 13180  17DF  0087               	movwf	7
 13181  17E0  0848               	movf	(??_IR_KeyAction+8)^(0+256),w
 13182  17E1  3FC0               	movwi [0]fsr1
 13183  17E2  0849               	movf	((??_IR_KeyAction+8)^(0+256)+1),w
 13184  17E3  3FC1               	movwi [1]fsr1
 13185  17E4  0008               	return
 13186  17E5                     __end_ofPL120:	
 13187  17E5                     PL152:	
 13188  17E5  0086               	movwf	6
 13189  17E6  300A               	movlw	10
 13190  17E7  0187               	clrf	7
 13191  17E8  0020               	movlb	0	; select bank0
 13192  17E9  00AD               	movwf	___bmul@multiplicand
 13193  17EA  0008               	return
 13194  17EB                     __end_ofPL152:	
 13195  17EB                     PL156:	
 13196  17EB  307B               	movlw	123
 13197  17EC  0086               	movwf	6
 13198  17ED  3023               	movlw	35
 13199  17EE  0087               	movwf	7
 13200  17EF  1481               	bsf	1,1
 13201  17F0  0008               	return
 13202  17F1                     __end_ofPL156:	
 13203  17F1                     PL158:	
 13204  17F1  0E54               	swapf	_ir_state,w	;volatile
 13205  17F2  0C89               	rrf	9,f
 13206  17F3  3907               	andlw	7
 13207  17F4  3A05               	xorlw	5
 13208  17F5  0008               	return
 13209  17F6                     __end_ofPL158:	
 13210  17F6                     PL160:	
 13211  17F6  0E54               	swapf	_ir_state,w	;volatile
 13212  17F7  0C89               	rrf	9,f
 13213  17F8  3907               	andlw	7
 13214  17F9  3A04               	xorlw	4
 13215  17FA  0008               	return
 13216  17FB                     __end_ofPL160:	
 13217  17FB                     PL172:	
 13218  17FB  0701               	addwf	1,w
 13219  17FC  00B3               	movwf	IR_IsValidTime@hour
 13220  17FD  3018               	movlw	24
 13221  17FE  0233               	subwf	IR_IsValidTime@hour,w
 13222  17FF  0008               	return
 13223  1800                     __end_ofPL172:	
 13224                           
 13225                           	psect	text54
 13226  115B                     __ptext54:	
 13227 ;; *************** function _PWM4_LoadDutyValue *****************
 13228 ;; Defined at:
 13229 ;;		line 49 in file "driver/src/pwm.c"
 13230 ;; Parameters:    Size  Location     Type
 13231 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13232 ;; Auto vars:     Size  Location     Type
 13233 ;;		None
 13234 ;; Return value:  Size  Location     Type
 13235 ;;                  1    wreg      void 
 13236 ;; Registers used:
 13237 ;;		wreg
 13238 ;; Tracked objects:
 13239 ;;		On entry : 10/0
 13240 ;;		On exit  : 1F/6
 13241 ;;		Unchanged: 0/0
 13242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13243 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13246 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13247 ;;Total ram usage:        2 bytes
 13248 ;; Hardware stack levels used:    1
 13249 ;; Hardware stack levels required when called:    7
 13250 ;; This function calls:
 13251 ;;		Nothing
 13252 ;; This function is called by:
 13253 ;;		_Led_UpdateBright
 13254 ;;		i1_Led_UpdateBright
 13255 ;;		_Led_Ramp
 13256 ;; This function uses a non-reentrant model
 13257 ;;
 13258                           
 13259                           
 13260                           ;psect for function _PWM4_LoadDutyValue
 13261  115B                     _PWM4_LoadDutyValue:	
 13262                           
 13263                           ;Skip over the trampoline to the duplicate function for level 1
 13264  115B  1C7E               	btfss	126,0
 13265  115C  295E               	goto	l6038
 13266  115D  2967               	ljmp	i1l3910
 13267  115E                     _PWM4_LoadDutyValue$intlevel0:	
 13268  115E                     l6038:	
 13269                           ;incstack = 0
 13270                           ; Regs used in _PWM4_LoadDutyValue: [wreg]
 13271                           
 13272                           
 13273                           ;pwm.c: 51: CCPR4 = dutyValue;
 13274  115E  0020               	movlb	0	; select bank0
 13275  115F  082E               	movf	PWM4_LoadDutyValue@dutyValue+1,w
 13276  1160  0026               	movlb	6	; select bank6
 13277  1161  0096               	movwf	22	;volatile
 13278  1162  0020               	movlb	0	; select bank0
 13279  1163  082D               	movf	PWM4_LoadDutyValue@dutyValue,w
 13280  1164  0026               	movlb	6	; select bank6
 13281  1165  0095               	movwf	21	;volatile
 13282  1166  0008               	return
 13283  1167                     __end_of_PWM4_LoadDutyValue:	
 13284  1167                     __ptext86:	
 13285 ;; *************** function i1_PWM4_LoadDutyValue *****************
 13286 ;; Defined at:
 13287 ;;		line 49 in file "driver/src/pwm.c"
 13288 ;; Parameters:    Size  Location     Type
 13289 ;;  dutyValue       2    0[COMMON] unsigned int 
 13290 ;; Auto vars:     Size  Location     Type
 13291 ;;		None
 13292 ;; Return value:  Size  Location     Type
 13293 ;;                  1    wreg      void 
 13294 ;; Registers used:
 13295 ;;		wreg
 13296 ;; Tracked objects:
 13297 ;;		On entry : 0/0
 13298 ;;		On exit  : 1F/6
 13299 ;;		Unchanged: 0/0
 13300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13301 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13304 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13305 ;;Total ram usage:        2 bytes
 13306 ;; Hardware stack levels used:    1
 13307 ;; This function calls:
 13308 ;;		Nothing
 13309 ;; This function is called by:
 13310 ;; This function uses a non-reentrant model
 13311 ;;
 13312                           
 13313                           
 13314                           ;psect for function i1_PWM4_LoadDutyValue
 13315  1167                     i1_PWM4_LoadDutyValue:	
 13316  1167                     i1l3910:	
 13317                           ;incstack = 0
 13318                           ; Regs used in i1_PWM4_LoadDutyValue: [wreg]
 13319                           
 13320                           
 13321                           ;pwm.c: 51: CCPR4 = dutyValue;
 13322  1167  0871               	movf	i1PWM4_LoadDutyValue@dutyValue+1,w
 13323  1168  0026               	movlb	6	; select bank6
 13324  1169  0096               	movwf	22	;volatile
 13325  116A  0870               	movf	i1PWM4_LoadDutyValue@dutyValue,w
 13326  116B  0095               	movwf	21	;volatile
 13327  116C  0008               	return
 13328  116D                     __end_ofi1_PWM4_LoadDutyValue:	
 13329                           
 13330                           	psect	text55
 13331  1149                     __ptext55:	
 13332 ;; *************** function _PWM3_LoadDutyValue *****************
 13333 ;; Defined at:
 13334 ;;		line 37 in file "driver/src/pwm.c"
 13335 ;; Parameters:    Size  Location     Type
 13336 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13337 ;; Auto vars:     Size  Location     Type
 13338 ;;		None
 13339 ;; Return value:  Size  Location     Type
 13340 ;;                  1    wreg      void 
 13341 ;; Registers used:
 13342 ;;		wreg
 13343 ;; Tracked objects:
 13344 ;;		On entry : 10/0
 13345 ;;		On exit  : 1F/6
 13346 ;;		Unchanged: 0/0
 13347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13348 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13351 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13352 ;;Total ram usage:        2 bytes
 13353 ;; Hardware stack levels used:    1
 13354 ;; Hardware stack levels required when called:    7
 13355 ;; This function calls:
 13356 ;;		Nothing
 13357 ;; This function is called by:
 13358 ;;		_Led_UpdateBright
 13359 ;;		i1_Led_UpdateBright
 13360 ;;		_Led_Ramp
 13361 ;; This function uses a non-reentrant model
 13362 ;;
 13363                           
 13364                           
 13365                           ;psect for function _PWM3_LoadDutyValue
 13366  1149                     _PWM3_LoadDutyValue:	
 13367                           
 13368                           ;Skip over the trampoline to the duplicate function for level 1
 13369  1149  1C7E               	btfss	126,0
 13370  114A  294C               	goto	l6036
 13371  114B  2955               	ljmp	i1l3908
 13372  114C                     _PWM3_LoadDutyValue$intlevel0:	
 13373  114C                     l6036:	
 13374                           ;incstack = 0
 13375                           ; Regs used in _PWM3_LoadDutyValue: [wreg]
 13376                           
 13377                           
 13378                           ;pwm.c: 39: CCPR3 = dutyValue;
 13379  114C  0020               	movlb	0	; select bank0
 13380  114D  082E               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 13381  114E  0026               	movlb	6	; select bank6
 13382  114F  0092               	movwf	18	;volatile
 13383  1150  0020               	movlb	0	; select bank0
 13384  1151  082D               	movf	PWM3_LoadDutyValue@dutyValue,w
 13385  1152  0026               	movlb	6	; select bank6
 13386  1153  0091               	movwf	17	;volatile
 13387  1154  0008               	return
 13388  1155                     __end_of_PWM3_LoadDutyValue:	
 13389  1155                     __ptext87:	
 13390 ;; *************** function i1_PWM3_LoadDutyValue *****************
 13391 ;; Defined at:
 13392 ;;		line 37 in file "driver/src/pwm.c"
 13393 ;; Parameters:    Size  Location     Type
 13394 ;;  dutyValue       2    0[COMMON] unsigned int 
 13395 ;; Auto vars:     Size  Location     Type
 13396 ;;		None
 13397 ;; Return value:  Size  Location     Type
 13398 ;;                  1    wreg      void 
 13399 ;; Registers used:
 13400 ;;		wreg
 13401 ;; Tracked objects:
 13402 ;;		On entry : 0/0
 13403 ;;		On exit  : 1F/6
 13404 ;;		Unchanged: 0/0
 13405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13406 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13409 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;Total ram usage:        2 bytes
 13411 ;; Hardware stack levels used:    1
 13412 ;; This function calls:
 13413 ;;		Nothing
 13414 ;; This function is called by:
 13415 ;; This function uses a non-reentrant model
 13416 ;;
 13417                           
 13418                           
 13419                           ;psect for function i1_PWM3_LoadDutyValue
 13420  1155                     i1_PWM3_LoadDutyValue:	
 13421  1155                     i1l3908:	
 13422                           ;incstack = 0
 13423                           ; Regs used in i1_PWM3_LoadDutyValue: [wreg]
 13424                           
 13425                           
 13426                           ;pwm.c: 39: CCPR3 = dutyValue;
 13427  1155  0871               	movf	i1PWM3_LoadDutyValue@dutyValue+1,w
 13428  1156  0026               	movlb	6	; select bank6
 13429  1157  0092               	movwf	18	;volatile
 13430  1158  0870               	movf	i1PWM3_LoadDutyValue@dutyValue,w
 13431  1159  0091               	movwf	17	;volatile
 13432  115A  0008               	return
 13433  115B                     __end_ofi1_PWM3_LoadDutyValue:	
 13434                           
 13435                           	psect	text56
 13436  1137                     __ptext56:	
 13437 ;; *************** function _PWM2_LoadDutyValue *****************
 13438 ;; Defined at:
 13439 ;;		line 25 in file "driver/src/pwm.c"
 13440 ;; Parameters:    Size  Location     Type
 13441 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13442 ;; Auto vars:     Size  Location     Type
 13443 ;;		None
 13444 ;; Return value:  Size  Location     Type
 13445 ;;                  1    wreg      void 
 13446 ;; Registers used:
 13447 ;;		wreg
 13448 ;; Tracked objects:
 13449 ;;		On entry : 10/0
 13450 ;;		On exit  : 1F/5
 13451 ;;		Unchanged: 0/0
 13452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13453 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13456 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13457 ;;Total ram usage:        2 bytes
 13458 ;; Hardware stack levels used:    1
 13459 ;; Hardware stack levels required when called:    7
 13460 ;; This function calls:
 13461 ;;		Nothing
 13462 ;; This function is called by:
 13463 ;;		_Led_UpdateBright
 13464 ;;		i1_Led_UpdateBright
 13465 ;;		_Led_Ramp
 13466 ;; This function uses a non-reentrant model
 13467 ;;
 13468                           
 13469                           
 13470                           ;psect for function _PWM2_LoadDutyValue
 13471  1137                     _PWM2_LoadDutyValue:	
 13472                           
 13473                           ;Skip over the trampoline to the duplicate function for level 1
 13474  1137  1C7E               	btfss	126,0
 13475  1138  293A               	goto	l6034
 13476  1139  2943               	ljmp	i1l3906
 13477  113A                     _PWM2_LoadDutyValue$intlevel0:	
 13478  113A                     l6034:	
 13479                           ;incstack = 0
 13480                           ; Regs used in _PWM2_LoadDutyValue: [wreg]
 13481                           
 13482                           
 13483                           ;pwm.c: 27: CCPR2 = dutyValue;
 13484  113A  0020               	movlb	0	; select bank0
 13485  113B  082E               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 13486  113C  0025               	movlb	5	; select bank5
 13487  113D  0096               	movwf	22	;volatile
 13488  113E  0020               	movlb	0	; select bank0
 13489  113F  082D               	movf	PWM2_LoadDutyValue@dutyValue,w
 13490  1140  0025               	movlb	5	; select bank5
 13491  1141  0095               	movwf	21	;volatile
 13492  1142  0008               	return
 13493  1143                     __end_of_PWM2_LoadDutyValue:	
 13494  1143                     __ptext88:	
 13495 ;; *************** function i1_PWM2_LoadDutyValue *****************
 13496 ;; Defined at:
 13497 ;;		line 25 in file "driver/src/pwm.c"
 13498 ;; Parameters:    Size  Location     Type
 13499 ;;  dutyValue       2    0[COMMON] unsigned int 
 13500 ;; Auto vars:     Size  Location     Type
 13501 ;;		None
 13502 ;; Return value:  Size  Location     Type
 13503 ;;                  1    wreg      void 
 13504 ;; Registers used:
 13505 ;;		wreg
 13506 ;; Tracked objects:
 13507 ;;		On entry : 0/0
 13508 ;;		On exit  : 1F/5
 13509 ;;		Unchanged: 0/0
 13510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13511 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13514 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13515 ;;Total ram usage:        2 bytes
 13516 ;; Hardware stack levels used:    1
 13517 ;; This function calls:
 13518 ;;		Nothing
 13519 ;; This function is called by:
 13520 ;; This function uses a non-reentrant model
 13521 ;;
 13522                           
 13523                           
 13524                           ;psect for function i1_PWM2_LoadDutyValue
 13525  1143                     i1_PWM2_LoadDutyValue:	
 13526  1143                     i1l3906:	
 13527                           ;incstack = 0
 13528                           ; Regs used in i1_PWM2_LoadDutyValue: [wreg]
 13529                           
 13530                           
 13531                           ;pwm.c: 27: CCPR2 = dutyValue;
 13532  1143  0871               	movf	i1PWM2_LoadDutyValue@dutyValue+1,w
 13533  1144  0025               	movlb	5	; select bank5
 13534  1145  0096               	movwf	22	;volatile
 13535  1146  0870               	movf	i1PWM2_LoadDutyValue@dutyValue,w
 13536  1147  0095               	movwf	21	;volatile
 13537  1148  0008               	return
 13538  1149                     __end_ofi1_PWM2_LoadDutyValue:	
 13539                           
 13540                           	psect	text57
 13541  1125                     __ptext57:	
 13542 ;; *************** function _PWM1_LoadDutyValue *****************
 13543 ;; Defined at:
 13544 ;;		line 13 in file "driver/src/pwm.c"
 13545 ;; Parameters:    Size  Location     Type
 13546 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13547 ;; Auto vars:     Size  Location     Type
 13548 ;;		None
 13549 ;; Return value:  Size  Location     Type
 13550 ;;                  1    wreg      void 
 13551 ;; Registers used:
 13552 ;;		wreg
 13553 ;; Tracked objects:
 13554 ;;		On entry : 10/0
 13555 ;;		On exit  : 1F/5
 13556 ;;		Unchanged: 0/0
 13557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13558 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13562 ;;Total ram usage:        2 bytes
 13563 ;; Hardware stack levels used:    1
 13564 ;; Hardware stack levels required when called:    7
 13565 ;; This function calls:
 13566 ;;		Nothing
 13567 ;; This function is called by:
 13568 ;;		_Led_UpdateBright
 13569 ;;		i1_Led_UpdateBright
 13570 ;;		_Led_Ramp
 13571 ;; This function uses a non-reentrant model
 13572 ;;
 13573                           
 13574                           
 13575                           ;psect for function _PWM1_LoadDutyValue
 13576  1125                     _PWM1_LoadDutyValue:	
 13577                           
 13578                           ;Skip over the trampoline to the duplicate function for level 1
 13579  1125  1C7E               	btfss	126,0
 13580  1126  2928               	goto	l6032
 13581  1127  2931               	ljmp	i1l3904
 13582  1128                     _PWM1_LoadDutyValue$intlevel0:	
 13583  1128                     l6032:	
 13584                           ;incstack = 0
 13585                           ; Regs used in _PWM1_LoadDutyValue: [wreg]
 13586                           
 13587                           
 13588                           ;pwm.c: 15: CCPR1 = dutyValue;
 13589  1128  0020               	movlb	0	; select bank0
 13590  1129  082E               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 13591  112A  0025               	movlb	5	; select bank5
 13592  112B  0092               	movwf	18	;volatile
 13593  112C  0020               	movlb	0	; select bank0
 13594  112D  082D               	movf	PWM1_LoadDutyValue@dutyValue,w
 13595  112E  0025               	movlb	5	; select bank5
 13596  112F  0091               	movwf	17	;volatile
 13597  1130  0008               	return
 13598  1131                     __end_of_PWM1_LoadDutyValue:	
 13599  1131                     __ptext89:	
 13600 ;; *************** function i1_PWM1_LoadDutyValue *****************
 13601 ;; Defined at:
 13602 ;;		line 13 in file "driver/src/pwm.c"
 13603 ;; Parameters:    Size  Location     Type
 13604 ;;  dutyValue       2    0[COMMON] unsigned int 
 13605 ;; Auto vars:     Size  Location     Type
 13606 ;;		None
 13607 ;; Return value:  Size  Location     Type
 13608 ;;                  1    wreg      void 
 13609 ;; Registers used:
 13610 ;;		wreg
 13611 ;; Tracked objects:
 13612 ;;		On entry : 0/0
 13613 ;;		On exit  : 1F/5
 13614 ;;		Unchanged: 0/0
 13615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13616 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13619 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;Total ram usage:        2 bytes
 13621 ;; Hardware stack levels used:    1
 13622 ;; This function calls:
 13623 ;;		Nothing
 13624 ;; This function is called by:
 13625 ;; This function uses a non-reentrant model
 13626 ;;
 13627                           
 13628                           
 13629                           ;psect for function i1_PWM1_LoadDutyValue
 13630  1131                     i1_PWM1_LoadDutyValue:	
 13631  1131                     i1l3904:	
 13632                           ;incstack = 0
 13633                           ; Regs used in i1_PWM1_LoadDutyValue: [wreg]
 13634                           
 13635                           
 13636                           ;pwm.c: 15: CCPR1 = dutyValue;
 13637  1131  0871               	movf	i1PWM1_LoadDutyValue@dutyValue+1,w
 13638  1132  0025               	movlb	5	; select bank5
 13639  1133  0092               	movwf	18	;volatile
 13640  1134  0870               	movf	i1PWM1_LoadDutyValue@dutyValue,w
 13641  1135  0091               	movwf	17	;volatile
 13642  1136  0008               	return
 13643  1137                     __end_ofi1_PWM1_LoadDutyValue:	
 13644                           
 13645                           	psect	text58
 13646  1183                     __ptext58:	
 13647 ;; *************** function _PWM5_LoadDutyValue *****************
 13648 ;; Defined at:
 13649 ;;		line 61 in file "driver/src/pwm.c"
 13650 ;; Parameters:    Size  Location     Type
 13651 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13652 ;; Auto vars:     Size  Location     Type
 13653 ;;		None
 13654 ;; Return value:  Size  Location     Type
 13655 ;;                  1    wreg      void 
 13656 ;; Registers used:
 13657 ;;		wreg
 13658 ;; Tracked objects:
 13659 ;;		On entry : 10/0
 13660 ;;		On exit  : 1F/C
 13661 ;;		Unchanged: 0/0
 13662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13663 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;Total ram usage:        4 bytes
 13668 ;; Hardware stack levels used:    1
 13669 ;; Hardware stack levels required when called:    7
 13670 ;; This function calls:
 13671 ;;		Nothing
 13672 ;; This function is called by:
 13673 ;;		_Led_UpdateBright
 13674 ;;		i1_Led_UpdateBright
 13675 ;;		_Led_Ramp
 13676 ;; This function uses a non-reentrant model
 13677 ;;
 13678                           
 13679                           
 13680                           ;psect for function _PWM5_LoadDutyValue
 13681  1183                     _PWM5_LoadDutyValue:	
 13682                           
 13683                           ;Skip over the trampoline to the duplicate function for level 1
 13684  1183  1C7E               	btfss	126,0
 13685  1184  2986               	goto	l6040
 13686  1185  2998               	ljmp	i1l3912
 13687  1186                     _PWM5_LoadDutyValue$intlevel0:	
 13688  1186                     l6040:	
 13689                           ;incstack = 0
 13690                           ; Regs used in _PWM5_LoadDutyValue: [wreg]
 13691                           
 13692                           
 13693                           ;pwm.c: 63: PWM5DC = dutyValue << 6;
 13694  1186  0020               	movlb	0	; select bank0
 13695  1187  082E               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 13696  1188  00B0               	movwf	??_PWM5_LoadDutyValue+1
 13697  1189  082D               	movf	PWM5_LoadDutyValue@dutyValue,w
 13698  118A  00AF               	movwf	??_PWM5_LoadDutyValue
 13699  118B  3006               	movlw	6
 13700  118C                     u5165:	
 13701  118C  35AF               	lslf	??_PWM5_LoadDutyValue,f
 13702  118D  0DB0               	rlf	??_PWM5_LoadDutyValue+1,f
 13703  118E  0B89               	decfsz	9,f
 13704  118F  298C               	goto	u5165
 13705  1190  082F               	movf	??_PWM5_LoadDutyValue,w
 13706  1191  002C               	movlb	12	; select bank12
 13707  1192  0097               	movwf	23	;volatile
 13708  1193  0020               	movlb	0	; select bank0
 13709  1194  0830               	movf	??_PWM5_LoadDutyValue+1,w
 13710  1195  002C               	movlb	12	; select bank12
 13711  1196  0098               	movwf	24	;volatile
 13712  1197  0008               	return
 13713  1198                     __end_of_PWM5_LoadDutyValue:	
 13714  1198                     __ptext90:	
 13715 ;; *************** function i1_PWM5_LoadDutyValue *****************
 13716 ;; Defined at:
 13717 ;;		line 61 in file "driver/src/pwm.c"
 13718 ;; Parameters:    Size  Location     Type
 13719 ;;  dutyValue       2    0[COMMON] unsigned int 
 13720 ;; Auto vars:     Size  Location     Type
 13721 ;;		None
 13722 ;; Return value:  Size  Location     Type
 13723 ;;                  1    wreg      void 
 13724 ;; Registers used:
 13725 ;;		wreg
 13726 ;; Tracked objects:
 13727 ;;		On entry : 0/0
 13728 ;;		On exit  : 1F/C
 13729 ;;		Unchanged: 0/0
 13730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13731 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;Total ram usage:        4 bytes
 13736 ;; Hardware stack levels used:    1
 13737 ;; This function calls:
 13738 ;;		Nothing
 13739 ;; This function is called by:
 13740 ;; This function uses a non-reentrant model
 13741 ;;
 13742                           
 13743                           
 13744                           ;psect for function i1_PWM5_LoadDutyValue
 13745  1198                     i1_PWM5_LoadDutyValue:	
 13746  1198                     i1l3912:	
 13747                           ;incstack = 0
 13748                           ; Regs used in i1_PWM5_LoadDutyValue: [wreg]
 13749                           
 13750                           
 13751                           ;pwm.c: 63: PWM5DC = dutyValue << 6;
 13752  1198  0871               	movf	i1PWM5_LoadDutyValue@dutyValue+1,w
 13753  1199  00F3               	movwf	??i1_PWM5_LoadDutyValue+1
 13754  119A  0870               	movf	i1PWM5_LoadDutyValue@dutyValue,w
 13755  119B  00F2               	movwf	??i1_PWM5_LoadDutyValue
 13756  119C  3006               	movlw	6
 13757  119D                     u261_25:	
 13758  119D  35F2               	lslf	??i1_PWM5_LoadDutyValue,f
 13759  119E  0DF3               	rlf	??i1_PWM5_LoadDutyValue+1,f
 13760  119F  0B89               	decfsz	9,f
 13761  11A0  299D               	goto	u261_25
 13762  11A1  0872               	movf	??i1_PWM5_LoadDutyValue,w
 13763  11A2  002C               	movlb	12	; select bank12
 13764  11A3  0097               	movwf	23	;volatile
 13765  11A4  0873               	movf	??i1_PWM5_LoadDutyValue+1,w
 13766  11A5  0098               	movwf	24	;volatile
 13767  11A6  0008               	return
 13768  11A7                     __end_ofi1_PWM5_LoadDutyValue:	
 13769                           
 13770                           	psect	intentry
 13771  0004                     __pintentry:	
 13772 ;; *************** function _ISR *****************
 13773 ;; Defined at:
 13774 ;;		line 74 in file "user/src/main.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;		None
 13777 ;; Auto vars:     Size  Location     Type
 13778 ;;		None
 13779 ;; Return value:  Size  Location     Type
 13780 ;;                  1    wreg      void 
 13781 ;; Registers used:
 13782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13783 ;; Tracked objects:
 13784 ;;		On entry : 0/0
 13785 ;;		On exit  : 0/0
 13786 ;;		Unchanged: 0/0
 13787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;Total ram usage:        0 bytes
 13793 ;; Hardware stack levels used:    1
 13794 ;; Hardware stack levels required when called:    6
 13795 ;; This function calls:
 13796 ;;		_EUSART_Transmit_ISR
 13797 ;;		_TMR0_ISR
 13798 ;;		_TMR1_GATE_ISR
 13799 ;;		_TMR2_ISR
 13800 ;;		_TMR4_ISR
 13801 ;; This function is called by:
 13802 ;;		Interrupt level 1
 13803 ;; This function uses a non-reentrant model
 13804 ;;
 13805                           
 13806  0004                     _ISR:	
 13807                           
 13808                           ;incstack = 0
 13809  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13810                           
 13811                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13812  0005  3180               	pagesel	$
 13813                           
 13814                           ;main.c: 75: if (PIR1bits.TMR1GIF) {
 13815  0006  0020               	movlb	0	; select bank0
 13816  0007  1F91               	btfss	17,7	;volatile
 13817  0008  280D               	goto	i1l517
 13818                           
 13819                           ;main.c: 76: TMR1_GATE_ISR();
 13820  0009  3190  20E9  3180   	fcall	_TMR1_GATE_ISR
 13821                           
 13822                           ;main.c: 77: } else if (PIE1bits.TMR2IE && PIR1bits.TMR2IF) {
 13823  000C  282C               	goto	i1l526
 13824  000D                     i1l517:	
 13825  000D  0021               	movlb	1	; select bank1
 13826  000E  1C91               	btfss	17,1	;volatile
 13827  000F  2817               	goto	i1l519
 13828  0010  0020               	movlb	0	; select bank0
 13829  0011  1C91               	btfss	17,1	;volatile
 13830  0012  2817               	goto	i1l519
 13831                           
 13832                           ;main.c: 78: TMR2_ISR();
 13833  0013  3190  20F5  3180   	fcall	_TMR2_ISR
 13834                           
 13835                           ;main.c: 79: } else if (PIR0bits.TMR0IF) {
 13836  0016  282C               	goto	i1l526
 13837  0017                     i1l519:	
 13838  0017  0020               	movlb	0	; select bank0
 13839  0018  1E90               	btfss	16,5	;volatile
 13840  0019  281E               	goto	i1l521
 13841                           
 13842                           ;main.c: 80: TMR0_ISR();
 13843  001A  3190  20DD  3180   	fcall	_TMR0_ISR
 13844                           
 13845                           ;main.c: 81: } else if (PIR2bits.TMR4IF) {
 13846  001D  282C               	goto	i1l526
 13847  001E                     i1l521:	
 13848  001E  1C92               	btfss	18,1	;volatile
 13849  001F  2824               	goto	i1l523
 13850                           
 13851                           ;main.c: 82: TMR4_ISR();
 13852  0020  3191  2101  3180   	fcall	_TMR4_ISR
 13853                           
 13854                           ;main.c: 83: } else if (PIE1bits.TXIE && PIR1bits.TXIF) {
 13855  0023  282C               	goto	i1l526
 13856  0024                     i1l523:	
 13857  0024  0021               	movlb	1	; select bank1
 13858  0025  1E11               	btfss	17,4	;volatile
 13859  0026  282C               	goto	i1l526
 13860  0027  0020               	movlb	0	; select bank0
 13861  0028  1E11               	btfss	17,4	;volatile
 13862  0029  282C               	goto	i1l526
 13863                           
 13864                           ;main.c: 84: EUSART_Transmit_ISR();
 13865  002A  3187  27E1         	fcall	_EUSART_Transmit_ISR
 13866  002C                     i1l526:	
 13867  002C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13868  002D  0009               	retfie
 13869  002E                     __end_of_ISR:	
 13870                           
 13871                           	psect	text69
 13872  1101                     __ptext69:	
 13873 ;; *************** function _TMR4_ISR *****************
 13874 ;; Defined at:
 13875 ;;		line 27 in file "driver/src/tmr4.c"
 13876 ;; Parameters:    Size  Location     Type
 13877 ;;		None
 13878 ;; Auto vars:     Size  Location     Type
 13879 ;;		None
 13880 ;; Return value:  Size  Location     Type
 13881 ;;                  1    wreg      void 
 13882 ;; Registers used:
 13883 ;;		wreg, status,2, status,0, pclath, cstack
 13884 ;; Tracked objects:
 13885 ;;		On entry : 1F/0
 13886 ;;		On exit  : 0/0
 13887 ;;		Unchanged: 0/0
 13888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13893 ;;Total ram usage:        0 bytes
 13894 ;; Hardware stack levels used:    1
 13895 ;; Hardware stack levels required when called:    2
 13896 ;; This function calls:
 13897 ;;		Absolute function
 13898 ;;		_Led_Notice
 13899 ;; This function is called by:
 13900 ;;		_ISR
 13901 ;; This function uses a non-reentrant model
 13902 ;;
 13903                           
 13904                           
 13905                           ;psect for function _TMR4_ISR
 13906  1101                     _TMR4_ISR:	
 13907                           
 13908                           ;tmr4.c: 29: PIR2bits.TMR4IF = 0;
 13909                           
 13910                           ;incstack = 0
 13911                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 13912  1101  1092               	bcf	18,1	;volatile
 13913                           
 13914                           ;tmr4.c: 31: if ( tmr4_isr_handler )
 13915  1102  0021               	movlb	1	; select bank1
 13916  1103  0864               	movf	_tmr4_isr_handler^(0+128),w
 13917  1104  0465               	iorwf	(_tmr4_isr_handler+1)^(0+128),w
 13918  1105  1903               	btfsc	3,2
 13919  1106  0008               	return
 13920                           
 13921                           ;tmr4.c: 32: {
 13922                           ;tmr4.c: 33: tmr4_isr_handler ( );
 13923  1107  0865               	movf	(_tmr4_isr_handler+1)^(0+128),w
 13924  1108  008A               	movwf	10
 13925  1109  0864               	movf	_tmr4_isr_handler^(0+128),w
 13926  110A  000A               	callw
 13927  110B  3191               	pagesel	$
 13928  110C  0008               	return
 13929  110D                     __end_of_TMR4_ISR:	
 13930                           
 13931                           	psect	text70
 13932  07A5                     __ptext70:	
 13933 ;; *************** function _Led_Notice *****************
 13934 ;; Defined at:
 13935 ;;		line 420 in file "user/src/led.c"
 13936 ;; Parameters:    Size  Location     Type
 13937 ;;		None
 13938 ;; Auto vars:     Size  Location     Type
 13939 ;;		None
 13940 ;; Return value:  Size  Location     Type
 13941 ;;                  1    wreg      void 
 13942 ;; Registers used:
 13943 ;;		wreg, status,2, status,0, pclath, cstack
 13944 ;; Tracked objects:
 13945 ;;		On entry : 1F/1
 13946 ;;		On exit  : 1E/0
 13947 ;;		Unchanged: 0/0
 13948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13951 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13952 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13953 ;;Total ram usage:        1 bytes
 13954 ;; Hardware stack levels used:    1
 13955 ;; Hardware stack levels required when called:    1
 13956 ;; This function calls:
 13957 ;;		_Led_TurnOffDirect
 13958 ;;		_Led_TurnOnDirect
 13959 ;;		_TMR4_StopTimer
 13960 ;; This function is called by:
 13961 ;;		_Interrupt_Initialize
 13962 ;;		_TMR4_ISR
 13963 ;; This function uses a non-reentrant model
 13964 ;;
 13965                           
 13966                           
 13967                           ;psect for function _Led_Notice
 13968  07A5                     _Led_Notice:	
 13969                           
 13970                           ;led.c: 421: static uint8_t cnt = 0;
 13971                           ;led.c: 422: if (gLedRunPara.mNoticeCount) {
 13972                           
 13973                           ;incstack = 0
 13974                           ; Regs used in _Led_Notice: [wreg+status,2+status,0+pclath+cstack]
 13975  07A5  0C5E               	rrf	(_gLedRunPara^(0+128)+20),w	;volatile
 13976  07A6  0C89               	rrf	9,f
 13977  07A7  393F               	andlw	63
 13978  07A8  1903               	skipnz
 13979  07A9  2FC8               	goto	i1l5040
 13980                           
 13981                           ;led.c: 423: cnt++;
 13982  07AA  0020               	movlb	0	; select bank0
 13983  07AB  0AD1               	incf	Led_Notice@cnt,f
 13984                           
 13985                           ;led.c: 424: if ((cnt & 0x07) == 0) {
 13986  07AC  0851               	movf	Led_Notice@cnt,w
 13987  07AD  3907               	andlw	7
 13988  07AE  1D03               	btfss	3,2
 13989  07AF  0008               	return
 13990                           
 13991                           ;led.c: 425: if (gLedRunPara.mNoticeStatus) {
 13992  07B0  0021               	movlb	1	; select bank1
 13993  07B1  1CDE               	btfss	(_gLedRunPara^(0+128)+20),1	;volatile
 13994  07B2  2FC4               	goto	i1l5036
 13995                           
 13996                           ;led.c: 426: Led_TurnOnDirect();
 13997  07B3  27D5               	fcall	_Led_TurnOnDirect
 13998                           
 13999                           ;led.c: 427: gLedRunPara.mNoticeCount--;
 14000  07B4  0021               	movlb	1	; select bank1
 14001  07B5  0C5E               	rrf	(_gLedRunPara^(0+128)+20),w	;volatile
 14002  07B6  00F0               	movwf	??_Led_Notice
 14003  07B7  0C70               	rrf	??_Led_Notice,w
 14004  07B8  393F               	andlw	63
 14005  07B9  00F0               	movwf	??_Led_Notice
 14006  07BA  03F0               	decf	??_Led_Notice,f
 14007  07BB  0DF0               	rlf	??_Led_Notice,f
 14008  07BC  0DF0               	rlf	??_Led_Notice,f
 14009  07BD  085E               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
 14010  07BE  0670               	xorwf	??_Led_Notice,w
 14011  07BF  3903               	andlw	-253
 14012  07C0  0670               	xorwf	??_Led_Notice,w
 14013  07C1  00DE               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
 14014                           
 14015                           ;led.c: 428: gLedRunPara.mNoticeStatus = 0;
 14016  07C2  10DE               	bcf	(_gLedRunPara^(0+128)+20),1	;volatile
 14017                           
 14018                           ;led.c: 429: } else {
 14019  07C3  0008               	return
 14020  07C4                     i1l5036:	
 14021                           
 14022                           ;led.c: 430: Led_TurnOffDirect();
 14023  07C4  27CC               	fcall	_Led_TurnOffDirect
 14024                           
 14025                           ;led.c: 431: gLedRunPara.mNoticeStatus = 1;
 14026  07C5  0021               	movlb	1	; select bank1
 14027  07C6  14DE               	bsf	(_gLedRunPara^(0+128)+20),1	;volatile
 14028  07C7  0008               	return
 14029  07C8                     i1l5040:	
 14030                           
 14031                           ;led.c: 435: TMR4_StopTimer();
 14032  07C8  27DE               	fcall	_TMR4_StopTimer
 14033                           
 14034                           ;led.c: 436: cnt = 0;
 14035  07C9  0020               	movlb	0	; select bank0
 14036  07CA  01D1               	clrf	Led_Notice@cnt
 14037  07CB  0008               	return
 14038  07CC                     __end_of_Led_Notice:	
 14039  07CC                     __ptext73:	
 14040 ;; *************** function _Led_TurnOffDirect *****************
 14041 ;; Defined at:
 14042 ;;		line 193 in file "user/src/led.c"
 14043 ;; Parameters:    Size  Location     Type
 14044 ;;		None
 14045 ;; Auto vars:     Size  Location     Type
 14046 ;;		None
 14047 ;; Return value:  Size  Location     Type
 14048 ;;                  1    wreg      void 
 14049 ;; Registers used:
 14050 ;;		None
 14051 ;; Tracked objects:
 14052 ;;		On entry : 1F/1
 14053 ;;		On exit  : 1F/C
 14054 ;;		Unchanged: 0/0
 14055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14060 ;;Total ram usage:        0 bytes
 14061 ;; Hardware stack levels used:    1
 14062 ;; This function calls:
 14063 ;;		Nothing
 14064 ;; This function is called by:
 14065 ;;		_Led_Notice
 14066 ;; This function uses a non-reentrant model
 14067 ;;
 14068                           
 14069                           
 14070                           ;psect for function _Led_TurnOffDirect
 14071  07CC                     _Led_TurnOffDirect:	
 14072                           
 14073                           ;led.c: 194: CCP1CON &= 0x7F;
 14074                           
 14075                           ;incstack = 0
 14076                           ; Regs used in _Led_TurnOffDirect: []
 14077  07CC  0025               	movlb	5	; select bank5
 14078  07CD  1393               	bcf	19,7	;volatile
 14079                           
 14080                           ;led.c: 195: CCP2CON &= 0x7F;
 14081  07CE  1397               	bcf	23,7	;volatile
 14082                           
 14083                           ;led.c: 196: CCP3CON &= 0x7F;
 14084  07CF  0026               	movlb	6	; select bank6
 14085  07D0  1393               	bcf	19,7	;volatile
 14086                           
 14087                           ;led.c: 197: CCP4CON &= 0x7F;
 14088  07D1  1397               	bcf	23,7	;volatile
 14089                           
 14090                           ;led.c: 198: PWM5CON &= 0x7F;
 14091  07D2  002C               	movlb	12	; select bank12
 14092  07D3  1399               	bcf	25,7	;volatile
 14093  07D4  0008               	return
 14094  07D5                     __end_of_Led_TurnOffDirect:	
 14095  07D5                     __ptext72:	
 14096 ;; *************** function _Led_TurnOnDirect *****************
 14097 ;; Defined at:
 14098 ;;		line 185 in file "user/src/led.c"
 14099 ;; Parameters:    Size  Location     Type
 14100 ;;		None
 14101 ;; Auto vars:     Size  Location     Type
 14102 ;;		None
 14103 ;; Return value:  Size  Location     Type
 14104 ;;                  1    wreg      void 
 14105 ;; Registers used:
 14106 ;;		None
 14107 ;; Tracked objects:
 14108 ;;		On entry : 1F/1
 14109 ;;		On exit  : 1F/C
 14110 ;;		Unchanged: 0/0
 14111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;Total ram usage:        0 bytes
 14117 ;; Hardware stack levels used:    1
 14118 ;; This function calls:
 14119 ;;		Nothing
 14120 ;; This function is called by:
 14121 ;;		_Led_Notice
 14122 ;; This function uses a non-reentrant model
 14123 ;;
 14124                           
 14125                           
 14126                           ;psect for function _Led_TurnOnDirect
 14127  07D5                     _Led_TurnOnDirect:	
 14128                           
 14129                           ;led.c: 186: CCP1CON |= 0x80;
 14130                           
 14131                           ;incstack = 0
 14132                           ; Regs used in _Led_TurnOnDirect: []
 14133  07D5  0025               	movlb	5	; select bank5
 14134  07D6  1793               	bsf	19,7	;volatile
 14135                           
 14136                           ;led.c: 187: CCP2CON |= 0x80;
 14137  07D7  1797               	bsf	23,7	;volatile
 14138                           
 14139                           ;led.c: 188: CCP3CON |= 0x80;
 14140  07D8  0026               	movlb	6	; select bank6
 14141  07D9  1793               	bsf	19,7	;volatile
 14142                           
 14143                           ;led.c: 189: CCP4CON |= 0x80;
 14144  07DA  1797               	bsf	23,7	;volatile
 14145                           
 14146                           ;led.c: 190: PWM5CON |= 0x80;
 14147  07DB  002C               	movlb	12	; select bank12
 14148  07DC  1799               	bsf	25,7	;volatile
 14149  07DD  0008               	return
 14150  07DE                     __end_of_Led_TurnOnDirect:	
 14151  07DE                     __ptext71:	
 14152 ;; *************** function _TMR4_StopTimer *****************
 14153 ;; Defined at:
 14154 ;;		line 22 in file "driver/src/tmr4.c"
 14155 ;; Parameters:    Size  Location     Type
 14156 ;;		None
 14157 ;; Auto vars:     Size  Location     Type
 14158 ;;		None
 14159 ;; Return value:  Size  Location     Type
 14160 ;;                  1    wreg      void 
 14161 ;; Registers used:
 14162 ;;		None
 14163 ;; Tracked objects:
 14164 ;;		On entry : 1F/1
 14165 ;;		On exit  : 1F/8
 14166 ;;		Unchanged: 0/0
 14167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14172 ;;Total ram usage:        0 bytes
 14173 ;; Hardware stack levels used:    1
 14174 ;; This function calls:
 14175 ;;		Nothing
 14176 ;; This function is called by:
 14177 ;;		_Led_Notice
 14178 ;; This function uses a non-reentrant model
 14179 ;;
 14180                           
 14181                           
 14182                           ;psect for function _TMR4_StopTimer
 14183  07DE                     _TMR4_StopTimer:	
 14184                           
 14185                           ;tmr4.c: 24: T4CONbits.TMR4ON = 0;
 14186                           
 14187                           ;incstack = 0
 14188                           ; Regs used in _TMR4_StopTimer: []
 14189  07DE  0028               	movlb	8	; select bank8
 14190  07DF  1117               	bcf	23,2	;volatile
 14191  07E0  0008               	return
 14192  07E1                     __end_of_TMR4_StopTimer:	
 14193                           
 14194                           	psect	text74
 14195  10F5                     __ptext74:	
 14196 ;; *************** function _TMR2_ISR *****************
 14197 ;; Defined at:
 14198 ;;		line 26 in file "driver/src/tmr2.c"
 14199 ;; Parameters:    Size  Location     Type
 14200 ;;		None
 14201 ;; Auto vars:     Size  Location     Type
 14202 ;;		None
 14203 ;; Return value:  Size  Location     Type
 14204 ;;                  1    wreg      void 
 14205 ;; Registers used:
 14206 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14207 ;; Tracked objects:
 14208 ;;		On entry : 1F/0
 14209 ;;		On exit  : 0/0
 14210 ;;		Unchanged: 0/0
 14211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14216 ;;Total ram usage:        0 bytes
 14217 ;; Hardware stack levels used:    1
 14218 ;; Hardware stack levels required when called:    5
 14219 ;; This function calls:
 14220 ;;		Absolute function
 14221 ;;		_Led_Run
 14222 ;; This function is called by:
 14223 ;;		_ISR
 14224 ;; This function uses a non-reentrant model
 14225 ;;
 14226                           
 14227                           
 14228                           ;psect for function _TMR2_ISR
 14229  10F5                     _TMR2_ISR:	
 14230                           
 14231                           ;tmr2.c: 28: PIR1bits.TMR2IF = 0;
 14232                           
 14233                           ;incstack = 0
 14234                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14235  10F5  1091               	bcf	17,1	;volatile
 14236                           
 14237                           ;tmr2.c: 29: if ( tmr2_isr_handler )
 14238  10F6  0021               	movlb	1	; select bank1
 14239  10F7  0866               	movf	_tmr2_isr_handler^(0+128),w
 14240  10F8  0467               	iorwf	(_tmr2_isr_handler+1)^(0+128),w
 14241  10F9  1903               	btfsc	3,2
 14242  10FA  0008               	return
 14243                           
 14244                           ;tmr2.c: 30: {
 14245                           ;tmr2.c: 31: tmr2_isr_handler ( );
 14246  10FB  0867               	movf	(_tmr2_isr_handler+1)^(0+128),w
 14247  10FC  008A               	movwf	10
 14248  10FD  0866               	movf	_tmr2_isr_handler^(0+128),w
 14249  10FE  000A               	callw
 14250  10FF  3190               	pagesel	$
 14251  1100  0008               	return
 14252  1101                     __end_of_TMR2_ISR:	
 14253                           
 14254                           	psect	text75
 14255  0030                     __ptext75:	
 14256 ;; *************** function _Led_Run *****************
 14257 ;; Defined at:
 14258 ;;		line 560 in file "user/src/led.c"
 14259 ;; Parameters:    Size  Location     Type
 14260 ;;		None
 14261 ;; Auto vars:     Size  Location     Type
 14262 ;;		None
 14263 ;; Return value:  Size  Location     Type
 14264 ;;                  1    wreg      void 
 14265 ;; Registers used:
 14266 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14267 ;; Tracked objects:
 14268 ;;		On entry : 1F/1
 14269 ;;		On exit  : 10/0
 14270 ;;		Unchanged: 0/0
 14271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14274 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14275 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14276 ;;Total ram usage:        1 bytes
 14277 ;; Hardware stack levels used:    1
 14278 ;; Hardware stack levels required when called:    4
 14279 ;; This function calls:
 14280 ;;		_IR_ScanLongPress
 14281 ;;		_Led_Ramp
 14282 ;;		_Led_RunMusic
 14283 ;; This function is called by:
 14284 ;;		_Interrupt_Initialize
 14285 ;;		_TMR2_ISR
 14286 ;; This function uses a non-reentrant model
 14287 ;;
 14288                           
 14289                           
 14290                           ;psect for function _Led_Run
 14291  0030                     _Led_Run:	
 14292                           
 14293                           ;led.c: 561: static uint8_t cnt = 0;
 14294                           ;led.c: 562: cnt++;
 14295                           
 14296                           ;incstack = 0
 14297                           ; Regs used in _Led_Run: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14298  0030  0020               	movlb	0	; select bank0
 14299  0031  0AD0               	incf	Led_Run@cnt,f
 14300                           
 14301                           ;led.c: 563: if ((cnt & 0x03) == 0x00) {
 14302  0032  0850               	movf	Led_Run@cnt,w
 14303  0033  3903               	andlw	3
 14304  0034  1D03               	btfss	3,2
 14305  0035  2837               	goto	i1l6556
 14306                           
 14307                           ;led.c: 564: IR_ScanLongPress();
 14308  0036  229D               	fcall	_IR_ScanLongPress
 14309  0037                     i1l6556:	
 14310                           
 14311                           ;led.c: 565: }
 14312                           ;led.c: 566: if ((ir_state.mSet == 4) || (ir_state.mSet == 5)) {
 14313  0037  0020               	movlb	0	; select bank0
 14314  0038  3197  27F6  3180   	fcall	PL160	;call to abstracted procedure
 14315  003B  1903               	skipnz
 14316  003C  2842               	goto	i1l6560
 14317  003D  3197  27F1  3180   	fcall	PL158	;call to abstracted procedure
 14318  0040  1D03               	skipz
 14319  0041  2843               	goto	i1l6562
 14320  0042                     i1l6560:	
 14321                           
 14322                           ;led.c: 567: Led_Ramp();
 14323  0042  286A               	ljmp	i1l6406
 14324  0043                     i1l6562:	
 14325                           ;led.c: 568: } else if (!gLedPara.mAuto) {
 14326                           
 14327  0043  2791  3180         	fcall	PL108	;call to abstracted procedure
 14328  0045  1801               	btfsc	1,0
 14329  0046  0008               	return
 14330                           
 14331                           ;led.c: 569: if (gLedPara.mOn && gLedPara.mMsc) {
 14332  0047  1C81               	btfss	1,1
 14333  0048  2842               	goto	i1l6560
 14334  0049  307B               	movlw	123
 14335  004A  0086               	movwf	6
 14336  004B  3023               	movlw	35
 14337  004C  2549  3180         	fcall	PL106	;call to abstracted procedure
 14338  004E  1903               	skipnz
 14339  004F  2842               	goto	i1l6560
 14340                           
 14341                           ;led.c: 570: if(gLedPara.mMsc == 1 || gLedPara.mMsc == 2 || gLedPara.mMsc == 3 || gLedPa
      +                          ra.mMsc == 4) {
 14342  0050  307B               	movlw	123
 14343  0051  0086               	movwf	6
 14344  0052  3023               	movlw	35
 14345  0053  2549  3180         	fcall	PL106	;call to abstracted procedure
 14346  0055  3A01               	xorlw	1
 14347  0056  1903               	skipnz
 14348  0057  2867               	goto	i1l6576
 14349  0058  2541  3180         	fcall	PL102	;call to abstracted procedure
 14350  005A  3A02               	xorlw	2
 14351  005B  1903               	skipnz
 14352  005C  2867               	goto	i1l6576
 14353  005D  2541  3180         	fcall	PL102	;call to abstracted procedure
 14354  005F  3A03               	xorlw	3
 14355  0060  1903               	skipnz
 14356  0061  2867               	goto	i1l6576
 14357  0062  2541  3180         	fcall	PL102	;call to abstracted procedure
 14358  0064  3A04               	xorlw	4
 14359  0065  1D03               	skipz
 14360  0066  2869               	goto	i1l824
 14361  0067                     i1l6576:	
 14362                           
 14363                           ;led.c: 571: Led_Ramp();
 14364  0067  206A  3180         	fcall	_Led_Ramp
 14365  0069                     i1l824:	
 14366                           
 14367                           ;led.c: 572: }
 14368                           ;led.c: 573: Led_RunMusic();
 14369  0069  28A0               	ljmp	i1l6434
 14370  006A                     __end_of_Led_Run:	
 14371                           ;led.c: 574: } else {
 14372                           
 14373  006A                     __ptext85:	
 14374 ;; *************** function _Led_Ramp *****************
 14375 ;; Defined at:
 14376 ;;		line 293 in file "user/src/led.c"
 14377 ;; Parameters:    Size  Location     Type
 14378 ;;		None
 14379 ;; Auto vars:     Size  Location     Type
 14380 ;;  i               1   10[COMMON] unsigned char 
 14381 ;; Return value:  Size  Location     Type
 14382 ;;                  1    wreg      void 
 14383 ;; Registers used:
 14384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14385 ;; Tracked objects:
 14386 ;;		On entry : 1E/0
 14387 ;;		On exit  : 14/4
 14388 ;;		Unchanged: 0/0
 14389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14391 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14392 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14393 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14394 ;;Total ram usage:        7 bytes
 14395 ;; Hardware stack levels used:    1
 14396 ;; Hardware stack levels required when called:    1
 14397 ;; This function calls:
 14398 ;;		i1_PWM1_LoadDutyValue
 14399 ;;		i1_PWM2_LoadDutyValue
 14400 ;;		i1_PWM3_LoadDutyValue
 14401 ;;		i1_PWM4_LoadDutyValue
 14402 ;;		i1_PWM5_LoadDutyValue
 14403 ;; This function is called by:
 14404 ;;		_Led_Run
 14405 ;; This function uses a non-reentrant model
 14406 ;;
 14407                           
 14408                           
 14409                           ;psect for function _Led_Ramp
 14410  006A                     _Led_Ramp:	
 14411  006A                     i1l6406:	
 14412                           ;incstack = 0
 14413                           ; Regs used in _Led_Ramp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14414                           
 14415                           
 14416                           ;led.c: 294: for (uint8_t i = 0; i < 5; i++) {
 14417  006A  01FA               	clrf	Led_Ramp@i
 14418  006B                     i1l6412:	
 14419                           
 14420                           ;led.c: 295: if (gLedRunPara.mCurrentBright[i] + 1 < gLedRunPara.mTargetBright[i]) {
 14421  006B  357A               	lslf	Led_Ramp@i,w
 14422  006C  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14423  006D  254F  3180         	fcall	PL122	;call to abstracted procedure
 14424  006F  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14425  0070  24E2  3180         	fcall	PL50	;call to abstracted procedure
 14426  0072  1803               	skipnc
 14427  0073  287A               	goto	i1l6416
 14428                           
 14429                           ;led.c: 296: gLedRunPara.mCurrentBright[i] += 1;
 14430  0074  357A               	lslf	Led_Ramp@i,w
 14431  0075  24FB  3180         	fcall	PL54	;call to abstracted procedure
 14432  0077  1803               	skipnc
 14433  0078  0A81               	incf	1,f
 14434                           
 14435                           ;led.c: 297: } else if (gLedRunPara.mCurrentBright[i] > gLedRunPara.mTargetBright[i] + 1
      +                          ) {
 14436  0079  2890               	goto	i1l6422
 14437  007A                     i1l6416:	
 14438  007A  357A               	lslf	Led_Ramp@i,w
 14439  007B  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14440  007C  254F  3180         	fcall	PL122	;call to abstracted procedure
 14441  007E  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14442  007F  24E2  3180         	fcall	PL50	;call to abstracted procedure
 14443  0081  1803               	skipnc
 14444  0082  2887               	goto	i1l6420
 14445                           
 14446                           ;led.c: 298: gLedRunPara.mCurrentBright[i] -= 1;
 14447  0083  357A               	lslf	Led_Ramp@i,w
 14448  0084  24D8  3180         	fcall	PL24	;call to abstracted procedure
 14449                           
 14450                           ;led.c: 299: } else {
 14451  0086  2890               	goto	i1l6422
 14452  0087                     i1l6420:	
 14453                           
 14454                           ;led.c: 300: gLedRunPara.mCurrentBright[i] = gLedRunPara.mTargetBright[i];
 14455  0087  357A               	lslf	Led_Ramp@i,w
 14456  0088  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14457  0089  0086               	movwf	6
 14458  008A  0187               	clrf	7
 14459  008B  357A               	lslf	Led_Ramp@i,w
 14460  008C  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14461  008D  3196  26F6  3180   	fcall	PL30	;call to abstracted procedure
 14462  0090                     i1l6422:	
 14463                           
 14464                           ;led.c: 301: }
 14465                           ;led.c: 302: loadDuty[i](gLedRunPara.mCurrentBright[i]);
 14466  0090  357A               	lslf	Led_Ramp@i,w
 14467  0091  2587               	fcall	PL138	;call to abstracted procedure
 14468  0092  357A               	lslf	Led_Ramp@i,w
 14469  0093  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
 14470  0094  0086               	movwf	6
 14471  0095  3F41               	moviw [1]fsr1
 14472  0096  008A               	movwf	10
 14473  0097  3F40               	moviw [0]fsr1
 14474  0098  000A               	callw
 14475  0099  3005               	movlw	5
 14476  009A  3180               	pagesel	$
 14477  009B  0AFA               	incf	Led_Ramp@i,f
 14478  009C  027A               	subwf	Led_Ramp@i,w
 14479  009D  1803               	btfsc	3,0
 14480  009E  0008               	return
 14481  009F  286B               	goto	i1l6412
 14482  00A0                     __end_of_Led_Ramp:	
 14483  00A0                     __ptext76:	
 14484 ;; *************** function _Led_RunMusic *****************
 14485 ;; Defined at:
 14486 ;;		line 528 in file "user/src/led.c"
 14487 ;; Parameters:    Size  Location     Type
 14488 ;;		None
 14489 ;; Auto vars:     Size  Location     Type
 14490 ;;		None
 14491 ;; Return value:  Size  Location     Type
 14492 ;;                  1    wreg      void 
 14493 ;; Registers used:
 14494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14495 ;; Tracked objects:
 14496 ;;		On entry : 10/0
 14497 ;;		On exit  : 10/0
 14498 ;;		Unchanged: 0/0
 14499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14502 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14503 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14504 ;;Total ram usage:        1 bytes
 14505 ;; Hardware stack levels used:    1
 14506 ;; Hardware stack levels required when called:    3
 14507 ;; This function calls:
 14508 ;;		_Audio_PlaySound
 14509 ;;		_Audio_SelectSound
 14510 ;;		_Led_DynamicCloud
 14511 ;;		_Led_DynamicMoon
 14512 ;;		_Led_DynamicStorm
 14513 ;;		_Led_DynamicWave
 14514 ;; This function is called by:
 14515 ;;		_Led_Run
 14516 ;; This function uses a non-reentrant model
 14517 ;;
 14518                           
 14519                           
 14520                           ;psect for function _Led_RunMusic
 14521  00A0                     _Led_RunMusic:	
 14522  00A0                     i1l6434:	
 14523                           ;incstack = 0
 14524                           ; Regs used in _Led_RunMusic: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14525                           
 14526                           
 14527                           ;led.c: 529: if (gLedRunPara.music_state < 32) {
 14528  00A0  3020               	movlw	32
 14529  00A1  0021               	movlb	1	; select bank1
 14530  00A2  0263               	subwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14531  00A3  1C03               	btfss	3,0
 14532  00A4  28BC               	goto	i1l6436
 14533                           
 14534                           ;led.c: 531: } else if (gLedRunPara.music_state == 32) {
 14535  00A5  3020               	movlw	32
 14536  00A6  0663               	xorwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14537  00A7  1D03               	btfss	3,2
 14538  00A8  28B2               	goto	i1l6444
 14539                           
 14540                           ;led.c: 532: Audio_SelectSound(gLedPara.mMsc);
 14541  00A9  307B               	movlw	123
 14542  00AA  0086               	movwf	6
 14543  00AB  3023               	movlw	35
 14544  00AC  0087               	movwf	7
 14545  00AD  258F  3180         	fcall	PL154	;call to abstracted procedure
 14546  00AF  20FD  3180         	fcall	_Audio_SelectSound
 14547  00B1  28BC               	goto	i1l6436
 14548  00B2                     i1l6444:	
 14549  00B2  3040               	movlw	64
 14550  00B3  0263               	subwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14551  00B4  1C03               	btfss	3,0
 14552  00B5  28BC               	goto	i1l6436
 14553  00B6  3040               	movlw	64
 14554  00B7  0663               	xorwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14555  00B8  1D03               	btfss	3,2
 14556  00B9  28BD               	goto	i1l6454
 14557                           
 14558                           ;led.c: 537: Audio_PlaySound();
 14559  00BA  20EB  3180         	fcall	_Audio_PlaySound
 14560  00BC                     i1l6436:	
 14561                           
 14562                           ;led.c: 530: gLedRunPara.music_state++;
 14563  00BC  0AE3               	incf	(_gLedRunPara^(0+128)+25),f	;volatile
 14564  00BD                     i1l6454:	
 14565                           
 14566                           ;led.c: 539: }
 14567                           ;led.c: 540: if (gLedPara.mDyn) {
 14568  00BD  307B               	movlw	123
 14569  00BE  0086               	movwf	6
 14570  00BF  3023               	movlw	35
 14571  00C0  0087               	movwf	7
 14572  00C1  1F81               	btfss	1,7
 14573  00C2  0008               	return
 14574                           
 14575                           ;led.c: 553: break;
 14576  00C3  258F  3180         	fcall	PL154	;call to abstracted procedure
 14577                           
 14578                           ; Switch size 1, requested type "space"
 14579                           ; Number of cases is 4, Range of values is 5 to 8
 14580                           ; switch strategies available:
 14581                           ; Name         Instructions Cycles
 14582                           ; simple_byte           13     7 (average)
 14583                           ; direct_byte           17     9 (fixed)
 14584                           ; jumptable            263     9 (fixed)
 14585                           ;	Chosen strategy is simple_byte
 14586  00C5  3A05               	xorlw	5	; case 5
 14587  00C6  1903               	skipnz
 14588  00C7  28D2               	goto	i1l6458
 14589  00C8  3A03               	xorlw	3	; case 6
 14590  00C9  1903               	skipnz
 14591  00CA  28D8               	goto	i1l6460
 14592  00CB  3A01               	xorlw	1	; case 7
 14593  00CC  1903               	skipnz
 14594  00CD  28DE               	goto	i1l6462
 14595  00CE  3A0F               	xorlw	15	; case 8
 14596  00CF  1903               	skipnz
 14597  00D0  28E4               	goto	i1l6464
 14598  00D1  28EA               	goto	i1l812
 14599  00D2                     i1l6458:	
 14600                           
 14601                           ;led.c: 543: Led_DynamicWave(audio_value);
 14602  00D2  0020               	movlb	0	; select bank0
 14603  00D3  084B               	movf	_audio_value+1,w	;volatile
 14604  00D4  00F7               	movwf	Led_DynamicWave@ptp+1
 14605  00D5  084A               	movf	_audio_value,w	;volatile
 14606  00D6  00F6               	movwf	Led_DynamicWave@ptp
 14607  00D7  297D               	ljmp	i1l6254
 14608  00D8                     i1l6460:	
 14609                           ;led.c: 544: break;
 14610                           
 14611                           
 14612                           ;led.c: 546: Led_DynamicMoon(audio_value);
 14613  00D8  0020               	movlb	0	; select bank0
 14614  00D9  084B               	movf	_audio_value+1,w	;volatile
 14615  00DA  00F7               	movwf	Led_DynamicMoon@ptp+1
 14616  00DB  084A               	movf	_audio_value,w	;volatile
 14617  00DC  00F6               	movwf	Led_DynamicMoon@ptp
 14618  00DD  292C               	ljmp	i1l6284
 14619  00DE                     i1l6462:	
 14620                           ;led.c: 547: break;
 14621                           
 14622                           
 14623                           ;led.c: 549: Led_DynamicCloud(audio_value);
 14624  00DE  0020               	movlb	0	; select bank0
 14625  00DF  084B               	movf	_audio_value+1,w	;volatile
 14626  00E0  00F7               	movwf	Led_DynamicCloud@ptp+1
 14627  00E1  084A               	movf	_audio_value,w	;volatile
 14628  00E2  00F6               	movwf	Led_DynamicCloud@ptp
 14629  00E3  2A2E               	ljmp	i1l6312
 14630  00E4                     i1l6464:	
 14631                           ;led.c: 550: break;
 14632                           
 14633                           
 14634                           ;led.c: 552: Led_DynamicStorm(audio_value);
 14635  00E4  0020               	movlb	0	; select bank0
 14636  00E5  084B               	movf	_audio_value+1,w	;volatile
 14637  00E6  00F7               	movwf	Led_DynamicStorm@ptp+1
 14638  00E7  084A               	movf	_audio_value,w	;volatile
 14639  00E8  00F6               	movwf	Led_DynamicStorm@ptp
 14640  00E9  29CE               	ljmp	i1l6352
 14641  00EA                     i1l812:	
 14642  00EA  0008               	return
 14643  00EB                     __end_of_Led_RunMusic:	
 14644  00EB                     __ptext83:	
 14645 ;; *************** function _Audio_PlaySound *****************
 14646 ;; Defined at:
 14647 ;;		line 5 in file "user/src/audio.c"
 14648 ;; Parameters:    Size  Location     Type
 14649 ;;		None
 14650 ;; Auto vars:     Size  Location     Type
 14651 ;;  checksum        1    1[COMMON] unsigned char 
 14652 ;; Return value:  Size  Location     Type
 14653 ;;                  1    wreg      void 
 14654 ;; Registers used:
 14655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14656 ;; Tracked objects:
 14657 ;;		On entry : 1F/1
 14658 ;;		On exit  : 1F/1
 14659 ;;		Unchanged: 0/0
 14660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14662 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14664 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14665 ;;Total ram usage:        1 bytes
 14666 ;; Hardware stack levels used:    1
 14667 ;; Hardware stack levels required when called:    1
 14668 ;; This function calls:
 14669 ;;		i1_EUSART_Write
 14670 ;; This function is called by:
 14671 ;;		_Led_RunMusic
 14672 ;; This function uses a non-reentrant model
 14673 ;;
 14674                           
 14675                           
 14676                           ;psect for function _Audio_PlaySound
 14677  00EB                     _Audio_PlaySound:	
 14678  00EB  307E               	movlw	126
 14679                           
 14680                           ;audio.c: 7: uint8_t checksum = 0x00;
 14681                           
 14682                           ;incstack = 0
 14683                           ; Regs used in _Audio_PlaySound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14684  00EC  01F1               	clrf	Audio_PlaySound@checksum
 14685                           
 14686                           ;audio.c: 8: EUSART_Write ( 0x7E );
 14687  00ED  2118  3180         	fcall	i1_EUSART_Write
 14688                           
 14689                           ;audio.c: 9: checksum ^= EUSART_Write ( 0x03 );
 14690  00EF  3003               	movlw	3
 14691  00F0  2118  3180         	fcall	i1_EUSART_Write
 14692  00F2  06F1               	xorwf	Audio_PlaySound@checksum,f
 14693                           
 14694                           ;audio.c: 10: checksum ^= EUSART_Write ( 0x11 );
 14695  00F3  3011               	movlw	17
 14696  00F4  2118  3180         	fcall	i1_EUSART_Write
 14697  00F6  06F1               	xorwf	Audio_PlaySound@checksum,f
 14698                           
 14699                           ;audio.c: 11: EUSART_Write ( checksum );
 14700  00F7  0871               	movf	Audio_PlaySound@checksum,w
 14701  00F8  2118  3180         	fcall	i1_EUSART_Write
 14702                           
 14703                           ;audio.c: 12: EUSART_Write ( 0xEF );
 14704  00FA  30EF               	movlw	239
 14705  00FB  2118               	fcall	i1_EUSART_Write
 14706  00FC  0008               	return
 14707  00FD                     __end_of_Audio_PlaySound:	
 14708  00FD                     __ptext82:	
 14709 ;; *************** function _Audio_SelectSound *****************
 14710 ;; Defined at:
 14711 ;;		line 25 in file "user/src/audio.c"
 14712 ;; Parameters:    Size  Location     Type
 14713 ;;  index           1    wreg     unsigned char 
 14714 ;; Auto vars:     Size  Location     Type
 14715 ;;  index           1    1[COMMON] unsigned char 
 14716 ;;  checksum        1    2[COMMON] unsigned char 
 14717 ;; Return value:  Size  Location     Type
 14718 ;;                  1    wreg      void 
 14719 ;; Registers used:
 14720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14721 ;; Tracked objects:
 14722 ;;		On entry : 1F/1
 14723 ;;		On exit  : 1F/1
 14724 ;;		Unchanged: 0/0
 14725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14727 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14729 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14730 ;;Total ram usage:        2 bytes
 14731 ;; Hardware stack levels used:    1
 14732 ;; Hardware stack levels required when called:    1
 14733 ;; This function calls:
 14734 ;;		i1_EUSART_Write
 14735 ;; This function is called by:
 14736 ;;		_Led_RunMusic
 14737 ;; This function uses a non-reentrant model
 14738 ;;
 14739                           
 14740                           
 14741                           ;psect for function _Audio_SelectSound
 14742  00FD                     _Audio_SelectSound:	
 14743                           
 14744                           ;incstack = 0
 14745                           ; Regs used in _Audio_SelectSound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14746                           ;Audio_SelectSound@index stored from wreg
 14747  00FD  00F1               	movwf	Audio_SelectSound@index
 14748  00FE  307E               	movlw	126
 14749                           
 14750                           ;audio.c: 27: uint8_t checksum = 0x00;
 14751  00FF  01F2               	clrf	Audio_SelectSound@checksum
 14752                           
 14753                           ;audio.c: 28: EUSART_Write ( 0x7E );
 14754  0100  2118  3180         	fcall	i1_EUSART_Write
 14755                           
 14756                           ;audio.c: 29: checksum ^= EUSART_Write ( 0x05 );
 14757  0102  3005               	movlw	5
 14758  0103  2118  3180         	fcall	i1_EUSART_Write
 14759  0105  06F2               	xorwf	Audio_SelectSound@checksum,f
 14760                           
 14761                           ;audio.c: 30: checksum ^= EUSART_Write ( 0x41 );
 14762  0106  3041               	movlw	65
 14763  0107  2118  3180         	fcall	i1_EUSART_Write
 14764  0109  06F2               	xorwf	Audio_SelectSound@checksum,f
 14765                           
 14766                           ;audio.c: 31: checksum ^= EUSART_Write ( 0x00 );
 14767  010A  3000               	movlw	0
 14768  010B  2118  3180         	fcall	i1_EUSART_Write
 14769  010D  06F2               	xorwf	Audio_SelectSound@checksum,f
 14770                           
 14771                           ;audio.c: 32: checksum ^= EUSART_Write ( index );
 14772  010E  0871               	movf	Audio_SelectSound@index,w
 14773  010F  2118  3180         	fcall	i1_EUSART_Write
 14774  0111  06F2               	xorwf	Audio_SelectSound@checksum,f
 14775                           
 14776                           ;audio.c: 33: EUSART_Write ( checksum );
 14777  0112  0872               	movf	Audio_SelectSound@checksum,w
 14778  0113  2118  3180         	fcall	i1_EUSART_Write
 14779                           
 14780                           ;audio.c: 34: EUSART_Write ( 0xEF );
 14781  0115  30EF               	movlw	239
 14782  0116  2118               	fcall	i1_EUSART_Write
 14783  0117  0008               	return
 14784  0118                     __end_of_Audio_SelectSound:	
 14785  0118                     __ptext84:	
 14786 ;; *************** function i1_EUSART_Write *****************
 14787 ;; Defined at:
 14788 ;;		line 32 in file "driver/src/eusart.c"
 14789 ;; Parameters:    Size  Location     Type
 14790 ;;  byte            1    wreg     unsigned char 
 14791 ;; Auto vars:     Size  Location     Type
 14792 ;;  byte            1    0[COMMON] unsigned char 
 14793 ;; Return value:  Size  Location     Type
 14794 ;;                  1    wreg      unsigned char 
 14795 ;; Registers used:
 14796 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14797 ;; Tracked objects:
 14798 ;;		On entry : 1F/1
 14799 ;;		On exit  : 1F/1
 14800 ;;		Unchanged: 0/0
 14801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14803 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14805 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14806 ;;Total ram usage:        1 bytes
 14807 ;; Hardware stack levels used:    1
 14808 ;; This function calls:
 14809 ;;		Nothing
 14810 ;; This function is called by:
 14811 ;;		_Audio_PlaySound
 14812 ;;		_Audio_SelectSound
 14813 ;; This function uses a non-reentrant model
 14814 ;;
 14815                           
 14816                           
 14817                           ;psect for function i1_EUSART_Write
 14818  0118                     i1_EUSART_Write:	
 14819                           
 14820                           ;incstack = 0
 14821                           ; Regs used in i1_EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 14822                           ;i1EUSART_Write@byte stored from wreg
 14823  0118  00F0               	movwf	i1EUSART_Write@byte
 14824  0119                     i1l4018:	
 14825                           ;eusart.c: 34: while ( 0 == txRemain );
 14826                           
 14827  0119  0020               	movlb	0	; select bank0
 14828  011A  085E               	movf	_txRemain,w
 14829  011B  1903               	btfsc	3,2
 14830  011C  2919               	goto	i1l4018
 14831                           
 14832                           ;eusart.c: 36: if ( !PIE1bits.TXIE )
 14833  011D  0021               	movlb	1	; select bank1
 14834  011E  1A11               	btfsc	17,4	;volatile
 14835  011F  2924               	goto	i1l95
 14836                           
 14837                           ;eusart.c: 37: {
 14838                           ;eusart.c: 38: TXREG = byte;
 14839  0120  0870               	movf	i1EUSART_Write@byte,w
 14840  0121  0023               	movlb	3	; select bank3
 14841  0122  009A               	movwf	26	;volatile
 14842                           
 14843                           ;eusart.c: 39: }
 14844  0123  2928               	goto	i1l4032
 14845  0124                     i1l95:	
 14846                           
 14847                           ;eusart.c: 40: else
 14848                           ;eusart.c: 41: {
 14849                           ;eusart.c: 42: PIE1bits.TXIE = 0;
 14850                           
 14851                           ;eusart.c: 43: txBuf[txHead++] = byte;
 14852  0124  256F  3180         	fcall	PL130	;call to abstracted procedure
 14853  0126  0870               	movf	i1EUSART_Write@byte,w
 14854                           
 14855                           ;eusart.c: 44: if ( sizeof (txBuf ) <= txHead )
 14856                           
 14857                           ;eusart.c: 45: {
 14858                           ;eusart.c: 46: txHead = 0;
 14859                           
 14860                           ;eusart.c: 47: }
 14861                           ;eusart.c: 48: txRemain--;
 14862  0127  2557               	fcall	PL124	;call to abstracted procedure
 14863  0128                     i1l4032:	
 14864                           
 14865                           ;eusart.c: 49: }
 14866                           ;eusart.c: 50: PIE1bits.TXIE = 1;
 14867  0128  0021               	movlb	1	; select bank1
 14868  0129  1611               	bsf	17,4	;volatile
 14869                           
 14870                           ;eusart.c: 51: return byte;
 14871  012A  0870               	movf	i1EUSART_Write@byte,w
 14872  012B  0008               	return
 14873  012C                     __end_ofi1_EUSART_Write:	
 14874  012C                     __ptext79:	
 14875 ;; *************** function _Led_DynamicMoon *****************
 14876 ;; Defined at:
 14877 ;;		line 458 in file "user/src/led.c"
 14878 ;; Parameters:    Size  Location     Type
 14879 ;;  ptp             2    6[COMMON] unsigned int 
 14880 ;; Auto vars:     Size  Location     Type
 14881 ;;  duty           10    0[BANK0 ] unsigned int [5]
 14882 ;;  val             2   10[BANK0 ] unsigned int 
 14883 ;;  i               1   12[BANK0 ] unsigned char 
 14884 ;; Return value:  Size  Location     Type
 14885 ;;                  1    wreg      void 
 14886 ;; Registers used:
 14887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14888 ;; Tracked objects:
 14889 ;;		On entry : 1F/0
 14890 ;;		On exit  : 14/4
 14891 ;;		Unchanged: 0/0
 14892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14893 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14894 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14895 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14896 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14897 ;;Total ram usage:       19 bytes
 14898 ;; Hardware stack levels used:    1
 14899 ;; Hardware stack levels required when called:    2
 14900 ;; This function calls:
 14901 ;;		i1_Led_UpdateBright
 14902 ;;		i1___wmul
 14903 ;; This function is called by:
 14904 ;;		_Led_RunMusic
 14905 ;; This function uses a non-reentrant model
 14906 ;;
 14907                           
 14908                           
 14909                           ;psect for function _Led_DynamicMoon
 14910  012C                     _Led_DynamicMoon:	
 14911  012C                     i1l6284:	
 14912                           ;incstack = 0
 14913                           ; Regs used in _Led_DynamicMoon: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14914                           
 14915                           
 14916                           ;led.c: 459: uint8_t i;
 14917                           ;led.c: 460: uint16_t val = ptp * ( 5 + GAIN[gLedPara.mVolume] );
 14918  012C  24C9  3180         	fcall	PL16	;call to abstracted procedure
 14919  012E  3005               	movlw	5
 14920  012F  01F1               	clrf	i1___wmul@multiplier+1
 14921  0130  07F0               	addwf	i1___wmul@multiplier,f
 14922  0131  1803               	skipnc
 14923  0132  0AF1               	incf	i1___wmul@multiplier+1,f
 14924  0133  0877               	movf	Led_DynamicMoon@ptp+1,w
 14925  0134  00F3               	movwf	i1___wmul@multiplicand+1
 14926  0135  0876               	movf	Led_DynamicMoon@ptp,w
 14927  0136  00F2               	movwf	i1___wmul@multiplicand
 14928  0137  2454  3180         	fcall	i1___wmul
 14929  0139  0871               	movf	?i1___wmul+1,w
 14930  013A  00AB               	movwf	Led_DynamicMoon@val+1
 14931  013B  0870               	movf	?i1___wmul,w
 14932  013C  00AA               	movwf	Led_DynamicMoon@val
 14933                           
 14934                           ;led.c: 461: uint16_t duty[5] = {0, 0, 1000, 200, 0};
 14935  013D  30AA               	movlw	low Led_DynamicMoon@F8362
 14936  013E  0086               	movwf	6
 14937  013F  3000               	movlw	high Led_DynamicMoon@F8362
 14938  0140  0087               	movwf	7
 14939  0141  3020               	movlw	low Led_DynamicMoon@duty
 14940  0142  0084               	movwf	4
 14941  0143  3000               	movlw	high Led_DynamicMoon@duty
 14942  0144  0085               	movwf	5
 14943  0145  300A               	movlw	10
 14944  0146  00F8               	movwf	??_Led_DynamicMoon
 14945  0147                     u541_20:	
 14946  0147  0016               	moviw fsr1++
 14947  0148  001A               	movwi fsr0++
 14948  0149  0BF8               	decfsz	??_Led_DynamicMoon,f
 14949  014A  2947               	goto	u541_20
 14950                           
 14951                           ;led.c: 462: if (duty[3] > val) {
 14952  014B  0827               	movf	Led_DynamicMoon@duty+7,w
 14953  014C  022B               	subwf	Led_DynamicMoon@val+1,w
 14954  014D  1D03               	skipz
 14955  014E  2951               	goto	u542_25
 14956  014F  0826               	movf	Led_DynamicMoon@duty+6,w
 14957  0150  022A               	subwf	Led_DynamicMoon@val,w
 14958  0151                     u542_25:	
 14959  0151  1803               	skipnc
 14960  0152  2958               	goto	i1l6292
 14961                           
 14962                           ;led.c: 463: duty[3] -= val;
 14963  0153  082A               	movf	Led_DynamicMoon@val,w
 14964  0154  02A6               	subwf	Led_DynamicMoon@duty+6,f
 14965  0155  082B               	movf	Led_DynamicMoon@val+1,w
 14966  0156  3BA7               	subwfb	Led_DynamicMoon@duty+7,f
 14967                           
 14968                           ;led.c: 464: } else {
 14969  0157  295A               	goto	i1l761
 14970  0158                     i1l6292:	
 14971                           
 14972                           ;led.c: 465: duty[3] = 0;
 14973  0158  01A6               	clrf	Led_DynamicMoon@duty+6
 14974  0159  01A7               	clrf	Led_DynamicMoon@duty+7
 14975  015A                     i1l761:	
 14976                           
 14977                           ;led.c: 466: }
 14978                           ;led.c: 467: for (i = 0; i < 5; i++) {
 14979  015A  01AC               	clrf	Led_DynamicMoon@i
 14980  015B                     i1l6298:	
 14981                           
 14982                           ;led.c: 468: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 14983  015B  352C               	lslf	Led_DynamicMoon@i,w
 14984  015C  3E20               	addlw	(low (Led_DynamicMoon@duty| 0))& (0+255)
 14985  015D  2567  3180         	fcall	PL128	;call to abstracted procedure
 14986  015F  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14987  0160  2535  3180         	fcall	PL94	;call to abstracted procedure
 14988  0162  1803               	skipnc
 14989  0163  296A               	goto	i1l6302
 14990                           
 14991                           ;led.c: 469: gLedRunPara.mCurrentBright[i]++;
 14992  0164  352C               	lslf	Led_DynamicMoon@i,w
 14993  0165  24FB  3180         	fcall	PL54	;call to abstracted procedure
 14994  0167  1803               	skipnc
 14995  0168  0A81               	incf	1,f
 14996                           
 14997                           ;led.c: 470: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 14998  0169  2976               	goto	i1l6306
 14999  016A                     i1l6302:	
 15000  016A  352C               	lslf	Led_DynamicMoon@i,w
 15001  016B  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15002  016C  2567  3180         	fcall	PL128	;call to abstracted procedure
 15003  016E  3E20               	addlw	(low (Led_DynamicMoon@duty| 0))& (0+255)
 15004  016F  2535  3180         	fcall	PL94	;call to abstracted procedure
 15005  0171  1803               	skipnc
 15006  0172  2976               	goto	i1l6306
 15007                           
 15008                           ;led.c: 471: gLedRunPara.mCurrentBright[i]--;
 15009  0173  352C               	lslf	Led_DynamicMoon@i,w
 15010  0174  24D8  3180         	fcall	PL24	;call to abstracted procedure
 15011  0176                     i1l6306:	
 15012  0176  3005               	movlw	5
 15013  0177  0AAC               	incf	Led_DynamicMoon@i,f
 15014  0178  022C               	subwf	Led_DynamicMoon@i,w
 15015  0179  1C03               	skipc
 15016  017A  295B               	goto	i1l6298
 15017                           
 15018                           ;led.c: 472: }
 15019                           ;led.c: 473: }
 15020                           ;led.c: 474: Led_UpdateBright();
 15021  017B  24B5               	fcall	i1_Led_UpdateBright
 15022  017C  0008               	return
 15023  017D                     __end_of_Led_DynamicMoon:	
 15024  017D                     __ptext77:	
 15025 ;; *************** function _Led_DynamicWave *****************
 15026 ;; Defined at:
 15027 ;;		line 440 in file "user/src/led.c"
 15028 ;; Parameters:    Size  Location     Type
 15029 ;;  ptp             2    6[COMMON] unsigned int 
 15030 ;; Auto vars:     Size  Location     Type
 15031 ;;  duty           10    0[BANK0 ] unsigned int [5]
 15032 ;;  val             2   10[BANK0 ] unsigned int 
 15033 ;;  i               1   12[BANK0 ] unsigned char 
 15034 ;; Return value:  Size  Location     Type
 15035 ;;                  1    wreg      void 
 15036 ;; Registers used:
 15037 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15038 ;; Tracked objects:
 15039 ;;		On entry : 1F/0
 15040 ;;		On exit  : 14/4
 15041 ;;		Unchanged: 0/0
 15042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15043 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15044 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15045 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15047 ;;Total ram usage:       19 bytes
 15048 ;; Hardware stack levels used:    1
 15049 ;; Hardware stack levels required when called:    2
 15050 ;; This function calls:
 15051 ;;		i1_Led_UpdateBright
 15052 ;;		i1___wmul
 15053 ;; This function is called by:
 15054 ;;		_Led_RunMusic
 15055 ;; This function uses a non-reentrant model
 15056 ;;
 15057                           
 15058                           
 15059                           ;psect for function _Led_DynamicWave
 15060  017D                     _Led_DynamicWave:	
 15061  017D                     i1l6254:	
 15062                           ;incstack = 0
 15063                           ; Regs used in _Led_DynamicWave: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15064                           
 15065                           
 15066                           ;led.c: 441: uint8_t i;
 15067                           ;led.c: 442: uint16_t val = ptp * ( 6 + GAIN[gLedPara.mVolume] );
 15068  017D  24C9  3180         	fcall	PL16	;call to abstracted procedure
 15069  017F  3006               	movlw	6
 15070  0180  01F1               	clrf	i1___wmul@multiplier+1
 15071  0181  07F0               	addwf	i1___wmul@multiplier,f
 15072  0182  1803               	skipnc
 15073  0183  0AF1               	incf	i1___wmul@multiplier+1,f
 15074  0184  0877               	movf	Led_DynamicWave@ptp+1,w
 15075  0185  00F3               	movwf	i1___wmul@multiplicand+1
 15076  0186  0876               	movf	Led_DynamicWave@ptp,w
 15077  0187  00F2               	movwf	i1___wmul@multiplicand
 15078  0188  2454  3180         	fcall	i1___wmul
 15079  018A  0871               	movf	?i1___wmul+1,w
 15080  018B  00AB               	movwf	Led_DynamicWave@val+1
 15081  018C  0870               	movf	?i1___wmul,w
 15082  018D  00AA               	movwf	Led_DynamicWave@val
 15083                           
 15084                           ;led.c: 443: uint16_t duty[5] = {500, 500, 500, 200, 500};
 15085  018E  30B4               	movlw	low Led_DynamicWave@F8352
 15086  018F  0086               	movwf	6
 15087  0190  3000               	movlw	high Led_DynamicWave@F8352
 15088  0191  0087               	movwf	7
 15089  0192  3020               	movlw	low Led_DynamicWave@duty
 15090  0193  0084               	movwf	4
 15091  0194  3000               	movlw	high Led_DynamicWave@duty
 15092  0195  0085               	movwf	5
 15093  0196  300A               	movlw	10
 15094  0197  00F8               	movwf	??_Led_DynamicWave
 15095  0198                     u536_20:	
 15096  0198  0016               	moviw fsr1++
 15097  0199  001A               	movwi fsr0++
 15098  019A  0BF8               	decfsz	??_Led_DynamicWave,f
 15099  019B  2998               	goto	u536_20
 15100                           
 15101                           ;led.c: 444: duty[3] += val;
 15102  019C  082A               	movf	Led_DynamicWave@val,w
 15103  019D  07A6               	addwf	Led_DynamicWave@duty+6,f
 15104  019E  082B               	movf	Led_DynamicWave@val+1,w
 15105  019F  3DA7               	addwfc	Led_DynamicWave@duty+7,f
 15106                           
 15107                           ;led.c: 445: if (duty[3] > 1000) {
 15108  01A0  3003               	movlw	3
 15109  01A1  0227               	subwf	Led_DynamicWave@duty+7,w
 15110  01A2  30E9               	movlw	233
 15111  01A3  1903               	skipnz
 15112  01A4  0226               	subwf	Led_DynamicWave@duty+6,w
 15113  01A5  1C03               	skipc
 15114  01A6  29AB               	goto	i1l6264
 15115                           
 15116                           ;led.c: 446: duty[3] = 1000;
 15117  01A7  30E8               	movlw	232
 15118  01A8  00A6               	movwf	Led_DynamicWave@duty+6
 15119  01A9  3003               	movlw	3
 15120  01AA  00A7               	movwf	Led_DynamicWave@duty+7
 15121  01AB                     i1l6264:	
 15122                           
 15123                           ;led.c: 447: }
 15124                           ;led.c: 448: for (i = 0; i < 5; i++) {
 15125  01AB  01AC               	clrf	Led_DynamicWave@i
 15126  01AC                     i1l6270:	
 15127                           
 15128                           ;led.c: 449: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 15129  01AC  352C               	lslf	Led_DynamicWave@i,w
 15130  01AD  3E20               	addlw	(low (Led_DynamicWave@duty| 0))& (0+255)
 15131  01AE  2577  3180         	fcall	PL132	;call to abstracted procedure
 15132  01B0  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15133  01B1  251D  3180         	fcall	PL82	;call to abstracted procedure
 15134  01B3  1803               	skipnc
 15135  01B4  29BB               	goto	i1l6274
 15136                           
 15137                           ;led.c: 450: gLedRunPara.mCurrentBright[i]++;
 15138  01B5  352C               	lslf	Led_DynamicWave@i,w
 15139  01B6  24FB  3180         	fcall	PL54	;call to abstracted procedure
 15140  01B8  1803               	skipnc
 15141  01B9  0A81               	incf	1,f
 15142                           
 15143                           ;led.c: 451: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 15144  01BA  29C7               	goto	i1l6278
 15145  01BB                     i1l6274:	
 15146  01BB  352C               	lslf	Led_DynamicWave@i,w
 15147  01BC  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15148  01BD  2577  3180         	fcall	PL132	;call to abstracted procedure
 15149  01BF  3E20               	addlw	(low (Led_DynamicWave@duty| 0))& (0+255)
 15150  01C0  251D  3180         	fcall	PL82	;call to abstracted procedure
 15151  01C2  1803               	skipnc
 15152  01C3  29C7               	goto	i1l6278
 15153                           
 15154                           ;led.c: 452: gLedRunPara.mCurrentBright[i]--;
 15155  01C4  352C               	lslf	Led_DynamicWave@i,w
 15156  01C5  24D8  3180         	fcall	PL24	;call to abstracted procedure
 15157  01C7                     i1l6278:	
 15158  01C7  3005               	movlw	5
 15159  01C8  0AAC               	incf	Led_DynamicWave@i,f
 15160  01C9  022C               	subwf	Led_DynamicWave@i,w
 15161  01CA  1C03               	skipc
 15162  01CB  29AC               	goto	i1l6270
 15163                           
 15164                           ;led.c: 453: }
 15165                           ;led.c: 454: }
 15166                           ;led.c: 455: Led_UpdateBright();
 15167  01CC  24B5               	fcall	i1_Led_UpdateBright
 15168  01CD  0008               	return
 15169  01CE                     __end_of_Led_DynamicWave:	
 15170  01CE                     __ptext78:	
 15171 ;; *************** function _Led_DynamicStorm *****************
 15172 ;; Defined at:
 15173 ;;		line 504 in file "user/src/led.c"
 15174 ;; Parameters:    Size  Location     Type
 15175 ;;  ptp             2    6[COMMON] unsigned int 
 15176 ;; Auto vars:     Size  Location     Type
 15177 ;;  duty           10    0[BANK0 ] unsigned int [5]
 15178 ;;  val             2   10[BANK0 ] unsigned int 
 15179 ;;  i               1   12[BANK0 ] unsigned char 
 15180 ;; Return value:  Size  Location     Type
 15181 ;;                  1    wreg      void 
 15182 ;; Registers used:
 15183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15184 ;; Tracked objects:
 15185 ;;		On entry : 1F/0
 15186 ;;		On exit  : 14/4
 15187 ;;		Unchanged: 0/0
 15188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15189 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15190 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15191 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15192 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15193 ;;Total ram usage:       19 bytes
 15194 ;; Hardware stack levels used:    1
 15195 ;; Hardware stack levels required when called:    2
 15196 ;; This function calls:
 15197 ;;		i1_Led_UpdateBright
 15198 ;;		i1___wmul
 15199 ;; This function is called by:
 15200 ;;		_Led_RunMusic
 15201 ;; This function uses a non-reentrant model
 15202 ;;
 15203                           
 15204                           
 15205                           ;psect for function _Led_DynamicStorm
 15206  01CE                     _Led_DynamicStorm:	
 15207  01CE                     i1l6352:	
 15208                           ;incstack = 0
 15209                           ; Regs used in _Led_DynamicStorm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15210                           
 15211                           
 15212                           ;led.c: 505: uint8_t i;
 15213                           ;led.c: 506: uint16_t val = ptp * ( 5 + GAIN[gLedPara.mVolume] );
 15214  01CE  24C9  3180         	fcall	PL16	;call to abstracted procedure
 15215  01D0  3005               	movlw	5
 15216  01D1  01F1               	clrf	i1___wmul@multiplier+1
 15217  01D2  07F0               	addwf	i1___wmul@multiplier,f
 15218  01D3  1803               	skipnc
 15219  01D4  0AF1               	incf	i1___wmul@multiplier+1,f
 15220  01D5  0877               	movf	Led_DynamicStorm@ptp+1,w
 15221  01D6  00F3               	movwf	i1___wmul@multiplicand+1
 15222  01D7  0876               	movf	Led_DynamicStorm@ptp,w
 15223  01D8  00F2               	movwf	i1___wmul@multiplicand
 15224  01D9  2454  3180         	fcall	i1___wmul
 15225  01DB  0871               	movf	?i1___wmul+1,w
 15226  01DC  00AB               	movwf	Led_DynamicStorm@val+1
 15227  01DD  0870               	movf	?i1___wmul,w
 15228  01DE  00AA               	movwf	Led_DynamicStorm@val
 15229                           
 15230                           ;led.c: 507: uint16_t duty[5] = {0, 0, 600, 64, 0};
 15231  01DF  3054               	movlw	low Led_DynamicStorm@F8382
 15232  01E0  0086               	movwf	6
 15233  01E1  3001               	movlw	high Led_DynamicStorm@F8382
 15234  01E2  0087               	movwf	7
 15235  01E3  3020               	movlw	low Led_DynamicStorm@duty
 15236  01E4  0084               	movwf	4
 15237  01E5  3000               	movlw	high Led_DynamicStorm@duty
 15238  01E6  0085               	movwf	5
 15239  01E7  300A               	movlw	10
 15240  01E8  00F8               	movwf	??_Led_DynamicStorm
 15241  01E9                     u553_20:	
 15242  01E9  0016               	moviw fsr1++
 15243  01EA  001A               	movwi fsr0++
 15244  01EB  0BF8               	decfsz	??_Led_DynamicStorm,f
 15245  01EC  29E9               	goto	u553_20
 15246                           
 15247                           ;led.c: 508: if (duty[2] > val) {
 15248  01ED  0825               	movf	Led_DynamicStorm@duty+5,w
 15249  01EE  022B               	subwf	Led_DynamicStorm@val+1,w
 15250  01EF  1D03               	skipz
 15251  01F0  29F3               	goto	u554_25
 15252  01F1  0824               	movf	Led_DynamicStorm@duty+4,w
 15253  01F2  022A               	subwf	Led_DynamicStorm@val,w
 15254  01F3                     u554_25:	
 15255  01F3  1803               	skipnc
 15256  01F4  29FA               	goto	i1l6360
 15257                           
 15258                           ;led.c: 509: duty[2] -= val;
 15259  01F5  082A               	movf	Led_DynamicStorm@val,w
 15260  01F6  02A4               	subwf	Led_DynamicStorm@duty+4,f
 15261  01F7  082B               	movf	Led_DynamicStorm@val+1,w
 15262  01F8  3BA5               	subwfb	Led_DynamicStorm@duty+5,f
 15263                           
 15264                           ;led.c: 510: } else {
 15265  01F9  29FC               	goto	i1l6362
 15266  01FA                     i1l6360:	
 15267                           
 15268                           ;led.c: 511: duty[2] = 0;
 15269  01FA  01A4               	clrf	Led_DynamicStorm@duty+4
 15270  01FB  01A5               	clrf	Led_DynamicStorm@duty+5
 15271  01FC                     i1l6362:	
 15272                           
 15273                           ;led.c: 512: }
 15274                           ;led.c: 513: duty[3] += val;
 15275  01FC  082A               	movf	Led_DynamicStorm@val,w
 15276  01FD  07A6               	addwf	Led_DynamicStorm@duty+6,f
 15277  01FE  082B               	movf	Led_DynamicStorm@val+1,w
 15278  01FF  3DA7               	addwfc	Led_DynamicStorm@duty+7,f
 15279                           
 15280                           ;led.c: 514: if( duty[3] > 1000 )
 15281  0200  3003               	movlw	3
 15282  0201  0227               	subwf	Led_DynamicStorm@duty+7,w
 15283  0202  30E9               	movlw	233
 15284  0203  1903               	skipnz
 15285  0204  0226               	subwf	Led_DynamicStorm@duty+6,w
 15286  0205  1C03               	skipc
 15287  0206  2A0B               	goto	i1l6368
 15288                           
 15289                           ;led.c: 515: {
 15290                           ;led.c: 516: duty[3] = 1000;
 15291  0207  30E8               	movlw	232
 15292  0208  00A6               	movwf	Led_DynamicStorm@duty+6
 15293  0209  3003               	movlw	3
 15294  020A  00A7               	movwf	Led_DynamicStorm@duty+7
 15295  020B                     i1l6368:	
 15296                           
 15297                           ;led.c: 517: }
 15298                           ;led.c: 518: for (i = 0; i < 5; i++) {
 15299  020B  01AC               	clrf	Led_DynamicStorm@i
 15300  020C                     i1l6374:	
 15301                           
 15302                           ;led.c: 519: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 15303  020C  352C               	lslf	Led_DynamicStorm@i,w
 15304  020D  3E20               	addlw	(low (Led_DynamicStorm@duty| 0))& (0+255)
 15305  020E  257F  3180         	fcall	PL134	;call to abstracted procedure
 15306  0210  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15307  0211  2529  3180         	fcall	PL90	;call to abstracted procedure
 15308  0213  1803               	skipnc
 15309  0214  2A1B               	goto	i1l6378
 15310                           
 15311                           ;led.c: 520: gLedRunPara.mCurrentBright[i]++;
 15312  0215  352C               	lslf	Led_DynamicStorm@i,w
 15313  0216  24FB  3180         	fcall	PL54	;call to abstracted procedure
 15314  0218  1803               	skipnc
 15315  0219  0A81               	incf	1,f
 15316                           
 15317                           ;led.c: 521: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 15318  021A  2A27               	goto	i1l6382
 15319  021B                     i1l6378:	
 15320  021B  352C               	lslf	Led_DynamicStorm@i,w
 15321  021C  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15322  021D  257F  3180         	fcall	PL134	;call to abstracted procedure
 15323  021F  3E20               	addlw	(low (Led_DynamicStorm@duty| 0))& (0+255)
 15324  0220  2529  3180         	fcall	PL90	;call to abstracted procedure
 15325  0222  1803               	skipnc
 15326  0223  2A27               	goto	i1l6382
 15327                           
 15328                           ;led.c: 522: gLedRunPara.mCurrentBright[i]--;
 15329  0224  352C               	lslf	Led_DynamicStorm@i,w
 15330  0225  24D8  3180         	fcall	PL24	;call to abstracted procedure
 15331  0227                     i1l6382:	
 15332  0227  3005               	movlw	5
 15333  0228  0AAC               	incf	Led_DynamicStorm@i,f
 15334  0229  022C               	subwf	Led_DynamicStorm@i,w
 15335  022A  1C03               	skipc
 15336  022B  2A0C               	goto	i1l6374
 15337                           
 15338                           ;led.c: 523: }
 15339                           ;led.c: 524: }
 15340                           ;led.c: 525: Led_UpdateBright();
 15341  022C  24B5               	fcall	i1_Led_UpdateBright
 15342  022D  0008               	return
 15343  022E                     __end_of_Led_DynamicStorm:	
 15344  022E                     __ptext80:	
 15345 ;; *************** function _Led_DynamicCloud *****************
 15346 ;; Defined at:
 15347 ;;		line 477 in file "user/src/led.c"
 15348 ;; Parameters:    Size  Location     Type
 15349 ;;  ptp             2    6[COMMON] unsigned int 
 15350 ;; Auto vars:     Size  Location     Type
 15351 ;;  duty           10    0[BANK0 ] unsigned int [5]
 15352 ;;  val             2   10[BANK0 ] unsigned int 
 15353 ;;  i               1   12[BANK0 ] unsigned char 
 15354 ;; Return value:  Size  Location     Type
 15355 ;;                  1    wreg      void 
 15356 ;; Registers used:
 15357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15358 ;; Tracked objects:
 15359 ;;		On entry : 1F/0
 15360 ;;		On exit  : 14/4
 15361 ;;		Unchanged: 0/0
 15362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15363 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15364 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15365 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15366 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15367 ;;Total ram usage:       19 bytes
 15368 ;; Hardware stack levels used:    1
 15369 ;; Hardware stack levels required when called:    2
 15370 ;; This function calls:
 15371 ;;		i1_Led_UpdateBright
 15372 ;;		i1___wmul
 15373 ;; This function is called by:
 15374 ;;		_Led_RunMusic
 15375 ;; This function uses a non-reentrant model
 15376 ;;
 15377                           
 15378                           
 15379                           ;psect for function _Led_DynamicCloud
 15380  022E                     _Led_DynamicCloud:	
 15381  022E                     i1l6312:	
 15382                           ;incstack = 0
 15383                           ; Regs used in _Led_DynamicCloud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15384                           
 15385                           
 15386                           ;led.c: 478: uint8_t i;
 15387                           ;led.c: 479: uint16_t val = ptp * ( 16 + GAIN[gLedPara.mVolume] );
 15388  022E  24C9  3180         	fcall	PL16	;call to abstracted procedure
 15389  0230  3010               	movlw	16
 15390  0231  01F1               	clrf	i1___wmul@multiplier+1
 15391  0232  07F0               	addwf	i1___wmul@multiplier,f
 15392  0233  1803               	skipnc
 15393  0234  0AF1               	incf	i1___wmul@multiplier+1,f
 15394  0235  0877               	movf	Led_DynamicCloud@ptp+1,w
 15395  0236  00F3               	movwf	i1___wmul@multiplicand+1
 15396  0237  0876               	movf	Led_DynamicCloud@ptp,w
 15397  0238  00F2               	movwf	i1___wmul@multiplicand
 15398  0239  2454  3180         	fcall	i1___wmul
 15399  023B  0871               	movf	?i1___wmul+1,w
 15400  023C  00AB               	movwf	Led_DynamicCloud@val+1
 15401  023D  0870               	movf	?i1___wmul,w
 15402  023E  00AA               	movwf	Led_DynamicCloud@val
 15403                           
 15404                           ;led.c: 480: uint16_t duty[5] = {200, 200, 400, 320, 400};
 15405  023F  30A0               	movlw	low Led_DynamicCloud@F8372
 15406  0240  0086               	movwf	6
 15407  0241  3000               	movlw	high Led_DynamicCloud@F8372
 15408  0242  0087               	movwf	7
 15409  0243  3020               	movlw	low Led_DynamicCloud@duty
 15410  0244  0084               	movwf	4
 15411  0245  3000               	movlw	high Led_DynamicCloud@duty
 15412  0246  0085               	movwf	5
 15413  0247  300A               	movlw	10
 15414  0248  00F8               	movwf	??_Led_DynamicCloud
 15415  0249                     u546_20:	
 15416  0249  0016               	moviw fsr1++
 15417  024A  001A               	movwi fsr0++
 15418  024B  0BF8               	decfsz	??_Led_DynamicCloud,f
 15419  024C  2A49               	goto	u546_20
 15420                           
 15421                           ;led.c: 481: duty[2] += val;
 15422  024D  082A               	movf	Led_DynamicCloud@val,w
 15423  024E  07A4               	addwf	Led_DynamicCloud@duty+4,f
 15424  024F  082B               	movf	Led_DynamicCloud@val+1,w
 15425  0250  3DA5               	addwfc	Led_DynamicCloud@duty+5,f
 15426                           
 15427                           ;led.c: 482: if (duty[2] > 1000) {
 15428  0251  3003               	movlw	3
 15429  0252  0225               	subwf	Led_DynamicCloud@duty+5,w
 15430  0253  30E9               	movlw	233
 15431  0254  1903               	skipnz
 15432  0255  0224               	subwf	Led_DynamicCloud@duty+4,w
 15433  0256  1C03               	skipc
 15434  0257  2A5C               	goto	i1l772
 15435                           
 15436                           ;led.c: 483: duty[2] = 1000;
 15437  0258  30E8               	movlw	232
 15438  0259  00A4               	movwf	Led_DynamicCloud@duty+4
 15439  025A  3003               	movlw	3
 15440  025B  00A5               	movwf	Led_DynamicCloud@duty+5
 15441  025C                     i1l772:	
 15442                           
 15443                           ;led.c: 484: }
 15444                           ;led.c: 485: if (duty[3] > val) {
 15445  025C  0827               	movf	Led_DynamicCloud@duty+7,w
 15446  025D  022B               	subwf	Led_DynamicCloud@val+1,w
 15447  025E  1D03               	skipz
 15448  025F  2A62               	goto	u548_25
 15449  0260  0826               	movf	Led_DynamicCloud@duty+6,w
 15450  0261  022A               	subwf	Led_DynamicCloud@val,w
 15451  0262                     u548_25:	
 15452  0262  1803               	skipnc
 15453  0263  2A69               	goto	i1l6324
 15454                           
 15455                           ;led.c: 486: duty[3] -= val;
 15456  0264  082A               	movf	Led_DynamicCloud@val,w
 15457  0265  02A6               	subwf	Led_DynamicCloud@duty+6,f
 15458  0266  082B               	movf	Led_DynamicCloud@val+1,w
 15459  0267  3BA7               	subwfb	Led_DynamicCloud@duty+7,f
 15460                           
 15461                           ;led.c: 487: } else {
 15462  0268  2A6B               	goto	i1l6326
 15463  0269                     i1l6324:	
 15464                           
 15465                           ;led.c: 488: duty[3] = 0;
 15466  0269  01A6               	clrf	Led_DynamicCloud@duty+6
 15467  026A  01A7               	clrf	Led_DynamicCloud@duty+7
 15468  026B                     i1l6326:	
 15469                           
 15470                           ;led.c: 489: }
 15471                           ;led.c: 490: duty[4] += val;
 15472  026B  082A               	movf	Led_DynamicCloud@val,w
 15473  026C  07A8               	addwf	Led_DynamicCloud@duty+8,f
 15474  026D  082B               	movf	Led_DynamicCloud@val+1,w
 15475  026E  3DA9               	addwfc	Led_DynamicCloud@duty+9,f
 15476                           
 15477                           ;led.c: 491: if (duty[4] > 1000) {
 15478  026F  3003               	movlw	3
 15479  0270  0229               	subwf	Led_DynamicCloud@duty+9,w
 15480  0271  30E9               	movlw	233
 15481  0272  1903               	skipnz
 15482  0273  0228               	subwf	Led_DynamicCloud@duty+8,w
 15483  0274  1C03               	skipc
 15484  0275  2A7A               	goto	i1l6332
 15485                           
 15486                           ;led.c: 492: duty[4] = 1000;
 15487  0276  30E8               	movlw	232
 15488  0277  00A8               	movwf	Led_DynamicCloud@duty+8
 15489  0278  3003               	movlw	3
 15490  0279  00A9               	movwf	Led_DynamicCloud@duty+9
 15491  027A                     i1l6332:	
 15492                           
 15493                           ;led.c: 493: }
 15494                           ;led.c: 494: for (i = 0; i < 5; i++) {
 15495  027A  01AC               	clrf	Led_DynamicCloud@i
 15496  027B                     i1l6338:	
 15497                           
 15498                           ;led.c: 495: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 15499  027B  352C               	lslf	Led_DynamicCloud@i,w
 15500  027C  3E20               	addlw	(low (Led_DynamicCloud@duty| 0))& (0+255)
 15501  027D  255F  3180         	fcall	PL126	;call to abstracted procedure
 15502  027F  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15503  0280  2511  3180         	fcall	PL80	;call to abstracted procedure
 15504  0282  1803               	skipnc
 15505  0283  2A8A               	goto	i1l6342
 15506                           
 15507                           ;led.c: 496: gLedRunPara.mCurrentBright[i]++;
 15508  0284  352C               	lslf	Led_DynamicCloud@i,w
 15509  0285  24FB  3180         	fcall	PL54	;call to abstracted procedure
 15510  0287  1803               	skipnc
 15511  0288  0A81               	incf	1,f
 15512                           
 15513                           ;led.c: 497: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 15514  0289  2A96               	goto	i1l6346
 15515  028A                     i1l6342:	
 15516  028A  352C               	lslf	Led_DynamicCloud@i,w
 15517  028B  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15518  028C  255F  3180         	fcall	PL126	;call to abstracted procedure
 15519  028E  3E20               	addlw	(low (Led_DynamicCloud@duty| 0))& (0+255)
 15520  028F  2511  3180         	fcall	PL80	;call to abstracted procedure
 15521  0291  1803               	skipnc
 15522  0292  2A96               	goto	i1l6346
 15523                           
 15524                           ;led.c: 498: gLedRunPara.mCurrentBright[i]--;
 15525  0293  352C               	lslf	Led_DynamicCloud@i,w
 15526  0294  24D8  3180         	fcall	PL24	;call to abstracted procedure
 15527  0296                     i1l6346:	
 15528  0296  3005               	movlw	5
 15529  0297  0AAC               	incf	Led_DynamicCloud@i,f
 15530  0298  022C               	subwf	Led_DynamicCloud@i,w
 15531  0299  1C03               	skipc
 15532  029A  2A7B               	goto	i1l6338
 15533                           
 15534                           ;led.c: 499: }
 15535                           ;led.c: 500: }
 15536                           ;led.c: 501: Led_UpdateBright();
 15537  029B  24B5               	fcall	i1_Led_UpdateBright
 15538  029C  0008               	return
 15539  029D                     __end_of_Led_DynamicCloud:	
 15540  029D                     __ptext91:	
 15541 ;; *************** function _IR_ScanLongPress *****************
 15542 ;; Defined at:
 15543 ;;		line 335 in file "user/src/ir.c"
 15544 ;; Parameters:    Size  Location     Type
 15545 ;;		None
 15546 ;; Auto vars:     Size  Location     Type
 15547 ;;  i               1    9[BANK0 ] unsigned char 
 15548 ;;  i               1    8[BANK0 ] unsigned char 
 15549 ;;  idx             1   10[BANK0 ] unsigned char 
 15550 ;; Return value:  Size  Location     Type
 15551 ;;                  1    wreg      void 
 15552 ;; Registers used:
 15553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15554 ;; Tracked objects:
 15555 ;;		On entry : 1F/0
 15556 ;;		On exit  : 16/0
 15557 ;;		Unchanged: 0/0
 15558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15560 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15561 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15562 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15563 ;;Total ram usage:        7 bytes
 15564 ;; Hardware stack levels used:    1
 15565 ;; Hardware stack levels required when called:    2
 15566 ;; This function calls:
 15567 ;;		_Led_SetCustom
 15568 ;;		i1_IR_GetIndex
 15569 ;;		i1_Led_StartNotice
 15570 ;;		i1_Util_DecValue
 15571 ;;		i1_Util_IncValue
 15572 ;; This function is called by:
 15573 ;;		_Led_Run
 15574 ;; This function uses a non-reentrant model
 15575 ;;
 15576                           
 15577                           
 15578                           ;psect for function _IR_ScanLongPress
 15579  029D                     _IR_ScanLongPress:	
 15580                           
 15581                           ;ir.c: 338: if (!ir_state.mKeyRpt) {
 15582                           
 15583                           ;incstack = 0
 15584                           ; Regs used in _IR_ScanLongPress: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15585  029D  18D4               	btfsc	_ir_state,1	;volatile
 15586  029E  2B4C               	goto	i1l4636
 15587                           
 15588                           ;ir.c: 339: cnt = 0;
 15589  029F  01C0               	clrf	IR_ScanLongPress@cnt
 15590  02A0  01C1               	clrf	IR_ScanLongPress@cnt+1
 15591  02A1  0008               	return
 15592  02A2                     i1l1109:	
 15593  02A2                     i1l4524:	
 15594                           
 15595                           ;ir.c: 344: case 0x59:
 15596                           ;ir.c: 345: case 0x45:
 15597                           ;ir.c: 346: case 0x44:
 15598                           ;ir.c: 347: case 0x41:
 15599                           ;ir.c: 348: idx = IR_GetIndex(keyValue);
 15600  02A2  084E               	movf	_keyValue,w	;volatile
 15601  02A3  2388  3180         	fcall	i1_IR_GetIndex
 15602  02A5  00AA               	movwf	IR_ScanLongPress@idx
 15603                           
 15604                           ;ir.c: 349: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 1000, 1);
 15605  02A6  352A               	lslf	IR_ScanLongPress@idx,w
 15606  02A7  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15607  02A8  00F0               	movwf	i1Util_IncValue@pSrc
 15608  02A9  30E8               	movlw	232
 15609  02AA  01F1               	clrf	i1Util_IncValue@pSrc+1
 15610  02AB  00F2               	movwf	i1Util_IncValue@max
 15611  02AC  3003               	movlw	3
 15612  02AD  00F3               	movwf	i1Util_IncValue@max+1
 15613  02AE  01F4               	clrf	i1Util_IncValue@delta
 15614  02AF  0AF4               	incf	i1Util_IncValue@delta,f
 15615  02B0  01F5               	clrf	i1Util_IncValue@delta+1
 15616  02B1  248F  3180         	fcall	i1_Util_IncValue
 15617  02B3                     L21:	
 15618                           
 15619                           ;ir.c: 350: if (ir_state.mSet == 0) {
 15620  02B3  0E54               	swapf	_ir_state,w	;volatile
 15621  02B4  0C89               	rrf	9,f
 15622  02B5  3907               	andlw	7
 15623  02B6  1D03               	skipz
 15624  02B7  0008               	return
 15625                           
 15626                           ;ir.c: 351: gLedPara.mBright[idx] = gLedRunPara.mTargetBright[idx];
 15627  02B8  352A               	lslf	IR_ScanLongPress@idx,w
 15628  02B9  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15629  02BA  0086               	movwf	6
 15630  02BB  0187               	clrf	7
 15631  02BC  082A               	movf	IR_ScanLongPress@idx,w
 15632  02BD  00A4               	movwf	??_IR_ScanLongPress
 15633  02BE  307E               	movlw	126
 15634  02BF  2508  3180         	fcall	PL70	;call to abstracted procedure
 15635  02C1  0084               	movwf	4
 15636  02C2  0825               	movf	??_IR_ScanLongPress+1,w
 15637  02C3  3D27               	addwfc	??_IR_ScanLongPress+3,w
 15638  02C4  2502               	fcall	PL58	;call to abstracted procedure
 15639  02C5  0008               	return
 15640  02C6                     i1l1116:	
 15641  02C6                     i1l4532:	
 15642                           
 15643                           ;ir.c: 355: case 0x55:
 15644                           ;ir.c: 356: case 0x49:
 15645                           ;ir.c: 357: case 0x48:
 15646                           ;ir.c: 358: case 0x40:
 15647                           ;ir.c: 359: idx = IR_GetIndex(keyValue);
 15648  02C6  084E               	movf	_keyValue,w	;volatile
 15649  02C7  2388  3180         	fcall	i1_IR_GetIndex
 15650  02C9  00AA               	movwf	IR_ScanLongPress@idx
 15651                           
 15652                           ;ir.c: 360: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 0, 1);
 15653  02CA  352A               	lslf	IR_ScanLongPress@idx,w
 15654  02CB  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15655  02CC  00F0               	movwf	i1Util_DecValue@pSrc
 15656  02CD  01F1               	clrf	i1Util_DecValue@pSrc+1
 15657  02CE  01F2               	clrf	i1Util_DecValue@min
 15658  02CF  01F3               	clrf	i1Util_DecValue@min+1
 15659  02D0  01F4               	clrf	i1Util_DecValue@delta
 15660  02D1  0AF4               	incf	i1Util_DecValue@delta,f
 15661  02D2  01F5               	clrf	i1Util_DecValue@delta+1
 15662  02D3  2469  3180         	fcall	i1_Util_DecValue
 15663  02D5  2AB3               	goto	L21
 15664  02D6                     i1l1121:	
 15665                           ;ir.c: 361: if (ir_state.mSet == 0) {
 15666                           
 15667  02D6                     i1l4540:	
 15668                           
 15669                           ;ir.c: 366: case 0x51:
 15670                           ;ir.c: 367: case 0x4D:
 15671                           ;ir.c: 368: case 0x4C:
 15672                           ;ir.c: 369: cnt++;
 15673                           
 15674                           ;ir.c: 370: if (cnt == 0x200) {
 15675  02D6  24F4  3180         	fcall	PL52	;call to abstracted procedure
 15676  02D8  1D03               	btfss	3,2
 15677  02D9  0008               	return
 15678                           
 15679                           ;ir.c: 371: ir_state.mKeyRpt = 0;
 15680  02DA  10D4               	bcf	_ir_state,1	;volatile
 15681                           
 15682                           ;ir.c: 372: idx = IR_GetIndex(keyValue);
 15683  02DB  084E               	movf	_keyValue,w	;volatile
 15684  02DC  2388  3180         	fcall	i1_IR_GetIndex
 15685  02DE  00AA               	movwf	IR_ScanLongPress@idx
 15686                           
 15687                           ;ir.c: 373: Led_SetCustom(idx, (uint16_t*) gLedRunPara.mTargetBright);
 15688  02DF  30D4               	movlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15689  02E0  00F6               	movwf	Led_SetCustom@pValue
 15690  02E1  082A               	movf	IR_ScanLongPress@idx,w
 15691  02E2  2417  3180         	fcall	_Led_SetCustom
 15692                           
 15693                           ;ir.c: 374: Led_StartNotice(1);
 15694  02E4  3001               	movlw	1
 15695  02E5  240B               	fcall	i1_Led_StartNotice
 15696                           
 15697                           ;ir.c: 375: gLedRunPara.mParaChanged = 1;
 15698  02E6  0021               	movlb	1	; select bank1
 15699  02E7  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 15700  02E8  0008               	return
 15701  02E9                     i1l4554:	
 15702                           
 15703                           ;ir.c: 380: cnt++;
 15704                           
 15705                           ;ir.c: 381: if (cnt == 0x200) {
 15706  02E9  24F4  3180         	fcall	PL52	;call to abstracted procedure
 15707  02EB  1D03               	btfss	3,2
 15708  02EC  0008               	return
 15709                           
 15710                           ;ir.c: 382: ir_state.mKeyRpt = 0;
 15711  02ED  10D4               	bcf	_ir_state,1	;volatile
 15712                           
 15713                           ;ir.c: 383: ir_state.mSet = 2;
 15714  02EE  0854               	movf	_ir_state,w	;volatile
 15715  02EF  391F               	andlw	-225
 15716  02F0  3840               	iorlw	64
 15717  02F1  00D4               	movwf	_ir_state	;volatile
 15718                           
 15719                           ;ir.c: 384: ir_state.tmIdx = 0;
 15720  02F2  01D5               	clrf	_ir_state+1	;volatile
 15721                           
 15722                           ;ir.c: 385: Led_StartNotice(1);
 15723  02F3  3001               	movlw	1
 15724  02F4  240B               	fcall	i1_Led_StartNotice
 15725  02F5  0008               	return
 15726  02F6                     i1l4566:	
 15727                           
 15728                           ;ir.c: 390: cnt++;
 15729                           
 15730                           ;ir.c: 391: if (cnt == 0x200) {
 15731  02F6  24F4  3180         	fcall	PL52	;call to abstracted procedure
 15732  02F8  1D03               	btfss	3,2
 15733  02F9  0008               	return
 15734                           
 15735                           ;ir.c: 392: ir_state.mKeyRpt = 0;
 15736  02FA  10D4               	bcf	_ir_state,1	;volatile
 15737                           
 15738                           ;ir.c: 393: ir_state.mSet = 3;
 15739  02FB  0854               	movf	_ir_state,w	;volatile
 15740  02FC  391F               	andlw	-225
 15741  02FD  3860               	iorlw	96
 15742  02FE  00D4               	movwf	_ir_state	;volatile
 15743                           
 15744                           ;ir.c: 394: ir_state.tmIdx = 0;
 15745  02FF  01D5               	clrf	_ir_state+1	;volatile
 15746                           
 15747                           ;ir.c: 395: Led_StartNotice(1);
 15748  0300  3001               	movlw	1
 15749  0301  240B               	fcall	i1_Led_StartNotice
 15750  0302  0008               	return
 15751  0303                     i1l4578:	
 15752                           
 15753                           ;ir.c: 400: cnt++;
 15754                           
 15755                           ;ir.c: 401: if (cnt == 0x200) {
 15756  0303  24F4  3180         	fcall	PL52	;call to abstracted procedure
 15757  0305  1D03               	btfss	3,2
 15758  0306  0008               	return
 15759                           
 15760                           ;ir.c: 402: ir_state.mKeyRpt = 0;
 15761  0307  10D4               	bcf	_ir_state,1	;volatile
 15762                           
 15763                           ;ir.c: 403: ir_state.mSet = 4;
 15764  0308  0854               	movf	_ir_state,w	;volatile
 15765  0309  391F               	andlw	-225
 15766  030A  3880               	iorlw	128
 15767  030B  00D4               	movwf	_ir_state	;volatile
 15768                           
 15769                           ;ir.c: 404: for (uint8_t i = 0; i < 5; i++) {
 15770  030C  01A8               	clrf	IR_ScanLongPress@i
 15771  030D                     i1l4592:	
 15772                           
 15773                           ;ir.c: 405: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
 15774  030D  0828               	movf	IR_ScanLongPress@i,w
 15775  030E  00A4               	movwf	??_IR_ScanLongPress
 15776  030F  30DA               	movlw	218
 15777  0310  2508               	fcall	PL70	;call to abstracted procedure
 15778  0311  0086               	movwf	6
 15779  0312  0825               	movf	??_IR_ScanLongPress+1,w
 15780  0313  3D27               	addwfc	??_IR_ScanLongPress+3,w
 15781  0314  0087               	movwf	7
 15782  0315  3528               	lslf	IR_ScanLongPress@i,w
 15783  0316  318D  25FE  3180   	fcall	PL22	;call to abstracted procedure
 15784  0319  3005               	movlw	5
 15785  031A  0AA8               	incf	IR_ScanLongPress@i,f
 15786  031B  0228               	subwf	IR_ScanLongPress@i,w
 15787  031C  1C03               	skipc
 15788  031D  2B0D               	goto	i1l4592
 15789                           
 15790                           ;ir.c: 406: }
 15791                           ;ir.c: 407: Led_StartNotice(1);
 15792  031E  3001               	movlw	1
 15793  031F  240B               	fcall	i1_Led_StartNotice
 15794  0320  0008               	return
 15795  0321                     i1l4600:	
 15796                           
 15797                           ;ir.c: 411: cnt++;
 15798                           
 15799                           ;ir.c: 412: if (cnt == 0x200) {
 15800  0321  24F4  3180         	fcall	PL52	;call to abstracted procedure
 15801  0323  1D03               	btfss	3,2
 15802  0324  0008               	return
 15803                           
 15804                           ;ir.c: 413: ir_state.mKeyRpt = 0;
 15805  0325  10D4               	bcf	_ir_state,1	;volatile
 15806                           
 15807                           ;ir.c: 414: ir_state.mSet = 5;
 15808  0326  0854               	movf	_ir_state,w	;volatile
 15809  0327  391F               	andlw	-225
 15810  0328  38A0               	iorlw	160
 15811  0329  00D4               	movwf	_ir_state	;volatile
 15812                           
 15813                           ;ir.c: 415: for (uint8_t i = 0; i < 5; i++) {
 15814  032A  01A9               	clrf	IR_ScanLongPress@i_1438
 15815  032B                     i1l4614:	
 15816                           
 15817                           ;ir.c: 416: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
 15818  032B  0829               	movf	IR_ScanLongPress@i_1438,w
 15819  032C  00A4               	movwf	??_IR_ScanLongPress
 15820  032D  30E6               	movlw	230
 15821  032E  2508               	fcall	PL70	;call to abstracted procedure
 15822  032F  0086               	movwf	6
 15823  0330  0825               	movf	??_IR_ScanLongPress+1,w
 15824  0331  3D27               	addwfc	??_IR_ScanLongPress+3,w
 15825  0332  0087               	movwf	7
 15826  0333  3529               	lslf	IR_ScanLongPress@i_1438,w
 15827  0334  318D  25FE  3180   	fcall	PL22	;call to abstracted procedure
 15828  0337  3005               	movlw	5
 15829  0338  0AA9               	incf	IR_ScanLongPress@i_1438,f
 15830  0339  0229               	subwf	IR_ScanLongPress@i_1438,w
 15831  033A  1C03               	skipc
 15832  033B  2B2B               	goto	i1l4614
 15833                           
 15834                           ;ir.c: 417: }
 15835                           ;ir.c: 418: Led_StartNotice(1);
 15836  033C  3001               	movlw	1
 15837  033D  240B               	fcall	i1_Led_StartNotice
 15838  033E  0008               	return
 15839  033F                     i1l4622:	
 15840                           
 15841                           ;ir.c: 422: cnt++;
 15842                           
 15843                           ;ir.c: 423: if (cnt == 0x200) {
 15844  033F  24F4  3180         	fcall	PL52	;call to abstracted procedure
 15845  0341  1D03               	btfss	3,2
 15846  0342  0008               	return
 15847                           
 15848                           ;ir.c: 424: ir_state.mKeyRpt = 0;
 15849  0343  10D4               	bcf	_ir_state,1	;volatile
 15850                           
 15851                           ;ir.c: 425: ir_state.mSet = 1;
 15852  0344  0854               	movf	_ir_state,w	;volatile
 15853  0345  391F               	andlw	-225
 15854  0346  3820               	iorlw	32
 15855  0347  00D4               	movwf	_ir_state	;volatile
 15856                           
 15857                           ;ir.c: 426: ir_state.tmIdx = 0;
 15858  0348  01D5               	clrf	_ir_state+1	;volatile
 15859                           
 15860                           ;ir.c: 427: Led_StartNotice(1);
 15861  0349  3001               	movlw	1
 15862  034A  240B               	fcall	i1_Led_StartNotice
 15863  034B  0008               	return
 15864  034C                     i1l4636:	
 15865  034C  084E               	movf	_keyValue,w	;volatile
 15866                           
 15867                           ; Switch size 1, requested type "space"
 15868                           ; Number of cases is 19, Range of values is 6 to 89
 15869                           ; switch strategies available:
 15870                           ; Name         Instructions Cycles
 15871                           ; simple_byte           58    30 (average)
 15872                           ; direct_byte          177     9 (fixed)
 15873                           ; jumptable            263     9 (fixed)
 15874                           ;	Chosen strategy is simple_byte
 15875  034D  3A06               	xorlw	6	; case 6
 15876  034E  1903               	skipnz
 15877  034F  2B3F               	goto	i1l4622
 15878  0350  3A16               	xorlw	22	; case 16
 15879  0351  1903               	skipnz
 15880  0352  2AE9               	goto	i1l4554
 15881  0353  3A01               	xorlw	1	; case 17
 15882  0354  1903               	skipnz
 15883  0355  2B03               	goto	i1l4578
 15884  0356  3A03               	xorlw	3	; case 18
 15885  0357  1903               	skipnz
 15886  0358  2AF6               	goto	i1l4566
 15887  0359  3A01               	xorlw	1	; case 19
 15888  035A  1903               	skipnz
 15889  035B  2B21               	goto	i1l4600
 15890  035C  3A53               	xorlw	83	; case 64
 15891  035D  1903               	skipnz
 15892  035E  2AC6               	goto	i1l4532
 15893  035F  3A01               	xorlw	1	; case 65
 15894  0360  1903               	skipnz
 15895  0361  2AA2               	goto	i1l4524
 15896  0362  3A05               	xorlw	5	; case 68
 15897  0363  1903               	skipnz
 15898  0364  2AA2               	goto	i1l4524
 15899  0365  3A01               	xorlw	1	; case 69
 15900  0366  1903               	skipnz
 15901  0367  2AA2               	goto	i1l4524
 15902  0368  3A0D               	xorlw	13	; case 72
 15903  0369  1903               	skipnz
 15904  036A  2AC6               	goto	i1l4532
 15905  036B  3A01               	xorlw	1	; case 73
 15906  036C  1903               	skipnz
 15907  036D  2AC6               	goto	i1l4532
 15908  036E  3A05               	xorlw	5	; case 76
 15909  036F  1903               	skipnz
 15910  0370  2AD6               	goto	i1l4540
 15911  0371  3A01               	xorlw	1	; case 77
 15912  0372  1903               	skipnz
 15913  0373  2AD6               	goto	i1l4540
 15914  0374  3A1D               	xorlw	29	; case 80
 15915  0375  1903               	skipnz
 15916  0376  2AD6               	goto	i1l1121
 15917  0377  3A01               	xorlw	1	; case 81
 15918  0378  1903               	skipnz
 15919  0379  2AD6               	goto	i1l4540
 15920  037A  3A05               	xorlw	5	; case 84
 15921  037B  1903               	skipnz
 15922  037C  2AC6               	goto	i1l1116
 15923  037D  3A01               	xorlw	1	; case 85
 15924  037E  1903               	skipnz
 15925  037F  2AC6               	goto	i1l4532
 15926  0380  3A0D               	xorlw	13	; case 88
 15927  0381  1903               	skipnz
 15928  0382  2AA2               	goto	i1l1109
 15929  0383  3A01               	xorlw	1	; case 89
 15930  0384  1903               	skipnz
 15931  0385  2AA2               	goto	i1l4524
 15932  0386  2B87               	goto	i1l1104
 15933  0387                     i1l1104:	
 15934  0387  0008               	return
 15935  0388                     __end_of_IR_ScanLongPress:	
 15936  0388                     __ptext96:	
 15937 ;; *************** function i1_IR_GetIndex *****************
 15938 ;; Defined at:
 15939 ;;		line 10 in file "user/src/ir.c"
 15940 ;; Parameters:    Size  Location     Type
 15941 ;;  keynum          1    wreg     unsigned char 
 15942 ;; Auto vars:     Size  Location     Type
 15943 ;;  keynum          1    1[COMMON] unsigned char 
 15944 ;;  IR_GetIndex     1    0[COMMON] unsigned char 
 15945 ;; Return value:  Size  Location     Type
 15946 ;;                  1    wreg      unsigned char 
 15947 ;; Registers used:
 15948 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15949 ;; Tracked objects:
 15950 ;;		On entry : 1F/0
 15951 ;;		On exit  : 1F/0
 15952 ;;		Unchanged: 1F/0
 15953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15955 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15957 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15958 ;;Total ram usage:        2 bytes
 15959 ;; Hardware stack levels used:    1
 15960 ;; This function calls:
 15961 ;;		Nothing
 15962 ;; This function is called by:
 15963 ;;		_IR_ScanLongPress
 15964 ;; This function uses a non-reentrant model
 15965 ;;
 15966                           
 15967                           
 15968                           ;psect for function i1_IR_GetIndex
 15969  0388                     i1_IR_GetIndex:	
 15970                           
 15971                           ;incstack = 0
 15972                           ; Regs used in i1_IR_GetIndex: [wreg-fsr0h+status,2+status,0]
 15973                           ;i1IR_GetIndex@keynum stored from wreg
 15974  0388  00F1               	movwf	i1IR_GetIndex@keynum
 15975                           
 15976                           ;ir.c: 11: uint8_t idx = 0xFF;
 15977  0389  30FF               	movlw	255
 15978  038A  00F0               	movwf	i1IR_GetIndex@idx
 15979                           
 15980                           ;ir.c: 12: switch (keynum) {
 15981  038B  2BA7               	goto	i1l4390
 15982  038C                     i1l4370:	
 15983                           
 15984                           ;ir.c: 14: case 0x54:
 15985                           ;ir.c: 15: case 0x50:
 15986                           ;ir.c: 16: idx = 0;
 15987  038C  01F0               	clrf	i1IR_GetIndex@idx
 15988                           
 15989                           ;ir.c: 17: break;
 15990  038D  2C09               	goto	i1l4392
 15991  038E                     i1l901:	
 15992                           
 15993                           ;ir.c: 19: case 0x55:
 15994                           ;ir.c: 20: case 0x51:
 15995                           ;ir.c: 21: idx = 1;
 15996  038E  01F0               	clrf	i1IR_GetIndex@idx
 15997  038F  0AF0               	incf	i1IR_GetIndex@idx,f
 15998                           
 15999                           ;ir.c: 22: break;
 16000  0390  2C09               	goto	i1l4392
 16001  0391                     i1l4372:	
 16002                           
 16003                           ;ir.c: 24: case 0x49:
 16004                           ;ir.c: 25: case 0x4D:
 16005                           ;ir.c: 26: idx = 2;
 16006  0391  3002               	movlw	2
 16007  0392  2BA5               	goto	L30
 16008  0393                     i1l4374:	
 16009                           ;ir.c: 27: break;
 16010                           
 16011                           
 16012                           ;ir.c: 29: case 0x44:
 16013                           ;ir.c: 30: case 0x4C:
 16014                           ;ir.c: 31: idx = 3;
 16015  0393  3003               	movlw	3
 16016  0394  2BA5               	goto	L30
 16017  0395                     i1l4376:	
 16018                           ;ir.c: 32: break;
 16019                           
 16020                           
 16021                           ;ir.c: 34: case 0x40:
 16022                           ;ir.c: 35: idx = 4;
 16023  0395  3004               	movlw	4
 16024  0396  2BA5               	goto	L30
 16025  0397                     i1l912:	
 16026                           ;ir.c: 36: break;
 16027                           
 16028  0397                     i1l4378:	
 16029                           
 16030                           ;ir.c: 38: case 0x1D:
 16031                           ;ir.c: 39: case 0x1E:
 16032                           ;ir.c: 40: case 0x1F:
 16033                           ;ir.c: 41: idx = keynum - 0x1C + 1;
 16034  0397  0871               	movf	i1IR_GetIndex@keynum,w
 16035  0398  3EE5               	addlw	229
 16036  0399  2BA5               	goto	L30
 16037  039A                     i1l916:	
 16038                           ;ir.c: 42: break;
 16039                           
 16040  039A                     i1l4380:	
 16041                           
 16042                           ;ir.c: 44: case 0x15:
 16043                           ;ir.c: 45: case 0x16:
 16044                           ;ir.c: 46: case 0x17:
 16045                           ;ir.c: 47: idx = keynum - 0x14 + 5;
 16046  039A  0871               	movf	i1IR_GetIndex@keynum,w
 16047  039B  3EF1               	addlw	241
 16048  039C  2BA5               	goto	L30
 16049  039D                     i1l920:	
 16050                           ;ir.c: 48: break;
 16051                           
 16052  039D                     i1l4382:	
 16053                           
 16054                           ;ir.c: 50: case 0x0D:
 16055                           ;ir.c: 51: case 0x0E:
 16056                           ;ir.c: 52: case 0x0F:
 16057                           ;ir.c: 53: idx = keynum - 0x0C;
 16058  039D  0871               	movf	i1IR_GetIndex@keynum,w
 16059  039E  3EF4               	addlw	244
 16060  039F  2BA5               	goto	L30
 16061  03A0                     i1l924:	
 16062                           ;ir.c: 54: break;
 16063                           
 16064  03A0                     i1l4384:	
 16065                           
 16066                           ;ir.c: 56: case 0x09:
 16067                           ;ir.c: 57: case 0x0A:
 16068                           ;ir.c: 58: case 0x0B:
 16069                           ;ir.c: 59: idx = keynum - 0x08 + 4;
 16070  03A0  0871               	movf	i1IR_GetIndex@keynum,w
 16071  03A1  3EFC               	addlw	252
 16072  03A2  2BA5               	goto	L30
 16073  03A3                     i1l4386:	
 16074                           ;ir.c: 60: break;
 16075                           
 16076                           
 16077                           ;ir.c: 62: case 0x05:
 16078                           ;ir.c: 63: idx = keynum - 0x04 + 8;
 16079  03A3  0871               	movf	i1IR_GetIndex@keynum,w
 16080  03A4  3E04               	addlw	4
 16081  03A5                     L30:	
 16082  03A5  00F0               	movwf	i1IR_GetIndex@idx
 16083                           
 16084                           ;ir.c: 64: break;
 16085  03A6  2C09               	goto	i1l4392
 16086  03A7                     i1l4390:	
 16087  03A7  0871               	movf	i1IR_GetIndex@keynum,w
 16088                           
 16089                           ; Switch size 1, requested type "space"
 16090                           ; Number of cases is 32, Range of values is 4 to 89
 16091                           ; switch strategies available:
 16092                           ; Name         Instructions Cycles
 16093                           ; simple_byte           97    49 (average)
 16094                           ; direct_byte          181     9 (fixed)
 16095                           ; jumptable            263     9 (fixed)
 16096                           ;	Chosen strategy is simple_byte
 16097  03A8  3A04               	xorlw	4	; case 4
 16098  03A9  1903               	skipnz
 16099  03AA  2BA3               	goto	i1l4386
 16100  03AB  3A01               	xorlw	1	; case 5
 16101  03AC  1903               	skipnz
 16102  03AD  2BA3               	goto	i1l4386
 16103  03AE  3A0D               	xorlw	13	; case 8
 16104  03AF  1903               	skipnz
 16105  03B0  2BA0               	goto	i1l924
 16106  03B1  3A01               	xorlw	1	; case 9
 16107  03B2  1903               	skipnz
 16108  03B3  2BA0               	goto	i1l4384
 16109  03B4  3A03               	xorlw	3	; case 10
 16110  03B5  1903               	skipnz
 16111  03B6  2BA0               	goto	i1l4384
 16112  03B7  3A01               	xorlw	1	; case 11
 16113  03B8  1903               	skipnz
 16114  03B9  2BA0               	goto	i1l4384
 16115  03BA  3A07               	xorlw	7	; case 12
 16116  03BB  1903               	skipnz
 16117  03BC  2B9D               	goto	i1l920
 16118  03BD  3A01               	xorlw	1	; case 13
 16119  03BE  1903               	skipnz
 16120  03BF  2B9D               	goto	i1l4382
 16121  03C0  3A03               	xorlw	3	; case 14
 16122  03C1  1903               	skipnz
 16123  03C2  2B9D               	goto	i1l4382
 16124  03C3  3A01               	xorlw	1	; case 15
 16125  03C4  1903               	skipnz
 16126  03C5  2B9D               	goto	i1l4382
 16127  03C6  3A1B               	xorlw	27	; case 20
 16128  03C7  1903               	skipnz
 16129  03C8  2B9A               	goto	i1l916
 16130  03C9  3A01               	xorlw	1	; case 21
 16131  03CA  1903               	skipnz
 16132  03CB  2B9A               	goto	i1l4380
 16133  03CC  3A03               	xorlw	3	; case 22
 16134  03CD  1903               	skipnz
 16135  03CE  2B9A               	goto	i1l4380
 16136  03CF  3A01               	xorlw	1	; case 23
 16137  03D0  1903               	skipnz
 16138  03D1  2B9A               	goto	i1l4380
 16139  03D2  3A0B               	xorlw	11	; case 28
 16140  03D3  1903               	skipnz
 16141  03D4  2B97               	goto	i1l912
 16142  03D5  3A01               	xorlw	1	; case 29
 16143  03D6  1903               	skipnz
 16144  03D7  2B97               	goto	i1l4378
 16145  03D8  3A03               	xorlw	3	; case 30
 16146  03D9  1903               	skipnz
 16147  03DA  2B97               	goto	i1l4378
 16148  03DB  3A01               	xorlw	1	; case 31
 16149  03DC  1903               	skipnz
 16150  03DD  2B97               	goto	i1l4378
 16151  03DE  3A5F               	xorlw	95	; case 64
 16152  03DF  1903               	skipnz
 16153  03E0  2B95               	goto	i1l4376
 16154  03E1  3A01               	xorlw	1	; case 65
 16155  03E2  1903               	skipnz
 16156  03E3  2B95               	goto	i1l4376
 16157  03E4  3A05               	xorlw	5	; case 68
 16158  03E5  1903               	skipnz
 16159  03E6  2B93               	goto	i1l4374
 16160  03E7  3A01               	xorlw	1	; case 69
 16161  03E8  1903               	skipnz
 16162  03E9  2B91               	goto	i1l4372
 16163  03EA  3A0D               	xorlw	13	; case 72
 16164  03EB  1903               	skipnz
 16165  03EC  2B93               	goto	i1l4374
 16166  03ED  3A01               	xorlw	1	; case 73
 16167  03EE  1903               	skipnz
 16168  03EF  2B91               	goto	i1l4372
 16169  03F0  3A05               	xorlw	5	; case 76
 16170  03F1  1903               	skipnz
 16171  03F2  2B93               	goto	i1l4374
 16172  03F3  3A01               	xorlw	1	; case 77
 16173  03F4  1903               	skipnz
 16174  03F5  2B91               	goto	i1l4372
 16175  03F6  3A1D               	xorlw	29	; case 80
 16176  03F7  1903               	skipnz
 16177  03F8  2B8C               	goto	i1l4370
 16178  03F9  3A01               	xorlw	1	; case 81
 16179  03FA  1903               	skipnz
 16180  03FB  2B8E               	goto	i1l901
 16181  03FC  3A05               	xorlw	5	; case 84
 16182  03FD  1903               	skipnz
 16183  03FE  2B8C               	goto	i1l4370
 16184  03FF  3A01               	xorlw	1	; case 85
 16185  0400  1903               	skipnz
 16186  0401  2B8E               	goto	i1l901
 16187  0402  3A0D               	xorlw	13	; case 88
 16188  0403  1903               	skipnz
 16189  0404  2B8C               	goto	i1l4370
 16190  0405  3A01               	xorlw	1	; case 89
 16191  0406  1903               	skipnz
 16192  0407  2B8E               	goto	i1l901
 16193  0408  2C09               	goto	i1l4392
 16194  0409                     i1l4392:	
 16195                           
 16196                           ;ir.c: 68: return idx;
 16197  0409  0870               	movf	i1IR_GetIndex@idx,w
 16198  040A  0008               	return
 16199  040B                     __end_ofi1_IR_GetIndex:	
 16200  040B                     __ptext94:	
 16201 ;; *************** function i1_Led_StartNotice *****************
 16202 ;; Defined at:
 16203 ;;		line 415 in file "user/src/led.c"
 16204 ;; Parameters:    Size  Location     Type
 16205 ;;  cnt             1    wreg     unsigned char 
 16206 ;; Auto vars:     Size  Location     Type
 16207 ;;  cnt             1    1[COMMON] unsigned char 
 16208 ;; Return value:  Size  Location     Type
 16209 ;;                  1    wreg      void 
 16210 ;; Registers used:
 16211 ;;		wreg, status,2, status,0, pclath, cstack
 16212 ;; Tracked objects:
 16213 ;;		On entry : 1F/0
 16214 ;;		On exit  : 1F/8
 16215 ;;		Unchanged: 0/0
 16216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16218 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16219 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16220 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16221 ;;Total ram usage:        2 bytes
 16222 ;; Hardware stack levels used:    1
 16223 ;; Hardware stack levels required when called:    1
 16224 ;; This function calls:
 16225 ;;		i1_TMR4_StartTimer
 16226 ;; This function is called by:
 16227 ;;		_IR_ScanLongPress
 16228 ;; This function uses a non-reentrant model
 16229 ;;
 16230                           
 16231                           
 16232                           ;psect for function i1_Led_StartNotice
 16233  040B                     i1_Led_StartNotice:	
 16234                           
 16235                           ;incstack = 0
 16236                           ; Regs used in i1_Led_StartNotice: [wreg+status,2+status,0+pclath+cstack]
 16237                           ;i1Led_StartNotice@cnt stored from wreg
 16238  040B  00F1               	movwf	i1Led_StartNotice@cnt
 16239                           
 16240                           ;led.c: 416: gLedRunPara.mNoticeCount = cnt;
 16241  040C  00F0               	movwf	??i1_Led_StartNotice
 16242  040D  0DF0               	rlf	??i1_Led_StartNotice,f
 16243  040E  0DF0               	rlf	??i1_Led_StartNotice,f
 16244  040F  0021               	movlb	1	; select bank1
 16245  0410  085E               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
 16246  0411  0670               	xorwf	??i1_Led_StartNotice,w
 16247  0412  3903               	andlw	-253
 16248  0413  0670               	xorwf	??i1_Led_StartNotice,w
 16249  0414  00DE               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
 16250                           
 16251                           ;led.c: 417: TMR4_StartTimer();
 16252  0415  24C6               	fcall	i1_TMR4_StartTimer
 16253  0416  0008               	return
 16254  0417                     __end_ofi1_Led_StartNotice:	
 16255  0417                     __ptext97:	
 16256 ;; *************** function _Led_SetCustom *****************
 16257 ;; Defined at:
 16258 ;;		line 275 in file "user/src/led.c"
 16259 ;; Parameters:    Size  Location     Type
 16260 ;;  idx             1    wreg     unsigned char 
 16261 ;;  pValue          1    6[COMMON] PTR unsigned int 
 16262 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), 
 16263 ;; Auto vars:     Size  Location     Type
 16264 ;;  idx             1    2[BANK0 ] unsigned char 
 16265 ;;  i               1    3[BANK0 ] unsigned char 
 16266 ;;  value           2    0[BANK0 ] unsigned int 
 16267 ;; Return value:  Size  Location     Type
 16268 ;;                  1    wreg      void 
 16269 ;; Registers used:
 16270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16271 ;; Tracked objects:
 16272 ;;		On entry : 1F/0
 16273 ;;		On exit  : 1F/0
 16274 ;;		Unchanged: 0/0
 16275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16276 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16277 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16278 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16279 ;;      Totals:         7       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16280 ;;Total ram usage:       11 bytes
 16281 ;; Hardware stack levels used:    1
 16282 ;; Hardware stack levels required when called:    1
 16283 ;; This function calls:
 16284 ;;		i1___wmul
 16285 ;; This function is called by:
 16286 ;;		_IR_ScanLongPress
 16287 ;; This function uses a non-reentrant model
 16288 ;;
 16289                           
 16290                           
 16291                           ;psect for function _Led_SetCustom
 16292  0417                     _Led_SetCustom:	
 16293                           
 16294                           ;incstack = 0
 16295                           ; Regs used in _Led_SetCustom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16296                           ;Led_SetCustom@idx stored from wreg
 16297  0417  00A2               	movwf	Led_SetCustom@idx
 16298                           
 16299                           ;led.c: 276: uint16_t value;
 16300                           ;led.c: 277: if (idx >= 4) {
 16301  0418  3004               	movlw	4
 16302  0419  0222               	subwf	Led_SetCustom@idx,w
 16303  041A  1803               	btfsc	3,0
 16304  041B  0008               	return
 16305                           
 16306                           ;led.c: 279: }
 16307                           ;led.c: 280: for (uint8_t i = 0; i < 5; i++) {
 16308  041C  01A3               	clrf	Led_SetCustom@i
 16309  041D                     i1l4200:	
 16310                           
 16311                           ;led.c: 281: value = *pValue++;
 16312  041D  0876               	movf	Led_SetCustom@pValue,w
 16313  041E  0086               	movwf	6
 16314  041F  0187               	clrf	7
 16315  0420  3F40               	moviw [0]fsr1
 16316  0421  00A0               	movwf	Led_SetCustom@value
 16317  0422  3F41               	moviw [1]fsr1
 16318  0423  00A1               	movwf	Led_SetCustom@value+1
 16319  0424  3003               	movlw	3
 16320  0425  0AF6               	incf	Led_SetCustom@pValue,f
 16321  0426  0AF6               	incf	Led_SetCustom@pValue,f
 16322                           
 16323                           ;led.c: 285: if (value <= 1000)
 16324  0427  0221               	subwf	Led_SetCustom@value+1,w
 16325  0428  30E9               	movlw	233
 16326  0429  1903               	skipnz
 16327  042A  0220               	subwf	Led_SetCustom@value,w
 16328  042B  1803               	skipnc
 16329  042C  2C4E               	goto	i1l4208
 16330                           
 16331                           ;led.c: 287: {
 16332                           ;led.c: 288: gLedPara.mCustom[idx][i] = value;
 16333  042D  0823               	movf	Led_SetCustom@i,w
 16334  042E  00F7               	movwf	??_Led_SetCustom
 16335  042F  01F8               	clrf	??_Led_SetCustom+1
 16336  0430  35F7               	lslf	??_Led_SetCustom,f
 16337  0431  0DF8               	rlf	??_Led_SetCustom+1,f
 16338  0432  0822               	movf	Led_SetCustom@idx,w
 16339  0433  00F0               	movwf	i1___wmul@multiplier
 16340  0434  300A               	movlw	10
 16341  0435  01F1               	clrf	i1___wmul@multiplier+1
 16342  0436  00F2               	movwf	i1___wmul@multiplicand
 16343  0437  01F3               	clrf	i1___wmul@multiplicand+1
 16344  0438  2454  3180         	fcall	i1___wmul
 16345  043A  3088               	movlw	136
 16346  043B  00F9               	movwf	??_Led_SetCustom+2
 16347  043C  3023               	movlw	35
 16348  043D  00FA               	movwf	??_Led_SetCustom+3
 16349  043E  0870               	movf	?i1___wmul,w
 16350  043F  0779               	addwf	??_Led_SetCustom+2,w
 16351  0440  00FB               	movwf	??_Led_SetCustom+4
 16352  0441  0871               	movf	?i1___wmul+1,w
 16353  0442  3D7A               	addwfc	??_Led_SetCustom+3,w
 16354  0443  00FC               	movwf	??_Led_SetCustom+5
 16355  0444  0877               	movf	??_Led_SetCustom,w
 16356  0445  077B               	addwf	??_Led_SetCustom+4,w
 16357  0446  0086               	movwf	6
 16358  0447  0878               	movf	??_Led_SetCustom+1,w
 16359  0448  3D7C               	addwfc	??_Led_SetCustom+5,w
 16360  0449  0087               	movwf	7
 16361  044A  0820               	movf	Led_SetCustom@value,w
 16362  044B  3FC0               	movwi [0]fsr1
 16363  044C  0821               	movf	Led_SetCustom@value+1,w
 16364  044D  3FC1               	movwi [1]fsr1
 16365  044E                     i1l4208:	
 16366  044E  3005               	movlw	5
 16367  044F  0AA3               	incf	Led_SetCustom@i,f
 16368  0450  0223               	subwf	Led_SetCustom@i,w
 16369  0451  1803               	btfsc	3,0
 16370  0452  0008               	return
 16371  0453  2C1D               	goto	i1l4200
 16372  0454                     __end_of_Led_SetCustom:	
 16373  0454                     __ptext98:	
 16374 ;; *************** function i1___wmul *****************
 16375 ;; Defined at:
 16376 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
 16377 ;; Parameters:    Size  Location     Type
 16378 ;;  multiplier      2    0[COMMON] unsigned int 
 16379 ;;  multiplicand    2    2[COMMON] unsigned int 
 16380 ;; Auto vars:     Size  Location     Type
 16381 ;;  __wmul          2    4[COMMON] unsigned int 
 16382 ;; Return value:  Size  Location     Type
 16383 ;;                  2    0[COMMON] unsigned int 
 16384 ;; Registers used:
 16385 ;;		wreg, status,2, status,0
 16386 ;; Tracked objects:
 16387 ;;		On entry : 1F/0
 16388 ;;		On exit  : 1F/0
 16389 ;;		Unchanged: 1F/0
 16390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16391 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16392 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16394 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16395 ;;Total ram usage:        6 bytes
 16396 ;; Hardware stack levels used:    1
 16397 ;; This function calls:
 16398 ;;		Nothing
 16399 ;; This function is called by:
 16400 ;;		_Led_SetCustom
 16401 ;;		_Led_DynamicWave
 16402 ;;		_Led_DynamicMoon
 16403 ;;		_Led_DynamicCloud
 16404 ;;		_Led_DynamicStorm
 16405 ;; This function uses a non-reentrant model
 16406 ;;
 16407                           
 16408                           
 16409                           ;psect for function i1___wmul
 16410  0454                     i1___wmul:	
 16411                           
 16412                           ;incstack = 0
 16413                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 16414  0454  01F4               	clrf	i1___wmul@product
 16415  0455  01F5               	clrf	i1___wmul@product+1
 16416  0456                     i1l4054:	
 16417  0456  1C70               	btfss	i1___wmul@multiplier,0
 16418  0457  2C5C               	goto	i1l4058
 16419  0458  0872               	movf	i1___wmul@multiplicand,w
 16420  0459  07F4               	addwf	i1___wmul@product,f
 16421  045A  0873               	movf	i1___wmul@multiplicand+1,w
 16422  045B  3DF5               	addwfc	i1___wmul@product+1,f
 16423  045C                     i1l4058:	
 16424  045C  35F2               	lslf	i1___wmul@multiplicand,f
 16425  045D  0DF3               	rlf	i1___wmul@multiplicand+1,f
 16426  045E  36F1               	lsrf	i1___wmul@multiplier+1,f
 16427  045F  0CF0               	rrf	i1___wmul@multiplier,f
 16428  0460  0870               	movf	i1___wmul@multiplier,w
 16429  0461  0471               	iorwf	i1___wmul@multiplier+1,w
 16430  0462  1D03               	btfss	3,2
 16431  0463  2C56               	goto	i1l4054
 16432  0464  0875               	movf	i1___wmul@product+1,w
 16433  0465  00F1               	movwf	?i1___wmul+1
 16434  0466  0874               	movf	i1___wmul@product,w
 16435  0467  00F0               	movwf	?i1___wmul
 16436  0468  0008               	return
 16437  0469                     __end_ofi1___wmul:	
 16438  0469                     __ptext93:	
 16439 ;; *************** function i1_Util_DecValue *****************
 16440 ;; Defined at:
 16441 ;;		line 15 in file "user/src/util.c"
 16442 ;; Parameters:    Size  Location     Type
 16443 ;;  pSrc            2    0[COMMON] PTR unsigned int 
 16444 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), gLedPara(117), 
 16445 ;;  min             2    2[COMMON] unsigned int 
 16446 ;;  delta           2    4[COMMON] unsigned int 
 16447 ;; Auto vars:     Size  Location     Type
 16448 ;;		None
 16449 ;; Return value:  Size  Location     Type
 16450 ;;                  1    wreg      void 
 16451 ;; Registers used:
 16452 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16453 ;; Tracked objects:
 16454 ;;		On entry : 1F/0
 16455 ;;		On exit  : 1F/0
 16456 ;;		Unchanged: 1F/0
 16457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16458 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16460 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16461 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16462 ;;Total ram usage:       10 bytes
 16463 ;; Hardware stack levels used:    1
 16464 ;; This function calls:
 16465 ;;		Nothing
 16466 ;; This function is called by:
 16467 ;;		_IR_ScanLongPress
 16468 ;; This function uses a non-reentrant model
 16469 ;;
 16470                           
 16471                           
 16472                           ;psect for function i1_Util_DecValue
 16473  0469                     i1_Util_DecValue:	
 16474                           
 16475                           ;util.c: 17: if( *pSrc > min + delta )
 16476                           
 16477                           ;incstack = 0
 16478                           ; Regs used in i1_Util_DecValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 16479  0469  0870               	movf	i1Util_DecValue@pSrc,w
 16480  046A  0086               	movwf	6
 16481  046B  0871               	movf	i1Util_DecValue@pSrc+1,w
 16482  046C  0087               	movwf	7
 16483  046D  3F40               	moviw [0]fsr1
 16484  046E  00F6               	movwf	??i1_Util_DecValue
 16485  046F  3F41               	moviw [1]fsr1
 16486  0470  00F7               	movwf	??i1_Util_DecValue+1
 16487  0471  0874               	movf	i1Util_DecValue@delta,w
 16488  0472  0772               	addwf	i1Util_DecValue@min,w
 16489  0473  00F8               	movwf	??i1_Util_DecValue+2
 16490  0474  0875               	movf	i1Util_DecValue@delta+1,w
 16491  0475  3D73               	addwfc	i1Util_DecValue@min+1,w
 16492  0476  00F9               	movwf	??i1_Util_DecValue+3
 16493  0477  0877               	movf	??i1_Util_DecValue+1,w
 16494  0478  0279               	subwf	??i1_Util_DecValue+3,w
 16495  0479  1D03               	skipz
 16496  047A  2C7D               	goto	u315_25
 16497  047B  0876               	movf	??i1_Util_DecValue,w
 16498  047C  0278               	subwf	??i1_Util_DecValue+2,w
 16499  047D                     u315_25:	
 16500                           
 16501                           ;util.c: 18: {
 16502                           ;util.c: 19: (*pSrc) -= delta;
 16503  047D  0870               	movf	i1Util_DecValue@pSrc,w
 16504  047E  0086               	movwf	6
 16505  047F  0871               	movf	i1Util_DecValue@pSrc+1,w
 16506  0480  0087               	movwf	7
 16507  0481  1803               	skipnc
 16508  0482  2C8A               	goto	L23
 16509  0483  0874               	movf	i1Util_DecValue@delta,w
 16510  0484  0281               	subwf	1,f
 16511  0485  3141               	addfsr 1,1
 16512  0486  0875               	movf	i1Util_DecValue@delta+1,w
 16513  0487  3B81               	subwfb	1,f
 16514  0488  317F               	addfsr 1,-1
 16515                           
 16516                           ;util.c: 20: }
 16517  0489  0008               	return
 16518  048A                     L23:	
 16519                           ;util.c: 21: else
 16520                           ;util.c: 22: {
 16521                           ;util.c: 23: *pSrc = min;
 16522                           
 16523  048A  0872               	movf	i1Util_DecValue@min,w
 16524  048B  3FC0               	movwi [0]fsr1
 16525  048C  0873               	movf	i1Util_DecValue@min+1,w
 16526  048D  3FC1               	movwi [1]fsr1
 16527  048E  0008               	return
 16528  048F                     __end_ofi1_Util_DecValue:	
 16529  048F                     __ptext92:	
 16530 ;; *************** function i1_Util_IncValue *****************
 16531 ;; Defined at:
 16532 ;;		line 3 in file "user/src/util.c"
 16533 ;; Parameters:    Size  Location     Type
 16534 ;;  pSrc            2    0[COMMON] PTR unsigned int 
 16535 ;;		 -> gLedRunPara.mCurrentBright(10), gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), 
 16536 ;;		 -> gLedPara(117), 
 16537 ;;  max             2    2[COMMON] unsigned int 
 16538 ;;  delta           2    4[COMMON] unsigned int 
 16539 ;; Auto vars:     Size  Location     Type
 16540 ;;		None
 16541 ;; Return value:  Size  Location     Type
 16542 ;;                  1    wreg      void 
 16543 ;; Registers used:
 16544 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16545 ;; Tracked objects:
 16546 ;;		On entry : 1F/0
 16547 ;;		On exit  : 1F/0
 16548 ;;		Unchanged: 1F/0
 16549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16550 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16552 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16553 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;Total ram usage:       10 bytes
 16555 ;; Hardware stack levels used:    1
 16556 ;; This function calls:
 16557 ;;		Nothing
 16558 ;; This function is called by:
 16559 ;;		_IR_ScanLongPress
 16560 ;; This function uses a non-reentrant model
 16561 ;;
 16562                           
 16563                           
 16564                           ;psect for function i1_Util_IncValue
 16565  048F                     i1_Util_IncValue:	
 16566                           
 16567                           ;util.c: 5: if( *pSrc + delta < max )
 16568                           
 16569                           ;incstack = 0
 16570                           ; Regs used in i1_Util_IncValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 16571  048F  0870               	movf	i1Util_IncValue@pSrc,w
 16572  0490  0086               	movwf	6
 16573  0491  0871               	movf	i1Util_IncValue@pSrc+1,w
 16574  0492  0087               	movwf	7
 16575  0493  3F40               	moviw [0]fsr1
 16576  0494  00F6               	movwf	??i1_Util_IncValue
 16577  0495  3F41               	moviw [1]fsr1
 16578  0496  00F7               	movwf	??i1_Util_IncValue+1
 16579  0497  0874               	movf	i1Util_IncValue@delta,w
 16580  0498  0776               	addwf	??i1_Util_IncValue,w
 16581  0499  00F8               	movwf	??i1_Util_IncValue+2
 16582  049A  0875               	movf	i1Util_IncValue@delta+1,w
 16583  049B  3D77               	addwfc	??i1_Util_IncValue+1,w
 16584  049C  00F9               	movwf	??i1_Util_IncValue+3
 16585  049D  0873               	movf	i1Util_IncValue@max+1,w
 16586  049E  0279               	subwf	??i1_Util_IncValue+3,w
 16587  049F  1D03               	skipz
 16588  04A0  2CA3               	goto	u314_25
 16589  04A1  0872               	movf	i1Util_IncValue@max,w
 16590  04A2  0278               	subwf	??i1_Util_IncValue+2,w
 16591  04A3                     u314_25:	
 16592                           
 16593                           ;util.c: 6: {
 16594                           ;util.c: 7: (*pSrc) += delta;
 16595  04A3  0870               	movf	i1Util_IncValue@pSrc,w
 16596  04A4  0086               	movwf	6
 16597  04A5  0871               	movf	i1Util_IncValue@pSrc+1,w
 16598  04A6  0087               	movwf	7
 16599  04A7  1803               	skipnc
 16600  04A8  2CB0               	goto	L22
 16601  04A9  0874               	movf	i1Util_IncValue@delta,w
 16602  04AA  0781               	addwf	1,f
 16603  04AB  3141               	addfsr 1,1
 16604  04AC  0875               	movf	i1Util_IncValue@delta+1,w
 16605  04AD  3D81               	addwfc	1,f
 16606  04AE  317F               	addfsr 1,-1
 16607                           
 16608                           ;util.c: 8: }
 16609  04AF  0008               	return
 16610  04B0                     L22:	
 16611                           ;util.c: 9: else
 16612                           ;util.c: 10: {
 16613                           ;util.c: 11: *pSrc = max;
 16614                           
 16615  04B0  0872               	movf	i1Util_IncValue@max,w
 16616  04B1  3FC0               	movwi [0]fsr1
 16617  04B2  0873               	movf	i1Util_IncValue@max+1,w
 16618  04B3  3FC1               	movwi [1]fsr1
 16619  04B4  0008               	return
 16620  04B5                     __end_ofi1_Util_IncValue:	
 16621  04B5                     __ptext81:	
 16622 ;; *************** function i1_Led_UpdateBright *****************
 16623 ;; Defined at:
 16624 ;;		line 179 in file "user/src/led.c"
 16625 ;; Parameters:    Size  Location     Type
 16626 ;;		None
 16627 ;; Auto vars:     Size  Location     Type
 16628 ;;  Led_UpdateBr    1    4[COMMON] unsigned char 
 16629 ;; Return value:  Size  Location     Type
 16630 ;;                  1    wreg      void 
 16631 ;; Registers used:
 16632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16633 ;; Tracked objects:
 16634 ;;		On entry : 1F/0
 16635 ;;		On exit  : 14/4
 16636 ;;		Unchanged: 0/0
 16637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16639 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16641 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16642 ;;Total ram usage:        1 bytes
 16643 ;; Hardware stack levels used:    1
 16644 ;; Hardware stack levels required when called:    1
 16645 ;; This function calls:
 16646 ;;		i1_PWM1_LoadDutyValue
 16647 ;;		i1_PWM2_LoadDutyValue
 16648 ;;		i1_PWM3_LoadDutyValue
 16649 ;;		i1_PWM4_LoadDutyValue
 16650 ;;		i1_PWM5_LoadDutyValue
 16651 ;; This function is called by:
 16652 ;;		_Led_DynamicWave
 16653 ;;		_Led_DynamicMoon
 16654 ;;		_Led_DynamicCloud
 16655 ;;		_Led_DynamicStorm
 16656 ;; This function uses a non-reentrant model
 16657 ;;
 16658                           
 16659                           
 16660                           ;psect for function i1_Led_UpdateBright
 16661  04B5                     i1_Led_UpdateBright:	
 16662                           
 16663                           ;led.c: 180: for (uint8_t i = 0; i < 5; i++) {
 16664                           
 16665                           ;incstack = 0
 16666                           ; Regs used in i1_Led_UpdateBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16667  04B5  01F4               	clrf	i1Led_UpdateBright@i
 16668  04B6                     i1l6150:	
 16669                           
 16670                           ;led.c: 181: loadDuty[i](gLedRunPara.mCurrentBright[i]);
 16671  04B6  3574               	lslf	i1Led_UpdateBright@i,w
 16672  04B7  2587               	fcall	PL138	;call to abstracted procedure
 16673  04B8  3574               	lslf	i1Led_UpdateBright@i,w
 16674  04B9  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
 16675  04BA  0086               	movwf	6
 16676  04BB  3F41               	moviw [1]fsr1
 16677  04BC  008A               	movwf	10
 16678  04BD  3F40               	moviw [0]fsr1
 16679  04BE  000A               	callw
 16680  04BF  3005               	movlw	5
 16681  04C0  3180               	pagesel	$
 16682  04C1  0AF4               	incf	i1Led_UpdateBright@i,f
 16683  04C2  0274               	subwf	i1Led_UpdateBright@i,w
 16684  04C3  1803               	btfsc	3,0
 16685  04C4  0008               	return
 16686  04C5  2CB6               	goto	i1l6150
 16687  04C6                     __end_ofi1_Led_UpdateBright:	
 16688  04C6                     __ptext95:	
 16689 ;; *************** function i1_TMR4_StartTimer *****************
 16690 ;; Defined at:
 16691 ;;		line 17 in file "driver/src/tmr4.c"
 16692 ;; Parameters:    Size  Location     Type
 16693 ;;		None
 16694 ;; Auto vars:     Size  Location     Type
 16695 ;;		None
 16696 ;; Return value:  Size  Location     Type
 16697 ;;                  1    wreg      void 
 16698 ;; Registers used:
 16699 ;;		None
 16700 ;; Tracked objects:
 16701 ;;		On entry : 1F/1
 16702 ;;		On exit  : 1F/8
 16703 ;;		Unchanged: 0/0
 16704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16709 ;;Total ram usage:        0 bytes
 16710 ;; Hardware stack levels used:    1
 16711 ;; This function calls:
 16712 ;;		Nothing
 16713 ;; This function is called by:
 16714 ;;		i1_Led_StartNotice
 16715 ;; This function uses a non-reentrant model
 16716 ;;
 16717                           
 16718                           
 16719                           ;psect for function i1_TMR4_StartTimer
 16720  04C6                     i1_TMR4_StartTimer:	
 16721                           
 16722                           ;tmr4.c: 19: T4CONbits.TMR4ON = 1;
 16723                           
 16724                           ;incstack = 0
 16725                           ; Regs used in i1_TMR4_StartTimer: []
 16726  04C6  0028               	movlb	8	; select bank8
 16727  04C7  1517               	bsf	23,2	;volatile
 16728  04C8  0008               	return
 16729  04C9                     __end_ofi1_TMR4_StartTimer:	
 16730  04C9                     PL16:	
 16731  04C9  307B               	movlw	123
 16732  04CA  0086               	movwf	6
 16733  04CB  3023               	movlw	35
 16734  04CC  0087               	movwf	7
 16735  04CD  3142               	addfsr 1,2
 16736  04CE  0801               	movf	1,w
 16737  04CF  3E00               	addlw	low (_GAIN| (0+32768))
 16738  04D0  0084               	movwf	4
 16739  04D1  3098               	movlw	high (_GAIN| (0+32768))
 16740  04D2  1803               	skipnc
 16741  04D3  3E01               	addlw	1
 16742  04D4  0085               	movwf	5
 16743  04D5  0800               	movf	0,w	;code access
 16744  04D6  00F0               	movwf	i1___wmul@multiplier
 16745  04D7  0008               	return
 16746  04D8                     __end_ofPL16:	
 16747  04D8                     PL24:	
 16748  04D8  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 16749  04D9  0086               	movwf	6
 16750  04DA  3001               	movlw	1
 16751  04DB  0187               	clrf	7
 16752  04DC  0281               	subwf	1,f
 16753  04DD  3000               	movlw	0
 16754  04DE  3141               	addfsr 1,1
 16755  04DF  3B81               	subwfb	1,f
 16756  04E0  317F               	addfsr 1,-1
 16757  04E1  0008               	return
 16758  04E2                     __end_ofPL24:	
 16759  04E2                     PL50:	
 16760  04E2  0086               	movwf	6
 16761  04E3  3F40               	moviw [0]fsr1
 16762  04E4  00F6               	movwf	??_Led_Ramp+2
 16763  04E5  3F41               	moviw [1]fsr1
 16764  04E6  00F7               	movwf	??_Led_Ramp+3
 16765  04E7  0876               	movf	??_Led_Ramp+2,w
 16766  04E8  3E01               	addlw	1
 16767  04E9  00F8               	movwf	??_Led_Ramp+4
 16768  04EA  3000               	movlw	0
 16769  04EB  3D77               	addwfc	??_Led_Ramp+3,w
 16770  04EC  00F9               	movwf	??_Led_Ramp+5
 16771  04ED  0875               	movf	??_Led_Ramp+1,w
 16772  04EE  0279               	subwf	??_Led_Ramp+5,w
 16773  04EF  1D03               	skipz
 16774  04F0  0008               	return
 16775  04F1  0874               	movf	??_Led_Ramp,w
 16776  04F2  0278               	subwf	??_Led_Ramp+4,w
 16777  04F3  0008               	return
 16778  04F4                     __end_ofPL50:	
 16779  04F4                     PL52:	
 16780  04F4  0AC0               	incf	IR_ScanLongPress@cnt,f
 16781  04F5  1903               	skipnz
 16782  04F6  0AC1               	incf	IR_ScanLongPress@cnt+1,f
 16783  04F7  3002               	movlw	2
 16784  04F8  0641               	xorwf	IR_ScanLongPress@cnt+1,w
 16785  04F9  0440               	iorwf	IR_ScanLongPress@cnt,w
 16786  04FA  0008               	return
 16787  04FB                     __end_ofPL52:	
 16788  04FB                     PL54:	
 16789  04FB  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 16790  04FC  0086               	movwf	6
 16791  04FD  3001               	movlw	1
 16792  04FE  0187               	clrf	7
 16793  04FF  0781               	addwf	1,f
 16794  0500  3141               	addfsr 1,1
 16795  0501  0008               	return
 16796  0502                     __end_ofPL54:	
 16797  0502                     PL58:	
 16798  0502  0085               	movwf	5
 16799  0503  3F40               	moviw [0]fsr1
 16800  0504  3F80               	movwi [0]fsr0
 16801  0505  3F41               	moviw [1]fsr1
 16802  0506  3F81               	movwi [1]fsr0
 16803  0507  0008               	return
 16804  0508                     __end_ofPL58:	
 16805  0508                     PL70:	
 16806  0508  01A5               	clrf	??_IR_ScanLongPress+1
 16807  0509  35A4               	lslf	??_IR_ScanLongPress,f
 16808  050A  0DA5               	rlf	??_IR_ScanLongPress+1,f
 16809  050B  00A6               	movwf	??_IR_ScanLongPress+2
 16810  050C  3023               	movlw	35
 16811  050D  00A7               	movwf	??_IR_ScanLongPress+3
 16812  050E  0824               	movf	??_IR_ScanLongPress,w
 16813  050F  0726               	addwf	??_IR_ScanLongPress+2,w
 16814  0510  0008               	return
 16815  0511                     __end_ofPL70:	
 16816  0511                     PL80:	
 16817  0511  0086               	movwf	6
 16818  0512  3F40               	moviw [0]fsr1
 16819  0513  00FA               	movwf	??_Led_DynamicCloud+2
 16820  0514  3F41               	moviw [1]fsr1
 16821  0515  00FB               	movwf	??_Led_DynamicCloud+3
 16822  0516  0879               	movf	??_Led_DynamicCloud+1,w
 16823  0517  027B               	subwf	??_Led_DynamicCloud+3,w
 16824  0518  1D03               	skipz
 16825  0519  0008               	return
 16826  051A  0878               	movf	??_Led_DynamicCloud,w
 16827  051B  027A               	subwf	??_Led_DynamicCloud+2,w
 16828  051C  0008               	return
 16829  051D                     __end_ofPL80:	
 16830  051D                     PL82:	
 16831  051D  0086               	movwf	6
 16832  051E  3F40               	moviw [0]fsr1
 16833  051F  00FA               	movwf	??_Led_DynamicWave+2
 16834  0520  3F41               	moviw [1]fsr1
 16835  0521  00FB               	movwf	??_Led_DynamicWave+3
 16836  0522  0879               	movf	??_Led_DynamicWave+1,w
 16837  0523  027B               	subwf	??_Led_DynamicWave+3,w
 16838  0524  1D03               	skipz
 16839  0525  0008               	return
 16840  0526  0878               	movf	??_Led_DynamicWave,w
 16841  0527  027A               	subwf	??_Led_DynamicWave+2,w
 16842  0528  0008               	return
 16843  0529                     __end_ofPL82:	
 16844  0529                     PL90:	
 16845  0529  0086               	movwf	6
 16846  052A  3F40               	moviw [0]fsr1
 16847  052B  00FA               	movwf	??_Led_DynamicStorm+2
 16848  052C  3F41               	moviw [1]fsr1
 16849  052D  00FB               	movwf	??_Led_DynamicStorm+3
 16850  052E  0879               	movf	??_Led_DynamicStorm+1,w
 16851  052F  027B               	subwf	??_Led_DynamicStorm+3,w
 16852  0530  1D03               	skipz
 16853  0531  0008               	return
 16854  0532  0878               	movf	??_Led_DynamicStorm,w
 16855  0533  027A               	subwf	??_Led_DynamicStorm+2,w
 16856  0534  0008               	return
 16857  0535                     __end_ofPL90:	
 16858  0535                     PL94:	
 16859  0535  0086               	movwf	6
 16860  0536  3F40               	moviw [0]fsr1
 16861  0537  00FA               	movwf	??_Led_DynamicMoon+2
 16862  0538  3F41               	moviw [1]fsr1
 16863  0539  00FB               	movwf	??_Led_DynamicMoon+3
 16864  053A  0879               	movf	??_Led_DynamicMoon+1,w
 16865  053B  027B               	subwf	??_Led_DynamicMoon+3,w
 16866  053C  1D03               	skipz
 16867  053D  0008               	return
 16868  053E  0878               	movf	??_Led_DynamicMoon,w
 16869  053F  027A               	subwf	??_Led_DynamicMoon+2,w
 16870  0540  0008               	return
 16871  0541                     __end_ofPL94:	
 16872  0541                     PL102:	
 16873  0541  307B               	movlw	123
 16874  0542  0086               	movwf	6
 16875  0543  0C01               	rrf	1,w
 16876  0544  00FD               	movwf	??_Led_Run
 16877  0545  0CFD               	rrf	??_Led_Run,f
 16878  0546  0C7D               	rrf	??_Led_Run,w
 16879  0547  390F               	andlw	15
 16880  0548  0008               	return
 16881  0549                     __end_ofPL102:	
 16882  0549                     PL106:	
 16883  0549  0C01               	rrf	1,w
 16884  054A  00FD               	movwf	??_Led_Run
 16885  054B  0CFD               	rrf	??_Led_Run,f
 16886  054C  0C7D               	rrf	??_Led_Run,w
 16887  054D  390F               	andlw	15
 16888  054E  0008               	return
 16889  054F                     __end_ofPL106:	
 16890  054F                     PL122:	
 16891  054F  0086               	movwf	6
 16892  0550  0187               	clrf	7
 16893  0551  3F40               	moviw [0]fsr1
 16894  0552  00F4               	movwf	??_Led_Ramp
 16895  0553  3F41               	moviw [1]fsr1
 16896  0554  00F5               	movwf	??_Led_Ramp+1
 16897  0555  357A               	lslf	Led_Ramp@i,w
 16898  0556  0008               	return
 16899  0557                     __end_ofPL122:	
 16900  0557                     PL124:	
 16901  0557  0081               	movwf	1
 16902  0558  3020               	movlw	32
 16903  0559  0AD2               	incf	_txHead,f
 16904  055A  0252               	subwf	_txHead,w
 16905  055B  1803               	btfsc	3,0
 16906  055C  01D2               	clrf	_txHead
 16907  055D  03DE               	decf	_txRemain,f
 16908  055E  0008               	return
 16909  055F                     __end_ofPL124:	
 16910  055F                     PL126:	
 16911  055F  0086               	movwf	6
 16912  0560  0187               	clrf	7
 16913  0561  3F40               	moviw [0]fsr1
 16914  0562  00F8               	movwf	??_Led_DynamicCloud
 16915  0563  3F41               	moviw [1]fsr1
 16916  0564  00F9               	movwf	??_Led_DynamicCloud+1
 16917  0565  352C               	lslf	Led_DynamicCloud@i,w
 16918  0566  0008               	return
 16919  0567                     __end_ofPL126:	
 16920  0567                     PL128:	
 16921  0567  0086               	movwf	6
 16922  0568  0187               	clrf	7
 16923  0569  3F40               	moviw [0]fsr1
 16924  056A  00F8               	movwf	??_Led_DynamicMoon
 16925  056B  3F41               	moviw [1]fsr1
 16926  056C  00F9               	movwf	??_Led_DynamicMoon+1
 16927  056D  352C               	lslf	Led_DynamicMoon@i,w
 16928  056E  0008               	return
 16929  056F                     __end_ofPL128:	
 16930  056F                     PL130:	
 16931  056F  1211               	bcf	17,4	;volatile
 16932  0570  0020               	movlb	0	; select bank0
 16933  0571  0852               	movf	_txHead,w
 16934  0572  3E20               	addlw	(low (_txBuf| (0+256)))& (0+255)
 16935  0573  0086               	movwf	6
 16936  0574  3001               	movlw	1	; select bank2/3
 16937  0575  0087               	movwf	7
 16938  0576  0008               	return
 16939  0577                     __end_ofPL130:	
 16940  0577                     PL132:	
 16941  0577  0086               	movwf	6
 16942  0578  0187               	clrf	7
 16943  0579  3F40               	moviw [0]fsr1
 16944  057A  00F8               	movwf	??_Led_DynamicWave
 16945  057B  3F41               	moviw [1]fsr1
 16946  057C  00F9               	movwf	??_Led_DynamicWave+1
 16947  057D  352C               	lslf	Led_DynamicWave@i,w
 16948  057E  0008               	return
 16949  057F                     __end_ofPL132:	
 16950  057F                     PL134:	
 16951  057F  0086               	movwf	6
 16952  0580  0187               	clrf	7
 16953  0581  3F40               	moviw [0]fsr1
 16954  0582  00F8               	movwf	??_Led_DynamicStorm
 16955  0583  3F41               	moviw [1]fsr1
 16956  0584  00F9               	movwf	??_Led_DynamicStorm+1
 16957  0585  352C               	lslf	Led_DynamicStorm@i,w
 16958  0586  0008               	return
 16959  0587                     __end_ofPL134:	
 16960  0587                     PL138:	
 16961  0587  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 16962  0588  0086               	movwf	6
 16963  0589  0187               	clrf	7
 16964  058A  3F40               	moviw [0]fsr1
 16965  058B  00F0               	movwf	i1PWM5_LoadDutyValue@dutyValue
 16966  058C  3F41               	moviw [1]fsr1
 16967  058D  00F1               	movwf	i1PWM5_LoadDutyValue@dutyValue+1
 16968  058E  0008               	return
 16969  058F                     __end_ofPL138:	
 16970  058F                     PL154:	
 16971  058F  0C01               	rrf	1,w
 16972  0590  00FC               	movwf	??_Led_RunMusic
 16973  0591  0CFC               	rrf	??_Led_RunMusic,f
 16974  0592  0C7C               	rrf	??_Led_RunMusic,w
 16975  0593  390F               	andlw	15
 16976  0594  0008               	return
 16977  0595                     __end_ofPL154:	
 16978  0595                     __ptext100:	
 16979 ;; *************** function _IR_Decode *****************
 16980 ;; Defined at:
 16981 ;;		line 251 in file "user/src/ir.c"
 16982 ;; Parameters:    Size  Location     Type
 16983 ;;		None
 16984 ;; Auto vars:     Size  Location     Type
 16985 ;;  type            1    8[COMMON] unsigned char 
 16986 ;;  hVal            2   10[COMMON] unsigned int 
 16987 ;;  keyNum          1    9[COMMON] unsigned char 
 16988 ;;  revKeyNum       1    7[COMMON] unsigned char 
 16989 ;; Return value:  Size  Location     Type
 16990 ;;                  1    wreg      void 
 16991 ;; Registers used:
 16992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16993 ;; Tracked objects:
 16994 ;;		On entry : 1F/1
 16995 ;;		On exit  : 1E/0
 16996 ;;		Unchanged: 0/0
 16997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16999 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17000 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17001 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17002 ;;Total ram usage:        9 bytes
 17003 ;; Hardware stack levels used:    1
 17004 ;; Hardware stack levels required when called:    1
 17005 ;; This function calls:
 17006 ;;		_IR_GetKeyType
 17007 ;;		i1_TMR2_DisableInterrupt
 17008 ;;		i1_TMR2_EnableInterrupt
 17009 ;; This function is called by:
 17010 ;;		_Interrupt_Initialize
 17011 ;;		_TMR1_GATE_ISR
 17012 ;; This function uses a non-reentrant model
 17013 ;;
 17014                           
 17015                           
 17016                           ;psect for function _IR_Decode
 17017  0595                     _IR_Decode:	
 17018                           
 17019                           ;ir.c: 253: uint8_t revKeyNum = 0;
 17020                           
 17021                           ;incstack = 0
 17022                           ; Regs used in _IR_Decode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17023  0595  01F7               	clrf	IR_Decode@revKeyNum
 17024                           
 17025                           ;ir.c: 254: uint16_t hVal = TMR1;
 17026  0596  0020               	movlb	0	; select bank0
 17027  0597  081A               	movf	26,w	;volatile
 17028  0598  00FB               	movwf	IR_Decode@hVal+1
 17029  0599  0819               	movf	25,w	;volatile
 17030  059A  00FA               	movwf	IR_Decode@hVal
 17031                           
 17032                           ;ir.c: 255: static uint16_t codeVal = 0;
 17033                           ;ir.c: 256: static uint8_t nBit = 0;
 17034                           ;ir.c: 257: static uint8_t rptCnt = 0;
 17035                           ;ir.c: 259: TMR1 = 0;
 17036  059B  0199               	clrf	25	;volatile
 17037  059C  019A               	clrf	26	;volatile
 17038                           
 17039                           ;ir.c: 261: switch (ir_state.mState) {
 17040  059D  2E4E               	goto	i1l5200
 17041  059E                     i1l5104:	
 17042                           
 17043                           ;ir.c: 263: if (hVal > 2000 && hVal < 2500) {
 17044  059E  3007               	movlw	7
 17045  059F  027B               	subwf	IR_Decode@hVal+1,w
 17046  05A0  30D1               	movlw	209
 17047  05A1  1903               	skipnz
 17048  05A2  027A               	subwf	IR_Decode@hVal,w
 17049  05A3  1C03               	skipc
 17050  05A4  0008               	return
 17051  05A5  3009               	movlw	9
 17052  05A6  027B               	subwf	IR_Decode@hVal+1,w
 17053  05A7  30C4               	movlw	196
 17054  05A8  1903               	skipnz
 17055  05A9  027A               	subwf	IR_Decode@hVal,w
 17056  05AA  1803               	skipnc
 17057  05AB  0008               	return
 17058                           
 17059                           ;ir.c: 264: ir_state.mState = 1;
 17060  05AC  0854               	movf	_ir_state,w	;volatile
 17061  05AD  39E3               	andlw	-29
 17062  05AE  3804               	iorlw	4
 17063  05AF  00D4               	movwf	_ir_state	;volatile
 17064                           
 17065                           ;ir.c: 265: codeVal = 0;
 17066  05B0  01C2               	clrf	IR_Decode@codeVal
 17067  05B1  01C3               	clrf	IR_Decode@codeVal+1
 17068                           
 17069                           ;ir.c: 266: nBit = 0;
 17070  05B2  01CD               	clrf	IR_Decode@nBit
 17071                           
 17072                           ;ir.c: 267: TMR2_DisableInterrupt();
 17073  05B3  2785               	fcall	i1_TMR2_DisableInterrupt
 17074  05B4  0008               	return
 17075  05B5                     i1l5116:	
 17076                           
 17077                           ;ir.c: 272: case 2:
 17078                           ;ir.c: 273: if (hVal > 220 && hVal < 340) {
 17079  05B5  3000               	movlw	0
 17080  05B6  027B               	subwf	IR_Decode@hVal+1,w
 17081  05B7  30DD               	movlw	221
 17082  05B8  1903               	skipnz
 17083  05B9  027A               	subwf	IR_Decode@hVal,w
 17084  05BA  1C03               	skipc
 17085  05BB  2DC5               	goto	i1l5122
 17086  05BC  3001               	movlw	1
 17087  05BD  027B               	subwf	IR_Decode@hVal+1,w
 17088  05BE  3054               	movlw	84
 17089  05BF  1903               	skipnz
 17090  05C0  027A               	subwf	IR_Decode@hVal,w
 17091  05C1  1803               	skipnc
 17092  05C2  2DC5               	goto	i1l5122
 17093  05C3                     i1l5120:	
 17094                           
 17095                           ;ir.c: 274: nBit++;
 17096  05C3  0ACD               	incf	IR_Decode@nBit,f
 17097                           
 17098                           ;ir.c: 275: } else if (hVal > 720 && hVal < 960) {
 17099  05C4  2DE3               	goto	i1l5132
 17100  05C5                     i1l5122:	
 17101  05C5  3002               	movlw	2
 17102  05C6  027B               	subwf	IR_Decode@hVal+1,w
 17103  05C7  30D1               	movlw	209
 17104  05C8  1903               	skipnz
 17105  05C9  027A               	subwf	IR_Decode@hVal,w
 17106  05CA  1C03               	skipc
 17107  05CB  2DE1               	goto	i1l5130
 17108  05CC  3003               	movlw	3
 17109  05CD  027B               	subwf	IR_Decode@hVal+1,w
 17110  05CE  30C0               	movlw	192
 17111  05CF  1903               	skipnz
 17112  05D0  027A               	subwf	IR_Decode@hVal,w
 17113  05D1  1803               	skipnc
 17114  05D2  2DE1               	goto	i1l5130
 17115                           
 17116                           ;ir.c: 276: codeVal |= (1 << nBit);
 17117  05D3  3001               	movlw	1
 17118  05D4  00F3               	movwf	??_IR_Decode
 17119  05D5  01F4               	clrf	??_IR_Decode+1
 17120  05D6  0A4D               	incf	IR_Decode@nBit,w
 17121  05D7  2DDA               	goto	u399_24
 17122  05D8                     u399_25:	
 17123  05D8  35F3               	lslf	??_IR_Decode,f
 17124  05D9  0DF4               	rlf	??_IR_Decode+1,f
 17125  05DA                     u399_24:	
 17126  05DA  0B89               	decfsz	9,f
 17127  05DB  2DD8               	goto	u399_25
 17128  05DC  0873               	movf	??_IR_Decode,w
 17129  05DD  04C2               	iorwf	IR_Decode@codeVal,f
 17130  05DE  0874               	movf	??_IR_Decode+1,w
 17131  05DF  04C3               	iorwf	IR_Decode@codeVal+1,f
 17132  05E0  2DC3               	goto	i1l5120
 17133  05E1                     i1l5130:	
 17134                           
 17135                           ;ir.c: 279: ir_state.mState = 0;
 17136  05E1  30E3               	movlw	-29
 17137  05E2  05D4               	andwf	_ir_state,f	;volatile
 17138  05E3                     i1l5132:	
 17139                           
 17140                           ;ir.c: 280: }
 17141                           ;ir.c: 281: if (nBit >= 16) {
 17142  05E3  3010               	movlw	16
 17143  05E4  024D               	subwf	IR_Decode@nBit,w
 17144  05E5  1C03               	skipc
 17145  05E6  0008               	return
 17146                           
 17147                           ;ir.c: 282: if (ir_state.mState == 1) {
 17148  05E7  0C54               	rrf	_ir_state,w	;volatile
 17149  05E8  0C89               	rrf	9,f
 17150  05E9  3907               	andlw	7
 17151  05EA  3A01               	xorlw	1
 17152  05EB  1D03               	skipz
 17153  05EC  2DF6               	goto	i1l5142
 17154                           
 17155                           ;ir.c: 283: if (codeVal == 0xFF00) {
 17156  05ED  0A43               	incf	IR_Decode@codeVal+1,w
 17157  05EE  0442               	iorwf	IR_Decode@codeVal,w
 17158  05EF  1D03               	btfss	3,2
 17159  05F0  2E2F               	goto	i1l5182
 17160                           
 17161                           ;ir.c: 284: ir_state.mState = 2;
 17162  05F1  0854               	movf	_ir_state,w	;volatile
 17163  05F2  39E3               	andlw	-29
 17164  05F3  3808               	iorlw	8
 17165  05F4  00D4               	movwf	_ir_state	;volatile
 17166                           
 17167                           ;ir.c: 285: } else {
 17168  05F5  2E31               	goto	i1l5184
 17169  05F6                     i1l5142:	
 17170                           ;ir.c: 286: ir_state.mState = 0;
 17171                           
 17172  05F6  0C54               	rrf	_ir_state,w	;volatile
 17173  05F7  0C89               	rrf	9,f
 17174  05F8  3907               	andlw	7
 17175  05F9  3A02               	xorlw	2
 17176  05FA  1D03               	skipz
 17177  05FB  2E31               	goto	i1l5184
 17178                           
 17179                           ;ir.c: 289: TMR2_EnableInterrupt();
 17180  05FC  2782  3180         	fcall	i1_TMR2_EnableInterrupt
 17181                           
 17182                           ;ir.c: 290: keyNum = codeVal & 0xFF;
 17183  05FE  0020               	movlb	0	; select bank0
 17184  05FF  0842               	movf	IR_Decode@codeVal,w
 17185  0600  00F9               	movwf	IR_Decode@keyNum
 17186                           
 17187                           ;ir.c: 291: revKeyNum = codeVal >> 8;
 17188  0601  0843               	movf	IR_Decode@codeVal+1,w
 17189  0602  00F7               	movwf	IR_Decode@revKeyNum
 17190                           
 17191                           ;ir.c: 292: if (keyNum ^ revKeyNum == 0xFF)
 17192  0603  0F77               	incfsz	IR_Decode@revKeyNum,w
 17193  0604  2E07               	goto	u404_20
 17194  0605  3001               	movlw	1
 17195  0606  2E08               	goto	u405_20
 17196  0607                     u404_20:	
 17197  0607  3000               	movlw	0
 17198  0608                     u405_20:	
 17199  0608  00F3               	movwf	??_IR_Decode
 17200  0609  01F4               	clrf	??_IR_Decode+1
 17201  060A  0679               	xorwf	IR_Decode@keyNum,w
 17202  060B  00F5               	movwf	??_IR_Decode+2
 17203  060C  0874               	movf	??_IR_Decode+1,w
 17204  060D  00F6               	movwf	??_IR_Decode+3
 17205  060E  0475               	iorwf	??_IR_Decode+2,w
 17206  060F  1903               	btfsc	3,2
 17207  0610  2E2F               	goto	i1l5182
 17208                           
 17209                           ;ir.c: 293: {
 17210                           ;ir.c: 294: uint8_t type = IR_GetKeyType(keyNum);
 17211  0611  0879               	movf	IR_Decode@keyNum,w
 17212  0612  265E  3180         	fcall	_IR_GetKeyType
 17213  0614  00F8               	movwf	IR_Decode@type
 17214                           
 17215                           ;ir.c: 295: if (type == 255) {
 17216  0615  0F78               	incfsz	IR_Decode@type,w
 17217  0616  2E19               	goto	i1l5162
 17218                           
 17219                           ;ir.c: 296: keyValue = 255;
 17220  0617  30FF               	movlw	255
 17221  0618  2E1C               	goto	L31
 17222  0619                     i1l5162:	
 17223                           ;ir.c: 299: } else if (type == 1) {
 17224                           
 17225                           ;ir.c: 298: ir_state.mState = 0;
 17226                           
 17227                           ;ir.c: 297: ir_state.mKeyRcv = 1;
 17228                           
 17229  0619  0B78               	decfsz	IR_Decode@type,w
 17230  061A  2E1F               	goto	i1l5170
 17231                           
 17232                           ;ir.c: 300: keyValue = keyNum;
 17233  061B  0879               	movf	IR_Decode@keyNum,w
 17234  061C                     L31:	
 17235  061C  00CE               	movwf	_keyValue	;volatile
 17236                           
 17237                           ;ir.c: 301: ir_state.mKeyRcv = 1;
 17238  061D  1454               	bsf	_ir_state,0	;volatile
 17239  061E  2E2F               	goto	i1l5182
 17240  061F                     i1l5170:	
 17241                           ;ir.c: 303: } else if (type == 3 || type == 2) {
 17242                           
 17243                           ;ir.c: 302: ir_state.mState = 0;
 17244                           
 17245  061F  3003               	movlw	3
 17246  0620  0678               	xorwf	IR_Decode@type,w
 17247  0621  1903               	btfsc	3,2
 17248  0622  2E27               	goto	i1l5174
 17249  0623  3002               	movlw	2
 17250  0624  0678               	xorwf	IR_Decode@type,w
 17251  0625  1D03               	btfss	3,2
 17252  0626  2E2F               	goto	i1l5182
 17253  0627                     i1l5174:	
 17254                           
 17255                           ;ir.c: 304: keyValue = keyNum;
 17256  0627  0879               	movf	IR_Decode@keyNum,w
 17257  0628  00CE               	movwf	_keyValue	;volatile
 17258                           
 17259                           ;ir.c: 305: ir_state.mState = 3;
 17260  0629  0854               	movf	_ir_state,w	;volatile
 17261  062A  39E3               	andlw	-29
 17262  062B  380C               	iorlw	12
 17263  062C  00D4               	movwf	_ir_state	;volatile
 17264                           
 17265                           ;ir.c: 306: rptCnt = 0;
 17266  062D  01CC               	clrf	IR_Decode@rptCnt
 17267                           
 17268                           ;ir.c: 307: } else {
 17269  062E  2E31               	goto	i1l5184
 17270  062F                     i1l5182:	
 17271                           ;ir.c: 308: ir_state.mState = 0;
 17272                           
 17273                           
 17274                           ;ir.c: 311: ir_state.mState = 0;
 17275  062F  30E3               	movlw	-29
 17276  0630  05D4               	andwf	_ir_state,f	;volatile
 17277  0631                     i1l5184:	
 17278                           
 17279                           ;ir.c: 312: }
 17280                           ;ir.c: 313: }
 17281                           ;ir.c: 314: codeVal = 0;
 17282  0631  01C2               	clrf	IR_Decode@codeVal
 17283  0632  01C3               	clrf	IR_Decode@codeVal+1
 17284                           
 17285                           ;ir.c: 315: nBit = 0;
 17286  0633  01CD               	clrf	IR_Decode@nBit
 17287  0634  0008               	return
 17288  0635                     i1l5188:	
 17289                           
 17290                           ;ir.c: 320: if (hVal > 1000 && hVal < 1250) {
 17291  0635  3003               	movlw	3
 17292  0636  027B               	subwf	IR_Decode@hVal+1,w
 17293  0637  30E9               	movlw	233
 17294  0638  1903               	skipnz
 17295  0639  027A               	subwf	IR_Decode@hVal,w
 17296  063A  1C03               	skipc
 17297  063B  0008               	return
 17298  063C  3004               	movlw	4
 17299  063D  027B               	subwf	IR_Decode@hVal+1,w
 17300  063E  30E2               	movlw	226
 17301  063F  1903               	skipnz
 17302  0640  027A               	subwf	IR_Decode@hVal,w
 17303  0641  1803               	skipnc
 17304  0642  0008               	return
 17305                           
 17306                           ;ir.c: 321: if (rptCnt < 4) {
 17307  0643  3004               	movlw	4
 17308  0644  024C               	subwf	IR_Decode@rptCnt,w
 17309  0645  1803               	skipnc
 17310  0646  2E49               	goto	i1l1095
 17311                           
 17312                           ;ir.c: 322: rptCnt++;
 17313  0647  0ACC               	incf	IR_Decode@rptCnt,f
 17314                           
 17315                           ;ir.c: 323: } else {
 17316  0648  0008               	return
 17317  0649                     i1l1095:	
 17318                           
 17319                           ;ir.c: 324: ir_state.mKeyRpt = 1;
 17320  0649  14D4               	bsf	_ir_state,1	;volatile
 17321  064A  0008               	return
 17322  064B                     i1l5196:	
 17323                           
 17324                           ;ir.c: 330: ir_state.mState = 0;
 17325  064B  30E3               	movlw	-29
 17326  064C  05D4               	andwf	_ir_state,f	;volatile
 17327                           
 17328                           ;ir.c: 331: break;
 17329  064D  0008               	return
 17330  064E                     i1l5200:	
 17331  064E  0C54               	rrf	_ir_state,w	;volatile
 17332  064F  0C89               	rrf	9,f
 17333  0650  3907               	andlw	7
 17334                           
 17335                           ; Switch size 1, requested type "space"
 17336                           ; Number of cases is 4, Range of values is 0 to 3
 17337                           ; switch strategies available:
 17338                           ; Name         Instructions Cycles
 17339                           ; simple_byte           13     7 (average)
 17340                           ; direct_byte           14     6 (fixed)
 17341                           ; jumptable            260     6 (fixed)
 17342                           ;	Chosen strategy is simple_byte
 17343  0651  1903               	skipnz
 17344  0652  2D9E               	goto	i1l5104
 17345  0653  3A01               	xorlw	1	; case 1
 17346  0654  1903               	skipnz
 17347  0655  2DB5               	goto	i1l5116
 17348  0656  3A03               	xorlw	3	; case 2
 17349  0657  1903               	skipnz
 17350  0658  2DB5               	goto	i1l5116
 17351  0659  3A01               	xorlw	1	; case 3
 17352  065A  1903               	skipnz
 17353  065B  2E35               	goto	i1l5188
 17354  065C  2E4B               	goto	i1l5196
 17355  065D  0008               	return
 17356  065E                     __end_of_IR_Decode:	
 17357  065E                     __ptext103:	
 17358 ;; *************** function _IR_GetKeyType *****************
 17359 ;; Defined at:
 17360 ;;		line 107 in file "user/src/ir.c"
 17361 ;; Parameters:    Size  Location     Type
 17362 ;;  keynum          1    wreg     unsigned char 
 17363 ;; Auto vars:     Size  Location     Type
 17364 ;;  keynum          1    2[COMMON] unsigned char 
 17365 ;;  result          1    1[COMMON] unsigned char 
 17366 ;; Return value:  Size  Location     Type
 17367 ;;                  1    wreg      unsigned char 
 17368 ;; Registers used:
 17369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 17370 ;; Tracked objects:
 17371 ;;		On entry : 1F/0
 17372 ;;		On exit  : 1F/0
 17373 ;;		Unchanged: 0/0
 17374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17377 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17378 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17379 ;;Total ram usage:        3 bytes
 17380 ;; Hardware stack levels used:    1
 17381 ;; This function calls:
 17382 ;;		Nothing
 17383 ;; This function is called by:
 17384 ;;		_IR_Decode
 17385 ;; This function uses a non-reentrant model
 17386 ;;
 17387                           
 17388                           
 17389                           ;psect for function _IR_GetKeyType
 17390  065E                     _IR_GetKeyType:	
 17391                           
 17392                           ;incstack = 0
 17393                           ; Regs used in _IR_GetKeyType: [wreg-fsr1h+status,2+status,0]
 17394                           ;IR_GetKeyType@keynum stored from wreg
 17395  065E  00F2               	movwf	IR_GetKeyType@keynum
 17396                           
 17397                           ;ir.c: 108: uint8_t result = 0;
 17398  065F  01F1               	clrf	IR_GetKeyType@result
 17399                           
 17400                           ;ir.c: 109: if (ir_state.mSet == 0) {
 17401  0660  0E54               	swapf	_ir_state,w	;volatile
 17402  0661  0C89               	rrf	9,f
 17403  0662  3907               	andlw	7
 17404  0663  1D03               	skipz
 17405  0664  2F16               	goto	i1l4760
 17406                           
 17407                           ;ir.c: 110: if (keynum == 0x5D || keynum == 0x5C) {
 17408  0665  305D               	movlw	93
 17409  0666  0672               	xorwf	IR_GetKeyType@keynum,w
 17410  0667  1903               	btfsc	3,2
 17411  0668  2E6D               	goto	i1l949
 17412  0669  305C               	movlw	92
 17413  066A  0672               	xorwf	IR_GetKeyType@keynum,w
 17414  066B  1D03               	btfss	3,2
 17415  066C  2E70               	goto	i1l4710
 17416  066D                     i1l949:	
 17417                           
 17418                           ;ir.c: 111: result = 1;
 17419  066D  01F1               	clrf	IR_GetKeyType@result
 17420  066E  0AF1               	incf	IR_GetKeyType@result,f
 17421                           
 17422                           ;ir.c: 112: } else if (keynum == 0x10 || keynum == 0x11
 17423  066F  2F80               	goto	i1l4784
 17424  0670                     i1l4710:	
 17425                           
 17426                           ;ir.c: 113: || keynum == 0x12 || keynum == 0x13
 17427                           ;ir.c: 114: || keynum == 0x06) {
 17428  0670  3010               	movlw	16
 17429  0671  0672               	xorwf	IR_GetKeyType@keynum,w
 17430  0672  1903               	btfsc	3,2
 17431  0673  2E84               	goto	i1l4720
 17432  0674  3011               	movlw	17
 17433  0675  0672               	xorwf	IR_GetKeyType@keynum,w
 17434  0676  1903               	btfsc	3,2
 17435  0677  2E84               	goto	i1l4720
 17436  0678  3012               	movlw	18
 17437  0679  0672               	xorwf	IR_GetKeyType@keynum,w
 17438  067A  1903               	btfsc	3,2
 17439  067B  2E84               	goto	i1l4720
 17440  067C  3013               	movlw	19
 17441  067D  0672               	xorwf	IR_GetKeyType@keynum,w
 17442  067E  1903               	btfsc	3,2
 17443  067F  2E84               	goto	i1l4720
 17444  0680  3006               	movlw	6
 17445  0681  0672               	xorwf	IR_GetKeyType@keynum,w
 17446  0682  1D03               	btfss	3,2
 17447  0683  2E86               	goto	i1l4722
 17448  0684                     i1l4720:	
 17449                           
 17450                           ;ir.c: 115: result = 3;
 17451  0684  3003               	movlw	3
 17452  0685  2F23               	goto	L33
 17453  0686                     i1l4722:	
 17454                           ;ir.c: 116: } else if (gLedPara.mOn) {
 17455                           
 17456  0686  2791  3180         	fcall	PL108	;call to abstracted procedure
 17457  0688  1881               	btfsc	1,1
 17458  0689  2EC5               	goto	i1l4758
 17459  068A  2F80               	goto	i1l4784
 17460  068B                     i1l960:	
 17461  068B  2E6D               	goto	i1l949
 17462  068C                     i1l4726:	
 17463                           
 17464                           ;ir.c: 129: case 0x18:
 17465                           ;ir.c: 130: if (gLedPara.mAuto || gLedPara.mMsc == 0 || gLedPara.mMsc == 1 || gLedPara.m
      +                          Msc == 2
 17466                           ;ir.c: 131: || gLedPara.mMsc == 3 || gLedPara.mMsc == 4) {
 17467  068C  2791  3180         	fcall	PL108	;call to abstracted procedure
 17468  068E  1801               	btfsc	1,0
 17469  068F  2E6D               	goto	i1l949
 17470  0690  2788  3180         	fcall	PL12	;call to abstracted procedure
 17471  0692  1903               	skipnz
 17472  0693  2E6D               	goto	i1l949
 17473  0694  2788  3180         	fcall	PL12	;call to abstracted procedure
 17474  0696  3A01               	xorlw	1
 17475  0697  1903               	skipnz
 17476  0698  2E6D               	goto	i1l949
 17477  0699  2788  3180         	fcall	PL12	;call to abstracted procedure
 17478  069B  3A02               	xorlw	2
 17479  069C  1903               	skipnz
 17480  069D  2E6D               	goto	i1l949
 17481  069E  2788  3180         	fcall	PL12	;call to abstracted procedure
 17482  06A0  3A03               	xorlw	3
 17483  06A1  1903               	skipnz
 17484  06A2  2E6D               	goto	i1l949
 17485  06A3  2788  3180         	fcall	PL12	;call to abstracted procedure
 17486  06A5  3A04               	xorlw	4
 17487  06A6  1903               	btfsc	3,2
 17488  06A7  2E6D               	goto	i1l949
 17489  06A8  2F80               	goto	i1l4784
 17490  06A9                     i1l4738:	
 17491                           
 17492                           ;ir.c: 136: case 0x1B:
 17493                           ;ir.c: 137: if (!gLedPara.mAuto && gLedPara.mMsc) {
 17494  06A9  2791  3180         	fcall	PL108	;call to abstracted procedure
 17495  06AB  1801               	btfsc	1,0
 17496  06AC  2F80               	goto	i1l4784
 17497  06AD  2788  3180         	fcall	PL12	;call to abstracted procedure
 17498  06AF  1D03               	btfss	3,2
 17499  06B0  2E6D               	goto	i1l949
 17500  06B1  2F80               	goto	i1l4784
 17501  06B2                     i1l976:	
 17502  06B2                     i1l4744:	
 17503                           
 17504                           ;ir.c: 142: case 0x51:
 17505                           ;ir.c: 143: case 0x4D:
 17506                           ;ir.c: 144: case 0x4C:
 17507                           ;ir.c: 145: if (gLedPara.mAuto || gLedPara.mMsc) {
 17508  06B2  2791  3180         	fcall	PL108	;call to abstracted procedure
 17509  06B4  1801               	btfsc	1,0
 17510  06B5  2E6D               	goto	i1l949
 17511  06B6  2788  3180         	fcall	PL12	;call to abstracted procedure
 17512  06B8  1D03               	btfss	3,2
 17513  06B9  2E6D               	goto	i1l949
 17514  06BA                     i1l4748:	
 17515                           
 17516                           ;ir.c: 148: result = 2;
 17517  06BA  3002               	movlw	2
 17518  06BB  2F23               	goto	L33
 17519  06BC                     i1l985:	
 17520  06BC                     i1l4750:	
 17521                           
 17522                           ;ir.c: 152: case 0x59:
 17523                           ;ir.c: 153: case 0x45:
 17524                           ;ir.c: 154: case 0x44:
 17525                           ;ir.c: 155: case 0x41:
 17526                           ;ir.c: 156: case 0x54:
 17527                           ;ir.c: 157: case 0x55:
 17528                           ;ir.c: 158: case 0x49:
 17529                           ;ir.c: 159: case 0x48:
 17530                           ;ir.c: 160: case 0x40:
 17531                           ;ir.c: 161: if (gLedPara.mAuto || gLedPara.mMsc == 0) {
 17532  06BC  2791  3180         	fcall	PL108	;call to abstracted procedure
 17533  06BE  1801               	btfsc	1,0
 17534  06BF  2EBA               	goto	i1l4748
 17535  06C0  2788  3180         	fcall	PL12	;call to abstracted procedure
 17536  06C2  1903               	btfsc	3,2
 17537  06C3  2EBA               	goto	i1l4748
 17538  06C4  2F80               	goto	i1l4784
 17539  06C5                     i1l4758:	
 17540  06C5  0872               	movf	IR_GetKeyType@keynum,w
 17541                           
 17542                           ; Switch size 1, requested type "space"
 17543                           ; Number of cases is 26, Range of values is 20 to 89
 17544                           ; switch strategies available:
 17545                           ; Name         Instructions Cycles
 17546                           ; simple_byte           79    40 (average)
 17547                           ; direct_byte          149     9 (fixed)
 17548                           ; jumptable            263     9 (fixed)
 17549                           ;	Chosen strategy is simple_byte
 17550  06C6  3A14               	xorlw	20	; case 20
 17551  06C7  1903               	skipnz
 17552  06C8  2E6D               	goto	i1l949
 17553  06C9  3A01               	xorlw	1	; case 21
 17554  06CA  1903               	skipnz
 17555  06CB  2E6D               	goto	i1l949
 17556  06CC  3A03               	xorlw	3	; case 22
 17557  06CD  1903               	skipnz
 17558  06CE  2E6D               	goto	i1l949
 17559  06CF  3A01               	xorlw	1	; case 23
 17560  06D0  1903               	skipnz
 17561  06D1  2E6D               	goto	i1l949
 17562  06D2  3A0F               	xorlw	15	; case 24
 17563  06D3  1903               	skipnz
 17564  06D4  2E8C               	goto	i1l4726
 17565  06D5  3A01               	xorlw	1	; case 25
 17566  06D6  1903               	skipnz
 17567  06D7  2E8C               	goto	i1l4726
 17568  06D8  3A03               	xorlw	3	; case 26
 17569  06D9  1903               	skipnz
 17570  06DA  2EA9               	goto	i1l4738
 17571  06DB  3A01               	xorlw	1	; case 27
 17572  06DC  1903               	skipnz
 17573  06DD  2EA9               	goto	i1l4738
 17574  06DE  3A07               	xorlw	7	; case 28
 17575  06DF  1903               	skipnz
 17576  06E0  2E8B               	goto	i1l960
 17577  06E1  3A01               	xorlw	1	; case 29
 17578  06E2  1903               	skipnz
 17579  06E3  2E6D               	goto	i1l949
 17580  06E4  3A03               	xorlw	3	; case 30
 17581  06E5  1903               	skipnz
 17582  06E6  2E6D               	goto	i1l949
 17583  06E7  3A01               	xorlw	1	; case 31
 17584  06E8  1903               	skipnz
 17585  06E9  2E6D               	goto	i1l949
 17586  06EA  3A5F               	xorlw	95	; case 64
 17587  06EB  1903               	skipnz
 17588  06EC  2EBC               	goto	i1l4750
 17589  06ED  3A01               	xorlw	1	; case 65
 17590  06EE  1903               	skipnz
 17591  06EF  2EBC               	goto	i1l4750
 17592  06F0  3A05               	xorlw	5	; case 68
 17593  06F1  1903               	skipnz
 17594  06F2  2EBC               	goto	i1l4750
 17595  06F3  3A01               	xorlw	1	; case 69
 17596  06F4  1903               	skipnz
 17597  06F5  2EBC               	goto	i1l4750
 17598  06F6  3A0D               	xorlw	13	; case 72
 17599  06F7  1903               	skipnz
 17600  06F8  2EBC               	goto	i1l4750
 17601  06F9  3A01               	xorlw	1	; case 73
 17602  06FA  1903               	skipnz
 17603  06FB  2EBC               	goto	i1l4750
 17604  06FC  3A05               	xorlw	5	; case 76
 17605  06FD  1903               	skipnz
 17606  06FE  2EB2               	goto	i1l4744
 17607  06FF  3A01               	xorlw	1	; case 77
 17608  0700  1903               	skipnz
 17609  0701  2EB2               	goto	i1l4744
 17610  0702  3A1D               	xorlw	29	; case 80
 17611  0703  1903               	skipnz
 17612  0704  2EB2               	goto	i1l976
 17613  0705  3A01               	xorlw	1	; case 81
 17614  0706  1903               	skipnz
 17615  0707  2EB2               	goto	i1l4744
 17616  0708  3A05               	xorlw	5	; case 84
 17617  0709  1903               	skipnz
 17618  070A  2EBC               	goto	i1l4750
 17619  070B  3A01               	xorlw	1	; case 85
 17620  070C  1903               	skipnz
 17621  070D  2EBC               	goto	i1l4750
 17622  070E  3A0D               	xorlw	13	; case 88
 17623  070F  1903               	skipnz
 17624  0710  2EBC               	goto	i1l985
 17625  0711  3A01               	xorlw	1	; case 89
 17626  0712  1903               	skipnz
 17627  0713  2EBC               	goto	i1l985
 17628  0714  2F15               	goto	i1l954
 17629  0715                     i1l954:	
 17630  0715  2F80               	goto	i1l4784
 17631  0716                     i1l4760:	
 17632  0716  3197  27F6  3180   	fcall	PL160	;call to abstracted procedure
 17633  0719  1903               	skipnz
 17634  071A  2F25               	goto	i1l4770
 17635  071B  3197  27F1  3180   	fcall	PL158	;call to abstracted procedure
 17636  071E  1903               	btfsc	3,2
 17637  071F  2F25               	goto	i1l4770
 17638  0720  2F54               	goto	i1l4772
 17639  0721                     i1l1004:	
 17640  0721  2EBA               	goto	i1l4748
 17641  0722                     i1l4766:	
 17642                           
 17643                           ;ir.c: 191: result = 255;
 17644  0722  30FF               	movlw	255
 17645  0723                     L33:	
 17646  0723  00F1               	movwf	IR_GetKeyType@result
 17647                           
 17648                           ;ir.c: 192: break;
 17649  0724  2F80               	goto	i1l4784
 17650  0725                     i1l4770:	
 17651  0725  0872               	movf	IR_GetKeyType@keynum,w
 17652                           
 17653                           ; Switch size 1, requested type "space"
 17654                           ; Number of cases is 15, Range of values is 7 to 89
 17655                           ; switch strategies available:
 17656                           ; Name         Instructions Cycles
 17657                           ; simple_byte           46    24 (average)
 17658                           ; direct_byte          175     9 (fixed)
 17659                           ; jumptable            263     9 (fixed)
 17660                           ;	Chosen strategy is simple_byte
 17661  0726  3A07               	xorlw	7	; case 7
 17662  0727  1903               	skipnz
 17663  0728  2E6D               	goto	i1l949
 17664  0729  3A47               	xorlw	71	; case 64
 17665  072A  1903               	skipnz
 17666  072B  2EBA               	goto	i1l4748
 17667  072C  3A01               	xorlw	1	; case 65
 17668  072D  1903               	skipnz
 17669  072E  2EBA               	goto	i1l4748
 17670  072F  3A05               	xorlw	5	; case 68
 17671  0730  1903               	skipnz
 17672  0731  2EBA               	goto	i1l4748
 17673  0732  3A01               	xorlw	1	; case 69
 17674  0733  1903               	skipnz
 17675  0734  2EBA               	goto	i1l4748
 17676  0735  3A0D               	xorlw	13	; case 72
 17677  0736  1903               	skipnz
 17678  0737  2EBA               	goto	i1l4748
 17679  0738  3A01               	xorlw	1	; case 73
 17680  0739  1903               	skipnz
 17681  073A  2EBA               	goto	i1l4748
 17682  073B  3A05               	xorlw	5	; case 76
 17683  073C  1903               	skipnz
 17684  073D  2E6D               	goto	i1l949
 17685  073E  3A01               	xorlw	1	; case 77
 17686  073F  1903               	skipnz
 17687  0740  2E6D               	goto	i1l949
 17688  0741  3A1D               	xorlw	29	; case 80
 17689  0742  1903               	skipnz
 17690  0743  2E8B               	goto	i1l960
 17691  0744  3A01               	xorlw	1	; case 81
 17692  0745  1903               	skipnz
 17693  0746  2E6D               	goto	i1l949
 17694  0747  3A05               	xorlw	5	; case 84
 17695  0748  1903               	skipnz
 17696  0749  2EBA               	goto	i1l4748
 17697  074A  3A01               	xorlw	1	; case 85
 17698  074B  1903               	skipnz
 17699  074C  2EBA               	goto	i1l4748
 17700  074D  3A0D               	xorlw	13	; case 88
 17701  074E  1903               	skipnz
 17702  074F  2F21               	goto	i1l1004
 17703  0750  3A01               	xorlw	1	; case 89
 17704  0751  1903               	skipnz
 17705  0752  2F21               	goto	i1l1004
 17706  0753  2F22               	goto	i1l4766
 17707  0754                     i1l4772:	
 17708  0754  2796  3180         	fcall	PL162	;call to abstracted procedure
 17709  0756  1903               	skipnz
 17710  0757  2F60               	goto	i1l4782
 17711  0758  279B  3180         	fcall	PL166	;call to abstracted procedure
 17712  075A  1903               	skipnz
 17713  075B  2F60               	goto	i1l4782
 17714  075C  27A0  3180         	fcall	PL168	;call to abstracted procedure
 17715  075E  1D03               	skipz
 17716  075F  2F80               	goto	i1l4784
 17717  0760                     i1l4782:	
 17718  0760  0872               	movf	IR_GetKeyType@keynum,w
 17719                           
 17720                           ; Switch size 1, requested type "space"
 17721                           ; Number of cases is 10, Range of values is 4 to 15
 17722                           ; switch strategies available:
 17723                           ; Name         Instructions Cycles
 17724                           ; simple_byte           31    16 (average)
 17725                           ; direct_byte           33     9 (fixed)
 17726                           ; jumptable            263     9 (fixed)
 17727                           ;	Chosen strategy is simple_byte
 17728  0761  3A04               	xorlw	4	; case 4
 17729  0762  1903               	skipnz
 17730  0763  2E6D               	goto	i1l949
 17731  0764  3A01               	xorlw	1	; case 5
 17732  0765  1903               	skipnz
 17733  0766  2E6D               	goto	i1l949
 17734  0767  3A0D               	xorlw	13	; case 8
 17735  0768  1903               	skipnz
 17736  0769  2E6D               	goto	i1l949
 17737  076A  3A01               	xorlw	1	; case 9
 17738  076B  1903               	skipnz
 17739  076C  2E6D               	goto	i1l949
 17740  076D  3A03               	xorlw	3	; case 10
 17741  076E  1903               	skipnz
 17742  076F  2E6D               	goto	i1l949
 17743  0770  3A01               	xorlw	1	; case 11
 17744  0771  1903               	skipnz
 17745  0772  2E6D               	goto	i1l949
 17746  0773  3A07               	xorlw	7	; case 12
 17747  0774  1903               	skipnz
 17748  0775  2E8B               	goto	i1l960
 17749  0776  3A01               	xorlw	1	; case 13
 17750  0777  1903               	skipnz
 17751  0778  2E6D               	goto	i1l949
 17752  0779  3A03               	xorlw	3	; case 14
 17753  077A  1903               	skipnz
 17754  077B  2E6D               	goto	i1l949
 17755  077C  3A01               	xorlw	1	; case 15
 17756  077D  1903               	skipnz
 17757  077E  2E6D               	goto	i1l949
 17758  077F  2F22               	goto	i1l4766
 17759  0780                     i1l4784:	
 17760                           
 17761                           ;ir.c: 212: }
 17762                           ;ir.c: 213: return result;
 17763  0780  0871               	movf	IR_GetKeyType@result,w
 17764  0781  0008               	return
 17765  0782                     __end_of_IR_GetKeyType:	
 17766  0782                     __ptext101:	
 17767 ;; *************** function i1_TMR2_EnableInterrupt *****************
 17768 ;; Defined at:
 17769 ;;		line 45 in file "driver/src/tmr2.c"
 17770 ;; Parameters:    Size  Location     Type
 17771 ;;		None
 17772 ;; Auto vars:     Size  Location     Type
 17773 ;;		None
 17774 ;; Return value:  Size  Location     Type
 17775 ;;                  1    wreg      void 
 17776 ;; Registers used:
 17777 ;;		None
 17778 ;; Tracked objects:
 17779 ;;		On entry : 1F/0
 17780 ;;		On exit  : 1F/1
 17781 ;;		Unchanged: 0/0
 17782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17787 ;;Total ram usage:        0 bytes
 17788 ;; Hardware stack levels used:    1
 17789 ;; This function calls:
 17790 ;;		Nothing
 17791 ;; This function is called by:
 17792 ;;		_IR_Decode
 17793 ;; This function uses a non-reentrant model
 17794 ;;
 17795                           
 17796                           
 17797                           ;psect for function i1_TMR2_EnableInterrupt
 17798  0782                     i1_TMR2_EnableInterrupt:	
 17799                           
 17800                           ;tmr2.c: 47: PIE1bits.TMR2IE = 1;
 17801                           
 17802                           ;incstack = 0
 17803                           ; Regs used in i1_TMR2_EnableInterrupt: []
 17804  0782  0021               	movlb	1	; select bank1
 17805  0783  1491               	bsf	17,1	;volatile
 17806  0784  0008               	return
 17807  0785                     __end_ofi1_TMR2_EnableInterrupt:	
 17808  0785                     __ptext102:	
 17809 ;; *************** function i1_TMR2_DisableInterrupt *****************
 17810 ;; Defined at:
 17811 ;;		line 40 in file "driver/src/tmr2.c"
 17812 ;; Parameters:    Size  Location     Type
 17813 ;;		None
 17814 ;; Auto vars:     Size  Location     Type
 17815 ;;		None
 17816 ;; Return value:  Size  Location     Type
 17817 ;;                  1    wreg      void 
 17818 ;; Registers used:
 17819 ;;		None
 17820 ;; Tracked objects:
 17821 ;;		On entry : 1F/0
 17822 ;;		On exit  : 1F/1
 17823 ;;		Unchanged: 0/0
 17824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17829 ;;Total ram usage:        0 bytes
 17830 ;; Hardware stack levels used:    1
 17831 ;; This function calls:
 17832 ;;		Nothing
 17833 ;; This function is called by:
 17834 ;;		_IR_Decode
 17835 ;; This function uses a non-reentrant model
 17836 ;;
 17837                           
 17838                           
 17839                           ;psect for function i1_TMR2_DisableInterrupt
 17840  0785                     i1_TMR2_DisableInterrupt:	
 17841                           
 17842                           ;tmr2.c: 42: PIE1bits.TMR2IE = 0;
 17843                           
 17844                           ;incstack = 0
 17845                           ; Regs used in i1_TMR2_DisableInterrupt: []
 17846  0785  0021               	movlb	1	; select bank1
 17847  0786  1091               	bcf	17,1	;volatile
 17848  0787  0008               	return
 17849  0788                     __end_ofi1_TMR2_DisableInterrupt:	
 17850  0788                     PL12:	
 17851  0788  307B               	movlw	123
 17852  0789  0086               	movwf	6
 17853  078A  3023               	movlw	35
 17854  078B  0C01               	rrf	1,w
 17855  078C  00F0               	movwf	??_IR_GetKeyType
 17856  078D  0CF0               	rrf	??_IR_GetKeyType,f
 17857  078E  0C70               	rrf	??_IR_GetKeyType,w
 17858  078F  390F               	andlw	15
 17859  0790  0008               	return
 17860  0791                     __end_ofPL12:	
 17861  0791                     PL108:	
 17862  0791  307B               	movlw	123
 17863  0792  0086               	movwf	6
 17864  0793  3023               	movlw	35
 17865  0794  0087               	movwf	7
 17866  0795  0008               	return
 17867  0796                     __end_ofPL108:	
 17868  0796                     PL162:	
 17869  0796  0E54               	swapf	_ir_state,w	;volatile
 17870  0797  0C89               	rrf	9,f
 17871  0798  3907               	andlw	7
 17872  0799  3A01               	xorlw	1
 17873  079A  0008               	return
 17874  079B                     __end_ofPL162:	
 17875  079B                     PL166:	
 17876  079B  0E54               	swapf	_ir_state,w	;volatile
 17877  079C  0C89               	rrf	9,f
 17878  079D  3907               	andlw	7
 17879  079E  3A02               	xorlw	2
 17880  079F  0008               	return
 17881  07A0                     __end_ofPL166:	
 17882  07A0                     PL168:	
 17883  07A0  0E54               	swapf	_ir_state,w	;volatile
 17884  07A1  0C89               	rrf	9,f
 17885  07A2  3907               	andlw	7
 17886  07A3  3A03               	xorlw	3
 17887  07A4  0008               	return
 17888  07A5                     __end_ofPL168:	
 17889                           
 17890                           	psect	text99
 17891  10E9                     __ptext99:	
 17892 ;; *************** function _TMR1_GATE_ISR *****************
 17893 ;; Defined at:
 17894 ;;		line 40 in file "driver/src/tmr1.c"
 17895 ;; Parameters:    Size  Location     Type
 17896 ;;		None
 17897 ;; Auto vars:     Size  Location     Type
 17898 ;;		None
 17899 ;; Return value:  Size  Location     Type
 17900 ;;                  1    wreg      void 
 17901 ;; Registers used:
 17902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17903 ;; Tracked objects:
 17904 ;;		On entry : 1F/0
 17905 ;;		On exit  : 0/0
 17906 ;;		Unchanged: 0/0
 17907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17912 ;;Total ram usage:        0 bytes
 17913 ;; Hardware stack levels used:    1
 17914 ;; Hardware stack levels required when called:    2
 17915 ;; This function calls:
 17916 ;;		Absolute function
 17917 ;;		_IR_Decode
 17918 ;; This function is called by:
 17919 ;;		_ISR
 17920 ;; This function uses a non-reentrant model
 17921 ;;
 17922                           
 17923                           
 17924                           ;psect for function _TMR1_GATE_ISR
 17925  10E9                     _TMR1_GATE_ISR:	
 17926                           
 17927                           ;tmr1.c: 42: PIR1bits.TMR1GIF = 0;
 17928                           
 17929                           ;incstack = 0
 17930                           ; Regs used in _TMR1_GATE_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17931  10E9  1391               	bcf	17,7	;volatile
 17932                           
 17933                           ;tmr1.c: 43: if ( tmr1_gate_isr_handler )
 17934  10EA  0021               	movlb	1	; select bank1
 17935  10EB  0868               	movf	_tmr1_gate_isr_handler^(0+128),w
 17936  10EC  0469               	iorwf	(_tmr1_gate_isr_handler+1)^(0+128),w
 17937  10ED  1903               	btfsc	3,2
 17938  10EE  0008               	return
 17939                           
 17940                           ;tmr1.c: 44: {
 17941                           ;tmr1.c: 45: tmr1_gate_isr_handler ( );
 17942  10EF  0869               	movf	(_tmr1_gate_isr_handler+1)^(0+128),w
 17943  10F0  008A               	movwf	10
 17944  10F1  0868               	movf	_tmr1_gate_isr_handler^(0+128),w
 17945  10F2  000A               	callw
 17946  10F3  3190               	pagesel	$
 17947  10F4  0008               	return
 17948  10F5                     __end_of_TMR1_GATE_ISR:	
 17949                           
 17950                           	psect	text104
 17951  10DD                     __ptext104:	
 17952 ;; *************** function _TMR0_ISR *****************
 17953 ;; Defined at:
 17954 ;;		line 27 in file "driver/src/tmr0.c"
 17955 ;; Parameters:    Size  Location     Type
 17956 ;;		None
 17957 ;; Auto vars:     Size  Location     Type
 17958 ;;		None
 17959 ;; Return value:  Size  Location     Type
 17960 ;;                  1    wreg      void 
 17961 ;; Registers used:
 17962 ;;		wreg, status,2, status,0, pclath, cstack
 17963 ;; Tracked objects:
 17964 ;;		On entry : 1F/0
 17965 ;;		On exit  : 0/0
 17966 ;;		Unchanged: 0/0
 17967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17972 ;;Total ram usage:        0 bytes
 17973 ;; Hardware stack levels used:    1
 17974 ;; Hardware stack levels required when called:    1
 17975 ;; This function calls:
 17976 ;;		Absolute function
 17977 ;;		_RTC_OnSecond
 17978 ;; This function is called by:
 17979 ;;		_ISR
 17980 ;; This function uses a non-reentrant model
 17981 ;;
 17982                           
 17983                           
 17984                           ;psect for function _TMR0_ISR
 17985  10DD                     _TMR0_ISR:	
 17986                           
 17987                           ;tmr0.c: 29: PIR0bits.TMR0IF = 0;
 17988                           
 17989                           ;incstack = 0
 17990                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 17991  10DD  1290               	bcf	16,5	;volatile
 17992                           
 17993                           ;tmr0.c: 31: if ( tmr0_isr_handler )
 17994  10DE  0021               	movlb	1	; select bank1
 17995  10DF  086A               	movf	_tmr0_isr_handler^(0+128),w
 17996  10E0  046B               	iorwf	(_tmr0_isr_handler+1)^(0+128),w
 17997  10E1  1903               	btfsc	3,2
 17998  10E2  0008               	return
 17999                           
 18000                           ;tmr0.c: 32: {
 18001                           ;tmr0.c: 33: tmr0_isr_handler ( );
 18002  10E3  086B               	movf	(_tmr0_isr_handler+1)^(0+128),w
 18003  10E4  008A               	movwf	10
 18004  10E5  086A               	movf	_tmr0_isr_handler^(0+128),w
 18005  10E6  000A               	callw
 18006  10E7  3190               	pagesel	$
 18007  10E8  0008               	return
 18008  10E9                     __end_of_TMR0_ISR:	
 18009                           
 18010                           	psect	text105
 18011  116D                     __ptext105:	
 18012 ;; *************** function _RTC_OnSecond *****************
 18013 ;; Defined at:
 18014 ;;		line 19 in file "user/src/rtc.c"
 18015 ;; Parameters:    Size  Location     Type
 18016 ;;		None
 18017 ;; Auto vars:     Size  Location     Type
 18018 ;;		None
 18019 ;; Return value:  Size  Location     Type
 18020 ;;                  1    wreg      void 
 18021 ;; Registers used:
 18022 ;;		wreg, status,2, status,0
 18023 ;; Tracked objects:
 18024 ;;		On entry : 1F/1
 18025 ;;		On exit  : 1F/0
 18026 ;;		Unchanged: 0/0
 18027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18032 ;;Total ram usage:        0 bytes
 18033 ;; Hardware stack levels used:    1
 18034 ;; This function calls:
 18035 ;;		Nothing
 18036 ;; This function is called by:
 18037 ;;		_Interrupt_Initialize
 18038 ;;		_TMR0_ISR
 18039 ;; This function uses a non-reentrant model
 18040 ;;
 18041                           
 18042                           
 18043                           ;psect for function _RTC_OnSecond
 18044  116D                     _RTC_OnSecond:	
 18045                           
 18046                           ;rtc.c: 21: rtc_time.second++;
 18047                           
 18048                           ;incstack = 0
 18049                           ; Regs used in _RTC_OnSecond: [wreg+status,2+status,0]
 18050  116D  0020               	movlb	0	; select bank0
 18051  116E  303C               	movlw	60
 18052  116F  0ADD               	incf	_rtc_time+2,f
 18053                           
 18054                           ;rtc.c: 22: if( rtc_time.second > 59 )
 18055  1170  025D               	subwf	_rtc_time+2,w
 18056  1171  1C03               	skipc
 18057  1172  2981               	goto	i1l5096
 18058  1173  303C               	movlw	60
 18059                           
 18060                           ;rtc.c: 23: {
 18061                           ;rtc.c: 24: rtc_time.second = 0;
 18062  1174  01DD               	clrf	_rtc_time+2
 18063                           
 18064                           ;rtc.c: 25: rtc_time.minute++;
 18065  1175  0ADC               	incf	_rtc_time+1,f
 18066                           
 18067                           ;rtc.c: 26: if( rtc_time.minute > 59 )
 18068  1176  025C               	subwf	_rtc_time+1,w
 18069  1177  1C03               	skipc
 18070  1178  2980               	goto	i1l5094
 18071  1179  3018               	movlw	24
 18072                           
 18073                           ;rtc.c: 27: {
 18074                           ;rtc.c: 28: rtc_time.minute = 0;
 18075  117A  01DC               	clrf	_rtc_time+1
 18076                           
 18077                           ;rtc.c: 29: rtc_time.hour++;
 18078  117B  0ADB               	incf	_rtc_time,f
 18079                           
 18080                           ;rtc.c: 30: if( rtc_time.hour > 23 )
 18081  117C  025B               	subwf	_rtc_time,w
 18082  117D  1803               	btfsc	3,0
 18083                           
 18084                           ;rtc.c: 31: {
 18085                           ;rtc.c: 32: rtc_time.hour = 0;
 18086  117E  01DB               	clrf	_rtc_time
 18087                           
 18088                           ;rtc.c: 33: }
 18089                           ;rtc.c: 34: rtc_status.mHour = 1;
 18090  117F  154F               	bsf	_rtc_status,2	;volatile
 18091  1180                     i1l5094:	
 18092                           
 18093                           ;rtc.c: 35: }
 18094                           ;rtc.c: 36: rtc_status.mMin = 1;
 18095  1180  14CF               	bsf	_rtc_status,1	;volatile
 18096  1181                     i1l5096:	
 18097                           
 18098                           ;rtc.c: 37: }
 18099                           ;rtc.c: 38: rtc_status.mSec = 1;
 18100  1181  144F               	bsf	_rtc_status,0	;volatile
 18101  1182  0008               	return
 18102  1183                     __end_of_RTC_OnSecond:	
 18103                           
 18104                           	psect	text106
 18105  07E1                     __ptext106:	
 18106 ;; *************** function _EUSART_Transmit_ISR *****************
 18107 ;; Defined at:
 18108 ;;		line 63 in file "driver/src/eusart.c"
 18109 ;; Parameters:    Size  Location     Type
 18110 ;;		None
 18111 ;; Auto vars:     Size  Location     Type
 18112 ;;		None
 18113 ;; Return value:  Size  Location     Type
 18114 ;;                  1    wreg      void 
 18115 ;; Registers used:
 18116 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18117 ;; Tracked objects:
 18118 ;;		On entry : 1F/0
 18119 ;;		On exit  : 1E/0
 18120 ;;		Unchanged: 0/0
 18121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18126 ;;Total ram usage:        0 bytes
 18127 ;; Hardware stack levels used:    1
 18128 ;; This function calls:
 18129 ;;		Nothing
 18130 ;; This function is called by:
 18131 ;;		_ISR
 18132 ;; This function uses a non-reentrant model
 18133 ;;
 18134                           
 18135                           
 18136                           ;psect for function _EUSART_Transmit_ISR
 18137  07E1                     _EUSART_Transmit_ISR:	
 18138                           
 18139                           ;eusart.c: 65: if ( sizeof (txBuf ) > txRemain )
 18140                           
 18141                           ;incstack = 0
 18142                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 18143  07E1  3020               	movlw	32
 18144  07E2  025E               	subwf	_txRemain,w
 18145  07E3  1803               	skipnc
 18146  07E4  2FF5               	goto	i1l105
 18147                           
 18148                           ;eusart.c: 66: {
 18149                           ;eusart.c: 67: TXREG = txBuf[txTail++];
 18150  07E5  0853               	movf	_txTail,w
 18151  07E6  3E20               	addlw	(low (_txBuf| (0+256)))& (0+255)
 18152  07E7  0086               	movwf	6
 18153  07E8  3001               	movlw	1	; select bank2/3
 18154  07E9  0087               	movwf	7
 18155  07EA  0801               	movf	1,w
 18156  07EB  0023               	movlb	3	; select bank3
 18157  07EC  009A               	movwf	26	;volatile
 18158  07ED  0020               	movlb	0	; select bank0
 18159  07EE  3020               	movlw	32
 18160  07EF  0AD3               	incf	_txTail,f
 18161                           
 18162                           ;eusart.c: 68: if ( sizeof (txBuf ) <= txTail )
 18163  07F0  0253               	subwf	_txTail,w
 18164  07F1  1803               	btfsc	3,0
 18165                           
 18166                           ;eusart.c: 69: {
 18167                           ;eusart.c: 70: txTail = 0;
 18168  07F2  01D3               	clrf	_txTail
 18169                           
 18170                           ;eusart.c: 71: }
 18171                           ;eusart.c: 72: txRemain++;
 18172  07F3  0ADE               	incf	_txRemain,f
 18173                           
 18174                           ;eusart.c: 73: }
 18175  07F4  0008               	return
 18176  07F5                     i1l105:	
 18177                           
 18178                           ;eusart.c: 74: else
 18179                           ;eusart.c: 75: {
 18180                           ;eusart.c: 76: PIE1bits.TXIE = 0;
 18181  07F5  0021               	movlb	1	; select bank1
 18182  07F6  1211               	bcf	17,4	;volatile
 18183  07F7  0008               	return
 18184  07F8                     __end_of_EUSART_Transmit_ISR:	
 18185  007E                     btemp	set	126	;btemp
 18186  007E                     int$flags	set	126
 18187  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    10
    Data        50
    BSS         90
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      63
    BANK1            80      0      76
    BANK2            80     20      62
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           11      0       0
    BANK12            0      0       0

Pointer List with Targets:

    Util_DecValue@pSrc	PTR unsigned int  size(2) Largest target is 117
		 -> gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara(BANK1[26]), gLedPara.mVolume(BIGRAM[1]), gLedPara(BIGRAM[117]), 

    Util_IncValue@pSrc	PTR unsigned int  size(2) Largest target is 117
		 -> gLedRunPara.mCurrentBright(BANK1[10]), gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara(BANK1[26]), gLedPara.mVolume(BIGRAM[1]), 
		 -> gLedPara(BIGRAM[117]), 

    IR_IsValidTime@tm	PTR unsigned char  size(1) Largest target is 7
		 -> ir_state.time(BANK0[4]), ir_state(BANK0[7]), 

    Led_SetCustom@pValue	PTR unsigned int  size(1) Largest target is 26
		 -> gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara(BANK1[26]), 

    sp__RTC_GetTime	PTR struct . size(1) Largest target is 3
		 -> rtc_time(BANK0[3]), 

    loadDuty	PTR FTN(unsigned int ,)void [5] size(2) Largest target is 1
		 -> PWM5_LoadDutyValue(), PWM4_LoadDutyValue(), PWM3_LoadDutyValue(), PWM2_LoadDutyValue(), 
		 -> PWM1_LoadDutyValue(), 

    TMR4_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Notice(), 

    tmr4_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Notice(), Absolute function(), 

    TMR2_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Run(), 

    tmr2_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Run(), Absolute function(), 

    TMR1_Gate_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> IR_Decode(), 

    tmr1_gate_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> IR_Decode(), Absolute function(), 

    tmr1_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> RTC_OnSecond(), 

    tmr0_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> RTC_OnSecond(), Absolute function(), 

    eusart_rcv_isr_handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    DATAEE_ReadBuffer@buf	PTR unsigned char  size(2) Largest target is 117
		 -> gLedPara(BIGRAM[117]), 

    DATAEE_WriteBuffer@buf	PTR unsigned char  size(2) Largest target is 117
		 -> gLedPara(BIGRAM[117]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR4_ISR->_Led_Notice
    _TMR2_ISR->_Led_Run
    _Led_Run->_Led_RunMusic
    _Led_RunMusic->_Led_DynamicCloud
    _Led_RunMusic->_Led_DynamicMoon
    _Led_RunMusic->_Led_DynamicStorm
    _Led_RunMusic->_Led_DynamicWave
    _Led_DynamicWave->i1___wmul
    _Led_DynamicStorm->i1___wmul
    _Led_DynamicMoon->i1___wmul
    _Led_DynamicCloud->i1___wmul
    i1_Led_UpdateBright->i1_PWM5_LoadDutyValue
    _Audio_SelectSound->i1_EUSART_Write
    _Audio_PlaySound->i1_EUSART_Write
    _Led_Ramp->i1_PWM5_LoadDutyValue
    _IR_ScanLongPress->_Led_SetCustom
    _Led_SetCustom->i1___wmul
    _TMR1_GATE_ISR->_IR_Decode
    _IR_Decode->_IR_GetKeyType

Critical Paths under _main in BANK0

    _main->_Led_CheckAutoStatus
    _main->_Led_InitPara
    _SYSTEM_Initialize->_PIN_Initialize
    _Led_SaveParaIfChanged->_DATAEE_WriteBuffer
    _DATAEE_WriteBuffer->_DATAEE_WriteByte
    _Led_InitPara->_DATAEE_ReadBuffer
    _DATAEE_ReadBuffer->_DATAEE_ReadByte
    _Led_CheckAutoStatus->___wmul
    _Led_AutoRun->_Util_IncValue
    _Interrupt_Initialize->_TMR0_SetInterruptHandler
    _Interrupt_Initialize->_TMR1_Gate_SetInterruptHandler
    _Interrupt_Initialize->_TMR2_SetInterruptHandler
    _Interrupt_Initialize->_TMR4_SetInterruptHandler
    _IR_ExitTimeout->_Led_Initialize
    _IR_KeyAction->_Led_Initialize
    _IR_IsValidTime->___bmul
    _IR_ExitSet->_Led_Initialize
    _Led_Initialize->___wmul
    _Led_UpdateBright->_PWM5_LoadDutyValue
    _Audio_StopSound->_EUSART_Write
    _Audio_SetVolume->_EUSART_Write
    _Audio_SetPlayMode->_EUSART_Write
    _Audio_GetValue->___wmul

Critical Paths under _ISR in BANK0

    _Led_RunMusic->_Led_DynamicCloud
    _Led_RunMusic->_Led_DynamicMoon
    _Led_RunMusic->_Led_DynamicStorm
    _Led_RunMusic->_Led_DynamicWave
    _IR_ScanLongPress->_Led_SetCustom

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _IR_KeyAtionIfPressed->_IR_KeyAction

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   52992
                     _Audio_GetValue
               _IR_KeyAtionIfPressed
             _IR_ResetIfTMR1Overflow
                 _IR_UpdateSetStatus
               _Interrupt_Initialize
                        _Led_AutoRun
                _Led_CheckAutoStatus
                       _Led_InitPara
                     _Led_Initialize
              _Led_SaveParaIfChanged
                      _RTC_HourReady
                    _RTC_MinuteReady
                    _RTC_SecondReady
                  _SYSTEM_Initialize
                    _TMR0_StartTimer
                    _TMR1_StartTimer
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
             _ADC_Initialize_Default
          _EUSART_Initialize_Default
              _OSCILLATOR_Initialize
                     _PIN_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM3_Initialize
                    _PWM4_Initialize
                    _PWM5_Initialize
            _TMR0_Initialize_Default
            _TMR1_Initialize_Default
            _TMR2_Initialize_Default
            _TMR4_Initialize_Default
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_Initialize                                       1     1      0      23
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize_Default                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize_Default                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_SecondReady                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_MinuteReady                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_HourReady                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_SaveParaIfChanged                                0     0      0     584
                 _DATAEE_WriteBuffer
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteBuffer                                   6     1      5     584
                                             17 BANK0      6     1      5
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     4     1      3     242
                                             13 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Led_InitPara                                        10    10      0    4581
                                             22 BANK0     10    10      0
                  _DATAEE_ReadBuffer
                   _Led_FirstPowerUp
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Led_FirstPowerUp                                     7     7      0     178
                                             13 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadBuffer                                    7     2      5     463
                                             15 BANK0      7     2      5
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      2     0      2     121
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Led_CheckAutoStatus                                 13    13      0    4276
                                             19 BANK0     13    13      0
                   _Led_UpdateBright
                        _RTC_GetTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Led_AutoRun                                          5     5      0    4796
                                             23 BANK0      5     5      0
                   _Led_UpdateBright
                      _Util_IncValue
 ---------------------------------------------------------------------------------
 (1) _Interrupt_Initialize                                 0     0      0     392
           _TMR0_SetInterruptHandler
      _TMR1_Gate_SetInterruptHandler
           _TMR2_SetInterruptHandler
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR4_SetInterruptHandler                             2     0      2      98
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2      98
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_Gate_SetInterruptHandler                        2     0      2      98
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2      98
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _IR_UpdateSetStatus                                   0     0      0    4944
                     _IR_ExitTimeout
 ---------------------------------------------------------------------------------
 (2) _IR_ExitTimeout                                       0     0      0    4944
                     _Led_Initialize
                    _Led_StartNotice
 ---------------------------------------------------------------------------------
 (1) _IR_ResetIfTMR1Overflow                               0     0      0       0
                    _TMR1_StartTimer
                     _TMR1_StopTimer
               _TMR2_EnableInterrupt
 ---------------------------------------------------------------------------------
 (2) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_KeyAtionIfPressed                                 0     0      0   25026
                       _IR_KeyAction
 ---------------------------------------------------------------------------------
 (2) _IR_KeyAction                                        20    20      0   25026
                                              0 BANK2     20    20      0
                    _Audio_SetVolume
                    _Audio_StopSound
                         _IR_ExitSet
                        _IR_GetIndex
                     _IR_IsValidTime
                     _Led_Initialize
                    _Led_StartNotice
                        _RTC_GetTime
              _TMR2_DisableInterrupt
               _TMR2_EnableInterrupt
                      _Util_DecValue
                      _Util_IncValue
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Util_IncValue                                       10     4      6    4162
                                             13 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (3) _Util_DecValue                                       10     4      6    3622
                                             13 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _TMR2_EnableInterrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_DisableInterrupt                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _IR_IsValidTime                                       5     4      1    1331
                                             16 BANK0      5     4      1
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     676
                                             13 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _IR_GetIndex                                          2     2      0     250
                                             13 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _IR_ExitSet                                           0     0      0    4944
                     _Led_Initialize
                    _Led_StartNotice
 ---------------------------------------------------------------------------------
 (3) _Led_StartNotice                                      2     2      0      31
                                             13 BANK0      2     2      0
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (4) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_Initialize                                      10    10      0    4913
                                             19 BANK0     10    10      0
                  _Audio_SetPlayMode
                    _Audio_SetVolume
                    _Audio_StopSound
                    _Led_TurnOffRamp
                     _Led_TurnOnRamp
                   _Led_UpdateBright
                        _RTC_GetTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _RTC_GetTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Led_UpdateBright                                     1     1      0     380
                                             17 BANK0      1     1      0
                 _PWM1_LoadDutyValue *
                 _PWM2_LoadDutyValue *
                 _PWM3_LoadDutyValue *
                 _PWM4_LoadDutyValue *
                 _PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (3) _PWM5_LoadDutyValue                                   4     2      2     126
                                             13 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _PWM4_LoadDutyValue                                   2     0      2      31
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM3_LoadDutyValue                                   2     0      2      31
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM2_LoadDutyValue                                   2     0      2      31
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM1_LoadDutyValue                                   2     0      2      31
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOnRamp                                       5     5      0     130
                                             13 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOffRamp                                      1     1      0      99
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Audio_StopSound                                      1     1      0     133
                                             14 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _Audio_SetVolume                                      2     2      0     167
                                             14 BANK0      2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _Audio_SetPlayMode                                    2     2      0     167
                                             14 BANK0      2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      93
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Audio_GetValue                                       6     6      0    3457
                                             19 BANK0      6     6      0
                     _ADC_Conversion
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3246
                                             13 BANK0      6     2      4
                        _RTC_GetTime (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADC_Conversion                                       4     2      2      22
                                             13 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    8857
                _EUSART_Transmit_ISR
                           _TMR0_ISR
                      _TMR1_GATE_ISR
                           _TMR2_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR4_ISR                                             0     0      0       0
                   Absolute function *
                         _Led_Notice *
 ---------------------------------------------------------------------------------
 (9) _Led_Notice                                           1     1      0       0
                                              0 COMMON     1     1      0
                  _Led_TurnOffDirect
                   _Led_TurnOnDirect
                     _TMR4_StopTimer
 ---------------------------------------------------------------------------------
 (10) _TMR4_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Led_TurnOnDirect                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Led_TurnOffDirect                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR2_ISR                                             0     0      0    8221
                   Absolute function *
                            _Led_Run *
 ---------------------------------------------------------------------------------
 (9) _Led_Run                                              1     1      0    8221
                                             13 COMMON     1     1      0
                   _IR_ScanLongPress
                           _Led_Ramp
                       _Led_RunMusic
 ---------------------------------------------------------------------------------
 (10) _Led_RunMusic                                        1     1      0    5996
                                             12 COMMON     1     1      0
                    _Audio_PlaySound
                  _Audio_SelectSound
                   _Led_DynamicCloud
                    _Led_DynamicMoon
                   _Led_DynamicStorm
                    _Led_DynamicWave
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicWave                                    19    17      2    1320
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicStorm                                   19    17      2    1490
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicMoon                                    19    17      2    1351
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicCloud                                   19    17      2    1629
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (12) i1_Led_UpdateBright                                  1     1      0     292
                                              4 COMMON     1     1      0
               i1_PWM1_LoadDutyValue *
               i1_PWM2_LoadDutyValue *
               i1_PWM3_LoadDutyValue *
               i1_PWM4_LoadDutyValue *
               i1_PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (11) _Audio_SelectSound                                   2     2      0     115
                                              1 COMMON     2     2      0
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (11) _Audio_PlaySound                                     1     1      0      91
                                              1 COMMON     1     1      0
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (12) i1_EUSART_Write                                      1     1      0      66
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _Led_Ramp                                            7     7      0     540
                                              4 COMMON     7     7      0
               i1_PWM1_LoadDutyValue *
               i1_PWM2_LoadDutyValue *
               i1_PWM3_LoadDutyValue *
               i1_PWM4_LoadDutyValue *
               i1_PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (13) i1_PWM5_LoadDutyValue                                4     2      2      74
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM4_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM3_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM2_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM1_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _IR_ScanLongPress                                    7     7      0    1685
                                              4 BANK0      7     7      0
                      _Led_SetCustom
                      i1_IR_GetIndex
                  i1_Led_StartNotice
                    i1_Util_DecValue
                    i1_Util_IncValue
 ---------------------------------------------------------------------------------
 (11) i1_Util_IncValue                                    10     4      6     232
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (11) i1_Util_DecValue                                    10     4      6     232
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (11) i1_Led_StartNotice                                   2     2      0      22
                                              0 COMMON     2     2      0
                  i1_TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (12) i1_TMR4_StartTimer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_IR_GetIndex                                       2     2      0     165
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _Led_SetCustom                                      11    10      1     696
                                              6 COMMON     7     6      1
                                              0 BANK0      4     4      0
                           i1___wmul
 ---------------------------------------------------------------------------------
 (12) i1___wmul                                            6     2      4     440
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) _TMR1_GATE_ISR                                        0     0      0     636
                   Absolute function *
                          _IR_Decode *
 ---------------------------------------------------------------------------------
 (9) _IR_Decode                                            9     9      0     636
                                              3 COMMON     9     9      0
                      _IR_GetKeyType
            i1_TMR2_DisableInterrupt
             i1_TMR2_EnableInterrupt
 ---------------------------------------------------------------------------------
 (10) i1_TMR2_EnableInterrupt                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_TMR2_DisableInterrupt                             0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _IR_GetKeyType                                       3     3      0     256
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
                       _RTC_OnSecond *
 ---------------------------------------------------------------------------------
 (9) _RTC_OnSecond                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Audio_GetValue
     _ADC_Conversion
     ___wmul
       _RTC_GetTime (ARG)
   _IR_KeyAtionIfPressed
     _IR_KeyAction
       _Audio_SetVolume
         _EUSART_Write
       _Audio_StopSound
         _EUSART_Write
       _IR_ExitSet
         _Led_Initialize
           _Audio_SetPlayMode
             _EUSART_Write
           _Audio_SetVolume
             _EUSART_Write
           _Audio_StopSound
             _EUSART_Write
           _Led_TurnOffRamp
           _Led_TurnOnRamp
           _Led_UpdateBright
             _PWM1_LoadDutyValue *
             _PWM2_LoadDutyValue *
             _PWM3_LoadDutyValue *
             _PWM4_LoadDutyValue *
             _PWM5_LoadDutyValue *
           _RTC_GetTime
           ___wmul
             _RTC_GetTime (ARG)
         _Led_StartNotice
           _TMR4_StartTimer
       _IR_GetIndex
       _IR_IsValidTime
         ___bmul
       _Led_Initialize
         _Audio_SetPlayMode
           _EUSART_Write
         _Audio_SetVolume
           _EUSART_Write
         _Audio_StopSound
           _EUSART_Write
         _Led_TurnOffRamp
         _Led_TurnOnRamp
         _Led_UpdateBright
           _PWM1_LoadDutyValue *
           _PWM2_LoadDutyValue *
           _PWM3_LoadDutyValue *
           _PWM4_LoadDutyValue *
           _PWM5_LoadDutyValue *
         _RTC_GetTime
         ___wmul
           _RTC_GetTime (ARG)
       _Led_StartNotice
         _TMR4_StartTimer
       _RTC_GetTime
       _TMR2_DisableInterrupt
       _TMR2_EnableInterrupt
       _Util_DecValue
       _Util_IncValue
       ___bmul
       ___wmul
         _RTC_GetTime (ARG)
   _IR_ResetIfTMR1Overflow
     _TMR1_StartTimer
     _TMR1_StopTimer
     _TMR2_EnableInterrupt
   _IR_UpdateSetStatus
     _IR_ExitTimeout
       _Led_Initialize
         _Audio_SetPlayMode
           _EUSART_Write
         _Audio_SetVolume
           _EUSART_Write
         _Audio_StopSound
           _EUSART_Write
         _Led_TurnOffRamp
         _Led_TurnOnRamp
         _Led_UpdateBright
           _PWM1_LoadDutyValue *
           _PWM2_LoadDutyValue *
           _PWM3_LoadDutyValue *
           _PWM4_LoadDutyValue *
           _PWM5_LoadDutyValue *
         _RTC_GetTime
         ___wmul
           _RTC_GetTime (ARG)
       _Led_StartNotice
         _TMR4_StartTimer
   _Interrupt_Initialize
     _TMR0_SetInterruptHandler
     _TMR1_Gate_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR4_SetInterruptHandler
   _Led_AutoRun
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _Util_IncValue
   _Led_CheckAutoStatus
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _RTC_GetTime
     ___wmul
       _RTC_GetTime (ARG)
   _Led_InitPara
     _DATAEE_ReadBuffer
       _DATAEE_ReadByte
     _Led_FirstPowerUp
     ___wmul
       _RTC_GetTime (ARG)
   _Led_Initialize
     _Audio_SetPlayMode
       _EUSART_Write
     _Audio_SetVolume
       _EUSART_Write
     _Audio_StopSound
       _EUSART_Write
     _Led_TurnOffRamp
     _Led_TurnOnRamp
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _RTC_GetTime
     ___wmul
       _RTC_GetTime (ARG)
   _Led_SaveParaIfChanged
     _DATAEE_WriteBuffer
       _DATAEE_WriteByte
   _RTC_HourReady
   _RTC_MinuteReady
   _RTC_SecondReady
   _SYSTEM_Initialize
     _ADC_Initialize_Default
     _EUSART_Initialize_Default
     _OSCILLATOR_Initialize
     _PIN_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _PWM3_Initialize
     _PWM4_Initialize
     _PWM5_Initialize
     _TMR0_Initialize_Default
     _TMR1_Initialize_Default
     _TMR2_Initialize_Default
     _TMR4_Initialize_Default
   _TMR0_StartTimer
   _TMR1_StartTimer
   _TMR2_StartTimer

 _ISR (ROOT)
   _EUSART_Transmit_ISR
   _TMR0_ISR
     Absolute function(Fake) *
     _RTC_OnSecond *
   _TMR1_GATE_ISR
     Absolute function(Fake) *
     _IR_Decode *
       _IR_GetKeyType
       i1_TMR2_DisableInterrupt
       i1_TMR2_EnableInterrupt
   _TMR2_ISR
     Absolute function(Fake) *
     _Led_Run *
       _IR_ScanLongPress
         _Led_SetCustom
           i1___wmul
         i1_IR_GetIndex
         i1_Led_StartNotice
           i1_TMR4_StartTimer
         i1_Util_DecValue
         i1_Util_IncValue
       _Led_Ramp
         i1_PWM1_LoadDutyValue *
         i1_PWM2_LoadDutyValue *
         i1_PWM3_LoadDutyValue *
         i1_PWM4_LoadDutyValue *
         i1_PWM5_LoadDutyValue *
       _Led_RunMusic
         _Audio_PlaySound
           i1_EUSART_Write
         _Audio_SelectSound
           i1_EUSART_Write
         _Led_DynamicCloud
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicMoon
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicStorm
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicWave
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
   _TMR4_ISR
     Absolute function(Fake) *
     _Led_Notice *
       _Led_TurnOffDirect
       _Led_TurnOnDirect
       _TMR4_StopTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      3F       5       78.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     14      3E       9       77.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      D7      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11               B      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      D7      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Dec 05 14:30:56 2017

                      ??i1_EUSART_Write 0070              __size_of_Audio_SetPlayMode 0017  
      __end_of_TMR2_SetInterruptHandler 0F0F                          ___bmul@product 002E  
            __size_of_Audio_SelectSound 001B                             __CFG_CP$OFF 0000  
                                    PL2 0DCC                                      PL4 16BE  
                                    PL6 0DDF                                      PL8 16CF  
                                    l26 092F                                      l46 0FDA  
                                    l95 163A                    i1_PWM1_LoadDutyValue 1131  
                   ?_IR_UpdateSetStatus 0070                           _Util_IncValue 1531  
                   ___wmul@multiplicand 002F                        i1___wmul@product 0074  
                ??i1_PWM4_LoadDutyValue 0072           i1PWM5_LoadDutyValue@dutyValue 0070  
                _ADC_Initialize_Default 0FE4                                     PL10 0F73  
                                   PL20 0DF0                                     PL12 0788  
                                   PL30 16F6                                     PL22 0DFE  
                                   PL14 16D9                                     PL40 1721  
                                   PL32 16FD                                     PL24 04D8  
                                   PL16 04C9                     IR_ScanLongPress@cnt 0040  
                                   PL50 04E2                                     PL42 1737  
                                   PL34 1705                                     PL26 0E06  
                                   PL18 16E2                                     PL60 175C  
                                   PL52 04F4                                     PL44 174D  
                                   PL36 0E13                                     PL28 16EF  
                                   PL70 0508                                     PL62 176C  
                                   PL54 04FB                                     PL46 1753  
                                   PL38 0F84                             __CFG_LVP$ON 0000  
                                   PL80 0511                                     PL72 1796  
                                   PL64 1776                                     PL56 0E23  
                                   PL48 0E1A                     IR_ScanLongPress@idx 002A  
                                   PL90 0529                                     PL82 051D  
                                   PL74 17A3                                     PL66 1787  
                                   PL58 0502                                     PL92 0E28  
                                   PL84 17B5                                     PL76 17A7  
                                   PL68 0F9A                                     PL94 0535  
                                   PL86 17BB                                     PL78 17AB  
                                   PL96 17C2                                     PL88 0FA3  
                                   PL98 0E34                                     l343 08E2  
                                   l505 0889                                     l620 0BB5  
                                   l615 0B6F                                     l616 0B7D  
                                   l625 0C20                                     l617 0B8B  
                                   l626 0C2A                                     l618 0B99  
                                   l619 0BA7                                     l901 1584  
                                   l638 0A0F                                     l920 1593  
                                   l912 158D                                     l924 1596  
                                   l916 1590                                     _GIE 005F  
                                   _PR2 001E                                     _PR4 0416  
                          __CFG_CPD$OFF 0000                                     _ISR 0004  
                       _Led_TurnOffRamp 0A7B                        ?_Led_DynamicMoon 0076  
       __end_of_TMR2_Initialize_Default 0EF7                        ?_Led_DynamicWave 0076  
                       _PWM4_Initialize 0DA1                                     wreg 0009  
                 ?_Interrupt_Initialize 0070                          ?_RTC_HourReady 0070  
                                  PL100 0E40                                    PL110 17C9  
                                  PL102 0541                                    PL120 17DD  
                                  PL112 17D3                                    PL104 0E47  
                                  PL130 056F                                    PL122 054F  
                                  PL114 0E51                                    PL106 0549  
                                  PL140 0E73                                    PL132 0577  
                                  PL124 0557                                    PL116 0E5B  
                                  PL108 0791                                    PL150 0E8B  
                                  PL142 0E79                                    PL134 057F  
                                  PL126 055F                                    PL118 0E65  
                                  PL160 17F6                                    PL152 17E5  
                                  PL144 0E7F                                    PL136 0E6B  
                                  PL128 0567                                    PL170 0E95  
                                  PL162 0796                                    PL154 058F  
                                  PL146 0EE7                                    PL138 0587  
                                  PL172 17FB                                    PL164 0E90  
                                  PL156 17EB                                    PL148 0E85  
                                  PL166 079B                                    PL158 17F1  
                                  PL168 07A0                                    ?_ISR 0070  
             _EUSART_Initialize_Default 0FEC                                    l1044 0AD7  
                                  l1054 0AD7                                    l1039 0B05  
                                  l1242 146A                                    l1219 13E3  
                                  l1155 11DB                                    l1172 1255  
                                  l1165 1231                                    l1178 1262  
                                  l5004 0F17                                    l5014 0F27  
                                  l6012 162F                                    l6110 0A92  
                                  l6040 1186                                    l6032 1128  
                                  l6130 156B                                    l6026 1640  
                                  l6034 113A                                    l6122 0AAC  
                                  l6042 16B8                                    l7010 1507  
                                  l6036 114C                                    l6116 0AAA  
                                  l6204 0A0E                     PIN_Initialize@state 002D  
                                  l6134 1571                                    l7030 08EA  
                                  l6038 115E                                    l6230 0A4F  
                                  l6214 0A49                                    l6222 0A4B  
                                  l6206 0A10                                    l7032 08EE  
                                  l7008 148C                                    l7026 08D8  
                                  l6242 0A65                                    l7122 0AD9  
                                  l7210 0C7B                                    l6236 0A64  
                                  l6156 093C                                    l6500 166B  
                                  l7124 0B06                                    l7204 0C6E  
                                  l7140 0CDE                                    l6166 0962  
                                  l6510 167C                                    l7214 0C87  
                                  l7070 0BC2                                    l7054 0B61  
                                  l4830 0FAA                                    l6096 0A81  
                                  l6088 0A7B                                    l6248 0A79  
                                  l6192 09D1                                    l6504 1675  
                                  l7232 0CAD                                    l7224 0C90  
                                  l7160 0D02                                    l7152 0CF9  
                                  l7080 0C09                                    l4832 0FAC  
                                  l4808 0FE4                                    l6194 09E4  
                                  l6186 09A9                                    l6530 16B3  
                                  l6196 09F2                                    l6604 11BD  
                                  l7228 0CA0                                    l7236 0CB2  
                                  l7180 0D1E                                    l7172 0D15  
                                  l7092 0C34                                    l7076 0BC3  
                                  l6198 0A00                                    l6390 165D  
                                  l6518 1689                                    l6622 11CB  
                                  l6606 11BF                                    l4926 0AC8  
                                  l4950 0F0F                                    l7270 089B  
                                  l6480 158D                                    l6472 1582  
                                  l6528 16A5                                    l6608 11C3  
                                  l4848 0D2F                                    l7096 0C43  
                                  l6482 1590                                    l6474 1587  
                                  l6714 124F                                    l6650 11DB  
                                  l7282 08AF                                    l6484 1593  
                                  l6476 1589                                    l6492 159D  
                                  l6716 1252                                    l6636 11D3  
                                  l6580 11A7                                    l7292 08C7  
                                  l6486 1596                                    l6478 158B  
                                  l6494 15FF                                    l6902 13B9  
                                  l6814 12ED                                    l6718 1255  
                                  l6590 11AF                                    l7198 0C5B  
                                  l6488 1599                                    l6920 13E3  
                                  l6824 1309                                    l6808 12DE  
                                  l6744 126A                                    l6664 11FC  
                                  l6914 13D1                                    l6842 132C  
                                  l6754 127C                                    l6738 1262  
                                  l6674 1213                                    l6594 11B3  
                                  l6932 13FD                                    l6908 13C0  
                                  l6780 12AA                                    l6764 1285  
                                  l6692 1223                                    l6934 1400  
                                  l6926 13F1                                    l6862 134D  
                                  l6846 1332                                    l6944 1427  
                                  l6928 13F2                                    l6880 1379  
                                  l6792 12C1                                    l6776 12A4  
                                  l6970 145B                                    l6954 143C  
                                  l6890 1395                                    l6874 136A  
                                  l6858 1347                                    l6698 1231  
                                  l6796 12C7                                    l6982 146F  
                                  l6966 1455                 __end_of_RTC_MinuteReady 0D5F  
                                  l6986 1475                                    l6998 1484  
                          __CFG_WDTE$ON 0000                                    _GAIN 1800  
               __end_of_PWM1_Initialize 0D8D                                    _LATA 010C  
                                  _LATB 010D                                    _LATC 010E  
               __end_of_RTC_SecondReady 0D64                                    u3730 0EE5  
                                  u5315 0A3C                                    u5165 118C  
                                  u5325 0A47                                    u6235 08DE  
                                  u6245 08E8                                    u5285 0A27  
                                  u6435 0CDB                                    u5645 1545  
                                  i1l95 0124                                    u6535 0C75  
                                  u6455 0CFF                                    u6545 0C81  
                                  u6475 0D1B                                    u5765 151F  
                  ??_IR_UpdateSetStatus 003D                                    u6807 0984  
                                  u6817 092A                                    u6777 0942  
                                  u6787 0953                                    u6797 0973  
                                  _TMR1 0019                                    _TMR2 001D  
                                  _TMR4 0415                                    _WPUA 020C  
                                  _WPUB 020D                                    _WPUC 020E  
                      _Led_TurnOnDirect 07D5                            __CFG_WRT$OFF 0000  
                   __end_of_Led_AutoRun 0CB3                                    _main 087A  
                     ?_Led_DynamicCloud 0076                         _TMR0_StartTimer 0F02  
                                  fsr0h 0005                                    fsr1h 0007  
                                  indf0 0000                                    fsr0l 0004  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                          ?_Util_DecValue 002D  
                    Led_DynamicMoon@val 002A                      Led_DynamicMoon@ptp 0076  
                     ?_Led_DynamicStorm 0076                                    start 002E  
                    ??_Led_DynamicCloud 0078                        Util_DecValue@min 002F  
                       _PWM5_Initialize 0DAC                 _TMR0_Initialize_Default 0DB2  
                  _IR_KeyAtionIfPressed 0AC3                           __CFG_CSWEN$ON 0000  
                    Led_DynamicWave@val 002A                      Led_DynamicWave@ptp 0076  
                     ___bmul@multiplier 002F                           __CFG_MCLRE$ON 0000  
                       __end_of_Led_Run 006A                      ??_Led_DynamicStorm 0078  
            ??_TMR4_SetInterruptHandler 002F              __end_of_PWM5_LoadDutyValue 1198  
                       IR_Decode@keyNum 0079                                   ??_ISR 007E  
                   Led_DynamicCloud@val 002A                     Led_DynamicCloud@ptp 0076  
                    i1_Led_UpdateBright 04B5                   ?i1_PWM1_LoadDutyValue 0070  
             __size_of_DATAEE_WriteByte 0021                          ?_Util_IncValue 002D  
                       IR_Decode@rptCnt 004C                 __end_of_PWM2_Initialize 0D96  
                   _Led_CheckAutoStatus 0CB3                           ?_EUSART_Write 0070  
        __size_of_OSCILLATOR_Initialize 000A           __end_of_OSCILLATOR_Initialize 0D87  
                                 _ADACT 009F                                   ?_main 0070  
               __end_of_Led_StartNotice 1652           __size_ofi1_PWM3_LoadDutyValue 0006  
                                 _ADRES 009B                                   _CCPR1 0291  
                                 _CCPR2 0295                                   _CCPR3 0311  
                                 _CCPR4 0315          ?_TMR1_Gate_SetInterruptHandler 002D  
                       _TMR1_StartTimer 0AC8                                   _T1CON 001B  
                                 _T2CON 001F                                   _T4CON 0417  
                        __CFG_DEBUG$OFF 0000                                   i1l105 07F5  
                            _Led_Notice 07A5                                   i1l521 001E  
                                 i1l523 0024                                   i1l517 000D  
                                 i1l526 002C                                   i1l519 0017  
                                 i1l812 00EA                                   i1l901 038E  
                                 i1l920 039D                                   i1l912 0397  
                                 i1l824 0069                                   i1l761 015A  
                                 i1l924 03A0                                   i1l916 039A  
                                 i1l772 025C                                   i1l960 068B  
                                 i1l954 0715                                   i1l949 066D  
                                 i1l976 06B2                                   i1l985 06BC  
                   ?i1_Led_UpdateBright 0070                                   _OSCEN 091D  
                    _PWM4_LoadDutyValue 115B                                   _TMR0H 0016  
                                 _TMR0L 0015                __end_of_IR_ScanLongPress 0388  
                                 _TRISA 008C                                   _TRISB 008D  
                                 _TRISC 008E                       _Led_TurnOffDirect 07CC  
                                 _TXREG 019A                    i1_PWM5_LoadDutyValue 1198  
                    __size_of_IR_Decode 00C9       __size_of_TMR0_SetInterruptHandler 0008  
               __size_of_PIN_Initialize 004D               ?_TMR0_SetInterruptHandler 002D  
                         __CFG_PWRTE$ON 0000                             ?_IR_ExitSet 0070  
                        __CFG_FCMEN$OFF 0000                      _DATAEE_WriteBuffer 0FAA  
                      __end_of_TMR0_ISR 10E9                        __end_of_TMR2_ISR 1101  
                      __end_of_TMR4_ISR 110D                      ?_Led_TurnOffDirect 0070  
                      _tmr4_isr_handler 00E4                         _DATAEE_ReadByte 0D48  
       __end_ofi1_TMR2_DisableInterrupt 0788                     ?_PWM4_LoadDutyValue 002D  
                                 _txBuf 0120                    __end_of_Led_InitPara 0C49  
                  ?_Led_CheckAutoStatus 0070            __end_ofi1_PWM2_LoadDutyValue 1149  
               __end_of_PWM3_Initialize 0DA1                          __CFG_BOREN$OFF 0000  
                                 pclath 000A                        __end_ofi1___wmul 0469  
                        __CFG_BORV$HIGH 0000                     Led_DynamicMoon@duty 0020  
                   ?_DATAEE_WriteBuffer 0031                     ??_Led_TurnOffDirect 0070  
                                 status 0003                     i1___wmul@multiplier 0070  
                                 wtemp0 007E                   Audio_SetPlayMode@type 002E  
                       _TMR2_StartTimer 0F05                       Util_DecValue@pSrc 002D  
                          __end_ofPL100 0E47                            __end_ofPL110 17D3  
                          __end_ofPL102 0549                            __end_ofPL120 17E5  
                          __end_ofPL112 17DD                            __end_ofPL104 0E51  
                  ??i1_Led_UpdateBright 0074                            __end_ofPL130 0577  
                          __end_ofPL122 0557                            __end_ofPL114 0E5B  
                          __end_ofPL106 054F                            __end_ofPL140 0E79  
                          __end_ofPL132 057F                            __end_ofPL124 055F  
                          __end_ofPL116 0E65                            __end_ofPL108 0796  
                          __end_ofPL150 0E90                            __end_ofPL142 0E7F  
                          __end_ofPL134 0587                            __end_ofPL126 0567  
                          __end_ofPL118 0E6B                            __end_ofPL160 17FB  
                          __end_ofPL152 17EB                            __end_ofPL144 0E85  
                          __end_ofPL136 0E73                            __end_ofPL128 056F  
                          __end_ofPL170 0E9A                            __end_ofPL162 079B  
                          __end_ofPL154 0595                            __end_ofPL146 0EED  
                          __end_ofPL138 058F                            __end_ofPL172 1800  
                          __end_ofPL164 0E95                            __end_ofPL156 17F1  
                          __end_ofPL148 0E8B                            __end_ofPL166 07A0  
                          __end_ofPL158 17F6                            __end_ofPL168 07A5  
              __end_of_Led_UpdateBright 0AC3                   ?_IR_KeyAtionIfPressed 0070  
                          __end_of_GAIN 1805                 __size_of_Audio_GetValue 0051  
                   Led_DynamicWave@duty 0020                         Led_TurnOnRamp@i 0031  
                   i1Util_IncValue@pSrc 0070                        __end_of_Led_Ramp 00A0  
                       __initialization 082F                    __end_of_Led_RunMusic 00EB  
                      IR_Decode@codeVal 0042                            __end_of_main 08CA  
                  ??_PWM4_LoadDutyValue 002F                 __end_of_Led_TurnOffRamp 0A8E  
                       i1_Util_DecValue 0469                  IR_ScanLongPress@i_1438 0029  
               Audio_PlaySound@checksum 0071                          ??_EUSART_Write 002D  
               __end_of_PWM4_Initialize 0DAC                      Led_SetCustom@value 0020  
                    Led_StartNotice@cnt 002E                    ??_DATAEE_WriteBuffer 0036  
                  Led_DynamicCloud@duty 0020               __end_of_Led_TurnOffDirect 07D5  
              _TMR2_SetInterruptHandler 0F07                                  ??_main 0040  
                        IR_GetIndex@idx 002D                   ?i1_PWM5_LoadDutyValue 0070  
                   Led_DynamicStorm@val 002A                         ??_RTC_HourReady 002D  
                  DATAEE_ReadBuffer@buf 0031                     Led_DynamicStorm@ptp 0076  
                  DATAEE_ReadBuffer@len 0033                  ??_Interrupt_Initialize 002F  
                       i1_Util_IncValue 048F                             _Led_AutoRun 0C49  
               __end_of_TMR0_StartTimer 0F05                                  _ADCON0 009D  
                                _ADCON1 009E                       Led_FirstPowerUp@i 0033  
                                _ADRESH 009C                                  _ADRESL 009B  
                 ??_Led_CheckAutoStatus 0033                                  _ANSELA 018C  
                                _ANSELB 018D                                  _ANSELC 018E  
                    __CFG_RSTOSC$HFINT1 0000           __size_of_TMR2_EnableInterrupt 0003  
                                _T0CON0 0017                                  _T0CON1 0018  
                                _T1GCON 001C                        ?_RTC_MinuteReady 0070  
                                _RC1STA 019D                                  i1l1004 0721  
                                i1l1104 0387                                  i1l1121 02D6  
                                i1l1116 02C6                                  i1l1109 02A2  
                      ?_PWM1_Initialize 0070                                  i1l1095 0649  
                          ?_IR_GetIndex 0070                                  _ODCONA 028C  
                                _ODCONB 028D                                  _ODCONC 028E  
                                i1l4200 041D                                  i1l4032 0128  
                                i1l4018 0119                                  i1l4054 0456  
                                i1l5120 05C3                                  i1l5104 059E  
                                i1l5200 064E                                  i1l4208 044E  
                                i1l5040 07C8                                  i1l5130 05E1  
                                i1l5122 05C5                                  i1l4058 045C  
                                i1l5132 05E3                                  i1l5116 05B5  
                                i1l5036 07C4                 __end_of_PWM5_Initialize 0DB2  
                                i1l5142 05F6                                  i1l4600 0321  
                                i1l5170 061F                                  i1l5162 0619  
                                i1l4370 038C                                  i1l4380 039A  
                                i1l4372 0391                                  i1l4540 02D6  
                                i1l4532 02C6                                  i1l4524 02A2  
                                i1l5094 1180                                  i1l4710 0670  
                                i1l5174 0627                                  i1l5182 062F  
                                i1l4382 039D                                  i1l4374 0393  
                                i1l4390 03A7                                  i1l4622 033F  
                                i1l4614 032B                                  i1l3910 1167  
                                i1l6150 04B6                                  i1l6302 016A  
                                i1l5096 1181                                  i1l4720 0684  
                                i1l5184 0631                                  i1l4384 03A0  
                                i1l4376 0395                                  i1l4392 0409  
                                i1l3912 1198                                  i1l3904 1131  
                                i1l6312 022E                                  i1l4722 0686  
                                i1l4386 03A3                                  i1l4378 0397  
                                i1l4554 02E9                                  i1l3906 1143  
                                i1l6306 0176                                  i1l5196 064B  
                                i1l5188 0635                                  i1l4636 034C  
                                i1l3908 1155                                  i1l6420 0087  
                                i1l6412 006B                                  i1l6332 027A  
                                i1l6324 0269                                  i1l4750 06BC  
                                i1l4726 068C                                  i1l4566 02F6  
                                i1l6422 0090                                  i1l6406 006A  
                                i1l6342 028A                                  i1l6326 026B  
                                i1l6270 01AC                                  i1l6254 017D  
                                i1l4744 06B2                                  i1l4760 0716  
                                i1l4592 030D                                  i1l6416 007A  
                                i1l6360 01FA                                  i1l6352 01CE  
                                i1l6264 01AB                        ?_RTC_SecondReady 0070  
                                i1l4770 0725                                  i1l4738 06A9  
                                i1l4578 0303                                  i1l6346 0296  
                                i1l6338 027B                                  i1l6362 01FC  
                                i1l6274 01BB                                  i1l6434 00A0  
                                i1l4772 0754                                  i1l4748 06BA  
                                i1l6292 0158                                  i1l6284 012C  
                                i1l6460 00D8                                  i1l6444 00B2  
                                i1l6436 00BC                                  i1l4782 0760  
                                i1l4766 0722                                  i1l4758 06C5  
                                i1l6382 0227                                  i1l6374 020C  
                                i1l6278 01C7                                  i1l6462 00DE  
                                i1l6454 00BD                                  i1l4784 0780  
                                i1l6368 020B                                  i1l6464 00E4  
                                i1l6560 0042                                  i1l6298 015B  
                                i1l6378 021B                                  i1l6458 00D2  
                                i1l6562 0043                                  i1l6556 0037  
                                i1l6576 0067                                  u314_25 04A3  
                                u315_25 047D                                  u404_20 0607  
                                u405_20 0608                                  u261_25 119D  
                                _SP1BRG 019B                                  u541_20 0147  
                                u542_25 0151                                  u536_20 0198  
                                u553_20 01E9                         ??_Util_DecValue 0033  
                                u546_20 0249                                  u554_25 01F3  
                                u548_25 0262                                  _OSCFRQ 091F  
                                u399_24 05DA                                  u399_25 05D8  
                                _PWM5DC 0617                                  _TX1STA 019E  
                 __end_of_IR_GetKeyType 0782                 __size_of_IR_IsValidTime 004E  
                             ??_Led_Run 007D               ??_TMR0_Initialize_Default 002D  
                                _VOLUME 1805                         _TMR4_StartTimer 16B8  
               __size_of_Led_Initialize 013E                       __end_of_IR_Decode 065E  
                 __end_of_TMR1_GATE_ISR 10F5        __size_of_TMR2_Initialize_Default 000A  
                       ??_Util_IncValue 0033                                  ___bmul 165B  
                   __size_of_IR_ExitSet 0009                  ??i1_PWM1_LoadDutyValue 0072  
           __size_of_PWM3_LoadDutyValue 000C                 __end_of_TMR1_StartTimer 0ACB  
                                ___wmul 1569                          __CFG_STVREN$ON 0000  
                  Led_DynamicMoon@F8362 00AA                     Audio_GetValue@value 0037  
                   _EUSART_Transmit_ISR 07E1                        ?_PWM2_Initialize 0070  
                                _txHead 0052                                  _txTail 0053  
               __end_of_DATAEE_ReadByte 0D56                        ?_Led_StartNotice 0070  
                           ?_Led_Notice 0070                        IR_IsValidTime@tm 0034  
                  Led_DynamicWave@F8352 00B4                 __end_of_TMR2_StartTimer 0F07  
                 __end_of_Led_SetCustom 0454                ??_IR_ResetIfTMR1Overflow 002D  
              ?_TMR1_Initialize_Default 0070                ?_TMR4_Initialize_Default 0070  
                  ?_EUSART_Transmit_ISR 0070                      Util_DecValue@delta 0031  
                    i1Util_DecValue@min 0072                        ?_PWM3_Initialize 0070  
                     _SYSTEM_Initialize 0D64                            ?_RTC_GetTime 0070  
               __end_of__initialization 0877                  ??_IR_KeyAtionIfPressed 003D  
                    ?_SYSTEM_Initialize 0070                     i1Led_UpdateBright@i 0074  
        __size_of_Led_SaveParaIfChanged 0010              __end_of_PWM2_LoadDutyValue 1143  
         __end_of_Led_SaveParaIfChanged 0B53                        Led_TurnOffRamp@i 002D  
               __end_ofi1_Util_DecValue 048F                 __size_of_IR_ExitTimeout 0008  
           PWM1_LoadDutyValue@dutyValue 002D                    i1Util_IncValue@delta 0074  
                   ___bmul@multiplicand 002D               __size_of_Led_FirstPowerUp 005C  
                      Led_DynamicMoon@i 002C                        Led_DynamicWave@i 002C  
       TMR4_SetInterruptHandler@handler 002D                          __pcstackCOMMON 0070  
                     IR_GetIndex@keynum 002E                            __pidataBANK1 0807  
                          __pidataBANK2 10D3                     ??_SYSTEM_Initialize 002E  
                             ?_TMR0_ISR 0070          __size_of_TMR2_DisableInterrupt 0003  
                             ?_TMR2_ISR 0070                   Led_DynamicCloud@F8372 00A0  
                             ?_TMR4_ISR 0070                 ?_ADC_Initialize_Default 0070  
         __end_of_TMR2_DisableInterrupt 16B8                        _DATAEE_WriteByte 0FC3  
                      ?_Led_TurnOffRamp 0070                 __end_ofi1_Util_IncValue 04B5  
                            _adc_result 00C8                      _PWM1_LoadDutyValue 1125  
                      ?_PWM4_Initialize 0070                              __end_ofPL2 0DDF  
                            __end_ofPL4 16CF                              __end_ofPL6 0DF0  
                            __end_ofPL8 16D9        __size_ofi1_TMR2_DisableInterrupt 0003  
              __end_of_Led_TurnOnDirect 07DE                    i1_PWM2_LoadDutyValue 1143  
                   Led_SetCustom@pValue 0076              __size_of_Led_TurnOffDirect 0009  
           PWM4_LoadDutyValue@dutyValue 002D                  ??i1_PWM5_LoadDutyValue 0072  
                             ?i1___wmul 0070                      DATAEE_ReadBuffer@i 0035  
                        _PIN_Initialize 0E9A                   __size_of_Led_InitPara 00F6  
                   ?_PWM1_LoadDutyValue 002D                        Led_Initialize@ct 003A  
                             ?_Led_Ramp 0070                        ?_TMR0_StartTimer 0070  
               __end_of_TMR4_StartTimer 16BB               __end_of_SYSTEM_Initialize 0D7D  
                 ??_EUSART_Transmit_ISR 0070                __size_of_Audio_PlaySound 0012  
                            __pbssBANK0 0040                              __pbssBANK1 00C8  
                            __pbssBANK2 0120                __size_of_Audio_SetVolume 0016  
                  __end_of_EUSART_Write 1645                        ?_PWM5_Initialize 0070  
               __size_of_Led_TurnOnRamp 001C            _PWM2_LoadDutyValue$intlevel0 113A  
                 DATAEE_ReadBuffer@addr 002F                    Led_DynamicStorm@duty 0020  
                 __size_of_Led_RunMusic 004B                     IR_GetKeyType@keynum 0072  
               __size_of_ADC_Conversion 0021                     IR_GetKeyType@result 0071  
                        _Audio_GetValue 08CA                    ??_PWM1_LoadDutyValue 002F  
                   __size_of_Led_Notice 0027                              __pmaintext 087A  
         i1PWM3_LoadDutyValue@dutyValue 0070          __end_of_ADC_Initialize_Default 0FEC  
                               ?___bmul 002D        __end_of_TMR0_SetInterruptHandler 0B3B  
              ??i1_TMR2_EnableInterrupt 0070                                 ?___wmul 002D  
                      ?_TMR1_StartTimer 0070                              ??_TMR0_ISR 0070  
                       __CFG_PPS1WAY$ON 0000                              ??_TMR2_ISR 007E  
                            ??_TMR4_ISR 0071         TMR2_SetInterruptHandler@handler 002D  
          _PWM5_LoadDutyValue$intlevel0 1186                              __pintentry 0004  
                          _Led_InitPara 0B53                                 _CCP1CON 0293  
                               _CCP2CON 0297                                 _CCP3CON 0313  
                               _CCP4CON 0317                   ?i1_PWM2_LoadDutyValue 0070  
              __size_of_Audio_StopSound 0012               __size_of_Led_DynamicCloud 006F  
                __end_of_PIN_Initialize 0EE7                  __size_ofi1_IR_GetIndex 0083  
                            ??i1___wmul 0074                 __size_of_TMR1_StopTimer 0002  
             __size_of_Led_DynamicStorm 0060                        ?_DATAEE_ReadByte 002D  
         __size_ofi1_PWM4_LoadDutyValue 0006         __end_of_TMR1_Initialize_Default 0DCC  
       __end_of_TMR4_Initialize_Default 0F02                       ?_IR_ScanLongPress 0070  
                    _PWM5_LoadDutyValue 1183                            ??_IR_ExitSet 003D  
                               _OSCCON1 0919                                 _OSCCON3 091B  
                               _NVMADRH 0892                                 _NVMADRL 0891  
                               _OSCTUNE 091E                                 _NVMDATL 0893  
                               _NVMCON2 0896                                 _PWM5CON 0619  
                          _Led_RunMusic 00A0                                 _PPSLOCK 0E0F  
                    ??_IR_ScanLongPress 0024                              ??_Led_Ramp 0074  
                      ?_TMR2_StartTimer 0070                           ?_IR_KeyAction 0070  
       __size_of_IR_ResetIfTMR1Overflow 003F                     ?_PWM5_LoadDutyValue 002D  
           __size_of_IR_UpdateSetStatus 000C                __size_of_Led_DynamicMoon 0051  
              __size_of_Led_DynamicWave 0051         ??_TMR1_Gate_SetInterruptHandler 002F  
          __end_ofi1_PWM3_LoadDutyValue 115B                        Util_IncValue@max 002F  
                        _IR_IsValidTime 1667                          Led_SetCustom@i 0023  
                __end_of_Audio_GetValue 091B                    DATAEE_WriteByte@addr 002D  
                               _Led_Run 0030                    DATAEE_WriteByte@byte 002F  
                  __size_of_IR_GetIndex 0083                          _Led_Initialize 093C  
                      ?i1_Util_DecValue 0070                       ?_Led_UpdateBright 0070  
               _TMR2_Initialize_Default 0EED              ??_TMR2_SetInterruptHandler 002F  
                    ??_Led_UpdateBright 0031                 __size_of_TMR4_StopTimer 0003  
                       __size_of___bmul 000C                      __end_of_IR_ExitSet 165B  
                       __size_of___wmul 0015                    ??_PWM5_LoadDutyValue 002F  
                     _DATAEE_ReadBuffer 0D2D                        ?i1_Util_IncValue 0070  
       TMR0_SetInterruptHandler@handler 002D                                 __ptext1 0F05  
                               __ptext2 0F02                                 __ptext3 0D64  
                               __ptext4 0EF7                                 __ptext5 0EED  
                               __ptext6 0DBD                                 __ptext7 0DB2  
                               __ptext8 0DAC                                 __ptext9 0DA1  
                       ?_PIN_Initialize 0070                      ?_DATAEE_ReadBuffer 002F  
                          __size_of_ISR 002A                               _T1CONbits 001B  
                 _OSCILLATOR_Initialize 0D7D                               _T2CONbits 001F  
               __size_ofi1_EUSART_Write 0014                               _T4CONbits 0417  
     __size_of_TMR4_SetInterruptHandler 0008               ?_TMR4_SetInterruptHandler 002D  
                 _tmr1_gate_isr_handler 00E8                     ??_DATAEE_ReadBuffer 0034  
                          ?_Led_AutoRun 0070                          ??_IR_KeyAction 0140  
            __size_of_SYSTEM_Initialize 0019                                 clrloop0 110E  
                      ?_TMR4_StartTimer 0070                  __end_of_IR_IsValidTime 16B5  
                  end_of_initialization 0877                             _gLedRunPara 00CA  
                __end_of_Led_Initialize 0A7A                           i1_IR_GetIndex 0388  
                               init_ram 1119                 Audio_SetVolume@checksum 002F  
                       ?_Audio_GetValue 0070                                 initloop 111A  
                      i1IR_GetIndex@idx 0070                       IR_IsValidTime@len 0030  
                     IR_IsValidTime@min 0031                 Audio_StopSound@checksum 002E  
                     ??_Audio_PlaySound 0071             __size_ofi1_Led_UpdateBright 0011  
                        _IR_ExitTimeout 11A7                    __size_of_RTC_GetTime 0001  
             Audio_SetPlayMode@checksum 002F                        _Led_FirstPowerUp 0F17  
                     ??_Audio_SetVolume 002E               __end_of_DATAEE_ReadBuffer 0D48  
          __end_of_TMR2_EnableInterrupt 16BE                  _IR_ResetIfTMR1Overflow 0ACB  
                ??i1_PWM2_LoadDutyValue 0072         __size_ofi1_TMR2_EnableInterrupt 0003  
           __size_of_PWM4_LoadDutyValue 000C                            __pstringtext 1800  
               i1_TMR2_DisableInterrupt 0785                               _IR_Decode 0595  
                 i1___wmul@multiplicand 0072                               Led_Ramp@i 007A  
           __size_of_DATAEE_WriteBuffer 0019                _TMR0_SetInterruptHandler 0B33  
                   i1Util_DecValue@pSrc 0070                            ??_Led_Notice 0070  
                DATAEE_WriteBuffer@addr 0031                              _rtc_status 004F  
           __end_of_Led_CheckAutoStatus 0D2D                       ??_Audio_StopSound 002E  
                 __size_of_EUSART_Write 0017                   __end_of_RTC_HourReady 0D5B  
         __size_of_Interrupt_Initialize 001B                        __CFG_FEXTOSC$OFF 0000  
                       ?_IR_IsValidTime 0030                __end_of_DATAEE_WriteByte 0FE4  
                         ?_RTC_OnSecond 0070                          _Led_TurnOnRamp 0A8E  
                        ?i1_IR_GetIndex 0070                           IR_Decode@nBit 004D  
                         IR_Decode@hVal 007A                  __end_of_IR_ExitTimeout 11AF  
                       ?_Led_Initialize 0070                       Led_DynamicCloud@i 002C  
                        _ADC_Conversion 091B                           IR_Decode@type 0078  
             ??_TMR2_Initialize_Default 002D                   __end_of_Util_DecValue 1531  
                   _Led_Initialize$1218 0037                          __end_of_VOLUME 180A  
            __end_of_PWM3_LoadDutyValue 1155                      Util_IncValue@delta 0031  
                    __end_of_Led_Notice 07CC                __size_of_RTC_MinuteReady 0004  
                     ??_Led_DynamicMoon 0078                       ??_Led_DynamicWave 0078  
              __size_of_PWM1_Initialize 0006                __size_of_RTC_SecondReady 0005  
                      Led_SetCustom@idx 0022        __size_of_TMR1_Initialize_Default 000F  
      __size_of_TMR4_Initialize_Default 000B                       Led_DynamicStorm@i 002C  
                            ?_IR_Decode 0070                          __end_of___bmul 1667  
                 __end_of_Util_IncValue 1557           __size_ofi1_PWM1_LoadDutyValue 0006  
                        __end_of___wmul 157E                        _Led_DynamicCloud 022E  
                          _EUSART_Write 162E                       __size_of_TMR0_ISR 000C  
                     __size_of_TMR2_ISR 000C                      _PWM2_LoadDutyValue 1137  
                     __size_of_TMR4_ISR 000C                       Audio_GetValue@cnt 0044  
                     ?_Led_TurnOnDirect 0070                       Audio_GetValue@max 0048  
                     Audio_GetValue@min 0046                          _TMR1_StopTimer 0B0A  
                ?_OSCILLATOR_Initialize 0070                    i1_PWM3_LoadDutyValue 1155  
                      _Led_DynamicStorm 01CE                  __size_of_IR_GetKeyType 0124  
                    ??_Led_TurnOnDirect 0070                       i1_Led_StartNotice 040B  
                           __end_ofPL10 0F84                             __end_ofPL20 0DFE  
                           __end_ofPL12 0791                             __end_ofPL30 16FD  
                           __end_ofPL22 0E06                             __end_ofPL14 16E2  
                           __end_ofPL40 1737                             __end_ofPL32 1705  
                           __end_ofPL24 04E2                             __end_ofPL16 04D8  
                           __end_ofPL50 04F4                             __end_ofPL42 174D  
                           __end_ofPL34 1721                             __end_ofPL26 0E13  
                           __end_ofPL18 16EF                             __end_ofPL60 176C  
                           __end_ofPL52 04FB                             __end_ofPL44 1753  
                           __end_ofPL36 0E1A                             __end_ofPL28 16F6  
                           __end_ofPL70 0511                             __end_ofPL62 1776  
                           __end_ofPL54 0502                             __end_ofPL46 175C  
                           __end_ofPL38 0F9A                             __end_ofPL80 051D  
                           __end_ofPL72 17A3                             __end_ofPL64 1787  
                           __end_ofPL56 0E28                             __end_ofPL48 0E23  
                           __end_ofPL90 0535                             __end_ofPL82 0529  
                           __end_ofPL74 17A7                             __end_ofPL66 1796  
                           __end_ofPL58 0508                             __end_ofPL92 0E34  
                           __end_ofPL84 17BB                             __end_ofPL76 17AB  
                           __end_ofPL68 0FA3                             __end_ofPL94 0541  
                           __end_ofPL86 17C2                             __end_ofPL78 17B5  
                           __end_ofPL96 17C9                             __end_ofPL88 0FAA  
                           __end_ofPL98 0E40                     start_initialization 082F  
                     __size_ofi1___wmul 0015                             __end_of_ISR 002E  
                    i1Util_IncValue@max 0072                __size_of_PWM2_Initialize 0009  
                   ?_PWM2_LoadDutyValue 002D                      ?i1_Led_StartNotice 0070  
                __size_of_TMR1_GATE_ISR 000C                  __end_of_Led_TurnOnRamp 0AAA  
                i1_TMR2_EnableInterrupt 0782                __size_of_Led_StartNotice 000D  
              ?_TMR0_Initialize_Default 0070                          ??_RTC_OnSecond 0070  
                __end_of_ADC_Conversion 093C                       __size_of_Led_Ramp 0036  
                   ??i1_Led_StartNotice 0070                         ?_IR_ExitTimeout 0070  
                   DATAEE_ReadByte@addr 002D           __size_of_IR_KeyAtionIfPressed 0005  
                      __CFG_LPBOREN$OFF 0000                         IR_KeyAction@idx 0153  
                  ??_PWM2_LoadDutyValue 002F                      IR_Decode@revKeyNum 0077  
             ??i1_TMR2_DisableInterrupt 0070                __size_of_PWM3_Initialize 000B  
                 _Led_SaveParaIfChanged 0B43                          _TMR4_StopTimer 07DE  
                              ??___bmul 002E             PWM2_LoadDutyValue@dutyValue 002D  
            __size_of_DATAEE_ReadBuffer 001B                                ??___wmul 0031  
                           _CCPTMRSbits 029F                    __end_of_IR_KeyAction 150B  
                __end_of_TMR1_StopTimer 0B0C                             __pdataBANK1 00A0  
                           __pdataBANK2 0154                  __size_of_Led_SetCustom 003D  
                 Led_DynamicStorm@F8382 0154                   ?i1_PWM3_LoadDutyValue 0070  
                 _TMR2_DisableInterrupt 16B5               __end_ofi1_Led_StartNotice 0417  
                        i1_EUSART_Write 0118                             __pbssBIGRAM 237B  
           __end_of_EUSART_Transmit_ISR 07F8             PWM5_LoadDutyValue@dutyValue 002D  
         __size_ofi1_PWM5_LoadDutyValue 000F                __size_of_Led_TurnOffRamp 0013  
                             ___latbits 0002                           __pcstackBANK0 0020  
                         __pcstackBANK2 0140                __size_of_PWM4_Initialize 000B  
                Audio_SelectSound@index 0071                     i1IR_GetIndex@keynum 0071  
                       ?_Led_TurnOnRamp 0070                         ??i1_IR_GetIndex 0070  
                     ADC_Conversion@chn 0030                    IR_IsValidTime@result 0032  
                  _TMR2_EnableInterrupt 16BB                    __size_of_Led_AutoRun 006A  
                       ?_ADC_Conversion 002D                           Led_InitPara@i 003F  
                         Led_InitPara@j 003E                         Led_Initialize@i 003C  
                         IR_KeyAction@i 014A           i1PWM1_LoadDutyValue@dutyValue 0070  
                              ?_Led_Run 0070            __end_ofi1_PWM4_LoadDutyValue 116D  
                         _IR_GetKeyType 065E                               __pnvBANK0 005E  
                             __pnvBANK1 00E4            _PWM3_LoadDutyValue$intlevel0 114C  
              __size_of_TMR0_StartTimer 0003               __size_of_IR_ScanLongPress 00EB  
                __end_of_TMR4_StopTimer 07E1             __size_of_PWM1_LoadDutyValue 000C  
              __size_of_PWM5_Initialize 0006               Audio_SelectSound@checksum 0072  
                         _TMR1_GATE_ISR 10E9                        ??_PIN_Initialize 002D  
      __end_of_TMR4_SetInterruptHandler 0F17      __size_of_EUSART_Initialize_Default 0014  
                             __ptext100 0595                               __ptext101 0782  
                             __ptext102 0785                               __ptext103 065E  
                             __ptext104 10DD                               __ptext105 116D  
                             __ptext106 07E1           i1PWM4_LoadDutyValue@dutyValue 0070  
                           ??_IR_Decode 0073              ?_EUSART_Initialize_Default 0070  
                       ?_TMR1_StopTimer 0070                  __end_ofi1_EUSART_Write 012C  
                     ??_RTC_MinuteReady 002D                       ??_PWM1_Initialize 002D  
                     ??_RTC_SecondReady 002D                     DATAEE_WriteBuffer@i 0036  
                              _BAUD1CON 019F                __size_of_TMR1_StartTimer 0003  
             __size_of_Led_UpdateBright 0019         __end_of_TMR0_Initialize_Default 0DBD  
              __end_of_Led_FirstPowerUp 0F73                         _Audio_PlaySound 00EB  
                      ??_Audio_GetValue 0033              __end_of_IR_UpdateSetStatus 0B18  
                 ?_TMR2_EnableInterrupt 0070                __size_of_DATAEE_ReadByte 000E  
                       _Audio_SetVolume 1601                           ??_IR_GetIndex 002D  
                         _Led_SetCustom 0417                           Led_Notice@cnt 0051  
                     ??_PWM2_Initialize 002D                          ?_IR_GetKeyType 0070  
                           _audio_value 004A                          ___wmul@product 0031  
                             clear_ram0 110D                                _PIE0bits 0090  
                     ??_Led_StartNotice 002D                                _PIE1bits 0091  
                              _PIE2bits 0092                __size_of_TMR2_StartTimer 0002  
                ?_Led_SaveParaIfChanged 0070                         ?_TMR4_StopTimer 0070  
               ?_IR_ResetIfTMR1Overflow 0070                 _TMR1_Initialize_Default 0DBD  
               _TMR4_Initialize_Default 0EF7              ??_TMR0_SetInterruptHandler 002F  
                              _PIR0bits 0010                          ?_TMR1_GATE_ISR 0070  
                              _PIR1bits 0011                                _PIR2bits 0012  
                              _TMR0_ISR 10DD                                _TMR2_ISR 10F5  
                              _TMR4_ISR 1101                         _Audio_StopSound 1557  
                      EUSART_Write@byte 002D                   DATAEE_WriteBuffer@buf 0033  
                ??i1_PWM3_LoadDutyValue 0072                   DATAEE_WriteBuffer@len 0035  
                ?_TMR2_DisableInterrupt 0070                    __end_of_RTC_OnSecond 1183  
           __size_of_PWM5_LoadDutyValue 0015                __size_ofi1_Util_DecValue 0026  
     __end_of_EUSART_Initialize_Default 1000                         ?i1_EUSART_Write 0070  
                     ??_PWM3_Initialize 002D              __size_ofi1_Led_StartNotice 000C  
                            _ADCON0bits 009D                       ___wmul@multiplier 002D  
                              i1___wmul 0454                       IR_ScanLongPress@i 0028  
                  Led_Initialize@result 0039                        ??_IR_IsValidTime 0031  
     __size_of_TMR2_SetInterruptHandler 0008               ?_TMR2_SetInterruptHandler 002D  
                     Util_IncValue@pSrc 002D                __size_ofi1_Util_IncValue 0026  
                 Led_CheckAutoStatus@ct 003B                        ??_Led_Initialize 0033  
                    IR_KeyAction@i_1452 014D                      IR_KeyAction@i_1444 014B  
                    IR_KeyAction@i_1453 014E                      IR_KeyAction@i_1445 014C  
                    IR_KeyAction@i_1446 014F                      IR_KeyAction@i_1447 0150  
                    IR_KeyAction@i_1448 0151                      IR_KeyAction@i_1449 0152  
                              _Led_Ramp 006A                          ?_Led_SetCustom 0076  
                       _Led_DynamicMoon 012C                         _Led_DynamicWave 017D  
                     ?_DATAEE_WriteByte 002D                       ??_Led_TurnOffRamp 002D  
                     i1_TMR4_StartTimer 04C6                           ??_RTC_GetTime 002D  
            __end_ofi1_Led_UpdateBright 04C6                __end_of_Led_DynamicCloud 029D  
                     ??_PWM4_Initialize 002D                ??_ADC_Initialize_Default 002D  
                    ??_DATAEE_WriteByte 0030                __end_of_Led_DynamicStorm 022E  
                    ?i1_TMR4_StartTimer 0070          __end_of_IR_ResetIfTMR1Overflow 0B0A  
                      __size_of_Led_Run 003A                __size_of_TMR4_StartTimer 0003  
                 __size_of_IR_KeyAction 035C                     __end_of_IR_GetIndex 1601  
          __end_of_Interrupt_Initialize 0B33              __end_of_PWM4_LoadDutyValue 1167  
                              _gLedPara 237B                     ??i1_TMR4_StartTimer 0070  
            __end_of_DATAEE_WriteBuffer 0FC3                 ??_OSCILLATOR_Initialize 002D  
                     ??_TMR0_StartTimer 002D                       _Audio_SetPlayMode 1617  
         __size_ofi1_PWM2_LoadDutyValue 0006                            Led_AutoRun@i 003B  
                     _Audio_SelectSound 00FD                       ??_PWM5_Initialize 002D  
               __end_of_Audio_PlaySound 00FD                      ?_Audio_SetPlayMode 0070  
              _TMR4_SetInterruptHandler 0F0F                      _PWM3_LoadDutyValue 1149  
                  i1_PWM4_LoadDutyValue 1167                 __end_of_Audio_SetVolume 1617  
                    ?_Audio_SelectSound 0070                 ?i1_TMR2_EnableInterrupt 0070  
                            _T0CON0bits 0017              Led_CheckAutoStatus@sunrise 0037  
                      _tmr0_isr_handler 00EA                  ??_TMR2_EnableInterrupt 002D  
                   ??_Audio_SetPlayMode 002E                        ??_IR_ExitTimeout 003D  
                              __ptext10 0D96                                __ptext11 0D8D  
                              __ptext20 0B43                                __ptext12 0D87  
                              __ptext21 0FAA                                __ptext13 0E9A  
                              __ptext30 0F0F                                __ptext22 0FC3  
                              __ptext14 0D7D                                __ptext31 0F07  
                              __ptext23 0B53                                __ptext15 0FEC  
                              __ptext40 11AF                                __ptext32 0B3B  
                              __ptext24 0F17                                __ptext16 0FE4  
                              __ptext41 1531                                __ptext33 0B33  
                              __ptext25 0D2D                                __ptext17 0D5F  
                              __ptext50 16B8                                __ptext42 150B  
                              __ptext34 0B0C                                __ptext26 0D48  
                              __ptext18 0D5B                                __ptext51 093C  
                              __ptext43 16BB                                __ptext35 11A7  
                              __ptext27 0CB3                                __ptext19 0D56  
                              __ptext60 0A7B                                __ptext52 0A7A  
                              __ptext44 16B5                                __ptext36 0ACB  
                              __ptext28 0C49                                __ptext61 1557  
                              __ptext53 0AAA                                __ptext45 1667  
                              __ptext37 0B0A                                __ptext29 0B18  
                              __ptext70 07A5                                __ptext62 1601  
                              __ptext54 115B                                __ptext46 165B  
                              __ptext38 0AC8                                __ptext71 07DE  
                              __ptext63 1617                                __ptext55 1149  
                              __ptext47 157E                                __ptext39 0AC3  
                              __ptext80 022E                                __ptext72 07D5  
                              __ptext64 162E                                __ptext56 1137  
                              __ptext48 1652                                __ptext81 04B5  
                              __ptext73 07CC                                __ptext65 08CA  
                              __ptext57 1125                                __ptext49 1645  
                              __ptext90 1198                                __ptext82 00FD  
                              __ptext74 10F5                                __ptext66 1569  
                              __ptext58 1183                     ?_PWM3_LoadDutyValue 002D  
                              __ptext91 029D                                __ptext83 00EB  
                              __ptext75 0030                                __ptext67 091B  
                              __ptext59 0A8E                                __ptext92 048F  
                              __ptext84 0118                                __ptext76 00A0  
                              __ptext93 0469                                __ptext85 006A  
                              __ptext77 017D                                __ptext69 1101  
                              __ptext94 040B                                __ptext86 1167  
                              __ptext78 01CE                                __ptext95 04C6  
                              __ptext87 1155                                __ptext79 012C  
                              __ptext96 0388                                __ptext88 1143  
                              __ptext97 0417                                __ptext89 1131  
                              __ptext98 0454                                __ptext99 10E9  
             __end_ofi1_TMR4_StartTimer 04C9            __end_ofi1_PWM1_LoadDutyValue 1137  
                   ??_Audio_SelectSound 0071                       ??_TMR1_StartTimer 002D  
                          _IR_KeyAction 11AF            __size_of_Led_CheckAutoStatus 007A  
                       ??_IR_GetKeyType 0070             DATAEE_WriteByte@GIEBitValue 0030  
             __size_of_Led_TurnOnDirect 0009                                _keyValue 004E  
                              _loadDuty 00BE                              _T1GPPSbits 0E13  
                         __size_of_main 0050               ??_TMR1_Initialize_Default 002D  
                              _ir_state 0054               ??_TMR4_Initialize_Default 002D  
                       ??_TMR1_GATE_ISR 007C                        _IR_ScanLongPress 029D  
                            _RA2PPSbits 0E92                 __end_of_Audio_StopSound 1569  
                     ??_DATAEE_ReadByte 002F                              _RC1PPSbits 0EA1  
                   __end_of_RTC_GetTime 0A7B        __size_of_TMR0_Initialize_Default 000B  
                  ??_PWM3_LoadDutyValue 002F                              _RC3PPSbits 0EA3  
             __end_of_Audio_SetPlayMode 162E                                _txRemain 005E  
                __size_of_RTC_HourReady 0005                                _rtc_time 005B  
                              int$flags 007E                              _RC5PPSbits 0EA5  
                            _RB7PPSbits 0E9F                           ?_Led_InitPara 0070  
             __end_of_Audio_SelectSound 0118                       ??_TMR2_StartTimer 002D  
                            _RC7PPSbits 0EA7    TMR1_Gate_SetInterruptHandler@handler 002D  
                  i1Led_StartNotice@cnt 0071                    Led_CheckAutoStatus@i 003F  
        __end_ofi1_TMR2_EnableInterrupt 0785                   ?i1_PWM4_LoadDutyValue 0070  
             Led_CheckAutoStatus@i_1248 003D               Led_CheckAutoStatus@i_1249 003E  
                     Led_UpdateBright@i 0031                        ??_Led_TurnOnRamp 002D  
                      _Led_UpdateBright 0AAA                 __end_of_Led_DynamicMoon 017D  
          __end_of_IR_KeyAtionIfPressed 0AC8                 __end_of_Led_DynamicWave 01CE  
                            _INTCONbits 000B                  __size_of_Util_DecValue 0026  
                           _NVMCON1bits 0895                       ??i1_Util_DecValue 0076  
                      ??_ADC_Conversion 002F                         ??_Led_SetCustom 0077  
                         ?_Led_RunMusic 0070                ?_TMR2_Initialize_Default 0070  
                    IR_IsValidTime@hour 0033                                intlevel1 0000  
                           _IR_GetIndex 157E                  __size_of_Util_IncValue 0026  
             Led_CheckAutoStatus@sunset 0039                       ??i1_Util_IncValue 0076  
       __size_of_ADC_Initialize_Default 0008                       __CFG_CLKOUTEN$OFF 0000  
          __end_ofi1_PWM5_LoadDutyValue 11A7                             _PPSLOCKbits 0E0F  
                       _RTC_MinuteReady 0D5B                      i1EUSART_Write@byte 0070  
                       _PWM1_Initialize 0D87                         _RTC_SecondReady 0D5F  
                      ??_TMR1_StopTimer 002D                   __size_of_RTC_OnSecond 0016  
           __size_of_PWM2_LoadDutyValue 000C                          ??_Led_InitPara 0036  
 __end_of_TMR1_Gate_SetInterruptHandler 0B43  __size_of_TMR1_Gate_SetInterruptHandler 0008  
         _TMR1_Gate_SetInterruptHandler 0B3B             PWM3_LoadDutyValue@dutyValue 002D  
           ??_EUSART_Initialize_Default 002D                       ??_TMR4_StartTimer 002D  
                      ?_Audio_PlaySound 0070                        ?_Audio_SetVolume 0070  
                       _PWM2_Initialize 0D8D                          ??_Led_RunMusic 007C  
                            Led_Run@cnt 0050                              _IR_ExitSet 1652  
                     ?_Led_FirstPowerUp 0070                           ??_Led_AutoRun 0037  
                      _tmr2_isr_handler 00E6                         _Led_StartNotice 1645  
                  _Interrupt_Initialize 0B18                           _RTC_HourReady 0D56  
            __size_ofi1_TMR4_StartTimer 0003                      ??_Led_FirstPowerUp 002D  
          _PWM1_LoadDutyValue$intlevel0 1128                    i1Util_DecValue@delta 0074  
          __size_of_EUSART_Transmit_ISR 0017                   __end_ofi1_IR_GetIndex 040B  
                      ??_TMR4_StopTimer 0070                            _RTC_OnSecond 116D  
                           _RTC_GetTime 0A7A                 ??_Led_SaveParaIfChanged 0037  
                    Audio_SetVolume@vol 002E                             _PWMTMRSbits 061F  
            __end_of_PWM1_LoadDutyValue 1131                ?i1_TMR2_DisableInterrupt 0070  
         i1PWM2_LoadDutyValue@dutyValue 0070                           _Util_DecValue 150B  
                      ?_Audio_StopSound 0070                         _PWM3_Initialize 0D96  
                    _IR_UpdateSetStatus 0B0C            _PWM4_LoadDutyValue$intlevel0 115E  
               ??_TMR2_DisableInterrupt 002D  
