

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Fri Jan 26 11:06:36 2018

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	text35,local,class=CODE,merge=1,delta=2
    20                           	psect	text54,local,class=CODE,merge=1,delta=2
    21                           	psect	text55,local,class=CODE,merge=1,delta=2
    22                           	psect	text56,local,class=CODE,merge=1,delta=2
    23                           	psect	text57,local,class=CODE,merge=1,delta=2
    24                           	psect	text58,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	psect	text70,local,class=CODE,merge=1,delta=2
    27                           	psect	text71,local,class=CODE,merge=1,delta=2
    28                           	psect	text75,local,class=CODE,merge=1,delta=2
    29                           	psect	text76,local,class=CODE,merge=1,delta=2
    30                           	psect	text99,local,class=CODE,merge=1,delta=2
    31                           	psect	text104,local,class=CODE,merge=1,delta=2
    32                           	psect	text105,local,class=CODE,merge=1,delta=2
    33                           	psect	text106,local,class=CODE,merge=1,delta=2
    34                           	psect	pa_nodes0,global,class=CODE,delta=2
    35                           	dabs	1,0x620,48
    36                           	dabs	1,0x5AB,69
    37                           	dabs	1,0x237B,0,_gLedPara
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 1.41
    41                           ; Generated 25/01/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F18345 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  001D                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  008C                     	;# 
   109  008D                     	;# 
   110  008E                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0094                     	;# 
   116  0097                     	;# 
   117  009B                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  0111                     	;# 
   127  0112                     	;# 
   128  0113                     	;# 
   129  0114                     	;# 
   130  0115                     	;# 
   131  0116                     	;# 
   132  0117                     	;# 
   133  0118                     	;# 
   134  0119                     	;# 
   135  018C                     	;# 
   136  018D                     	;# 
   137  018E                     	;# 
   138  0197                     	;# 
   139  0199                     	;# 
   140  0199                     	;# 
   141  0199                     	;# 
   142  019A                     	;# 
   143  019A                     	;# 
   144  019A                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019B                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019C                     	;# 
   151  019C                     	;# 
   152  019C                     	;# 
   153  019D                     	;# 
   154  019D                     	;# 
   155  019D                     	;# 
   156  019E                     	;# 
   157  019E                     	;# 
   158  019E                     	;# 
   159  019F                     	;# 
   160  019F                     	;# 
   161  019F                     	;# 
   162  019F                     	;# 
   163  019F                     	;# 
   164  020C                     	;# 
   165  020D                     	;# 
   166  020E                     	;# 
   167  0211                     	;# 
   168  0211                     	;# 
   169  0212                     	;# 
   170  0212                     	;# 
   171  0213                     	;# 
   172  0213                     	;# 
   173  0214                     	;# 
   174  0214                     	;# 
   175  0215                     	;# 
   176  0215                     	;# 
   177  0215                     	;# 
   178  0215                     	;# 
   179  0216                     	;# 
   180  0216                     	;# 
   181  0217                     	;# 
   182  0217                     	;# 
   183  0219                     	;# 
   184  021A                     	;# 
   185  021B                     	;# 
   186  021C                     	;# 
   187  021D                     	;# 
   188  021D                     	;# 
   189  021E                     	;# 
   190  021F                     	;# 
   191  028C                     	;# 
   192  028D                     	;# 
   193  028E                     	;# 
   194  0291                     	;# 
   195  0291                     	;# 
   196  0292                     	;# 
   197  0293                     	;# 
   198  0294                     	;# 
   199  0295                     	;# 
   200  0295                     	;# 
   201  0296                     	;# 
   202  0297                     	;# 
   203  0298                     	;# 
   204  029F                     	;# 
   205  030C                     	;# 
   206  030D                     	;# 
   207  030E                     	;# 
   208  0311                     	;# 
   209  0311                     	;# 
   210  0312                     	;# 
   211  0313                     	;# 
   212  0314                     	;# 
   213  0315                     	;# 
   214  0315                     	;# 
   215  0316                     	;# 
   216  0317                     	;# 
   217  0318                     	;# 
   218  038C                     	;# 
   219  038D                     	;# 
   220  038E                     	;# 
   221  0391                     	;# 
   222  0392                     	;# 
   223  0393                     	;# 
   224  0394                     	;# 
   225  0395                     	;# 
   226  0396                     	;# 
   227  0397                     	;# 
   228  0398                     	;# 
   229  0399                     	;# 
   230  039A                     	;# 
   231  039C                     	;# 
   232  039D                     	;# 
   233  039E                     	;# 
   234  039F                     	;# 
   235  0411                     	;# 
   236  0411                     	;# 
   237  0412                     	;# 
   238  0413                     	;# 
   239  0414                     	;# 
   240  0415                     	;# 
   241  0416                     	;# 
   242  0417                     	;# 
   243  0418                     	;# 
   244  0418                     	;# 
   245  0419                     	;# 
   246  041A                     	;# 
   247  041B                     	;# 
   248  041C                     	;# 
   249  041D                     	;# 
   250  041E                     	;# 
   251  041F                     	;# 
   252  0498                     	;# 
   253  0498                     	;# 
   254  0499                     	;# 
   255  049A                     	;# 
   256  049B                     	;# 
   257  049B                     	;# 
   258  049C                     	;# 
   259  049D                     	;# 
   260  049E                     	;# 
   261  049F                     	;# 
   262  0617                     	;# 
   263  0618                     	;# 
   264  0619                     	;# 
   265  0619                     	;# 
   266  061A                     	;# 
   267  061B                     	;# 
   268  061C                     	;# 
   269  061C                     	;# 
   270  061F                     	;# 
   271  0691                     	;# 
   272  0692                     	;# 
   273  0693                     	;# 
   274  0694                     	;# 
   275  0695                     	;# 
   276  0696                     	;# 
   277  0697                     	;# 
   278  0698                     	;# 
   279  0699                     	;# 
   280  0711                     	;# 
   281  0712                     	;# 
   282  0713                     	;# 
   283  0714                     	;# 
   284  0715                     	;# 
   285  0716                     	;# 
   286  0717                     	;# 
   287  0718                     	;# 
   288  0719                     	;# 
   289  0891                     	;# 
   290  0891                     	;# 
   291  0891                     	;# 
   292  0891                     	;# 
   293  0891                     	;# 
   294  0891                     	;# 
   295  0892                     	;# 
   296  0892                     	;# 
   297  0892                     	;# 
   298  0893                     	;# 
   299  0893                     	;# 
   300  0893                     	;# 
   301  0893                     	;# 
   302  0893                     	;# 
   303  0893                     	;# 
   304  0894                     	;# 
   305  0894                     	;# 
   306  0894                     	;# 
   307  0895                     	;# 
   308  0895                     	;# 
   309  0895                     	;# 
   310  0896                     	;# 
   311  0896                     	;# 
   312  0896                     	;# 
   313  089B                     	;# 
   314  0911                     	;# 
   315  0912                     	;# 
   316  0913                     	;# 
   317  0914                     	;# 
   318  0915                     	;# 
   319  0916                     	;# 
   320  0918                     	;# 
   321  0919                     	;# 
   322  091A                     	;# 
   323  091B                     	;# 
   324  091C                     	;# 
   325  091D                     	;# 
   326  091E                     	;# 
   327  091F                     	;# 
   328  0E0F                     	;# 
   329  0E10                     	;# 
   330  0E11                     	;# 
   331  0E12                     	;# 
   332  0E13                     	;# 
   333  0E14                     	;# 
   334  0E15                     	;# 
   335  0E16                     	;# 
   336  0E17                     	;# 
   337  0E18                     	;# 
   338  0E19                     	;# 
   339  0E1A                     	;# 
   340  0E1B                     	;# 
   341  0E1C                     	;# 
   342  0E1D                     	;# 
   343  0E1E                     	;# 
   344  0E1F                     	;# 
   345  0E20                     	;# 
   346  0E21                     	;# 
   347  0E22                     	;# 
   348  0E24                     	;# 
   349  0E25                     	;# 
   350  0E28                     	;# 
   351  0E29                     	;# 
   352  0E2A                     	;# 
   353  0E2B                     	;# 
   354  0E2C                     	;# 
   355  0E2D                     	;# 
   356  0E2E                     	;# 
   357  0E2F                     	;# 
   358  0E90                     	;# 
   359  0E91                     	;# 
   360  0E92                     	;# 
   361  0E94                     	;# 
   362  0E95                     	;# 
   363  0E9C                     	;# 
   364  0E9D                     	;# 
   365  0E9E                     	;# 
   366  0E9F                     	;# 
   367  0EA0                     	;# 
   368  0EA1                     	;# 
   369  0EA2                     	;# 
   370  0EA3                     	;# 
   371  0EA4                     	;# 
   372  0EA5                     	;# 
   373  0EA6                     	;# 
   374  0EA7                     	;# 
   375  0F0F                     	;# 
   376  0F10                     	;# 
   377  0F11                     	;# 
   378  0F12                     	;# 
   379  0F13                     	;# 
   380  0F14                     	;# 
   381  0F15                     	;# 
   382  0F16                     	;# 
   383  0F17                     	;# 
   384  0F18                     	;# 
   385  0F19                     	;# 
   386  0F1A                     	;# 
   387  0F1B                     	;# 
   388  0F1C                     	;# 
   389  0F1D                     	;# 
   390  0F1E                     	;# 
   391  0F1F                     	;# 
   392  0F20                     	;# 
   393  0F21                     	;# 
   394  0F22                     	;# 
   395  0F23                     	;# 
   396  0F24                     	;# 
   397  0F25                     	;# 
   398  0F26                     	;# 
   399  0F27                     	;# 
   400  0F28                     	;# 
   401  0F29                     	;# 
   402  0F2A                     	;# 
   403  0F2B                     	;# 
   404  0F2C                     	;# 
   405  0F2D                     	;# 
   406  0F2E                     	;# 
   407  0F2F                     	;# 
   408  0F30                     	;# 
   409  0F31                     	;# 
   410  0F32                     	;# 
   411  0F33                     	;# 
   412  0F34                     	;# 
   413  0F35                     	;# 
   414  0F36                     	;# 
   415  0F37                     	;# 
   416  0FE4                     	;# 
   417  0FE5                     	;# 
   418  0FE6                     	;# 
   419  0FE7                     	;# 
   420  0FE8                     	;# 
   421  0FE9                     	;# 
   422  0FEA                     	;# 
   423  0FEB                     	;# 
   424  0FED                     	;# 
   425  0FEE                     	;# 
   426  0FEF                     	;# 
   427  0000                     	;# 
   428  0001                     	;# 
   429  0002                     	;# 
   430  0003                     	;# 
   431  0004                     	;# 
   432  0005                     	;# 
   433  0006                     	;# 
   434  0007                     	;# 
   435  0008                     	;# 
   436  0009                     	;# 
   437  000A                     	;# 
   438  000B                     	;# 
   439  000C                     	;# 
   440  000D                     	;# 
   441  000E                     	;# 
   442  0010                     	;# 
   443  0011                     	;# 
   444  0012                     	;# 
   445  0013                     	;# 
   446  0014                     	;# 
   447  0015                     	;# 
   448  0015                     	;# 
   449  0016                     	;# 
   450  0016                     	;# 
   451  0017                     	;# 
   452  0018                     	;# 
   453  0019                     	;# 
   454  0019                     	;# 
   455  001A                     	;# 
   456  001B                     	;# 
   457  001C                     	;# 
   458  001D                     	;# 
   459  001E                     	;# 
   460  001F                     	;# 
   461  008C                     	;# 
   462  008D                     	;# 
   463  008E                     	;# 
   464  0090                     	;# 
   465  0091                     	;# 
   466  0092                     	;# 
   467  0093                     	;# 
   468  0094                     	;# 
   469  0097                     	;# 
   470  009B                     	;# 
   471  009B                     	;# 
   472  009C                     	;# 
   473  009D                     	;# 
   474  009E                     	;# 
   475  009F                     	;# 
   476  010C                     	;# 
   477  010D                     	;# 
   478  010E                     	;# 
   479  0111                     	;# 
   480  0112                     	;# 
   481  0113                     	;# 
   482  0114                     	;# 
   483  0115                     	;# 
   484  0116                     	;# 
   485  0117                     	;# 
   486  0118                     	;# 
   487  0119                     	;# 
   488  018C                     	;# 
   489  018D                     	;# 
   490  018E                     	;# 
   491  0197                     	;# 
   492  0199                     	;# 
   493  0199                     	;# 
   494  0199                     	;# 
   495  019A                     	;# 
   496  019A                     	;# 
   497  019A                     	;# 
   498  019B                     	;# 
   499  019B                     	;# 
   500  019B                     	;# 
   501  019B                     	;# 
   502  019B                     	;# 
   503  019C                     	;# 
   504  019C                     	;# 
   505  019C                     	;# 
   506  019D                     	;# 
   507  019D                     	;# 
   508  019D                     	;# 
   509  019E                     	;# 
   510  019E                     	;# 
   511  019E                     	;# 
   512  019F                     	;# 
   513  019F                     	;# 
   514  019F                     	;# 
   515  019F                     	;# 
   516  019F                     	;# 
   517  020C                     	;# 
   518  020D                     	;# 
   519  020E                     	;# 
   520  0211                     	;# 
   521  0211                     	;# 
   522  0212                     	;# 
   523  0212                     	;# 
   524  0213                     	;# 
   525  0213                     	;# 
   526  0214                     	;# 
   527  0214                     	;# 
   528  0215                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0216                     	;# 
   533  0216                     	;# 
   534  0217                     	;# 
   535  0217                     	;# 
   536  0219                     	;# 
   537  021A                     	;# 
   538  021B                     	;# 
   539  021C                     	;# 
   540  021D                     	;# 
   541  021D                     	;# 
   542  021E                     	;# 
   543  021F                     	;# 
   544  028C                     	;# 
   545  028D                     	;# 
   546  028E                     	;# 
   547  0291                     	;# 
   548  0291                     	;# 
   549  0292                     	;# 
   550  0293                     	;# 
   551  0294                     	;# 
   552  0295                     	;# 
   553  0295                     	;# 
   554  0296                     	;# 
   555  0297                     	;# 
   556  0298                     	;# 
   557  029F                     	;# 
   558  030C                     	;# 
   559  030D                     	;# 
   560  030E                     	;# 
   561  0311                     	;# 
   562  0311                     	;# 
   563  0312                     	;# 
   564  0313                     	;# 
   565  0314                     	;# 
   566  0315                     	;# 
   567  0315                     	;# 
   568  0316                     	;# 
   569  0317                     	;# 
   570  0318                     	;# 
   571  038C                     	;# 
   572  038D                     	;# 
   573  038E                     	;# 
   574  0391                     	;# 
   575  0392                     	;# 
   576  0393                     	;# 
   577  0394                     	;# 
   578  0395                     	;# 
   579  0396                     	;# 
   580  0397                     	;# 
   581  0398                     	;# 
   582  0399                     	;# 
   583  039A                     	;# 
   584  039C                     	;# 
   585  039D                     	;# 
   586  039E                     	;# 
   587  039F                     	;# 
   588  0411                     	;# 
   589  0411                     	;# 
   590  0412                     	;# 
   591  0413                     	;# 
   592  0414                     	;# 
   593  0415                     	;# 
   594  0416                     	;# 
   595  0417                     	;# 
   596  0418                     	;# 
   597  0418                     	;# 
   598  0419                     	;# 
   599  041A                     	;# 
   600  041B                     	;# 
   601  041C                     	;# 
   602  041D                     	;# 
   603  041E                     	;# 
   604  041F                     	;# 
   605  0498                     	;# 
   606  0498                     	;# 
   607  0499                     	;# 
   608  049A                     	;# 
   609  049B                     	;# 
   610  049B                     	;# 
   611  049C                     	;# 
   612  049D                     	;# 
   613  049E                     	;# 
   614  049F                     	;# 
   615  0617                     	;# 
   616  0618                     	;# 
   617  0619                     	;# 
   618  0619                     	;# 
   619  061A                     	;# 
   620  061B                     	;# 
   621  061C                     	;# 
   622  061C                     	;# 
   623  061F                     	;# 
   624  0691                     	;# 
   625  0692                     	;# 
   626  0693                     	;# 
   627  0694                     	;# 
   628  0695                     	;# 
   629  0696                     	;# 
   630  0697                     	;# 
   631  0698                     	;# 
   632  0699                     	;# 
   633  0711                     	;# 
   634  0712                     	;# 
   635  0713                     	;# 
   636  0714                     	;# 
   637  0715                     	;# 
   638  0716                     	;# 
   639  0717                     	;# 
   640  0718                     	;# 
   641  0719                     	;# 
   642  0891                     	;# 
   643  0891                     	;# 
   644  0891                     	;# 
   645  0891                     	;# 
   646  0891                     	;# 
   647  0891                     	;# 
   648  0892                     	;# 
   649  0892                     	;# 
   650  0892                     	;# 
   651  0893                     	;# 
   652  0893                     	;# 
   653  0893                     	;# 
   654  0893                     	;# 
   655  0893                     	;# 
   656  0893                     	;# 
   657  0894                     	;# 
   658  0894                     	;# 
   659  0894                     	;# 
   660  0895                     	;# 
   661  0895                     	;# 
   662  0895                     	;# 
   663  0896                     	;# 
   664  0896                     	;# 
   665  0896                     	;# 
   666  089B                     	;# 
   667  0911                     	;# 
   668  0912                     	;# 
   669  0913                     	;# 
   670  0914                     	;# 
   671  0915                     	;# 
   672  0916                     	;# 
   673  0918                     	;# 
   674  0919                     	;# 
   675  091A                     	;# 
   676  091B                     	;# 
   677  091C                     	;# 
   678  091D                     	;# 
   679  091E                     	;# 
   680  091F                     	;# 
   681  0E0F                     	;# 
   682  0E10                     	;# 
   683  0E11                     	;# 
   684  0E12                     	;# 
   685  0E13                     	;# 
   686  0E14                     	;# 
   687  0E15                     	;# 
   688  0E16                     	;# 
   689  0E17                     	;# 
   690  0E18                     	;# 
   691  0E19                     	;# 
   692  0E1A                     	;# 
   693  0E1B                     	;# 
   694  0E1C                     	;# 
   695  0E1D                     	;# 
   696  0E1E                     	;# 
   697  0E1F                     	;# 
   698  0E20                     	;# 
   699  0E21                     	;# 
   700  0E22                     	;# 
   701  0E24                     	;# 
   702  0E25                     	;# 
   703  0E28                     	;# 
   704  0E29                     	;# 
   705  0E2A                     	;# 
   706  0E2B                     	;# 
   707  0E2C                     	;# 
   708  0E2D                     	;# 
   709  0E2E                     	;# 
   710  0E2F                     	;# 
   711  0E90                     	;# 
   712  0E91                     	;# 
   713  0E92                     	;# 
   714  0E94                     	;# 
   715  0E95                     	;# 
   716  0E9C                     	;# 
   717  0E9D                     	;# 
   718  0E9E                     	;# 
   719  0E9F                     	;# 
   720  0EA0                     	;# 
   721  0EA1                     	;# 
   722  0EA2                     	;# 
   723  0EA3                     	;# 
   724  0EA4                     	;# 
   725  0EA5                     	;# 
   726  0EA6                     	;# 
   727  0EA7                     	;# 
   728  0F0F                     	;# 
   729  0F10                     	;# 
   730  0F11                     	;# 
   731  0F12                     	;# 
   732  0F13                     	;# 
   733  0F14                     	;# 
   734  0F15                     	;# 
   735  0F16                     	;# 
   736  0F17                     	;# 
   737  0F18                     	;# 
   738  0F19                     	;# 
   739  0F1A                     	;# 
   740  0F1B                     	;# 
   741  0F1C                     	;# 
   742  0F1D                     	;# 
   743  0F1E                     	;# 
   744  0F1F                     	;# 
   745  0F20                     	;# 
   746  0F21                     	;# 
   747  0F22                     	;# 
   748  0F23                     	;# 
   749  0F24                     	;# 
   750  0F25                     	;# 
   751  0F26                     	;# 
   752  0F27                     	;# 
   753  0F28                     	;# 
   754  0F29                     	;# 
   755  0F2A                     	;# 
   756  0F2B                     	;# 
   757  0F2C                     	;# 
   758  0F2D                     	;# 
   759  0F2E                     	;# 
   760  0F2F                     	;# 
   761  0F30                     	;# 
   762  0F31                     	;# 
   763  0F32                     	;# 
   764  0F33                     	;# 
   765  0F34                     	;# 
   766  0F35                     	;# 
   767  0F36                     	;# 
   768  0F37                     	;# 
   769  0FE4                     	;# 
   770  0FE5                     	;# 
   771  0FE6                     	;# 
   772  0FE7                     	;# 
   773  0FE8                     	;# 
   774  0FE9                     	;# 
   775  0FEA                     	;# 
   776  0FEB                     	;# 
   777  0FED                     	;# 
   778  0FEE                     	;# 
   779  0FEF                     	;# 
   780  0000                     	;# 
   781  0001                     	;# 
   782  0002                     	;# 
   783  0003                     	;# 
   784  0004                     	;# 
   785  0005                     	;# 
   786  0006                     	;# 
   787  0007                     	;# 
   788  0008                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  0010                     	;# 
   796  0011                     	;# 
   797  0012                     	;# 
   798  0013                     	;# 
   799  0014                     	;# 
   800  0015                     	;# 
   801  0015                     	;# 
   802  0016                     	;# 
   803  0016                     	;# 
   804  0017                     	;# 
   805  0018                     	;# 
   806  0019                     	;# 
   807  0019                     	;# 
   808  001A                     	;# 
   809  001B                     	;# 
   810  001C                     	;# 
   811  001D                     	;# 
   812  001E                     	;# 
   813  001F                     	;# 
   814  008C                     	;# 
   815  008D                     	;# 
   816  008E                     	;# 
   817  0090                     	;# 
   818  0091                     	;# 
   819  0092                     	;# 
   820  0093                     	;# 
   821  0094                     	;# 
   822  0097                     	;# 
   823  009B                     	;# 
   824  009B                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009E                     	;# 
   828  009F                     	;# 
   829  010C                     	;# 
   830  010D                     	;# 
   831  010E                     	;# 
   832  0111                     	;# 
   833  0112                     	;# 
   834  0113                     	;# 
   835  0114                     	;# 
   836  0115                     	;# 
   837  0116                     	;# 
   838  0117                     	;# 
   839  0118                     	;# 
   840  0119                     	;# 
   841  018C                     	;# 
   842  018D                     	;# 
   843  018E                     	;# 
   844  0197                     	;# 
   845  0199                     	;# 
   846  0199                     	;# 
   847  0199                     	;# 
   848  019A                     	;# 
   849  019A                     	;# 
   850  019A                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019C                     	;# 
   857  019C                     	;# 
   858  019C                     	;# 
   859  019D                     	;# 
   860  019D                     	;# 
   861  019D                     	;# 
   862  019E                     	;# 
   863  019E                     	;# 
   864  019E                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  019F                     	;# 
   869  019F                     	;# 
   870  020C                     	;# 
   871  020D                     	;# 
   872  020E                     	;# 
   873  0211                     	;# 
   874  0211                     	;# 
   875  0212                     	;# 
   876  0212                     	;# 
   877  0213                     	;# 
   878  0213                     	;# 
   879  0214                     	;# 
   880  0214                     	;# 
   881  0215                     	;# 
   882  0215                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0216                     	;# 
   886  0216                     	;# 
   887  0217                     	;# 
   888  0217                     	;# 
   889  0219                     	;# 
   890  021A                     	;# 
   891  021B                     	;# 
   892  021C                     	;# 
   893  021D                     	;# 
   894  021D                     	;# 
   895  021E                     	;# 
   896  021F                     	;# 
   897  028C                     	;# 
   898  028D                     	;# 
   899  028E                     	;# 
   900  0291                     	;# 
   901  0291                     	;# 
   902  0292                     	;# 
   903  0293                     	;# 
   904  0294                     	;# 
   905  0295                     	;# 
   906  0295                     	;# 
   907  0296                     	;# 
   908  0297                     	;# 
   909  0298                     	;# 
   910  029F                     	;# 
   911  030C                     	;# 
   912  030D                     	;# 
   913  030E                     	;# 
   914  0311                     	;# 
   915  0311                     	;# 
   916  0312                     	;# 
   917  0313                     	;# 
   918  0314                     	;# 
   919  0315                     	;# 
   920  0315                     	;# 
   921  0316                     	;# 
   922  0317                     	;# 
   923  0318                     	;# 
   924  038C                     	;# 
   925  038D                     	;# 
   926  038E                     	;# 
   927  0391                     	;# 
   928  0392                     	;# 
   929  0393                     	;# 
   930  0394                     	;# 
   931  0395                     	;# 
   932  0396                     	;# 
   933  0397                     	;# 
   934  0398                     	;# 
   935  0399                     	;# 
   936  039A                     	;# 
   937  039C                     	;# 
   938  039D                     	;# 
   939  039E                     	;# 
   940  039F                     	;# 
   941  0411                     	;# 
   942  0411                     	;# 
   943  0412                     	;# 
   944  0413                     	;# 
   945  0414                     	;# 
   946  0415                     	;# 
   947  0416                     	;# 
   948  0417                     	;# 
   949  0418                     	;# 
   950  0418                     	;# 
   951  0419                     	;# 
   952  041A                     	;# 
   953  041B                     	;# 
   954  041C                     	;# 
   955  041D                     	;# 
   956  041E                     	;# 
   957  041F                     	;# 
   958  0498                     	;# 
   959  0498                     	;# 
   960  0499                     	;# 
   961  049A                     	;# 
   962  049B                     	;# 
   963  049B                     	;# 
   964  049C                     	;# 
   965  049D                     	;# 
   966  049E                     	;# 
   967  049F                     	;# 
   968  0617                     	;# 
   969  0618                     	;# 
   970  0619                     	;# 
   971  0619                     	;# 
   972  061A                     	;# 
   973  061B                     	;# 
   974  061C                     	;# 
   975  061C                     	;# 
   976  061F                     	;# 
   977  0691                     	;# 
   978  0692                     	;# 
   979  0693                     	;# 
   980  0694                     	;# 
   981  0695                     	;# 
   982  0696                     	;# 
   983  0697                     	;# 
   984  0698                     	;# 
   985  0699                     	;# 
   986  0711                     	;# 
   987  0712                     	;# 
   988  0713                     	;# 
   989  0714                     	;# 
   990  0715                     	;# 
   991  0716                     	;# 
   992  0717                     	;# 
   993  0718                     	;# 
   994  0719                     	;# 
   995  0891                     	;# 
   996  0891                     	;# 
   997  0891                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0892                     	;# 
  1002  0892                     	;# 
  1003  0892                     	;# 
  1004  0893                     	;# 
  1005  0893                     	;# 
  1006  0893                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0894                     	;# 
  1011  0894                     	;# 
  1012  0894                     	;# 
  1013  0895                     	;# 
  1014  0895                     	;# 
  1015  0895                     	;# 
  1016  0896                     	;# 
  1017  0896                     	;# 
  1018  0896                     	;# 
  1019  089B                     	;# 
  1020  0911                     	;# 
  1021  0912                     	;# 
  1022  0913                     	;# 
  1023  0914                     	;# 
  1024  0915                     	;# 
  1025  0916                     	;# 
  1026  0918                     	;# 
  1027  0919                     	;# 
  1028  091A                     	;# 
  1029  091B                     	;# 
  1030  091C                     	;# 
  1031  091D                     	;# 
  1032  091E                     	;# 
  1033  091F                     	;# 
  1034  0E0F                     	;# 
  1035  0E10                     	;# 
  1036  0E11                     	;# 
  1037  0E12                     	;# 
  1038  0E13                     	;# 
  1039  0E14                     	;# 
  1040  0E15                     	;# 
  1041  0E16                     	;# 
  1042  0E17                     	;# 
  1043  0E18                     	;# 
  1044  0E19                     	;# 
  1045  0E1A                     	;# 
  1046  0E1B                     	;# 
  1047  0E1C                     	;# 
  1048  0E1D                     	;# 
  1049  0E1E                     	;# 
  1050  0E1F                     	;# 
  1051  0E20                     	;# 
  1052  0E21                     	;# 
  1053  0E22                     	;# 
  1054  0E24                     	;# 
  1055  0E25                     	;# 
  1056  0E28                     	;# 
  1057  0E29                     	;# 
  1058  0E2A                     	;# 
  1059  0E2B                     	;# 
  1060  0E2C                     	;# 
  1061  0E2D                     	;# 
  1062  0E2E                     	;# 
  1063  0E2F                     	;# 
  1064  0E90                     	;# 
  1065  0E91                     	;# 
  1066  0E92                     	;# 
  1067  0E94                     	;# 
  1068  0E95                     	;# 
  1069  0E9C                     	;# 
  1070  0E9D                     	;# 
  1071  0E9E                     	;# 
  1072  0E9F                     	;# 
  1073  0EA0                     	;# 
  1074  0EA1                     	;# 
  1075  0EA2                     	;# 
  1076  0EA3                     	;# 
  1077  0EA4                     	;# 
  1078  0EA5                     	;# 
  1079  0EA6                     	;# 
  1080  0EA7                     	;# 
  1081  0F0F                     	;# 
  1082  0F10                     	;# 
  1083  0F11                     	;# 
  1084  0F12                     	;# 
  1085  0F13                     	;# 
  1086  0F14                     	;# 
  1087  0F15                     	;# 
  1088  0F16                     	;# 
  1089  0F17                     	;# 
  1090  0F18                     	;# 
  1091  0F19                     	;# 
  1092  0F1A                     	;# 
  1093  0F1B                     	;# 
  1094  0F1C                     	;# 
  1095  0F1D                     	;# 
  1096  0F1E                     	;# 
  1097  0F1F                     	;# 
  1098  0F20                     	;# 
  1099  0F21                     	;# 
  1100  0F22                     	;# 
  1101  0F23                     	;# 
  1102  0F24                     	;# 
  1103  0F25                     	;# 
  1104  0F26                     	;# 
  1105  0F27                     	;# 
  1106  0F28                     	;# 
  1107  0F29                     	;# 
  1108  0F2A                     	;# 
  1109  0F2B                     	;# 
  1110  0F2C                     	;# 
  1111  0F2D                     	;# 
  1112  0F2E                     	;# 
  1113  0F2F                     	;# 
  1114  0F30                     	;# 
  1115  0F31                     	;# 
  1116  0F32                     	;# 
  1117  0F33                     	;# 
  1118  0F34                     	;# 
  1119  0F35                     	;# 
  1120  0F36                     	;# 
  1121  0F37                     	;# 
  1122  0FE4                     	;# 
  1123  0FE5                     	;# 
  1124  0FE6                     	;# 
  1125  0FE7                     	;# 
  1126  0FE8                     	;# 
  1127  0FE9                     	;# 
  1128  0FEA                     	;# 
  1129  0FEB                     	;# 
  1130  0FED                     	;# 
  1131  0FEE                     	;# 
  1132  0FEF                     	;# 
  1133  0000                     	;# 
  1134  0001                     	;# 
  1135  0002                     	;# 
  1136  0003                     	;# 
  1137  0004                     	;# 
  1138  0005                     	;# 
  1139  0006                     	;# 
  1140  0007                     	;# 
  1141  0008                     	;# 
  1142  0009                     	;# 
  1143  000A                     	;# 
  1144  000B                     	;# 
  1145  000C                     	;# 
  1146  000D                     	;# 
  1147  000E                     	;# 
  1148  0010                     	;# 
  1149  0011                     	;# 
  1150  0012                     	;# 
  1151  0013                     	;# 
  1152  0014                     	;# 
  1153  0015                     	;# 
  1154  0015                     	;# 
  1155  0016                     	;# 
  1156  0016                     	;# 
  1157  0017                     	;# 
  1158  0018                     	;# 
  1159  0019                     	;# 
  1160  0019                     	;# 
  1161  001A                     	;# 
  1162  001B                     	;# 
  1163  001C                     	;# 
  1164  001D                     	;# 
  1165  001E                     	;# 
  1166  001F                     	;# 
  1167  008C                     	;# 
  1168  008D                     	;# 
  1169  008E                     	;# 
  1170  0090                     	;# 
  1171  0091                     	;# 
  1172  0092                     	;# 
  1173  0093                     	;# 
  1174  0094                     	;# 
  1175  0097                     	;# 
  1176  009B                     	;# 
  1177  009B                     	;# 
  1178  009C                     	;# 
  1179  009D                     	;# 
  1180  009E                     	;# 
  1181  009F                     	;# 
  1182  010C                     	;# 
  1183  010D                     	;# 
  1184  010E                     	;# 
  1185  0111                     	;# 
  1186  0112                     	;# 
  1187  0113                     	;# 
  1188  0114                     	;# 
  1189  0115                     	;# 
  1190  0116                     	;# 
  1191  0117                     	;# 
  1192  0118                     	;# 
  1193  0119                     	;# 
  1194  018C                     	;# 
  1195  018D                     	;# 
  1196  018E                     	;# 
  1197  0197                     	;# 
  1198  0199                     	;# 
  1199  0199                     	;# 
  1200  0199                     	;# 
  1201  019A                     	;# 
  1202  019A                     	;# 
  1203  019A                     	;# 
  1204  019B                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019C                     	;# 
  1210  019C                     	;# 
  1211  019C                     	;# 
  1212  019D                     	;# 
  1213  019D                     	;# 
  1214  019D                     	;# 
  1215  019E                     	;# 
  1216  019E                     	;# 
  1217  019E                     	;# 
  1218  019F                     	;# 
  1219  019F                     	;# 
  1220  019F                     	;# 
  1221  019F                     	;# 
  1222  019F                     	;# 
  1223  020C                     	;# 
  1224  020D                     	;# 
  1225  020E                     	;# 
  1226  0211                     	;# 
  1227  0211                     	;# 
  1228  0212                     	;# 
  1229  0212                     	;# 
  1230  0213                     	;# 
  1231  0213                     	;# 
  1232  0214                     	;# 
  1233  0214                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0216                     	;# 
  1239  0216                     	;# 
  1240  0217                     	;# 
  1241  0217                     	;# 
  1242  0219                     	;# 
  1243  021A                     	;# 
  1244  021B                     	;# 
  1245  021C                     	;# 
  1246  021D                     	;# 
  1247  021D                     	;# 
  1248  021E                     	;# 
  1249  021F                     	;# 
  1250  028C                     	;# 
  1251  028D                     	;# 
  1252  028E                     	;# 
  1253  0291                     	;# 
  1254  0291                     	;# 
  1255  0292                     	;# 
  1256  0293                     	;# 
  1257  0294                     	;# 
  1258  0295                     	;# 
  1259  0295                     	;# 
  1260  0296                     	;# 
  1261  0297                     	;# 
  1262  0298                     	;# 
  1263  029F                     	;# 
  1264  030C                     	;# 
  1265  030D                     	;# 
  1266  030E                     	;# 
  1267  0311                     	;# 
  1268  0311                     	;# 
  1269  0312                     	;# 
  1270  0313                     	;# 
  1271  0314                     	;# 
  1272  0315                     	;# 
  1273  0315                     	;# 
  1274  0316                     	;# 
  1275  0317                     	;# 
  1276  0318                     	;# 
  1277  038C                     	;# 
  1278  038D                     	;# 
  1279  038E                     	;# 
  1280  0391                     	;# 
  1281  0392                     	;# 
  1282  0393                     	;# 
  1283  0394                     	;# 
  1284  0395                     	;# 
  1285  0396                     	;# 
  1286  0397                     	;# 
  1287  0398                     	;# 
  1288  0399                     	;# 
  1289  039A                     	;# 
  1290  039C                     	;# 
  1291  039D                     	;# 
  1292  039E                     	;# 
  1293  039F                     	;# 
  1294  0411                     	;# 
  1295  0411                     	;# 
  1296  0412                     	;# 
  1297  0413                     	;# 
  1298  0414                     	;# 
  1299  0415                     	;# 
  1300  0416                     	;# 
  1301  0417                     	;# 
  1302  0418                     	;# 
  1303  0418                     	;# 
  1304  0419                     	;# 
  1305  041A                     	;# 
  1306  041B                     	;# 
  1307  041C                     	;# 
  1308  041D                     	;# 
  1309  041E                     	;# 
  1310  041F                     	;# 
  1311  0498                     	;# 
  1312  0498                     	;# 
  1313  0499                     	;# 
  1314  049A                     	;# 
  1315  049B                     	;# 
  1316  049B                     	;# 
  1317  049C                     	;# 
  1318  049D                     	;# 
  1319  049E                     	;# 
  1320  049F                     	;# 
  1321  0617                     	;# 
  1322  0618                     	;# 
  1323  0619                     	;# 
  1324  0619                     	;# 
  1325  061A                     	;# 
  1326  061B                     	;# 
  1327  061C                     	;# 
  1328  061C                     	;# 
  1329  061F                     	;# 
  1330  0691                     	;# 
  1331  0692                     	;# 
  1332  0693                     	;# 
  1333  0694                     	;# 
  1334  0695                     	;# 
  1335  0696                     	;# 
  1336  0697                     	;# 
  1337  0698                     	;# 
  1338  0699                     	;# 
  1339  0711                     	;# 
  1340  0712                     	;# 
  1341  0713                     	;# 
  1342  0714                     	;# 
  1343  0715                     	;# 
  1344  0716                     	;# 
  1345  0717                     	;# 
  1346  0718                     	;# 
  1347  0719                     	;# 
  1348  0891                     	;# 
  1349  0891                     	;# 
  1350  0891                     	;# 
  1351  0891                     	;# 
  1352  0891                     	;# 
  1353  0891                     	;# 
  1354  0892                     	;# 
  1355  0892                     	;# 
  1356  0892                     	;# 
  1357  0893                     	;# 
  1358  0893                     	;# 
  1359  0893                     	;# 
  1360  0893                     	;# 
  1361  0893                     	;# 
  1362  0893                     	;# 
  1363  0894                     	;# 
  1364  0894                     	;# 
  1365  0894                     	;# 
  1366  0895                     	;# 
  1367  0895                     	;# 
  1368  0895                     	;# 
  1369  0896                     	;# 
  1370  0896                     	;# 
  1371  0896                     	;# 
  1372  089B                     	;# 
  1373  0911                     	;# 
  1374  0912                     	;# 
  1375  0913                     	;# 
  1376  0914                     	;# 
  1377  0915                     	;# 
  1378  0916                     	;# 
  1379  0918                     	;# 
  1380  0919                     	;# 
  1381  091A                     	;# 
  1382  091B                     	;# 
  1383  091C                     	;# 
  1384  091D                     	;# 
  1385  091E                     	;# 
  1386  091F                     	;# 
  1387  0E0F                     	;# 
  1388  0E10                     	;# 
  1389  0E11                     	;# 
  1390  0E12                     	;# 
  1391  0E13                     	;# 
  1392  0E14                     	;# 
  1393  0E15                     	;# 
  1394  0E16                     	;# 
  1395  0E17                     	;# 
  1396  0E18                     	;# 
  1397  0E19                     	;# 
  1398  0E1A                     	;# 
  1399  0E1B                     	;# 
  1400  0E1C                     	;# 
  1401  0E1D                     	;# 
  1402  0E1E                     	;# 
  1403  0E1F                     	;# 
  1404  0E20                     	;# 
  1405  0E21                     	;# 
  1406  0E22                     	;# 
  1407  0E24                     	;# 
  1408  0E25                     	;# 
  1409  0E28                     	;# 
  1410  0E29                     	;# 
  1411  0E2A                     	;# 
  1412  0E2B                     	;# 
  1413  0E2C                     	;# 
  1414  0E2D                     	;# 
  1415  0E2E                     	;# 
  1416  0E2F                     	;# 
  1417  0E90                     	;# 
  1418  0E91                     	;# 
  1419  0E92                     	;# 
  1420  0E94                     	;# 
  1421  0E95                     	;# 
  1422  0E9C                     	;# 
  1423  0E9D                     	;# 
  1424  0E9E                     	;# 
  1425  0E9F                     	;# 
  1426  0EA0                     	;# 
  1427  0EA1                     	;# 
  1428  0EA2                     	;# 
  1429  0EA3                     	;# 
  1430  0EA4                     	;# 
  1431  0EA5                     	;# 
  1432  0EA6                     	;# 
  1433  0EA7                     	;# 
  1434  0F0F                     	;# 
  1435  0F10                     	;# 
  1436  0F11                     	;# 
  1437  0F12                     	;# 
  1438  0F13                     	;# 
  1439  0F14                     	;# 
  1440  0F15                     	;# 
  1441  0F16                     	;# 
  1442  0F17                     	;# 
  1443  0F18                     	;# 
  1444  0F19                     	;# 
  1445  0F1A                     	;# 
  1446  0F1B                     	;# 
  1447  0F1C                     	;# 
  1448  0F1D                     	;# 
  1449  0F1E                     	;# 
  1450  0F1F                     	;# 
  1451  0F20                     	;# 
  1452  0F21                     	;# 
  1453  0F22                     	;# 
  1454  0F23                     	;# 
  1455  0F24                     	;# 
  1456  0F25                     	;# 
  1457  0F26                     	;# 
  1458  0F27                     	;# 
  1459  0F28                     	;# 
  1460  0F29                     	;# 
  1461  0F2A                     	;# 
  1462  0F2B                     	;# 
  1463  0F2C                     	;# 
  1464  0F2D                     	;# 
  1465  0F2E                     	;# 
  1466  0F2F                     	;# 
  1467  0F30                     	;# 
  1468  0F31                     	;# 
  1469  0F32                     	;# 
  1470  0F33                     	;# 
  1471  0F34                     	;# 
  1472  0F35                     	;# 
  1473  0F36                     	;# 
  1474  0F37                     	;# 
  1475  0FE4                     	;# 
  1476  0FE5                     	;# 
  1477  0FE6                     	;# 
  1478  0FE7                     	;# 
  1479  0FE8                     	;# 
  1480  0FE9                     	;# 
  1481  0FEA                     	;# 
  1482  0FEB                     	;# 
  1483  0FED                     	;# 
  1484  0FEE                     	;# 
  1485  0FEF                     	;# 
  1486  0000                     	;# 
  1487  0001                     	;# 
  1488  0002                     	;# 
  1489  0003                     	;# 
  1490  0004                     	;# 
  1491  0005                     	;# 
  1492  0006                     	;# 
  1493  0007                     	;# 
  1494  0008                     	;# 
  1495  0009                     	;# 
  1496  000A                     	;# 
  1497  000B                     	;# 
  1498  000C                     	;# 
  1499  000D                     	;# 
  1500  000E                     	;# 
  1501  0010                     	;# 
  1502  0011                     	;# 
  1503  0012                     	;# 
  1504  0013                     	;# 
  1505  0014                     	;# 
  1506  0015                     	;# 
  1507  0015                     	;# 
  1508  0016                     	;# 
  1509  0016                     	;# 
  1510  0017                     	;# 
  1511  0018                     	;# 
  1512  0019                     	;# 
  1513  0019                     	;# 
  1514  001A                     	;# 
  1515  001B                     	;# 
  1516  001C                     	;# 
  1517  001D                     	;# 
  1518  001E                     	;# 
  1519  001F                     	;# 
  1520  008C                     	;# 
  1521  008D                     	;# 
  1522  008E                     	;# 
  1523  0090                     	;# 
  1524  0091                     	;# 
  1525  0092                     	;# 
  1526  0093                     	;# 
  1527  0094                     	;# 
  1528  0097                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  009F                     	;# 
  1535  010C                     	;# 
  1536  010D                     	;# 
  1537  010E                     	;# 
  1538  0111                     	;# 
  1539  0112                     	;# 
  1540  0113                     	;# 
  1541  0114                     	;# 
  1542  0115                     	;# 
  1543  0116                     	;# 
  1544  0117                     	;# 
  1545  0118                     	;# 
  1546  0119                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0197                     	;# 
  1551  0199                     	;# 
  1552  0199                     	;# 
  1553  0199                     	;# 
  1554  019A                     	;# 
  1555  019A                     	;# 
  1556  019A                     	;# 
  1557  019B                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019D                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019E                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  019F                     	;# 
  1573  019F                     	;# 
  1574  019F                     	;# 
  1575  019F                     	;# 
  1576  020C                     	;# 
  1577  020D                     	;# 
  1578  020E                     	;# 
  1579  0211                     	;# 
  1580  0211                     	;# 
  1581  0212                     	;# 
  1582  0212                     	;# 
  1583  0213                     	;# 
  1584  0213                     	;# 
  1585  0214                     	;# 
  1586  0214                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0215                     	;# 
  1591  0216                     	;# 
  1592  0216                     	;# 
  1593  0217                     	;# 
  1594  0217                     	;# 
  1595  0219                     	;# 
  1596  021A                     	;# 
  1597  021B                     	;# 
  1598  021C                     	;# 
  1599  021D                     	;# 
  1600  021D                     	;# 
  1601  021E                     	;# 
  1602  021F                     	;# 
  1603  028C                     	;# 
  1604  028D                     	;# 
  1605  028E                     	;# 
  1606  0291                     	;# 
  1607  0291                     	;# 
  1608  0292                     	;# 
  1609  0293                     	;# 
  1610  0294                     	;# 
  1611  0295                     	;# 
  1612  0295                     	;# 
  1613  0296                     	;# 
  1614  0297                     	;# 
  1615  0298                     	;# 
  1616  029F                     	;# 
  1617  030C                     	;# 
  1618  030D                     	;# 
  1619  030E                     	;# 
  1620  0311                     	;# 
  1621  0311                     	;# 
  1622  0312                     	;# 
  1623  0313                     	;# 
  1624  0314                     	;# 
  1625  0315                     	;# 
  1626  0315                     	;# 
  1627  0316                     	;# 
  1628  0317                     	;# 
  1629  0318                     	;# 
  1630  038C                     	;# 
  1631  038D                     	;# 
  1632  038E                     	;# 
  1633  0391                     	;# 
  1634  0392                     	;# 
  1635  0393                     	;# 
  1636  0394                     	;# 
  1637  0395                     	;# 
  1638  0396                     	;# 
  1639  0397                     	;# 
  1640  0398                     	;# 
  1641  0399                     	;# 
  1642  039A                     	;# 
  1643  039C                     	;# 
  1644  039D                     	;# 
  1645  039E                     	;# 
  1646  039F                     	;# 
  1647  0411                     	;# 
  1648  0411                     	;# 
  1649  0412                     	;# 
  1650  0413                     	;# 
  1651  0414                     	;# 
  1652  0415                     	;# 
  1653  0416                     	;# 
  1654  0417                     	;# 
  1655  0418                     	;# 
  1656  0418                     	;# 
  1657  0419                     	;# 
  1658  041A                     	;# 
  1659  041B                     	;# 
  1660  041C                     	;# 
  1661  041D                     	;# 
  1662  041E                     	;# 
  1663  041F                     	;# 
  1664  0498                     	;# 
  1665  0498                     	;# 
  1666  0499                     	;# 
  1667  049A                     	;# 
  1668  049B                     	;# 
  1669  049B                     	;# 
  1670  049C                     	;# 
  1671  049D                     	;# 
  1672  049E                     	;# 
  1673  049F                     	;# 
  1674  0617                     	;# 
  1675  0618                     	;# 
  1676  0619                     	;# 
  1677  0619                     	;# 
  1678  061A                     	;# 
  1679  061B                     	;# 
  1680  061C                     	;# 
  1681  061C                     	;# 
  1682  061F                     	;# 
  1683  0691                     	;# 
  1684  0692                     	;# 
  1685  0693                     	;# 
  1686  0694                     	;# 
  1687  0695                     	;# 
  1688  0696                     	;# 
  1689  0697                     	;# 
  1690  0698                     	;# 
  1691  0699                     	;# 
  1692  0711                     	;# 
  1693  0712                     	;# 
  1694  0713                     	;# 
  1695  0714                     	;# 
  1696  0715                     	;# 
  1697  0716                     	;# 
  1698  0717                     	;# 
  1699  0718                     	;# 
  1700  0719                     	;# 
  1701  0891                     	;# 
  1702  0891                     	;# 
  1703  0891                     	;# 
  1704  0891                     	;# 
  1705  0891                     	;# 
  1706  0891                     	;# 
  1707  0892                     	;# 
  1708  0892                     	;# 
  1709  0892                     	;# 
  1710  0893                     	;# 
  1711  0893                     	;# 
  1712  0893                     	;# 
  1713  0893                     	;# 
  1714  0893                     	;# 
  1715  0893                     	;# 
  1716  0894                     	;# 
  1717  0894                     	;# 
  1718  0894                     	;# 
  1719  0895                     	;# 
  1720  0895                     	;# 
  1721  0895                     	;# 
  1722  0896                     	;# 
  1723  0896                     	;# 
  1724  0896                     	;# 
  1725  089B                     	;# 
  1726  0911                     	;# 
  1727  0912                     	;# 
  1728  0913                     	;# 
  1729  0914                     	;# 
  1730  0915                     	;# 
  1731  0916                     	;# 
  1732  0918                     	;# 
  1733  0919                     	;# 
  1734  091A                     	;# 
  1735  091B                     	;# 
  1736  091C                     	;# 
  1737  091D                     	;# 
  1738  091E                     	;# 
  1739  091F                     	;# 
  1740  0E0F                     	;# 
  1741  0E10                     	;# 
  1742  0E11                     	;# 
  1743  0E12                     	;# 
  1744  0E13                     	;# 
  1745  0E14                     	;# 
  1746  0E15                     	;# 
  1747  0E16                     	;# 
  1748  0E17                     	;# 
  1749  0E18                     	;# 
  1750  0E19                     	;# 
  1751  0E1A                     	;# 
  1752  0E1B                     	;# 
  1753  0E1C                     	;# 
  1754  0E1D                     	;# 
  1755  0E1E                     	;# 
  1756  0E1F                     	;# 
  1757  0E20                     	;# 
  1758  0E21                     	;# 
  1759  0E22                     	;# 
  1760  0E24                     	;# 
  1761  0E25                     	;# 
  1762  0E28                     	;# 
  1763  0E29                     	;# 
  1764  0E2A                     	;# 
  1765  0E2B                     	;# 
  1766  0E2C                     	;# 
  1767  0E2D                     	;# 
  1768  0E2E                     	;# 
  1769  0E2F                     	;# 
  1770  0E90                     	;# 
  1771  0E91                     	;# 
  1772  0E92                     	;# 
  1773  0E94                     	;# 
  1774  0E95                     	;# 
  1775  0E9C                     	;# 
  1776  0E9D                     	;# 
  1777  0E9E                     	;# 
  1778  0E9F                     	;# 
  1779  0EA0                     	;# 
  1780  0EA1                     	;# 
  1781  0EA2                     	;# 
  1782  0EA3                     	;# 
  1783  0EA4                     	;# 
  1784  0EA5                     	;# 
  1785  0EA6                     	;# 
  1786  0EA7                     	;# 
  1787  0F0F                     	;# 
  1788  0F10                     	;# 
  1789  0F11                     	;# 
  1790  0F12                     	;# 
  1791  0F13                     	;# 
  1792  0F14                     	;# 
  1793  0F15                     	;# 
  1794  0F16                     	;# 
  1795  0F17                     	;# 
  1796  0F18                     	;# 
  1797  0F19                     	;# 
  1798  0F1A                     	;# 
  1799  0F1B                     	;# 
  1800  0F1C                     	;# 
  1801  0F1D                     	;# 
  1802  0F1E                     	;# 
  1803  0F1F                     	;# 
  1804  0F20                     	;# 
  1805  0F21                     	;# 
  1806  0F22                     	;# 
  1807  0F23                     	;# 
  1808  0F24                     	;# 
  1809  0F25                     	;# 
  1810  0F26                     	;# 
  1811  0F27                     	;# 
  1812  0F28                     	;# 
  1813  0F29                     	;# 
  1814  0F2A                     	;# 
  1815  0F2B                     	;# 
  1816  0F2C                     	;# 
  1817  0F2D                     	;# 
  1818  0F2E                     	;# 
  1819  0F2F                     	;# 
  1820  0F30                     	;# 
  1821  0F31                     	;# 
  1822  0F32                     	;# 
  1823  0F33                     	;# 
  1824  0F34                     	;# 
  1825  0F35                     	;# 
  1826  0F36                     	;# 
  1827  0F37                     	;# 
  1828  0FE4                     	;# 
  1829  0FE5                     	;# 
  1830  0FE6                     	;# 
  1831  0FE7                     	;# 
  1832  0FE8                     	;# 
  1833  0FE9                     	;# 
  1834  0FEA                     	;# 
  1835  0FEB                     	;# 
  1836  0FED                     	;# 
  1837  0FEE                     	;# 
  1838  0FEF                     	;# 
  1839  0000                     	;# 
  1840  0001                     	;# 
  1841  0002                     	;# 
  1842  0003                     	;# 
  1843  0004                     	;# 
  1844  0005                     	;# 
  1845  0006                     	;# 
  1846  0007                     	;# 
  1847  0008                     	;# 
  1848  0009                     	;# 
  1849  000A                     	;# 
  1850  000B                     	;# 
  1851  000C                     	;# 
  1852  000D                     	;# 
  1853  000E                     	;# 
  1854  0010                     	;# 
  1855  0011                     	;# 
  1856  0012                     	;# 
  1857  0013                     	;# 
  1858  0014                     	;# 
  1859  0015                     	;# 
  1860  0015                     	;# 
  1861  0016                     	;# 
  1862  0016                     	;# 
  1863  0017                     	;# 
  1864  0018                     	;# 
  1865  0019                     	;# 
  1866  0019                     	;# 
  1867  001A                     	;# 
  1868  001B                     	;# 
  1869  001C                     	;# 
  1870  001D                     	;# 
  1871  001E                     	;# 
  1872  001F                     	;# 
  1873  008C                     	;# 
  1874  008D                     	;# 
  1875  008E                     	;# 
  1876  0090                     	;# 
  1877  0091                     	;# 
  1878  0092                     	;# 
  1879  0093                     	;# 
  1880  0094                     	;# 
  1881  0097                     	;# 
  1882  009B                     	;# 
  1883  009B                     	;# 
  1884  009C                     	;# 
  1885  009D                     	;# 
  1886  009E                     	;# 
  1887  009F                     	;# 
  1888  010C                     	;# 
  1889  010D                     	;# 
  1890  010E                     	;# 
  1891  0111                     	;# 
  1892  0112                     	;# 
  1893  0113                     	;# 
  1894  0114                     	;# 
  1895  0115                     	;# 
  1896  0116                     	;# 
  1897  0117                     	;# 
  1898  0118                     	;# 
  1899  0119                     	;# 
  1900  018C                     	;# 
  1901  018D                     	;# 
  1902  018E                     	;# 
  1903  0197                     	;# 
  1904  0199                     	;# 
  1905  0199                     	;# 
  1906  0199                     	;# 
  1907  019A                     	;# 
  1908  019A                     	;# 
  1909  019A                     	;# 
  1910  019B                     	;# 
  1911  019B                     	;# 
  1912  019B                     	;# 
  1913  019B                     	;# 
  1914  019B                     	;# 
  1915  019C                     	;# 
  1916  019C                     	;# 
  1917  019C                     	;# 
  1918  019D                     	;# 
  1919  019D                     	;# 
  1920  019D                     	;# 
  1921  019E                     	;# 
  1922  019E                     	;# 
  1923  019E                     	;# 
  1924  019F                     	;# 
  1925  019F                     	;# 
  1926  019F                     	;# 
  1927  019F                     	;# 
  1928  019F                     	;# 
  1929  020C                     	;# 
  1930  020D                     	;# 
  1931  020E                     	;# 
  1932  0211                     	;# 
  1933  0211                     	;# 
  1934  0212                     	;# 
  1935  0212                     	;# 
  1936  0213                     	;# 
  1937  0213                     	;# 
  1938  0214                     	;# 
  1939  0214                     	;# 
  1940  0215                     	;# 
  1941  0215                     	;# 
  1942  0215                     	;# 
  1943  0215                     	;# 
  1944  0216                     	;# 
  1945  0216                     	;# 
  1946  0217                     	;# 
  1947  0217                     	;# 
  1948  0219                     	;# 
  1949  021A                     	;# 
  1950  021B                     	;# 
  1951  021C                     	;# 
  1952  021D                     	;# 
  1953  021D                     	;# 
  1954  021E                     	;# 
  1955  021F                     	;# 
  1956  028C                     	;# 
  1957  028D                     	;# 
  1958  028E                     	;# 
  1959  0291                     	;# 
  1960  0291                     	;# 
  1961  0292                     	;# 
  1962  0293                     	;# 
  1963  0294                     	;# 
  1964  0295                     	;# 
  1965  0295                     	;# 
  1966  0296                     	;# 
  1967  0297                     	;# 
  1968  0298                     	;# 
  1969  029F                     	;# 
  1970  030C                     	;# 
  1971  030D                     	;# 
  1972  030E                     	;# 
  1973  0311                     	;# 
  1974  0311                     	;# 
  1975  0312                     	;# 
  1976  0313                     	;# 
  1977  0314                     	;# 
  1978  0315                     	;# 
  1979  0315                     	;# 
  1980  0316                     	;# 
  1981  0317                     	;# 
  1982  0318                     	;# 
  1983  038C                     	;# 
  1984  038D                     	;# 
  1985  038E                     	;# 
  1986  0391                     	;# 
  1987  0392                     	;# 
  1988  0393                     	;# 
  1989  0394                     	;# 
  1990  0395                     	;# 
  1991  0396                     	;# 
  1992  0397                     	;# 
  1993  0398                     	;# 
  1994  0399                     	;# 
  1995  039A                     	;# 
  1996  039C                     	;# 
  1997  039D                     	;# 
  1998  039E                     	;# 
  1999  039F                     	;# 
  2000  0411                     	;# 
  2001  0411                     	;# 
  2002  0412                     	;# 
  2003  0413                     	;# 
  2004  0414                     	;# 
  2005  0415                     	;# 
  2006  0416                     	;# 
  2007  0417                     	;# 
  2008  0418                     	;# 
  2009  0418                     	;# 
  2010  0419                     	;# 
  2011  041A                     	;# 
  2012  041B                     	;# 
  2013  041C                     	;# 
  2014  041D                     	;# 
  2015  041E                     	;# 
  2016  041F                     	;# 
  2017  0498                     	;# 
  2018  0498                     	;# 
  2019  0499                     	;# 
  2020  049A                     	;# 
  2021  049B                     	;# 
  2022  049B                     	;# 
  2023  049C                     	;# 
  2024  049D                     	;# 
  2025  049E                     	;# 
  2026  049F                     	;# 
  2027  0617                     	;# 
  2028  0618                     	;# 
  2029  0619                     	;# 
  2030  0619                     	;# 
  2031  061A                     	;# 
  2032  061B                     	;# 
  2033  061C                     	;# 
  2034  061C                     	;# 
  2035  061F                     	;# 
  2036  0691                     	;# 
  2037  0692                     	;# 
  2038  0693                     	;# 
  2039  0694                     	;# 
  2040  0695                     	;# 
  2041  0696                     	;# 
  2042  0697                     	;# 
  2043  0698                     	;# 
  2044  0699                     	;# 
  2045  0711                     	;# 
  2046  0712                     	;# 
  2047  0713                     	;# 
  2048  0714                     	;# 
  2049  0715                     	;# 
  2050  0716                     	;# 
  2051  0717                     	;# 
  2052  0718                     	;# 
  2053  0719                     	;# 
  2054  0891                     	;# 
  2055  0891                     	;# 
  2056  0891                     	;# 
  2057  0891                     	;# 
  2058  0891                     	;# 
  2059  0891                     	;# 
  2060  0892                     	;# 
  2061  0892                     	;# 
  2062  0892                     	;# 
  2063  0893                     	;# 
  2064  0893                     	;# 
  2065  0893                     	;# 
  2066  0893                     	;# 
  2067  0893                     	;# 
  2068  0893                     	;# 
  2069  0894                     	;# 
  2070  0894                     	;# 
  2071  0894                     	;# 
  2072  0895                     	;# 
  2073  0895                     	;# 
  2074  0895                     	;# 
  2075  0896                     	;# 
  2076  0896                     	;# 
  2077  0896                     	;# 
  2078  089B                     	;# 
  2079  0911                     	;# 
  2080  0912                     	;# 
  2081  0913                     	;# 
  2082  0914                     	;# 
  2083  0915                     	;# 
  2084  0916                     	;# 
  2085  0918                     	;# 
  2086  0919                     	;# 
  2087  091A                     	;# 
  2088  091B                     	;# 
  2089  091C                     	;# 
  2090  091D                     	;# 
  2091  091E                     	;# 
  2092  091F                     	;# 
  2093  0E0F                     	;# 
  2094  0E10                     	;# 
  2095  0E11                     	;# 
  2096  0E12                     	;# 
  2097  0E13                     	;# 
  2098  0E14                     	;# 
  2099  0E15                     	;# 
  2100  0E16                     	;# 
  2101  0E17                     	;# 
  2102  0E18                     	;# 
  2103  0E19                     	;# 
  2104  0E1A                     	;# 
  2105  0E1B                     	;# 
  2106  0E1C                     	;# 
  2107  0E1D                     	;# 
  2108  0E1E                     	;# 
  2109  0E1F                     	;# 
  2110  0E20                     	;# 
  2111  0E21                     	;# 
  2112  0E22                     	;# 
  2113  0E24                     	;# 
  2114  0E25                     	;# 
  2115  0E28                     	;# 
  2116  0E29                     	;# 
  2117  0E2A                     	;# 
  2118  0E2B                     	;# 
  2119  0E2C                     	;# 
  2120  0E2D                     	;# 
  2121  0E2E                     	;# 
  2122  0E2F                     	;# 
  2123  0E90                     	;# 
  2124  0E91                     	;# 
  2125  0E92                     	;# 
  2126  0E94                     	;# 
  2127  0E95                     	;# 
  2128  0E9C                     	;# 
  2129  0E9D                     	;# 
  2130  0E9E                     	;# 
  2131  0E9F                     	;# 
  2132  0EA0                     	;# 
  2133  0EA1                     	;# 
  2134  0EA2                     	;# 
  2135  0EA3                     	;# 
  2136  0EA4                     	;# 
  2137  0EA5                     	;# 
  2138  0EA6                     	;# 
  2139  0EA7                     	;# 
  2140  0F0F                     	;# 
  2141  0F10                     	;# 
  2142  0F11                     	;# 
  2143  0F12                     	;# 
  2144  0F13                     	;# 
  2145  0F14                     	;# 
  2146  0F15                     	;# 
  2147  0F16                     	;# 
  2148  0F17                     	;# 
  2149  0F18                     	;# 
  2150  0F19                     	;# 
  2151  0F1A                     	;# 
  2152  0F1B                     	;# 
  2153  0F1C                     	;# 
  2154  0F1D                     	;# 
  2155  0F1E                     	;# 
  2156  0F1F                     	;# 
  2157  0F20                     	;# 
  2158  0F21                     	;# 
  2159  0F22                     	;# 
  2160  0F23                     	;# 
  2161  0F24                     	;# 
  2162  0F25                     	;# 
  2163  0F26                     	;# 
  2164  0F27                     	;# 
  2165  0F28                     	;# 
  2166  0F29                     	;# 
  2167  0F2A                     	;# 
  2168  0F2B                     	;# 
  2169  0F2C                     	;# 
  2170  0F2D                     	;# 
  2171  0F2E                     	;# 
  2172  0F2F                     	;# 
  2173  0F30                     	;# 
  2174  0F31                     	;# 
  2175  0F32                     	;# 
  2176  0F33                     	;# 
  2177  0F34                     	;# 
  2178  0F35                     	;# 
  2179  0F36                     	;# 
  2180  0F37                     	;# 
  2181  0FE4                     	;# 
  2182  0FE5                     	;# 
  2183  0FE6                     	;# 
  2184  0FE7                     	;# 
  2185  0FE8                     	;# 
  2186  0FE9                     	;# 
  2187  0FEA                     	;# 
  2188  0FEB                     	;# 
  2189  0FED                     	;# 
  2190  0FEE                     	;# 
  2191  0FEF                     	;# 
  2192  0000                     	;# 
  2193  0001                     	;# 
  2194  0002                     	;# 
  2195  0003                     	;# 
  2196  0004                     	;# 
  2197  0005                     	;# 
  2198  0006                     	;# 
  2199  0007                     	;# 
  2200  0008                     	;# 
  2201  0009                     	;# 
  2202  000A                     	;# 
  2203  000B                     	;# 
  2204  000C                     	;# 
  2205  000D                     	;# 
  2206  000E                     	;# 
  2207  0010                     	;# 
  2208  0011                     	;# 
  2209  0012                     	;# 
  2210  0013                     	;# 
  2211  0014                     	;# 
  2212  0015                     	;# 
  2213  0015                     	;# 
  2214  0016                     	;# 
  2215  0016                     	;# 
  2216  0017                     	;# 
  2217  0018                     	;# 
  2218  0019                     	;# 
  2219  0019                     	;# 
  2220  001A                     	;# 
  2221  001B                     	;# 
  2222  001C                     	;# 
  2223  001D                     	;# 
  2224  001E                     	;# 
  2225  001F                     	;# 
  2226  008C                     	;# 
  2227  008D                     	;# 
  2228  008E                     	;# 
  2229  0090                     	;# 
  2230  0091                     	;# 
  2231  0092                     	;# 
  2232  0093                     	;# 
  2233  0094                     	;# 
  2234  0097                     	;# 
  2235  009B                     	;# 
  2236  009B                     	;# 
  2237  009C                     	;# 
  2238  009D                     	;# 
  2239  009E                     	;# 
  2240  009F                     	;# 
  2241  010C                     	;# 
  2242  010D                     	;# 
  2243  010E                     	;# 
  2244  0111                     	;# 
  2245  0112                     	;# 
  2246  0113                     	;# 
  2247  0114                     	;# 
  2248  0115                     	;# 
  2249  0116                     	;# 
  2250  0117                     	;# 
  2251  0118                     	;# 
  2252  0119                     	;# 
  2253  018C                     	;# 
  2254  018D                     	;# 
  2255  018E                     	;# 
  2256  0197                     	;# 
  2257  0199                     	;# 
  2258  0199                     	;# 
  2259  0199                     	;# 
  2260  019A                     	;# 
  2261  019A                     	;# 
  2262  019A                     	;# 
  2263  019B                     	;# 
  2264  019B                     	;# 
  2265  019B                     	;# 
  2266  019B                     	;# 
  2267  019B                     	;# 
  2268  019C                     	;# 
  2269  019C                     	;# 
  2270  019C                     	;# 
  2271  019D                     	;# 
  2272  019D                     	;# 
  2273  019D                     	;# 
  2274  019E                     	;# 
  2275  019E                     	;# 
  2276  019E                     	;# 
  2277  019F                     	;# 
  2278  019F                     	;# 
  2279  019F                     	;# 
  2280  019F                     	;# 
  2281  019F                     	;# 
  2282  020C                     	;# 
  2283  020D                     	;# 
  2284  020E                     	;# 
  2285  0211                     	;# 
  2286  0211                     	;# 
  2287  0212                     	;# 
  2288  0212                     	;# 
  2289  0213                     	;# 
  2290  0213                     	;# 
  2291  0214                     	;# 
  2292  0214                     	;# 
  2293  0215                     	;# 
  2294  0215                     	;# 
  2295  0215                     	;# 
  2296  0215                     	;# 
  2297  0216                     	;# 
  2298  0216                     	;# 
  2299  0217                     	;# 
  2300  0217                     	;# 
  2301  0219                     	;# 
  2302  021A                     	;# 
  2303  021B                     	;# 
  2304  021C                     	;# 
  2305  021D                     	;# 
  2306  021D                     	;# 
  2307  021E                     	;# 
  2308  021F                     	;# 
  2309  028C                     	;# 
  2310  028D                     	;# 
  2311  028E                     	;# 
  2312  0291                     	;# 
  2313  0291                     	;# 
  2314  0292                     	;# 
  2315  0293                     	;# 
  2316  0294                     	;# 
  2317  0295                     	;# 
  2318  0295                     	;# 
  2319  0296                     	;# 
  2320  0297                     	;# 
  2321  0298                     	;# 
  2322  029F                     	;# 
  2323  030C                     	;# 
  2324  030D                     	;# 
  2325  030E                     	;# 
  2326  0311                     	;# 
  2327  0311                     	;# 
  2328  0312                     	;# 
  2329  0313                     	;# 
  2330  0314                     	;# 
  2331  0315                     	;# 
  2332  0315                     	;# 
  2333  0316                     	;# 
  2334  0317                     	;# 
  2335  0318                     	;# 
  2336  038C                     	;# 
  2337  038D                     	;# 
  2338  038E                     	;# 
  2339  0391                     	;# 
  2340  0392                     	;# 
  2341  0393                     	;# 
  2342  0394                     	;# 
  2343  0395                     	;# 
  2344  0396                     	;# 
  2345  0397                     	;# 
  2346  0398                     	;# 
  2347  0399                     	;# 
  2348  039A                     	;# 
  2349  039C                     	;# 
  2350  039D                     	;# 
  2351  039E                     	;# 
  2352  039F                     	;# 
  2353  0411                     	;# 
  2354  0411                     	;# 
  2355  0412                     	;# 
  2356  0413                     	;# 
  2357  0414                     	;# 
  2358  0415                     	;# 
  2359  0416                     	;# 
  2360  0417                     	;# 
  2361  0418                     	;# 
  2362  0418                     	;# 
  2363  0419                     	;# 
  2364  041A                     	;# 
  2365  041B                     	;# 
  2366  041C                     	;# 
  2367  041D                     	;# 
  2368  041E                     	;# 
  2369  041F                     	;# 
  2370  0498                     	;# 
  2371  0498                     	;# 
  2372  0499                     	;# 
  2373  049A                     	;# 
  2374  049B                     	;# 
  2375  049B                     	;# 
  2376  049C                     	;# 
  2377  049D                     	;# 
  2378  049E                     	;# 
  2379  049F                     	;# 
  2380  0617                     	;# 
  2381  0618                     	;# 
  2382  0619                     	;# 
  2383  0619                     	;# 
  2384  061A                     	;# 
  2385  061B                     	;# 
  2386  061C                     	;# 
  2387  061C                     	;# 
  2388  061F                     	;# 
  2389  0691                     	;# 
  2390  0692                     	;# 
  2391  0693                     	;# 
  2392  0694                     	;# 
  2393  0695                     	;# 
  2394  0696                     	;# 
  2395  0697                     	;# 
  2396  0698                     	;# 
  2397  0699                     	;# 
  2398  0711                     	;# 
  2399  0712                     	;# 
  2400  0713                     	;# 
  2401  0714                     	;# 
  2402  0715                     	;# 
  2403  0716                     	;# 
  2404  0717                     	;# 
  2405  0718                     	;# 
  2406  0719                     	;# 
  2407  0891                     	;# 
  2408  0891                     	;# 
  2409  0891                     	;# 
  2410  0891                     	;# 
  2411  0891                     	;# 
  2412  0891                     	;# 
  2413  0892                     	;# 
  2414  0892                     	;# 
  2415  0892                     	;# 
  2416  0893                     	;# 
  2417  0893                     	;# 
  2418  0893                     	;# 
  2419  0893                     	;# 
  2420  0893                     	;# 
  2421  0893                     	;# 
  2422  0894                     	;# 
  2423  0894                     	;# 
  2424  0894                     	;# 
  2425  0895                     	;# 
  2426  0895                     	;# 
  2427  0895                     	;# 
  2428  0896                     	;# 
  2429  0896                     	;# 
  2430  0896                     	;# 
  2431  089B                     	;# 
  2432  0911                     	;# 
  2433  0912                     	;# 
  2434  0913                     	;# 
  2435  0914                     	;# 
  2436  0915                     	;# 
  2437  0916                     	;# 
  2438  0918                     	;# 
  2439  0919                     	;# 
  2440  091A                     	;# 
  2441  091B                     	;# 
  2442  091C                     	;# 
  2443  091D                     	;# 
  2444  091E                     	;# 
  2445  091F                     	;# 
  2446  0E0F                     	;# 
  2447  0E10                     	;# 
  2448  0E11                     	;# 
  2449  0E12                     	;# 
  2450  0E13                     	;# 
  2451  0E14                     	;# 
  2452  0E15                     	;# 
  2453  0E16                     	;# 
  2454  0E17                     	;# 
  2455  0E18                     	;# 
  2456  0E19                     	;# 
  2457  0E1A                     	;# 
  2458  0E1B                     	;# 
  2459  0E1C                     	;# 
  2460  0E1D                     	;# 
  2461  0E1E                     	;# 
  2462  0E1F                     	;# 
  2463  0E20                     	;# 
  2464  0E21                     	;# 
  2465  0E22                     	;# 
  2466  0E24                     	;# 
  2467  0E25                     	;# 
  2468  0E28                     	;# 
  2469  0E29                     	;# 
  2470  0E2A                     	;# 
  2471  0E2B                     	;# 
  2472  0E2C                     	;# 
  2473  0E2D                     	;# 
  2474  0E2E                     	;# 
  2475  0E2F                     	;# 
  2476  0E90                     	;# 
  2477  0E91                     	;# 
  2478  0E92                     	;# 
  2479  0E94                     	;# 
  2480  0E95                     	;# 
  2481  0E9C                     	;# 
  2482  0E9D                     	;# 
  2483  0E9E                     	;# 
  2484  0E9F                     	;# 
  2485  0EA0                     	;# 
  2486  0EA1                     	;# 
  2487  0EA2                     	;# 
  2488  0EA3                     	;# 
  2489  0EA4                     	;# 
  2490  0EA5                     	;# 
  2491  0EA6                     	;# 
  2492  0EA7                     	;# 
  2493  0F0F                     	;# 
  2494  0F10                     	;# 
  2495  0F11                     	;# 
  2496  0F12                     	;# 
  2497  0F13                     	;# 
  2498  0F14                     	;# 
  2499  0F15                     	;# 
  2500  0F16                     	;# 
  2501  0F17                     	;# 
  2502  0F18                     	;# 
  2503  0F19                     	;# 
  2504  0F1A                     	;# 
  2505  0F1B                     	;# 
  2506  0F1C                     	;# 
  2507  0F1D                     	;# 
  2508  0F1E                     	;# 
  2509  0F1F                     	;# 
  2510  0F20                     	;# 
  2511  0F21                     	;# 
  2512  0F22                     	;# 
  2513  0F23                     	;# 
  2514  0F24                     	;# 
  2515  0F25                     	;# 
  2516  0F26                     	;# 
  2517  0F27                     	;# 
  2518  0F28                     	;# 
  2519  0F29                     	;# 
  2520  0F2A                     	;# 
  2521  0F2B                     	;# 
  2522  0F2C                     	;# 
  2523  0F2D                     	;# 
  2524  0F2E                     	;# 
  2525  0F2F                     	;# 
  2526  0F30                     	;# 
  2527  0F31                     	;# 
  2528  0F32                     	;# 
  2529  0F33                     	;# 
  2530  0F34                     	;# 
  2531  0F35                     	;# 
  2532  0F36                     	;# 
  2533  0F37                     	;# 
  2534  0FE4                     	;# 
  2535  0FE5                     	;# 
  2536  0FE6                     	;# 
  2537  0FE7                     	;# 
  2538  0FE8                     	;# 
  2539  0FE9                     	;# 
  2540  0FEA                     	;# 
  2541  0FEB                     	;# 
  2542  0FED                     	;# 
  2543  0FEE                     	;# 
  2544  0FEF                     	;# 
  2545  0000                     	;# 
  2546  0001                     	;# 
  2547  0002                     	;# 
  2548  0003                     	;# 
  2549  0004                     	;# 
  2550  0005                     	;# 
  2551  0006                     	;# 
  2552  0007                     	;# 
  2553  0008                     	;# 
  2554  0009                     	;# 
  2555  000A                     	;# 
  2556  000B                     	;# 
  2557  000C                     	;# 
  2558  000D                     	;# 
  2559  000E                     	;# 
  2560  0010                     	;# 
  2561  0011                     	;# 
  2562  0012                     	;# 
  2563  0013                     	;# 
  2564  0014                     	;# 
  2565  0015                     	;# 
  2566  0015                     	;# 
  2567  0016                     	;# 
  2568  0016                     	;# 
  2569  0017                     	;# 
  2570  0018                     	;# 
  2571  0019                     	;# 
  2572  0019                     	;# 
  2573  001A                     	;# 
  2574  001B                     	;# 
  2575  001C                     	;# 
  2576  001D                     	;# 
  2577  001E                     	;# 
  2578  001F                     	;# 
  2579  008C                     	;# 
  2580  008D                     	;# 
  2581  008E                     	;# 
  2582  0090                     	;# 
  2583  0091                     	;# 
  2584  0092                     	;# 
  2585  0093                     	;# 
  2586  0094                     	;# 
  2587  0097                     	;# 
  2588  009B                     	;# 
  2589  009B                     	;# 
  2590  009C                     	;# 
  2591  009D                     	;# 
  2592  009E                     	;# 
  2593  009F                     	;# 
  2594  010C                     	;# 
  2595  010D                     	;# 
  2596  010E                     	;# 
  2597  0111                     	;# 
  2598  0112                     	;# 
  2599  0113                     	;# 
  2600  0114                     	;# 
  2601  0115                     	;# 
  2602  0116                     	;# 
  2603  0117                     	;# 
  2604  0118                     	;# 
  2605  0119                     	;# 
  2606  018C                     	;# 
  2607  018D                     	;# 
  2608  018E                     	;# 
  2609  0197                     	;# 
  2610  0199                     	;# 
  2611  0199                     	;# 
  2612  0199                     	;# 
  2613  019A                     	;# 
  2614  019A                     	;# 
  2615  019A                     	;# 
  2616  019B                     	;# 
  2617  019B                     	;# 
  2618  019B                     	;# 
  2619  019B                     	;# 
  2620  019B                     	;# 
  2621  019C                     	;# 
  2622  019C                     	;# 
  2623  019C                     	;# 
  2624  019D                     	;# 
  2625  019D                     	;# 
  2626  019D                     	;# 
  2627  019E                     	;# 
  2628  019E                     	;# 
  2629  019E                     	;# 
  2630  019F                     	;# 
  2631  019F                     	;# 
  2632  019F                     	;# 
  2633  019F                     	;# 
  2634  019F                     	;# 
  2635  020C                     	;# 
  2636  020D                     	;# 
  2637  020E                     	;# 
  2638  0211                     	;# 
  2639  0211                     	;# 
  2640  0212                     	;# 
  2641  0212                     	;# 
  2642  0213                     	;# 
  2643  0213                     	;# 
  2644  0214                     	;# 
  2645  0214                     	;# 
  2646  0215                     	;# 
  2647  0215                     	;# 
  2648  0215                     	;# 
  2649  0215                     	;# 
  2650  0216                     	;# 
  2651  0216                     	;# 
  2652  0217                     	;# 
  2653  0217                     	;# 
  2654  0219                     	;# 
  2655  021A                     	;# 
  2656  021B                     	;# 
  2657  021C                     	;# 
  2658  021D                     	;# 
  2659  021D                     	;# 
  2660  021E                     	;# 
  2661  021F                     	;# 
  2662  028C                     	;# 
  2663  028D                     	;# 
  2664  028E                     	;# 
  2665  0291                     	;# 
  2666  0291                     	;# 
  2667  0292                     	;# 
  2668  0293                     	;# 
  2669  0294                     	;# 
  2670  0295                     	;# 
  2671  0295                     	;# 
  2672  0296                     	;# 
  2673  0297                     	;# 
  2674  0298                     	;# 
  2675  029F                     	;# 
  2676  030C                     	;# 
  2677  030D                     	;# 
  2678  030E                     	;# 
  2679  0311                     	;# 
  2680  0311                     	;# 
  2681  0312                     	;# 
  2682  0313                     	;# 
  2683  0314                     	;# 
  2684  0315                     	;# 
  2685  0315                     	;# 
  2686  0316                     	;# 
  2687  0317                     	;# 
  2688  0318                     	;# 
  2689  038C                     	;# 
  2690  038D                     	;# 
  2691  038E                     	;# 
  2692  0391                     	;# 
  2693  0392                     	;# 
  2694  0393                     	;# 
  2695  0394                     	;# 
  2696  0395                     	;# 
  2697  0396                     	;# 
  2698  0397                     	;# 
  2699  0398                     	;# 
  2700  0399                     	;# 
  2701  039A                     	;# 
  2702  039C                     	;# 
  2703  039D                     	;# 
  2704  039E                     	;# 
  2705  039F                     	;# 
  2706  0411                     	;# 
  2707  0411                     	;# 
  2708  0412                     	;# 
  2709  0413                     	;# 
  2710  0414                     	;# 
  2711  0415                     	;# 
  2712  0416                     	;# 
  2713  0417                     	;# 
  2714  0418                     	;# 
  2715  0418                     	;# 
  2716  0419                     	;# 
  2717  041A                     	;# 
  2718  041B                     	;# 
  2719  041C                     	;# 
  2720  041D                     	;# 
  2721  041E                     	;# 
  2722  041F                     	;# 
  2723  0498                     	;# 
  2724  0498                     	;# 
  2725  0499                     	;# 
  2726  049A                     	;# 
  2727  049B                     	;# 
  2728  049B                     	;# 
  2729  049C                     	;# 
  2730  049D                     	;# 
  2731  049E                     	;# 
  2732  049F                     	;# 
  2733  0617                     	;# 
  2734  0618                     	;# 
  2735  0619                     	;# 
  2736  0619                     	;# 
  2737  061A                     	;# 
  2738  061B                     	;# 
  2739  061C                     	;# 
  2740  061C                     	;# 
  2741  061F                     	;# 
  2742  0691                     	;# 
  2743  0692                     	;# 
  2744  0693                     	;# 
  2745  0694                     	;# 
  2746  0695                     	;# 
  2747  0696                     	;# 
  2748  0697                     	;# 
  2749  0698                     	;# 
  2750  0699                     	;# 
  2751  0711                     	;# 
  2752  0712                     	;# 
  2753  0713                     	;# 
  2754  0714                     	;# 
  2755  0715                     	;# 
  2756  0716                     	;# 
  2757  0717                     	;# 
  2758  0718                     	;# 
  2759  0719                     	;# 
  2760  0891                     	;# 
  2761  0891                     	;# 
  2762  0891                     	;# 
  2763  0891                     	;# 
  2764  0891                     	;# 
  2765  0891                     	;# 
  2766  0892                     	;# 
  2767  0892                     	;# 
  2768  0892                     	;# 
  2769  0893                     	;# 
  2770  0893                     	;# 
  2771  0893                     	;# 
  2772  0893                     	;# 
  2773  0893                     	;# 
  2774  0893                     	;# 
  2775  0894                     	;# 
  2776  0894                     	;# 
  2777  0894                     	;# 
  2778  0895                     	;# 
  2779  0895                     	;# 
  2780  0895                     	;# 
  2781  0896                     	;# 
  2782  0896                     	;# 
  2783  0896                     	;# 
  2784  089B                     	;# 
  2785  0911                     	;# 
  2786  0912                     	;# 
  2787  0913                     	;# 
  2788  0914                     	;# 
  2789  0915                     	;# 
  2790  0916                     	;# 
  2791  0918                     	;# 
  2792  0919                     	;# 
  2793  091A                     	;# 
  2794  091B                     	;# 
  2795  091C                     	;# 
  2796  091D                     	;# 
  2797  091E                     	;# 
  2798  091F                     	;# 
  2799  0E0F                     	;# 
  2800  0E10                     	;# 
  2801  0E11                     	;# 
  2802  0E12                     	;# 
  2803  0E13                     	;# 
  2804  0E14                     	;# 
  2805  0E15                     	;# 
  2806  0E16                     	;# 
  2807  0E17                     	;# 
  2808  0E18                     	;# 
  2809  0E19                     	;# 
  2810  0E1A                     	;# 
  2811  0E1B                     	;# 
  2812  0E1C                     	;# 
  2813  0E1D                     	;# 
  2814  0E1E                     	;# 
  2815  0E1F                     	;# 
  2816  0E20                     	;# 
  2817  0E21                     	;# 
  2818  0E22                     	;# 
  2819  0E24                     	;# 
  2820  0E25                     	;# 
  2821  0E28                     	;# 
  2822  0E29                     	;# 
  2823  0E2A                     	;# 
  2824  0E2B                     	;# 
  2825  0E2C                     	;# 
  2826  0E2D                     	;# 
  2827  0E2E                     	;# 
  2828  0E2F                     	;# 
  2829  0E90                     	;# 
  2830  0E91                     	;# 
  2831  0E92                     	;# 
  2832  0E94                     	;# 
  2833  0E95                     	;# 
  2834  0E9C                     	;# 
  2835  0E9D                     	;# 
  2836  0E9E                     	;# 
  2837  0E9F                     	;# 
  2838  0EA0                     	;# 
  2839  0EA1                     	;# 
  2840  0EA2                     	;# 
  2841  0EA3                     	;# 
  2842  0EA4                     	;# 
  2843  0EA5                     	;# 
  2844  0EA6                     	;# 
  2845  0EA7                     	;# 
  2846  0F0F                     	;# 
  2847  0F10                     	;# 
  2848  0F11                     	;# 
  2849  0F12                     	;# 
  2850  0F13                     	;# 
  2851  0F14                     	;# 
  2852  0F15                     	;# 
  2853  0F16                     	;# 
  2854  0F17                     	;# 
  2855  0F18                     	;# 
  2856  0F19                     	;# 
  2857  0F1A                     	;# 
  2858  0F1B                     	;# 
  2859  0F1C                     	;# 
  2860  0F1D                     	;# 
  2861  0F1E                     	;# 
  2862  0F1F                     	;# 
  2863  0F20                     	;# 
  2864  0F21                     	;# 
  2865  0F22                     	;# 
  2866  0F23                     	;# 
  2867  0F24                     	;# 
  2868  0F25                     	;# 
  2869  0F26                     	;# 
  2870  0F27                     	;# 
  2871  0F28                     	;# 
  2872  0F29                     	;# 
  2873  0F2A                     	;# 
  2874  0F2B                     	;# 
  2875  0F2C                     	;# 
  2876  0F2D                     	;# 
  2877  0F2E                     	;# 
  2878  0F2F                     	;# 
  2879  0F30                     	;# 
  2880  0F31                     	;# 
  2881  0F32                     	;# 
  2882  0F33                     	;# 
  2883  0F34                     	;# 
  2884  0F35                     	;# 
  2885  0F36                     	;# 
  2886  0F37                     	;# 
  2887  0FE4                     	;# 
  2888  0FE5                     	;# 
  2889  0FE6                     	;# 
  2890  0FE7                     	;# 
  2891  0FE8                     	;# 
  2892  0FE9                     	;# 
  2893  0FEA                     	;# 
  2894  0FEB                     	;# 
  2895  0FED                     	;# 
  2896  0FEE                     	;# 
  2897  0FEF                     	;# 
  2898  0000                     	;# 
  2899  0001                     	;# 
  2900  0002                     	;# 
  2901  0003                     	;# 
  2902  0004                     	;# 
  2903  0005                     	;# 
  2904  0006                     	;# 
  2905  0007                     	;# 
  2906  0008                     	;# 
  2907  0009                     	;# 
  2908  000A                     	;# 
  2909  000B                     	;# 
  2910  000C                     	;# 
  2911  000D                     	;# 
  2912  000E                     	;# 
  2913  0010                     	;# 
  2914  0011                     	;# 
  2915  0012                     	;# 
  2916  0013                     	;# 
  2917  0014                     	;# 
  2918  0015                     	;# 
  2919  0015                     	;# 
  2920  0016                     	;# 
  2921  0016                     	;# 
  2922  0017                     	;# 
  2923  0018                     	;# 
  2924  0019                     	;# 
  2925  0019                     	;# 
  2926  001A                     	;# 
  2927  001B                     	;# 
  2928  001C                     	;# 
  2929  001D                     	;# 
  2930  001E                     	;# 
  2931  001F                     	;# 
  2932  008C                     	;# 
  2933  008D                     	;# 
  2934  008E                     	;# 
  2935  0090                     	;# 
  2936  0091                     	;# 
  2937  0092                     	;# 
  2938  0093                     	;# 
  2939  0094                     	;# 
  2940  0097                     	;# 
  2941  009B                     	;# 
  2942  009B                     	;# 
  2943  009C                     	;# 
  2944  009D                     	;# 
  2945  009E                     	;# 
  2946  009F                     	;# 
  2947  010C                     	;# 
  2948  010D                     	;# 
  2949  010E                     	;# 
  2950  0111                     	;# 
  2951  0112                     	;# 
  2952  0113                     	;# 
  2953  0114                     	;# 
  2954  0115                     	;# 
  2955  0116                     	;# 
  2956  0117                     	;# 
  2957  0118                     	;# 
  2958  0119                     	;# 
  2959  018C                     	;# 
  2960  018D                     	;# 
  2961  018E                     	;# 
  2962  0197                     	;# 
  2963  0199                     	;# 
  2964  0199                     	;# 
  2965  0199                     	;# 
  2966  019A                     	;# 
  2967  019A                     	;# 
  2968  019A                     	;# 
  2969  019B                     	;# 
  2970  019B                     	;# 
  2971  019B                     	;# 
  2972  019B                     	;# 
  2973  019B                     	;# 
  2974  019C                     	;# 
  2975  019C                     	;# 
  2976  019C                     	;# 
  2977  019D                     	;# 
  2978  019D                     	;# 
  2979  019D                     	;# 
  2980  019E                     	;# 
  2981  019E                     	;# 
  2982  019E                     	;# 
  2983  019F                     	;# 
  2984  019F                     	;# 
  2985  019F                     	;# 
  2986  019F                     	;# 
  2987  019F                     	;# 
  2988  020C                     	;# 
  2989  020D                     	;# 
  2990  020E                     	;# 
  2991  0211                     	;# 
  2992  0211                     	;# 
  2993  0212                     	;# 
  2994  0212                     	;# 
  2995  0213                     	;# 
  2996  0213                     	;# 
  2997  0214                     	;# 
  2998  0214                     	;# 
  2999  0215                     	;# 
  3000  0215                     	;# 
  3001  0215                     	;# 
  3002  0215                     	;# 
  3003  0216                     	;# 
  3004  0216                     	;# 
  3005  0217                     	;# 
  3006  0217                     	;# 
  3007  0219                     	;# 
  3008  021A                     	;# 
  3009  021B                     	;# 
  3010  021C                     	;# 
  3011  021D                     	;# 
  3012  021D                     	;# 
  3013  021E                     	;# 
  3014  021F                     	;# 
  3015  028C                     	;# 
  3016  028D                     	;# 
  3017  028E                     	;# 
  3018  0291                     	;# 
  3019  0291                     	;# 
  3020  0292                     	;# 
  3021  0293                     	;# 
  3022  0294                     	;# 
  3023  0295                     	;# 
  3024  0295                     	;# 
  3025  0296                     	;# 
  3026  0297                     	;# 
  3027  0298                     	;# 
  3028  029F                     	;# 
  3029  030C                     	;# 
  3030  030D                     	;# 
  3031  030E                     	;# 
  3032  0311                     	;# 
  3033  0311                     	;# 
  3034  0312                     	;# 
  3035  0313                     	;# 
  3036  0314                     	;# 
  3037  0315                     	;# 
  3038  0315                     	;# 
  3039  0316                     	;# 
  3040  0317                     	;# 
  3041  0318                     	;# 
  3042  038C                     	;# 
  3043  038D                     	;# 
  3044  038E                     	;# 
  3045  0391                     	;# 
  3046  0392                     	;# 
  3047  0393                     	;# 
  3048  0394                     	;# 
  3049  0395                     	;# 
  3050  0396                     	;# 
  3051  0397                     	;# 
  3052  0398                     	;# 
  3053  0399                     	;# 
  3054  039A                     	;# 
  3055  039C                     	;# 
  3056  039D                     	;# 
  3057  039E                     	;# 
  3058  039F                     	;# 
  3059  0411                     	;# 
  3060  0411                     	;# 
  3061  0412                     	;# 
  3062  0413                     	;# 
  3063  0414                     	;# 
  3064  0415                     	;# 
  3065  0416                     	;# 
  3066  0417                     	;# 
  3067  0418                     	;# 
  3068  0418                     	;# 
  3069  0419                     	;# 
  3070  041A                     	;# 
  3071  041B                     	;# 
  3072  041C                     	;# 
  3073  041D                     	;# 
  3074  041E                     	;# 
  3075  041F                     	;# 
  3076  0498                     	;# 
  3077  0498                     	;# 
  3078  0499                     	;# 
  3079  049A                     	;# 
  3080  049B                     	;# 
  3081  049B                     	;# 
  3082  049C                     	;# 
  3083  049D                     	;# 
  3084  049E                     	;# 
  3085  049F                     	;# 
  3086  0617                     	;# 
  3087  0618                     	;# 
  3088  0619                     	;# 
  3089  0619                     	;# 
  3090  061A                     	;# 
  3091  061B                     	;# 
  3092  061C                     	;# 
  3093  061C                     	;# 
  3094  061F                     	;# 
  3095  0691                     	;# 
  3096  0692                     	;# 
  3097  0693                     	;# 
  3098  0694                     	;# 
  3099  0695                     	;# 
  3100  0696                     	;# 
  3101  0697                     	;# 
  3102  0698                     	;# 
  3103  0699                     	;# 
  3104  0711                     	;# 
  3105  0712                     	;# 
  3106  0713                     	;# 
  3107  0714                     	;# 
  3108  0715                     	;# 
  3109  0716                     	;# 
  3110  0717                     	;# 
  3111  0718                     	;# 
  3112  0719                     	;# 
  3113  0891                     	;# 
  3114  0891                     	;# 
  3115  0891                     	;# 
  3116  0891                     	;# 
  3117  0891                     	;# 
  3118  0891                     	;# 
  3119  0892                     	;# 
  3120  0892                     	;# 
  3121  0892                     	;# 
  3122  0893                     	;# 
  3123  0893                     	;# 
  3124  0893                     	;# 
  3125  0893                     	;# 
  3126  0893                     	;# 
  3127  0893                     	;# 
  3128  0894                     	;# 
  3129  0894                     	;# 
  3130  0894                     	;# 
  3131  0895                     	;# 
  3132  0895                     	;# 
  3133  0895                     	;# 
  3134  0896                     	;# 
  3135  0896                     	;# 
  3136  0896                     	;# 
  3137  089B                     	;# 
  3138  0911                     	;# 
  3139  0912                     	;# 
  3140  0913                     	;# 
  3141  0914                     	;# 
  3142  0915                     	;# 
  3143  0916                     	;# 
  3144  0918                     	;# 
  3145  0919                     	;# 
  3146  091A                     	;# 
  3147  091B                     	;# 
  3148  091C                     	;# 
  3149  091D                     	;# 
  3150  091E                     	;# 
  3151  091F                     	;# 
  3152  0E0F                     	;# 
  3153  0E10                     	;# 
  3154  0E11                     	;# 
  3155  0E12                     	;# 
  3156  0E13                     	;# 
  3157  0E14                     	;# 
  3158  0E15                     	;# 
  3159  0E16                     	;# 
  3160  0E17                     	;# 
  3161  0E18                     	;# 
  3162  0E19                     	;# 
  3163  0E1A                     	;# 
  3164  0E1B                     	;# 
  3165  0E1C                     	;# 
  3166  0E1D                     	;# 
  3167  0E1E                     	;# 
  3168  0E1F                     	;# 
  3169  0E20                     	;# 
  3170  0E21                     	;# 
  3171  0E22                     	;# 
  3172  0E24                     	;# 
  3173  0E25                     	;# 
  3174  0E28                     	;# 
  3175  0E29                     	;# 
  3176  0E2A                     	;# 
  3177  0E2B                     	;# 
  3178  0E2C                     	;# 
  3179  0E2D                     	;# 
  3180  0E2E                     	;# 
  3181  0E2F                     	;# 
  3182  0E90                     	;# 
  3183  0E91                     	;# 
  3184  0E92                     	;# 
  3185  0E94                     	;# 
  3186  0E95                     	;# 
  3187  0E9C                     	;# 
  3188  0E9D                     	;# 
  3189  0E9E                     	;# 
  3190  0E9F                     	;# 
  3191  0EA0                     	;# 
  3192  0EA1                     	;# 
  3193  0EA2                     	;# 
  3194  0EA3                     	;# 
  3195  0EA4                     	;# 
  3196  0EA5                     	;# 
  3197  0EA6                     	;# 
  3198  0EA7                     	;# 
  3199  0F0F                     	;# 
  3200  0F10                     	;# 
  3201  0F11                     	;# 
  3202  0F12                     	;# 
  3203  0F13                     	;# 
  3204  0F14                     	;# 
  3205  0F15                     	;# 
  3206  0F16                     	;# 
  3207  0F17                     	;# 
  3208  0F18                     	;# 
  3209  0F19                     	;# 
  3210  0F1A                     	;# 
  3211  0F1B                     	;# 
  3212  0F1C                     	;# 
  3213  0F1D                     	;# 
  3214  0F1E                     	;# 
  3215  0F1F                     	;# 
  3216  0F20                     	;# 
  3217  0F21                     	;# 
  3218  0F22                     	;# 
  3219  0F23                     	;# 
  3220  0F24                     	;# 
  3221  0F25                     	;# 
  3222  0F26                     	;# 
  3223  0F27                     	;# 
  3224  0F28                     	;# 
  3225  0F29                     	;# 
  3226  0F2A                     	;# 
  3227  0F2B                     	;# 
  3228  0F2C                     	;# 
  3229  0F2D                     	;# 
  3230  0F2E                     	;# 
  3231  0F2F                     	;# 
  3232  0F30                     	;# 
  3233  0F31                     	;# 
  3234  0F32                     	;# 
  3235  0F33                     	;# 
  3236  0F34                     	;# 
  3237  0F35                     	;# 
  3238  0F36                     	;# 
  3239  0F37                     	;# 
  3240  0FE4                     	;# 
  3241  0FE5                     	;# 
  3242  0FE6                     	;# 
  3243  0FE7                     	;# 
  3244  0FE8                     	;# 
  3245  0FE9                     	;# 
  3246  0FEA                     	;# 
  3247  0FEB                     	;# 
  3248  0FED                     	;# 
  3249  0FEE                     	;# 
  3250  0FEF                     	;# 
  3251  0000                     	;# 
  3252  0001                     	;# 
  3253  0002                     	;# 
  3254  0003                     	;# 
  3255  0004                     	;# 
  3256  0005                     	;# 
  3257  0006                     	;# 
  3258  0007                     	;# 
  3259  0008                     	;# 
  3260  0009                     	;# 
  3261  000A                     	;# 
  3262  000B                     	;# 
  3263  000C                     	;# 
  3264  000D                     	;# 
  3265  000E                     	;# 
  3266  0010                     	;# 
  3267  0011                     	;# 
  3268  0012                     	;# 
  3269  0013                     	;# 
  3270  0014                     	;# 
  3271  0015                     	;# 
  3272  0015                     	;# 
  3273  0016                     	;# 
  3274  0016                     	;# 
  3275  0017                     	;# 
  3276  0018                     	;# 
  3277  0019                     	;# 
  3278  0019                     	;# 
  3279  001A                     	;# 
  3280  001B                     	;# 
  3281  001C                     	;# 
  3282  001D                     	;# 
  3283  001E                     	;# 
  3284  001F                     	;# 
  3285  008C                     	;# 
  3286  008D                     	;# 
  3287  008E                     	;# 
  3288  0090                     	;# 
  3289  0091                     	;# 
  3290  0092                     	;# 
  3291  0093                     	;# 
  3292  0094                     	;# 
  3293  0097                     	;# 
  3294  009B                     	;# 
  3295  009B                     	;# 
  3296  009C                     	;# 
  3297  009D                     	;# 
  3298  009E                     	;# 
  3299  009F                     	;# 
  3300  010C                     	;# 
  3301  010D                     	;# 
  3302  010E                     	;# 
  3303  0111                     	;# 
  3304  0112                     	;# 
  3305  0113                     	;# 
  3306  0114                     	;# 
  3307  0115                     	;# 
  3308  0116                     	;# 
  3309  0117                     	;# 
  3310  0118                     	;# 
  3311  0119                     	;# 
  3312  018C                     	;# 
  3313  018D                     	;# 
  3314  018E                     	;# 
  3315  0197                     	;# 
  3316  0199                     	;# 
  3317  0199                     	;# 
  3318  0199                     	;# 
  3319  019A                     	;# 
  3320  019A                     	;# 
  3321  019A                     	;# 
  3322  019B                     	;# 
  3323  019B                     	;# 
  3324  019B                     	;# 
  3325  019B                     	;# 
  3326  019B                     	;# 
  3327  019C                     	;# 
  3328  019C                     	;# 
  3329  019C                     	;# 
  3330  019D                     	;# 
  3331  019D                     	;# 
  3332  019D                     	;# 
  3333  019E                     	;# 
  3334  019E                     	;# 
  3335  019E                     	;# 
  3336  019F                     	;# 
  3337  019F                     	;# 
  3338  019F                     	;# 
  3339  019F                     	;# 
  3340  019F                     	;# 
  3341  020C                     	;# 
  3342  020D                     	;# 
  3343  020E                     	;# 
  3344  0211                     	;# 
  3345  0211                     	;# 
  3346  0212                     	;# 
  3347  0212                     	;# 
  3348  0213                     	;# 
  3349  0213                     	;# 
  3350  0214                     	;# 
  3351  0214                     	;# 
  3352  0215                     	;# 
  3353  0215                     	;# 
  3354  0215                     	;# 
  3355  0215                     	;# 
  3356  0216                     	;# 
  3357  0216                     	;# 
  3358  0217                     	;# 
  3359  0217                     	;# 
  3360  0219                     	;# 
  3361  021A                     	;# 
  3362  021B                     	;# 
  3363  021C                     	;# 
  3364  021D                     	;# 
  3365  021D                     	;# 
  3366  021E                     	;# 
  3367  021F                     	;# 
  3368  028C                     	;# 
  3369  028D                     	;# 
  3370  028E                     	;# 
  3371  0291                     	;# 
  3372  0291                     	;# 
  3373  0292                     	;# 
  3374  0293                     	;# 
  3375  0294                     	;# 
  3376  0295                     	;# 
  3377  0295                     	;# 
  3378  0296                     	;# 
  3379  0297                     	;# 
  3380  0298                     	;# 
  3381  029F                     	;# 
  3382  030C                     	;# 
  3383  030D                     	;# 
  3384  030E                     	;# 
  3385  0311                     	;# 
  3386  0311                     	;# 
  3387  0312                     	;# 
  3388  0313                     	;# 
  3389  0314                     	;# 
  3390  0315                     	;# 
  3391  0315                     	;# 
  3392  0316                     	;# 
  3393  0317                     	;# 
  3394  0318                     	;# 
  3395  038C                     	;# 
  3396  038D                     	;# 
  3397  038E                     	;# 
  3398  0391                     	;# 
  3399  0392                     	;# 
  3400  0393                     	;# 
  3401  0394                     	;# 
  3402  0395                     	;# 
  3403  0396                     	;# 
  3404  0397                     	;# 
  3405  0398                     	;# 
  3406  0399                     	;# 
  3407  039A                     	;# 
  3408  039C                     	;# 
  3409  039D                     	;# 
  3410  039E                     	;# 
  3411  039F                     	;# 
  3412  0411                     	;# 
  3413  0411                     	;# 
  3414  0412                     	;# 
  3415  0413                     	;# 
  3416  0414                     	;# 
  3417  0415                     	;# 
  3418  0416                     	;# 
  3419  0417                     	;# 
  3420  0418                     	;# 
  3421  0418                     	;# 
  3422  0419                     	;# 
  3423  041A                     	;# 
  3424  041B                     	;# 
  3425  041C                     	;# 
  3426  041D                     	;# 
  3427  041E                     	;# 
  3428  041F                     	;# 
  3429  0498                     	;# 
  3430  0498                     	;# 
  3431  0499                     	;# 
  3432  049A                     	;# 
  3433  049B                     	;# 
  3434  049B                     	;# 
  3435  049C                     	;# 
  3436  049D                     	;# 
  3437  049E                     	;# 
  3438  049F                     	;# 
  3439  0617                     	;# 
  3440  0618                     	;# 
  3441  0619                     	;# 
  3442  0619                     	;# 
  3443  061A                     	;# 
  3444  061B                     	;# 
  3445  061C                     	;# 
  3446  061C                     	;# 
  3447  061F                     	;# 
  3448  0691                     	;# 
  3449  0692                     	;# 
  3450  0693                     	;# 
  3451  0694                     	;# 
  3452  0695                     	;# 
  3453  0696                     	;# 
  3454  0697                     	;# 
  3455  0698                     	;# 
  3456  0699                     	;# 
  3457  0711                     	;# 
  3458  0712                     	;# 
  3459  0713                     	;# 
  3460  0714                     	;# 
  3461  0715                     	;# 
  3462  0716                     	;# 
  3463  0717                     	;# 
  3464  0718                     	;# 
  3465  0719                     	;# 
  3466  0891                     	;# 
  3467  0891                     	;# 
  3468  0891                     	;# 
  3469  0891                     	;# 
  3470  0891                     	;# 
  3471  0891                     	;# 
  3472  0892                     	;# 
  3473  0892                     	;# 
  3474  0892                     	;# 
  3475  0893                     	;# 
  3476  0893                     	;# 
  3477  0893                     	;# 
  3478  0893                     	;# 
  3479  0893                     	;# 
  3480  0893                     	;# 
  3481  0894                     	;# 
  3482  0894                     	;# 
  3483  0894                     	;# 
  3484  0895                     	;# 
  3485  0895                     	;# 
  3486  0895                     	;# 
  3487  0896                     	;# 
  3488  0896                     	;# 
  3489  0896                     	;# 
  3490  089B                     	;# 
  3491  0911                     	;# 
  3492  0912                     	;# 
  3493  0913                     	;# 
  3494  0914                     	;# 
  3495  0915                     	;# 
  3496  0916                     	;# 
  3497  0918                     	;# 
  3498  0919                     	;# 
  3499  091A                     	;# 
  3500  091B                     	;# 
  3501  091C                     	;# 
  3502  091D                     	;# 
  3503  091E                     	;# 
  3504  091F                     	;# 
  3505  0E0F                     	;# 
  3506  0E10                     	;# 
  3507  0E11                     	;# 
  3508  0E12                     	;# 
  3509  0E13                     	;# 
  3510  0E14                     	;# 
  3511  0E15                     	;# 
  3512  0E16                     	;# 
  3513  0E17                     	;# 
  3514  0E18                     	;# 
  3515  0E19                     	;# 
  3516  0E1A                     	;# 
  3517  0E1B                     	;# 
  3518  0E1C                     	;# 
  3519  0E1D                     	;# 
  3520  0E1E                     	;# 
  3521  0E1F                     	;# 
  3522  0E20                     	;# 
  3523  0E21                     	;# 
  3524  0E22                     	;# 
  3525  0E24                     	;# 
  3526  0E25                     	;# 
  3527  0E28                     	;# 
  3528  0E29                     	;# 
  3529  0E2A                     	;# 
  3530  0E2B                     	;# 
  3531  0E2C                     	;# 
  3532  0E2D                     	;# 
  3533  0E2E                     	;# 
  3534  0E2F                     	;# 
  3535  0E90                     	;# 
  3536  0E91                     	;# 
  3537  0E92                     	;# 
  3538  0E94                     	;# 
  3539  0E95                     	;# 
  3540  0E9C                     	;# 
  3541  0E9D                     	;# 
  3542  0E9E                     	;# 
  3543  0E9F                     	;# 
  3544  0EA0                     	;# 
  3545  0EA1                     	;# 
  3546  0EA2                     	;# 
  3547  0EA3                     	;# 
  3548  0EA4                     	;# 
  3549  0EA5                     	;# 
  3550  0EA6                     	;# 
  3551  0EA7                     	;# 
  3552  0F0F                     	;# 
  3553  0F10                     	;# 
  3554  0F11                     	;# 
  3555  0F12                     	;# 
  3556  0F13                     	;# 
  3557  0F14                     	;# 
  3558  0F15                     	;# 
  3559  0F16                     	;# 
  3560  0F17                     	;# 
  3561  0F18                     	;# 
  3562  0F19                     	;# 
  3563  0F1A                     	;# 
  3564  0F1B                     	;# 
  3565  0F1C                     	;# 
  3566  0F1D                     	;# 
  3567  0F1E                     	;# 
  3568  0F1F                     	;# 
  3569  0F20                     	;# 
  3570  0F21                     	;# 
  3571  0F22                     	;# 
  3572  0F23                     	;# 
  3573  0F24                     	;# 
  3574  0F25                     	;# 
  3575  0F26                     	;# 
  3576  0F27                     	;# 
  3577  0F28                     	;# 
  3578  0F29                     	;# 
  3579  0F2A                     	;# 
  3580  0F2B                     	;# 
  3581  0F2C                     	;# 
  3582  0F2D                     	;# 
  3583  0F2E                     	;# 
  3584  0F2F                     	;# 
  3585  0F30                     	;# 
  3586  0F31                     	;# 
  3587  0F32                     	;# 
  3588  0F33                     	;# 
  3589  0F34                     	;# 
  3590  0F35                     	;# 
  3591  0F36                     	;# 
  3592  0F37                     	;# 
  3593  0FE4                     	;# 
  3594  0FE5                     	;# 
  3595  0FE6                     	;# 
  3596  0FE7                     	;# 
  3597  0FE8                     	;# 
  3598  0FE9                     	;# 
  3599  0FEA                     	;# 
  3600  0FEB                     	;# 
  3601  0FED                     	;# 
  3602  0FEE                     	;# 
  3603  0FEF                     	;# 
  3604  0000                     	;# 
  3605  0001                     	;# 
  3606  0002                     	;# 
  3607  0003                     	;# 
  3608  0004                     	;# 
  3609  0005                     	;# 
  3610  0006                     	;# 
  3611  0007                     	;# 
  3612  0008                     	;# 
  3613  0009                     	;# 
  3614  000A                     	;# 
  3615  000B                     	;# 
  3616  000C                     	;# 
  3617  000D                     	;# 
  3618  000E                     	;# 
  3619  0010                     	;# 
  3620  0011                     	;# 
  3621  0012                     	;# 
  3622  0013                     	;# 
  3623  0014                     	;# 
  3624  0015                     	;# 
  3625  0015                     	;# 
  3626  0016                     	;# 
  3627  0016                     	;# 
  3628  0017                     	;# 
  3629  0018                     	;# 
  3630  0019                     	;# 
  3631  0019                     	;# 
  3632  001A                     	;# 
  3633  001B                     	;# 
  3634  001C                     	;# 
  3635  001D                     	;# 
  3636  001E                     	;# 
  3637  001F                     	;# 
  3638  008C                     	;# 
  3639  008D                     	;# 
  3640  008E                     	;# 
  3641  0090                     	;# 
  3642  0091                     	;# 
  3643  0092                     	;# 
  3644  0093                     	;# 
  3645  0094                     	;# 
  3646  0097                     	;# 
  3647  009B                     	;# 
  3648  009B                     	;# 
  3649  009C                     	;# 
  3650  009D                     	;# 
  3651  009E                     	;# 
  3652  009F                     	;# 
  3653  010C                     	;# 
  3654  010D                     	;# 
  3655  010E                     	;# 
  3656  0111                     	;# 
  3657  0112                     	;# 
  3658  0113                     	;# 
  3659  0114                     	;# 
  3660  0115                     	;# 
  3661  0116                     	;# 
  3662  0117                     	;# 
  3663  0118                     	;# 
  3664  0119                     	;# 
  3665  018C                     	;# 
  3666  018D                     	;# 
  3667  018E                     	;# 
  3668  0197                     	;# 
  3669  0199                     	;# 
  3670  0199                     	;# 
  3671  0199                     	;# 
  3672  019A                     	;# 
  3673  019A                     	;# 
  3674  019A                     	;# 
  3675  019B                     	;# 
  3676  019B                     	;# 
  3677  019B                     	;# 
  3678  019B                     	;# 
  3679  019B                     	;# 
  3680  019C                     	;# 
  3681  019C                     	;# 
  3682  019C                     	;# 
  3683  019D                     	;# 
  3684  019D                     	;# 
  3685  019D                     	;# 
  3686  019E                     	;# 
  3687  019E                     	;# 
  3688  019E                     	;# 
  3689  019F                     	;# 
  3690  019F                     	;# 
  3691  019F                     	;# 
  3692  019F                     	;# 
  3693  019F                     	;# 
  3694  020C                     	;# 
  3695  020D                     	;# 
  3696  020E                     	;# 
  3697  0211                     	;# 
  3698  0211                     	;# 
  3699  0212                     	;# 
  3700  0212                     	;# 
  3701  0213                     	;# 
  3702  0213                     	;# 
  3703  0214                     	;# 
  3704  0214                     	;# 
  3705  0215                     	;# 
  3706  0215                     	;# 
  3707  0215                     	;# 
  3708  0215                     	;# 
  3709  0216                     	;# 
  3710  0216                     	;# 
  3711  0217                     	;# 
  3712  0217                     	;# 
  3713  0219                     	;# 
  3714  021A                     	;# 
  3715  021B                     	;# 
  3716  021C                     	;# 
  3717  021D                     	;# 
  3718  021D                     	;# 
  3719  021E                     	;# 
  3720  021F                     	;# 
  3721  028C                     	;# 
  3722  028D                     	;# 
  3723  028E                     	;# 
  3724  0291                     	;# 
  3725  0291                     	;# 
  3726  0292                     	;# 
  3727  0293                     	;# 
  3728  0294                     	;# 
  3729  0295                     	;# 
  3730  0295                     	;# 
  3731  0296                     	;# 
  3732  0297                     	;# 
  3733  0298                     	;# 
  3734  029F                     	;# 
  3735  030C                     	;# 
  3736  030D                     	;# 
  3737  030E                     	;# 
  3738  0311                     	;# 
  3739  0311                     	;# 
  3740  0312                     	;# 
  3741  0313                     	;# 
  3742  0314                     	;# 
  3743  0315                     	;# 
  3744  0315                     	;# 
  3745  0316                     	;# 
  3746  0317                     	;# 
  3747  0318                     	;# 
  3748  038C                     	;# 
  3749  038D                     	;# 
  3750  038E                     	;# 
  3751  0391                     	;# 
  3752  0392                     	;# 
  3753  0393                     	;# 
  3754  0394                     	;# 
  3755  0395                     	;# 
  3756  0396                     	;# 
  3757  0397                     	;# 
  3758  0398                     	;# 
  3759  0399                     	;# 
  3760  039A                     	;# 
  3761  039C                     	;# 
  3762  039D                     	;# 
  3763  039E                     	;# 
  3764  039F                     	;# 
  3765  0411                     	;# 
  3766  0411                     	;# 
  3767  0412                     	;# 
  3768  0413                     	;# 
  3769  0414                     	;# 
  3770  0415                     	;# 
  3771  0416                     	;# 
  3772  0417                     	;# 
  3773  0418                     	;# 
  3774  0418                     	;# 
  3775  0419                     	;# 
  3776  041A                     	;# 
  3777  041B                     	;# 
  3778  041C                     	;# 
  3779  041D                     	;# 
  3780  041E                     	;# 
  3781  041F                     	;# 
  3782  0498                     	;# 
  3783  0498                     	;# 
  3784  0499                     	;# 
  3785  049A                     	;# 
  3786  049B                     	;# 
  3787  049B                     	;# 
  3788  049C                     	;# 
  3789  049D                     	;# 
  3790  049E                     	;# 
  3791  049F                     	;# 
  3792  0617                     	;# 
  3793  0618                     	;# 
  3794  0619                     	;# 
  3795  0619                     	;# 
  3796  061A                     	;# 
  3797  061B                     	;# 
  3798  061C                     	;# 
  3799  061C                     	;# 
  3800  061F                     	;# 
  3801  0691                     	;# 
  3802  0692                     	;# 
  3803  0693                     	;# 
  3804  0694                     	;# 
  3805  0695                     	;# 
  3806  0696                     	;# 
  3807  0697                     	;# 
  3808  0698                     	;# 
  3809  0699                     	;# 
  3810  0711                     	;# 
  3811  0712                     	;# 
  3812  0713                     	;# 
  3813  0714                     	;# 
  3814  0715                     	;# 
  3815  0716                     	;# 
  3816  0717                     	;# 
  3817  0718                     	;# 
  3818  0719                     	;# 
  3819  0891                     	;# 
  3820  0891                     	;# 
  3821  0891                     	;# 
  3822  0891                     	;# 
  3823  0891                     	;# 
  3824  0891                     	;# 
  3825  0892                     	;# 
  3826  0892                     	;# 
  3827  0892                     	;# 
  3828  0893                     	;# 
  3829  0893                     	;# 
  3830  0893                     	;# 
  3831  0893                     	;# 
  3832  0893                     	;# 
  3833  0893                     	;# 
  3834  0894                     	;# 
  3835  0894                     	;# 
  3836  0894                     	;# 
  3837  0895                     	;# 
  3838  0895                     	;# 
  3839  0895                     	;# 
  3840  0896                     	;# 
  3841  0896                     	;# 
  3842  0896                     	;# 
  3843  089B                     	;# 
  3844  0911                     	;# 
  3845  0912                     	;# 
  3846  0913                     	;# 
  3847  0914                     	;# 
  3848  0915                     	;# 
  3849  0916                     	;# 
  3850  0918                     	;# 
  3851  0919                     	;# 
  3852  091A                     	;# 
  3853  091B                     	;# 
  3854  091C                     	;# 
  3855  091D                     	;# 
  3856  091E                     	;# 
  3857  091F                     	;# 
  3858  0E0F                     	;# 
  3859  0E10                     	;# 
  3860  0E11                     	;# 
  3861  0E12                     	;# 
  3862  0E13                     	;# 
  3863  0E14                     	;# 
  3864  0E15                     	;# 
  3865  0E16                     	;# 
  3866  0E17                     	;# 
  3867  0E18                     	;# 
  3868  0E19                     	;# 
  3869  0E1A                     	;# 
  3870  0E1B                     	;# 
  3871  0E1C                     	;# 
  3872  0E1D                     	;# 
  3873  0E1E                     	;# 
  3874  0E1F                     	;# 
  3875  0E20                     	;# 
  3876  0E21                     	;# 
  3877  0E22                     	;# 
  3878  0E24                     	;# 
  3879  0E25                     	;# 
  3880  0E28                     	;# 
  3881  0E29                     	;# 
  3882  0E2A                     	;# 
  3883  0E2B                     	;# 
  3884  0E2C                     	;# 
  3885  0E2D                     	;# 
  3886  0E2E                     	;# 
  3887  0E2F                     	;# 
  3888  0E90                     	;# 
  3889  0E91                     	;# 
  3890  0E92                     	;# 
  3891  0E94                     	;# 
  3892  0E95                     	;# 
  3893  0E9C                     	;# 
  3894  0E9D                     	;# 
  3895  0E9E                     	;# 
  3896  0E9F                     	;# 
  3897  0EA0                     	;# 
  3898  0EA1                     	;# 
  3899  0EA2                     	;# 
  3900  0EA3                     	;# 
  3901  0EA4                     	;# 
  3902  0EA5                     	;# 
  3903  0EA6                     	;# 
  3904  0EA7                     	;# 
  3905  0F0F                     	;# 
  3906  0F10                     	;# 
  3907  0F11                     	;# 
  3908  0F12                     	;# 
  3909  0F13                     	;# 
  3910  0F14                     	;# 
  3911  0F15                     	;# 
  3912  0F16                     	;# 
  3913  0F17                     	;# 
  3914  0F18                     	;# 
  3915  0F19                     	;# 
  3916  0F1A                     	;# 
  3917  0F1B                     	;# 
  3918  0F1C                     	;# 
  3919  0F1D                     	;# 
  3920  0F1E                     	;# 
  3921  0F1F                     	;# 
  3922  0F20                     	;# 
  3923  0F21                     	;# 
  3924  0F22                     	;# 
  3925  0F23                     	;# 
  3926  0F24                     	;# 
  3927  0F25                     	;# 
  3928  0F26                     	;# 
  3929  0F27                     	;# 
  3930  0F28                     	;# 
  3931  0F29                     	;# 
  3932  0F2A                     	;# 
  3933  0F2B                     	;# 
  3934  0F2C                     	;# 
  3935  0F2D                     	;# 
  3936  0F2E                     	;# 
  3937  0F2F                     	;# 
  3938  0F30                     	;# 
  3939  0F31                     	;# 
  3940  0F32                     	;# 
  3941  0F33                     	;# 
  3942  0F34                     	;# 
  3943  0F35                     	;# 
  3944  0F36                     	;# 
  3945  0F37                     	;# 
  3946  0FE4                     	;# 
  3947  0FE5                     	;# 
  3948  0FE6                     	;# 
  3949  0FE7                     	;# 
  3950  0FE8                     	;# 
  3951  0FE9                     	;# 
  3952  0FEA                     	;# 
  3953  0FEB                     	;# 
  3954  0FED                     	;# 
  3955  0FEE                     	;# 
  3956  0FEF                     	;# 
  3957  0000                     	;# 
  3958  0001                     	;# 
  3959  0002                     	;# 
  3960  0003                     	;# 
  3961  0004                     	;# 
  3962  0005                     	;# 
  3963  0006                     	;# 
  3964  0007                     	;# 
  3965  0008                     	;# 
  3966  0009                     	;# 
  3967  000A                     	;# 
  3968  000B                     	;# 
  3969  000C                     	;# 
  3970  000D                     	;# 
  3971  000E                     	;# 
  3972  0010                     	;# 
  3973  0011                     	;# 
  3974  0012                     	;# 
  3975  0013                     	;# 
  3976  0014                     	;# 
  3977  0015                     	;# 
  3978  0015                     	;# 
  3979  0016                     	;# 
  3980  0016                     	;# 
  3981  0017                     	;# 
  3982  0018                     	;# 
  3983  0019                     	;# 
  3984  0019                     	;# 
  3985  001A                     	;# 
  3986  001B                     	;# 
  3987  001C                     	;# 
  3988  001D                     	;# 
  3989  001E                     	;# 
  3990  001F                     	;# 
  3991  008C                     	;# 
  3992  008D                     	;# 
  3993  008E                     	;# 
  3994  0090                     	;# 
  3995  0091                     	;# 
  3996  0092                     	;# 
  3997  0093                     	;# 
  3998  0094                     	;# 
  3999  0097                     	;# 
  4000  009B                     	;# 
  4001  009B                     	;# 
  4002  009C                     	;# 
  4003  009D                     	;# 
  4004  009E                     	;# 
  4005  009F                     	;# 
  4006  010C                     	;# 
  4007  010D                     	;# 
  4008  010E                     	;# 
  4009  0111                     	;# 
  4010  0112                     	;# 
  4011  0113                     	;# 
  4012  0114                     	;# 
  4013  0115                     	;# 
  4014  0116                     	;# 
  4015  0117                     	;# 
  4016  0118                     	;# 
  4017  0119                     	;# 
  4018  018C                     	;# 
  4019  018D                     	;# 
  4020  018E                     	;# 
  4021  0197                     	;# 
  4022  0199                     	;# 
  4023  0199                     	;# 
  4024  0199                     	;# 
  4025  019A                     	;# 
  4026  019A                     	;# 
  4027  019A                     	;# 
  4028  019B                     	;# 
  4029  019B                     	;# 
  4030  019B                     	;# 
  4031  019B                     	;# 
  4032  019B                     	;# 
  4033  019C                     	;# 
  4034  019C                     	;# 
  4035  019C                     	;# 
  4036  019D                     	;# 
  4037  019D                     	;# 
  4038  019D                     	;# 
  4039  019E                     	;# 
  4040  019E                     	;# 
  4041  019E                     	;# 
  4042  019F                     	;# 
  4043  019F                     	;# 
  4044  019F                     	;# 
  4045  019F                     	;# 
  4046  019F                     	;# 
  4047  020C                     	;# 
  4048  020D                     	;# 
  4049  020E                     	;# 
  4050  0211                     	;# 
  4051  0211                     	;# 
  4052  0212                     	;# 
  4053  0212                     	;# 
  4054  0213                     	;# 
  4055  0213                     	;# 
  4056  0214                     	;# 
  4057  0214                     	;# 
  4058  0215                     	;# 
  4059  0215                     	;# 
  4060  0215                     	;# 
  4061  0215                     	;# 
  4062  0216                     	;# 
  4063  0216                     	;# 
  4064  0217                     	;# 
  4065  0217                     	;# 
  4066  0219                     	;# 
  4067  021A                     	;# 
  4068  021B                     	;# 
  4069  021C                     	;# 
  4070  021D                     	;# 
  4071  021D                     	;# 
  4072  021E                     	;# 
  4073  021F                     	;# 
  4074  028C                     	;# 
  4075  028D                     	;# 
  4076  028E                     	;# 
  4077  0291                     	;# 
  4078  0291                     	;# 
  4079  0292                     	;# 
  4080  0293                     	;# 
  4081  0294                     	;# 
  4082  0295                     	;# 
  4083  0295                     	;# 
  4084  0296                     	;# 
  4085  0297                     	;# 
  4086  0298                     	;# 
  4087  029F                     	;# 
  4088  030C                     	;# 
  4089  030D                     	;# 
  4090  030E                     	;# 
  4091  0311                     	;# 
  4092  0311                     	;# 
  4093  0312                     	;# 
  4094  0313                     	;# 
  4095  0314                     	;# 
  4096  0315                     	;# 
  4097  0315                     	;# 
  4098  0316                     	;# 
  4099  0317                     	;# 
  4100  0318                     	;# 
  4101  038C                     	;# 
  4102  038D                     	;# 
  4103  038E                     	;# 
  4104  0391                     	;# 
  4105  0392                     	;# 
  4106  0393                     	;# 
  4107  0394                     	;# 
  4108  0395                     	;# 
  4109  0396                     	;# 
  4110  0397                     	;# 
  4111  0398                     	;# 
  4112  0399                     	;# 
  4113  039A                     	;# 
  4114  039C                     	;# 
  4115  039D                     	;# 
  4116  039E                     	;# 
  4117  039F                     	;# 
  4118  0411                     	;# 
  4119  0411                     	;# 
  4120  0412                     	;# 
  4121  0413                     	;# 
  4122  0414                     	;# 
  4123  0415                     	;# 
  4124  0416                     	;# 
  4125  0417                     	;# 
  4126  0418                     	;# 
  4127  0418                     	;# 
  4128  0419                     	;# 
  4129  041A                     	;# 
  4130  041B                     	;# 
  4131  041C                     	;# 
  4132  041D                     	;# 
  4133  041E                     	;# 
  4134  041F                     	;# 
  4135  0498                     	;# 
  4136  0498                     	;# 
  4137  0499                     	;# 
  4138  049A                     	;# 
  4139  049B                     	;# 
  4140  049B                     	;# 
  4141  049C                     	;# 
  4142  049D                     	;# 
  4143  049E                     	;# 
  4144  049F                     	;# 
  4145  0617                     	;# 
  4146  0618                     	;# 
  4147  0619                     	;# 
  4148  0619                     	;# 
  4149  061A                     	;# 
  4150  061B                     	;# 
  4151  061C                     	;# 
  4152  061C                     	;# 
  4153  061F                     	;# 
  4154  0691                     	;# 
  4155  0692                     	;# 
  4156  0693                     	;# 
  4157  0694                     	;# 
  4158  0695                     	;# 
  4159  0696                     	;# 
  4160  0697                     	;# 
  4161  0698                     	;# 
  4162  0699                     	;# 
  4163  0711                     	;# 
  4164  0712                     	;# 
  4165  0713                     	;# 
  4166  0714                     	;# 
  4167  0715                     	;# 
  4168  0716                     	;# 
  4169  0717                     	;# 
  4170  0718                     	;# 
  4171  0719                     	;# 
  4172  0891                     	;# 
  4173  0891                     	;# 
  4174  0891                     	;# 
  4175  0891                     	;# 
  4176  0891                     	;# 
  4177  0891                     	;# 
  4178  0892                     	;# 
  4179  0892                     	;# 
  4180  0892                     	;# 
  4181  0893                     	;# 
  4182  0893                     	;# 
  4183  0893                     	;# 
  4184  0893                     	;# 
  4185  0893                     	;# 
  4186  0893                     	;# 
  4187  0894                     	;# 
  4188  0894                     	;# 
  4189  0894                     	;# 
  4190  0895                     	;# 
  4191  0895                     	;# 
  4192  0895                     	;# 
  4193  0896                     	;# 
  4194  0896                     	;# 
  4195  0896                     	;# 
  4196  089B                     	;# 
  4197  0911                     	;# 
  4198  0912                     	;# 
  4199  0913                     	;# 
  4200  0914                     	;# 
  4201  0915                     	;# 
  4202  0916                     	;# 
  4203  0918                     	;# 
  4204  0919                     	;# 
  4205  091A                     	;# 
  4206  091B                     	;# 
  4207  091C                     	;# 
  4208  091D                     	;# 
  4209  091E                     	;# 
  4210  091F                     	;# 
  4211  0E0F                     	;# 
  4212  0E10                     	;# 
  4213  0E11                     	;# 
  4214  0E12                     	;# 
  4215  0E13                     	;# 
  4216  0E14                     	;# 
  4217  0E15                     	;# 
  4218  0E16                     	;# 
  4219  0E17                     	;# 
  4220  0E18                     	;# 
  4221  0E19                     	;# 
  4222  0E1A                     	;# 
  4223  0E1B                     	;# 
  4224  0E1C                     	;# 
  4225  0E1D                     	;# 
  4226  0E1E                     	;# 
  4227  0E1F                     	;# 
  4228  0E20                     	;# 
  4229  0E21                     	;# 
  4230  0E22                     	;# 
  4231  0E24                     	;# 
  4232  0E25                     	;# 
  4233  0E28                     	;# 
  4234  0E29                     	;# 
  4235  0E2A                     	;# 
  4236  0E2B                     	;# 
  4237  0E2C                     	;# 
  4238  0E2D                     	;# 
  4239  0E2E                     	;# 
  4240  0E2F                     	;# 
  4241  0E90                     	;# 
  4242  0E91                     	;# 
  4243  0E92                     	;# 
  4244  0E94                     	;# 
  4245  0E95                     	;# 
  4246  0E9C                     	;# 
  4247  0E9D                     	;# 
  4248  0E9E                     	;# 
  4249  0E9F                     	;# 
  4250  0EA0                     	;# 
  4251  0EA1                     	;# 
  4252  0EA2                     	;# 
  4253  0EA3                     	;# 
  4254  0EA4                     	;# 
  4255  0EA5                     	;# 
  4256  0EA6                     	;# 
  4257  0EA7                     	;# 
  4258  0F0F                     	;# 
  4259  0F10                     	;# 
  4260  0F11                     	;# 
  4261  0F12                     	;# 
  4262  0F13                     	;# 
  4263  0F14                     	;# 
  4264  0F15                     	;# 
  4265  0F16                     	;# 
  4266  0F17                     	;# 
  4267  0F18                     	;# 
  4268  0F19                     	;# 
  4269  0F1A                     	;# 
  4270  0F1B                     	;# 
  4271  0F1C                     	;# 
  4272  0F1D                     	;# 
  4273  0F1E                     	;# 
  4274  0F1F                     	;# 
  4275  0F20                     	;# 
  4276  0F21                     	;# 
  4277  0F22                     	;# 
  4278  0F23                     	;# 
  4279  0F24                     	;# 
  4280  0F25                     	;# 
  4281  0F26                     	;# 
  4282  0F27                     	;# 
  4283  0F28                     	;# 
  4284  0F29                     	;# 
  4285  0F2A                     	;# 
  4286  0F2B                     	;# 
  4287  0F2C                     	;# 
  4288  0F2D                     	;# 
  4289  0F2E                     	;# 
  4290  0F2F                     	;# 
  4291  0F30                     	;# 
  4292  0F31                     	;# 
  4293  0F32                     	;# 
  4294  0F33                     	;# 
  4295  0F34                     	;# 
  4296  0F35                     	;# 
  4297  0F36                     	;# 
  4298  0F37                     	;# 
  4299  0FE4                     	;# 
  4300  0FE5                     	;# 
  4301  0FE6                     	;# 
  4302  0FE7                     	;# 
  4303  0FE8                     	;# 
  4304  0FE9                     	;# 
  4305  0FEA                     	;# 
  4306  0FEB                     	;# 
  4307  0FED                     	;# 
  4308  0FEE                     	;# 
  4309  0FEF                     	;_gLedPara
  4310                           
  4311                           	psect	idataBANK1
  4312  0805                     __pidataBANK1:	
  4313                           
  4314                           ;initializer for Led_DynamicCloud@F8373
  4315  0805  34C8               	retlw	200
  4316  0806  3400               	retlw	0
  4317  0807  34C8               	retlw	200
  4318  0808  3400               	retlw	0
  4319  0809  3490               	retlw	144
  4320  080A  3401               	retlw	1
  4321  080B  3440               	retlw	64
  4322  080C  3401               	retlw	1
  4323  080D  3490               	retlw	144
  4324  080E  3401               	retlw	1
  4325                           
  4326                           ;initializer for Led_DynamicMoon@F8363
  4327  080F  3400               	retlw	0
  4328  0810  3400               	retlw	0
  4329  0811  3400               	retlw	0
  4330  0812  3400               	retlw	0
  4331  0813  34E8               	retlw	232
  4332  0814  3403               	retlw	3
  4333  0815  34C8               	retlw	200
  4334  0816  3400               	retlw	0
  4335  0817  3400               	retlw	0
  4336  0818  3400               	retlw	0
  4337                           
  4338                           ;initializer for Led_DynamicWave@F8353
  4339  0819  34F4               	retlw	244
  4340  081A  3401               	retlw	1
  4341  081B  34F4               	retlw	244
  4342  081C  3401               	retlw	1
  4343  081D  34F4               	retlw	244
  4344  081E  3401               	retlw	1
  4345  081F  34C8               	retlw	200
  4346  0820  3400               	retlw	0
  4347  0821  34F4               	retlw	244
  4348  0822  3401               	retlw	1
  4349                           
  4350                           ;initializer for _loadDuty
  4351  0823  341B               	retlw	low _PWM5_LoadDutyValue
  4352  0824  3411               	retlw	high _PWM5_LoadDutyValue
  4353  0825  34C8               	retlw	low _PWM2_LoadDutyValue
  4354  0826  3410               	retlw	high _PWM2_LoadDutyValue
  4355  0827  34EE               	retlw	low _PWM4_LoadDutyValue
  4356  0828  3407               	retlw	high _PWM4_LoadDutyValue
  4357  0829  34DA               	retlw	low _PWM3_LoadDutyValue
  4358  082A  3410               	retlw	high _PWM3_LoadDutyValue
  4359  082B  34B6               	retlw	low _PWM1_LoadDutyValue
  4360  082C  3410               	retlw	high _PWM1_LoadDutyValue
  4361                           
  4362                           	psect	idataBANK2
  4363  1064                     __pidataBANK2:	
  4364                           
  4365                           ;initializer for Led_DynamicStorm@F8383
  4366  1064  3400               	retlw	0
  4367  1065  3400               	retlw	0
  4368  1066  3400               	retlw	0
  4369  1067  3400               	retlw	0
  4370  1068  3458               	retlw	88
  4371  1069  3402               	retlw	2
  4372  106A  3440               	retlw	64
  4373  106B  3400               	retlw	0
  4374  106C  3400               	retlw	0
  4375  106D  3400               	retlw	0
  4376                           
  4377                           	psect	stringtext
  4378  1800                     __pstringtext:	
  4379  1800                     _GAIN:	
  4380  1800  3407               	retlw	7
  4381  1801  3405               	retlw	5
  4382  1802  3403               	retlw	3
  4383  1803  3401               	retlw	1
  4384  1804  3400               	retlw	0
  4385  1805                     __end_of_GAIN:	
  4386  1805                     _VOLUME:	
  4387  1805  340E               	retlw	14
  4388  1806  3411               	retlw	17
  4389  1807  3414               	retlw	20
  4390  1808  3417               	retlw	23
  4391  1809  341A               	retlw	26
  4392  180A                     __end_of_VOLUME:	
  4393                           
  4394                           	psect	nvBANK1
  4395  00E4                     __pnvBANK1:	
  4396  00E4                     _tmr4_isr_handler:	
  4397  00E4                     	ds	2
  4398  00E6                     _tmr2_isr_handler:	
  4399  00E6                     	ds	2
  4400  00E8                     _tmr1_gate_isr_handler:	
  4401  00E8                     	ds	2
  4402  00EA                     _tmr0_isr_handler:	
  4403  00EA                     	ds	2
  4404  00EC                     _txRemain:	
  4405  00EC                     	ds	1
  4406  0019                     _TMR1	set	25
  4407  0012                     _PIR2bits	set	18
  4408  001F                     _T2CONbits	set	31
  4409  001D                     _TMR2	set	29
  4410  001E                     _PR2	set	30
  4411  001F                     _T2CON	set	31
  4412  001B                     _T1CONbits	set	27
  4413  001C                     _T1GCON	set	28
  4414  001B                     _T1CON	set	27
  4415  0017                     _T0CON0bits	set	23
  4416  0010                     _PIR0bits	set	16
  4417  0015                     _TMR0L	set	21
  4418  0016                     _TMR0H	set	22
  4419  0018                     _T0CON1	set	24
  4420  0017                     _T0CON0	set	23
  4421  000B                     _INTCONbits	set	11
  4422  0011                     _PIR1bits	set	17
  4423  005F                     _GIE	set	95
  4424  009B                     _ADRES	set	155
  4425  008E                     _TRISC	set	142
  4426  008D                     _TRISB	set	141
  4427  008C                     _TRISA	set	140
  4428  0092                     _PIE2bits	set	146
  4429  0090                     _PIE0bits	set	144
  4430  0091                     _PIE1bits	set	145
  4431  009D                     _ADCON0bits	set	157
  4432  009B                     _ADRESL	set	155
  4433  009C                     _ADRESH	set	156
  4434  009F                     _ADACT	set	159
  4435  009E                     _ADCON1	set	158
  4436  009D                     _ADCON0	set	157
  4437  010E                     _LATC	set	270
  4438  010D                     _LATB	set	269
  4439  010C                     _LATA	set	268
  4440  019B                     _SP1BRG	set	411
  4441  018C                     _ANSELA	set	396
  4442  018D                     _ANSELB	set	397
  4443  018E                     _ANSELC	set	398
  4444  019A                     _TXREG	set	410
  4445  019E                     _TX1STA	set	414
  4446  019D                     _RC1STA	set	413
  4447  019F                     _BAUD1CON	set	415
  4448  020E                     _WPUC	set	526
  4449  020C                     _WPUA	set	524
  4450  020D                     _WPUB	set	525
  4451  0295                     _CCPR2	set	661
  4452  0291                     _CCPR1	set	657
  4453  028E                     _ODCONC	set	654
  4454  028D                     _ODCONB	set	653
  4455  028C                     _ODCONA	set	652
  4456  0297                     _CCP2CON	set	663
  4457  029F                     _CCPTMRSbits	set	671
  4458  0293                     _CCP1CON	set	659
  4459  0315                     _CCPR4	set	789
  4460  0311                     _CCPR3	set	785
  4461  0317                     _CCP4CON	set	791
  4462  0313                     _CCP3CON	set	787
  4463  0417                     _T4CONbits	set	1047
  4464  0415                     _TMR4	set	1045
  4465  0416                     _PR4	set	1046
  4466  0417                     _T4CON	set	1047
  4467  0617                     _PWM5DC	set	1559
  4468  061F                     _PWMTMRSbits	set	1567
  4469  0619                     _PWM5CON	set	1561
  4470  0896                     _NVMCON2	set	2198
  4471  0895                     _NVMCON1bits	set	2197
  4472  0893                     _NVMDATL	set	2195
  4473  0891                     _NVMADRL	set	2193
  4474  0892                     _NVMADRH	set	2194
  4475  091E                     _OSCTUNE	set	2334
  4476  091F                     _OSCFRQ	set	2335
  4477  091D                     _OSCEN	set	2333
  4478  091B                     _OSCCON3	set	2331
  4479  0919                     _OSCCON1	set	2329
  4480  0E13                     _T1GPPSbits	set	3603
  4481  0E0F                     _PPSLOCKbits	set	3599
  4482  0E0F                     _PPSLOCK	set	3599
  4483  0E9F                     _RB7PPSbits	set	3743
  4484  0EA7                     _RC7PPSbits	set	3751
  4485  0EA1                     _RC1PPSbits	set	3745
  4486  0E92                     _RA2PPSbits	set	3730
  4487  0EA3                     _RC3PPSbits	set	3747
  4488  0EA5                     _RC5PPSbits	set	3749
  4489                           
  4490                           ; #config settings
  4491  0000                     
  4492                           	psect	cinit
  4493  082D                     start_initialization:	
  4494  082D                     __initialization:		;BIGRAM
  4495                           
  4496                           ; Initialize objects allocated to BANK1
  4497  082D  3005               	movlw	low __pidataBANK1
  4498  082E  0084               	movwf	4
  4499  082F  3088               	movlw	(high __pidataBANK1)| (0+128)
  4500  0830  0085               	movwf	5
  4501  0831  30A0               	movlw	low __pdataBANK1
  4502  0832  0086               	movwf	6
  4503  0833  3000               	movlw	high __pdataBANK1
  4504  0834  0087               	movwf	7
  4505  0835  3000               	movlw	0
  4506  0836  00FF               	movwf	127
  4507  0837  3028               	movlw	40
  4508  0838  3190  20AA  3188   	fcall	init_ram
  4509                           
  4510                           ; Initialize objects allocated to BANK2
  4511  083B  3064               	movlw	low __pidataBANK2
  4512  083C  0084               	movwf	4
  4513  083D  3090               	movlw	(high __pidataBANK2)| (0+128)
  4514  083E  0085               	movwf	5
  4515  083F  304D               	movlw	low __pdataBANK2
  4516  0840  0086               	movwf	6
  4517  0841  3001               	movlw	high __pdataBANK2
  4518  0842  0087               	movwf	7
  4519  0843  3000               	movlw	0
  4520  0844  00FF               	movwf	127
  4521  0845  300A               	movlw	10
  4522  0846  3190  20AA  3188   	fcall	init_ram
  4523                           
  4524                           ; Clear objects allocated to BIGRAM
  4525  0849  307B               	movlw	123
  4526  084A  0084               	movwf	4
  4527  084B  3023               	movlw	35
  4528  084C  0085               	movwf	5
  4529  084D  3075               	movlw	117
  4530  084E  00FE               	movwf	126
  4531  084F  3000               	movlw	0
  4532  0850  00FF               	movwf	127
  4533  0851  3190  209E  3188   	fcall	clear_ram0
  4534                           
  4535                           ; Clear objects allocated to BANK0
  4536  0854  3045               	movlw	low __pbssBANK0
  4537  0855  0084               	movwf	4
  4538  0856  3000               	movlw	high __pbssBANK0
  4539  0857  0085               	movwf	5
  4540  0858  301E               	movlw	30
  4541  0859  00FE               	movwf	126
  4542  085A  3000               	movlw	0
  4543  085B  00FF               	movwf	127
  4544  085C  3190  209E  3188   	fcall	clear_ram0
  4545                           
  4546                           ; Clear objects allocated to BANK1
  4547  085F  30C8               	movlw	low __pbssBANK1
  4548  0860  0084               	movwf	4
  4549  0861  3000               	movlw	high __pbssBANK1
  4550  0862  0085               	movwf	5
  4551  0863  301C               	movlw	28
  4552  0864  00FE               	movwf	126
  4553  0865  3000               	movlw	0
  4554  0866  00FF               	movwf	127
  4555  0867  3190  209E  3188   	fcall	clear_ram0
  4556                           
  4557                           ; Clear objects allocated to BANK2
  4558  086A  3020               	movlw	low __pbssBANK2
  4559  086B  0084               	movwf	4
  4560  086C  3001               	movlw	high __pbssBANK2
  4561  086D  0085               	movwf	5
  4562  086E  3020               	movlw	32
  4563  086F  00FE               	movwf	126
  4564  0870  3000               	movlw	0
  4565  0871  00FF               	movwf	127
  4566  0872  3190  209E  3188   	fcall	clear_ram0
  4567  0875                     end_of_initialization:	
  4568                           ;End of C runtime variable initialization code
  4569                           
  4570  0875                     __end_of__initialization:	
  4571  0875  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4572  0876  0020               	movlb	0
  4573  0877  2878               	ljmp	_main	;jump to C main() function
  4574  0878                     __pmaintext:	
  4575                           ; 1 bytes @ 0x25
  4576 ;;
  4577 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4578 ;;
  4579 ;; *************** function _main *****************
  4580 ;; Defined at:
  4581 ;;		line 37 in file "user/src/main.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;		None
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;		None
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : B1F/0
  4592 ;;		On exit  : 1E/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4599 ;;Total ram usage:        0 bytes
  4600 ;; Hardware stack levels required when called:   13
  4601 ;; This function calls:
  4602 ;;		_Audio_GetValue
  4603 ;;		_Audio_Initialize
  4604 ;;		_IR_KeyAtionIfPressed
  4605 ;;		_IR_ResetIfTMR1Overflow
  4606 ;;		_IR_UpdateSetStatus
  4607 ;;		_Interrupt_Initialize
  4608 ;;		_Led_AutoRun
  4609 ;;		_Led_CheckAutoStatus
  4610 ;;		_Led_InitPara
  4611 ;;		_Led_Initialize
  4612 ;;		_Led_SaveParaIfChanged
  4613 ;;		_RTC_HourReady
  4614 ;;		_RTC_MinuteReady
  4615 ;;		_RTC_SecondReady
  4616 ;;		_SYSTEM_Initialize
  4617 ;;		_TMR0_StartTimer
  4618 ;;		_TMR1_StartTimer
  4619 ;;		_TMR2_StartTimer
  4620 ;; This function is called by:
  4621 ;;		Startup code after reset
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           
  4626                           ;psect for function _main
  4627  0878                     _main:	
  4628                           
  4629                           ;main.c: 38: SYSTEM_Initialize();
  4630                           
  4631                           ;incstack = 0
  4632                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4633  0878  2311  3188         	fcall	_SYSTEM_Initialize
  4634                           
  4635                           ;main.c: 39: Interrupt_Initialize();
  4636  087A  22C8  3188         	fcall	_Interrupt_Initialize
  4637                           
  4638                           ;main.c: 40: (INTCONbits.GIE = 1);
  4639  087C  178B               	bsf	11,7	;volatile
  4640                           
  4641                           ;main.c: 41: (INTCONbits.PEIE = 1);
  4642  087D  170B               	bsf	11,6	;volatile
  4643                           
  4644                           ;main.c: 42: Led_InitPara();
  4645  087E  2343  3188         	fcall	_Led_InitPara
  4646                           
  4647                           ;main.c: 43: Audio_Initialize();
  4648  0880  213C  3188         	fcall	_Audio_Initialize
  4649                           
  4650                           ;main.c: 44: Led_Initialize();
  4651  0882  2188  3188         	fcall	_Led_Initialize
  4652                           
  4653                           ;main.c: 45: TMR0_StartTimer();
  4654  0884  25B7  3188         	fcall	_TMR0_StartTimer
  4655                           
  4656                           ;main.c: 46: TMR1_StartTimer();
  4657  0886  2278  3188         	fcall	_TMR1_StartTimer
  4658                           
  4659                           ;main.c: 47: TMR2_StartTimer();
  4660  0888  25BA               	fcall	_TMR2_StartTimer
  4661  0889                     l507:	
  4662                           ;main.c: 49: while (1) {
  4663                           
  4664  0889  0064               	clrwdt	;# 
  4665                           
  4666                           ;main.c: 52: if (!gLedPara.mAuto && gLedPara.mOn && gLedPara.mDyn) {
  4667  088A  3187  279E  3188   	fcall	PL98	;call to abstracted procedure
  4668  088D  1801               	btfsc	1,0
  4669  088E  289B               	goto	l7497
  4670  088F  307B               	movlw	123
  4671  0890  0086               	movwf	6
  4672  0891  3023               	movlw	35
  4673  0892  1C81               	btfss	1,1
  4674  0893  289B               	goto	l7497
  4675  0894  307B               	movlw	123
  4676  0895  0086               	movwf	6
  4677  0896  3023               	movlw	35
  4678  0897  1F81               	btfss	1,7
  4679  0898  289B               	goto	l7497
  4680                           
  4681                           ;main.c: 53: Audio_GetValue();
  4682  0899  20CA  3188         	fcall	_Audio_GetValue
  4683  089B                     l7497:	
  4684                           
  4685                           ;main.c: 54: }
  4686                           ;main.c: 55: IR_KeyAtionIfPressed();
  4687  089B  2273  3188         	fcall	_IR_KeyAtionIfPressed
  4688                           
  4689                           ;main.c: 56: IR_ResetIfTMR1Overflow();
  4690  089D  227B  3188         	fcall	_IR_ResetIfTMR1Overflow
  4691                           
  4692                           ;main.c: 57: Led_SaveParaIfChanged();
  4693  089F  22F3  3188         	fcall	_Led_SaveParaIfChanged
  4694                           
  4695                           ;main.c: 59: if (RTC_HourReady()) {
  4696  08A1  2303  3188         	fcall	_RTC_HourReady
  4697                           
  4698                           ;main.c: 60: }
  4699                           ;main.c: 61: if (RTC_MinuteReady()) {
  4700  08A3  2308  3188         	fcall	_RTC_MinuteReady
  4701  08A5  3A00               	xorlw	0
  4702  08A6  1903               	skipnz
  4703  08A7  28AF               	goto	l7509
  4704                           
  4705                           ;main.c: 62: if (gLedPara.mAuto) {
  4706  08A8  3187  279E  3188   	fcall	PL98	;call to abstracted procedure
  4707  08AB  1C01               	btfss	1,0
  4708  08AC  28AF               	goto	l7509
  4709                           
  4710                           ;main.c: 63: Led_CheckAutoStatus();
  4711  08AD  24BC  3188         	fcall	_Led_CheckAutoStatus
  4712  08AF                     l7509:	
  4713                           
  4714                           ;main.c: 64: }
  4715                           ;main.c: 65: }
  4716                           ;main.c: 66: if (RTC_SecondReady()) {
  4717  08AF  230C  3188         	fcall	_RTC_SecondReady
  4718  08B1  3A00               	xorlw	0
  4719  08B2  1903               	skipnz
  4720  08B3  2889               	goto	l507
  4721                           
  4722                           ;main.c: 67: if (gLedPara.mAuto && ir_state.mState != 4 && ir_state.mState != 5) {
  4723  08B4  3187  279E  3188   	fcall	PL98	;call to abstracted procedure
  4724  08B7  1C01               	btfss	1,0
  4725  08B8  28C7               	goto	l7519
  4726  08B9  0C59               	rrf	_ir_state,w	;volatile
  4727  08BA  0C89               	rrf	9,f
  4728  08BB  3907               	andlw	7
  4729  08BC  3A04               	xorlw	4
  4730  08BD  1903               	skipnz
  4731  08BE  28C7               	goto	l7519
  4732  08BF  0C59               	rrf	_ir_state,w	;volatile
  4733  08C0  0C89               	rrf	9,f
  4734  08C1  3907               	andlw	7
  4735  08C2  3A05               	xorlw	5
  4736  08C3  1903               	skipnz
  4737  08C4  28C7               	goto	l7519
  4738                           
  4739                           ;main.c: 68: Led_AutoRun();
  4740  08C5  2439  3188         	fcall	_Led_AutoRun
  4741  08C7                     l7519:	
  4742                           
  4743                           ;main.c: 69: }
  4744                           ;main.c: 70: IR_UpdateSetStatus();
  4745  08C7  22BC  3188         	fcall	_IR_UpdateSetStatus
  4746  08C9  2889               	goto	l507
  4747  08CA                     __end_of_main:	
  4748  08CA                     __ptext66:	
  4749 ;; *************** function _Audio_GetValue *****************
  4750 ;; Defined at:
  4751 ;;		line 61 in file "user/src/audio.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;		None
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;  value           2   23[BANK0 ] unsigned int 
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  1    wreg      void 
  4758 ;; Registers used:
  4759 ;;		wreg, status,2, status,0, pclath, cstack
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 1F/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4766 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4767 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4768 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;Total ram usage:        6 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; Hardware stack levels required when called:    8
  4772 ;; This function calls:
  4773 ;;		_ADC_Conversion
  4774 ;;		___wmul
  4775 ;; This function is called by:
  4776 ;;		_main
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           
  4781                           ;psect for function _Audio_GetValue
  4782  08CA                     _Audio_GetValue:	
  4783                           
  4784                           ;audio.c: 63: static uint16_t max = 0;
  4785                           ;audio.c: 64: static uint16_t min = 0;
  4786                           ;audio.c: 65: static uint16_t cnt = 0;
  4787                           ;audio.c: 66: uint16_t value;
  4788                           ;audio.c: 68: value = ADC_Conversion ( 0x12 );
  4789                           
  4790                           ;incstack = 0
  4791                           ; Regs used in _Audio_GetValue: [wreg+status,2+status,0+pclath+cstack]
  4792  08CA  3012               	movlw	18
  4793  08CB  211B  3188         	fcall	_ADC_Conversion
  4794  08CD  082E               	movf	?_ADC_Conversion+1,w
  4795  08CE  00B8               	movwf	Audio_GetValue@value+1
  4796  08CF  082D               	movf	?_ADC_Conversion,w
  4797  08D0  00B7               	movwf	Audio_GetValue@value
  4798                           
  4799                           ;audio.c: 69: if ( cnt == 0 )
  4800  08D1  0849               	movf	Audio_GetValue@cnt,w
  4801  08D2  044A               	iorwf	Audio_GetValue@cnt+1,w
  4802  08D3  1D03               	btfss	3,2
  4803  08D4  28D8               	goto	l7231
  4804                           
  4805                           ;audio.c: 70: {
  4806                           ;audio.c: 71: max = value;
  4807  08D5  268B  3188         	fcall	PL170	;call to abstracted procedure
  4808  08D7  28EA               	goto	l7235
  4809  08D8                     l7231:	
  4810                           ;audio.c: 73: }
  4811                           
  4812                           ;audio.c: 72: min = value;
  4813                           
  4814                           
  4815                           ;audio.c: 74: else
  4816                           ;audio.c: 75: {
  4817                           ;audio.c: 76: if ( max < value )
  4818  08D8  0838               	movf	Audio_GetValue@value+1,w
  4819  08D9  024E               	subwf	Audio_GetValue@max+1,w
  4820  08DA  1D03               	skipz
  4821  08DB  28DE               	goto	u6375
  4822  08DC  0837               	movf	Audio_GetValue@value,w
  4823  08DD  024D               	subwf	Audio_GetValue@max,w
  4824  08DE                     u6375:	
  4825  08DE  1803               	skipnc
  4826  08DF  28E2               	goto	l343
  4827                           
  4828                           ;audio.c: 77: {
  4829                           ;audio.c: 78: max = value;
  4830  08E0  268B  3188         	fcall	PL170	;call to abstracted procedure
  4831  08E2                     l343:	
  4832                           
  4833                           ;audio.c: 79: }
  4834                           ;audio.c: 80: if ( min > value )
  4835  08E2  084C               	movf	Audio_GetValue@min+1,w
  4836  08E3  0238               	subwf	Audio_GetValue@value+1,w
  4837  08E4  1D03               	skipz
  4838  08E5  28E8               	goto	u6385
  4839  08E6  084B               	movf	Audio_GetValue@min,w
  4840  08E7  0237               	subwf	Audio_GetValue@value,w
  4841  08E8                     u6385:	
  4842  08E8  1803               	skipnc
  4843  08E9  28EE               	goto	l7237
  4844  08EA                     l7235:	
  4845                           
  4846                           ;audio.c: 81: {
  4847                           ;audio.c: 82: min = value;
  4848  08EA  0838               	movf	Audio_GetValue@value+1,w
  4849  08EB  00CC               	movwf	Audio_GetValue@min+1
  4850  08EC  0837               	movf	Audio_GetValue@value,w
  4851  08ED  00CB               	movwf	Audio_GetValue@min
  4852  08EE                     l7237:	
  4853                           
  4854                           ;audio.c: 83: }
  4855                           ;audio.c: 84: }
  4856                           ;audio.c: 85: cnt++;
  4857  08EE  0AC9               	incf	Audio_GetValue@cnt,f
  4858  08EF  1903               	skipnz
  4859  08F0  0ACA               	incf	Audio_GetValue@cnt+1,f
  4860                           
  4861                           ;audio.c: 86: if ( cnt >= 256 )
  4862  08F1  3001               	movlw	1
  4863  08F2  024A               	subwf	Audio_GetValue@cnt+1,w
  4864  08F3  3000               	movlw	0
  4865  08F4  1903               	skipnz
  4866  08F5  0249               	subwf	Audio_GetValue@cnt,w
  4867  08F6  1C03               	skipc
  4868  08F7  0008               	return
  4869                           
  4870                           ;audio.c: 87: {
  4871                           ;audio.c: 88: cnt = 0;
  4872  08F8  01C9               	clrf	Audio_GetValue@cnt
  4873  08F9  01CA               	clrf	Audio_GetValue@cnt+1
  4874                           
  4875                           ;audio.c: 89: (INTCONbits.GIE = 0);
  4876  08FA  138B               	bcf	11,7	;volatile
  4877                           
  4878                           ;audio.c: 90: audio_value = ( audio_value * 15 + max - min ) >> 4;
  4879  08FB  0850               	movf	_audio_value+1,w	;volatile
  4880  08FC  00AE               	movwf	___wmul@multiplier+1
  4881  08FD  084F               	movf	_audio_value,w	;volatile
  4882  08FE  00AD               	movwf	___wmul@multiplier
  4883  08FF  300F               	movlw	15
  4884  0900  00AF               	movwf	___wmul@multiplicand
  4885  0901  01B0               	clrf	___wmul@multiplicand+1
  4886  0902  3195  2560         	fcall	___wmul
  4887  0904  084B               	movf	Audio_GetValue@min,w
  4888  0905  022D               	subwf	?___wmul,w
  4889  0906  00B3               	movwf	??_Audio_GetValue
  4890  0907  084C               	movf	Audio_GetValue@min+1,w
  4891  0908  3B2E               	subwfb	?___wmul+1,w
  4892  0909  00B4               	movwf	??_Audio_GetValue+1
  4893  090A  084D               	movf	Audio_GetValue@max,w
  4894  090B  0733               	addwf	??_Audio_GetValue,w
  4895  090C  00B5               	movwf	??_Audio_GetValue+2
  4896  090D  084E               	movf	Audio_GetValue@max+1,w
  4897  090E  3D34               	addwfc	??_Audio_GetValue+1,w
  4898  090F  00B6               	movwf	??_Audio_GetValue+3
  4899  0910  0E35               	swapf	??_Audio_GetValue+2,w
  4900  0911  390F               	andlw	15
  4901  0912  00CF               	movwf	_audio_value	;volatile
  4902  0913  0E36               	swapf	??_Audio_GetValue+3,w
  4903  0914  39F0               	andlw	240
  4904  0915  04CF               	iorwf	_audio_value,f	;volatile
  4905  0916  0E36               	swapf	??_Audio_GetValue+3,w
  4906  0917  390F               	andlw	15
  4907  0918  00D0               	movwf	_audio_value+1	;volatile
  4908                           
  4909                           ;audio.c: 91: (INTCONbits.GIE = 1);
  4910  0919  178B               	bsf	11,7	;volatile
  4911  091A  0008               	return
  4912  091B                     __end_of_Audio_GetValue:	
  4913  091B                     __ptext68:	
  4914 ;; *************** function _ADC_Conversion *****************
  4915 ;; Defined at:
  4916 ;;		line 23 in file "driver/src/adc.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;  chn             1    wreg     unsigned char 
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  chn             1   16[BANK0 ] unsigned char 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;                  2   13[BANK0 ] unsigned int 
  4923 ;; Registers used:
  4924 ;;		wreg, status,2, status,0
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 1F/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4930 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;Total ram usage:        4 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:    7
  4937 ;; This function calls:
  4938 ;;		Nothing
  4939 ;; This function is called by:
  4940 ;;		_Audio_GetValue
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           
  4945                           ;psect for function _ADC_Conversion
  4946  091B                     _ADC_Conversion:	
  4947                           
  4948                           ;incstack = 0
  4949                           ; Regs used in _ADC_Conversion: [wreg+status,2+status,0]
  4950                           ;ADC_Conversion@chn stored from wreg
  4951  091B  0020               	movlb	0	; select bank0
  4952  091C  00B0               	movwf	ADC_Conversion@chn
  4953                           
  4954                           ;adc.c: 25: ADCON0bits.CHS = chn;
  4955  091D  00AF               	movwf	??_ADC_Conversion
  4956  091E  0DAF               	rlf	??_ADC_Conversion,f
  4957  091F  0DAF               	rlf	??_ADC_Conversion,f
  4958  0920  0021               	movlb	1	; select bank1
  4959  0921  081D               	movf	29,w	;volatile
  4960  0922  0020               	movlb	0	; select bank0
  4961  0923  062F               	xorwf	??_ADC_Conversion,w
  4962  0924  3903               	andlw	-253
  4963  0925  062F               	xorwf	??_ADC_Conversion,w
  4964  0926  0021               	movlb	1	; select bank1
  4965  0927  009D               	movwf	29	;volatile
  4966                           
  4967                           ;adc.c: 26: ADCON0bits.ADON = 1;
  4968  0928  141D               	bsf	29,0	;volatile
  4969                           
  4970                           ;adc.c: 27: _delay((unsigned long)((4)*(16000000/4000000.0)));
  4971  0929  3005               	movlw	5
  4972  092A                     u6967:	
  4973  092A  0B89               	decfsz	9,f
  4974  092B  292A               	goto	u6967
  4975  092C  0000               	nop
  4976                           
  4977                           ;adc.c: 28: ADCON0bits.GO_nDONE = 1;
  4978  092D  0021               	movlb	1	; select bank1
  4979  092E  149D               	bsf	29,1	;volatile
  4980  092F                     l26:	
  4981                           ;adc.c: 29: while ( !PIR1bits.ADIF );
  4982                           
  4983  092F  0020               	movlb	0	; select bank0
  4984  0930  1F11               	btfss	17,6	;volatile
  4985  0931  292F               	goto	l26
  4986                           
  4987                           ;adc.c: 30: PIR1bits.ADIF = 0;
  4988  0932  1311               	bcf	17,6	;volatile
  4989                           
  4990                           ;adc.c: 31: return ADRES;
  4991  0933  0021               	movlb	1	; select bank1
  4992  0934  081C               	movf	28,w	;volatile
  4993  0935  0020               	movlb	0	; select bank0
  4994  0936  00AE               	movwf	?_ADC_Conversion+1
  4995  0937  0021               	movlb	1	; select bank1
  4996  0938  081B               	movf	27,w	;volatile
  4997  0939  0020               	movlb	0	; select bank0
  4998  093A  00AD               	movwf	?_ADC_Conversion
  4999  093B  0008               	return
  5000  093C                     __end_of_ADC_Conversion:	
  5001  093C                     __ptext61:	
  5002 ;; *************** function _Audio_Initialize *****************
  5003 ;; Defined at:
  5004 ;;		line 89 in file "user/src/led.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;		None
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;		None
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  1    wreg      void 
  5011 ;; Registers used:
  5012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5013 ;; Tracked objects:
  5014 ;;		On entry : 1F/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5019 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5020 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5021 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5022 ;;Total ram usage:        4 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:    9
  5025 ;; This function calls:
  5026 ;;		_Audio_SetPlayMode
  5027 ;;		_Audio_SetVolume
  5028 ;;		_Audio_StopSound
  5029 ;; This function is called by:
  5030 ;;		_main
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           
  5035                           ;psect for function _Audio_Initialize
  5036  093C                     _Audio_Initialize:	
  5037                           
  5038                           ;led.c: 90: _delay((unsigned long)((640)*(16000000/4000.0)));
  5039                           
  5040                           ;incstack = 0
  5041                           ; Regs used in _Audio_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5042  093C  300D               	movlw	13
  5043  093D  0020               	movlb	0	; select bank0
  5044  093E  00B1               	movwf	??_Audio_Initialize+1
  5045  093F  30FD               	movlw	253
  5046  0940  00B0               	movwf	??_Audio_Initialize
  5047  0941  30A2               	movlw	162
  5048  0942                     u6927:	
  5049  0942  0B89               	decfsz	9,f
  5050  0943  2942               	goto	u6927
  5051  0944  0BB0               	decfsz	??_Audio_Initialize,f
  5052  0945  2942               	goto	u6927
  5053  0946  0BB1               	decfsz	??_Audio_Initialize+1,f
  5054  0947  2942               	goto	u6927
  5055  0948  0000               	nop
  5056  0949  0064               	clrwdt	;# 
  5057                           
  5058                           ;led.c: 92: Audio_StopSound();
  5059  094A  3195  2575  3188   	fcall	_Audio_StopSound
  5060                           
  5061                           ;led.c: 93: _delay((unsigned long)((480)*(16000000/4000.0)));
  5062  094D  300A               	movlw	10
  5063  094E  0020               	movlb	0	; select bank0
  5064  094F  00B1               	movwf	??_Audio_Initialize+1
  5065  0950  30BE               	movlw	190
  5066  0951  00B0               	movwf	??_Audio_Initialize
  5067  0952  3079               	movlw	121
  5068  0953                     u6937:	
  5069  0953  0B89               	decfsz	9,f
  5070  0954  2953               	goto	u6937
  5071  0955  0BB0               	decfsz	??_Audio_Initialize,f
  5072  0956  2953               	goto	u6937
  5073  0957  0BB1               	decfsz	??_Audio_Initialize+1,f
  5074  0958  2953               	goto	u6937
  5075                           
  5076                           ;led.c: 94: Audio_SetVolume(gLedPara.mVolOn ? VOLUME[ gLedPara.mVolume ] : 0);
  5077  0959  3187  279E  3188   	fcall	PL98	;call to abstracted procedure
  5078  095C  1901               	btfsc	1,2
  5079  095D  2961               	goto	l7317
  5080  095E  0020               	movlb	0	; select bank0
  5081  095F  01B2               	clrf	_Audio_Initialize$1221
  5082  0960  2966               	goto	L21
  5083  0961                     l7317:	
  5084  0961  3196  269D  3188   	fcall	PL16	;call to abstracted procedure
  5085  0964  0020               	movlb	0	; select bank0
  5086  0965  00B2               	movwf	_Audio_Initialize$1221
  5087  0966                     L21:	
  5088  0966  01B3               	clrf	_Audio_Initialize$1221+1
  5089  0967  0832               	movf	_Audio_Initialize$1221,w
  5090  0968  3196  2614  3188   	fcall	_Audio_SetVolume
  5091                           
  5092                           ;led.c: 95: _delay((unsigned long)((480)*(16000000/4000.0)));
  5093  096B  300A               	movlw	10
  5094  096C  0020               	movlb	0	; select bank0
  5095  096D  00B1               	movwf	??_Audio_Initialize+1
  5096  096E  30BE               	movlw	190
  5097  096F  00B0               	movwf	??_Audio_Initialize
  5098  0970  3079               	movlw	121
  5099  0971                     u6947:	
  5100  0971  0B89               	decfsz	9,f
  5101  0972  2971               	goto	u6947
  5102  0973  0BB0               	decfsz	??_Audio_Initialize,f
  5103  0974  2971               	goto	u6947
  5104  0975  0BB1               	decfsz	??_Audio_Initialize+1,f
  5105  0976  2971               	goto	u6947
  5106                           
  5107                           ;led.c: 96: Audio_SetPlayMode(0x01);
  5108  0977  3001               	movlw	1
  5109  0978  3196  262B  3188   	fcall	_Audio_SetPlayMode
  5110                           
  5111                           ;led.c: 97: _delay((unsigned long)((480)*(16000000/4000.0)));
  5112  097B  300A               	movlw	10
  5113  097C  0020               	movlb	0	; select bank0
  5114  097D  00B1               	movwf	??_Audio_Initialize+1
  5115  097E  30BE               	movlw	190
  5116  097F  00B0               	movwf	??_Audio_Initialize
  5117  0980  3079               	movlw	121
  5118  0981                     u6957:	
  5119  0981  0B89               	decfsz	9,f
  5120  0982  2981               	goto	u6957
  5121  0983  0BB0               	decfsz	??_Audio_Initialize,f
  5122  0984  2981               	goto	u6957
  5123  0985  0BB1               	decfsz	??_Audio_Initialize+1,f
  5124  0986  2981               	goto	u6957
  5125  0987  0008               	return
  5126  0988                     __end_of_Audio_Initialize:	
  5127  0988                     __ptext51:	
  5128 ;; *************** function _Led_Initialize *****************
  5129 ;; Defined at:
  5130 ;;		line 100 in file "user/src/led.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;		None
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;  i               1   26[BANK0 ] unsigned char 
  5135 ;;  result          1   23[BANK0 ] unsigned char 
  5136 ;;  ct              2   24[BANK0 ] unsigned int 
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      void 
  5139 ;; Registers used:
  5140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 1E/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5148 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5149 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5150 ;;Total ram usage:        8 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; Hardware stack levels required when called:    9
  5153 ;; This function calls:
  5154 ;;		_Led_TurnOffRamp
  5155 ;;		_Led_TurnOnRamp
  5156 ;;		_Led_UpdateBright
  5157 ;;		_RTC_GetTime
  5158 ;;		___wmul
  5159 ;; This function is called by:
  5160 ;;		_main
  5161 ;;		_IR_ExitSet
  5162 ;;		_IR_ExitTimeout
  5163 ;;		_IR_KeyAction
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           
  5168                           ;psect for function _Led_Initialize
  5169  0988                     _Led_Initialize:	
  5170  0988                     l6287:	
  5171                           ;incstack = 0
  5172                           ; Regs used in _Led_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5173                           
  5174                           
  5175                           ;led.c: 101: uint16_t ct = RTC_GetTime()->hour * 60u + RTC_GetTime()->minute;
  5176  0988  2272  3188         	fcall	_RTC_GetTime
  5177  098A  2647               	fcall	PL110	;call to abstracted procedure
  5178  098B  3195  2560  3188   	fcall	___wmul
  5179  098E  082E               	movf	?___wmul+1,w
  5180  098F  00B9               	movwf	Led_Initialize@ct+1
  5181  0990  082D               	movf	?___wmul,w
  5182  0991  00B8               	movwf	Led_Initialize@ct
  5183  0992  2272               	fcall	_RTC_GetTime
  5184  0993  0020               	movlb	0	; select bank0
  5185  0994  00B3               	movwf	??_Led_Initialize
  5186  0995  3E01               	addlw	1
  5187  0996  0086               	movwf	6
  5188  0997  0187               	clrf	7
  5189  0998  0801               	movf	1,w
  5190  0999  07B8               	addwf	Led_Initialize@ct,f
  5191  099A  1803               	skipnc
  5192  099B  0AB9               	incf	Led_Initialize@ct+1,f
  5193                           
  5194                           ;led.c: 102: if (!gLedPara.mAuto) {
  5195  099C  3187  279E  3188   	fcall	PL98	;call to abstracted procedure
  5196  099F  1801               	btfsc	1,0
  5197  09A0  2A08               	goto	l6315
  5198                           
  5199                           ;led.c: 103: if (!gLedPara.mOn) {
  5200  09A1  307B               	movlw	123
  5201  09A2  0086               	movwf	6
  5202  09A3  1881               	btfsc	1,1
  5203  09A4  29A6               	goto	l6295
  5204                           
  5205                           ;led.c: 104: Led_TurnOffRamp();
  5206  09A5  2ED0               	ljmp	l6197
  5207  09A6                     l6295:	
  5208                           ;led.c: 105: } else {
  5209                           
  5210                           
  5211                           ;led.c: 106: if (gLedPara.mMsc) {
  5212  09A6  307B               	movlw	123
  5213  09A7  0086               	movwf	6
  5214  09A8  3023               	movlw	35
  5215  09A9  0087               	movwf	7
  5216  09AA  2675  3188         	fcall	PL142	;call to abstracted procedure
  5217  09AC  1903               	skipnz
  5218  09AD  2A06               	goto	l6313
  5219                           
  5220                           ;led.c: 107: gLedRunPara.music_index = gLedPara.mMsc;
  5221  09AE  307B               	movlw	123
  5222  09AF  0086               	movwf	6
  5223  09B0  3023               	movlw	35
  5224  09B1  2675  3188         	fcall	PL142	;call to abstracted procedure
  5225  09B3  0021               	movlb	1	; select bank1
  5226  09B4  00E2               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
  5227                           
  5228                           ;led.c: 108: gLedRunPara.music_state = 1;
  5229  09B5  3001               	movlw	1
  5230  09B6  00E3               	movwf	(_gLedRunPara^(0+128)+25)	;volatile
  5231                           
  5232                           ;led.c: 109: switch (gLedPara.mMsc) {
  5233  09B7  307B               	movlw	123
  5234  09B8  0086               	movwf	6
  5235  09B9  3023               	movlw	35
  5236  09BA  0087               	movwf	7
  5237  09BB  0C01               	rrf	1,w
  5238  09BC  0020               	movlb	0	; select bank0
  5239  09BD  00B3               	movwf	??_Led_Initialize
  5240  09BE  0CB3               	rrf	??_Led_Initialize,f
  5241  09BF  0C33               	rrf	??_Led_Initialize,w
  5242  09C0  390F               	andlw	15
  5243                           
  5244                           ; Switch size 1, requested type "space"
  5245                           ; Number of cases is 4, Range of values is 1 to 4
  5246                           ; switch strategies available:
  5247                           ; Name         Instructions Cycles
  5248                           ; simple_byte           13     7 (average)
  5249                           ; direct_byte           17     9 (fixed)
  5250                           ; jumptable            263     9 (fixed)
  5251                           ;	Chosen strategy is simple_byte
  5252  09C1  3A01               	xorlw	1	; case 1
  5253  09C2  1903               	skipnz
  5254  09C3  29CE               	goto	l6301
  5255  09C4  3A03               	xorlw	3	; case 2
  5256  09C5  1903               	skipnz
  5257  09C6  29DC               	goto	l6303
  5258  09C7  3A01               	xorlw	1	; case 3
  5259  09C8  1903               	skipnz
  5260  09C9  29EA               	goto	l6305
  5261  09CA  3A07               	xorlw	7	; case 4
  5262  09CB  1903               	skipnz
  5263  09CC  29F8               	goto	l6307
  5264  09CD  2A07               	goto	l641
  5265  09CE                     l6301:	
  5266                           
  5267                           ;led.c: 111: gLedRunPara.mTargetBright[0] = gLedPara.mStaticDayBright[0];
  5268  09CE  30B0               	movlw	176
  5269  09CF  260A  3188         	fcall	PL50	;call to abstracted procedure
  5270                           
  5271                           ;led.c: 112: gLedRunPara.mTargetBright[1] = gLedPara.mStaticDayBright[1];
  5272  09D1  30B2               	movlw	178
  5273  09D2  2667  3188         	fcall	PL120	;call to abstracted procedure
  5274                           
  5275                           ;led.c: 113: gLedRunPara.mTargetBright[2] = gLedPara.mStaticDayBright[2];
  5276  09D4  30B4               	movlw	180
  5277  09D5  265B  3188         	fcall	PL114	;call to abstracted procedure
  5278                           
  5279                           ;led.c: 114: gLedRunPara.mTargetBright[3] = gLedPara.mStaticDayBright[3];
  5280  09D7  30B6               	movlw	182
  5281  09D8  2661  3188         	fcall	PL116	;call to abstracted procedure
  5282                           
  5283                           ;led.c: 115: gLedRunPara.mTargetBright[4] = gLedPara.mStaticDayBright[4];
  5284  09DA  30B8               	movlw	184
  5285                           
  5286                           ;led.c: 117: break;
  5287  09DB  2E18               	ljmp	PL72	;call to abstracted procedure
  5288  09DC                     l6303:	
  5289                           
  5290                           ;led.c: 119: gLedRunPara.mTargetBright[0] = gLedPara.mStaticNightBright[0];
  5291  09DC  30BA               	movlw	186
  5292  09DD  260A  3188         	fcall	PL50	;call to abstracted procedure
  5293                           
  5294                           ;led.c: 120: gLedRunPara.mTargetBright[1] = gLedPara.mStaticNightBright[1];
  5295  09DF  30BC               	movlw	188
  5296  09E0  2667  3188         	fcall	PL120	;call to abstracted procedure
  5297                           
  5298                           ;led.c: 121: gLedRunPara.mTargetBright[2] = gLedPara.mStaticNightBright[2];
  5299  09E2  30BE               	movlw	190
  5300  09E3  265B  3188         	fcall	PL114	;call to abstracted procedure
  5301                           
  5302                           ;led.c: 122: gLedRunPara.mTargetBright[3] = gLedPara.mStaticNightBright[3];
  5303  09E5  30C0               	movlw	192
  5304  09E6  2661  3188         	fcall	PL116	;call to abstracted procedure
  5305                           
  5306                           ;led.c: 123: gLedRunPara.mTargetBright[4] = gLedPara.mStaticNightBright[4];
  5307  09E8  30C2               	movlw	194
  5308                           
  5309                           ;led.c: 125: break;
  5310  09E9  2E18               	ljmp	PL72	;call to abstracted procedure
  5311  09EA                     l6305:	
  5312                           
  5313                           ;led.c: 127: gLedRunPara.mTargetBright[0] = gLedPara.mStaticFishBright[0];
  5314  09EA  30C4               	movlw	196
  5315  09EB  260A  3188         	fcall	PL50	;call to abstracted procedure
  5316                           
  5317                           ;led.c: 128: gLedRunPara.mTargetBright[1] = gLedPara.mStaticFishBright[1];
  5318  09ED  30C6               	movlw	198
  5319  09EE  2667  3188         	fcall	PL120	;call to abstracted procedure
  5320                           
  5321                           ;led.c: 129: gLedRunPara.mTargetBright[2] = gLedPara.mStaticFishBright[2];
  5322  09F0  30C8               	movlw	200
  5323  09F1  265B  3188         	fcall	PL114	;call to abstracted procedure
  5324                           
  5325                           ;led.c: 130: gLedRunPara.mTargetBright[3] = gLedPara.mStaticFishBright[3];
  5326  09F3  30CA               	movlw	202
  5327  09F4  2661  3188         	fcall	PL116	;call to abstracted procedure
  5328                           
  5329                           ;led.c: 131: gLedRunPara.mTargetBright[4] = gLedPara.mStaticFishBright[4];
  5330  09F6  30CC               	movlw	204
  5331                           
  5332                           ;led.c: 133: break;
  5333  09F7  2E18               	ljmp	PL72	;call to abstracted procedure
  5334  09F8                     l6307:	
  5335                           
  5336                           ;led.c: 135: gLedRunPara.mTargetBright[0] = gLedPara.mStaticPlantBright[0];
  5337  09F8  30CE               	movlw	206
  5338  09F9  260A  3188         	fcall	PL50	;call to abstracted procedure
  5339                           
  5340                           ;led.c: 136: gLedRunPara.mTargetBright[1] = gLedPara.mStaticPlantBright[1];
  5341  09FB  30D0               	movlw	208
  5342  09FC  2667  3188         	fcall	PL120	;call to abstracted procedure
  5343                           
  5344                           ;led.c: 137: gLedRunPara.mTargetBright[2] = gLedPara.mStaticPlantBright[2];
  5345  09FE  30D2               	movlw	210
  5346  09FF  265B  3188         	fcall	PL114	;call to abstracted procedure
  5347                           
  5348                           ;led.c: 138: gLedRunPara.mTargetBright[3] = gLedPara.mStaticPlantBright[3];
  5349  0A01  30D4               	movlw	212
  5350  0A02  2661  3188         	fcall	PL116	;call to abstracted procedure
  5351                           
  5352                           ;led.c: 139: gLedRunPara.mTargetBright[4] = gLedPara.mStaticPlantBright[4];
  5353  0A04  30D6               	movlw	214
  5354                           
  5355                           ;led.c: 141: break;
  5356  0A05  2E18               	ljmp	PL72	;call to abstracted procedure
  5357  0A06                     l6313:	
  5358                           
  5359                           ;led.c: 146: Led_TurnOnRamp();
  5360  0A06  26E6               	fcall	_Led_TurnOnRamp
  5361  0A07                     l641:	
  5362                           
  5363                           ;led.c: 147: }
  5364                           ;led.c: 148: }
  5365                           ;led.c: 149: } else {
  5366  0A07  0008               	return
  5367  0A08                     l6315:	
  5368  0A08  30E4               	movlw	228
  5369                           
  5370                           ;led.c: 150: bool result = 0;
  5371  0A09  01B7               	clrf	Led_Initialize@result
  5372                           
  5373                           ;led.c: 151: uint8_t i;
  5374                           ;led.c: 152: if (gLedPara.mSunrise < gLedPara.mSunset) {
  5375  0A0A  2636  3188         	fcall	PL92	;call to abstracted procedure
  5376  0A0C  00B4               	movwf	??_Led_Initialize+1
  5377  0A0D  30D8               	movlw	216
  5378  0A0E  262A  3188         	fcall	PL90	;call to abstracted procedure
  5379                           
  5380                           ;led.c: 153: if (ct >= gLedPara.mSunrise && ct < gLedPara.mSunset) {
  5381  0A10  30D8               	movlw	216
  5382  0A11  0086               	movwf	6
  5383  0A12  3023               	movlw	35
  5384  0A13  0087               	movwf	7
  5385  0A14  1803               	skipnc
  5386  0A15  2A22               	goto	L20
  5387  0A16  3F40               	moviw [0]fsr1
  5388  0A17  00B3               	movwf	??_Led_Initialize
  5389  0A18  3F41               	moviw [1]fsr1
  5390  0A19  00B4               	movwf	??_Led_Initialize+1
  5391  0A1A  0239               	subwf	Led_Initialize@ct+1,w
  5392  0A1B  1D03               	skipz
  5393  0A1C  2A1F               	goto	u5375
  5394  0A1D  0833               	movf	??_Led_Initialize,w
  5395  0A1E  0238               	subwf	Led_Initialize@ct,w
  5396  0A1F                     u5375:	
  5397  0A1F  1C03               	skipc
  5398  0A20  2A43               	goto	l6331
  5399  0A21  2A36               	goto	L37
  5400  0A22                     L20:	
  5401  0A22  3F40               	moviw [0]fsr1
  5402  0A23  00B3               	movwf	??_Led_Initialize
  5403  0A24  3F41               	moviw [1]fsr1
  5404  0A25  00B4               	movwf	??_Led_Initialize+1
  5405  0A26  30E4               	movlw	228
  5406  0A27  262A  3188         	fcall	PL90	;call to abstracted procedure
  5407  0A29  1803               	skipnc
  5408  0A2A  2A43               	goto	l6331
  5409                           
  5410                           ;led.c: 157: if (ct >= gLedPara.mSunrise || ct < gLedPara.mSunset) {
  5411  0A2B  30D8               	movlw	216
  5412  0A2C  2636  3188         	fcall	PL92	;call to abstracted procedure
  5413  0A2E  00B4               	movwf	??_Led_Initialize+1
  5414  0A2F  0239               	subwf	Led_Initialize@ct+1,w
  5415  0A30  1D03               	skipz
  5416  0A31  2A34               	goto	u5405
  5417  0A32  0833               	movf	??_Led_Initialize,w
  5418  0A33  0238               	subwf	Led_Initialize@ct,w
  5419  0A34                     u5405:	
  5420  0A34  1803               	skipnc
  5421  0A35  2A41               	goto	l6323
  5422  0A36                     L37:	
  5423  0A36  30E4               	movlw	228
  5424  0A37  2636  3188         	fcall	PL92	;call to abstracted procedure
  5425  0A39  00B4               	movwf	??_Led_Initialize+1
  5426  0A3A  0239               	subwf	Led_Initialize@ct+1,w
  5427  0A3B  1D03               	skipz
  5428  0A3C  2A3F               	goto	u5415
  5429  0A3D  0833               	movf	??_Led_Initialize,w
  5430  0A3E  0238               	subwf	Led_Initialize@ct,w
  5431  0A3F                     u5415:	
  5432  0A3F  1803               	skipnc
  5433  0A40  2A43               	goto	l6331
  5434  0A41                     l6323:	
  5435                           
  5436                           ;led.c: 154: result = 1;
  5437  0A41  01B7               	clrf	Led_Initialize@result
  5438  0A42  0AB7               	incf	Led_Initialize@result,f
  5439  0A43                     l6331:	
  5440                           
  5441                           ;led.c: 159: }
  5442                           ;led.c: 160: }
  5443                           ;led.c: 161: if (result) {
  5444  0A43  0837               	movf	Led_Initialize@result,w
  5445  0A44  1903               	btfsc	3,2
  5446  0A45  2A5C               	goto	l6345
  5447                           
  5448                           ;led.c: 162: for (i = 0; i < 5; i++) {
  5449  0A46  01BA               	clrf	Led_Initialize@i
  5450  0A47                     l6339:	
  5451                           
  5452                           ;led.c: 163: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
  5453  0A47  083A               	movf	Led_Initialize@i,w
  5454  0A48  00B3               	movwf	??_Led_Initialize
  5455  0A49  30DA               	movlw	218
  5456  0A4A  25E0  3188         	fcall	PL18	;call to abstracted procedure
  5457  0A4C  25EE  3188         	fcall	PL20	;call to abstracted procedure
  5458                           
  5459                           ;led.c: 164: gLedRunPara.mCurrentBright[i] = gLedPara.mDayBright[i];
  5460  0A4E  083A               	movf	Led_Initialize@i,w
  5461  0A4F  00B3               	movwf	??_Led_Initialize
  5462  0A50  30DA               	movlw	218
  5463  0A51  25E0  3188         	fcall	PL18	;call to abstracted procedure
  5464  0A53  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
  5465  0A54  0084               	movwf	4
  5466  0A55  2613  3188         	fcall	PL60	;call to abstracted procedure
  5467  0A57  0ABA               	incf	Led_Initialize@i,f
  5468  0A58  023A               	subwf	Led_Initialize@i,w
  5469  0A59  1803               	btfsc	3,0
  5470  0A5A  2A71               	goto	l6357
  5471  0A5B  2A47               	goto	l6339
  5472  0A5C                     l6345:	
  5473                           
  5474                           ;led.c: 167: for (i = 0; i < 5; i++) {
  5475  0A5C  01BA               	clrf	Led_Initialize@i
  5476  0A5D                     l6351:	
  5477                           
  5478                           ;led.c: 168: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
  5479  0A5D  083A               	movf	Led_Initialize@i,w
  5480  0A5E  00B3               	movwf	??_Led_Initialize
  5481  0A5F  30E6               	movlw	230
  5482  0A60  25E0  3188         	fcall	PL18	;call to abstracted procedure
  5483  0A62  25EE  3188         	fcall	PL20	;call to abstracted procedure
  5484                           
  5485                           ;led.c: 169: gLedRunPara.mCurrentBright[i] = gLedPara.mNightBright[i];
  5486  0A64  083A               	movf	Led_Initialize@i,w
  5487  0A65  00B3               	movwf	??_Led_Initialize
  5488  0A66  30E6               	movlw	230
  5489  0A67  25E0  3188         	fcall	PL18	;call to abstracted procedure
  5490  0A69  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
  5491  0A6A  0084               	movwf	4
  5492  0A6B  2613  3188         	fcall	PL60	;call to abstracted procedure
  5493  0A6D  0ABA               	incf	Led_Initialize@i,f
  5494  0A6E  023A               	subwf	Led_Initialize@i,w
  5495  0A6F  1C03               	skipc
  5496  0A70  2A5D               	goto	l6351
  5497  0A71                     l6357:	
  5498                           
  5499                           ;led.c: 170: }
  5500                           ;led.c: 171: }
  5501                           ;led.c: 172: Led_UpdateBright();
  5502  0A71  2CA3               	ljmp	l6225
  5503  0A72                     __end_of_Led_Initialize:	
  5504  0A72                     __ptext52:	
  5505 ;; *************** function _RTC_GetTime *****************
  5506 ;; Defined at:
  5507 ;;		line 14 in file "user/src/rtc.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;		None
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;		None
  5512 ;; Return value:  Size  Location     Type
  5513 ;;                  1    wreg      PTR struct .
  5514 ;; Registers used:
  5515 ;;		wreg
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5525 ;;Total ram usage:        0 bytes
  5526 ;; Hardware stack levels used:    1
  5527 ;; Hardware stack levels required when called:    7
  5528 ;; This function calls:
  5529 ;;		Nothing
  5530 ;; This function is called by:
  5531 ;;		_Led_Initialize
  5532 ;;		_Led_CheckAutoStatus
  5533 ;;		_IR_KeyAction
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           
  5538                           ;psect for function _RTC_GetTime
  5539  0A72                     _RTC_GetTime:	
  5540                           
  5541                           ;rtc.c: 16: return &rtc_time;
  5542                           
  5543                           ;incstack = 0
  5544                           ; Regs used in _RTC_GetTime: [wreg]
  5545  0A72  3460               	retlw	(low (_rtc_time| 0))& (0+255)
  5546  0A73                     __end_of_RTC_GetTime:	
  5547  0A73                     __ptext39:	
  5548 ;; *************** function _IR_KeyAtionIfPressed *****************
  5549 ;; Defined at:
  5550 ;;		line 807 in file "user/src/ir.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;		None
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;		None
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 1F/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5568 ;;Total ram usage:        0 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:   12
  5571 ;; This function calls:
  5572 ;;		_IR_KeyAction
  5573 ;; This function is called by:
  5574 ;;		_main
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           
  5579                           ;psect for function _IR_KeyAtionIfPressed
  5580  0A73                     _IR_KeyAtionIfPressed:	
  5581                           
  5582                           ;ir.c: 808: if (ir_state.mKeyRcv) {
  5583                           
  5584                           ;incstack = 0
  5585                           ; Regs used in _IR_KeyAtionIfPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5586  0A73  0020               	movlb	0	; select bank0
  5587  0A74  1C59               	btfss	_ir_state,0	;volatile
  5588  0A75  0008               	return
  5589                           
  5590                           ;ir.c: 809: IR_KeyAction();
  5591  0A76  3191  2947         	ljmp	l6759
  5592  0A78                     __end_of_IR_KeyAtionIfPressed:	
  5593  0A78                     __ptext38:	
  5594 ;; *************** function _TMR1_StartTimer *****************
  5595 ;; Defined at:
  5596 ;;		line 21 in file "driver/src/tmr1.c"
  5597 ;; Parameters:    Size  Location     Type
  5598 ;;		None
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;		None
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  1    wreg      void 
  5603 ;; Registers used:
  5604 ;;		None
  5605 ;; Tracked objects:
  5606 ;;		On entry : 1E/0
  5607 ;;		On exit  : 1F/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5614 ;;Total ram usage:        0 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    7
  5617 ;; This function calls:
  5618 ;;		Nothing
  5619 ;; This function is called by:
  5620 ;;		_main
  5621 ;;		_IR_ResetIfTMR1Overflow
  5622 ;; This function uses a non-reentrant model
  5623 ;;
  5624                           
  5625                           
  5626                           ;psect for function _TMR1_StartTimer
  5627  0A78                     _TMR1_StartTimer:	
  5628  0A78                     l5025:	
  5629                           ;incstack = 0
  5630                           ; Regs used in _TMR1_StartTimer: []
  5631                           
  5632                           
  5633                           ;tmr1.c: 23: T1CONbits.TMR1ON = 1;
  5634  0A78  0020               	movlb	0	; select bank0
  5635  0A79  141B               	bsf	27,0	;volatile
  5636  0A7A  0008               	return
  5637  0A7B                     __end_of_TMR1_StartTimer:	
  5638  0A7B                     __ptext36:	
  5639 ;; *************** function _IR_ResetIfTMR1Overflow *****************
  5640 ;; Defined at:
  5641 ;;		line 253 in file "user/src/ir.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;		None
  5644 ;; Auto vars:     Size  Location     Type
  5645 ;;		None
  5646 ;; Return value:  Size  Location     Type
  5647 ;;                  1    wreg      void 
  5648 ;; Registers used:
  5649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5650 ;; Tracked objects:
  5651 ;;		On entry : 1F/0
  5652 ;;		On exit  : 1F/0
  5653 ;;		Unchanged: 0/0
  5654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5659 ;;Total ram usage:        0 bytes
  5660 ;; Hardware stack levels used:    1
  5661 ;; Hardware stack levels required when called:    8
  5662 ;; This function calls:
  5663 ;;		_TMR1_StartTimer
  5664 ;;		_TMR1_StopTimer
  5665 ;;		_TMR2_EnableInterrupt
  5666 ;; This function is called by:
  5667 ;;		_main
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           
  5672                           ;psect for function _IR_ResetIfTMR1Overflow
  5673  0A7B                     _IR_ResetIfTMR1Overflow:	
  5674                           
  5675                           ;ir.c: 254: if (PIR1bits.TMR1IF) {
  5676                           
  5677                           ;incstack = 0
  5678                           ; Regs used in _IR_ResetIfTMR1Overflow: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5679  0A7B  1C11               	btfss	17,0	;volatile
  5680  0A7C  0008               	return
  5681                           
  5682                           ;ir.c: 255: PIR1bits.TMR1IF = 0;
  5683  0A7D  1011               	bcf	17,0	;volatile
  5684                           
  5685                           ;ir.c: 256: TMR1_StopTimer();
  5686  0A7E  22BA  3188         	fcall	_TMR1_StopTimer
  5687                           
  5688                           ;ir.c: 257: TMR1 = 0;
  5689  0A80  0199               	clrf	25	;volatile
  5690  0A81  019A               	clrf	26	;volatile
  5691                           
  5692                           ;ir.c: 258: ir_state.mState = 0;
  5693  0A82  30E3               	movlw	-29
  5694  0A83  05D9               	andwf	_ir_state,f	;volatile
  5695                           
  5696                           ;ir.c: 259: if (!ir_state.mKeyRpt) {
  5697  0A84  1CD9               	btfss	_ir_state,1	;volatile
  5698  0A85  2A89               	goto	l7347
  5699  0A86  2AB5               	goto	l1053
  5700  0A87                     l1058:	
  5701  0A87                     l1068:	
  5702                           
  5703                           ;ir.c: 262: case 0x0E:
  5704                           ;ir.c: 263: case 0x1F:
  5705                           ;ir.c: 264: case 0x5E:
  5706                           ;ir.c: 265: case 0x12:
  5707                           ;ir.c: 266: case 0x05:
  5708                           ;ir.c: 267: case 0x06:
  5709                           ;ir.c: 268: case 0x11:
  5710                           ;ir.c: 269: case 0x42:
  5711                           ;ir.c: 270: case 0x15:
  5712                           ;ir.c: 271: case 0x14:
  5713                           ;ir.c: 272: case 0x0B:
  5714                           ;ir.c: 273: case 0x1A:
  5715                           ;ir.c: 274: case 0x03:
  5716                           ;ir.c: 275: ir_state.mKeyRcv = 1;
  5717  0A87  1459               	bsf	_ir_state,0	;volatile
  5718                           
  5719                           ;ir.c: 276: break;
  5720  0A88  2AB6               	goto	l7349
  5721  0A89                     l7347:	
  5722  0A89  0853               	movf	_keyValue,w	;volatile
  5723                           
  5724                           ; Switch size 1, requested type "space"
  5725                           ; Number of cases is 14, Range of values is 3 to 94
  5726                           ; switch strategies available:
  5727                           ; Name         Instructions Cycles
  5728                           ; simple_byte           43    22 (average)
  5729                           ; direct_byte          193     9 (fixed)
  5730                           ; jumptable            263     9 (fixed)
  5731                           ;	Chosen strategy is simple_byte
  5732  0A8A  3A03               	xorlw	3	; case 3
  5733  0A8B  1903               	skipnz
  5734  0A8C  2A87               	goto	l1068
  5735  0A8D  3A06               	xorlw	6	; case 5
  5736  0A8E  1903               	skipnz
  5737  0A8F  2A87               	goto	l1068
  5738  0A90  3A03               	xorlw	3	; case 6
  5739  0A91  1903               	skipnz
  5740  0A92  2A87               	goto	l1068
  5741  0A93  3A0D               	xorlw	13	; case 11
  5742  0A94  1903               	skipnz
  5743  0A95  2A87               	goto	l1068
  5744  0A96  3A06               	xorlw	6	; case 13
  5745  0A97  1903               	skipnz
  5746  0A98  2A87               	goto	l1058
  5747  0A99  3A03               	xorlw	3	; case 14
  5748  0A9A  1903               	skipnz
  5749  0A9B  2A87               	goto	l1058
  5750  0A9C  3A1F               	xorlw	31	; case 17
  5751  0A9D  1903               	skipnz
  5752  0A9E  2A87               	goto	l1068
  5753  0A9F  3A03               	xorlw	3	; case 18
  5754  0AA0  1903               	skipnz
  5755  0AA1  2A87               	goto	l1068
  5756  0AA2  3A06               	xorlw	6	; case 20
  5757  0AA3  1903               	skipnz
  5758  0AA4  2A87               	goto	l1068
  5759  0AA5  3A01               	xorlw	1	; case 21
  5760  0AA6  1903               	skipnz
  5761  0AA7  2A87               	goto	l1068
  5762  0AA8  3A0F               	xorlw	15	; case 26
  5763  0AA9  1903               	skipnz
  5764  0AAA  2A87               	goto	l1068
  5765  0AAB  3A05               	xorlw	5	; case 31
  5766  0AAC  1903               	skipnz
  5767  0AAD  2A87               	goto	l1058
  5768  0AAE  3A5D               	xorlw	93	; case 66
  5769  0AAF  1903               	skipnz
  5770  0AB0  2A87               	goto	l1068
  5771  0AB1  3A1C               	xorlw	28	; case 94
  5772  0AB2  1903               	skipnz
  5773  0AB3  2A87               	goto	l1068
  5774  0AB4  2AB6               	goto	l7349
  5775  0AB5                     l1053:	
  5776                           
  5777                           ;ir.c: 281: ir_state.mKeyRpt = 0;
  5778  0AB5  10D9               	bcf	_ir_state,1	;volatile
  5779  0AB6                     l7349:	
  5780                           
  5781                           ;ir.c: 282: }
  5782                           ;ir.c: 283: TMR2_EnableInterrupt();
  5783  0AB6  3196  2675  3188   	fcall	_TMR2_EnableInterrupt
  5784                           
  5785                           ;ir.c: 284: TMR1_StartTimer();
  5786  0AB9  2A78               	ljmp	l5025
  5787  0ABA                     __end_of_IR_ResetIfTMR1Overflow:	
  5788  0ABA                     __ptext37:	
  5789 ;; *************** function _TMR1_StopTimer *****************
  5790 ;; Defined at:
  5791 ;;		line 26 in file "driver/src/tmr1.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;		None
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;		None
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      void 
  5798 ;; Registers used:
  5799 ;;		None
  5800 ;; Tracked objects:
  5801 ;;		On entry : 1F/0
  5802 ;;		On exit  : 1F/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;Total ram usage:        0 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    7
  5812 ;; This function calls:
  5813 ;;		Nothing
  5814 ;; This function is called by:
  5815 ;;		_IR_ResetIfTMR1Overflow
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           
  5820                           ;psect for function _TMR1_StopTimer
  5821  0ABA                     _TMR1_StopTimer:	
  5822                           
  5823                           ;tmr1.c: 28: T1CONbits.TMR1ON = 0;
  5824                           
  5825                           ;incstack = 0
  5826                           ; Regs used in _TMR1_StopTimer: []
  5827  0ABA  101B               	bcf	27,0	;volatile
  5828  0ABB  0008               	return
  5829  0ABC                     __end_of_TMR1_StopTimer:	
  5830  0ABC                     __ptext34:	
  5831 ;; *************** function _IR_UpdateSetStatus *****************
  5832 ;; Defined at:
  5833 ;;		line 816 in file "user/src/ir.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;		None
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;		None
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  1    wreg      void 
  5840 ;; Registers used:
  5841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5842 ;; Tracked objects:
  5843 ;;		On entry : 1F/0
  5844 ;;		On exit  : 1E/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5851 ;;Total ram usage:        0 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:   11
  5854 ;; This function calls:
  5855 ;;		_IR_ExitTimeout
  5856 ;; This function is called by:
  5857 ;;		_main
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           
  5862                           ;psect for function _IR_UpdateSetStatus
  5863  0ABC                     _IR_UpdateSetStatus:	
  5864                           
  5865                           ;ir.c: 817: if (ir_state.mSet) {
  5866                           
  5867                           ;incstack = 0
  5868                           ; Regs used in _IR_UpdateSetStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5869  0ABC  0E59               	swapf	_ir_state,w	;volatile
  5870  0ABD  0C89               	rrf	9,f
  5871  0ABE  3907               	andlw	7
  5872  0ABF  1903               	skipnz
  5873  0AC0  0008               	return
  5874                           
  5875                           ;ir.c: 818: ir_state.mSetDelay++;
  5876  0AC1  0ADF               	incf	_ir_state+6,f	;volatile
  5877                           
  5878                           ;ir.c: 819: if (ir_state.mSetDelay > 10) {
  5879  0AC2  300B               	movlw	11
  5880  0AC3  025F               	subwf	_ir_state+6,w	;volatile
  5881  0AC4  1C03               	skipc
  5882  0AC5  0008               	return
  5883                           
  5884                           ;ir.c: 820: IR_ExitTimeout();
  5885  0AC6  3191  293F         	ljmp	l6749
  5886  0AC8                     __end_of_IR_UpdateSetStatus:	
  5887  0AC8                     __ptext29:	
  5888 ;; *************** function _Interrupt_Initialize *****************
  5889 ;; Defined at:
  5890 ;;		line 160 in file "user/src/main.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;		None
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;		None
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0, pclath, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 1F/1
  5901 ;;		On exit  : 1F/1
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5908 ;;Total ram usage:        0 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    8
  5911 ;; This function calls:
  5912 ;;		_TMR0_SetInterruptHandler
  5913 ;;		_TMR1_Gate_SetInterruptHandler
  5914 ;;		_TMR2_SetInterruptHandler
  5915 ;;		_TMR4_SetInterruptHandler
  5916 ;; This function is called by:
  5917 ;;		_main
  5918 ;; This function uses a non-reentrant model
  5919 ;;
  5920                           
  5921                           
  5922                           ;psect for function _Interrupt_Initialize
  5923  0AC8                     _Interrupt_Initialize:	
  5924                           
  5925                           ;main.c: 161: TMR1_Gate_SetInterruptHandler(IR_Decode);
  5926                           
  5927                           ;incstack = 0
  5928                           ; Regs used in _Interrupt_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5929  0AC8  308E               	movlw	low _IR_Decode
  5930  0AC9  0020               	movlb	0	; select bank0
  5931  0ACA  00AD               	movwf	TMR1_Gate_SetInterruptHandler@handler
  5932  0ACB  3005               	movlw	high _IR_Decode
  5933  0ACC  00AE               	movwf	TMR1_Gate_SetInterruptHandler@handler+1
  5934  0ACD  22EB  3188         	fcall	_TMR1_Gate_SetInterruptHandler
  5935                           
  5936                           ;main.c: 162: TMR0_SetInterruptHandler(RTC_OnSecond);
  5937  0ACF  30EC               	movlw	low _RTC_OnSecond
  5938  0AD0  0020               	movlb	0	; select bank0
  5939  0AD1  00AD               	movwf	TMR0_SetInterruptHandler@handler
  5940  0AD2  3010               	movlw	high _RTC_OnSecond
  5941  0AD3  00AE               	movwf	TMR0_SetInterruptHandler@handler+1
  5942  0AD4  22E3  3188         	fcall	_TMR0_SetInterruptHandler
  5943                           
  5944                           ;main.c: 163: TMR2_SetInterruptHandler(Led_Run);
  5945  0AD6  3030               	movlw	low _Led_Run
  5946  0AD7  0020               	movlb	0	; select bank0
  5947  0AD8  00AD               	movwf	TMR2_SetInterruptHandler@handler
  5948  0AD9  3000               	movlw	high _Led_Run
  5949  0ADA  00AE               	movwf	TMR2_SetInterruptHandler@handler+1
  5950  0ADB  2707  3188         	fcall	_TMR2_SetInterruptHandler
  5951                           
  5952                           ;main.c: 164: TMR4_SetInterruptHandler(Led_Notice);
  5953  0ADD  30B2               	movlw	low _Led_Notice
  5954  0ADE  0020               	movlb	0	; select bank0
  5955  0ADF  00AD               	movwf	TMR4_SetInterruptHandler@handler
  5956  0AE0  3007               	movlw	high _Led_Notice
  5957  0AE1  00AE               	movwf	TMR4_SetInterruptHandler@handler+1
  5958  0AE2  2F0F               	ljmp	l5049
  5959  0AE3                     __end_of_Interrupt_Initialize:	
  5960  0AE3                     __ptext33:	
  5961 ;; *************** function _TMR0_SetInterruptHandler *****************
  5962 ;; Defined at:
  5963 ;;		line 37 in file "driver/src/tmr0.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;  handler         2   13[BANK0 ] PTR FTN()void 
  5966 ;;		 -> RTC_OnSecond(1), 
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;		None
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  1    wreg      void 
  5971 ;; Registers used:
  5972 ;;		wreg
  5973 ;; Tracked objects:
  5974 ;;		On entry : 1F/0
  5975 ;;		On exit  : 1F/1
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5978 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;Total ram usage:        2 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:    7
  5985 ;; This function calls:
  5986 ;;		Nothing
  5987 ;; This function is called by:
  5988 ;;		_Interrupt_Initialize
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           
  5993                           ;psect for function _TMR0_SetInterruptHandler
  5994  0AE3                     _TMR0_SetInterruptHandler:	
  5995                           
  5996                           ;tmr0.c: 39: tmr0_isr_handler = handler;
  5997                           
  5998                           ;incstack = 0
  5999                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  6000  0AE3  082E               	movf	TMR0_SetInterruptHandler@handler+1,w
  6001  0AE4  0021               	movlb	1	; select bank1
  6002  0AE5  00EB               	movwf	(_tmr0_isr_handler+1)^(0+128)
  6003  0AE6  0020               	movlb	0	; select bank0
  6004  0AE7  082D               	movf	TMR0_SetInterruptHandler@handler,w
  6005  0AE8  0021               	movlb	1	; select bank1
  6006  0AE9  00EA               	movwf	_tmr0_isr_handler^(0+128)
  6007  0AEA  0008               	return
  6008  0AEB                     __end_of_TMR0_SetInterruptHandler:	
  6009  0AEB                     __ptext32:	
  6010 ;; *************** function _TMR1_Gate_SetInterruptHandler *****************
  6011 ;; Defined at:
  6012 ;;		line 54 in file "driver/src/tmr1.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  handler         2   13[BANK0 ] PTR FTN()void 
  6015 ;;		 -> IR_Decode(1), 
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg
  6022 ;; Tracked objects:
  6023 ;;		On entry : 1F/0
  6024 ;;		On exit  : 1F/1
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6027 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;Total ram usage:        2 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    7
  6034 ;; This function calls:
  6035 ;;		Nothing
  6036 ;; This function is called by:
  6037 ;;		_Interrupt_Initialize
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           
  6042                           ;psect for function _TMR1_Gate_SetInterruptHandler
  6043  0AEB                     _TMR1_Gate_SetInterruptHandler:	
  6044                           
  6045                           ;tmr1.c: 56: tmr1_gate_isr_handler = handler;
  6046                           
  6047                           ;incstack = 0
  6048                           ; Regs used in _TMR1_Gate_SetInterruptHandler: [wreg]
  6049  0AEB  082E               	movf	TMR1_Gate_SetInterruptHandler@handler+1,w
  6050  0AEC  0021               	movlb	1	; select bank1
  6051  0AED  00E9               	movwf	(_tmr1_gate_isr_handler+1)^(0+128)
  6052  0AEE  0020               	movlb	0	; select bank0
  6053  0AEF  082D               	movf	TMR1_Gate_SetInterruptHandler@handler,w
  6054  0AF0  0021               	movlb	1	; select bank1
  6055  0AF1  00E8               	movwf	_tmr1_gate_isr_handler^(0+128)
  6056  0AF2  0008               	return
  6057  0AF3                     __end_of_TMR1_Gate_SetInterruptHandler:	
  6058  0AF3                     __ptext20:	
  6059 ;; *************** function _Led_SaveParaIfChanged *****************
  6060 ;; Defined at:
  6061 ;;		line 176 in file "user/src/led.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;		None
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;		None
  6066 ;; Return value:  Size  Location     Type
  6067 ;;                  1    wreg      void 
  6068 ;; Registers used:
  6069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6070 ;; Tracked objects:
  6071 ;;		On entry : 1F/0
  6072 ;;		On exit  : 1E/0
  6073 ;;		Unchanged: 0/0
  6074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6079 ;;Total ram usage:        0 bytes
  6080 ;; Hardware stack levels used:    1
  6081 ;; Hardware stack levels required when called:    9
  6082 ;; This function calls:
  6083 ;;		_DATAEE_WriteBuffer
  6084 ;; This function is called by:
  6085 ;;		_main
  6086 ;; This function uses a non-reentrant model
  6087 ;;
  6088                           
  6089                           
  6090                           ;psect for function _Led_SaveParaIfChanged
  6091  0AF3                     _Led_SaveParaIfChanged:	
  6092                           
  6093                           ;led.c: 177: if (gLedRunPara.mParaChanged) {
  6094                           
  6095                           ;incstack = 0
  6096                           ; Regs used in _Led_SaveParaIfChanged: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6097  0AF3  0021               	movlb	1	; select bank1
  6098  0AF4  1C5E               	btfss	(_gLedRunPara^(0+128)+20),0	;volatile
  6099  0AF5  0008               	return
  6100                           
  6101                           ;led.c: 178: gLedRunPara.mParaChanged = 0;
  6102  0AF6  105E               	bcf	(_gLedRunPara^(0+128)+20),0	;volatile
  6103                           
  6104                           ;led.c: 179: DATAEE_WriteBuffer(0x7010, (uint8_t *) & gLedPara, sizeof ( gLedPara));
  6105  0AF7  3010               	movlw	16
  6106  0AF8  0020               	movlb	0	; select bank0
  6107  0AF9  00B1               	movwf	DATAEE_WriteBuffer@addr
  6108  0AFA  3070               	movlw	112
  6109  0AFB  00B2               	movwf	DATAEE_WriteBuffer@addr+1
  6110  0AFC  307B               	movlw	123
  6111  0AFD  00B3               	movwf	DATAEE_WriteBuffer@buf
  6112  0AFE  3023               	movlw	35
  6113  0AFF  00B4               	movwf	DATAEE_WriteBuffer@buf+1
  6114  0B00  3075               	movlw	117
  6115  0B01  00B5               	movwf	DATAEE_WriteBuffer@len
  6116  0B02  2FAA               	ljmp	l4929
  6117  0B03                     __end_of_Led_SaveParaIfChanged:	
  6118  0B03                     __ptext19:	
  6119 ;; *************** function _RTC_HourReady *****************
  6120 ;; Defined at:
  6121 ;;		line 61 in file "user/src/rtc.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;		None
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  1    wreg      unsigned char 
  6128 ;; Registers used:
  6129 ;;		wreg
  6130 ;; Tracked objects:
  6131 ;;		On entry : 1E/0
  6132 ;;		On exit  : 1F/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;Total ram usage:        0 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    7
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_main
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function _RTC_HourReady
  6151  0B03                     _RTC_HourReady:	
  6152                           
  6153                           ;rtc.c: 63: if( rtc_status.mHour )
  6154                           
  6155                           ;incstack = 0
  6156                           ; Regs used in _RTC_HourReady: [wreg]
  6157  0B03  0020               	movlb	0	; select bank0
  6158  0B04  1D54               	btfss	_rtc_status,2	;volatile
  6159  0B05  3400               	retlw	0
  6160                           
  6161                           ;rtc.c: 64: {
  6162                           ;rtc.c: 65: rtc_status.mHour = 0;
  6163  0B06  1154               	bcf	_rtc_status,2	;volatile
  6164                           
  6165                           ;rtc.c: 66: return 1;
  6166  0B07  3401               	retlw	1
  6167  0B08                     __end_of_RTC_HourReady:	
  6168                           ;rtc.c: 67: }
  6169                           ;rtc.c: 68: return 0;
  6170                           
  6171  0B08                     __ptext18:	
  6172 ;; *************** function _RTC_MinuteReady *****************
  6173 ;; Defined at:
  6174 ;;		line 51 in file "user/src/rtc.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;		None
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;		None
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      unsigned char 
  6181 ;; Registers used:
  6182 ;;		wreg
  6183 ;; Tracked objects:
  6184 ;;		On entry : 1F/0
  6185 ;;		On exit  : 1F/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;Total ram usage:        0 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    7
  6195 ;; This function calls:
  6196 ;;		Nothing
  6197 ;; This function is called by:
  6198 ;;		_main
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           
  6203                           ;psect for function _RTC_MinuteReady
  6204  0B08                     _RTC_MinuteReady:	
  6205                           
  6206                           ;rtc.c: 53: if( rtc_status.mMin )
  6207                           
  6208                           ;incstack = 0
  6209                           ; Regs used in _RTC_MinuteReady: [wreg]
  6210  0B08  1CD4               	btfss	_rtc_status,1	;volatile
  6211  0B09  3400               	retlw	0
  6212                           
  6213                           ;rtc.c: 54: {
  6214                           ;rtc.c: 55: rtc_status.mMin = 0;
  6215  0B0A  10D4               	bcf	_rtc_status,1	;volatile
  6216                           
  6217                           ;rtc.c: 56: return 1;
  6218  0B0B  3401               	retlw	1
  6219  0B0C                     __end_of_RTC_MinuteReady:	
  6220                           ;rtc.c: 57: }
  6221                           ;rtc.c: 58: return 0;
  6222                           
  6223  0B0C                     __ptext17:	
  6224 ;; *************** function _RTC_SecondReady *****************
  6225 ;; Defined at:
  6226 ;;		line 41 in file "user/src/rtc.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;		None
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;		None
  6231 ;; Return value:  Size  Location     Type
  6232 ;;                  1    wreg      unsigned char 
  6233 ;; Registers used:
  6234 ;;		wreg
  6235 ;; Tracked objects:
  6236 ;;		On entry : 1E/0
  6237 ;;		On exit  : 1F/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;Total ram usage:        0 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; Hardware stack levels required when called:    7
  6247 ;; This function calls:
  6248 ;;		Nothing
  6249 ;; This function is called by:
  6250 ;;		_main
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           
  6255                           ;psect for function _RTC_SecondReady
  6256  0B0C                     _RTC_SecondReady:	
  6257                           
  6258                           ;rtc.c: 43: if( rtc_status.mSec )
  6259                           
  6260                           ;incstack = 0
  6261                           ; Regs used in _RTC_SecondReady: [wreg]
  6262  0B0C  0020               	movlb	0	; select bank0
  6263  0B0D  1C54               	btfss	_rtc_status,0	;volatile
  6264  0B0E  3400               	retlw	0
  6265                           
  6266                           ;rtc.c: 44: {
  6267                           ;rtc.c: 45: rtc_status.mSec = 0;
  6268  0B0F  1054               	bcf	_rtc_status,0	;volatile
  6269                           
  6270                           ;rtc.c: 46: return 1;
  6271  0B10  3401               	retlw	1
  6272  0B11                     __end_of_RTC_SecondReady:	
  6273                           ;rtc.c: 47: }
  6274                           ;rtc.c: 48: return 0;
  6275                           
  6276  0B11                     __ptext3:	
  6277 ;; *************** function _SYSTEM_Initialize *****************
  6278 ;; Defined at:
  6279 ;;		line 144 in file "user/src/main.c"
  6280 ;; Parameters:    Size  Location     Type
  6281 ;;		None
  6282 ;; Auto vars:     Size  Location     Type
  6283 ;;		None
  6284 ;; Return value:  Size  Location     Type
  6285 ;;                  1    wreg      void 
  6286 ;; Registers used:
  6287 ;;		wreg, status,2, status,0, pclath, cstack
  6288 ;; Tracked objects:
  6289 ;;		On entry : B1F/0
  6290 ;;		On exit  : 1F/1
  6291 ;;		Unchanged: 0/0
  6292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6297 ;;Total ram usage:        0 bytes
  6298 ;; Hardware stack levels used:    1
  6299 ;; Hardware stack levels required when called:    8
  6300 ;; This function calls:
  6301 ;;		_ADC_Initialize_Default
  6302 ;;		_EUSART_Initialize_Default
  6303 ;;		_OSCILLATOR_Initialize
  6304 ;;		_PIN_Initialize
  6305 ;;		_PWM1_Initialize
  6306 ;;		_PWM2_Initialize
  6307 ;;		_PWM3_Initialize
  6308 ;;		_PWM4_Initialize
  6309 ;;		_PWM5_Initialize
  6310 ;;		_TMR0_Initialize_Default
  6311 ;;		_TMR1_Initialize_Default
  6312 ;;		_TMR2_Initialize_Default
  6313 ;;		_TMR4_Initialize_Default
  6314 ;; This function is called by:
  6315 ;;		_main
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           
  6320                           ;psect for function _SYSTEM_Initialize
  6321  0B11                     _SYSTEM_Initialize:	
  6322                           
  6323                           ;main.c: 145: PIN_Initialize();
  6324                           
  6325                           ;incstack = 0
  6326                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6327  0B11  255F  3188         	fcall	_PIN_Initialize
  6328                           
  6329                           ;main.c: 146: OSCILLATOR_Initialize();
  6330  0B13  232A  3188         	fcall	_OSCILLATOR_Initialize
  6331                           
  6332                           ;main.c: 147: TMR0_Initialize_Default();
  6333  0B15  26A1  3188         	fcall	_TMR0_Initialize_Default
  6334                           
  6335                           ;main.c: 148: TMR1_Initialize_Default();
  6336  0B17  26AC  3188         	fcall	_TMR1_Initialize_Default
  6337                           
  6338                           ;main.c: 149: TMR2_Initialize_Default();
  6339  0B19  26BB  3188         	fcall	_TMR2_Initialize_Default
  6340                           
  6341                           ;main.c: 150: TMR4_Initialize_Default();
  6342  0B1B  26C5  3188         	fcall	_TMR4_Initialize_Default
  6343                           
  6344                           ;main.c: 151: PWM1_Initialize();
  6345  0B1D  2334  3188         	fcall	_PWM1_Initialize
  6346                           
  6347                           ;main.c: 152: PWM2_Initialize();
  6348  0B1F  233A  3188         	fcall	_PWM2_Initialize
  6349                           
  6350                           ;main.c: 153: PWM3_Initialize();
  6351  0B21  25AC  3188         	fcall	_PWM3_Initialize
  6352                           
  6353                           ;main.c: 154: PWM4_Initialize();
  6354  0B23  2690  3188         	fcall	_PWM4_Initialize
  6355                           
  6356                           ;main.c: 155: PWM5_Initialize();
  6357  0B25  269B  3188         	fcall	_PWM5_Initialize
  6358                           
  6359                           ;main.c: 156: EUSART_Initialize_Default();
  6360  0B27  27EB  3188         	fcall	_EUSART_Initialize_Default
  6361                           
  6362                           ;main.c: 157: ADC_Initialize_Default();
  6363  0B29  2FE4               	ljmp	l4907
  6364  0B2A                     __end_of_SYSTEM_Initialize:	
  6365  0B2A                     __ptext14:	
  6366 ;; *************** function _OSCILLATOR_Initialize *****************
  6367 ;; Defined at:
  6368 ;;		line 89 in file "user/src/main.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;		None
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;		None
  6373 ;; Return value:  Size  Location     Type
  6374 ;;                  1    wreg      void 
  6375 ;; Registers used:
  6376 ;;		wreg, status,2
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 1F/12
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6386 ;;Total ram usage:        0 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    7
  6389 ;; This function calls:
  6390 ;;		Nothing
  6391 ;; This function is called by:
  6392 ;;		_SYSTEM_Initialize
  6393 ;; This function uses a non-reentrant model
  6394 ;;
  6395                           
  6396                           
  6397                           ;psect for function _OSCILLATOR_Initialize
  6398  0B2A                     _OSCILLATOR_Initialize:	
  6399                           
  6400                           ;main.c: 91: OSCCON1 = 0x60;
  6401                           
  6402                           ;incstack = 0
  6403                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6404  0B2A  3060               	movlw	96
  6405  0B2B  0032               	movlb	18	; select bank18
  6406  0B2C  0099               	movwf	25	;volatile
  6407                           
  6408                           ;main.c: 93: OSCCON3 = 0x00;
  6409  0B2D  019B               	clrf	27	;volatile
  6410                           
  6411                           ;main.c: 95: OSCEN = 0x48;
  6412  0B2E  3048               	movlw	72
  6413  0B2F  009D               	movwf	29	;volatile
  6414                           
  6415                           ;main.c: 97: OSCFRQ = 0x06;
  6416  0B30  3006               	movlw	6
  6417  0B31  009F               	movwf	31	;volatile
  6418                           
  6419                           ;main.c: 99: OSCTUNE = 0x00;
  6420  0B32  019E               	clrf	30	;volatile
  6421  0B33  0008               	return
  6422  0B34                     __end_of_OSCILLATOR_Initialize:	
  6423  0B34                     __ptext12:	
  6424 ;; *************** function _PWM1_Initialize *****************
  6425 ;; Defined at:
  6426 ;;		line 6 in file "driver/src/pwm.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;		None
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;		None
  6431 ;; Return value:  Size  Location     Type
  6432 ;;                  1    wreg      void 
  6433 ;; Registers used:
  6434 ;;		wreg, status,2, status,0
  6435 ;; Tracked objects:
  6436 ;;		On entry : 1F/1
  6437 ;;		On exit  : 1F/5
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;Total ram usage:        0 bytes
  6445 ;; Hardware stack levels used:    1
  6446 ;; Hardware stack levels required when called:    7
  6447 ;; This function calls:
  6448 ;;		Nothing
  6449 ;; This function is called by:
  6450 ;;		_SYSTEM_Initialize
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           
  6455                           ;psect for function _PWM1_Initialize
  6456  0B34                     _PWM1_Initialize:	
  6457                           
  6458                           ;pwm.c: 8: CCP1CON = 0x8F;
  6459                           
  6460                           ;incstack = 0
  6461                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
  6462  0B34  308F               	movlw	143
  6463  0B35  0025               	movlb	5	; select bank5
  6464  0B36  0093               	movwf	19	;volatile
  6465                           
  6466                           ;pwm.c: 9: CCPR1 = 0;
  6467  0B37  0191               	clrf	17	;volatile
  6468  0B38  0192               	clrf	18	;volatile
  6469                           
  6470                           ;pwm.c: 10: CCPTMRSbits.C1TSEL = 0x1;
  6471  0B39  2E7B               	ljmp	PL144	;call to abstracted procedure
  6472  0B3A                     __end_of_PWM1_Initialize:	
  6473  0B3A                     __ptext11:	
  6474 ;; *************** function _PWM2_Initialize *****************
  6475 ;; Defined at:
  6476 ;;		line 18 in file "driver/src/pwm.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;		None
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;		None
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  1    wreg      void 
  6483 ;; Registers used:
  6484 ;;		wreg, status,2, status,0
  6485 ;; Tracked objects:
  6486 ;;		On entry : 1F/5
  6487 ;;		On exit  : 1F/5
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;Total ram usage:        0 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    7
  6497 ;; This function calls:
  6498 ;;		Nothing
  6499 ;; This function is called by:
  6500 ;;		_SYSTEM_Initialize
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           
  6505                           ;psect for function _PWM2_Initialize
  6506  0B3A                     _PWM2_Initialize:	
  6507                           
  6508                           ;pwm.c: 20: CCP2CON = 0x8F;
  6509                           
  6510                           ;incstack = 0
  6511                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
  6512  0B3A  308F               	movlw	143
  6513  0B3B  0097               	movwf	23	;volatile
  6514                           
  6515                           ;pwm.c: 21: CCPR2 = 0;
  6516  0B3C  0195               	clrf	21	;volatile
  6517  0B3D  0196               	clrf	22	;volatile
  6518                           
  6519                           ;pwm.c: 22: CCPTMRSbits.C2TSEL = 0x1;
  6520  0B3E  081F               	movf	31,w	;volatile
  6521  0B3F  39F3               	andlw	-13
  6522  0B40  3804               	iorlw	4
  6523  0B41  009F               	movwf	31	;volatile
  6524  0B42  0008               	return
  6525  0B43                     __end_of_PWM2_Initialize:	
  6526  0B43                     __ptext23:	
  6527 ;; *************** function _Led_InitPara *****************
  6528 ;; Defined at:
  6529 ;;		line 39 in file "user/src/led.c"
  6530 ;; Parameters:    Size  Location     Type
  6531 ;;		None
  6532 ;; Auto vars:     Size  Location     Type
  6533 ;;  j               1   30[BANK0 ] unsigned char 
  6534 ;;  i               1   31[BANK0 ] unsigned char 
  6535 ;; Return value:  Size  Location     Type
  6536 ;;                  1    wreg      void 
  6537 ;; Registers used:
  6538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6539 ;; Tracked objects:
  6540 ;;		On entry : 1F/1
  6541 ;;		On exit  : 1F/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6545 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;Total ram usage:       10 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    9
  6551 ;; This function calls:
  6552 ;;		_DATAEE_ReadBuffer
  6553 ;;		_Led_FirstPowerUp
  6554 ;;		___wmul
  6555 ;; This function is called by:
  6556 ;;		_main
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           
  6561                           ;psect for function _Led_InitPara
  6562  0B43                     _Led_InitPara:	
  6563                           
  6564                           ;led.c: 40: DATAEE_ReadBuffer(0x7010, (uint8_t *) & gLedPara, sizeof ( gLedPara));
  6565                           
  6566                           ;incstack = 0
  6567                           ; Regs used in _Led_InitPara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6568  0B43  3010               	movlw	16
  6569  0B44  0020               	movlb	0	; select bank0
  6570  0B45  00AF               	movwf	DATAEE_ReadBuffer@addr
  6571  0B46  3070               	movlw	112
  6572  0B47  00B0               	movwf	DATAEE_ReadBuffer@addr+1
  6573  0B48  307B               	movlw	123
  6574  0B49  00B1               	movwf	DATAEE_ReadBuffer@buf
  6575  0B4A  3023               	movlw	35
  6576  0B4B  00B2               	movwf	DATAEE_ReadBuffer@buf+1
  6577  0B4C  3075               	movlw	117
  6578  0B4D  00B3               	movwf	DATAEE_ReadBuffer@len
  6579  0B4E  2536  3188         	fcall	_DATAEE_ReadBuffer
  6580                           
  6581                           ;led.c: 41: for (uint8_t i = 0; i < 5; i++) {
  6582  0B50  01BF               	clrf	Led_InitPara@i
  6583  0B51                     l7259:	
  6584                           
  6585                           ;led.c: 42: if (gLedPara.mBright[i] > 1000) {
  6586  0B51  083F               	movf	Led_InitPara@i,w
  6587  0B52  00B6               	movwf	??_Led_InitPara
  6588  0B53  307E               	movlw	126
  6589  0B54  25BC  3188         	fcall	PL2	;call to abstracted procedure
  6590  0B56  1903               	skipnz
  6591  0B57  023A               	subwf	??_Led_InitPara+4,w
  6592  0B58  1C03               	skipc
  6593  0B59  2B5F               	goto	l615
  6594                           
  6595                           ;led.c: 43: gLedPara.mBright[i] = 1000;
  6596  0B5A  2603  3188         	fcall	PL42	;call to abstracted procedure
  6597  0B5C  307E               	movlw	126
  6598  0B5D  25CF  3188         	fcall	PL6	;call to abstracted procedure
  6599  0B5F                     l615:	
  6600                           
  6601                           ;led.c: 44: }
  6602                           ;led.c: 45: if (gLedPara.mDayBright[i] > 1000) {
  6603  0B5F  083F               	movf	Led_InitPara@i,w
  6604  0B60  00B6               	movwf	??_Led_InitPara
  6605  0B61  30DA               	movlw	218
  6606  0B62  25BC  3188         	fcall	PL2	;call to abstracted procedure
  6607  0B64  1903               	skipnz
  6608  0B65  023A               	subwf	??_Led_InitPara+4,w
  6609  0B66  1C03               	skipc
  6610  0B67  2B6D               	goto	l616
  6611                           
  6612                           ;led.c: 46: gLedPara.mDayBright[i] = 1000;
  6613  0B68  2603  3188         	fcall	PL42	;call to abstracted procedure
  6614  0B6A  30DA               	movlw	218
  6615  0B6B  25CF  3188         	fcall	PL6	;call to abstracted procedure
  6616  0B6D                     l616:	
  6617                           
  6618                           ;led.c: 47: }
  6619                           ;led.c: 48: if (gLedPara.mNightBright[i] > 1000) {
  6620  0B6D  083F               	movf	Led_InitPara@i,w
  6621  0B6E  00B6               	movwf	??_Led_InitPara
  6622  0B6F  30E6               	movlw	230
  6623  0B70  25BC  3188         	fcall	PL2	;call to abstracted procedure
  6624  0B72  1903               	skipnz
  6625  0B73  023A               	subwf	??_Led_InitPara+4,w
  6626  0B74  1C03               	skipc
  6627  0B75  2B7B               	goto	l617
  6628                           
  6629                           ;led.c: 49: gLedPara.mNightBright[i] = 1000;
  6630  0B76  2603  3188         	fcall	PL42	;call to abstracted procedure
  6631  0B78  30E6               	movlw	230
  6632  0B79  25CF  3188         	fcall	PL6	;call to abstracted procedure
  6633  0B7B                     l617:	
  6634                           
  6635                           ;led.c: 50: }
  6636                           ;led.c: 51: if (gLedPara.mStaticDayBright[i] > 1000) {
  6637  0B7B  083F               	movf	Led_InitPara@i,w
  6638  0B7C  00B6               	movwf	??_Led_InitPara
  6639  0B7D  30B0               	movlw	176
  6640  0B7E  25BC  3188         	fcall	PL2	;call to abstracted procedure
  6641  0B80  1903               	skipnz
  6642  0B81  023A               	subwf	??_Led_InitPara+4,w
  6643  0B82  1C03               	skipc
  6644  0B83  2B89               	goto	l618
  6645                           
  6646                           ;led.c: 52: gLedPara.mStaticDayBright[i] = 1000;
  6647  0B84  2603  3188         	fcall	PL42	;call to abstracted procedure
  6648  0B86  30B0               	movlw	176
  6649  0B87  25CF  3188         	fcall	PL6	;call to abstracted procedure
  6650  0B89                     l618:	
  6651                           
  6652                           ;led.c: 53: }
  6653                           ;led.c: 54: if (gLedPara.mStaticNightBright[i] > 1000) {
  6654  0B89  083F               	movf	Led_InitPara@i,w
  6655  0B8A  00B6               	movwf	??_Led_InitPara
  6656  0B8B  30BA               	movlw	186
  6657  0B8C  25BC  3188         	fcall	PL2	;call to abstracted procedure
  6658  0B8E  1903               	skipnz
  6659  0B8F  023A               	subwf	??_Led_InitPara+4,w
  6660  0B90  1C03               	skipc
  6661  0B91  2B97               	goto	l619
  6662                           
  6663                           ;led.c: 55: gLedPara.mStaticNightBright[i] = 1000;
  6664  0B92  2603  3188         	fcall	PL42	;call to abstracted procedure
  6665  0B94  30BA               	movlw	186
  6666  0B95  25CF  3188         	fcall	PL6	;call to abstracted procedure
  6667  0B97                     l619:	
  6668                           
  6669                           ;led.c: 56: }
  6670                           ;led.c: 57: if (gLedPara.mStaticFishBright[i] > 1000) {
  6671  0B97  083F               	movf	Led_InitPara@i,w
  6672  0B98  00B6               	movwf	??_Led_InitPara
  6673  0B99  30C4               	movlw	196
  6674  0B9A  25BC  3188         	fcall	PL2	;call to abstracted procedure
  6675  0B9C  1903               	skipnz
  6676  0B9D  023A               	subwf	??_Led_InitPara+4,w
  6677  0B9E  1C03               	skipc
  6678  0B9F  2BA5               	goto	l620
  6679                           
  6680                           ;led.c: 58: gLedPara.mStaticFishBright[i] = 1000;
  6681  0BA0  2603  3188         	fcall	PL42	;call to abstracted procedure
  6682  0BA2  30C4               	movlw	196
  6683  0BA3  25CF  3188         	fcall	PL6	;call to abstracted procedure
  6684  0BA5                     l620:	
  6685                           
  6686                           ;led.c: 59: }
  6687                           ;led.c: 60: if (gLedPara.mStaticPlantBright[i] > 1000) {
  6688  0BA5  083F               	movf	Led_InitPara@i,w
  6689  0BA6  00B6               	movwf	??_Led_InitPara
  6690  0BA7  30CE               	movlw	206
  6691  0BA8  25BC  3188         	fcall	PL2	;call to abstracted procedure
  6692  0BAA  1903               	skipnz
  6693  0BAB  023A               	subwf	??_Led_InitPara+4,w
  6694  0BAC  1C03               	skipc
  6695  0BAD  2BB2               	goto	l7275
  6696                           
  6697                           ;led.c: 61: gLedPara.mStaticPlantBright[i] = 1000;
  6698  0BAE  2603  3188         	fcall	PL42	;call to abstracted procedure
  6699  0BB0  30CE               	movlw	206
  6700  0BB1  25CF               	fcall	PL6	;call to abstracted procedure
  6701  0BB2                     l7275:	
  6702                           
  6703                           ;led.c: 62: }
  6704                           ;led.c: 63: for (uint8_t j = 0; j < 4; j++) {
  6705  0BB2  01BE               	clrf	Led_InitPara@j
  6706  0BB3                     l7281:	
  6707                           
  6708                           ;led.c: 64: if (gLedPara.mCustom[j][i] > 1000) {
  6709  0BB3  083F               	movf	Led_InitPara@i,w
  6710  0BB4  00B6               	movwf	??_Led_InitPara
  6711  0BB5  01B7               	clrf	??_Led_InitPara+1
  6712  0BB6  35B6               	lslf	??_Led_InitPara,f
  6713  0BB7  0DB7               	rlf	??_Led_InitPara+1,f
  6714  0BB8  083E               	movf	Led_InitPara@j,w
  6715  0BB9  3197  273F  3188   	fcall	PL78	;call to abstracted procedure
  6716  0BBC  3195  2560  3188   	fcall	___wmul
  6717  0BBF  3088               	movlw	136
  6718  0BC0  00B8               	movwf	??_Led_InitPara+2
  6719  0BC1  3023               	movlw	35
  6720  0BC2  00B9               	movwf	??_Led_InitPara+3
  6721  0BC3  082D               	movf	?___wmul,w
  6722  0BC4  0738               	addwf	??_Led_InitPara+2,w
  6723  0BC5  00BA               	movwf	??_Led_InitPara+4
  6724  0BC6  082E               	movf	?___wmul+1,w
  6725  0BC7  3D39               	addwfc	??_Led_InitPara+3,w
  6726  0BC8  00BB               	movwf	??_Led_InitPara+5
  6727  0BC9  0836               	movf	??_Led_InitPara,w
  6728  0BCA  073A               	addwf	??_Led_InitPara+4,w
  6729  0BCB  0086               	movwf	6
  6730  0BCC  0837               	movf	??_Led_InitPara+1,w
  6731  0BCD  3D3B               	addwfc	??_Led_InitPara+5,w
  6732  0BCE  0087               	movwf	7
  6733  0BCF  3F40               	moviw [0]fsr1
  6734  0BD0  00BC               	movwf	??_Led_InitPara+6
  6735  0BD1  3F41               	moviw [1]fsr1
  6736  0BD2  00BD               	movwf	??_Led_InitPara+7
  6737  0BD3  3003               	movlw	3
  6738  0BD4  023D               	subwf	??_Led_InitPara+7,w
  6739  0BD5  30E9               	movlw	233
  6740  0BD6  1903               	skipnz
  6741  0BD7  023C               	subwf	??_Led_InitPara+6,w
  6742  0BD8  1C03               	skipc
  6743  0BD9  2BF9               	goto	l7285
  6744                           
  6745                           ;led.c: 65: gLedPara.mCustom[j][i] = 1000;
  6746  0BDA  2603               	fcall	PL42	;call to abstracted procedure
  6747  0BDB  01B9               	clrf	??_Led_InitPara+3
  6748  0BDC  35B8               	lslf	??_Led_InitPara+2,f
  6749  0BDD  0DB9               	rlf	??_Led_InitPara+3,f
  6750  0BDE  083E               	movf	Led_InitPara@j,w
  6751  0BDF  3197  273F  3188   	fcall	PL78	;call to abstracted procedure
  6752  0BE2  3195  2560  3188   	fcall	___wmul
  6753  0BE5  3088               	movlw	136
  6754  0BE6  00BA               	movwf	??_Led_InitPara+4
  6755  0BE7  3023               	movlw	35
  6756  0BE8  00BB               	movwf	??_Led_InitPara+5
  6757  0BE9  082D               	movf	?___wmul,w
  6758  0BEA  073A               	addwf	??_Led_InitPara+4,w
  6759  0BEB  00BC               	movwf	??_Led_InitPara+6
  6760  0BEC  082E               	movf	?___wmul+1,w
  6761  0BED  3D3B               	addwfc	??_Led_InitPara+5,w
  6762  0BEE  00BD               	movwf	??_Led_InitPara+7
  6763  0BEF  0838               	movf	??_Led_InitPara+2,w
  6764  0BF0  073C               	addwf	??_Led_InitPara+6,w
  6765  0BF1  0086               	movwf	6
  6766  0BF2  0839               	movf	??_Led_InitPara+3,w
  6767  0BF3  3D3D               	addwfc	??_Led_InitPara+7,w
  6768  0BF4  0087               	movwf	7
  6769  0BF5  0836               	movf	??_Led_InitPara,w
  6770  0BF6  3FC0               	movwi [0]fsr1
  6771  0BF7  0837               	movf	??_Led_InitPara+1,w
  6772  0BF8  3FC1               	movwi [1]fsr1
  6773  0BF9                     l7285:	
  6774  0BF9  3004               	movlw	4
  6775  0BFA  0ABE               	incf	Led_InitPara@j,f
  6776  0BFB  023E               	subwf	Led_InitPara@j,w
  6777  0BFC  1C03               	skipc
  6778  0BFD  2BB3               	goto	l7281
  6779                           
  6780                           ;led.c: 66: }
  6781                           ;led.c: 67: }
  6782                           ;led.c: 68: if (gLedPara.mMsc > 8) {
  6783  0BFE  307B               	movlw	123
  6784  0BFF  0086               	movwf	6
  6785  0C00  3023               	movlw	35
  6786  0C01  0087               	movwf	7
  6787  0C02  0C01               	rrf	1,w
  6788  0C03  00B6               	movwf	??_Led_InitPara
  6789  0C04  0CB6               	rrf	??_Led_InitPara,f
  6790  0C05  0C36               	rrf	??_Led_InitPara,w
  6791  0C06  390F               	andlw	15
  6792  0C07  00B7               	movwf	??_Led_InitPara+1
  6793  0C08  3009               	movlw	9
  6794  0C09  0237               	subwf	??_Led_InitPara+1,w
  6795  0C0A  1C03               	skipc
  6796  0C0B  2C10               	goto	l625
  6797                           
  6798                           ;led.c: 69: gLedPara.mMsc = 0;
  6799  0C0C  307B               	movlw	123
  6800  0C0D  0086               	movwf	6
  6801  0C0E  3087               	movlw	-121
  6802  0C0F  0581               	andwf	1,f
  6803  0C10                     l625:	
  6804                           
  6805                           ;led.c: 70: }
  6806                           ;led.c: 71: if (gLedPara.mSunrise > 1439) {
  6807  0C10  30D8               	movlw	216
  6808  0C11  263D  3188         	fcall	PL102	;call to abstracted procedure
  6809  0C13  1903               	skipnz
  6810  0C14  0236               	subwf	??_Led_InitPara,w
  6811  0C15  1C03               	skipc
  6812  0C16  2C1A               	goto	l626
  6813                           
  6814                           ;led.c: 72: gLedPara.mSunrise = 0;
  6815  0C17  30D8               	movlw	216
  6816  0C18  2686  3188         	fcall	PL164	;call to abstracted procedure
  6817  0C1A                     l626:	
  6818                           
  6819                           ;led.c: 73: }
  6820                           ;led.c: 74: if (gLedPara.mSunset > 1439) {
  6821  0C1A  30E4               	movlw	228
  6822  0C1B  263D  3188         	fcall	PL102	;call to abstracted procedure
  6823  0C1D  1903               	skipnz
  6824  0C1E  0236               	subwf	??_Led_InitPara,w
  6825  0C1F  1C03               	skipc
  6826  0C20  2C24               	goto	l7297
  6827                           
  6828                           ;led.c: 75: gLedPara.mSunset = 0;
  6829  0C21  30E4               	movlw	228
  6830  0C22  2686  3188         	fcall	PL164	;call to abstracted procedure
  6831  0C24                     l7297:	
  6832                           
  6833                           ;led.c: 76: }
  6834                           ;led.c: 77: if (gLedPara.mVolume > 4) {
  6835  0C24  307B               	movlw	123
  6836  0C25  0086               	movwf	6
  6837  0C26  3023               	movlw	35
  6838  0C27  0087               	movwf	7
  6839  0C28  3005               	movlw	5
  6840  0C29  3142               	addfsr 1,2
  6841  0C2A  0201               	subwf	1,w
  6842  0C2B  1C03               	skipc
  6843  0C2C  2C33               	goto	l7301
  6844                           
  6845                           ;led.c: 78: gLedPara.mVolume = 4;
  6846  0C2D  307D               	movlw	125
  6847  0C2E  0086               	movwf	6
  6848  0C2F  3023               	movlw	35
  6849  0C30  0087               	movwf	7
  6850  0C31  3004               	movlw	4
  6851  0C32  0081               	movwf	1
  6852  0C33                     l7301:	
  6853  0C33  3005               	movlw	5
  6854  0C34  0ABF               	incf	Led_InitPara@i,f
  6855  0C35  023F               	subwf	Led_InitPara@i,w
  6856  0C36  1C03               	skipc
  6857  0C37  2B51               	goto	l7259
  6858                           
  6859                           ;led.c: 79: }
  6860                           ;led.c: 85: }
  6861                           ;led.c: 86: Led_FirstPowerUp();
  6862  0C38  2F17               	ljmp	l5117
  6863  0C39                     __end_of_Led_InitPara:	
  6864  0C39                     __ptext28:	
  6865 ;; *************** function _Led_AutoRun *****************
  6866 ;; Defined at:
  6867 ;;		line 371 in file "user/src/led.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;		None
  6870 ;; Auto vars:     Size  Location     Type
  6871 ;;  i               1   27[BANK0 ] unsigned char 
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  1    wreg      void 
  6874 ;; Registers used:
  6875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6876 ;; Tracked objects:
  6877 ;;		On entry : 1F/0
  6878 ;;		On exit  : 1F/0
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6883 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6884 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6885 ;;Total ram usage:        5 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; Hardware stack levels required when called:    9
  6888 ;; This function calls:
  6889 ;;		_Led_UpdateBright
  6890 ;;		_Util_IncValue
  6891 ;; This function is called by:
  6892 ;;		_main
  6893 ;; This function uses a non-reentrant model
  6894 ;;
  6895                           
  6896                           
  6897                           ;psect for function _Led_AutoRun
  6898  0C39                     _Led_AutoRun:	
  6899                           
  6900                           ;led.c: 372: if (gLedRunPara.auto_state == 1 && gLedRunPara.auto_num < 250) {
  6901                           
  6902                           ;incstack = 0
  6903                           ; Regs used in _Led_AutoRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6904  0C39  0021               	movlb	1	; select bank1
  6905  0C3A  0B5F               	decfsz	(_gLedRunPara^(0+128)+21),w	;volatile
  6906  0C3B  2C4B               	goto	l7423
  6907  0C3C  3000               	movlw	0
  6908  0C3D  0261               	subwf	((_gLedRunPara+1)^(0+128)+22),w	;volatile
  6909  0C3E  30FA               	movlw	250
  6910  0C3F  1903               	skipnz
  6911  0C40  0260               	subwf	(_gLedRunPara^(0+128)+22),w	;volatile
  6912  0C41  1803               	skipnc
  6913  0C42  2C4B               	goto	l7423
  6914                           
  6915                           ;led.c: 373: Util_IncValue((uint16_t *) & gLedRunPara.mCurrentBright[0], 1000, 4);
  6916  0C43  2651               	fcall	PL112	;call to abstracted procedure
  6917  0C44  3004               	movlw	4
  6918  0C45  00B1               	movwf	Util_IncValue@delta
  6919  0C46  01B2               	clrf	Util_IncValue@delta+1
  6920  0C47  3195  253A  3188   	fcall	_Util_IncValue
  6921                           
  6922                           ;led.c: 374: } else if (gLedRunPara.auto_state == 2 && gLedRunPara.auto_num < 1000) {
  6923  0C4A  2C77               	goto	l7439
  6924  0C4B                     l7423:	
  6925  0C4B  3002               	movlw	2
  6926  0C4C  065F               	xorwf	(_gLedRunPara^(0+128)+21),w	;volatile
  6927  0C4D  1D03               	btfss	3,2
  6928  0C4E  2C5E               	goto	l7429
  6929  0C4F  3003               	movlw	3
  6930  0C50  0261               	subwf	((_gLedRunPara+1)^(0+128)+22),w	;volatile
  6931  0C51  30E8               	movlw	232
  6932  0C52  1903               	skipnz
  6933  0C53  0260               	subwf	(_gLedRunPara^(0+128)+22),w	;volatile
  6934  0C54  1803               	skipnc
  6935  0C55  2C5E               	goto	l7429
  6936                           
  6937                           ;led.c: 375: Util_IncValue((uint16_t *) & gLedRunPara.mCurrentBright[0], 1000, 1);
  6938  0C56  2651               	fcall	PL112	;call to abstracted procedure
  6939  0C57  01B1               	clrf	Util_IncValue@delta
  6940  0C58  0AB1               	incf	Util_IncValue@delta,f
  6941  0C59  01B2               	clrf	Util_IncValue@delta+1
  6942  0C5A  3195  253A  3188   	fcall	_Util_IncValue
  6943                           
  6944                           ;led.c: 376: } else {
  6945  0C5D  2C77               	goto	l7439
  6946  0C5E                     l7429:	
  6947                           
  6948                           ;led.c: 377: gLedRunPara.auto_state = 0;
  6949  0C5E  01DF               	clrf	(_gLedRunPara^(0+128)+21)	;volatile
  6950                           
  6951                           ;led.c: 378: if (gLedRunPara.mCurrentBright[0] < gLedRunPara.mTargetBright[0]) {
  6952  0C5F  0855               	movf	((_gLedRunPara+1)^(0+128)+10),w	;volatile
  6953  0C60  024B               	subwf	(_gLedRunPara+1)^(0+128),w	;volatile
  6954  0C61  1D03               	skipz
  6955  0C62  2C65               	goto	u6685
  6956  0C63  0854               	movf	(_gLedRunPara^(0+128)+10),w	;volatile
  6957  0C64  024A               	subwf	_gLedRunPara^(0+128),w	;volatile
  6958  0C65                     u6685:	
  6959  0C65  1803               	skipnc
  6960  0C66  2C6B               	goto	l7435
  6961                           
  6962                           ;led.c: 379: gLedRunPara.mCurrentBright[0]++;
  6963  0C67  0ACA               	incf	_gLedRunPara^(0+128),f	;volatile
  6964  0C68  1903               	skipnz
  6965  0C69  0ACB               	incf	(_gLedRunPara+1)^(0+128),f	;volatile
  6966                           
  6967                           ;led.c: 380: } else if (gLedRunPara.mCurrentBright[0] > gLedRunPara.mTargetBright[0]) {
  6968  0C6A  2C77               	goto	l7439
  6969  0C6B                     l7435:	
  6970  0C6B  084B               	movf	(_gLedRunPara+1)^(0+128),w	;volatile
  6971  0C6C  0255               	subwf	((_gLedRunPara+1)^(0+128)+10),w	;volatile
  6972  0C6D  1D03               	skipz
  6973  0C6E  2C71               	goto	u6695
  6974  0C6F  084A               	movf	_gLedRunPara^(0+128),w	;volatile
  6975  0C70  0254               	subwf	(_gLedRunPara^(0+128)+10),w	;volatile
  6976  0C71                     u6695:	
  6977  0C71  1803               	skipnc
  6978  0C72  2C77               	goto	l7439
  6979                           
  6980                           ;led.c: 381: gLedRunPara.mCurrentBright[0]--;
  6981  0C73  3001               	movlw	1
  6982  0C74  02CA               	subwf	_gLedRunPara^(0+128),f	;volatile
  6983  0C75  3000               	movlw	0
  6984  0C76  3BCB               	subwfb	(_gLedRunPara+1)^(0+128),f	;volatile
  6985  0C77                     l7439:	
  6986                           
  6987                           ;led.c: 382: }
  6988                           ;led.c: 383: }
  6989                           ;led.c: 384: gLedRunPara.auto_num++;
  6990  0C77  0021               	movlb	1	; select bank1
  6991  0C78  0AE0               	incf	(_gLedRunPara^(0+128)+22),f	;volatile
  6992  0C79  1903               	skipnz
  6993  0C7A  0AE1               	incf	((_gLedRunPara+1)^(0+128)+22),f	;volatile
  6994                           
  6995                           ;led.c: 385: if ((gLedRunPara.auto_num & 0x01) == 0) {
  6996  0C7B  1860               	btfsc	(_gLedRunPara^(0+128)+22),0	;volatile
  6997  0C7C  2CA2               	goto	l7461
  6998                           
  6999                           ;led.c: 386: for (uint8_t i = 1; i < 5; i++) {
  7000  0C7D  0020               	movlb	0	; select bank0
  7001  0C7E  01BB               	clrf	Led_AutoRun@i
  7002  0C7F  0ABB               	incf	Led_AutoRun@i,f
  7003  0C80                     l7449:	
  7004                           
  7005                           ;led.c: 387: if (gLedRunPara.mCurrentBright[i] < gLedRunPara.mTargetBright[i]) {
  7006  0C80  353B               	lslf	Led_AutoRun@i,w
  7007  0C81  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  7008  0C82  266D  3188         	fcall	PL132	;call to abstracted procedure
  7009  0C84  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
  7010  0C85  261E  3188         	fcall	PL86	;call to abstracted procedure
  7011  0C87  1803               	skipnc
  7012  0C88  2C90               	goto	l7453
  7013                           
  7014                           ;led.c: 388: gLedRunPara.mCurrentBright[i]++;
  7015  0C89  353B               	lslf	Led_AutoRun@i,w
  7016  0C8A  3184  24F9  3188   	fcall	PL58	;call to abstracted procedure
  7017  0C8D  1803               	skipnc
  7018  0C8E  0A81               	incf	1,f
  7019                           
  7020                           ;led.c: 389: } else if (gLedRunPara.mCurrentBright[i] > gLedRunPara.mTargetBright[i]) {
  7021  0C8F  2C9D               	goto	l7457
  7022  0C90                     l7453:	
  7023  0C90  353B               	lslf	Led_AutoRun@i,w
  7024  0C91  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
  7025  0C92  266D  3188         	fcall	PL132	;call to abstracted procedure
  7026  0C94  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  7027  0C95  261E  3188         	fcall	PL86	;call to abstracted procedure
  7028  0C97  1803               	skipnc
  7029  0C98  2C9D               	goto	l7457
  7030                           
  7031                           ;led.c: 390: gLedRunPara.mCurrentBright[i]--;
  7032  0C99  353B               	lslf	Led_AutoRun@i,w
  7033  0C9A  3184  24C8  3188   	fcall	PL22	;call to abstracted procedure
  7034  0C9D                     l7457:	
  7035  0C9D  3005               	movlw	5
  7036  0C9E  0ABB               	incf	Led_AutoRun@i,f
  7037  0C9F  023B               	subwf	Led_AutoRun@i,w
  7038  0CA0  1C03               	skipc
  7039  0CA1  2C80               	goto	l7449
  7040  0CA2                     l7461:	
  7041                           
  7042                           ;led.c: 391: }
  7043                           ;led.c: 392: }
  7044                           ;led.c: 393: }
  7045                           ;led.c: 394: Led_UpdateBright();
  7046  0CA2  2CA3               	ljmp	l6225
  7047  0CA3                     __end_of_Led_AutoRun:	
  7048  0CA3                     __ptext53:	
  7049 ;; *************** function _Led_UpdateBright *****************
  7050 ;; Defined at:
  7051 ;;		line 183 in file "user/src/led.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;		None
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;  i               1   17[BANK0 ] unsigned char 
  7056 ;; Return value:  Size  Location     Type
  7057 ;;                  1    wreg      void 
  7058 ;; Registers used:
  7059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7060 ;; Tracked objects:
  7061 ;;		On entry : 1E/1
  7062 ;;		On exit  : 1F/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7068 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;Total ram usage:        1 bytes
  7070 ;; Hardware stack levels used:    1
  7071 ;; Hardware stack levels required when called:    8
  7072 ;; This function calls:
  7073 ;;		_PWM1_LoadDutyValue
  7074 ;;		_PWM2_LoadDutyValue
  7075 ;;		_PWM3_LoadDutyValue
  7076 ;;		_PWM4_LoadDutyValue
  7077 ;;		_PWM5_LoadDutyValue
  7078 ;; This function is called by:
  7079 ;;		_Led_Initialize
  7080 ;;		_Led_CheckAutoStatus
  7081 ;;		_Led_AutoRun
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           
  7086                           ;psect for function _Led_UpdateBright
  7087  0CA3                     _Led_UpdateBright:	
  7088  0CA3                     l6225:	
  7089                           ;incstack = 0
  7090                           ; Regs used in _Led_UpdateBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7091                           
  7092                           
  7093                           ;led.c: 184: for (uint8_t i = 0; i < 5; i++) {
  7094  0CA3  0020               	movlb	0	; select bank0
  7095  0CA4  01B1               	clrf	Led_UpdateBright@i
  7096  0CA5                     l6231:	
  7097                           
  7098                           ;led.c: 185: loadDuty[i](gLedRunPara.mCurrentBright[i]);
  7099  0CA5  3531               	lslf	Led_UpdateBright@i,w
  7100  0CA6  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
  7101  0CA7  0086               	movwf	6
  7102  0CA8  0187               	clrf	7
  7103  0CA9  3F40               	moviw [0]fsr1
  7104  0CAA  00AD               	movwf	PWM5_LoadDutyValue@dutyValue
  7105  0CAB  3F41               	moviw [1]fsr1
  7106  0CAC  00AE               	movwf	PWM5_LoadDutyValue@dutyValue+1
  7107  0CAD  3531               	lslf	Led_UpdateBright@i,w
  7108  0CAE  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
  7109  0CAF  0086               	movwf	6
  7110  0CB0  3F41               	moviw [1]fsr1
  7111  0CB1  008A               	movwf	10
  7112  0CB2  3F40               	moviw [0]fsr1
  7113  0CB3  000A               	callw
  7114  0CB4  3188               	pagesel	$
  7115  0CB5  0020               	movlb	0	; select bank0
  7116  0CB6  3005               	movlw	5
  7117  0CB7  0AB1               	incf	Led_UpdateBright@i,f
  7118  0CB8  0231               	subwf	Led_UpdateBright@i,w
  7119  0CB9  1803               	btfsc	3,0
  7120  0CBA  0008               	return
  7121  0CBB  2CA5               	goto	l6231
  7122  0CBC                     __end_of_Led_UpdateBright:	
  7123  0CBC                     __ptext27:	
  7124 ;; *************** function _Led_CheckAutoStatus *****************
  7125 ;; Defined at:
  7126 ;;		line 339 in file "user/src/led.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;		None
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;  i               1   30[BANK0 ] unsigned char 
  7131 ;;  i               1   29[BANK0 ] unsigned char 
  7132 ;;  i               1   31[BANK0 ] unsigned char 
  7133 ;;  ct              2   27[BANK0 ] unsigned int 
  7134 ;;  sunset          2   25[BANK0 ] unsigned int 
  7135 ;;  sunrise         2   23[BANK0 ] unsigned int 
  7136 ;; Return value:  Size  Location     Type
  7137 ;;                  1    wreg      void 
  7138 ;; Registers used:
  7139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7140 ;; Tracked objects:
  7141 ;;		On entry : 1F/0
  7142 ;;		On exit  : 1E/0
  7143 ;;		Unchanged: 0/0
  7144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7147 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;Total ram usage:       13 bytes
  7150 ;; Hardware stack levels used:    1
  7151 ;; Hardware stack levels required when called:    9
  7152 ;; This function calls:
  7153 ;;		_Led_UpdateBright
  7154 ;;		_RTC_GetTime
  7155 ;;		___wmul
  7156 ;; This function is called by:
  7157 ;;		_main
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           
  7162                           ;psect for function _Led_CheckAutoStatus
  7163  0CBC                     _Led_CheckAutoStatus:	
  7164                           
  7165                           ;led.c: 340: uint16_t ct = RTC_GetTime()->hour * 60u + RTC_GetTime()->minute;
  7166                           
  7167                           ;incstack = 0
  7168                           ; Regs used in _Led_CheckAutoStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7169  0CBC  2272  3188         	fcall	_RTC_GetTime
  7170  0CBE  2647               	fcall	PL110	;call to abstracted procedure
  7171  0CBF  3195  2560  3188   	fcall	___wmul
  7172  0CC2  082E               	movf	?___wmul+1,w
  7173  0CC3  00BC               	movwf	Led_CheckAutoStatus@ct+1
  7174  0CC4  082D               	movf	?___wmul,w
  7175  0CC5  00BB               	movwf	Led_CheckAutoStatus@ct
  7176  0CC6  2272  3188         	fcall	_RTC_GetTime
  7177  0CC8  0020               	movlb	0	; select bank0
  7178  0CC9  00B3               	movwf	??_Led_CheckAutoStatus
  7179  0CCA  3E01               	addlw	1
  7180  0CCB  0086               	movwf	6
  7181  0CCC  0187               	clrf	7
  7182  0CCD  0801               	movf	1,w
  7183  0CCE  07BB               	addwf	Led_CheckAutoStatus@ct,f
  7184  0CCF  1803               	skipnc
  7185  0CD0  0ABC               	incf	Led_CheckAutoStatus@ct+1,f
  7186                           
  7187                           ;led.c: 341: uint16_t sunrise = gLedPara.mSunrise;
  7188  0CD1  30D8               	movlw	216
  7189  0CD2  0086               	movwf	6
  7190  0CD3  3023               	movlw	35
  7191  0CD4  0087               	movwf	7
  7192  0CD5  3F40               	moviw [0]fsr1
  7193  0CD6  00B7               	movwf	Led_CheckAutoStatus@sunrise
  7194  0CD7  3F41               	moviw [1]fsr1
  7195  0CD8  00B8               	movwf	Led_CheckAutoStatus@sunrise+1
  7196                           
  7197                           ;led.c: 342: uint16_t sunset = gLedPara.mSunset;
  7198  0CD9  30E4               	movlw	228
  7199  0CDA  0086               	movwf	6
  7200  0CDB  3F40               	moviw [0]fsr1
  7201  0CDC  00B9               	movwf	Led_CheckAutoStatus@sunset
  7202  0CDD  3F41               	moviw [1]fsr1
  7203  0CDE  00BA               	movwf	Led_CheckAutoStatus@sunset+1
  7204                           
  7205                           ;led.c: 343: if (sunrise == sunset) {
  7206  0CDF  0638               	xorwf	Led_CheckAutoStatus@sunrise+1,w
  7207  0CE0  1D03               	skipz
  7208  0CE1  2CE4               	goto	u6585
  7209  0CE2  0839               	movf	Led_CheckAutoStatus@sunset,w
  7210  0CE3  0637               	xorwf	Led_CheckAutoStatus@sunrise,w
  7211  0CE4                     u6585:	
  7212  0CE4  1D03               	skipz
  7213  0CE5  2D02               	goto	l7377
  7214                           
  7215                           ;led.c: 344: for (uint8_t i = 0; i < 5; i++) {
  7216  0CE6  01BF               	clrf	Led_CheckAutoStatus@i
  7217  0CE7                     l7365:	
  7218                           
  7219                           ;led.c: 345: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
  7220  0CE7  083F               	movf	Led_CheckAutoStatus@i,w
  7221  0CE8  00B3               	movwf	??_Led_CheckAutoStatus
  7222  0CE9  30E6               	movlw	230
  7223  0CEA  25F6  3188         	fcall	PL24	;call to abstracted procedure
  7224  0CEC  353F               	lslf	Led_CheckAutoStatus@i,w
  7225  0CED  25EE  3188         	fcall	PL20	;call to abstracted procedure
  7226                           
  7227                           ;led.c: 346: gLedRunPara.mCurrentBright[i] = gLedPara.mNightBright[i];
  7228  0CEF  083F               	movf	Led_CheckAutoStatus@i,w
  7229  0CF0  00B3               	movwf	??_Led_CheckAutoStatus
  7230  0CF1  30E6               	movlw	230
  7231  0CF2  25F6  3188         	fcall	PL24	;call to abstracted procedure
  7232  0CF4  353F               	lslf	Led_CheckAutoStatus@i,w
  7233  0CF5  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
  7234  0CF6  0084               	movwf	4
  7235  0CF7  2613  3188         	fcall	PL60	;call to abstracted procedure
  7236  0CF9  0ABF               	incf	Led_CheckAutoStatus@i,f
  7237  0CFA  023F               	subwf	Led_CheckAutoStatus@i,w
  7238  0CFB  1C03               	skipc
  7239  0CFC  2CE7               	goto	l7365
  7240                           
  7241                           ;led.c: 347: }
  7242                           ;led.c: 348: gLedRunPara.auto_state = 0;
  7243  0CFD  0021               	movlb	1	; select bank1
  7244  0CFE  01DF               	clrf	(_gLedRunPara^(0+128)+21)	;volatile
  7245                           
  7246                           ;led.c: 349: gLedRunPara.auto_num = 0;
  7247  0CFF  01E0               	clrf	(_gLedRunPara^(0+128)+22)	;volatile
  7248  0D00  01E1               	clrf	((_gLedRunPara+1)^(0+128)+22)	;volatile
  7249                           
  7250                           ;led.c: 350: Led_UpdateBright();
  7251  0D01  2CA3               	ljmp	l6225
  7252  0D02                     l7377:	
  7253                           
  7254                           ;led.c: 352: }
  7255                           ;led.c: 353: if (ct == sunrise) {
  7256  0D02  0838               	movf	Led_CheckAutoStatus@sunrise+1,w
  7257  0D03  063C               	xorwf	Led_CheckAutoStatus@ct+1,w
  7258  0D04  1D03               	skipz
  7259  0D05  2D08               	goto	u6605
  7260  0D06  0837               	movf	Led_CheckAutoStatus@sunrise,w
  7261  0D07  063B               	xorwf	Led_CheckAutoStatus@ct,w
  7262  0D08                     u6605:	
  7263  0D08  1D03               	skipz
  7264  0D09  2D1E               	goto	l7397
  7265                           
  7266                           ;led.c: 354: for (uint8_t i = 0; i < 5; i++) {
  7267  0D0A  01BD               	clrf	Led_CheckAutoStatus@i_1252
  7268  0D0B                     l7385:	
  7269                           
  7270                           ;led.c: 355: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
  7271  0D0B  083D               	movf	Led_CheckAutoStatus@i_1252,w
  7272  0D0C  00B3               	movwf	??_Led_CheckAutoStatus
  7273  0D0D  30DA               	movlw	218
  7274  0D0E  25F6  3188         	fcall	PL24	;call to abstracted procedure
  7275  0D10  353D               	lslf	Led_CheckAutoStatus@i_1252,w
  7276  0D11  25EE  3188         	fcall	PL20	;call to abstracted procedure
  7277  0D13  3005               	movlw	5
  7278  0D14  0ABD               	incf	Led_CheckAutoStatus@i_1252,f
  7279  0D15  023D               	subwf	Led_CheckAutoStatus@i_1252,w
  7280  0D16  1C03               	skipc
  7281  0D17  2D0B               	goto	l7385
  7282                           
  7283                           ;led.c: 356: }
  7284                           ;led.c: 357: gLedRunPara.auto_state = 1;
  7285  0D18  3001               	movlw	1
  7286  0D19                     L1:	
  7287  0D19  0021               	movlb	1	; select bank1
  7288  0D1A  00DF               	movwf	(_gLedRunPara^(0+128)+21)	;volatile
  7289                           
  7290                           ;led.c: 358: gLedRunPara.auto_num = 0;
  7291  0D1B  01E0               	clrf	(_gLedRunPara^(0+128)+22)	;volatile
  7292  0D1C  01E1               	clrf	((_gLedRunPara+1)^(0+128)+22)	;volatile
  7293  0D1D  0008               	return
  7294  0D1E                     l7397:	
  7295                           
  7296                           ;led.c: 360: }
  7297                           ;led.c: 361: if (ct == sunset) {
  7298  0D1E  083A               	movf	Led_CheckAutoStatus@sunset+1,w
  7299  0D1F  063C               	xorwf	Led_CheckAutoStatus@ct+1,w
  7300  0D20  1D03               	skipz
  7301  0D21  2D24               	goto	u6625
  7302  0D22  0839               	movf	Led_CheckAutoStatus@sunset,w
  7303  0D23  063B               	xorwf	Led_CheckAutoStatus@ct,w
  7304  0D24                     u6625:	
  7305  0D24  1D03               	skipz
  7306  0D25  0008               	return
  7307                           
  7308                           ;led.c: 362: for (uint8_t i = 0; i < 5; i++) {
  7309  0D26  01BE               	clrf	Led_CheckAutoStatus@i_1253
  7310  0D27                     l7405:	
  7311                           
  7312                           ;led.c: 363: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
  7313  0D27  083E               	movf	Led_CheckAutoStatus@i_1253,w
  7314  0D28  00B3               	movwf	??_Led_CheckAutoStatus
  7315  0D29  30E6               	movlw	230
  7316  0D2A  25F6  3188         	fcall	PL24	;call to abstracted procedure
  7317  0D2C  353E               	lslf	Led_CheckAutoStatus@i_1253,w
  7318  0D2D  25EE  3188         	fcall	PL20	;call to abstracted procedure
  7319  0D2F  3005               	movlw	5
  7320  0D30  0ABE               	incf	Led_CheckAutoStatus@i_1253,f
  7321  0D31  023E               	subwf	Led_CheckAutoStatus@i_1253,w
  7322  0D32  1C03               	skipc
  7323  0D33  2D27               	goto	l7405
  7324                           
  7325                           ;led.c: 364: }
  7326                           ;led.c: 365: gLedRunPara.auto_state = 2;
  7327  0D34  3002               	movlw	2
  7328  0D35  2D19               	goto	L1
  7329  0D36                     __end_of_Led_CheckAutoStatus:	
  7330  0D36                     __ptext25:	
  7331 ;; *************** function _DATAEE_ReadBuffer *****************
  7332 ;; Defined at:
  7333 ;;		line 55 in file "driver/src/eeprom.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;  addr            2   15[BANK0 ] unsigned int 
  7336 ;;  buf             2   17[BANK0 ] PTR unsigned char 
  7337 ;;		 -> gLedPara(117), 
  7338 ;;  len             1   19[BANK0 ] unsigned char 
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;  i               1   21[BANK0 ] unsigned char 
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  1    wreg      void 
  7343 ;; Registers used:
  7344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7345 ;; Tracked objects:
  7346 ;;		On entry : 1F/0
  7347 ;;		On exit  : 1F/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7350 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7351 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7352 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7353 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7354 ;;Total ram usage:        7 bytes
  7355 ;; Hardware stack levels used:    1
  7356 ;; Hardware stack levels required when called:    8
  7357 ;; This function calls:
  7358 ;;		_DATAEE_ReadByte
  7359 ;; This function is called by:
  7360 ;;		_Led_InitPara
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           
  7365                           ;psect for function _DATAEE_ReadBuffer
  7366  0D36                     _DATAEE_ReadBuffer:	
  7367                           
  7368                           ;eeprom.c: 57: for ( uint8_t i = len; i != 0; i-- )
  7369                           
  7370                           ;incstack = 0
  7371                           ; Regs used in _DATAEE_ReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7372  0D36  0833               	movf	DATAEE_ReadBuffer@len,w
  7373  0D37  00B5               	movwf	DATAEE_ReadBuffer@i
  7374  0D38                     l4947:	
  7375  0D38  0835               	movf	DATAEE_ReadBuffer@i,w
  7376  0D39  1903               	btfsc	3,2
  7377  0D3A  0008               	return
  7378                           
  7379                           ;eeprom.c: 58: {
  7380                           ;eeprom.c: 59: *buf++ = DATAEE_ReadByte ( addr++ );
  7381  0D3B  0830               	movf	DATAEE_ReadBuffer@addr+1,w
  7382  0D3C  00AE               	movwf	DATAEE_ReadByte@addr+1
  7383  0D3D  082F               	movf	DATAEE_ReadBuffer@addr,w
  7384  0D3E  00AD               	movwf	DATAEE_ReadByte@addr
  7385  0D3F  2551  3188         	fcall	_DATAEE_ReadByte
  7386  0D41  0020               	movlb	0	; select bank0
  7387  0D42  00B4               	movwf	??_DATAEE_ReadBuffer
  7388  0D43  0831               	movf	DATAEE_ReadBuffer@buf,w
  7389  0D44  0086               	movwf	6
  7390  0D45  0832               	movf	DATAEE_ReadBuffer@buf+1,w
  7391  0D46  0087               	movwf	7
  7392  0D47  0834               	movf	??_DATAEE_ReadBuffer,w
  7393  0D48  0081               	movwf	1
  7394  0D49  0AAF               	incf	DATAEE_ReadBuffer@addr,f
  7395  0D4A  1903               	skipnz
  7396  0D4B  0AB0               	incf	DATAEE_ReadBuffer@addr+1,f
  7397  0D4C  0AB1               	incf	DATAEE_ReadBuffer@buf,f
  7398  0D4D  1903               	skipnz
  7399  0D4E  0AB2               	incf	DATAEE_ReadBuffer@buf+1,f
  7400  0D4F  03B5               	decf	DATAEE_ReadBuffer@i,f
  7401  0D50  2D38               	goto	l4947
  7402  0D51                     __end_of_DATAEE_ReadBuffer:	
  7403  0D51                     __ptext26:	
  7404 ;; *************** function _DATAEE_ReadByte *****************
  7405 ;; Defined at:
  7406 ;;		line 23 in file "driver/src/eeprom.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;  addr            2   13[BANK0 ] unsigned int 
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;		None
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  1    wreg      unsigned char 
  7413 ;; Registers used:
  7414 ;;		wreg
  7415 ;; Tracked objects:
  7416 ;;		On entry : 1F/0
  7417 ;;		On exit  : 1F/11
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7420 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;Total ram usage:        2 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; Hardware stack levels required when called:    7
  7427 ;; This function calls:
  7428 ;;		Nothing
  7429 ;; This function is called by:
  7430 ;;		_DATAEE_ReadBuffer
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           
  7435                           ;psect for function _DATAEE_ReadByte
  7436  0D51                     _DATAEE_ReadByte:	
  7437                           
  7438                           ;eeprom.c: 25: NVMADRH = addr >> 8;
  7439                           
  7440                           ;incstack = 0
  7441                           ; Regs used in _DATAEE_ReadByte: [wreg]
  7442  0D51  082E               	movf	DATAEE_ReadByte@addr+1,w
  7443  0D52  0031               	movlb	17	; select bank17
  7444  0D53  0092               	movwf	18	;volatile
  7445                           
  7446                           ;eeprom.c: 26: NVMADRL = addr & 0xFF;
  7447  0D54  0020               	movlb	0	; select bank0
  7448  0D55  082D               	movf	DATAEE_ReadByte@addr,w
  7449  0D56  0031               	movlb	17	; select bank17
  7450  0D57  0091               	movwf	17	;volatile
  7451                           
  7452                           ;eeprom.c: 27: NVMCON1bits.NVMREGS = 1;
  7453  0D58  1715               	bsf	21,6	;volsfr
  7454                           
  7455                           ;eeprom.c: 28: NVMCON1bits.RD = 1;
  7456  0D59  1415               	bsf	21,0	;volsfr
  7457                           
  7458                           ;eeprom.c: 29: __nop();
  7459  0D5A  0000               	nop
  7460                           
  7461                           ;eeprom.c: 30: __nop();
  7462  0D5B  0000               	nop
  7463                           
  7464                           ;eeprom.c: 32: return ( NVMDATL );
  7465  0D5C  0031               	movlb	17	; select bank17
  7466  0D5D  0813               	movf	19,w	;volatile
  7467  0D5E  0008               	return
  7468  0D5F                     __end_of_DATAEE_ReadByte:	
  7469  0D5F                     __ptext13:	
  7470 ;; *************** function _PIN_Initialize *****************
  7471 ;; Defined at:
  7472 ;;		line 102 in file "user/src/main.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;		None
  7475 ;; Auto vars:     Size  Location     Type
  7476 ;;  state           1   13[BANK0 ] unsigned char 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;                  1    wreg      void 
  7479 ;; Registers used:
  7480 ;;		wreg, status,2, status,0
  7481 ;; Tracked objects:
  7482 ;;		On entry : B1F/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7489 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7490 ;;Total ram usage:        1 bytes
  7491 ;; Hardware stack levels used:    1
  7492 ;; Hardware stack levels required when called:    7
  7493 ;; This function calls:
  7494 ;;		Nothing
  7495 ;; This function is called by:
  7496 ;;		_SYSTEM_Initialize
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           
  7501                           ;psect for function _PIN_Initialize
  7502  0D5F                     _PIN_Initialize:	
  7503                           
  7504                           ;main.c: 103: LATA = 0x00;
  7505                           
  7506                           ;incstack = 0
  7507                           ; Regs used in _PIN_Initialize: [wreg+status,2+status,0]
  7508  0D5F  0022               	movlb	2	; select bank2
  7509  0D60  018C               	clrf	12	;volatile
  7510                           
  7511                           ;main.c: 104: LATB = 0x80;
  7512  0D61  3080               	movlw	128
  7513  0D62  008D               	movwf	13	;volatile
  7514                           
  7515                           ;main.c: 105: LATC = 0x00;
  7516  0D63  018E               	clrf	14	;volatile
  7517                           
  7518                           ;main.c: 107: TRISA = 0x30;
  7519  0D64  3030               	movlw	48
  7520  0D65  0021               	movlb	1	; select bank1
  7521  0D66  008C               	movwf	12	;volatile
  7522                           
  7523                           ;main.c: 108: TRISB = 0x60;
  7524  0D67  3060               	movlw	96
  7525  0D68  008D               	movwf	13	;volatile
  7526                           
  7527                           ;main.c: 109: TRISC = 0x05;
  7528  0D69  3005               	movlw	5
  7529  0D6A  008E               	movwf	14	;volatile
  7530                           
  7531                           ;main.c: 111: ANSELC = 0x04;
  7532  0D6B  3004               	movlw	4
  7533  0D6C  0023               	movlb	3	; select bank3
  7534  0D6D  008E               	movwf	14	;volatile
  7535                           
  7536                           ;main.c: 112: ANSELB = 0x00;
  7537  0D6E  018D               	clrf	13	;volatile
  7538                           
  7539                           ;main.c: 113: ANSELA = 0x00;
  7540  0D6F  018C               	clrf	12	;volatile
  7541                           
  7542                           ;main.c: 115: WPUB = 0x60;
  7543  0D70  3060               	movlw	96
  7544  0D71  0024               	movlb	4	; select bank4
  7545  0D72  008D               	movwf	13	;volatile
  7546                           
  7547                           ;main.c: 116: WPUA = 0x00;
  7548  0D73  018C               	clrf	12	;volatile
  7549                           
  7550                           ;main.c: 117: WPUC = 0x01;
  7551  0D74  3001               	movlw	1
  7552  0D75  008E               	movwf	14	;volatile
  7553                           
  7554                           ;main.c: 119: ODCONA = 0x00;
  7555  0D76  0025               	movlb	5	; select bank5
  7556  0D77  018C               	clrf	12	;volatile
  7557                           
  7558                           ;main.c: 120: ODCONB = 0x00;
  7559  0D78  018D               	clrf	13	;volatile
  7560                           
  7561                           ;main.c: 121: ODCONC = 0x00;
  7562  0D79  018E               	clrf	14	;volatile
  7563                           
  7564                           ;main.c: 123: uint8_t state = GIE;
  7565  0D7A  3000               	movlw	0
  7566  0D7B  1B8B               	btfsc	11,7	;volatile
  7567  0D7C  3001               	movlw	1
  7568  0D7D  0020               	movlb	0	; select bank0
  7569  0D7E  00AD               	movwf	PIN_Initialize@state
  7570                           
  7571                           ;main.c: 124: GIE = 0;
  7572  0D7F  138B               	bcf	11,7	;volatile
  7573                           
  7574                           ;main.c: 125: PPSLOCK = 0x55;
  7575                           
  7576                           ;main.c: 126: PPSLOCK = 0xAA;
  7577  0D80  2680  3188         	fcall	PL152	;call to abstracted procedure
  7578                           
  7579                           ;main.c: 127: PPSLOCKbits.PPSLOCKED = 0x00;
  7580  0D82  100F               	bcf	15,0	;volatile
  7581                           
  7582                           ;main.c: 129: RC5PPSbits.RC5PPS = 0x0C;
  7583  0D83  003D               	movlb	29	; select bank29
  7584  0D84  0825               	movf	37,w	;volatile
  7585  0D85  39E0               	andlw	-32
  7586  0D86  380C               	iorlw	12
  7587  0D87  00A5               	movwf	37	;volatile
  7588                           
  7589                           ;main.c: 130: RC3PPSbits.RC3PPS = 0x0D;
  7590  0D88  0823               	movf	35,w	;volatile
  7591  0D89  39E0               	andlw	-32
  7592  0D8A  380D               	iorlw	13
  7593  0D8B  00A3               	movwf	35	;volatile
  7594                           
  7595                           ;main.c: 131: RA2PPSbits.RA2PPS = 0x0E;
  7596  0D8C  0812               	movf	18,w	;volatile
  7597  0D8D  39E0               	andlw	-32
  7598  0D8E  380E               	iorlw	14
  7599  0D8F  0092               	movwf	18	;volatile
  7600                           
  7601                           ;main.c: 132: RC1PPSbits.RC1PPS = 0x0F;
  7602  0D90  0821               	movf	33,w	;volatile
  7603  0D91  39E0               	andlw	-32
  7604  0D92  380F               	iorlw	15
  7605  0D93  00A1               	movwf	33	;volatile
  7606                           
  7607                           ;main.c: 133: RC7PPSbits.RC7PPS = 0x02;
  7608  0D94  0827               	movf	39,w	;volatile
  7609  0D95  39E0               	andlw	-32
  7610  0D96  3802               	iorlw	2
  7611  0D97  00A7               	movwf	39	;volatile
  7612                           
  7613                           ;main.c: 134: T1GPPSbits.T1GPPS = 0x10;
  7614  0D98  003C               	movlb	28	; select bank28
  7615  0D99  0813               	movf	19,w	;volatile
  7616  0D9A  39E0               	andlw	-32
  7617  0D9B  3810               	iorlw	16
  7618  0D9C  0093               	movwf	19	;volatile
  7619                           
  7620                           ;main.c: 135: RB7PPSbits.RB7PPS = 0x14;
  7621  0D9D  003D               	movlb	29	; select bank29
  7622  0D9E  081F               	movf	31,w	;volatile
  7623  0D9F  39E0               	andlw	-32
  7624  0DA0  3814               	iorlw	20
  7625  0DA1  009F               	movwf	31	;volatile
  7626                           
  7627                           ;main.c: 137: PPSLOCK = 0x55;
  7628                           
  7629                           ;main.c: 138: PPSLOCK = 0xAA;
  7630  0DA2  2680  3188         	fcall	PL152	;call to abstracted procedure
  7631                           
  7632                           ;main.c: 139: PPSLOCKbits.PPSLOCKED = 0x01;
  7633  0DA4  140F               	bsf	15,0	;volatile
  7634                           
  7635                           ;main.c: 141: GIE = state;
  7636  0DA5  0020               	movlb	0	; select bank0
  7637  0DA6  1C2D               	btfss	PIN_Initialize@state,0
  7638  0DA7  2DAA               	goto	u3770
  7639  0DA8  178B               	bsf	11,7	;volatile
  7640  0DA9  0008               	return
  7641  0DAA                     u3770:	
  7642  0DAA  138B               	bcf	11,7	;volatile
  7643  0DAB  0008               	return
  7644  0DAC                     __end_of_PIN_Initialize:	
  7645  0DAC                     __ptext10:	
  7646 ;; *************** function _PWM3_Initialize *****************
  7647 ;; Defined at:
  7648 ;;		line 30 in file "driver/src/pwm.c"
  7649 ;; Parameters:    Size  Location     Type
  7650 ;;		None
  7651 ;; Auto vars:     Size  Location     Type
  7652 ;;		None
  7653 ;; Return value:  Size  Location     Type
  7654 ;;                  1    wreg      void 
  7655 ;; Registers used:
  7656 ;;		wreg, status,2, status,0
  7657 ;; Tracked objects:
  7658 ;;		On entry : 1F/5
  7659 ;;		On exit  : 1F/5
  7660 ;;		Unchanged: 0/0
  7661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7666 ;;Total ram usage:        0 bytes
  7667 ;; Hardware stack levels used:    1
  7668 ;; Hardware stack levels required when called:    7
  7669 ;; This function calls:
  7670 ;;		Nothing
  7671 ;; This function is called by:
  7672 ;;		_SYSTEM_Initialize
  7673 ;; This function uses a non-reentrant model
  7674 ;;
  7675                           
  7676                           
  7677                           ;psect for function _PWM3_Initialize
  7678  0DAC                     _PWM3_Initialize:	
  7679                           
  7680                           ;pwm.c: 32: CCP3CON = 0x8F;
  7681                           
  7682                           ;incstack = 0
  7683                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  7684  0DAC  308F               	movlw	143
  7685  0DAD  0026               	movlb	6	; select bank6
  7686  0DAE  0093               	movwf	19	;volatile
  7687                           
  7688                           ;pwm.c: 33: CCPR3 = 0;
  7689  0DAF  0191               	clrf	17	;volatile
  7690  0DB0  0192               	clrf	18	;volatile
  7691                           
  7692                           ;pwm.c: 34: CCPTMRSbits.C3TSEL = 0x1;
  7693  0DB1  0025               	movlb	5	; select bank5
  7694  0DB2  081F               	movf	31,w	;volatile
  7695  0DB3  39CF               	andlw	-49
  7696  0DB4  3810               	iorlw	16
  7697  0DB5  009F               	movwf	31	;volatile
  7698  0DB6  0008               	return
  7699  0DB7                     __end_of_PWM3_Initialize:	
  7700  0DB7                     __ptext2:	
  7701 ;; *************** function _TMR0_StartTimer *****************
  7702 ;; Defined at:
  7703 ;;		line 17 in file "driver/src/tmr0.c"
  7704 ;; Parameters:    Size  Location     Type
  7705 ;;		None
  7706 ;; Auto vars:     Size  Location     Type
  7707 ;;		None
  7708 ;; Return value:  Size  Location     Type
  7709 ;;                  1    wreg      void 
  7710 ;; Registers used:
  7711 ;;		None
  7712 ;; Tracked objects:
  7713 ;;		On entry : 1E/0
  7714 ;;		On exit  : 1F/0
  7715 ;;		Unchanged: 0/0
  7716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;Total ram usage:        0 bytes
  7722 ;; Hardware stack levels used:    1
  7723 ;; Hardware stack levels required when called:    7
  7724 ;; This function calls:
  7725 ;;		Nothing
  7726 ;; This function is called by:
  7727 ;;		_main
  7728 ;; This function uses a non-reentrant model
  7729 ;;
  7730                           
  7731                           
  7732                           ;psect for function _TMR0_StartTimer
  7733  0DB7                     _TMR0_StartTimer:	
  7734                           
  7735                           ;tmr0.c: 19: T0CON0bits.T0EN = 1;
  7736                           
  7737                           ;incstack = 0
  7738                           ; Regs used in _TMR0_StartTimer: []
  7739  0DB7  0020               	movlb	0	; select bank0
  7740  0DB8  1797               	bsf	23,7	;volatile
  7741  0DB9  0008               	return
  7742  0DBA                     __end_of_TMR0_StartTimer:	
  7743  0DBA                     __ptext1:	
  7744 ;; *************** function _TMR2_StartTimer *****************
  7745 ;; Defined at:
  7746 ;;		line 16 in file "driver/src/tmr2.c"
  7747 ;; Parameters:    Size  Location     Type
  7748 ;;		None
  7749 ;; Auto vars:     Size  Location     Type
  7750 ;;		None
  7751 ;; Return value:  Size  Location     Type
  7752 ;;                  1    wreg      void 
  7753 ;; Registers used:
  7754 ;;		None
  7755 ;; Tracked objects:
  7756 ;;		On entry : 1F/0
  7757 ;;		On exit  : 1F/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7764 ;;Total ram usage:        0 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:    7
  7767 ;; This function calls:
  7768 ;;		Nothing
  7769 ;; This function is called by:
  7770 ;;		_main
  7771 ;; This function uses a non-reentrant model
  7772 ;;
  7773                           
  7774                           
  7775                           ;psect for function _TMR2_StartTimer
  7776  0DBA                     _TMR2_StartTimer:	
  7777                           
  7778                           ;tmr2.c: 18: T2CONbits.TMR2ON = 1;
  7779                           
  7780                           ;incstack = 0
  7781                           ; Regs used in _TMR2_StartTimer: []
  7782  0DBA  151F               	bsf	31,2	;volatile
  7783  0DBB  0008               	return
  7784  0DBC                     __end_of_TMR2_StartTimer:	
  7785  0DBC                     PL2:	
  7786  0DBC  01B7               	clrf	??_Led_InitPara+1
  7787  0DBD  35B6               	lslf	??_Led_InitPara,f
  7788  0DBE  0DB7               	rlf	??_Led_InitPara+1,f
  7789  0DBF  00B8               	movwf	??_Led_InitPara+2
  7790  0DC0  3023               	movlw	35
  7791  0DC1  00B9               	movwf	??_Led_InitPara+3
  7792  0DC2  0836               	movf	??_Led_InitPara,w
  7793  0DC3  0738               	addwf	??_Led_InitPara+2,w
  7794  0DC4  0086               	movwf	6
  7795  0DC5  0837               	movf	??_Led_InitPara+1,w
  7796  0DC6  3D39               	addwfc	??_Led_InitPara+3,w
  7797  0DC7  0087               	movwf	7
  7798  0DC8  3F40               	moviw [0]fsr1
  7799  0DC9  00BA               	movwf	??_Led_InitPara+4
  7800  0DCA  3F41               	moviw [1]fsr1
  7801  0DCB  00BB               	movwf	??_Led_InitPara+5
  7802  0DCC  3003               	movlw	3
  7803  0DCD  023B               	subwf	??_Led_InitPara+5,w
  7804  0DCE  34E9               	retlw	233
  7805  0DCF                     __end_ofPL2:	
  7806  0DCF                     PL6:	
  7807  0DCF  01B9               	clrf	??_Led_InitPara+3
  7808  0DD0  35B8               	lslf	??_Led_InitPara+2,f
  7809  0DD1  0DB9               	rlf	??_Led_InitPara+3,f
  7810  0DD2  00BA               	movwf	??_Led_InitPara+4
  7811  0DD3  3023               	movlw	35
  7812  0DD4  00BB               	movwf	??_Led_InitPara+5
  7813  0DD5  0838               	movf	??_Led_InitPara+2,w
  7814  0DD6  073A               	addwf	??_Led_InitPara+4,w
  7815  0DD7  0086               	movwf	6
  7816  0DD8  0839               	movf	??_Led_InitPara+3,w
  7817  0DD9  3D3B               	addwfc	??_Led_InitPara+5,w
  7818  0DDA  0087               	movwf	7
  7819  0DDB  0836               	movf	??_Led_InitPara,w
  7820  0DDC  3FC0               	movwi [0]fsr1
  7821  0DDD  0837               	movf	??_Led_InitPara+1,w
  7822  0DDE  3FC1               	movwi [1]fsr1
  7823  0DDF  0008               	return
  7824  0DE0                     __end_ofPL6:	
  7825  0DE0                     PL18:	
  7826  0DE0  01B4               	clrf	??_Led_Initialize+1
  7827  0DE1  35B3               	lslf	??_Led_Initialize,f
  7828  0DE2  0DB4               	rlf	??_Led_Initialize+1,f
  7829  0DE3  00B5               	movwf	??_Led_Initialize+2
  7830  0DE4  3023               	movlw	35
  7831  0DE5  00B6               	movwf	??_Led_Initialize+3
  7832  0DE6  0833               	movf	??_Led_Initialize,w
  7833  0DE7  0735               	addwf	??_Led_Initialize+2,w
  7834  0DE8  0086               	movwf	6
  7835  0DE9  0834               	movf	??_Led_Initialize+1,w
  7836  0DEA  3D36               	addwfc	??_Led_Initialize+3,w
  7837  0DEB  0087               	movwf	7
  7838  0DEC  353A               	lslf	Led_Initialize@i,w
  7839  0DED  0008               	return
  7840  0DEE                     __end_ofPL18:	
  7841  0DEE                     PL20:	
  7842  0DEE  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  7843  0DEF  0084               	movwf	4
  7844  0DF0  0185               	clrf	5
  7845  0DF1  3F40               	moviw [0]fsr1
  7846  0DF2  3F80               	movwi [0]fsr0
  7847  0DF3  3F41               	moviw [1]fsr1
  7848  0DF4  3F81               	movwi [1]fsr0
  7849  0DF5  0008               	return
  7850  0DF6                     __end_ofPL20:	
  7851  0DF6                     PL24:	
  7852  0DF6  01B4               	clrf	??_Led_CheckAutoStatus+1
  7853  0DF7  35B3               	lslf	??_Led_CheckAutoStatus,f
  7854  0DF8  0DB4               	rlf	??_Led_CheckAutoStatus+1,f
  7855  0DF9  00B5               	movwf	??_Led_CheckAutoStatus+2
  7856  0DFA  3023               	movlw	35
  7857  0DFB  00B6               	movwf	??_Led_CheckAutoStatus+3
  7858  0DFC  0833               	movf	??_Led_CheckAutoStatus,w
  7859  0DFD  0735               	addwf	??_Led_CheckAutoStatus+2,w
  7860  0DFE  0086               	movwf	6
  7861  0DFF  0834               	movf	??_Led_CheckAutoStatus+1,w
  7862  0E00  3D36               	addwfc	??_Led_CheckAutoStatus+3,w
  7863  0E01  0087               	movwf	7
  7864  0E02  0008               	return
  7865  0E03                     __end_ofPL24:	
  7866  0E03                     PL42:	
  7867  0E03  30E8               	movlw	232
  7868  0E04  00B6               	movwf	??_Led_InitPara
  7869  0E05  3003               	movlw	3
  7870  0E06  00B7               	movwf	??_Led_InitPara+1
  7871  0E07  083F               	movf	Led_InitPara@i,w
  7872  0E08  00B8               	movwf	??_Led_InitPara+2
  7873  0E09  0008               	return
  7874  0E0A                     __end_ofPL42:	
  7875  0E0A                     PL50:	
  7876  0E0A  0086               	movwf	6
  7877  0E0B  3023               	movlw	35
  7878  0E0C  0087               	movwf	7
  7879  0E0D  3F40               	moviw [0]fsr1
  7880  0E0E  0021               	movlb	1	; select bank1
  7881  0E0F  00D4               	movwf	(_gLedRunPara^(0+128)+10)	;volatile
  7882  0E10  3F41               	moviw [1]fsr1
  7883  0E11  00D5               	movwf	((_gLedRunPara+1)^(0+128)+10)	;volatile
  7884  0E12  0008               	return
  7885  0E13                     __end_ofPL50:	
  7886  0E13                     PL60:	
  7887  0E13  3F40               	moviw [0]fsr1
  7888  0E14  3F80               	movwi [0]fsr0
  7889  0E15  3F41               	moviw [1]fsr1
  7890  0E16  3F81               	movwi [1]fsr0
  7891  0E17  3405               	retlw	5
  7892  0E18                     __end_ofPL60:	
  7893  0E18                     PL72:	
  7894  0E18  0086               	movwf	6
  7895  0E19  3F40               	moviw [0]fsr1
  7896  0E1A  00DC               	movwf	(_gLedRunPara^(0+128)+18)	;volatile
  7897  0E1B  3F41               	moviw [1]fsr1
  7898  0E1C  00DD               	movwf	((_gLedRunPara+1)^(0+128)+18)	;volatile
  7899  0E1D  0008               	return
  7900  0E1E                     __end_ofPL72:	
  7901  0E1E                     PL86:	
  7902  0E1E  0086               	movwf	6
  7903  0E1F  3F40               	moviw [0]fsr1
  7904  0E20  00B9               	movwf	??_Led_AutoRun+2
  7905  0E21  3F41               	moviw [1]fsr1
  7906  0E22  00BA               	movwf	??_Led_AutoRun+3
  7907  0E23  0838               	movf	??_Led_AutoRun+1,w
  7908  0E24  023A               	subwf	??_Led_AutoRun+3,w
  7909  0E25  1D03               	skipz
  7910  0E26  0008               	return
  7911  0E27  0837               	movf	??_Led_AutoRun,w
  7912  0E28  0239               	subwf	??_Led_AutoRun+2,w
  7913  0E29  0008               	return
  7914  0E2A                     __end_ofPL86:	
  7915  0E2A                     PL90:	
  7916  0E2A  0086               	movwf	6
  7917  0E2B  3F40               	moviw [0]fsr1
  7918  0E2C  00B5               	movwf	??_Led_Initialize+2
  7919  0E2D  3F41               	moviw [1]fsr1
  7920  0E2E  00B6               	movwf	??_Led_Initialize+3
  7921  0E2F  0834               	movf	??_Led_Initialize+1,w
  7922  0E30  0236               	subwf	??_Led_Initialize+3,w
  7923  0E31  1D03               	skipz
  7924  0E32  0008               	return
  7925  0E33  0833               	movf	??_Led_Initialize,w
  7926  0E34  0235               	subwf	??_Led_Initialize+2,w
  7927  0E35  0008               	return
  7928  0E36                     __end_ofPL90:	
  7929  0E36                     PL92:	
  7930  0E36  0086               	movwf	6
  7931  0E37  3023               	movlw	35
  7932  0E38  0087               	movwf	7
  7933  0E39  3F40               	moviw [0]fsr1
  7934  0E3A  00B3               	movwf	??_Led_Initialize
  7935  0E3B  3F41               	moviw [1]fsr1
  7936  0E3C  0008               	return
  7937  0E3D                     __end_ofPL92:	
  7938  0E3D                     PL102:	
  7939  0E3D  0086               	movwf	6
  7940  0E3E  3023               	movlw	35
  7941  0E3F  0087               	movwf	7
  7942  0E40  3F40               	moviw [0]fsr1
  7943  0E41  00B6               	movwf	??_Led_InitPara
  7944  0E42  3F41               	moviw [1]fsr1
  7945  0E43  00B7               	movwf	??_Led_InitPara+1
  7946  0E44  3005               	movlw	5
  7947  0E45  0237               	subwf	??_Led_InitPara+1,w
  7948  0E46  34A0               	retlw	160
  7949  0E47                     __end_ofPL102:	
  7950  0E47                     PL110:	
  7951  0E47  0086               	movwf	6
  7952  0E48  0187               	clrf	7
  7953  0E49  0801               	movf	1,w
  7954  0E4A  0020               	movlb	0	; select bank0
  7955  0E4B  00AD               	movwf	___wmul@multiplier
  7956  0E4C  303C               	movlw	60
  7957  0E4D  01AE               	clrf	___wmul@multiplier+1
  7958  0E4E  00AF               	movwf	___wmul@multiplicand
  7959  0E4F  01B0               	clrf	___wmul@multiplicand+1
  7960  0E50  0008               	return
  7961  0E51                     __end_ofPL110:	
  7962  0E51                     PL112:	
  7963  0E51  30CA               	movlw	low _gLedRunPara
  7964  0E52  0020               	movlb	0	; select bank0
  7965  0E53  00AD               	movwf	Util_IncValue@pSrc
  7966  0E54  3000               	movlw	high _gLedRunPara
  7967  0E55  00AE               	movwf	Util_IncValue@pSrc+1
  7968  0E56  30E8               	movlw	232
  7969  0E57  00AF               	movwf	Util_IncValue@max
  7970  0E58  3003               	movlw	3
  7971  0E59  00B0               	movwf	Util_IncValue@max+1
  7972  0E5A  0008               	return
  7973  0E5B                     __end_ofPL112:	
  7974  0E5B                     PL114:	
  7975  0E5B  0086               	movwf	6
  7976  0E5C  3F40               	moviw [0]fsr1
  7977  0E5D  00D8               	movwf	(_gLedRunPara^(0+128)+14)	;volatile
  7978  0E5E  3F41               	moviw [1]fsr1
  7979  0E5F  00D9               	movwf	((_gLedRunPara+1)^(0+128)+14)	;volatile
  7980  0E60  0008               	return
  7981  0E61                     __end_ofPL114:	
  7982  0E61                     PL116:	
  7983  0E61  0086               	movwf	6
  7984  0E62  3F40               	moviw [0]fsr1
  7985  0E63  00DA               	movwf	(_gLedRunPara^(0+128)+16)	;volatile
  7986  0E64  3F41               	moviw [1]fsr1
  7987  0E65  00DB               	movwf	((_gLedRunPara+1)^(0+128)+16)	;volatile
  7988  0E66  0008               	return
  7989  0E67                     __end_ofPL116:	
  7990  0E67                     PL120:	
  7991  0E67  0086               	movwf	6
  7992  0E68  3F40               	moviw [0]fsr1
  7993  0E69  00D6               	movwf	(_gLedRunPara^(0+128)+12)	;volatile
  7994  0E6A  3F41               	moviw [1]fsr1
  7995  0E6B  00D7               	movwf	((_gLedRunPara+1)^(0+128)+12)	;volatile
  7996  0E6C  0008               	return
  7997  0E6D                     __end_ofPL120:	
  7998  0E6D                     PL132:	
  7999  0E6D  0086               	movwf	6
  8000  0E6E  0187               	clrf	7
  8001  0E6F  3F40               	moviw [0]fsr1
  8002  0E70  00B7               	movwf	??_Led_AutoRun
  8003  0E71  3F41               	moviw [1]fsr1
  8004  0E72  00B8               	movwf	??_Led_AutoRun+1
  8005  0E73  353B               	lslf	Led_AutoRun@i,w
  8006  0E74  0008               	return
  8007  0E75                     __end_ofPL132:	
  8008  0E75                     PL142:	
  8009  0E75  0C01               	rrf	1,w
  8010  0E76  00B3               	movwf	??_Led_Initialize
  8011  0E77  0CB3               	rrf	??_Led_Initialize,f
  8012  0E78  0C33               	rrf	??_Led_Initialize,w
  8013  0E79  390F               	andlw	15
  8014  0E7A  0008               	return
  8015  0E7B                     __end_ofPL142:	
  8016  0E7B                     PL144:	
  8017  0E7B  081F               	movf	31,w	;volatile
  8018  0E7C  39FC               	andlw	-4
  8019  0E7D  3801               	iorlw	1
  8020  0E7E  009F               	movwf	31	;volatile
  8021  0E7F  0008               	return
  8022  0E80                     __end_ofPL144:	
  8023  0E80                     PL152:	
  8024  0E80  3055               	movlw	85
  8025  0E81  003C               	movlb	28	; select bank28
  8026  0E82  008F               	movwf	15	;volatile
  8027  0E83  30AA               	movlw	170
  8028  0E84  008F               	movwf	15	;volatile
  8029  0E85  0008               	return
  8030  0E86                     __end_ofPL152:	
  8031  0E86                     PL164:	
  8032  0E86  0086               	movwf	6
  8033  0E87  3000               	movlw	0
  8034  0E88  3FC0               	movwi [0]fsr1
  8035  0E89  3FC1               	movwi [1]fsr1
  8036  0E8A  0008               	return
  8037  0E8B                     __end_ofPL164:	
  8038  0E8B                     PL170:	
  8039  0E8B  0838               	movf	Audio_GetValue@value+1,w
  8040  0E8C  00CE               	movwf	Audio_GetValue@max+1
  8041  0E8D  0837               	movf	Audio_GetValue@value,w
  8042  0E8E  00CD               	movwf	Audio_GetValue@max
  8043  0E8F  0008               	return
  8044  0E90                     __end_ofPL170:	
  8045  0E90                     __ptext9:	
  8046 ;; *************** function _PWM4_Initialize *****************
  8047 ;; Defined at:
  8048 ;;		line 42 in file "driver/src/pwm.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;		None
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;		None
  8053 ;; Return value:  Size  Location     Type
  8054 ;;                  1    wreg      void 
  8055 ;; Registers used:
  8056 ;;		wreg, status,2, status,0
  8057 ;; Tracked objects:
  8058 ;;		On entry : 1F/5
  8059 ;;		On exit  : 1F/5
  8060 ;;		Unchanged: 0/0
  8061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;Total ram usage:        0 bytes
  8067 ;; Hardware stack levels used:    1
  8068 ;; Hardware stack levels required when called:    7
  8069 ;; This function calls:
  8070 ;;		Nothing
  8071 ;; This function is called by:
  8072 ;;		_SYSTEM_Initialize
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           
  8077                           ;psect for function _PWM4_Initialize
  8078  0E90                     _PWM4_Initialize:	
  8079                           
  8080                           ;pwm.c: 44: CCP4CON = 0x8F;
  8081                           
  8082                           ;incstack = 0
  8083                           ; Regs used in _PWM4_Initialize: [wreg+status,2+status,0]
  8084  0E90  308F               	movlw	143
  8085  0E91  0026               	movlb	6	; select bank6
  8086  0E92  0097               	movwf	23	;volatile
  8087                           
  8088                           ;pwm.c: 45: CCPR4 = 0;
  8089  0E93  0195               	clrf	21	;volatile
  8090  0E94  0196               	clrf	22	;volatile
  8091                           
  8092                           ;pwm.c: 46: CCPTMRSbits.C4TSEL = 0x1;
  8093  0E95  0025               	movlb	5	; select bank5
  8094  0E96  081F               	movf	31,w	;volatile
  8095  0E97  393F               	andlw	-193
  8096  0E98  3840               	iorlw	64
  8097  0E99  009F               	movwf	31	;volatile
  8098  0E9A  0008               	return
  8099  0E9B                     __end_of_PWM4_Initialize:	
  8100  0E9B                     __ptext8:	
  8101 ;; *************** function _PWM5_Initialize *****************
  8102 ;; Defined at:
  8103 ;;		line 54 in file "driver/src/pwm.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;		None
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;		None
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  1    wreg      void 
  8110 ;; Registers used:
  8111 ;;		wreg, status,2, status,0
  8112 ;; Tracked objects:
  8113 ;;		On entry : 1F/5
  8114 ;;		On exit  : 1F/C
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;Total ram usage:        0 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:    7
  8124 ;; This function calls:
  8125 ;;		Nothing
  8126 ;; This function is called by:
  8127 ;;		_SYSTEM_Initialize
  8128 ;; This function uses a non-reentrant model
  8129 ;;
  8130                           
  8131                           
  8132                           ;psect for function _PWM5_Initialize
  8133  0E9B                     _PWM5_Initialize:	
  8134                           
  8135                           ;pwm.c: 56: PWM5CON = 0x80;
  8136                           
  8137                           ;incstack = 0
  8138                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
  8139  0E9B  3080               	movlw	128
  8140  0E9C  002C               	movlb	12	; select bank12
  8141  0E9D  0099               	movwf	25	;volatile
  8142                           
  8143                           ;pwm.c: 57: PWM5DC = 0;
  8144  0E9E  0197               	clrf	23	;volatile
  8145  0E9F  0198               	clrf	24	;volatile
  8146                           
  8147                           ;pwm.c: 58: PWMTMRSbits.P5TSEL = 0x1;
  8148  0EA0  2E7B               	ljmp	PL144	;call to abstracted procedure
  8149  0EA1                     __end_of_PWM5_Initialize:	
  8150  0EA1                     __ptext7:	
  8151 ;; *************** function _TMR0_Initialize_Default *****************
  8152 ;; Defined at:
  8153 ;;		line 5 in file "driver/src/tmr0.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;		None
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;		None
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  1    wreg      void 
  8160 ;; Registers used:
  8161 ;;		wreg, status,2
  8162 ;; Tracked objects:
  8163 ;;		On entry : 1F/12
  8164 ;;		On exit  : 1F/1
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;Total ram usage:        0 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    7
  8174 ;; This function calls:
  8175 ;;		Nothing
  8176 ;; This function is called by:
  8177 ;;		_SYSTEM_Initialize
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           
  8182                           ;psect for function _TMR0_Initialize_Default
  8183  0EA1                     _TMR0_Initialize_Default:	
  8184                           
  8185                           ;tmr0.c: 7: T0CON0 = 0x00;
  8186                           
  8187                           ;incstack = 0
  8188                           ; Regs used in _TMR0_Initialize_Default: [wreg+status,2]
  8189  0EA1  0020               	movlb	0	; select bank0
  8190  0EA2  0197               	clrf	23	;volatile
  8191                           
  8192                           ;tmr0.c: 8: T0CON1 = 0xC0 | 0x10 | 0x07;
  8193  0EA3  30D7               	movlw	215
  8194  0EA4  0098               	movwf	24	;volatile
  8195                           
  8196                           ;tmr0.c: 10: TMR0H = 0xFF;
  8197  0EA5  30FF               	movlw	255
  8198  0EA6  0096               	movwf	22	;volatile
  8199                           
  8200                           ;tmr0.c: 11: TMR0L = 0x00;
  8201  0EA7  0195               	clrf	21	;volatile
  8202                           
  8203                           ;tmr0.c: 13: PIR0bits.TMR0IF = 0;
  8204  0EA8  1290               	bcf	16,5	;volatile
  8205                           
  8206                           ;tmr0.c: 14: PIE0bits.TMR0IE = 1;
  8207  0EA9  0021               	movlb	1	; select bank1
  8208  0EAA  1690               	bsf	16,5	;volatile
  8209  0EAB  0008               	return
  8210  0EAC                     __end_of_TMR0_Initialize_Default:	
  8211  0EAC                     __ptext6:	
  8212 ;; *************** function _TMR1_Initialize_Default *****************
  8213 ;; Defined at:
  8214 ;;		line 9 in file "driver/src/tmr1.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;		None
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;		None
  8219 ;; Return value:  Size  Location     Type
  8220 ;;                  1    wreg      void 
  8221 ;; Registers used:
  8222 ;;		wreg, status,2
  8223 ;; Tracked objects:
  8224 ;;		On entry : 1F/1
  8225 ;;		On exit  : 1F/1
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;Total ram usage:        0 bytes
  8233 ;; Hardware stack levels used:    1
  8234 ;; Hardware stack levels required when called:    7
  8235 ;; This function calls:
  8236 ;;		Nothing
  8237 ;; This function is called by:
  8238 ;;		_SYSTEM_Initialize
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           
  8243                           ;psect for function _TMR1_Initialize_Default
  8244  0EAC                     _TMR1_Initialize_Default:	
  8245                           
  8246                           ;tmr1.c: 11: T1CON = 0x30 | 0x04 | 0x00;
  8247                           
  8248                           ;incstack = 0
  8249                           ; Regs used in _TMR1_Initialize_Default: [wreg+status,2]
  8250  0EAC  3034               	movlw	52
  8251  0EAD  0020               	movlb	0	; select bank0
  8252  0EAE  009B               	movwf	27	;volatile
  8253                           
  8254                           ;tmr1.c: 12: T1GCON = 0x00 | 0x80 | 0x40 | 0x08;
  8255  0EAF  30C8               	movlw	200
  8256  0EB0  009C               	movwf	28	;volatile
  8257                           
  8258                           ;tmr1.c: 14: TMR1 = 0x00;
  8259  0EB1  0199               	clrf	25	;volatile
  8260  0EB2  019A               	clrf	26	;volatile
  8261                           
  8262                           ;tmr1.c: 15: PIR1bits.TMR1IF = 0;
  8263  0EB3  1011               	bcf	17,0	;volatile
  8264                           
  8265                           ;tmr1.c: 16: PIE1bits.TMR1IE = 0;
  8266  0EB4  0021               	movlb	1	; select bank1
  8267  0EB5  1011               	bcf	17,0	;volatile
  8268                           
  8269                           ;tmr1.c: 17: PIR1bits.TMR1GIF = 0;
  8270  0EB6  0020               	movlb	0	; select bank0
  8271  0EB7  1391               	bcf	17,7	;volatile
  8272                           
  8273                           ;tmr1.c: 18: PIE1bits.TMR1GIE = 1;
  8274  0EB8  0021               	movlb	1	; select bank1
  8275  0EB9  1791               	bsf	17,7	;volatile
  8276  0EBA  0008               	return
  8277  0EBB                     __end_of_TMR1_Initialize_Default:	
  8278  0EBB                     __ptext5:	
  8279 ;; *************** function _TMR2_Initialize_Default *****************
  8280 ;; Defined at:
  8281 ;;		line 7 in file "driver/src/tmr2.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;		None
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;		None
  8286 ;; Return value:  Size  Location     Type
  8287 ;;                  1    wreg      void 
  8288 ;; Registers used:
  8289 ;;		wreg, status,2
  8290 ;; Tracked objects:
  8291 ;;		On entry : 1F/1
  8292 ;;		On exit  : 1F/1
  8293 ;;		Unchanged: 0/0
  8294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;Total ram usage:        0 bytes
  8300 ;; Hardware stack levels used:    1
  8301 ;; Hardware stack levels required when called:    7
  8302 ;; This function calls:
  8303 ;;		Nothing
  8304 ;; This function is called by:
  8305 ;;		_SYSTEM_Initialize
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           
  8310                           ;psect for function _TMR2_Initialize_Default
  8311  0EBB                     _TMR2_Initialize_Default:	
  8312                           
  8313                           ;tmr2.c: 9: T2CON = 0x00 | 0x78;
  8314                           
  8315                           ;incstack = 0
  8316                           ; Regs used in _TMR2_Initialize_Default: [wreg+status,2]
  8317  0EBB  3078               	movlw	120
  8318  0EBC  0020               	movlb	0	; select bank0
  8319  0EBD  009F               	movwf	31	;volatile
  8320                           
  8321                           ;tmr2.c: 10: PR2 = 0xF9;
  8322  0EBE  30F9               	movlw	249
  8323  0EBF  009E               	movwf	30	;volatile
  8324                           
  8325                           ;tmr2.c: 11: TMR2 = 0x00;
  8326  0EC0  019D               	clrf	29	;volatile
  8327                           
  8328                           ;tmr2.c: 12: PIR1bits.TMR2IF = 0;
  8329  0EC1  1091               	bcf	17,1	;volatile
  8330                           
  8331                           ;tmr2.c: 13: PIE1bits.TMR2IE = 1;
  8332  0EC2  0021               	movlb	1	; select bank1
  8333  0EC3  1491               	bsf	17,1	;volatile
  8334  0EC4  0008               	return
  8335  0EC5                     __end_of_TMR2_Initialize_Default:	
  8336  0EC5                     __ptext4:	
  8337 ;; *************** function _TMR4_Initialize_Default *****************
  8338 ;; Defined at:
  8339 ;;		line 7 in file "driver/src/tmr4.c"
  8340 ;; Parameters:    Size  Location     Type
  8341 ;;		None
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;		None
  8344 ;; Return value:  Size  Location     Type
  8345 ;;                  1    wreg      void 
  8346 ;; Registers used:
  8347 ;;		wreg, status,2
  8348 ;; Tracked objects:
  8349 ;;		On entry : 1F/1
  8350 ;;		On exit  : 1F/1
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;Total ram usage:        0 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; Hardware stack levels required when called:    7
  8360 ;; This function calls:
  8361 ;;		Nothing
  8362 ;; This function is called by:
  8363 ;;		_SYSTEM_Initialize
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           
  8368                           ;psect for function _TMR4_Initialize_Default
  8369  0EC5                     _TMR4_Initialize_Default:	
  8370                           
  8371                           ;tmr4.c: 9: T4CON = 0x03 | 0x78;
  8372                           
  8373                           ;incstack = 0
  8374                           ; Regs used in _TMR4_Initialize_Default: [wreg+status,2]
  8375  0EC5  307B               	movlw	123
  8376  0EC6  0028               	movlb	8	; select bank8
  8377  0EC7  0097               	movwf	23	;volatile
  8378                           
  8379                           ;tmr4.c: 10: PR4 = 0xF9;
  8380  0EC8  30F9               	movlw	249
  8381  0EC9  0096               	movwf	22	;volatile
  8382                           
  8383                           ;tmr4.c: 11: TMR4 = 0x00;
  8384  0ECA  0195               	clrf	21	;volatile
  8385                           
  8386                           ;tmr4.c: 13: PIR2bits.TMR4IF = 0;
  8387  0ECB  0020               	movlb	0	; select bank0
  8388  0ECC  1092               	bcf	18,1	;volatile
  8389                           
  8390                           ;tmr4.c: 14: PIE2bits.TMR4IE = 1;
  8391  0ECD  0021               	movlb	1	; select bank1
  8392  0ECE  1492               	bsf	18,1	;volatile
  8393  0ECF  0008               	return
  8394  0ED0                     __end_of_TMR4_Initialize_Default:	
  8395  0ED0                     __ptext60:	
  8396 ;; *************** function _Led_TurnOffRamp *****************
  8397 ;; Defined at:
  8398 ;;		line 212 in file "user/src/led.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;		None
  8401 ;; Auto vars:     Size  Location     Type
  8402 ;;  i               1   13[BANK0 ] unsigned char 
  8403 ;; Return value:  Size  Location     Type
  8404 ;;                  1    wreg      void 
  8405 ;; Registers used:
  8406 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8407 ;; Tracked objects:
  8408 ;;		On entry : 1F/0
  8409 ;;		On exit  : 1F/0
  8410 ;;		Unchanged: 0/0
  8411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8413 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8415 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8416 ;;Total ram usage:        1 bytes
  8417 ;; Hardware stack levels used:    1
  8418 ;; Hardware stack levels required when called:    7
  8419 ;; This function calls:
  8420 ;;		Nothing
  8421 ;; This function is called by:
  8422 ;;		_Led_Initialize
  8423 ;; This function uses a non-reentrant model
  8424 ;;
  8425                           
  8426                           
  8427                           ;psect for function _Led_TurnOffRamp
  8428  0ED0                     _Led_TurnOffRamp:	
  8429  0ED0                     l6197:	
  8430                           ;incstack = 0
  8431                           ; Regs used in _Led_TurnOffRamp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8432                           
  8433                           
  8434                           ;led.c: 213: gLedPara.mOn = 0;
  8435  0ED0  307B               	movlw	123
  8436  0ED1  0086               	movwf	6
  8437  0ED2  3023               	movlw	35
  8438  0ED3  0087               	movwf	7
  8439  0ED4  1081               	bcf	1,1
  8440                           
  8441                           ;led.c: 214: for (uint8_t i = 0; i < 5; i++) {
  8442  0ED5  01AD               	clrf	Led_TurnOffRamp@i
  8443  0ED6                     l6205:	
  8444                           
  8445                           ;led.c: 215: gLedRunPara.mTargetBright[i] = 0;
  8446  0ED6  352D               	lslf	Led_TurnOffRamp@i,w
  8447  0ED7  26DF  3188         	fcall	PL140	;call to abstracted procedure
  8448  0ED9  3005               	movlw	5
  8449  0EDA  0AAD               	incf	Led_TurnOffRamp@i,f
  8450  0EDB  022D               	subwf	Led_TurnOffRamp@i,w
  8451  0EDC  1803               	btfsc	3,0
  8452  0EDD  0008               	return
  8453  0EDE  2ED6               	goto	l6205
  8454  0EDF                     __end_of_Led_TurnOffRamp:	
  8455  0EDF                     PL140:	
  8456  0EDF  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  8457  0EE0  0086               	movwf	6
  8458  0EE1  3000               	movlw	0
  8459  0EE2  0187               	clrf	7
  8460  0EE3  3FC0               	movwi [0]fsr1
  8461  0EE4  3FC1               	movwi [1]fsr1
  8462  0EE5  0008               	return
  8463  0EE6                     __end_ofPL140:	
  8464  0EE6                     __ptext59:	
  8465 ;; *************** function _Led_TurnOnRamp *****************
  8466 ;; Defined at:
  8467 ;;		line 205 in file "user/src/led.c"
  8468 ;; Parameters:    Size  Location     Type
  8469 ;;		None
  8470 ;; Auto vars:     Size  Location     Type
  8471 ;;  i               1   17[BANK0 ] unsigned char 
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  1    wreg      void 
  8474 ;; Registers used:
  8475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8476 ;; Tracked objects:
  8477 ;;		On entry : 1F/0
  8478 ;;		On exit  : 1F/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8483 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8485 ;;Total ram usage:        5 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    7
  8488 ;; This function calls:
  8489 ;;		Nothing
  8490 ;; This function is called by:
  8491 ;;		_Led_Initialize
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           
  8496                           ;psect for function _Led_TurnOnRamp
  8497  0EE6                     _Led_TurnOnRamp:	
  8498                           
  8499                           ;led.c: 206: gLedPara.mOn = 1;
  8500                           
  8501                           ;incstack = 0
  8502                           ; Regs used in _Led_TurnOnRamp: [wreg-fsr1h+status,2+status,0]
  8503  0EE6  2701  3188         	fcall	PL150	;call to abstracted procedure
  8504                           
  8505                           ;led.c: 207: for (uint8_t i = 0; i < 5; i++) {
  8506  0EE8  01B1               	clrf	Led_TurnOnRamp@i
  8507  0EE9                     l6219:	
  8508                           
  8509                           ;led.c: 208: gLedRunPara.mTargetBright[i] = gLedPara.mBright[i];
  8510  0EE9  0831               	movf	Led_TurnOnRamp@i,w
  8511  0EEA  00AD               	movwf	??_Led_TurnOnRamp
  8512  0EEB  307E               	movlw	126
  8513  0EEC  01AE               	clrf	??_Led_TurnOnRamp+1
  8514  0EED  35AD               	lslf	??_Led_TurnOnRamp,f
  8515  0EEE  0DAE               	rlf	??_Led_TurnOnRamp+1,f
  8516  0EEF  00AF               	movwf	??_Led_TurnOnRamp+2
  8517  0EF0  3023               	movlw	35
  8518  0EF1  00B0               	movwf	??_Led_TurnOnRamp+3
  8519  0EF2  082D               	movf	??_Led_TurnOnRamp,w
  8520  0EF3  072F               	addwf	??_Led_TurnOnRamp+2,w
  8521  0EF4  0086               	movwf	6
  8522  0EF5  082E               	movf	??_Led_TurnOnRamp+1,w
  8523  0EF6  3D30               	addwfc	??_Led_TurnOnRamp+3,w
  8524  0EF7  0087               	movwf	7
  8525  0EF8  3531               	lslf	Led_TurnOnRamp@i,w
  8526  0EF9  25EE  3188         	fcall	PL20	;call to abstracted procedure
  8527  0EFB  3005               	movlw	5
  8528  0EFC  0AB1               	incf	Led_TurnOnRamp@i,f
  8529  0EFD  0231               	subwf	Led_TurnOnRamp@i,w
  8530  0EFE  1803               	btfsc	3,0
  8531  0EFF  0008               	return
  8532  0F00  2EE9               	goto	l6219
  8533  0F01                     __end_of_Led_TurnOnRamp:	
  8534  0F01                     PL150:	
  8535  0F01  307B               	movlw	123
  8536  0F02  0086               	movwf	6
  8537  0F03  3023               	movlw	35
  8538  0F04  0087               	movwf	7
  8539  0F05  1481               	bsf	1,1
  8540  0F06  0008               	return
  8541  0F07                     __end_ofPL150:	
  8542  0F07                     __ptext31:	
  8543 ;; *************** function _TMR2_SetInterruptHandler *****************
  8544 ;; Defined at:
  8545 ;;		line 35 in file "driver/src/tmr2.c"
  8546 ;; Parameters:    Size  Location     Type
  8547 ;;  handler         2   13[BANK0 ] PTR FTN()void 
  8548 ;;		 -> Led_Run(1), 
  8549 ;; Auto vars:     Size  Location     Type
  8550 ;;		None
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  1    wreg      void 
  8553 ;; Registers used:
  8554 ;;		wreg
  8555 ;; Tracked objects:
  8556 ;;		On entry : 1F/0
  8557 ;;		On exit  : 1F/1
  8558 ;;		Unchanged: 0/0
  8559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8560 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8563 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8564 ;;Total ram usage:        2 bytes
  8565 ;; Hardware stack levels used:    1
  8566 ;; Hardware stack levels required when called:    7
  8567 ;; This function calls:
  8568 ;;		Nothing
  8569 ;; This function is called by:
  8570 ;;		_Interrupt_Initialize
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           
  8575                           ;psect for function _TMR2_SetInterruptHandler
  8576  0F07                     _TMR2_SetInterruptHandler:	
  8577                           
  8578                           ;tmr2.c: 37: tmr2_isr_handler = handler;
  8579                           
  8580                           ;incstack = 0
  8581                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  8582  0F07  082E               	movf	TMR2_SetInterruptHandler@handler+1,w
  8583  0F08  0021               	movlb	1	; select bank1
  8584  0F09  00E7               	movwf	(_tmr2_isr_handler+1)^(0+128)
  8585  0F0A  0020               	movlb	0	; select bank0
  8586  0F0B  082D               	movf	TMR2_SetInterruptHandler@handler,w
  8587  0F0C  0021               	movlb	1	; select bank1
  8588  0F0D  00E6               	movwf	_tmr2_isr_handler^(0+128)
  8589  0F0E  0008               	return
  8590  0F0F                     __end_of_TMR2_SetInterruptHandler:	
  8591  0F0F                     __ptext30:	
  8592 ;; *************** function _TMR4_SetInterruptHandler *****************
  8593 ;; Defined at:
  8594 ;;		line 37 in file "driver/src/tmr4.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;  handler         2   13[BANK0 ] PTR FTN()void 
  8597 ;;		 -> Led_Notice(1), 
  8598 ;; Auto vars:     Size  Location     Type
  8599 ;;		None
  8600 ;; Return value:  Size  Location     Type
  8601 ;;                  1    wreg      void 
  8602 ;; Registers used:
  8603 ;;		wreg
  8604 ;; Tracked objects:
  8605 ;;		On entry : 1F/0
  8606 ;;		On exit  : 1F/1
  8607 ;;		Unchanged: 0/0
  8608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8609 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8612 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8613 ;;Total ram usage:        2 bytes
  8614 ;; Hardware stack levels used:    1
  8615 ;; Hardware stack levels required when called:    7
  8616 ;; This function calls:
  8617 ;;		Nothing
  8618 ;; This function is called by:
  8619 ;;		_Interrupt_Initialize
  8620 ;; This function uses a non-reentrant model
  8621 ;;
  8622                           
  8623                           
  8624                           ;psect for function _TMR4_SetInterruptHandler
  8625  0F0F                     _TMR4_SetInterruptHandler:	
  8626  0F0F                     l5049:	
  8627                           ;incstack = 0
  8628                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  8629                           
  8630                           
  8631                           ;tmr4.c: 39: tmr4_isr_handler = handler;
  8632  0F0F  082E               	movf	TMR4_SetInterruptHandler@handler+1,w
  8633  0F10  0021               	movlb	1	; select bank1
  8634  0F11  00E5               	movwf	(_tmr4_isr_handler+1)^(0+128)
  8635  0F12  0020               	movlb	0	; select bank0
  8636  0F13  082D               	movf	TMR4_SetInterruptHandler@handler,w
  8637  0F14  0021               	movlb	1	; select bank1
  8638  0F15  00E4               	movwf	_tmr4_isr_handler^(0+128)
  8639  0F16  0008               	return
  8640  0F17                     __end_of_TMR4_SetInterruptHandler:	
  8641  0F17                     __ptext24:	
  8642 ;; *************** function _Led_FirstPowerUp *****************
  8643 ;; Defined at:
  8644 ;;		line 17 in file "user/src/led.c"
  8645 ;; Parameters:    Size  Location     Type
  8646 ;;		None
  8647 ;; Auto vars:     Size  Location     Type
  8648 ;;  i               1   19[BANK0 ] unsigned char 
  8649 ;; Return value:  Size  Location     Type
  8650 ;;                  1    wreg      void 
  8651 ;; Registers used:
  8652 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8653 ;; Tracked objects:
  8654 ;;		On entry : 1F/0
  8655 ;;		On exit  : 1F/0
  8656 ;;		Unchanged: 0/0
  8657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8660 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8661 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8662 ;;Total ram usage:        7 bytes
  8663 ;; Hardware stack levels used:    1
  8664 ;; Hardware stack levels required when called:    7
  8665 ;; This function calls:
  8666 ;;		Nothing
  8667 ;; This function is called by:
  8668 ;;		_Led_InitPara
  8669 ;; This function uses a non-reentrant model
  8670 ;;
  8671                           
  8672                           
  8673                           ;psect for function _Led_FirstPowerUp
  8674  0F17                     _Led_FirstPowerUp:	
  8675  0F17                     l5117:	
  8676                           ;incstack = 0
  8677                           ; Regs used in _Led_FirstPowerUp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8678                           
  8679                           
  8680                           ;led.c: 19: if(gLedPara.mFirstPowerUp != 0x55){
  8681  0F17  307B               	movlw	123
  8682  0F18  0086               	movwf	6
  8683  0F19  3023               	movlw	35
  8684  0F1A  0087               	movwf	7
  8685  0F1B  3055               	movlw	85
  8686  0F1C  3141               	addfsr 1,1
  8687  0F1D  0601               	xorwf	1,w
  8688  0F1E  1903               	btfsc	3,2
  8689  0F1F  0008               	return
  8690                           
  8691                           ;led.c: 20: gLedPara.mFirstPowerUp = 0x55;
  8692  0F20  307C               	movlw	124
  8693  0F21  0086               	movwf	6
  8694  0F22  3023               	movlw	35
  8695  0F23  0087               	movwf	7
  8696  0F24  3055               	movlw	85
  8697  0F25  0081               	movwf	1
  8698                           
  8699                           ;led.c: 21: for (uint8_t i = 0; i < 5; i++) {
  8700  0F26  01B3               	clrf	Led_FirstPowerUp@i
  8701  0F27                     l5127:	
  8702                           
  8703                           ;led.c: 22: gLedPara.mDayBright[i] = 1000;
  8704  0F27  27A3  3188         	fcall	PL82	;call to abstracted procedure
  8705  0F29  30DA               	movlw	218
  8706  0F2A  2773  3188         	fcall	PL10	;call to abstracted procedure
  8707                           
  8708                           ;led.c: 23: gLedPara.mNightBright[i] = 0;
  8709  0F2C  0833               	movf	Led_FirstPowerUp@i,w
  8710  0F2D  00AD               	movwf	??_Led_FirstPowerUp
  8711  0F2E  30E6               	movlw	230
  8712                           
  8713                           ;led.c: 24: gLedPara.mStaticDayBright[i] = 1000;
  8714  0F2F  2784  3188         	fcall	PL36	;call to abstracted procedure
  8715  0F31  30B0               	movlw	176
  8716  0F32  2773  3188         	fcall	PL10	;call to abstracted procedure
  8717                           
  8718                           ;led.c: 25: gLedPara.mStaticNightBright[i] = 0;
  8719  0F34  0833               	movf	Led_FirstPowerUp@i,w
  8720  0F35  00AD               	movwf	??_Led_FirstPowerUp
  8721  0F36  30BA               	movlw	186
  8722                           
  8723                           ;led.c: 26: gLedPara.mStaticFishBright[i] = 1000;
  8724  0F37  2784  3188         	fcall	PL36	;call to abstracted procedure
  8725  0F39  30C4               	movlw	196
  8726  0F3A  2773  3188         	fcall	PL10	;call to abstracted procedure
  8727                           
  8728                           ;led.c: 27: gLedPara.mStaticPlantBright[i] = 1000;
  8729  0F3C  27A3  3188         	fcall	PL82	;call to abstracted procedure
  8730  0F3E  30CE               	movlw	206
  8731  0F3F  2773  3188         	fcall	PL10	;call to abstracted procedure
  8732  0F41  3005               	movlw	5
  8733  0F42  0AB3               	incf	Led_FirstPowerUp@i,f
  8734  0F43  0233               	subwf	Led_FirstPowerUp@i,w
  8735  0F44  1C03               	skipc
  8736  0F45  2F27               	goto	l5127
  8737                           
  8738                           ;led.c: 28: }
  8739                           ;led.c: 29: gLedPara.mSunrise = 390;
  8740  0F46  3086               	movlw	134
  8741  0F47  00AD               	movwf	??_Led_FirstPowerUp
  8742  0F48  3001               	movlw	1
  8743  0F49  00AE               	movwf	??_Led_FirstPowerUp+1
  8744  0F4A  30D8               	movlw	216
  8745  0F4B  0086               	movwf	6
  8746  0F4C  3023               	movlw	35
  8747  0F4D  0087               	movwf	7
  8748  0F4E  082D               	movf	??_Led_FirstPowerUp,w
  8749  0F4F  3FC0               	movwi [0]fsr1
  8750  0F50  082E               	movf	??_Led_FirstPowerUp+1,w
  8751  0F51  3FC1               	movwi [1]fsr1
  8752                           
  8753                           ;led.c: 30: gLedPara.mSunset = 1110;
  8754  0F52  3056               	movlw	86
  8755  0F53  00AD               	movwf	??_Led_FirstPowerUp
  8756  0F54  3004               	movlw	4
  8757  0F55  00AE               	movwf	??_Led_FirstPowerUp+1
  8758  0F56  30E4               	movlw	228
  8759  0F57  0086               	movwf	6
  8760                           
  8761                           ;led.c: 31: gLedPara.mNightBright[2] = 1000;
  8762  0F58  279A  3188         	fcall	PL66	;call to abstracted procedure
  8763  0F5A  30EA               	movlw	234
  8764  0F5B  0086               	movwf	6
  8765                           
  8766                           ;led.c: 32: gLedPara.mStaticNightBright[2] = 1000;
  8767  0F5C  279A               	fcall	PL66	;call to abstracted procedure
  8768  0F5D  30BE               	movlw	190
  8769  0F5E  0086               	movwf	6
  8770  0F5F  082D               	movf	??_Led_FirstPowerUp,w
  8771  0F60  3FC0               	movwi [0]fsr1
  8772  0F61  082E               	movf	??_Led_FirstPowerUp+1,w
  8773  0F62  3FC1               	movwi [1]fsr1
  8774                           
  8775                           ;led.c: 33: gLedPara.mStaticFishBright[0] = 0;
  8776  0F63  30C4               	movlw	196
  8777  0F64  0086               	movwf	6
  8778  0F65  3000               	movlw	0
  8779  0F66  3FC0               	movwi [0]fsr1
  8780  0F67  3FC1               	movwi [1]fsr1
  8781                           
  8782                           ;led.c: 34: gLedPara.mStaticFishBright[1] = 0;
  8783  0F68  30C6               	movlw	198
  8784  0F69  0086               	movwf	6
  8785  0F6A  3000               	movlw	0
  8786  0F6B  3FC0               	movwi [0]fsr1
  8787  0F6C  3FC1               	movwi [1]fsr1
  8788                           
  8789                           ;led.c: 35: gLedPara.mStaticPlantBright[1] = 0;
  8790  0F6D  30D0               	movlw	208
  8791  0F6E  0086               	movwf	6
  8792  0F6F  3000               	movlw	0
  8793  0F70  3FC0               	movwi [0]fsr1
  8794  0F71  3FC1               	movwi [1]fsr1
  8795  0F72  0008               	return
  8796  0F73                     __end_of_Led_FirstPowerUp:	
  8797  0F73                     PL10:	
  8798  0F73  01B0               	clrf	??_Led_FirstPowerUp+3
  8799  0F74  35AF               	lslf	??_Led_FirstPowerUp+2,f
  8800  0F75  0DB0               	rlf	??_Led_FirstPowerUp+3,f
  8801  0F76  00B1               	movwf	??_Led_FirstPowerUp+4
  8802  0F77  3023               	movlw	35
  8803  0F78  00B2               	movwf	??_Led_FirstPowerUp+5
  8804  0F79  082F               	movf	??_Led_FirstPowerUp+2,w
  8805  0F7A  0731               	addwf	??_Led_FirstPowerUp+4,w
  8806  0F7B  0086               	movwf	6
  8807  0F7C  0830               	movf	??_Led_FirstPowerUp+3,w
  8808  0F7D  3D32               	addwfc	??_Led_FirstPowerUp+5,w
  8809  0F7E  0087               	movwf	7
  8810  0F7F  082D               	movf	??_Led_FirstPowerUp,w
  8811  0F80  3FC0               	movwi [0]fsr1
  8812  0F81  082E               	movf	??_Led_FirstPowerUp+1,w
  8813  0F82  3FC1               	movwi [1]fsr1
  8814  0F83  0008               	return
  8815  0F84                     __end_ofPL10:	
  8816  0F84                     PL36:	
  8817  0F84  01AE               	clrf	??_Led_FirstPowerUp+1
  8818  0F85  35AD               	lslf	??_Led_FirstPowerUp,f
  8819  0F86  0DAE               	rlf	??_Led_FirstPowerUp+1,f
  8820  0F87  00AF               	movwf	??_Led_FirstPowerUp+2
  8821  0F88  3023               	movlw	35
  8822  0F89  00B0               	movwf	??_Led_FirstPowerUp+3
  8823  0F8A  082D               	movf	??_Led_FirstPowerUp,w
  8824  0F8B  072F               	addwf	??_Led_FirstPowerUp+2,w
  8825  0F8C  0086               	movwf	6
  8826  0F8D  082E               	movf	??_Led_FirstPowerUp+1,w
  8827  0F8E  3D30               	addwfc	??_Led_FirstPowerUp+3,w
  8828  0F8F  0087               	movwf	7
  8829  0F90  3000               	movlw	0
  8830  0F91  3FC0               	movwi [0]fsr1
  8831  0F92  3FC1               	movwi [1]fsr1
  8832  0F93  30E8               	movlw	232
  8833  0F94  00AD               	movwf	??_Led_FirstPowerUp
  8834  0F95  3003               	movlw	3
  8835  0F96  00AE               	movwf	??_Led_FirstPowerUp+1
  8836  0F97  0833               	movf	Led_FirstPowerUp@i,w
  8837  0F98  00AF               	movwf	??_Led_FirstPowerUp+2
  8838  0F99  0008               	return
  8839  0F9A                     __end_ofPL36:	
  8840  0F9A                     PL66:	
  8841  0F9A  082D               	movf	??_Led_FirstPowerUp,w
  8842  0F9B  3FC0               	movwi [0]fsr1
  8843  0F9C  082E               	movf	??_Led_FirstPowerUp+1,w
  8844  0F9D  3FC1               	movwi [1]fsr1
  8845  0F9E  30E8               	movlw	232
  8846  0F9F  00AD               	movwf	??_Led_FirstPowerUp
  8847  0FA0  3003               	movlw	3
  8848  0FA1  00AE               	movwf	??_Led_FirstPowerUp+1
  8849  0FA2  0008               	return
  8850  0FA3                     __end_ofPL66:	
  8851  0FA3                     PL82:	
  8852  0FA3  30E8               	movlw	232
  8853  0FA4  00AD               	movwf	??_Led_FirstPowerUp
  8854  0FA5  3003               	movlw	3
  8855  0FA6  00AE               	movwf	??_Led_FirstPowerUp+1
  8856  0FA7  0833               	movf	Led_FirstPowerUp@i,w
  8857  0FA8  00AF               	movwf	??_Led_FirstPowerUp+2
  8858  0FA9  0008               	return
  8859  0FAA                     __end_ofPL82:	
  8860  0FAA                     __ptext21:	
  8861 ;; *************** function _DATAEE_WriteBuffer *****************
  8862 ;; Defined at:
  8863 ;;		line 41 in file "driver/src/eeprom.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;  addr            2   17[BANK0 ] unsigned int 
  8866 ;;  buf             2   19[BANK0 ] PTR unsigned char 
  8867 ;;		 -> gLedPara(117), 
  8868 ;;  len             1   21[BANK0 ] unsigned char 
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;  i               1   22[BANK0 ] unsigned char 
  8871 ;; Return value:  Size  Location     Type
  8872 ;;                  1    wreg      void 
  8873 ;; Registers used:
  8874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8875 ;; Tracked objects:
  8876 ;;		On entry : 1F/0
  8877 ;;		On exit  : 1F/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8880 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8883 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8884 ;;Total ram usage:        6 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; Hardware stack levels required when called:    8
  8887 ;; This function calls:
  8888 ;;		_DATAEE_WriteByte
  8889 ;; This function is called by:
  8890 ;;		_Led_SaveParaIfChanged
  8891 ;; This function uses a non-reentrant model
  8892 ;;
  8893                           
  8894                           
  8895                           ;psect for function _DATAEE_WriteBuffer
  8896  0FAA                     _DATAEE_WriteBuffer:	
  8897  0FAA                     l4929:	
  8898                           ;incstack = 0
  8899                           ; Regs used in _DATAEE_WriteBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8900                           
  8901                           
  8902                           ;eeprom.c: 43: for ( uint8_t i = len; i != 0; i-- )
  8903  0FAA  0835               	movf	DATAEE_WriteBuffer@len,w
  8904  0FAB  00B6               	movwf	DATAEE_WriteBuffer@i
  8905  0FAC                     l4931:	
  8906  0FAC  0836               	movf	DATAEE_WriteBuffer@i,w
  8907  0FAD  1903               	btfsc	3,2
  8908  0FAE  0008               	return
  8909                           
  8910                           ;eeprom.c: 44: {
  8911                           ;eeprom.c: 45: DATAEE_WriteByte ( addr++, *buf++ );
  8912  0FAF  0832               	movf	DATAEE_WriteBuffer@addr+1,w
  8913  0FB0  00AE               	movwf	DATAEE_WriteByte@addr+1
  8914  0FB1  0831               	movf	DATAEE_WriteBuffer@addr,w
  8915  0FB2  00AD               	movwf	DATAEE_WriteByte@addr
  8916  0FB3  0833               	movf	DATAEE_WriteBuffer@buf,w
  8917  0FB4  0086               	movwf	6
  8918  0FB5  0834               	movf	DATAEE_WriteBuffer@buf+1,w
  8919  0FB6  0087               	movwf	7
  8920  0FB7  0801               	movf	1,w
  8921  0FB8  00AF               	movwf	DATAEE_WriteByte@byte
  8922  0FB9  27C3  3188         	fcall	_DATAEE_WriteByte
  8923  0FBB  0AB3               	incf	DATAEE_WriteBuffer@buf,f
  8924  0FBC  1903               	skipnz
  8925  0FBD  0AB4               	incf	DATAEE_WriteBuffer@buf+1,f
  8926  0FBE  0AB1               	incf	DATAEE_WriteBuffer@addr,f
  8927  0FBF  1903               	skipnz
  8928  0FC0  0AB2               	incf	DATAEE_WriteBuffer@addr+1,f
  8929  0FC1  03B6               	decf	DATAEE_WriteBuffer@i,f
  8930  0FC2  2FAC               	goto	l4931
  8931  0FC3                     __end_of_DATAEE_WriteBuffer:	
  8932  0FC3                     __ptext22:	
  8933 ;; *************** function _DATAEE_WriteByte *****************
  8934 ;; Defined at:
  8935 ;;		line 3 in file "driver/src/eeprom.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;  addr            2   13[BANK0 ] unsigned int 
  8938 ;;  byte            1   15[BANK0 ] unsigned char 
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;  GIEBitValue     1   16[BANK0 ] unsigned char 
  8941 ;; Return value:  Size  Location     Type
  8942 ;;                  1    wreg      void 
  8943 ;; Registers used:
  8944 ;;		wreg, status,2, status,0
  8945 ;; Tracked objects:
  8946 ;;		On entry : 1F/0
  8947 ;;		On exit  : 1F/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8950 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8953 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;Total ram usage:        4 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; Hardware stack levels required when called:    7
  8957 ;; This function calls:
  8958 ;;		Nothing
  8959 ;; This function is called by:
  8960 ;;		_DATAEE_WriteBuffer
  8961 ;; This function uses a non-reentrant model
  8962 ;;
  8963                           
  8964                           
  8965                           ;psect for function _DATAEE_WriteByte
  8966  0FC3                     _DATAEE_WriteByte:	
  8967                           
  8968                           ;eeprom.c: 5: uint8_t GIEBitValue = INTCONbits.GIE;
  8969                           
  8970                           ;incstack = 0
  8971                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  8972  0FC3  3000               	movlw	0
  8973  0FC4  1B8B               	btfsc	11,7	;volatile
  8974  0FC5  3001               	movlw	1
  8975  0FC6  00B0               	movwf	DATAEE_WriteByte@GIEBitValue
  8976                           
  8977                           ;eeprom.c: 7: NVMADRH = addr >> 8;
  8978  0FC7  082E               	movf	DATAEE_WriteByte@addr+1,w
  8979  0FC8  0031               	movlb	17	; select bank17
  8980  0FC9  0092               	movwf	18	;volatile
  8981                           
  8982                           ;eeprom.c: 8: NVMADRL = addr & 0xFF;
  8983  0FCA  0020               	movlb	0	; select bank0
  8984  0FCB  082D               	movf	DATAEE_WriteByte@addr,w
  8985  0FCC  0031               	movlb	17	; select bank17
  8986  0FCD  0091               	movwf	17	;volatile
  8987                           
  8988                           ;eeprom.c: 9: NVMDATL = byte;
  8989  0FCE  0020               	movlb	0	; select bank0
  8990  0FCF  082F               	movf	DATAEE_WriteByte@byte,w
  8991  0FD0  0031               	movlb	17	; select bank17
  8992  0FD1  0093               	movwf	19	;volatile
  8993                           
  8994                           ;eeprom.c: 10: NVMCON1bits.NVMREGS = 1;
  8995  0FD2  1715               	bsf	21,6	;volsfr
  8996                           
  8997                           ;eeprom.c: 11: NVMCON1bits.WREN = 1;
  8998  0FD3  1515               	bsf	21,2	;volsfr
  8999                           
  9000                           ;eeprom.c: 12: INTCONbits.GIE = 0;
  9001  0FD4  138B               	bcf	11,7	;volatile
  9002                           
  9003                           ;eeprom.c: 13: NVMCON2 = 0x55;
  9004  0FD5  3055               	movlw	85
  9005  0FD6  0096               	movwf	22	;volsfr
  9006                           
  9007                           ;eeprom.c: 14: NVMCON2 = 0xAA;
  9008  0FD7  30AA               	movlw	170
  9009  0FD8  0096               	movwf	22	;volsfr
  9010                           
  9011                           ;eeprom.c: 15: NVMCON1bits.WR = 1;
  9012  0FD9  1495               	bsf	21,1	;volsfr
  9013  0FDA                     l46:	
  9014                           ;eeprom.c: 17: while ( NVMCON1bits.WR );
  9015                           
  9016  0FDA  1895               	btfsc	21,1	;volsfr
  9017  0FDB  2FDA               	goto	l46
  9018                           
  9019                           ;eeprom.c: 19: NVMCON1bits.WREN = 0;
  9020  0FDC  1115               	bcf	21,2	;volsfr
  9021                           
  9022                           ;eeprom.c: 20: INTCONbits.GIE = GIEBitValue;
  9023  0FDD  0020               	movlb	0	; select bank0
  9024  0FDE  0C30               	rrf	DATAEE_WriteByte@GIEBitValue,w
  9025  0FDF  1C03               	skipc
  9026  0FE0  138B               	bcf	11,7	;volatile
  9027  0FE1  1803               	skipnc
  9028  0FE2  178B               	bsf	11,7	;volatile
  9029  0FE3  0008               	return
  9030  0FE4                     __end_of_DATAEE_WriteByte:	
  9031  0FE4                     __ptext16:	
  9032 ;; *************** function _ADC_Initialize_Default *****************
  9033 ;; Defined at:
  9034 ;;		line 14 in file "driver/src/adc.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;		None
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;		None
  9039 ;; Return value:  Size  Location     Type
  9040 ;;                  1    wreg      void 
  9041 ;; Registers used:
  9042 ;;		wreg, status,2
  9043 ;; Tracked objects:
  9044 ;;		On entry : 1F/1
  9045 ;;		On exit  : 1F/1
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9052 ;;Total ram usage:        0 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    7
  9055 ;; This function calls:
  9056 ;;		Nothing
  9057 ;; This function is called by:
  9058 ;;		_SYSTEM_Initialize
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062                           
  9063                           ;psect for function _ADC_Initialize_Default
  9064  0FE4                     _ADC_Initialize_Default:	
  9065  0FE4                     l4907:	
  9066                           ;incstack = 0
  9067                           ; Regs used in _ADC_Initialize_Default: [wreg+status,2]
  9068                           
  9069                           
  9070                           ;adc.c: 16: ADCON0 = 0x00;
  9071  0FE4  019D               	clrf	29	;volatile
  9072                           
  9073                           ;adc.c: 17: ADCON1 = 0x80 | 0x50;
  9074  0FE5  30D0               	movlw	208
  9075  0FE6  009E               	movwf	30	;volatile
  9076                           
  9077                           ;adc.c: 18: ADACT = 0x00;
  9078  0FE7  019F               	clrf	31	;volatile
  9079                           
  9080                           ;adc.c: 19: ADRESH = 0x00;
  9081  0FE8  019C               	clrf	28	;volatile
  9082                           
  9083                           ;adc.c: 20: ADRESL = 0x00;
  9084  0FE9  019B               	clrf	27	;volatile
  9085  0FEA  0008               	return
  9086  0FEB                     __end_of_ADC_Initialize_Default:	
  9087  0FEB                     __ptext15:	
  9088 ;; *************** function _EUSART_Initialize_Default *****************
  9089 ;; Defined at:
  9090 ;;		line 17 in file "driver/src/eusart.c"
  9091 ;; Parameters:    Size  Location     Type
  9092 ;;		None
  9093 ;; Auto vars:     Size  Location     Type
  9094 ;;		None
  9095 ;; Return value:  Size  Location     Type
  9096 ;;                  1    wreg      void 
  9097 ;; Registers used:
  9098 ;;		wreg, status,2
  9099 ;; Tracked objects:
  9100 ;;		On entry : 1F/C
  9101 ;;		On exit  : 1F/1
  9102 ;;		Unchanged: 0/0
  9103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;Total ram usage:        0 bytes
  9109 ;; Hardware stack levels used:    1
  9110 ;; Hardware stack levels required when called:    7
  9111 ;; This function calls:
  9112 ;;		Nothing
  9113 ;; This function is called by:
  9114 ;;		_SYSTEM_Initialize
  9115 ;; This function uses a non-reentrant model
  9116 ;;
  9117                           
  9118                           
  9119                           ;psect for function _EUSART_Initialize_Default
  9120  0FEB                     _EUSART_Initialize_Default:	
  9121                           
  9122                           ;eusart.c: 19: PIE1bits.RCIE = 0;
  9123                           
  9124                           ;incstack = 0
  9125                           ; Regs used in _EUSART_Initialize_Default: [wreg+status,2]
  9126  0FEB  0021               	movlb	1	; select bank1
  9127  0FEC  1291               	bcf	17,5	;volatile
  9128                           
  9129                           ;eusart.c: 20: PIE1bits.TXIE = 0;
  9130  0FED  1211               	bcf	17,4	;volatile
  9131                           
  9132                           ;eusart.c: 21: BAUD1CON = 0x08;
  9133  0FEE  3008               	movlw	8
  9134  0FEF  0023               	movlb	3	; select bank3
  9135  0FF0  009F               	movwf	31	;volatile
  9136                           
  9137                           ;eusart.c: 22: RC1STA = 0x80 | 0x10;
  9138  0FF1  3090               	movlw	144
  9139  0FF2  009D               	movwf	29	;volatile
  9140                           
  9141                           ;eusart.c: 23: TX1STA = 0x20 | 0x04;
  9142  0FF3  3024               	movlw	36
  9143  0FF4  009E               	movwf	30	;volatile
  9144                           
  9145                           ;eusart.c: 24: SP1BRG = 0x01A0;
  9146  0FF5  3001               	movlw	1
  9147  0FF6  009C               	movwf	28	;volatile
  9148  0FF7  30A0               	movlw	160
  9149  0FF8  009B               	movwf	27	;volatile
  9150                           
  9151                           ;eusart.c: 27: txTail = 0;
  9152  0FF9  0020               	movlb	0	; select bank0
  9153  0FFA  3020               	movlw	32
  9154  0FFB  01D8               	clrf	_txTail
  9155  0FFC  01D7               	clrf	_txHead
  9156                           
  9157                           ;eusart.c: 29: txRemain = sizeof (txBuf );
  9158  0FFD  0021               	movlb	1	; select bank1
  9159  0FFE  00EC               	movwf	_txRemain^(0+128)
  9160  0FFF  0008               	return
  9161  1000                     __end_of_EUSART_Initialize_Default:	
  9162                           
  9163                           	psect	bssBANK0
  9164  0045                     __pbssBANK0:	
  9165  0045                     IR_ScanLongPress@cnt:	
  9166  0045                     	ds	2
  9167  0047                     IR_Decode@codeVal:	
  9168  0047                     	ds	2
  9169  0049                     Audio_GetValue@cnt:	
  9170  0049                     	ds	2
  9171  004B                     Audio_GetValue@min:	
  9172  004B                     	ds	2
  9173  004D                     Audio_GetValue@max:	
  9174  004D                     	ds	2
  9175  004F                     _audio_value:	
  9176  004F                     	ds	2
  9177  0051                     IR_Decode@rptCnt:	
  9178  0051                     	ds	1
  9179  0052                     IR_Decode@nBit:	
  9180  0052                     	ds	1
  9181  0053                     _keyValue:	
  9182  0053                     	ds	1
  9183  0054                     _rtc_status:	
  9184  0054                     	ds	1
  9185  0055                     Led_Run@cnt:	
  9186  0055                     	ds	1
  9187  0056                     Led_Notice@cnt:	
  9188  0056                     	ds	1
  9189  0057                     _txHead:	
  9190  0057                     	ds	1
  9191  0058                     _txTail:	
  9192  0058                     	ds	1
  9193  0059                     _ir_state:	
  9194  0059                     	ds	7
  9195  0060                     _rtc_time:	
  9196  0060                     	ds	3
  9197                           
  9198                           	psect	bssBANK1
  9199  00C8                     __pbssBANK1:	
  9200  00C8                     _adc_result:	
  9201  00C8                     	ds	2
  9202  00CA                     _gLedRunPara:	
  9203  00CA                     	ds	26
  9204                           
  9205                           	psect	dataBANK1
  9206  00A0                     __pdataBANK1:	
  9207  00A0                     Led_DynamicCloud@F8373:	
  9208  00A0                     	ds	10
  9209  00AA                     Led_DynamicMoon@F8363:	
  9210  00AA                     	ds	10
  9211  00B4                     Led_DynamicWave@F8353:	
  9212  00B4                     	ds	10
  9213  00BE                     _loadDuty:	
  9214  00BE                     	ds	10
  9215                           
  9216                           	psect	bssBANK2
  9217  0120                     __pbssBANK2:	
  9218  0120                     _txBuf:	
  9219  0120                     	ds	32
  9220                           
  9221                           	psect	dataBANK2
  9222  014D                     __pdataBANK2:	
  9223  014D                     Led_DynamicStorm@F8383:	
  9224  014D                     	ds	10
  9225                           
  9226                           	psect	inittext
  9227  10AA                     init_ram:	
  9228  10AA  00FE               	movwf	126
  9229  10AB                     initloop:	
  9230  10AB  0012               	moviw fsr0++
  9231  10AC  001E               	movwi fsr1++
  9232  10AD  3001               	movlw	1
  9233  10AE  02FE               	subwf	126,f
  9234  10AF  3000               	movlw	0
  9235  10B0  3BFF               	subwfb	127,f
  9236  10B1  087F               	movf	127,w
  9237  10B2  047E               	iorwf	126,w
  9238  10B3  1903               	btfsc	3,2
  9239  10B4  3400               	retlw	0
  9240  10B5  28AB               	goto	initloop
  9241                           
  9242                           	psect	clrtext
  9243  109E                     clear_ram0:	
  9244                           ;	Called with FSR0 containing the base address, and
  9245                           ;	btemp/btemp+1 has the size to clear
  9246                           
  9247  109E  0064               	clrwdt	;clear the watchdog before getting into this loop
  9248  109F                     clrloop0:	
  9249  109F  3001               	movlw	1
  9250  10A0  0180               	clrf	0	;clear RAM location pointed to by FSR
  9251  10A1  3101               	addfsr 0,1
  9252  10A2  02FE               	subwf	126,f
  9253  10A3  3000               	movlw	0
  9254  10A4  3BFF               	subwfb	127,f
  9255  10A5  087F               	movf	127,w
  9256  10A6  047E               	iorwf	126,w
  9257  10A7  1903               	btfsc	3,2
  9258  10A8  3400               	retlw	0	;all done for this memory range, return
  9259  10A9  289F               	goto	clrloop0	;have we reached the end yet?
  9260                           
  9261                           	psect	cstackBANK2
  9262  0140                     __pcstackBANK2:	
  9263  0140                     _IR_KeyAction$1448:	
  9264                           
  9265                           ; 2 bytes @ 0x0
  9266  0140                     	ds	2
  9267  0142                     IR_KeyAction@i:	
  9268                           
  9269                           ; 1 bytes @ 0x2
  9270  0142                     	ds	1
  9271  0143                     IR_KeyAction@i_1449:	
  9272                           
  9273                           ; 1 bytes @ 0x3
  9274  0143                     	ds	1
  9275  0144                     IR_KeyAction@i_1450:	
  9276                           
  9277                           ; 1 bytes @ 0x4
  9278  0144                     	ds	1
  9279  0145                     IR_KeyAction@i_1457:	
  9280                           
  9281                           ; 1 bytes @ 0x5
  9282  0145                     	ds	1
  9283  0146                     IR_KeyAction@i_1458:	
  9284                           
  9285                           ; 1 bytes @ 0x6
  9286  0146                     	ds	1
  9287  0147                     IR_KeyAction@i_1451:	
  9288                           
  9289                           ; 1 bytes @ 0x7
  9290  0147                     	ds	1
  9291  0148                     IR_KeyAction@i_1452:	
  9292                           
  9293                           ; 1 bytes @ 0x8
  9294  0148                     	ds	1
  9295  0149                     IR_KeyAction@i_1453:	
  9296                           
  9297                           ; 1 bytes @ 0x9
  9298  0149                     	ds	1
  9299  014A                     IR_KeyAction@i_1454:	
  9300                           
  9301                           ; 1 bytes @ 0xA
  9302  014A                     	ds	1
  9303  014B                     IR_KeyAction@i_1447:	
  9304                           
  9305                           ; 1 bytes @ 0xB
  9306  014B                     	ds	1
  9307  014C                     IR_KeyAction@idx:	
  9308                           
  9309                           ; 1 bytes @ 0xC
  9310  014C                     	ds	1
  9311                           
  9312                           	psect	cstackCOMMON
  9313  0070                     __pcstackCOMMON:	
  9314  0070                     ?_SYSTEM_Initialize:	
  9315  0070                     ?_Interrupt_Initialize:	
  9316                           ; 1 bytes @ 0x0
  9317                           
  9318  0070                     ?_Led_InitPara:	
  9319                           ; 1 bytes @ 0x0
  9320                           
  9321  0070                     ?_Audio_Initialize:	
  9322                           ; 1 bytes @ 0x0
  9323                           
  9324  0070                     ?_Led_Initialize:	
  9325                           ; 1 bytes @ 0x0
  9326                           
  9327  0070                     ?_IR_KeyAtionIfPressed:	
  9328                           ; 1 bytes @ 0x0
  9329                           
  9330  0070                     ?_IR_ResetIfTMR1Overflow:	
  9331                           ; 1 bytes @ 0x0
  9332                           
  9333  0070                     ?_Led_SaveParaIfChanged:	
  9334                           ; 1 bytes @ 0x0
  9335                           
  9336  0070                     ?_RTC_HourReady:	
  9337                           ; 1 bytes @ 0x0
  9338                           
  9339  0070                     ?_RTC_MinuteReady:	
  9340                           ; 1 bytes @ 0x0
  9341                           
  9342  0070                     ?_Led_CheckAutoStatus:	
  9343                           ; 1 bytes @ 0x0
  9344                           
  9345  0070                     ?_RTC_SecondReady:	
  9346                           ; 1 bytes @ 0x0
  9347                           
  9348  0070                     ?_Led_AutoRun:	
  9349                           ; 1 bytes @ 0x0
  9350                           
  9351  0070                     ?_IR_UpdateSetStatus:	
  9352                           ; 1 bytes @ 0x0
  9353                           
  9354  0070                     ?_IR_Decode:	
  9355                           ; 1 bytes @ 0x0
  9356                           
  9357  0070                     ?_RTC_OnSecond:	
  9358                           ; 1 bytes @ 0x0
  9359                           
  9360  0070                     ??_RTC_OnSecond:	
  9361                           ; 1 bytes @ 0x0
  9362                           
  9363  0070                     ?_Led_Run:	
  9364                           ; 1 bytes @ 0x0
  9365                           
  9366  0070                     ?_Led_Notice:	
  9367                           ; 1 bytes @ 0x0
  9368                           
  9369  0070                     ??_Led_Notice:	
  9370                           ; 1 bytes @ 0x0
  9371                           
  9372  0070                     ?_RTC_GetTime:	
  9373                           ; 1 bytes @ 0x0
  9374                           
  9375  0070                     ?_Led_TurnOffRamp:	
  9376                           ; 1 bytes @ 0x0
  9377                           
  9378  0070                     ?_Led_TurnOnRamp:	
  9379                           ; 1 bytes @ 0x0
  9380                           
  9381  0070                     ?_Led_UpdateBright:	
  9382                           ; 1 bytes @ 0x0
  9383                           
  9384  0070                     ?_IR_ScanLongPress:	
  9385                           ; 1 bytes @ 0x0
  9386                           
  9387  0070                     ?_ADC_Initialize_Default:	
  9388                           ; 1 bytes @ 0x0
  9389                           
  9390  0070                     ?_EUSART_Initialize_Default:	
  9391                           ; 1 bytes @ 0x0
  9392                           
  9393  0070                     ?_EUSART_Write:	
  9394                           ; 1 bytes @ 0x0
  9395                           
  9396  0070                     ?_EUSART_Transmit_ISR:	
  9397                           ; 1 bytes @ 0x0
  9398                           
  9399  0070                     ??_EUSART_Transmit_ISR:	
  9400                           ; 1 bytes @ 0x0
  9401                           
  9402  0070                     ?_PWM1_Initialize:	
  9403                           ; 1 bytes @ 0x0
  9404                           
  9405  0070                     ?_PWM2_Initialize:	
  9406                           ; 1 bytes @ 0x0
  9407                           
  9408  0070                     ?_PWM3_Initialize:	
  9409                           ; 1 bytes @ 0x0
  9410                           
  9411  0070                     ?_PWM4_Initialize:	
  9412                           ; 1 bytes @ 0x0
  9413                           
  9414  0070                     ?_PWM5_Initialize:	
  9415                           ; 1 bytes @ 0x0
  9416                           
  9417  0070                     ?_TMR0_Initialize_Default:	
  9418                           ; 1 bytes @ 0x0
  9419                           
  9420  0070                     ?_TMR0_StartTimer:	
  9421                           ; 1 bytes @ 0x0
  9422                           
  9423  0070                     ?_TMR0_ISR:	
  9424                           ; 1 bytes @ 0x0
  9425                           
  9426  0070                     ??_TMR0_ISR:	
  9427                           ; 1 bytes @ 0x0
  9428                           
  9429  0070                     ?_TMR1_Initialize_Default:	
  9430                           ; 1 bytes @ 0x0
  9431                           
  9432  0070                     ?_TMR1_StartTimer:	
  9433                           ; 1 bytes @ 0x0
  9434                           
  9435  0070                     ?_TMR1_StopTimer:	
  9436                           ; 1 bytes @ 0x0
  9437                           
  9438  0070                     ?_TMR1_GATE_ISR:	
  9439                           ; 1 bytes @ 0x0
  9440                           
  9441  0070                     ?_TMR2_Initialize_Default:	
  9442                           ; 1 bytes @ 0x0
  9443                           
  9444  0070                     ?_TMR2_StartTimer:	
  9445                           ; 1 bytes @ 0x0
  9446                           
  9447  0070                     ?_TMR2_ISR:	
  9448                           ; 1 bytes @ 0x0
  9449                           
  9450  0070                     ?_TMR2_DisableInterrupt:	
  9451                           ; 1 bytes @ 0x0
  9452                           
  9453  0070                     ?_TMR2_EnableInterrupt:	
  9454                           ; 1 bytes @ 0x0
  9455                           
  9456  0070                     ?_TMR4_Initialize_Default:	
  9457                           ; 1 bytes @ 0x0
  9458                           
  9459  0070                     ?_TMR4_StartTimer:	
  9460                           ; 1 bytes @ 0x0
  9461                           
  9462  0070                     ?_TMR4_StopTimer:	
  9463                           ; 1 bytes @ 0x0
  9464                           
  9465  0070                     ??_TMR4_StopTimer:	
  9466                           ; 1 bytes @ 0x0
  9467                           
  9468  0070                     ?_TMR4_ISR:	
  9469                           ; 1 bytes @ 0x0
  9470                           
  9471  0070                     ?_Audio_StopSound:	
  9472                           ; 1 bytes @ 0x0
  9473                           
  9474  0070                     ?_Audio_SelectSound:	
  9475                           ; 1 bytes @ 0x0
  9476                           
  9477  0070                     ?_Audio_SetPlayMode:	
  9478                           ; 1 bytes @ 0x0
  9479                           
  9480  0070                     ?_Audio_SetVolume:	
  9481                           ; 1 bytes @ 0x0
  9482                           
  9483  0070                     ?_Audio_GetValue:	
  9484                           ; 1 bytes @ 0x0
  9485                           
  9486  0070                     ?_main:	
  9487                           ; 1 bytes @ 0x0
  9488                           
  9489  0070                     ?_ISR:	
  9490                           ; 1 bytes @ 0x0
  9491                           
  9492  0070                     ?_OSCILLATOR_Initialize:	
  9493                           ; 1 bytes @ 0x0
  9494                           
  9495  0070                     ?_PIN_Initialize:	
  9496                           ; 1 bytes @ 0x0
  9497                           
  9498  0070                     ?_Led_FirstPowerUp:	
  9499                           ; 1 bytes @ 0x0
  9500                           
  9501  0070                     ?_Led_TurnOnDirect:	
  9502                           ; 1 bytes @ 0x0
  9503                           
  9504  0070                     ??_Led_TurnOnDirect:	
  9505                           ; 1 bytes @ 0x0
  9506                           
  9507  0070                     ?_Led_TurnOffDirect:	
  9508                           ; 1 bytes @ 0x0
  9509                           
  9510  0070                     ??_Led_TurnOffDirect:	
  9511                           ; 1 bytes @ 0x0
  9512                           
  9513  0070                     ?_Led_Ramp:	
  9514                           ; 1 bytes @ 0x0
  9515                           
  9516  0070                     ?_Led_StartNotice:	
  9517                           ; 1 bytes @ 0x0
  9518                           
  9519  0070                     ?_Led_RunMusic:	
  9520                           ; 1 bytes @ 0x0
  9521                           
  9522  0070                     ?_IR_GetIndex:	
  9523                           ; 1 bytes @ 0x0
  9524                           
  9525  0070                     ?_IR_GetKeyType:	
  9526                           ; 1 bytes @ 0x0
  9527                           
  9528  0070                     ??_IR_GetKeyType:	
  9529                           ; 1 bytes @ 0x0
  9530                           
  9531  0070                     ?_IR_ExitSet:	
  9532                           ; 1 bytes @ 0x0
  9533                           
  9534  0070                     ?_IR_ExitTimeout:	
  9535                           ; 1 bytes @ 0x0
  9536                           
  9537  0070                     ?_IR_KeyAction:	
  9538                           ; 1 bytes @ 0x0
  9539                           
  9540  0070                     ?i1_EUSART_Write:	
  9541                           ; 1 bytes @ 0x0
  9542                           
  9543  0070                     ??i1_EUSART_Write:	
  9544                           ; 1 bytes @ 0x0
  9545                           
  9546  0070                     ?i1_PWM1_LoadDutyValue:	
  9547                           ; 1 bytes @ 0x0
  9548                           
  9549  0070                     ?i1_PWM2_LoadDutyValue:	
  9550                           ; 1 bytes @ 0x0
  9551                           
  9552  0070                     ?i1_PWM3_LoadDutyValue:	
  9553                           ; 1 bytes @ 0x0
  9554                           
  9555  0070                     ?i1_PWM4_LoadDutyValue:	
  9556                           ; 1 bytes @ 0x0
  9557                           
  9558  0070                     ?i1_PWM5_LoadDutyValue:	
  9559                           ; 1 bytes @ 0x0
  9560                           
  9561  0070                     ?i1_TMR2_DisableInterrupt:	
  9562                           ; 1 bytes @ 0x0
  9563                           
  9564  0070                     ??i1_TMR2_DisableInterrupt:	
  9565                           ; 1 bytes @ 0x0
  9566                           
  9567  0070                     ?i1_TMR2_EnableInterrupt:	
  9568                           ; 1 bytes @ 0x0
  9569                           
  9570  0070                     ??i1_TMR2_EnableInterrupt:	
  9571                           ; 1 bytes @ 0x0
  9572                           
  9573  0070                     ?i1_TMR4_StartTimer:	
  9574                           ; 1 bytes @ 0x0
  9575                           
  9576  0070                     ??i1_TMR4_StartTimer:	
  9577                           ; 1 bytes @ 0x0
  9578                           
  9579  0070                     ?i1_Led_UpdateBright:	
  9580                           ; 1 bytes @ 0x0
  9581                           
  9582  0070                     ?i1_Led_StartNotice:	
  9583                           ; 1 bytes @ 0x0
  9584                           
  9585  0070                     ??i1_Led_StartNotice:	
  9586                           ; 1 bytes @ 0x0
  9587                           
  9588  0070                     ?i1_IR_GetIndex:	
  9589                           ; 1 bytes @ 0x0
  9590                           
  9591  0070                     ??i1_IR_GetIndex:	
  9592                           ; 1 bytes @ 0x0
  9593                           
  9594  0070                     ?i1_Util_IncValue:	
  9595                           ; 1 bytes @ 0x0
  9596                           
  9597  0070                     ?i1_Util_DecValue:	
  9598                           ; 1 bytes @ 0x0
  9599                           
  9600  0070                     ?i1___wmul:	
  9601                           ; 1 bytes @ 0x0
  9602                           
  9603  0070                     i1EUSART_Write@byte:	
  9604                           ; 2 bytes @ 0x0
  9605                           
  9606  0070                     i1IR_GetIndex@keynum:	
  9607                           ; 1 bytes @ 0x0
  9608                           
  9609  0070                     i1PWM1_LoadDutyValue@dutyValue:	
  9610                           ; 1 bytes @ 0x0
  9611                           
  9612  0070                     i1PWM2_LoadDutyValue@dutyValue:	
  9613                           ; 2 bytes @ 0x0
  9614                           
  9615  0070                     i1PWM3_LoadDutyValue@dutyValue:	
  9616                           ; 2 bytes @ 0x0
  9617                           
  9618  0070                     i1PWM4_LoadDutyValue@dutyValue:	
  9619                           ; 2 bytes @ 0x0
  9620                           
  9621  0070                     i1PWM5_LoadDutyValue@dutyValue:	
  9622                           ; 2 bytes @ 0x0
  9623                           
  9624  0070                     i1Util_IncValue@pSrc:	
  9625                           ; 2 bytes @ 0x0
  9626                           
  9627  0070                     i1Util_DecValue@pSrc:	
  9628                           ; 2 bytes @ 0x0
  9629                           
  9630  0070                     i1___wmul@multiplier:	
  9631                           ; 2 bytes @ 0x0
  9632                           
  9633                           
  9634                           ; 2 bytes @ 0x0
  9635  0070                     	ds	1
  9636  0071                     ??_TMR4_ISR:	
  9637  0071                     ??_Audio_SelectSound:	
  9638                           ; 1 bytes @ 0x1
  9639                           
  9640  0071                     Audio_SelectSound@index:	
  9641                           ; 1 bytes @ 0x1
  9642                           
  9643  0071                     IR_GetKeyType@result:	
  9644                           ; 1 bytes @ 0x1
  9645                           
  9646  0071                     i1Led_StartNotice@cnt:	
  9647                           ; 1 bytes @ 0x1
  9648                           
  9649  0071                     i1IR_GetIndex@idx:	
  9650                           ; 1 bytes @ 0x1
  9651                           
  9652                           
  9653                           ; 1 bytes @ 0x1
  9654  0071                     	ds	1
  9655  0072                     ??i1_PWM1_LoadDutyValue:	
  9656  0072                     ??i1_PWM2_LoadDutyValue:	
  9657                           ; 1 bytes @ 0x2
  9658                           
  9659  0072                     ??i1_PWM3_LoadDutyValue:	
  9660                           ; 1 bytes @ 0x2
  9661                           
  9662  0072                     ??i1_PWM4_LoadDutyValue:	
  9663                           ; 1 bytes @ 0x2
  9664                           
  9665  0072                     ??i1_PWM5_LoadDutyValue:	
  9666                           ; 1 bytes @ 0x2
  9667                           
  9668  0072                     Audio_SelectSound@checksum:	
  9669                           ; 1 bytes @ 0x2
  9670                           
  9671  0072                     IR_GetKeyType@keynum:	
  9672                           ; 1 bytes @ 0x2
  9673                           
  9674  0072                     i1Util_IncValue@max:	
  9675                           ; 1 bytes @ 0x2
  9676                           
  9677  0072                     i1Util_DecValue@min:	
  9678                           ; 2 bytes @ 0x2
  9679                           
  9680  0072                     i1___wmul@multiplicand:	
  9681                           ; 2 bytes @ 0x2
  9682                           
  9683                           
  9684                           ; 2 bytes @ 0x2
  9685  0072                     	ds	1
  9686  0073                     ??_IR_Decode:	
  9687                           
  9688                           ; 1 bytes @ 0x3
  9689  0073                     	ds	1
  9690  0074                     ??_Led_Ramp:	
  9691  0074                     ??i1_Led_UpdateBright:	
  9692                           ; 1 bytes @ 0x4
  9693                           
  9694  0074                     ??i1___wmul:	
  9695                           ; 1 bytes @ 0x4
  9696                           
  9697  0074                     i1Led_UpdateBright@i:	
  9698                           ; 1 bytes @ 0x4
  9699                           
  9700  0074                     i1Util_IncValue@delta:	
  9701                           ; 1 bytes @ 0x4
  9702                           
  9703  0074                     i1Util_DecValue@delta:	
  9704                           ; 2 bytes @ 0x4
  9705                           
  9706  0074                     i1___wmul@product:	
  9707                           ; 2 bytes @ 0x4
  9708                           
  9709                           
  9710                           ; 2 bytes @ 0x4
  9711  0074                     	ds	2
  9712  0076                     ?_Led_SetCustom:	
  9713  0076                     ?_Led_DynamicWave:	
  9714                           ; 1 bytes @ 0x6
  9715                           
  9716  0076                     ?_Led_DynamicMoon:	
  9717                           ; 1 bytes @ 0x6
  9718                           
  9719  0076                     ?_Led_DynamicCloud:	
  9720                           ; 1 bytes @ 0x6
  9721                           
  9722  0076                     ?_Led_DynamicStorm:	
  9723                           ; 1 bytes @ 0x6
  9724                           
  9725  0076                     ??i1_Util_IncValue:	
  9726                           ; 1 bytes @ 0x6
  9727                           
  9728  0076                     ??i1_Util_DecValue:	
  9729                           ; 1 bytes @ 0x6
  9730                           
  9731  0076                     Led_SetCustom@pValue:	
  9732                           ; 1 bytes @ 0x6
  9733                           
  9734  0076                     Led_DynamicWave@ptp:	
  9735                           ; 1 bytes @ 0x6
  9736                           
  9737  0076                     Led_DynamicMoon@ptp:	
  9738                           ; 2 bytes @ 0x6
  9739                           
  9740  0076                     Led_DynamicCloud@ptp:	
  9741                           ; 2 bytes @ 0x6
  9742                           
  9743  0076                     Led_DynamicStorm@ptp:	
  9744                           ; 2 bytes @ 0x6
  9745                           
  9746                           
  9747                           ; 2 bytes @ 0x6
  9748  0076                     	ds	1
  9749  0077                     ??_Led_SetCustom:	
  9750  0077                     IR_Decode@revKeyNum:	
  9751                           ; 1 bytes @ 0x7
  9752                           
  9753                           
  9754                           ; 1 bytes @ 0x7
  9755  0077                     	ds	1
  9756  0078                     ??_Led_DynamicWave:	
  9757  0078                     ??_Led_DynamicMoon:	
  9758                           ; 1 bytes @ 0x8
  9759                           
  9760  0078                     ??_Led_DynamicCloud:	
  9761                           ; 1 bytes @ 0x8
  9762                           
  9763  0078                     ??_Led_DynamicStorm:	
  9764                           ; 1 bytes @ 0x8
  9765                           
  9766  0078                     IR_Decode@type:	
  9767                           ; 1 bytes @ 0x8
  9768                           
  9769                           
  9770                           ; 1 bytes @ 0x8
  9771  0078                     	ds	1
  9772  0079                     IR_Decode@keyNum:	
  9773                           
  9774                           ; 1 bytes @ 0x9
  9775  0079                     	ds	1
  9776  007A                     Led_Ramp@i:	
  9777  007A                     IR_Decode@hVal:	
  9778                           ; 1 bytes @ 0xA
  9779                           
  9780                           
  9781                           ; 2 bytes @ 0xA
  9782  007A                     	ds	2
  9783  007C                     ??_TMR1_GATE_ISR:	
  9784  007C                     ??_Led_RunMusic:	
  9785                           ; 1 bytes @ 0xC
  9786                           
  9787                           
  9788                           ; 1 bytes @ 0xC
  9789  007C                     	ds	1
  9790  007D                     ??_Led_Run:	
  9791                           
  9792                           ; 1 bytes @ 0xD
  9793  007D                     	ds	1
  9794  007E                     ??_TMR2_ISR:	
  9795  007E                     ??_ISR:	
  9796                           ; 1 bytes @ 0xE
  9797                           
  9798                           
  9799                           	psect	cstackBANK0
  9800  0020                     __pcstackBANK0:	
  9801                           ; 1 bytes @ 0xE
  9802                           
  9803  0020                     Led_SetCustom@value:	
  9804  0020                     Led_DynamicWave@duty:	
  9805                           ; 2 bytes @ 0x0
  9806                           
  9807  0020                     Led_DynamicMoon@duty:	
  9808                           ; 10 bytes @ 0x0
  9809                           
  9810  0020                     Led_DynamicCloud@duty:	
  9811                           ; 10 bytes @ 0x0
  9812                           
  9813  0020                     Led_DynamicStorm@duty:	
  9814                           ; 10 bytes @ 0x0
  9815                           
  9816                           
  9817                           ; 10 bytes @ 0x0
  9818  0020                     	ds	2
  9819  0022                     Led_SetCustom@idx:	
  9820                           
  9821                           ; 1 bytes @ 0x2
  9822  0022                     	ds	1
  9823  0023                     Led_SetCustom@i:	
  9824                           
  9825                           ; 1 bytes @ 0x3
  9826  0023                     	ds	1
  9827  0024                     ??_IR_ScanLongPress:	
  9828                           
  9829                           ; 1 bytes @ 0x4
  9830  0024                     	ds	4
  9831  0028                     IR_ScanLongPress@i:	
  9832                           
  9833                           ; 1 bytes @ 0x8
  9834  0028                     	ds	1
  9835  0029                     IR_ScanLongPress@i_1441:	
  9836                           
  9837                           ; 1 bytes @ 0x9
  9838  0029                     	ds	1
  9839  002A                     IR_ScanLongPress@idx:	
  9840  002A                     Led_DynamicWave@val:	
  9841                           ; 1 bytes @ 0xA
  9842                           
  9843  002A                     Led_DynamicMoon@val:	
  9844                           ; 2 bytes @ 0xA
  9845                           
  9846  002A                     Led_DynamicCloud@val:	
  9847                           ; 2 bytes @ 0xA
  9848                           
  9849  002A                     Led_DynamicStorm@val:	
  9850                           ; 2 bytes @ 0xA
  9851                           
  9852                           
  9853                           ; 2 bytes @ 0xA
  9854  002A                     	ds	2
  9855  002C                     Led_DynamicWave@i:	
  9856  002C                     Led_DynamicMoon@i:	
  9857                           ; 1 bytes @ 0xC
  9858                           
  9859  002C                     Led_DynamicCloud@i:	
  9860                           ; 1 bytes @ 0xC
  9861                           
  9862  002C                     Led_DynamicStorm@i:	
  9863                           ; 1 bytes @ 0xC
  9864                           
  9865                           
  9866                           ; 1 bytes @ 0xC
  9867  002C                     	ds	1
  9868  002D                     ??_IR_ResetIfTMR1Overflow:	
  9869  002D                     ??_RTC_HourReady:	
  9870                           ; 1 bytes @ 0xD
  9871                           
  9872  002D                     ??_RTC_MinuteReady:	
  9873                           ; 1 bytes @ 0xD
  9874                           
  9875  002D                     ??_RTC_SecondReady:	
  9876                           ; 1 bytes @ 0xD
  9877                           
  9878  002D                     ??_RTC_GetTime:	
  9879                           ; 1 bytes @ 0xD
  9880                           
  9881  002D                     ??_Led_TurnOffRamp:	
  9882                           ; 1 bytes @ 0xD
  9883                           
  9884  002D                     ??_Led_TurnOnRamp:	
  9885                           ; 1 bytes @ 0xD
  9886                           
  9887  002D                     ?_Util_IncValue:	
  9888                           ; 1 bytes @ 0xD
  9889                           
  9890  002D                     ?_Util_DecValue:	
  9891                           ; 1 bytes @ 0xD
  9892                           
  9893  002D                     ??_ADC_Initialize_Default:	
  9894                           ; 1 bytes @ 0xD
  9895                           
  9896  002D                     ?_DATAEE_WriteByte:	
  9897                           ; 1 bytes @ 0xD
  9898                           
  9899  002D                     ?_DATAEE_ReadByte:	
  9900                           ; 1 bytes @ 0xD
  9901                           
  9902  002D                     ??_EUSART_Initialize_Default:	
  9903                           ; 1 bytes @ 0xD
  9904                           
  9905  002D                     ??_EUSART_Write:	
  9906                           ; 1 bytes @ 0xD
  9907                           
  9908  002D                     ??_PWM1_Initialize:	
  9909                           ; 1 bytes @ 0xD
  9910                           
  9911  002D                     ?_PWM1_LoadDutyValue:	
  9912                           ; 1 bytes @ 0xD
  9913                           
  9914  002D                     ??_PWM2_Initialize:	
  9915                           ; 1 bytes @ 0xD
  9916                           
  9917  002D                     ?_PWM2_LoadDutyValue:	
  9918                           ; 1 bytes @ 0xD
  9919                           
  9920  002D                     ??_PWM3_Initialize:	
  9921                           ; 1 bytes @ 0xD
  9922                           
  9923  002D                     ?_PWM3_LoadDutyValue:	
  9924                           ; 1 bytes @ 0xD
  9925                           
  9926  002D                     ??_PWM4_Initialize:	
  9927                           ; 1 bytes @ 0xD
  9928                           
  9929  002D                     ?_PWM4_LoadDutyValue:	
  9930                           ; 1 bytes @ 0xD
  9931                           
  9932  002D                     ??_PWM5_Initialize:	
  9933                           ; 1 bytes @ 0xD
  9934                           
  9935  002D                     ?_PWM5_LoadDutyValue:	
  9936                           ; 1 bytes @ 0xD
  9937                           
  9938  002D                     ??_TMR0_Initialize_Default:	
  9939                           ; 1 bytes @ 0xD
  9940                           
  9941  002D                     ??_TMR0_StartTimer:	
  9942                           ; 1 bytes @ 0xD
  9943                           
  9944  002D                     ?_TMR0_SetInterruptHandler:	
  9945                           ; 1 bytes @ 0xD
  9946                           
  9947  002D                     ??_TMR1_Initialize_Default:	
  9948                           ; 1 bytes @ 0xD
  9949                           
  9950  002D                     ??_TMR1_StartTimer:	
  9951                           ; 1 bytes @ 0xD
  9952                           
  9953  002D                     ??_TMR1_StopTimer:	
  9954                           ; 1 bytes @ 0xD
  9955                           
  9956  002D                     ?_TMR1_Gate_SetInterruptHandler:	
  9957                           ; 1 bytes @ 0xD
  9958                           
  9959  002D                     ??_TMR2_Initialize_Default:	
  9960                           ; 1 bytes @ 0xD
  9961                           
  9962  002D                     ??_TMR2_StartTimer:	
  9963                           ; 1 bytes @ 0xD
  9964                           
  9965  002D                     ?_TMR2_SetInterruptHandler:	
  9966                           ; 1 bytes @ 0xD
  9967                           
  9968  002D                     ??_TMR2_DisableInterrupt:	
  9969                           ; 1 bytes @ 0xD
  9970                           
  9971  002D                     ??_TMR2_EnableInterrupt:	
  9972                           ; 1 bytes @ 0xD
  9973                           
  9974  002D                     ??_TMR4_Initialize_Default:	
  9975                           ; 1 bytes @ 0xD
  9976                           
  9977  002D                     ??_TMR4_StartTimer:	
  9978                           ; 1 bytes @ 0xD
  9979                           
  9980  002D                     ?_TMR4_SetInterruptHandler:	
  9981                           ; 1 bytes @ 0xD
  9982                           
  9983  002D                     ??_OSCILLATOR_Initialize:	
  9984                           ; 1 bytes @ 0xD
  9985                           
  9986  002D                     ??_PIN_Initialize:	
  9987                           ; 1 bytes @ 0xD
  9988                           
  9989  002D                     ??_Led_FirstPowerUp:	
  9990                           ; 1 bytes @ 0xD
  9991                           
  9992  002D                     ??_Led_StartNotice:	
  9993                           ; 1 bytes @ 0xD
  9994                           
  9995  002D                     ??_IR_GetIndex:	
  9996                           ; 1 bytes @ 0xD
  9997                           
  9998  002D                     ?___bmul:	
  9999                           ; 1 bytes @ 0xD
 10000                           
 10001  002D                     ?_ADC_Conversion:	
 10002                           ; 1 bytes @ 0xD
 10003                           
 10004  002D                     ?___wmul:	
 10005                           ; 2 bytes @ 0xD
 10006                           
 10007  002D                     EUSART_Write@byte:	
 10008                           ; 2 bytes @ 0xD
 10009                           
 10010  002D                     PIN_Initialize@state:	
 10011                           ; 1 bytes @ 0xD
 10012                           
 10013  002D                     Led_TurnOffRamp@i:	
 10014                           ; 1 bytes @ 0xD
 10015                           
 10016  002D                     IR_GetIndex@keynum:	
 10017                           ; 1 bytes @ 0xD
 10018                           
 10019  002D                     ___bmul@multiplicand:	
 10020                           ; 1 bytes @ 0xD
 10021                           
 10022  002D                     DATAEE_WriteByte@addr:	
 10023                           ; 1 bytes @ 0xD
 10024                           
 10025  002D                     DATAEE_ReadByte@addr:	
 10026                           ; 2 bytes @ 0xD
 10027                           
 10028  002D                     PWM1_LoadDutyValue@dutyValue:	
 10029                           ; 2 bytes @ 0xD
 10030                           
 10031  002D                     PWM2_LoadDutyValue@dutyValue:	
 10032                           ; 2 bytes @ 0xD
 10033                           
 10034  002D                     PWM3_LoadDutyValue@dutyValue:	
 10035                           ; 2 bytes @ 0xD
 10036                           
 10037  002D                     PWM4_LoadDutyValue@dutyValue:	
 10038                           ; 2 bytes @ 0xD
 10039                           
 10040  002D                     PWM5_LoadDutyValue@dutyValue:	
 10041                           ; 2 bytes @ 0xD
 10042                           
 10043  002D                     TMR0_SetInterruptHandler@handler:	
 10044                           ; 2 bytes @ 0xD
 10045                           
 10046  002D                     TMR1_Gate_SetInterruptHandler@handler:	
 10047                           ; 2 bytes @ 0xD
 10048                           
 10049  002D                     TMR2_SetInterruptHandler@handler:	
 10050                           ; 2 bytes @ 0xD
 10051                           
 10052  002D                     TMR4_SetInterruptHandler@handler:	
 10053                           ; 2 bytes @ 0xD
 10054                           
 10055  002D                     Util_IncValue@pSrc:	
 10056                           ; 2 bytes @ 0xD
 10057                           
 10058  002D                     Util_DecValue@pSrc:	
 10059                           ; 2 bytes @ 0xD
 10060                           
 10061  002D                     ___wmul@multiplier:	
 10062                           ; 2 bytes @ 0xD
 10063                           
 10064                           
 10065                           ; 2 bytes @ 0xD
 10066  002D                     	ds	1
 10067  002E                     ??_SYSTEM_Initialize:	
 10068  002E                     ??_Audio_StopSound:	
 10069                           ; 1 bytes @ 0xE
 10070                           
 10071  002E                     ??_Audio_SetPlayMode:	
 10072                           ; 1 bytes @ 0xE
 10073                           
 10074  002E                     ??_Audio_SetVolume:	
 10075                           ; 1 bytes @ 0xE
 10076                           
 10077  002E                     ??___bmul:	
 10078                           ; 1 bytes @ 0xE
 10079                           
 10080  002E                     Audio_StopSound@checksum:	
 10081                           ; 1 bytes @ 0xE
 10082                           
 10083  002E                     Audio_SetPlayMode@type:	
 10084                           ; 1 bytes @ 0xE
 10085                           
 10086  002E                     Audio_SetVolume@vol:	
 10087                           ; 1 bytes @ 0xE
 10088                           
 10089  002E                     Led_StartNotice@cnt:	
 10090                           ; 1 bytes @ 0xE
 10091                           
 10092  002E                     IR_GetIndex@idx:	
 10093                           ; 1 bytes @ 0xE
 10094                           
 10095  002E                     ___bmul@product:	
 10096                           ; 1 bytes @ 0xE
 10097                           
 10098                           
 10099                           ; 1 bytes @ 0xE
 10100  002E                     	ds	1
 10101  002F                     ??_Interrupt_Initialize:	
 10102  002F                     ??_ADC_Conversion:	
 10103                           ; 1 bytes @ 0xF
 10104                           
 10105  002F                     ??_DATAEE_ReadByte:	
 10106                           ; 1 bytes @ 0xF
 10107                           
 10108  002F                     ?_DATAEE_ReadBuffer:	
 10109                           ; 1 bytes @ 0xF
 10110                           
 10111  002F                     ??_PWM1_LoadDutyValue:	
 10112                           ; 1 bytes @ 0xF
 10113                           
 10114  002F                     ??_PWM2_LoadDutyValue:	
 10115                           ; 1 bytes @ 0xF
 10116                           
 10117  002F                     ??_PWM3_LoadDutyValue:	
 10118                           ; 1 bytes @ 0xF
 10119                           
 10120  002F                     ??_PWM4_LoadDutyValue:	
 10121                           ; 1 bytes @ 0xF
 10122                           
 10123  002F                     ??_PWM5_LoadDutyValue:	
 10124                           ; 1 bytes @ 0xF
 10125                           
 10126  002F                     ??_TMR0_SetInterruptHandler:	
 10127                           ; 1 bytes @ 0xF
 10128                           
 10129  002F                     ??_TMR1_Gate_SetInterruptHandler:	
 10130                           ; 1 bytes @ 0xF
 10131                           
 10132  002F                     ??_TMR2_SetInterruptHandler:	
 10133                           ; 1 bytes @ 0xF
 10134                           
 10135  002F                     ??_TMR4_SetInterruptHandler:	
 10136                           ; 1 bytes @ 0xF
 10137                           
 10138  002F                     DATAEE_WriteByte@byte:	
 10139                           ; 1 bytes @ 0xF
 10140                           
 10141  002F                     Audio_SetPlayMode@checksum:	
 10142                           ; 1 bytes @ 0xF
 10143                           
 10144  002F                     Audio_SetVolume@checksum:	
 10145                           ; 1 bytes @ 0xF
 10146                           
 10147  002F                     ___bmul@multiplier:	
 10148                           ; 1 bytes @ 0xF
 10149                           
 10150  002F                     DATAEE_ReadBuffer@addr:	
 10151                           ; 1 bytes @ 0xF
 10152                           
 10153  002F                     Util_IncValue@max:	
 10154                           ; 2 bytes @ 0xF
 10155                           
 10156  002F                     Util_DecValue@min:	
 10157                           ; 2 bytes @ 0xF
 10158                           
 10159  002F                     ___wmul@multiplicand:	
 10160                           ; 2 bytes @ 0xF
 10161                           
 10162                           
 10163                           ; 2 bytes @ 0xF
 10164  002F                     	ds	1
 10165  0030                     ??_Audio_Initialize:	
 10166  0030                     ??_DATAEE_WriteByte:	
 10167                           ; 1 bytes @ 0x10
 10168                           
 10169  0030                     ?_IR_IsValidTime:	
 10170                           ; 1 bytes @ 0x10
 10171                           
 10172  0030                     ADC_Conversion@chn:	
 10173                           ; 1 bytes @ 0x10
 10174                           
 10175  0030                     DATAEE_WriteByte@GIEBitValue:	
 10176                           ; 1 bytes @ 0x10
 10177                           
 10178  0030                     IR_IsValidTime@len:	
 10179                           ; 1 bytes @ 0x10
 10180                           
 10181                           
 10182                           ; 1 bytes @ 0x10
 10183  0030                     	ds	1
 10184  0031                     ??_Led_UpdateBright:	
 10185  0031                     ?_DATAEE_WriteBuffer:	
 10186                           ; 1 bytes @ 0x11
 10187                           
 10188  0031                     ??_IR_IsValidTime:	
 10189                           ; 1 bytes @ 0x11
 10190                           
 10191  0031                     ??___wmul:	
 10192                           ; 1 bytes @ 0x11
 10193                           
 10194  0031                     Led_UpdateBright@i:	
 10195                           ; 1 bytes @ 0x11
 10196                           
 10197  0031                     Led_TurnOnRamp@i:	
 10198                           ; 1 bytes @ 0x11
 10199                           
 10200  0031                     IR_IsValidTime@min:	
 10201                           ; 1 bytes @ 0x11
 10202                           
 10203  0031                     DATAEE_WriteBuffer@addr:	
 10204                           ; 1 bytes @ 0x11
 10205                           
 10206  0031                     DATAEE_ReadBuffer@buf:	
 10207                           ; 2 bytes @ 0x11
 10208                           
 10209  0031                     Util_IncValue@delta:	
 10210                           ; 2 bytes @ 0x11
 10211                           
 10212  0031                     Util_DecValue@delta:	
 10213                           ; 2 bytes @ 0x11
 10214                           
 10215  0031                     ___wmul@product:	
 10216                           ; 2 bytes @ 0x11
 10217                           
 10218                           
 10219                           ; 2 bytes @ 0x11
 10220  0031                     	ds	1
 10221  0032                     IR_IsValidTime@result:	
 10222  0032                     _Audio_Initialize$1221:	
 10223                           ; 1 bytes @ 0x12
 10224                           
 10225                           
 10226                           ; 2 bytes @ 0x12
 10227  0032                     	ds	1
 10228  0033                     ??_Led_Initialize:	
 10229  0033                     ??_Led_CheckAutoStatus:	
 10230                           ; 1 bytes @ 0x13
 10231                           
 10232  0033                     ??_Util_IncValue:	
 10233                           ; 1 bytes @ 0x13
 10234                           
 10235  0033                     ??_Util_DecValue:	
 10236                           ; 1 bytes @ 0x13
 10237                           
 10238  0033                     ??_Audio_GetValue:	
 10239                           ; 1 bytes @ 0x13
 10240                           
 10241  0033                     DATAEE_ReadBuffer@len:	
 10242                           ; 1 bytes @ 0x13
 10243                           
 10244  0033                     Led_FirstPowerUp@i:	
 10245                           ; 1 bytes @ 0x13
 10246                           
 10247  0033                     IR_IsValidTime@hour:	
 10248                           ; 1 bytes @ 0x13
 10249                           
 10250  0033                     DATAEE_WriteBuffer@buf:	
 10251                           ; 1 bytes @ 0x13
 10252                           
 10253                           
 10254                           ; 2 bytes @ 0x13
 10255  0033                     	ds	1
 10256  0034                     ??_DATAEE_ReadBuffer:	
 10257  0034                     IR_IsValidTime@tm:	
 10258                           ; 1 bytes @ 0x14
 10259                           
 10260                           
 10261                           ; 1 bytes @ 0x14
 10262  0034                     	ds	1
 10263  0035                     DATAEE_WriteBuffer@len:	
 10264  0035                     DATAEE_ReadBuffer@i:	
 10265                           ; 1 bytes @ 0x15
 10266                           
 10267                           
 10268                           ; 1 bytes @ 0x15
 10269  0035                     	ds	1
 10270  0036                     ??_Led_InitPara:	
 10271  0036                     ??_DATAEE_WriteBuffer:	
 10272                           ; 1 bytes @ 0x16
 10273                           
 10274  0036                     DATAEE_WriteBuffer@i:	
 10275                           ; 1 bytes @ 0x16
 10276                           
 10277                           
 10278                           ; 1 bytes @ 0x16
 10279  0036                     	ds	1
 10280  0037                     ??_Led_SaveParaIfChanged:	
 10281  0037                     ??_Led_AutoRun:	
 10282                           ; 1 bytes @ 0x17
 10283                           
 10284  0037                     Led_Initialize@result:	
 10285                           ; 1 bytes @ 0x17
 10286                           
 10287  0037                     Audio_GetValue@value:	
 10288                           ; 1 bytes @ 0x17
 10289                           
 10290  0037                     Led_CheckAutoStatus@sunrise:	
 10291                           ; 2 bytes @ 0x17
 10292                           
 10293                           
 10294                           ; 2 bytes @ 0x17
 10295  0037                     	ds	1
 10296  0038                     Led_Initialize@ct:	
 10297                           
 10298                           ; 2 bytes @ 0x18
 10299  0038                     	ds	1
 10300  0039                     Led_CheckAutoStatus@sunset:	
 10301                           
 10302                           ; 2 bytes @ 0x19
 10303  0039                     	ds	1
 10304  003A                     Led_Initialize@i:	
 10305                           
 10306                           ; 1 bytes @ 0x1A
 10307  003A                     	ds	1
 10308  003B                     ??_IR_UpdateSetStatus:	
 10309  003B                     ??_IR_ExitSet:	
 10310                           ; 1 bytes @ 0x1B
 10311                           
 10312  003B                     ??_IR_ExitTimeout:	
 10313                           ; 1 bytes @ 0x1B
 10314                           
 10315  003B                     ??_IR_KeyAction:	
 10316                           ; 1 bytes @ 0x1B
 10317                           
 10318  003B                     Led_AutoRun@i:	
 10319                           ; 1 bytes @ 0x1B
 10320                           
 10321  003B                     Led_CheckAutoStatus@ct:	
 10322                           ; 1 bytes @ 0x1B
 10323                           
 10324                           
 10325                           ; 2 bytes @ 0x1B
 10326  003B                     	ds	2
 10327  003D                     Led_CheckAutoStatus@i_1252:	
 10328                           
 10329                           ; 1 bytes @ 0x1D
 10330  003D                     	ds	1
 10331  003E                     Led_InitPara@j:	
 10332  003E                     Led_CheckAutoStatus@i_1253:	
 10333                           ; 1 bytes @ 0x1E
 10334                           
 10335                           
 10336                           ; 1 bytes @ 0x1E
 10337  003E                     	ds	1
 10338  003F                     Led_InitPara@i:	
 10339  003F                     Led_CheckAutoStatus@i:	
 10340                           ; 1 bytes @ 0x1F
 10341                           
 10342                           
 10343                           ; 1 bytes @ 0x1F
 10344  003F                     	ds	6
 10345  0045                     ??_IR_KeyAtionIfPressed:	
 10346  0045                     ??_main:	
 10347                           ; 1 bytes @ 0x25
 10348                           
 10349                           
 10350                           	psect	text35
 10351  113F                     __ptext35:	
 10352 ;; *************** function _IR_ExitTimeout *****************
 10353 ;; Defined at:
 10354 ;;		line 480 in file "user/src/ir.c"
 10355 ;; Parameters:    Size  Location     Type
 10356 ;;		None
 10357 ;; Auto vars:     Size  Location     Type
 10358 ;;		None
 10359 ;; Return value:  Size  Location     Type
 10360 ;;                  1    wreg      void 
 10361 ;; Registers used:
 10362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10363 ;; Tracked objects:
 10364 ;;		On entry : 1F/0
 10365 ;;		On exit  : 1E/0
 10366 ;;		Unchanged: 0/0
 10367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10372 ;;Total ram usage:        0 bytes
 10373 ;; Hardware stack levels used:    1
 10374 ;; Hardware stack levels required when called:   10
 10375 ;; This function calls:
 10376 ;;		_Led_Initialize
 10377 ;;		_Led_StartNotice
 10378 ;; This function is called by:
 10379 ;;		_IR_UpdateSetStatus
 10380 ;; This function uses a non-reentrant model
 10381 ;;
 10382                           
 10383                           
 10384                           ;psect for function _IR_ExitTimeout
 10385  113F                     _IR_ExitTimeout:	
 10386  113F                     l6749:	
 10387                           ;incstack = 0
 10388                           ; Regs used in _IR_ExitTimeout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10389                           
 10390                           
 10391                           ;ir.c: 481: ir_state.mSet = 0;
 10392  113F  301F               	movlw	-225
 10393  1140  05D9               	andwf	_ir_state,f	;volatile
 10394                           
 10395                           ;ir.c: 482: ir_state.tmIdx = 0;
 10396  1141  01DA               	clrf	_ir_state+1	;volatile
 10397                           
 10398                           ;ir.c: 483: ir_state.mSetDelay = 0;
 10399  1142  01DF               	clrf	_ir_state+6	;volatile
 10400                           
 10401                           ;ir.c: 484: Led_StartNotice(2);
 10402  1143  3002               	movlw	2
 10403  1144  2659               	fcall	_Led_StartNotice
 10404                           
 10405                           ;ir.c: 485: Led_Initialize();
 10406  1145  3189  2988         	ljmp	l6287
 10407  1147                     __end_of_IR_ExitTimeout:	
 10408  1147                     __ptext40:	
 10409 ;; *************** function _IR_KeyAction *****************
 10410 ;; Defined at:
 10411 ;;		line 488 in file "user/src/ir.c"
 10412 ;; Parameters:    Size  Location     Type
 10413 ;;		None
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;  i               1   10[BANK2 ] unsigned char 
 10416 ;;  i               1    8[BANK2 ] unsigned char 
 10417 ;;  i               1    6[BANK2 ] unsigned char 
 10418 ;;  i               1    5[BANK2 ] unsigned char 
 10419 ;;  i               1    9[BANK2 ] unsigned char 
 10420 ;;  i               1    7[BANK2 ] unsigned char 
 10421 ;;  i               1    4[BANK2 ] unsigned char 
 10422 ;;  i               1   11[BANK2 ] unsigned char 
 10423 ;;  i               1    2[BANK2 ] unsigned char 
 10424 ;;  i               1    3[BANK2 ] unsigned char 
 10425 ;;  idx             1   12[BANK2 ] unsigned char 
 10426 ;; Return value:  Size  Location     Type
 10427 ;;                  1    wreg      void 
 10428 ;; Registers used:
 10429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10430 ;; Tracked objects:
 10431 ;;		On entry : 1F/0
 10432 ;;		On exit  : 1F/0
 10433 ;;		Unchanged: 0/0
 10434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Locals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Totals:         0      10       0      13       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;Total ram usage:       23 bytes
 10440 ;; Hardware stack levels used:    1
 10441 ;; Hardware stack levels required when called:   11
 10442 ;; This function calls:
 10443 ;;		_Audio_SetVolume
 10444 ;;		_Audio_StopSound
 10445 ;;		_IR_ExitSet
 10446 ;;		_IR_GetIndex
 10447 ;;		_IR_IsValidTime
 10448 ;;		_Led_Initialize
 10449 ;;		_Led_StartNotice
 10450 ;;		_RTC_GetTime
 10451 ;;		_TMR2_DisableInterrupt
 10452 ;;		_TMR2_EnableInterrupt
 10453 ;;		_Util_DecValue
 10454 ;;		_Util_IncValue
 10455 ;;		___bmul
 10456 ;;		___wmul
 10457 ;; This function is called by:
 10458 ;;		_IR_KeyAtionIfPressed
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           
 10463                           ;psect for function _IR_KeyAction
 10464  1147                     _IR_KeyAction:	
 10465  1147                     l6759:	
 10466                           ;incstack = 0
 10467                           ; Regs used in _IR_KeyAction: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10468                           
 10469                           
 10470                           ;ir.c: 489: uint8_t idx;
 10471                           ;ir.c: 490: ir_state.mKeyRcv = 0;
 10472  1147  1059               	bcf	_ir_state,0	;volatile
 10473                           
 10474                           ;ir.c: 491: TMR2_DisableInterrupt();
 10475  1148  266F  3191         	fcall	_TMR2_DisableInterrupt
 10476                           
 10477                           ;ir.c: 492: switch (keyValue) {
 10478  114A  2C82               	goto	l7213
 10479  114B                     l6763:	
 10480                           
 10481                           ;ir.c: 495: gLedPara.mMsc = 1;
 10482  114B  2745               	fcall	PL80	;call to abstracted procedure
 10483  114C  3808               	iorlw	8
 10484  114D  0081               	movwf	1
 10485                           
 10486                           ;ir.c: 496: gLedPara.mDyn = 0;
 10487  114E  3001               	movlw	1
 10488  114F                     L7:	
 10489  114F  1381               	bcf	1,7
 10490                           
 10491                           ;ir.c: 497: gLedPara.mAuto = 0;
 10492  1150  1001               	bcf	1,0
 10493                           
 10494                           ;ir.c: 498: gLedRunPara.music_index = 1;
 10495  1151  0021               	movlb	1	; select bank1
 10496  1152  00E2               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
 10497  1153                     l6771:	
 10498                           
 10499                           ;ir.c: 499: gLedRunPara.mParaChanged = 1;
 10500  1153  0021               	movlb	1	; select bank1
 10501  1154  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 10502  1155                     l6773:	
 10503                           
 10504                           ;ir.c: 500: Led_Initialize();
 10505  1155  3189  2188  3191   	fcall	_Led_Initialize
 10506                           
 10507                           ;ir.c: 501: break;
 10508  1158  2D0F               	goto	l7215
 10509  1159                     l6775:	
 10510                           
 10511                           ;ir.c: 504: gLedPara.mMsc = 2;
 10512  1159  2745  3191         	fcall	PL80	;call to abstracted procedure
 10513  115B  3810               	iorlw	16
 10514  115C  0081               	movwf	1
 10515                           
 10516                           ;ir.c: 505: gLedPara.mDyn = 0;
 10517  115D  3002               	movlw	2
 10518  115E  294F               	goto	L7
 10519  115F                     l6787:	
 10520                           ;ir.c: 507: gLedRunPara.music_index = 2;
 10521                           
 10522                           ;ir.c: 506: gLedPara.mAuto = 0;
 10523                           
 10524                           
 10525                           ;ir.c: 513: gLedPara.mMsc = 3;
 10526  115F  2745  3191         	fcall	PL80	;call to abstracted procedure
 10527  1161  3818               	iorlw	24
 10528  1162  0081               	movwf	1
 10529                           
 10530                           ;ir.c: 514: gLedPara.mDyn = 0;
 10531  1163  3003               	movlw	3
 10532  1164  294F               	goto	L7
 10533  1165                     l6799:	
 10534                           ;ir.c: 516: gLedRunPara.music_index = 3;
 10535                           
 10536                           ;ir.c: 515: gLedPara.mAuto = 0;
 10537                           
 10538                           
 10539                           ;ir.c: 522: gLedPara.mMsc = 4;
 10540  1165  2745  3191         	fcall	PL80	;call to abstracted procedure
 10541  1167  3820               	iorlw	32
 10542  1168  0081               	movwf	1
 10543                           
 10544                           ;ir.c: 523: gLedPara.mDyn = 0;
 10545  1169  3004               	movlw	4
 10546  116A  294F               	goto	L7
 10547  116B                     l1169:	
 10548                           ;ir.c: 525: gLedRunPara.music_index = 4;
 10549                           
 10550                           ;ir.c: 524: gLedPara.mAuto = 0;
 10551                           
 10552  116B                     l6811:	
 10553                           
 10554                           ;ir.c: 530: case 0x4C:
 10555                           ;ir.c: 531: case 0x02:
 10556                           ;ir.c: 532: case 0x4E:
 10557                           ;ir.c: 534: gLedPara.mMsc = IR_GetIndex(keyValue);
 10558  116B  0853               	movf	_keyValue,w	;volatile
 10559  116C  2587  3191         	fcall	_IR_GetIndex
 10560  116E  00BB               	movwf	??_IR_KeyAction
 10561  116F  307B               	movlw	123
 10562  1170  0086               	movwf	6
 10563  1171  3023               	movlw	35
 10564  1172  0087               	movwf	7
 10565  1173  0DBB               	rlf	??_IR_KeyAction,f
 10566  1174  0DBB               	rlf	??_IR_KeyAction,f
 10567  1175  0DBB               	rlf	??_IR_KeyAction,f
 10568  1176  0801               	movf	1,w
 10569  1177  063B               	xorwf	??_IR_KeyAction,w
 10570  1178  3987               	andlw	-121
 10571  1179  063B               	xorwf	??_IR_KeyAction,w
 10572  117A  0081               	movwf	1
 10573                           
 10574                           ;ir.c: 535: gLedPara.mDyn = 1;
 10575  117B  1781               	bsf	1,7
 10576                           
 10577                           ;ir.c: 536: gLedPara.mAuto = 0;
 10578  117C  1001               	bcf	1,0
 10579                           
 10580                           ;ir.c: 537: gLedRunPara.mParaChanged = 1;
 10581  117D  0021               	movlb	1	; select bank1
 10582  117E  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 10583                           
 10584                           ;ir.c: 538: gLedRunPara.music_index = gLedPara.mMsc;
 10585  117F  3023               	movlw	35
 10586  1180  0C01               	rrf	1,w
 10587  1181  0020               	movlb	0	; select bank0
 10588  1182  00BB               	movwf	??_IR_KeyAction
 10589  1183  0CBB               	rrf	??_IR_KeyAction,f
 10590  1184  0C3B               	rrf	??_IR_KeyAction,w
 10591  1185  390F               	andlw	15
 10592  1186  0021               	movlb	1	; select bank1
 10593  1187  00E2               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
 10594  1188  2955               	goto	l6773
 10595  1189                     l6823:	
 10596                           
 10597                           ;ir.c: 542: Audio_StopSound();
 10598  1189  2575  3191         	fcall	_Audio_StopSound
 10599                           
 10600                           ;ir.c: 543: gLedPara.mOn = !gLedPara.mOn;
 10601  118B  307B               	movlw	123
 10602  118C  0086               	movwf	6
 10603  118D  3023               	movlw	35
 10604  118E  0087               	movwf	7
 10605  118F  1003               	clrc
 10606  1190  1C81               	btfss	1,1
 10607  1191  1403               	setc
 10608  1192  2782  3191         	fcall	PL154	;call to abstracted procedure
 10609  1194  0801               	movf	1,w
 10610  1195  063B               	xorwf	??_IR_KeyAction,w
 10611  1196  39FD               	andlw	-3
 10612  1197  063B               	xorwf	??_IR_KeyAction,w
 10613  1198  0081               	movwf	1
 10614                           
 10615                           ;ir.c: 544: gLedPara.mAuto = 0;
 10616  1199  3023               	movlw	35
 10617  119A  1001               	bcf	1,0
 10618  119B  2953               	goto	l6771
 10619  119C                     l6833:	
 10620                           
 10621                           ;ir.c: 549: if(!gLedPara.mAuto)
 10622  119C  3187  279E  3191   	fcall	PL98	;call to abstracted procedure
 10623  119F  1801               	btfsc	1,0
 10624  11A0  2D0F               	goto	l7215
 10625                           
 10626                           ;ir.c: 550: {
 10627                           ;ir.c: 551: Audio_StopSound();
 10628  11A1  2575               	fcall	_Audio_StopSound
 10629                           
 10630                           ;ir.c: 552: gLedPara.mOn = 1;
 10631  11A2  318F  2701  3191   	fcall	PL150	;call to abstracted procedure
 10632                           
 10633                           ;ir.c: 553: gLedPara.mAuto = 1;
 10634  11A5  1401               	bsf	1,0
 10635                           
 10636                           ;ir.c: 554: gLedRunPara.mParaChanged = 1;
 10637  11A6  0021               	movlb	1	; select bank1
 10638  11A7  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 10639                           
 10640                           ;ir.c: 555: Led_Initialize();
 10641  11A8  3189  2188  3191   	fcall	_Led_Initialize
 10642                           
 10643                           ;ir.c: 556: for (uint8_t i = 0; i < 5; i++) {
 10644  11AB  0022               	movlb	2	; select bank2
 10645  11AC  01C2               	clrf	IR_KeyAction@i^(0+256)
 10646  11AD                     l6851:	
 10647                           
 10648                           ;ir.c: 557: gLedRunPara.mCurrentBright[i] = gLedRunPara.mTargetBright[i];
 10649  11AD  3542               	lslf	IR_KeyAction@i^(0+256),w
 10650  11AE  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 10651  11AF  0086               	movwf	6
 10652  11B0  0187               	clrf	7
 10653  11B1  3542               	lslf	IR_KeyAction@i^(0+256),w
 10654  11B2  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 10655  11B3  26AB  3191         	fcall	PL28	;call to abstracted procedure
 10656  11B5  3005               	movlw	5
 10657  11B6  0AC2               	incf	IR_KeyAction@i^(0+256),f
 10658  11B7  0242               	subwf	IR_KeyAction@i^(0+256),w
 10659  11B8  1803               	btfsc	3,0
 10660  11B9  2D0F               	goto	l7215
 10661  11BA  29AD               	goto	l6851
 10662  11BB                     l1179:	
 10663  11BB                     l6857:	
 10664                           
 10665                           ;ir.c: 562: case 0x1E:
 10666                           ;ir.c: 563: case 0x07:
 10667                           ;ir.c: 564: case 0x18:
 10668                           ;ir.c: 565: case 0x08:
 10669                           ;ir.c: 566: Audio_StopSound();
 10670  11BB  2575  3191         	fcall	_Audio_StopSound
 10671                           
 10672                           ;ir.c: 567: idx = IR_GetIndex(keyValue);
 10673  11BD  0853               	movf	_keyValue,w	;volatile
 10674  11BE  2587  3191         	fcall	_IR_GetIndex
 10675  11C0  0022               	movlb	2	; select bank2
 10676  11C1  00CC               	movwf	IR_KeyAction@idx^(0+256)
 10677                           
 10678                           ;ir.c: 568: if (ir_state.mSet == 0) {
 10679  11C2  278D  3191         	fcall	PL162	;call to abstracted procedure
 10680  11C4  1D03               	skipz
 10681  11C5  29EE               	goto	l6887
 10682                           
 10683                           ;ir.c: 569: gLedPara.mAuto = 0;
 10684                           
 10685                           ;ir.c: 570: gLedPara.mMsc = 0;
 10686                           
 10687                           ;ir.c: 571: gLedPara.mDyn = 0;
 10688                           
 10689                           ;ir.c: 572: for(uint8_t i = 0;i < 5;i ++) {
 10690  11C6  26F9  3191         	fcall	PL44	;call to abstracted procedure
 10691  11C8  01CB               	clrf	IR_KeyAction@i_1447^(0+256)
 10692  11C9                     l6875:	
 10693                           
 10694                           ;ir.c: 573: if(i == idx) {
 10695  11C9  084B               	movf	IR_KeyAction@i_1447^(0+256),w
 10696  11CA  064C               	xorwf	IR_KeyAction@idx^(0+256),w
 10697  11CB  1D03               	skipz
 10698  11CC  29DA               	goto	l6879
 10699                           
 10700                           ;ir.c: 574: gLedRunPara.mTargetBright[i] = 1000;
 10701  11CD  30E8               	movlw	232
 10702  11CE  0020               	movlb	0	; select bank0
 10703  11CF  00BB               	movwf	??_IR_KeyAction
 10704  11D0  3003               	movlw	3
 10705  11D1  00BC               	movwf	??_IR_KeyAction+1
 10706  11D2  277C  3191         	fcall	PL148	;call to abstracted procedure
 10707  11D4  0020               	movlb	0	; select bank0
 10708  11D5  083B               	movf	??_IR_KeyAction,w
 10709  11D6  3FC0               	movwi [0]fsr1
 10710  11D7  083C               	movf	??_IR_KeyAction+1,w
 10711  11D8  3FC1               	movwi [1]fsr1
 10712                           
 10713                           ;ir.c: 575: } else {
 10714  11D9  29DE               	goto	l6881
 10715  11DA                     l6879:	
 10716                           
 10717                           ;ir.c: 576: gLedRunPara.mTargetBright[i] = 0;
 10718  11DA  354B               	lslf	IR_KeyAction@i_1447^(0+256),w
 10719  11DB  318E  26DF  3191   	fcall	PL140	;call to abstracted procedure
 10720  11DE                     l6881:	
 10721                           
 10722                           ;ir.c: 577: }
 10723                           ;ir.c: 578: gLedPara.mBright[i] = gLedRunPara.mTargetBright[i];
 10724  11DE  277C  3191         	fcall	PL148	;call to abstracted procedure
 10725  11E0  084B               	movf	IR_KeyAction@i_1447^(0+256),w
 10726  11E1  0020               	movlb	0	; select bank0
 10727  11E2  00BB               	movwf	??_IR_KeyAction
 10728  11E3  307E               	movlw	126
 10729  11E4  2678  3191         	fcall	PL4	;call to abstracted procedure
 10730  11E6  3005               	movlw	5
 10731  11E7  0ACB               	incf	IR_KeyAction@i_1447^(0+256),f
 10732  11E8  024B               	subwf	IR_KeyAction@i_1447^(0+256),w
 10733  11E9  1C03               	skipc
 10734  11EA  29C9               	goto	l6875
 10735  11EB                     l1183:	
 10736                           
 10737                           ;ir.c: 579: }
 10738                           ;ir.c: 580: gLedRunPara.mParaChanged = 1;
 10739  11EB  0021               	movlb	1	; select bank1
 10740  11EC  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 10741                           
 10742                           ;ir.c: 581: } else {
 10743  11ED  2D0F               	goto	l7215
 10744  11EE                     l6887:	
 10745                           
 10746                           ;ir.c: 582: ir_state.mSetDelay = 0;
 10747  11EE  0020               	movlb	0	; select bank0
 10748  11EF  01DF               	clrf	_ir_state+6	;volatile
 10749  11F0  2D0F               	goto	l7215
 10750  11F1                     l6889:	
 10751                           
 10752                           ;ir.c: 586: if(gLedPara.mOn){
 10753  11F1  3187  279E  3191   	fcall	PL98	;call to abstracted procedure
 10754  11F4  1C81               	btfss	1,1
 10755  11F5  2D0F               	goto	l7215
 10756                           
 10757                           ;ir.c: 587: gLedPara.mVolOn = !gLedPara.mVolOn;
 10758  11F6  307B               	movlw	123
 10759  11F7  0086               	movwf	6
 10760  11F8  1003               	clrc
 10761  11F9  1D01               	btfss	1,2
 10762  11FA  1403               	setc
 10763  11FB  2782  3191         	fcall	PL154	;call to abstracted procedure
 10764  11FD  0DBB               	rlf	??_IR_KeyAction,f
 10765  11FE  0801               	movf	1,w
 10766  11FF  063B               	xorwf	??_IR_KeyAction,w
 10767  1200  39FB               	andlw	-5
 10768  1201  063B               	xorwf	??_IR_KeyAction,w
 10769  1202  0081               	movwf	1
 10770                           
 10771                           ;ir.c: 588: Audio_SetVolume(gLedPara.mVolOn ? VOLUME[gLedPara.mVolume] : 0);
 10772  1203  307B               	movlw	123
 10773  1204  0086               	movwf	6
 10774  1205  1901               	btfsc	1,2
 10775  1206  2A0A               	goto	l6897
 10776  1207  0022               	movlb	2	; select bank2
 10777  1208  01C0               	clrf	_IR_KeyAction$1448^(0+256)
 10778  1209  2A0E               	goto	L3
 10779  120A                     l6897:	
 10780  120A  269D  3191         	fcall	PL16	;call to abstracted procedure
 10781  120C  0022               	movlb	2	; select bank2
 10782  120D  00C0               	movwf	_IR_KeyAction$1448^(0+256)
 10783  120E                     L3:	
 10784  120E  01C1               	clrf	(_IR_KeyAction$1448+1)^(0+256)
 10785  120F  0840               	movf	_IR_KeyAction$1448^(0+256),w
 10786  1210  2614  3191         	fcall	_Audio_SetVolume
 10787  1212  29EB               	goto	l1183
 10788  1213                     l1196:	
 10789  1213                     l6903:	
 10790                           
 10791                           ;ir.c: 593: case 0x0E:
 10792                           ;ir.c: 594: case 0x1F:
 10793                           ;ir.c: 595: case 0x5E:
 10794                           ;ir.c: 596: case 0x12:
 10795                           ;ir.c: 597: Audio_StopSound();
 10796  1213  2575  3191         	fcall	_Audio_StopSound
 10797                           
 10798                           ;ir.c: 598: idx = IR_GetIndex(keyValue);
 10799  1215  0853               	movf	_keyValue,w	;volatile
 10800  1216  2587  3191         	fcall	_IR_GetIndex
 10801  1218  0022               	movlb	2	; select bank2
 10802  1219  00CC               	movwf	IR_KeyAction@idx^(0+256)
 10803                           
 10804                           ;ir.c: 599: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 1000, 200);
 10805  121A  354C               	lslf	IR_KeyAction@idx^(0+256),w
 10806  121B  2703  3191         	fcall	PL46	;call to abstracted procedure
 10807  121D  26B2  3191         	fcall	PL30	;call to abstracted procedure
 10808  121F  253A  3191         	fcall	_Util_IncValue
 10809  1221                     L5:	
 10810                           
 10811                           ;ir.c: 600: if (ir_state.mSet == 0) {
 10812  1221  0E59               	swapf	_ir_state,w	;volatile
 10813  1222  0C89               	rrf	9,f
 10814  1223  3907               	andlw	7
 10815  1224  1D03               	skipz
 10816  1225  29EE               	goto	l6887
 10817                           
 10818                           ;ir.c: 601: gLedPara.mAuto = 0;
 10819                           
 10820                           ;ir.c: 602: gLedPara.mMsc = 0;
 10821                           
 10822                           ;ir.c: 603: gLedPara.mDyn = 0;
 10823                           
 10824                           ;ir.c: 604: gLedPara.mBright[idx] = gLedRunPara.mTargetBright[idx];
 10825  1226  26F9  3191         	fcall	PL44	;call to abstracted procedure
 10826  1228  354C               	lslf	IR_KeyAction@idx^(0+256),w
 10827  1229  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 10828  122A  0086               	movwf	6
 10829  122B  0187               	clrf	7
 10830  122C  084C               	movf	IR_KeyAction@idx^(0+256),w
 10831  122D  0020               	movlb	0	; select bank0
 10832  122E  00BB               	movwf	??_IR_KeyAction
 10833  122F  307E               	movlw	126
 10834  1230  01BC               	clrf	??_IR_KeyAction+1
 10835  1231  35BB               	lslf	??_IR_KeyAction,f
 10836  1232  0DBC               	rlf	??_IR_KeyAction+1,f
 10837  1233  00BD               	movwf	??_IR_KeyAction+2
 10838  1234  3023               	movlw	35
 10839  1235  00BE               	movwf	??_IR_KeyAction+3
 10840  1236  083B               	movf	??_IR_KeyAction,w
 10841  1237  073D               	addwf	??_IR_KeyAction+2,w
 10842  1238  0084               	movwf	4
 10843  1239  083C               	movf	??_IR_KeyAction+1,w
 10844  123A  3D3E               	addwfc	??_IR_KeyAction+3,w
 10845  123B  26F3  3191         	fcall	PL40	;call to abstracted procedure
 10846  123D  29EB               	goto	l1183
 10847  123E                     l1203:	
 10848  123E                     l6923:	
 10849                           
 10850                           ;ir.c: 611: case 0x06:
 10851                           ;ir.c: 612: case 0x11:
 10852                           ;ir.c: 613: case 0x42:
 10853                           ;ir.c: 614: case 0x15:
 10854                           ;ir.c: 615: Audio_StopSound();
 10855  123E  2575  3191         	fcall	_Audio_StopSound
 10856                           
 10857                           ;ir.c: 616: idx = IR_GetIndex(keyValue);
 10858  1240  0853               	movf	_keyValue,w	;volatile
 10859  1241  2587  3191         	fcall	_IR_GetIndex
 10860  1243  0022               	movlb	2	; select bank2
 10861  1244  00CC               	movwf	IR_KeyAction@idx^(0+256)
 10862                           
 10863                           ;ir.c: 617: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 0, 200);
 10864  1245  354C               	lslf	IR_KeyAction@idx^(0+256),w
 10865  1246  276A  3191         	fcall	PL108	;call to abstracted procedure
 10866  1248  2514  3191         	fcall	_Util_DecValue
 10867  124A  2A21               	goto	L5
 10868  124B                     l1209:	
 10869                           ;ir.c: 621: gLedPara.mDyn = 0;
 10870                           
 10871                           ;ir.c: 620: gLedPara.mMsc = 0;
 10872                           
 10873                           ;ir.c: 619: gLedPara.mAuto = 0;
 10874                           
 10875                           ;ir.c: 618: if (ir_state.mSet == 0) {
 10876                           
 10877  124B                     l6943:	
 10878                           
 10879                           ;ir.c: 629: case 0x0B:
 10880                           ;ir.c: 630: case 0x1A:
 10881                           ;ir.c: 631: case 0x03:
 10882                           ;ir.c: 632: Audio_StopSound();
 10883  124B  2575  3191         	fcall	_Audio_StopSound
 10884                           
 10885                           ;ir.c: 633: idx = IR_GetIndex(keyValue);
 10886  124D  0853               	movf	_keyValue,w	;volatile
 10887  124E  2587  3191         	fcall	_IR_GetIndex
 10888  1250  0022               	movlb	2	; select bank2
 10889  1251  00CC               	movwf	IR_KeyAction@idx^(0+256)
 10890                           
 10891                           ;ir.c: 634: for (uint8_t i = 0; i < 5; i++) {
 10892  1252  01C3               	clrf	IR_KeyAction@i_1449^(0+256)
 10893  1253                     l6949:	
 10894  1253  3005               	movlw	5
 10895  1254  0243               	subwf	IR_KeyAction@i_1449^(0+256),w
 10896  1255  1803               	btfsc	3,0
 10897  1256  2A63               	goto	l6959
 10898                           
 10899                           ;ir.c: 635: gLedRunPara.mTargetBright[i] = gLedPara.mCustom[idx][i];
 10900  1257  0843               	movf	IR_KeyAction@i_1449^(0+256),w
 10901  1258  2724  3191         	fcall	PL64	;call to abstracted procedure
 10902  125A  2560  3191         	fcall	___wmul
 10903  125C  2712               	fcall	PL54	;call to abstracted procedure
 10904  125D  3543               	lslf	IR_KeyAction@i_1449^(0+256),w
 10905  125E  318D  25EE  3191   	fcall	PL20	;call to abstracted procedure
 10906  1261  0AC3               	incf	IR_KeyAction@i_1449^(0+256),f
 10907  1262  2A53               	goto	l6949
 10908  1263                     l6959:	
 10909                           
 10910                           ;ir.c: 636: }
 10911                           ;ir.c: 637: if (ir_state.mSet == 0) {
 10912  1263  278D  3191         	fcall	PL162	;call to abstracted procedure
 10913  1265  1D03               	skipz
 10914  1266  29EE               	goto	l6887
 10915                           
 10916                           ;ir.c: 638: gLedPara.mAuto = 0;
 10917                           
 10918                           ;ir.c: 639: gLedPara.mMsc = 0;
 10919                           
 10920                           ;ir.c: 640: gLedPara.mDyn = 0;
 10921                           
 10922                           ;ir.c: 641: for (uint8_t i = 0; i < 5; i++) {
 10923  1267  26F9  3191         	fcall	PL44	;call to abstracted procedure
 10924  1269  01C4               	clrf	IR_KeyAction@i_1450^(0+256)
 10925  126A                     l6969:	
 10926  126A  3005               	movlw	5
 10927  126B  0244               	subwf	IR_KeyAction@i_1450^(0+256),w
 10928  126C  1803               	btfsc	3,0
 10929  126D  29EB               	goto	l1183
 10930                           
 10931                           ;ir.c: 642: gLedPara.mBright[i] = gLedPara.mCustom[idx][i];
 10932  126E  0844               	movf	IR_KeyAction@i_1450^(0+256),w
 10933  126F  2724  3191         	fcall	PL64	;call to abstracted procedure
 10934  1271  2560  3191         	fcall	___wmul
 10935  1273  2712  3191         	fcall	PL54	;call to abstracted procedure
 10936  1275  0844               	movf	IR_KeyAction@i_1450^(0+256),w
 10937  1276  0020               	movlb	0	; select bank0
 10938  1277  00C1               	movwf	??_IR_KeyAction+6
 10939  1278  307E               	movlw	126
 10940  1279  01C2               	clrf	??_IR_KeyAction+7
 10941  127A  35C1               	lslf	??_IR_KeyAction+6,f
 10942  127B  0DC2               	rlf	??_IR_KeyAction+7,f
 10943  127C  00C3               	movwf	??_IR_KeyAction+8
 10944  127D  3023               	movlw	35
 10945  127E  00C4               	movwf	??_IR_KeyAction+9
 10946  127F  0841               	movf	??_IR_KeyAction+6,w
 10947  1280  0743               	addwf	??_IR_KeyAction+8,w
 10948  1281  0084               	movwf	4
 10949  1282  0842               	movf	??_IR_KeyAction+7,w
 10950  1283  3D44               	addwfc	??_IR_KeyAction+9,w
 10951  1284  26F3  3191         	fcall	PL40	;call to abstracted procedure
 10952  1286  0022               	movlb	2	; select bank2
 10953  1287  0AC4               	incf	IR_KeyAction@i_1450^(0+256),f
 10954  1288  2A6A               	goto	l6969
 10955  1289                     l6981:	
 10956                           
 10957                           ;ir.c: 651: if(gLedPara.mMsc == 0) {
 10958  1289  268A  3191         	fcall	PL8	;call to abstracted procedure
 10959  128B  1D03               	skipz
 10960  128C  2AA7               	goto	l6997
 10961                           
 10962                           ;ir.c: 652: for (uint8_t i = 0; i < 5; i++) {
 10963  128D  0022               	movlb	2	; select bank2
 10964  128E  01C7               	clrf	IR_KeyAction@i_1451^(0+256)
 10965  128F                     l6985:	
 10966  128F  3005               	movlw	5
 10967  1290  0247               	subwf	IR_KeyAction@i_1451^(0+256),w
 10968  1291  1803               	btfsc	3,0
 10969  1292  2BA6               	goto	l7107
 10970                           
 10971                           ;ir.c: 653: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[i], 1000, 200);
 10972  1293  3547               	lslf	IR_KeyAction@i_1451^(0+256),w
 10973  1294  2703  3191         	fcall	PL46	;call to abstracted procedure
 10974  1296  26B2  3191         	fcall	PL30	;call to abstracted procedure
 10975  1298  253A  3191         	fcall	_Util_IncValue
 10976                           
 10977                           ;ir.c: 654: gLedPara.mBright[i] = gLedRunPara.mTargetBright[i];
 10978  129A  0022               	movlb	2	; select bank2
 10979  129B  3547               	lslf	IR_KeyAction@i_1451^(0+256),w
 10980  129C  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 10981  129D  0086               	movwf	6
 10982  129E  0187               	clrf	7
 10983  129F  0847               	movf	IR_KeyAction@i_1451^(0+256),w
 10984  12A0  0020               	movlb	0	; select bank0
 10985  12A1  00BB               	movwf	??_IR_KeyAction
 10986  12A2  307E               	movlw	126
 10987  12A3  2678  3191         	fcall	PL4	;call to abstracted procedure
 10988  12A5  0AC7               	incf	IR_KeyAction@i_1451^(0+256),f
 10989  12A6  2A8F               	goto	l6985
 10990  12A7                     l6997:	
 10991                           
 10992                           ;ir.c: 657: if(gLedPara.mMsc == 1) {
 10993  12A7  268A  3191         	fcall	PL8	;call to abstracted procedure
 10994  12A9  3A01               	xorlw	1
 10995  12AA  1D03               	skipz
 10996  12AB  2AC6               	goto	l7013
 10997                           
 10998                           ;ir.c: 658: for(uint8_t i = 0;i < 5; i++) {
 10999  12AC  0022               	movlb	2	; select bank2
 11000  12AD  01C8               	clrf	IR_KeyAction@i_1452^(0+256)
 11001  12AE                     l7001:	
 11002  12AE  3005               	movlw	5
 11003  12AF  0248               	subwf	IR_KeyAction@i_1452^(0+256),w
 11004  12B0  1803               	btfsc	3,0
 11005  12B1  2BA6               	goto	l7107
 11006                           
 11007                           ;ir.c: 659: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[i], 1000, 200);
 11008  12B2  3548               	lslf	IR_KeyAction@i_1452^(0+256),w
 11009  12B3  2703  3191         	fcall	PL46	;call to abstracted procedure
 11010  12B5  26B2  3191         	fcall	PL30	;call to abstracted procedure
 11011  12B7  253A  3191         	fcall	_Util_IncValue
 11012                           
 11013                           ;ir.c: 660: gLedPara.mStaticDayBright[i] = gLedRunPara.mTargetBright[i];
 11014  12B9  0022               	movlb	2	; select bank2
 11015  12BA  3548               	lslf	IR_KeyAction@i_1452^(0+256),w
 11016  12BB  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11017  12BC  0086               	movwf	6
 11018  12BD  0187               	clrf	7
 11019  12BE  0848               	movf	IR_KeyAction@i_1452^(0+256),w
 11020  12BF  0020               	movlb	0	; select bank0
 11021  12C0  00BB               	movwf	??_IR_KeyAction
 11022  12C1  30B0               	movlw	176
 11023  12C2  2678  3191         	fcall	PL4	;call to abstracted procedure
 11024  12C4  0AC8               	incf	IR_KeyAction@i_1452^(0+256),f
 11025  12C5  2AAE               	goto	l7001
 11026  12C6                     l7013:	
 11027  12C6  268A  3191         	fcall	PL8	;call to abstracted procedure
 11028  12C8  3A02               	xorlw	2
 11029  12C9  1D03               	skipz
 11030  12CA  2AD6               	goto	l7019
 11031                           
 11032                           ;ir.c: 663: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[2],1000,200);
 11033  12CB  30D8               	movlw	low (_gLedRunPara+14)
 11034  12CC  00AD               	movwf	Util_IncValue@pSrc
 11035  12CD  3000               	movlw	high (_gLedRunPara+14)
 11036  12CE  2694  3191         	fcall	PL14	;call to abstracted procedure
 11037  12D0  253A  3191         	fcall	_Util_IncValue
 11038                           
 11039                           ;ir.c: 664: gLedPara.mStaticNightBright[2] = gLedRunPara.mTargetBright[2];
 11040  12D2  30BE               	movlw	190
 11041  12D3  2709  3191         	fcall	PL48	;call to abstracted procedure
 11042                           
 11043                           ;ir.c: 665: } else if (gLedPara.mMsc == 3) {
 11044  12D5  2BA6               	goto	l7107
 11045  12D6                     l7019:	
 11046  12D6  268A  3191         	fcall	PL8	;call to abstracted procedure
 11047  12D8  3A03               	xorlw	3
 11048  12D9  1D03               	skipz
 11049  12DA  2AF3               	goto	l7029
 11050                           
 11051                           ;ir.c: 666: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[2],1000,200);
 11052  12DB  30D8               	movlw	low (_gLedRunPara+14)
 11053  12DC  00AD               	movwf	Util_IncValue@pSrc
 11054  12DD  3000               	movlw	high (_gLedRunPara+14)
 11055  12DE  2694  3191         	fcall	PL14	;call to abstracted procedure
 11056  12E0  253A  3191         	fcall	_Util_IncValue
 11057                           
 11058                           ;ir.c: 667: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[3],1000,200);
 11059  12E2  30DA               	movlw	low (_gLedRunPara+16)
 11060  12E3  00AD               	movwf	Util_IncValue@pSrc
 11061  12E4  3000               	movlw	high (_gLedRunPara+16)
 11062  12E5  2694  3191         	fcall	PL14	;call to abstracted procedure
 11063  12E7  253A  3191         	fcall	_Util_IncValue
 11064                           
 11065                           ;ir.c: 668: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[4],1000,200);
 11066  12E9  30DC               	movlw	low (_gLedRunPara+18)
 11067  12EA  00AD               	movwf	Util_IncValue@pSrc
 11068  12EB  3000               	movlw	high (_gLedRunPara+18)
 11069  12EC  2694  3191         	fcall	PL14	;call to abstracted procedure
 11070  12EE  253A  3191         	fcall	_Util_IncValue
 11071                           
 11072                           ;ir.c: 669: gLedPara.mStaticFishBright[2] = gLedRunPara.mTargetBright[2];
 11073                           
 11074                           ;ir.c: 670: gLedPara.mStaticFishBright[3] = gLedRunPara.mTargetBright[3];
 11075                           
 11076                           ;ir.c: 671: gLedPara.mStaticFishBright[4] = gLedRunPara.mTargetBright[4];
 11077  12F0  26DD  3191         	fcall	PL38	;call to abstracted procedure
 11078                           
 11079                           ;ir.c: 672: } else if (gLedPara.mMsc == 4) {
 11080  12F2  2BA6               	goto	l7107
 11081  12F3                     l7029:	
 11082  12F3  268A  3191         	fcall	PL8	;call to abstracted procedure
 11083  12F5  3A04               	xorlw	4
 11084  12F6  1D03               	skipz
 11085  12F7  2BA6               	goto	l7107
 11086                           
 11087                           ;ir.c: 673: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[0],1000,200);
 11088  12F8  30D4               	movlw	low (_gLedRunPara+10)
 11089  12F9  00AD               	movwf	Util_IncValue@pSrc
 11090  12FA  3000               	movlw	high (_gLedRunPara+10)
 11091  12FB  2694  3191         	fcall	PL14	;call to abstracted procedure
 11092  12FD  253A  3191         	fcall	_Util_IncValue
 11093                           
 11094                           ;ir.c: 674: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[2],1000,200);
 11095  12FF  30D8               	movlw	low (_gLedRunPara+14)
 11096  1300  00AD               	movwf	Util_IncValue@pSrc
 11097  1301  3000               	movlw	high (_gLedRunPara+14)
 11098  1302  2694  3191         	fcall	PL14	;call to abstracted procedure
 11099  1304  253A  3191         	fcall	_Util_IncValue
 11100                           
 11101                           ;ir.c: 675: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[3],1000,200);
 11102  1306  30DA               	movlw	low (_gLedRunPara+16)
 11103  1307  00AD               	movwf	Util_IncValue@pSrc
 11104  1308  3000               	movlw	high (_gLedRunPara+16)
 11105  1309  2694  3191         	fcall	PL14	;call to abstracted procedure
 11106  130B  253A  3191         	fcall	_Util_IncValue
 11107                           
 11108                           ;ir.c: 676: Util_IncValue((uint16_t *) & gLedRunPara.mTargetBright[4],1000,200);
 11109  130D  30DC               	movlw	low (_gLedRunPara+18)
 11110  130E  00AD               	movwf	Util_IncValue@pSrc
 11111  130F  3000               	movlw	high (_gLedRunPara+18)
 11112  1310  2694  3191         	fcall	PL14	;call to abstracted procedure
 11113  1312  253A  3191         	fcall	_Util_IncValue
 11114  1314  2BA4               	goto	L35
 11115  1315                     l7047:	
 11116                           ;ir.c: 685: gLedPara.mDyn = 0;
 11117                           
 11118                           ;ir.c: 681: }
 11119                           ;ir.c: 682: }
 11120                           ;ir.c: 683: gLedPara.mAuto = 0;
 11121                           
 11122                           ;ir.c: 677: gLedPara.mStaticPlantBright[0] = gLedRunPara.mTargetBright[0];
 11123                           
 11124                           ;ir.c: 678: gLedPara.mStaticPlantBright[2] = gLedRunPara.mTargetBright[2];
 11125                           
 11126                           ;ir.c: 679: gLedPara.mStaticPlantBright[3] = gLedRunPara.mTargetBright[3];
 11127                           
 11128                           ;ir.c: 680: gLedPara.mStaticPlantBright[4] = gLedRunPara.mTargetBright[4];
 11129                           
 11130                           
 11131                           ;ir.c: 690: if(gLedPara.mMsc == 0) {
 11132  1315  268A  3191         	fcall	PL8	;call to abstracted procedure
 11133  1317  1D03               	skipz
 11134  1318  2B31               	goto	l7063
 11135                           
 11136                           ;ir.c: 691: for(uint8_t i = 0;i < 5; i++) {
 11137  1319  0022               	movlb	2	; select bank2
 11138  131A  01C9               	clrf	IR_KeyAction@i_1453^(0+256)
 11139  131B                     l7051:	
 11140  131B  3005               	movlw	5
 11141  131C  0249               	subwf	IR_KeyAction@i_1453^(0+256),w
 11142  131D  1803               	btfsc	3,0
 11143  131E  2BA6               	goto	l7107
 11144                           
 11145                           ;ir.c: 692: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[i], 0, 200);
 11146  131F  3549               	lslf	IR_KeyAction@i_1453^(0+256),w
 11147  1320  276A  3191         	fcall	PL108	;call to abstracted procedure
 11148  1322  2514  3191         	fcall	_Util_DecValue
 11149                           
 11150                           ;ir.c: 693: gLedPara.mBright[i] = gLedRunPara.mTargetBright[i];
 11151  1324  0022               	movlb	2	; select bank2
 11152  1325  3549               	lslf	IR_KeyAction@i_1453^(0+256),w
 11153  1326  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11154  1327  0086               	movwf	6
 11155  1328  0187               	clrf	7
 11156  1329  0849               	movf	IR_KeyAction@i_1453^(0+256),w
 11157  132A  0020               	movlb	0	; select bank0
 11158  132B  00BB               	movwf	??_IR_KeyAction
 11159  132C  307E               	movlw	126
 11160  132D  2678  3191         	fcall	PL4	;call to abstracted procedure
 11161  132F  0AC9               	incf	IR_KeyAction@i_1453^(0+256),f
 11162  1330  2B1B               	goto	l7051
 11163  1331                     l7063:	
 11164                           
 11165                           ;ir.c: 696: if(gLedPara.mMsc == 1) {
 11166  1331  268A  3191         	fcall	PL8	;call to abstracted procedure
 11167  1333  3A01               	xorlw	1
 11168  1334  1D03               	skipz
 11169  1335  2B56               	goto	l7079
 11170                           
 11171                           ;ir.c: 697: for(uint8_t i = 0;i < 5; i++) {
 11172  1336  0022               	movlb	2	; select bank2
 11173  1337  01CA               	clrf	IR_KeyAction@i_1454^(0+256)
 11174  1338                     l7067:	
 11175  1338  3005               	movlw	5
 11176  1339  024A               	subwf	IR_KeyAction@i_1454^(0+256),w
 11177  133A  1803               	btfsc	3,0
 11178  133B  2BA6               	goto	l7107
 11179                           
 11180                           ;ir.c: 698: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[i], 100, 200);
 11181  133C  354A               	lslf	IR_KeyAction@i_1454^(0+256),w
 11182  133D  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11183  133E  0020               	movlb	0	; select bank0
 11184  133F  00AD               	movwf	Util_DecValue@pSrc
 11185  1340  3064               	movlw	100
 11186  1341  01AE               	clrf	Util_DecValue@pSrc+1
 11187  1342  00AF               	movwf	Util_DecValue@min
 11188  1343  30C8               	movlw	200
 11189  1344  01B0               	clrf	Util_DecValue@min+1
 11190  1345  00B1               	movwf	Util_DecValue@delta
 11191  1346  01B2               	clrf	Util_DecValue@delta+1
 11192  1347  2514  3191         	fcall	_Util_DecValue
 11193                           
 11194                           ;ir.c: 699: gLedPara.mStaticDayBright[i] = gLedRunPara.mTargetBright[i];
 11195  1349  0022               	movlb	2	; select bank2
 11196  134A  354A               	lslf	IR_KeyAction@i_1454^(0+256),w
 11197  134B  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11198  134C  0086               	movwf	6
 11199  134D  0187               	clrf	7
 11200  134E  084A               	movf	IR_KeyAction@i_1454^(0+256),w
 11201  134F  0020               	movlb	0	; select bank0
 11202  1350  00BB               	movwf	??_IR_KeyAction
 11203  1351  30B0               	movlw	176
 11204  1352  2678  3191         	fcall	PL4	;call to abstracted procedure
 11205  1354  0ACA               	incf	IR_KeyAction@i_1454^(0+256),f
 11206  1355  2B38               	goto	l7067
 11207  1356                     l7079:	
 11208  1356  268A  3191         	fcall	PL8	;call to abstracted procedure
 11209  1358  3A02               	xorlw	2
 11210  1359  1D03               	skipz
 11211  135A  2B66               	goto	l7085
 11212                           
 11213                           ;ir.c: 702: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[2], 100, 200);
 11214  135B  30D8               	movlw	low (_gLedRunPara+14)
 11215  135C  00AD               	movwf	Util_DecValue@pSrc
 11216  135D  3000               	movlw	high (_gLedRunPara+14)
 11217  135E  26B9  3191         	fcall	PL32	;call to abstracted procedure
 11218  1360  2514  3191         	fcall	_Util_DecValue
 11219                           
 11220                           ;ir.c: 703: gLedPara.mStaticNightBright[2] = gLedRunPara.mTargetBright[2];
 11221  1362  30BE               	movlw	190
 11222  1363  2709  3191         	fcall	PL48	;call to abstracted procedure
 11223                           
 11224                           ;ir.c: 704: } else if (gLedPara.mMsc == 3) {
 11225  1365  2BA6               	goto	l7107
 11226  1366                     l7085:	
 11227  1366  268A  3191         	fcall	PL8	;call to abstracted procedure
 11228  1368  3A03               	xorlw	3
 11229  1369  1D03               	skipz
 11230  136A  2B83               	goto	l7095
 11231                           
 11232                           ;ir.c: 705: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[2], 100, 200);
 11233  136B  30D8               	movlw	low (_gLedRunPara+14)
 11234  136C  00AD               	movwf	Util_DecValue@pSrc
 11235  136D  3000               	movlw	high (_gLedRunPara+14)
 11236  136E  26B9  3191         	fcall	PL32	;call to abstracted procedure
 11237  1370  2514  3191         	fcall	_Util_DecValue
 11238                           
 11239                           ;ir.c: 706: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[3], 100, 200);
 11240  1372  30DA               	movlw	low (_gLedRunPara+16)
 11241  1373  00AD               	movwf	Util_DecValue@pSrc
 11242  1374  3000               	movlw	high (_gLedRunPara+16)
 11243  1375  26B9  3191         	fcall	PL32	;call to abstracted procedure
 11244  1377  2514  3191         	fcall	_Util_DecValue
 11245                           
 11246                           ;ir.c: 707: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[4], 100, 200);
 11247  1379  30DC               	movlw	low (_gLedRunPara+18)
 11248  137A  00AD               	movwf	Util_DecValue@pSrc
 11249  137B  3000               	movlw	high (_gLedRunPara+18)
 11250  137C  26B9  3191         	fcall	PL32	;call to abstracted procedure
 11251  137E  2514  3191         	fcall	_Util_DecValue
 11252                           
 11253                           ;ir.c: 708: gLedPara.mStaticFishBright[2] = gLedRunPara.mTargetBright[2];
 11254                           
 11255                           ;ir.c: 709: gLedPara.mStaticFishBright[3] = gLedRunPara.mTargetBright[3];
 11256                           
 11257                           ;ir.c: 710: gLedPara.mStaticFishBright[4] = gLedRunPara.mTargetBright[4];
 11258  1380  26DD  3191         	fcall	PL38	;call to abstracted procedure
 11259                           
 11260                           ;ir.c: 711: } else if (gLedPara.mMsc == 4) {
 11261  1382  2BA6               	goto	l7107
 11262  1383                     l7095:	
 11263  1383  268A  3191         	fcall	PL8	;call to abstracted procedure
 11264  1385  3A04               	xorlw	4
 11265  1386  1D03               	skipz
 11266  1387  2BA6               	goto	l7107
 11267                           
 11268                           ;ir.c: 712: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[0], 100, 200);
 11269  1388  30D4               	movlw	low (_gLedRunPara+10)
 11270  1389  00AD               	movwf	Util_DecValue@pSrc
 11271  138A  3000               	movlw	high (_gLedRunPara+10)
 11272  138B  26B9  3191         	fcall	PL32	;call to abstracted procedure
 11273  138D  2514  3191         	fcall	_Util_DecValue
 11274                           
 11275                           ;ir.c: 713: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[2], 100, 200);
 11276  138F  30D8               	movlw	low (_gLedRunPara+14)
 11277  1390  00AD               	movwf	Util_DecValue@pSrc
 11278  1391  3000               	movlw	high (_gLedRunPara+14)
 11279  1392  26B9  3191         	fcall	PL32	;call to abstracted procedure
 11280  1394  2514  3191         	fcall	_Util_DecValue
 11281                           
 11282                           ;ir.c: 714: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[3], 100, 200);
 11283  1396  30DA               	movlw	low (_gLedRunPara+16)
 11284  1397  00AD               	movwf	Util_DecValue@pSrc
 11285  1398  3000               	movlw	high (_gLedRunPara+16)
 11286  1399  26B9  3191         	fcall	PL32	;call to abstracted procedure
 11287  139B  2514  3191         	fcall	_Util_DecValue
 11288                           
 11289                           ;ir.c: 715: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[4], 100, 200);
 11290  139D  30DC               	movlw	low (_gLedRunPara+18)
 11291  139E  00AD               	movwf	Util_DecValue@pSrc
 11292  139F  3000               	movlw	high (_gLedRunPara+18)
 11293  13A0  26B9  3191         	fcall	PL32	;call to abstracted procedure
 11294  13A2  2514  3191         	fcall	_Util_DecValue
 11295  13A4                     L35:	
 11296                           
 11297                           ;ir.c: 716: gLedPara.mStaticPlantBright[0] = gLedRunPara.mTargetBright[0];
 11298                           
 11299                           ;ir.c: 717: gLedPara.mStaticPlantBright[2] = gLedRunPara.mTargetBright[2];
 11300                           
 11301                           ;ir.c: 718: gLedPara.mStaticPlantBright[3] = gLedRunPara.mTargetBright[3];
 11302                           
 11303                           ;ir.c: 719: gLedPara.mStaticPlantBright[4] = gLedRunPara.mTargetBright[4];
 11304  13A4  26C1  3191         	fcall	PL34	;call to abstracted procedure
 11305  13A6                     l7107:	
 11306                           
 11307                           ;ir.c: 720: }
 11308                           ;ir.c: 721: }
 11309                           ;ir.c: 722: gLedPara.mAuto = 0;
 11310  13A6  307B               	movlw	123
 11311  13A7  0086               	movwf	6
 11312  13A8  3023               	movlw	35
 11313  13A9  0087               	movwf	7
 11314  13AA  1001               	bcf	1,0
 11315                           
 11316                           ;ir.c: 724: gLedPara.mDyn = 0;
 11317  13AB  1381               	bcf	1,7
 11318  13AC  29EB               	goto	l1183
 11319  13AD                     l7113:	
 11320                           
 11321                           ;ir.c: 728: Util_DecValue((uint16_t*) & gLedPara.mVolume, 0, 1);
 11322  13AD  307D               	movlw	125
 11323  13AE  00AD               	movwf	Util_DecValue@pSrc
 11324  13AF  3023               	movlw	35
 11325  13B0  00AE               	movwf	Util_DecValue@pSrc+1
 11326  13B1  01AF               	clrf	Util_DecValue@min
 11327  13B2  01B0               	clrf	Util_DecValue@min+1
 11328  13B3  01B1               	clrf	Util_DecValue@delta
 11329  13B4  0AB1               	incf	Util_DecValue@delta,f
 11330  13B5  01B2               	clrf	Util_DecValue@delta+1
 11331  13B6  2514  3191         	fcall	_Util_DecValue
 11332                           
 11333                           ;ir.c: 729: Audio_SetVolume(VOLUME[ gLedPara.mVolume ]);
 11334  13B8  269D  3191         	fcall	PL16	;call to abstracted procedure
 11335  13BA  2614  3191         	fcall	_Audio_SetVolume
 11336  13BC  29EB               	goto	l1183
 11337  13BD                     l7119:	
 11338                           
 11339                           ;ir.c: 733: Util_IncValue((uint16_t*) & gLedPara.mVolume, 4, 1);
 11340  13BD  307D               	movlw	125
 11341  13BE  00AD               	movwf	Util_IncValue@pSrc
 11342  13BF  3023               	movlw	35
 11343  13C0  00AE               	movwf	Util_IncValue@pSrc+1
 11344  13C1  3004               	movlw	4
 11345  13C2  00AF               	movwf	Util_IncValue@max
 11346  13C3  01B0               	clrf	Util_IncValue@max+1
 11347  13C4  01B1               	clrf	Util_IncValue@delta
 11348  13C5  0AB1               	incf	Util_IncValue@delta,f
 11349  13C6  01B2               	clrf	Util_IncValue@delta+1
 11350  13C7  253A  3191         	fcall	_Util_IncValue
 11351                           
 11352                           ;ir.c: 734: Audio_SetVolume(VOLUME[ gLedPara.mVolume ]);
 11353  13C9  269D  3191         	fcall	PL16	;call to abstracted procedure
 11354  13CB  2614  3191         	fcall	_Audio_SetVolume
 11355  13CD  29EB               	goto	l1183
 11356  13CE                     l1250:	
 11357  13CE                     l7125:	
 11358                           
 11359                           ;ir.c: 738: case 0x5C:
 11360                           ;ir.c: 739: case 0x0C:
 11361                           ;ir.c: 740: case 0x0A:
 11362                           ;ir.c: 741: case 0x51:
 11363                           ;ir.c: 742: case 0x45:
 11364                           ;ir.c: 743: case 0x44:
 11365                           ;ir.c: 744: case 0x4F:
 11366                           ;ir.c: 745: case 0x46:
 11367                           ;ir.c: 746: case 0x48:
 11368                           ;ir.c: 747: if (ir_state.tmIdx < 4) {
 11369  13CE  3004               	movlw	4
 11370  13CF  025A               	subwf	_ir_state+1,w	;volatile
 11371  13D0  1803               	skipnc
 11372  13D1  2BDC               	goto	l7131
 11373                           
 11374                           ;ir.c: 748: ir_state.time[ir_state.tmIdx++] = IR_GetIndex(keyValue);
 11375  13D2  085A               	movf	_ir_state+1,w	;volatile
 11376  13D3  3E5B               	addlw	(low ((_ir_state| 0+2)))& (0+255)
 11377  13D4  0086               	movwf	6
 11378  13D5  0187               	clrf	7
 11379  13D6  0853               	movf	_keyValue,w	;volatile
 11380  13D7  2587  3191         	fcall	_IR_GetIndex
 11381  13D9  0081               	movwf	1
 11382  13DA  0ADA               	incf	_ir_state+1,f	;volatile
 11383                           
 11384                           ;ir.c: 749: } else {
 11385  13DB  2BDD               	goto	l7133
 11386  13DC                     l7131:	
 11387                           
 11388                           ;ir.c: 750: ir_state.tmIdx = 0;
 11389  13DC  01DA               	clrf	_ir_state+1	;volatile
 11390  13DD                     l7133:	
 11391                           
 11392                           ;ir.c: 751: }
 11393                           ;ir.c: 752: if (IR_IsValidTime((uint8_t*) & ir_state.time[0], ir_state.tmIdx) == 0) {
 11394  13DD  085A               	movf	_ir_state+1,w	;volatile
 11395  13DE  00B0               	movwf	IR_IsValidTime@len
 11396  13DF  305B               	movlw	(low ((_ir_state| 0+2)))& (0+255)
 11397  13E0  2797  3191         	fcall	_IR_IsValidTime
 11398  13E2  3A00               	xorlw	0
 11399  13E3  1D03               	skipz
 11400  13E4  2BEB               	goto	l7139
 11401                           
 11402                           ;ir.c: 753: Led_StartNotice(3);
 11403  13E5  3003               	movlw	3
 11404  13E6  2659  3191         	fcall	_Led_StartNotice
 11405  13E8                     l7137:	
 11406                           
 11407                           ;ir.c: 754: IR_ExitSet();
 11408  13E8  2666  3191         	fcall	_IR_ExitSet
 11409                           
 11410                           ;ir.c: 755: } else if (ir_state.tmIdx == 4) {
 11411  13EA  29EE               	goto	l6887
 11412  13EB                     l7139:	
 11413  13EB  3004               	movlw	4
 11414  13EC  065A               	xorwf	_ir_state+1,w	;volatile
 11415  13ED  1D03               	btfss	3,2
 11416  13EE  29EE               	goto	l6887
 11417                           
 11418                           ;ir.c: 756: if (ir_state.mSet == 1) {
 11419  13EF  3187  27AD  3191   	fcall	PL168	;call to abstracted procedure
 11420  13F2  1D03               	skipz
 11421  13F3  2C17               	goto	l7149
 11422                           
 11423                           ;ir.c: 757: RTC_GetTime()->hour = ir_state.time[0]*10 + ir_state.time[1];
 11424  13F4  318A  2272  3191   	fcall	_RTC_GetTime
 11425  13F7  0086               	movwf	6
 11426  13F8  300A               	movlw	10
 11427  13F9  0187               	clrf	7
 11428  13FA  0020               	movlb	0	; select bank0
 11429  13FB  00AD               	movwf	___bmul@multiplicand
 11430  13FC  085B               	movf	_ir_state+2,w	;volatile
 11431  13FD  27E5               	fcall	___bmul
 11432  13FE  075C               	addwf	_ir_state+3,w	;volatile
 11433  13FF  0081               	movwf	1
 11434                           
 11435                           ;ir.c: 758: RTC_GetTime()->minute = ir_state.time[2]*10 + ir_state.time[3];
 11436  1400  318A  2272  3191   	fcall	_RTC_GetTime
 11437  1403  0020               	movlb	0	; select bank0
 11438  1404  00BB               	movwf	??_IR_KeyAction
 11439  1405  3E01               	addlw	1
 11440  1406  0086               	movwf	6
 11441  1407  300A               	movlw	10
 11442  1408  0187               	clrf	7
 11443  1409  00AD               	movwf	___bmul@multiplicand
 11444  140A  085D               	movf	_ir_state+4,w	;volatile
 11445  140B  27E5               	fcall	___bmul
 11446  140C  075E               	addwf	_ir_state+5,w	;volatile
 11447  140D  0081               	movwf	1
 11448  140E                     L4:	
 11449                           
 11450                           ;ir.c: 759: if (gLedPara.mAuto) {
 11451  140E  3187  279E  3191   	fcall	PL98	;call to abstracted procedure
 11452  1411  1C01               	btfss	1,0
 11453  1412  2BE8               	goto	l7137
 11454                           
 11455                           ;ir.c: 760: Led_Initialize();
 11456  1413  3189  2188  3191   	fcall	_Led_Initialize
 11457  1416  2BE8               	goto	l7137
 11458  1417                     l7149:	
 11459  1417  2792  3191         	fcall	PL172	;call to abstracted procedure
 11460  1419  1D03               	skipz
 11461  141A  2C2D               	goto	l7159
 11462                           
 11463                           ;ir.c: 763: gLedPara.mSunrise = ir_state.time[0]*600 + ir_state.time[1]*60 + ir_state.ti
      +                          me[2]*10 + ir_state.time[3];
 11464  141B  2754  3191         	fcall	PL100	;call to abstracted procedure
 11465  141D  2560  3191         	fcall	___wmul
 11466  141F  275F  3191         	fcall	PL104	;call to abstracted procedure
 11467  1421  2560  3191         	fcall	___wmul
 11468  1423  274C  3191         	fcall	PL94	;call to abstracted procedure
 11469  1425  273F  3191         	fcall	PL78	;call to abstracted procedure
 11470  1427  2560  3191         	fcall	___wmul
 11471  1429  2732  3191         	fcall	PL70	;call to abstracted procedure
 11472  142B  30D8               	movlw	216
 11473  142C  2C42               	goto	L36
 11474  142D                     l7159:	
 11475                           ;ir.c: 765: if (gLedPara.mAuto) {
 11476                           
 11477                           ;ir.c: 764: gLedRunPara.mParaChanged = 1;
 11478                           
 11479  142D  2788  3191         	fcall	PL160	;call to abstracted procedure
 11480  142F  1D03               	skipz
 11481  1430  2BE8               	goto	l7137
 11482                           
 11483                           ;ir.c: 769: gLedPara.mSunset = ir_state.time[0]*600 + ir_state.time[1]*60 + ir_state.tim
      +                          e[2]*10 + ir_state.time[3];
 11484  1431  2754  3191         	fcall	PL100	;call to abstracted procedure
 11485  1433  2560  3191         	fcall	___wmul
 11486  1435  275F  3191         	fcall	PL104	;call to abstracted procedure
 11487  1437  2560  3191         	fcall	___wmul
 11488  1439  274C  3191         	fcall	PL94	;call to abstracted procedure
 11489  143B  273F  3191         	fcall	PL78	;call to abstracted procedure
 11490  143D  2560  3191         	fcall	___wmul
 11491  143F  2732  3191         	fcall	PL70	;call to abstracted procedure
 11492  1441  30E4               	movlw	228
 11493  1442                     L36:	
 11494  1442  2774  3191         	fcall	PL136	;call to abstracted procedure
 11495                           
 11496                           ;ir.c: 770: gLedRunPara.mParaChanged = 1;
 11497  1444  0021               	movlb	1	; select bank1
 11498  1445  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 11499  1446  2C0E               	goto	L4
 11500  1447                     l7171:	
 11501                           ;ir.c: 771: if (gLedPara.mAuto) {
 11502                           
 11503                           
 11504                           ;ir.c: 780: if (ir_state.mSet == 4) {
 11505  1447  3187  27A8  3191   	fcall	PL158	;call to abstracted procedure
 11506  144A  1D03               	skipz
 11507  144B  2C63               	goto	l7187
 11508                           
 11509                           ;ir.c: 781: for (uint8_t i = 0; i < 5; i++) {
 11510  144C  0022               	movlb	2	; select bank2
 11511  144D  01C5               	clrf	IR_KeyAction@i_1457^(0+256)
 11512  144E                     l7175:	
 11513  144E  3005               	movlw	5
 11514  144F  0245               	subwf	IR_KeyAction@i_1457^(0+256),w
 11515  1450  1803               	btfsc	3,0
 11516  1451  2C5E               	goto	l1273
 11517                           
 11518                           ;ir.c: 782: gLedPara.mDayBright[i] = gLedRunPara.mTargetBright[i];
 11519  1452  3545               	lslf	IR_KeyAction@i_1457^(0+256),w
 11520  1453  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11521  1454  0086               	movwf	6
 11522  1455  0187               	clrf	7
 11523  1456  0845               	movf	IR_KeyAction@i_1457^(0+256),w
 11524  1457  0020               	movlb	0	; select bank0
 11525  1458  00BB               	movwf	??_IR_KeyAction
 11526  1459  30DA               	movlw	218
 11527  145A  2678  3191         	fcall	PL4	;call to abstracted procedure
 11528  145C  0AC5               	incf	IR_KeyAction@i_1457^(0+256),f
 11529  145D  2C4E               	goto	l7175
 11530  145E                     l1273:	
 11531                           
 11532                           ;ir.c: 783: }
 11533                           ;ir.c: 784: gLedRunPara.mParaChanged = 1;
 11534  145E  0021               	movlb	1	; select bank1
 11535  145F  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 11536                           
 11537                           ;ir.c: 785: IR_ExitSet();
 11538  1460  2666  3191         	fcall	_IR_ExitSet
 11539                           
 11540                           ;ir.c: 786: } else if (ir_state.mSet == 5) {
 11541  1462  2D0F               	goto	l7215
 11542  1463                     l7187:	
 11543  1463  3187  27A3  3191   	fcall	PL156	;call to abstracted procedure
 11544  1466  1D03               	skipz
 11545  1467  2D0F               	goto	l7215
 11546                           
 11547                           ;ir.c: 787: for (uint8_t i = 0; i < 5; i++) {
 11548  1468  0022               	movlb	2	; select bank2
 11549  1469  01C6               	clrf	IR_KeyAction@i_1458^(0+256)
 11550  146A                     l7191:	
 11551  146A  3005               	movlw	5
 11552  146B  0246               	subwf	IR_KeyAction@i_1458^(0+256),w
 11553  146C  1803               	btfsc	3,0
 11554  146D  2C5E               	goto	l1273
 11555                           
 11556                           ;ir.c: 788: gLedPara.mNightBright[i] = gLedRunPara.mTargetBright[i];
 11557  146E  3546               	lslf	IR_KeyAction@i_1458^(0+256),w
 11558  146F  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 11559  1470  0086               	movwf	6
 11560  1471  0187               	clrf	7
 11561  1472  0846               	movf	IR_KeyAction@i_1458^(0+256),w
 11562  1473  0020               	movlb	0	; select bank0
 11563  1474  00BB               	movwf	??_IR_KeyAction
 11564  1475  30E6               	movlw	230
 11565  1476  2678  3191         	fcall	PL4	;call to abstracted procedure
 11566  1478  0AC6               	incf	IR_KeyAction@i_1458^(0+256),f
 11567  1479  2C6A               	goto	l7191
 11568  147A                     l7203:	
 11569                           
 11570                           ;ir.c: 795: ir_state.mSet = 0;
 11571  147A  301F               	movlw	-225
 11572  147B  05D9               	andwf	_ir_state,f	;volatile
 11573                           
 11574                           ;ir.c: 796: ir_state.tmIdx = 0;
 11575  147C  01DA               	clrf	_ir_state+1	;volatile
 11576                           
 11577                           ;ir.c: 797: ir_state.mSetDelay = 0;
 11578  147D  01DF               	clrf	_ir_state+6	;volatile
 11579                           
 11580                           ;ir.c: 798: Led_StartNotice(3);
 11581  147E  3003               	movlw	3
 11582  147F  2659  3191         	fcall	_Led_StartNotice
 11583                           
 11584                           ;ir.c: 799: break;
 11585  1481  2D0F               	goto	l7215
 11586  1482                     l7213:	
 11587  1482  0020               	movlb	0	; select bank0
 11588  1483  0853               	movf	_keyValue,w	;volatile
 11589                           
 11590                           ; Switch size 1, requested type "space"
 11591                           ; Number of cases is 46, Range of values is 1 to 255
 11592                           ; switch strategies available:
 11593                           ; Name         Instructions Cycles
 11594                           ; simple_byte          139    70 (average)
 11595                           ; jumptable            263     9 (fixed)
 11596                           ;	Chosen strategy is simple_byte
 11597  1484  3A01               	xorlw	1	; case 1
 11598  1485  1903               	skipnz
 11599  1486  2B15               	goto	l7047
 11600  1487  3A03               	xorlw	3	; case 2
 11601  1488  1903               	skipnz
 11602  1489  296B               	goto	l6811
 11603  148A  3A01               	xorlw	1	; case 3
 11604  148B  1903               	skipnz
 11605  148C  2A4B               	goto	l6943
 11606  148D  3A07               	xorlw	7	; case 4
 11607  148E  1903               	skipnz
 11608  148F  299C               	goto	l6833
 11609  1490  3A01               	xorlw	1	; case 5
 11610  1491  1903               	skipnz
 11611  1492  2A3E               	goto	l1203
 11612  1493  3A03               	xorlw	3	; case 6
 11613  1494  1903               	skipnz
 11614  1495  2A3E               	goto	l6923
 11615  1496  3A01               	xorlw	1	; case 7
 11616  1497  1903               	skipnz
 11617  1498  29BB               	goto	l6857
 11618  1499  3A0F               	xorlw	15	; case 8
 11619  149A  1903               	skipnz
 11620  149B  29BB               	goto	l6857
 11621  149C  3A01               	xorlw	1	; case 9
 11622  149D  1903               	skipnz
 11623  149E  2C47               	goto	l7171
 11624  149F  3A03               	xorlw	3	; case 10
 11625  14A0  1903               	skipnz
 11626  14A1  2BCE               	goto	l7125
 11627  14A2  3A01               	xorlw	1	; case 11
 11628  14A3  1903               	skipnz
 11629  14A4  2A4B               	goto	l6943
 11630  14A5  3A07               	xorlw	7	; case 12
 11631  14A6  1903               	skipnz
 11632  14A7  2BCE               	goto	l7125
 11633  14A8  3A01               	xorlw	1	; case 13
 11634  14A9  1903               	skipnz
 11635  14AA  2A13               	goto	l1196
 11636  14AB  3A03               	xorlw	3	; case 14
 11637  14AC  1903               	skipnz
 11638  14AD  2A13               	goto	l6903
 11639  14AE  3A01               	xorlw	1	; case 15
 11640  14AF  1903               	skipnz
 11641  14B0  295F               	goto	l6787
 11642  14B1  3A1F               	xorlw	31	; case 16
 11643  14B2  1903               	skipnz
 11644  14B3  2959               	goto	l6775
 11645  14B4  3A01               	xorlw	1	; case 17
 11646  14B5  1903               	skipnz
 11647  14B6  2A3E               	goto	l6923
 11648  14B7  3A03               	xorlw	3	; case 18
 11649  14B8  1903               	skipnz
 11650  14B9  2A13               	goto	l6903
 11651  14BA  3A01               	xorlw	1	; case 19
 11652  14BB  1903               	skipnz
 11653  14BC  296B               	goto	l1169
 11654  14BD  3A07               	xorlw	7	; case 20
 11655  14BE  1903               	skipnz
 11656  14BF  2A4B               	goto	l1209
 11657  14C0  3A01               	xorlw	1	; case 21
 11658  14C1  1903               	skipnz
 11659  14C2  2A3E               	goto	l6923
 11660  14C3  3A03               	xorlw	3	; case 22
 11661  14C4  1903               	skipnz
 11662  14C5  2BAD               	goto	l7113
 11663  14C6  3A01               	xorlw	1	; case 23
 11664  14C7  1903               	skipnz
 11665  14C8  294B               	goto	l6763
 11666  14C9  3A0F               	xorlw	15	; case 24
 11667  14CA  1903               	skipnz
 11668  14CB  29BB               	goto	l6857
 11669  14CC  3A02               	xorlw	2	; case 26
 11670  14CD  1903               	skipnz
 11671  14CE  2A4B               	goto	l6943
 11672  14CF  3A01               	xorlw	1	; case 27
 11673  14D0  1903               	skipnz
 11674  14D1  2A89               	goto	l6981
 11675  14D2  3A07               	xorlw	7	; case 28
 11676  14D3  1903               	skipnz
 11677  14D4  2989               	goto	l6823
 11678  14D5  3A01               	xorlw	1	; case 29
 11679  14D6  1903               	skipnz
 11680  14D7  29BB               	goto	l1179
 11681  14D8  3A03               	xorlw	3	; case 30
 11682  14D9  1903               	skipnz
 11683  14DA  29BB               	goto	l6857
 11684  14DB  3A01               	xorlw	1	; case 31
 11685  14DC  1903               	skipnz
 11686  14DD  2A13               	goto	l6903
 11687  14DE  3A5F               	xorlw	95	; case 64
 11688  14DF  1903               	skipnz
 11689  14E0  29F1               	goto	l6889
 11690  14E1  3A01               	xorlw	1	; case 65
 11691  14E2  1903               	skipnz
 11692  14E3  2BBD               	goto	l7119
 11693  14E4  3A03               	xorlw	3	; case 66
 11694  14E5  1903               	skipnz
 11695  14E6  2A3E               	goto	l6923
 11696  14E7  3A06               	xorlw	6	; case 68
 11697  14E8  1903               	skipnz
 11698  14E9  2BCE               	goto	l7125
 11699  14EA  3A01               	xorlw	1	; case 69
 11700  14EB  1903               	skipnz
 11701  14EC  2BCE               	goto	l7125
 11702  14ED  3A03               	xorlw	3	; case 70
 11703  14EE  1903               	skipnz
 11704  14EF  2BCE               	goto	l7125
 11705  14F0  3A0E               	xorlw	14	; case 72
 11706  14F1  1903               	skipnz
 11707  14F2  2BCE               	goto	l7125
 11708  14F3  3A03               	xorlw	3	; case 75
 11709  14F4  1903               	skipnz
 11710  14F5  2BCE               	goto	l1250
 11711  14F6  3A07               	xorlw	7	; case 76
 11712  14F7  1903               	skipnz
 11713  14F8  296B               	goto	l6811
 11714  14F9  3A02               	xorlw	2	; case 78
 11715  14FA  1903               	skipnz
 11716  14FB  296B               	goto	l6811
 11717  14FC  3A01               	xorlw	1	; case 79
 11718  14FD  1903               	skipnz
 11719  14FE  2BCE               	goto	l7125
 11720  14FF  3A1E               	xorlw	30	; case 81
 11721  1500  1903               	skipnz
 11722  1501  2BCE               	goto	l7125
 11723  1502  3A0D               	xorlw	13	; case 92
 11724  1503  1903               	skipnz
 11725  1504  2BCE               	goto	l1250
 11726  1505  3A01               	xorlw	1	; case 93
 11727  1506  1903               	skipnz
 11728  1507  2965               	goto	l6799
 11729  1508  3A03               	xorlw	3	; case 94
 11730  1509  1903               	skipnz
 11731  150A  2A13               	goto	l6903
 11732  150B  3AA1               	xorlw	161	; case 255
 11733  150C  1903               	skipnz
 11734  150D  2C7A               	goto	l7203
 11735  150E  2D0F               	goto	l7215
 11736  150F                     l7215:	
 11737                           
 11738                           ;ir.c: 803: TMR2_EnableInterrupt();
 11739  150F  2675               	fcall	_TMR2_EnableInterrupt
 11740                           
 11741                           ;ir.c: 804: keyValue = 0xFF;
 11742  1510  30FF               	movlw	255
 11743  1511  0020               	movlb	0	; select bank0
 11744  1512  00D3               	movwf	_keyValue	;volatile
 11745  1513  0008               	return
 11746  1514                     __end_of_IR_KeyAction:	
 11747  1514                     __ptext42:	
 11748 ;; *************** function _Util_DecValue *****************
 11749 ;; Defined at:
 11750 ;;		line 15 in file "user/src/util.c"
 11751 ;; Parameters:    Size  Location     Type
 11752 ;;  pSrc            2   13[BANK0 ] PTR unsigned int 
 11753 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), gLedPara(117), 
 11754 ;;  min             2   15[BANK0 ] unsigned int 
 11755 ;;  delta           2   17[BANK0 ] unsigned int 
 11756 ;; Auto vars:     Size  Location     Type
 11757 ;;		None
 11758 ;; Return value:  Size  Location     Type
 11759 ;;                  1    wreg      void 
 11760 ;; Registers used:
 11761 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11762 ;; Tracked objects:
 11763 ;;		On entry : 1F/0
 11764 ;;		On exit  : 1F/0
 11765 ;;		Unchanged: 0/0
 11766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11767 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11769 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11770 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;Total ram usage:       10 bytes
 11772 ;; Hardware stack levels used:    1
 11773 ;; Hardware stack levels required when called:    7
 11774 ;; This function calls:
 11775 ;;		Nothing
 11776 ;; This function is called by:
 11777 ;;		_IR_KeyAction
 11778 ;; This function uses a non-reentrant model
 11779 ;;
 11780                           
 11781                           
 11782                           ;psect for function _Util_DecValue
 11783  1514                     _Util_DecValue:	
 11784                           
 11785                           ;util.c: 17: if( *pSrc > min + delta )
 11786                           
 11787                           ;incstack = 0
 11788                           ; Regs used in _Util_DecValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 11789  1514  082D               	movf	Util_DecValue@pSrc,w
 11790  1515  0086               	movwf	6
 11791  1516  082E               	movf	Util_DecValue@pSrc+1,w
 11792  1517  0087               	movwf	7
 11793  1518  3F40               	moviw [0]fsr1
 11794  1519  00B3               	movwf	??_Util_DecValue
 11795  151A  3F41               	moviw [1]fsr1
 11796  151B  00B4               	movwf	??_Util_DecValue+1
 11797  151C  0831               	movf	Util_DecValue@delta,w
 11798  151D  072F               	addwf	Util_DecValue@min,w
 11799  151E  00B5               	movwf	??_Util_DecValue+2
 11800  151F  0832               	movf	Util_DecValue@delta+1,w
 11801  1520  3D30               	addwfc	Util_DecValue@min+1,w
 11802  1521  00B6               	movwf	??_Util_DecValue+3
 11803  1522  0834               	movf	??_Util_DecValue+1,w
 11804  1523  0236               	subwf	??_Util_DecValue+3,w
 11805  1524  1D03               	skipz
 11806  1525  2D28               	goto	u5855
 11807  1526  0833               	movf	??_Util_DecValue,w
 11808  1527  0235               	subwf	??_Util_DecValue+2,w
 11809  1528                     u5855:	
 11810                           
 11811                           ;util.c: 18: {
 11812                           ;util.c: 19: (*pSrc) -= delta;
 11813  1528  082D               	movf	Util_DecValue@pSrc,w
 11814  1529  0086               	movwf	6
 11815  152A  082E               	movf	Util_DecValue@pSrc+1,w
 11816  152B  0087               	movwf	7
 11817  152C  1803               	skipnc
 11818  152D  2D35               	goto	L9
 11819  152E  0831               	movf	Util_DecValue@delta,w
 11820  152F  0281               	subwf	1,f
 11821  1530  3141               	addfsr 1,1
 11822  1531  0832               	movf	Util_DecValue@delta+1,w
 11823  1532  3B81               	subwfb	1,f
 11824  1533  317F               	addfsr 1,-1
 11825                           
 11826                           ;util.c: 20: }
 11827  1534  0008               	return
 11828  1535                     L9:	
 11829                           ;util.c: 21: else
 11830                           ;util.c: 22: {
 11831                           ;util.c: 23: *pSrc = min;
 11832                           
 11833  1535  082F               	movf	Util_DecValue@min,w
 11834  1536  3FC0               	movwi [0]fsr1
 11835  1537  0830               	movf	Util_DecValue@min+1,w
 11836  1538  3FC1               	movwi [1]fsr1
 11837  1539  0008               	return
 11838  153A                     __end_of_Util_DecValue:	
 11839  153A                     __ptext41:	
 11840 ;; *************** function _Util_IncValue *****************
 11841 ;; Defined at:
 11842 ;;		line 3 in file "user/src/util.c"
 11843 ;; Parameters:    Size  Location     Type
 11844 ;;  pSrc            2   13[BANK0 ] PTR unsigned int 
 11845 ;;		 -> gLedRunPara.mCurrentBright(10), gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), 
 11846 ;;		 -> gLedPara(117), 
 11847 ;;  max             2   15[BANK0 ] unsigned int 
 11848 ;;  delta           2   17[BANK0 ] unsigned int 
 11849 ;; Auto vars:     Size  Location     Type
 11850 ;;		None
 11851 ;; Return value:  Size  Location     Type
 11852 ;;                  1    wreg      void 
 11853 ;; Registers used:
 11854 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11855 ;; Tracked objects:
 11856 ;;		On entry : 1F/0
 11857 ;;		On exit  : 1F/0
 11858 ;;		Unchanged: 0/0
 11859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11860 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11862 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11863 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11864 ;;Total ram usage:       10 bytes
 11865 ;; Hardware stack levels used:    1
 11866 ;; Hardware stack levels required when called:    7
 11867 ;; This function calls:
 11868 ;;		Nothing
 11869 ;; This function is called by:
 11870 ;;		_Led_AutoRun
 11871 ;;		_IR_KeyAction
 11872 ;; This function uses a non-reentrant model
 11873 ;;
 11874                           
 11875                           
 11876                           ;psect for function _Util_IncValue
 11877  153A                     _Util_IncValue:	
 11878                           
 11879                           ;util.c: 5: if( *pSrc + delta < max )
 11880                           
 11881                           ;incstack = 0
 11882                           ; Regs used in _Util_IncValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 11883  153A  082D               	movf	Util_IncValue@pSrc,w
 11884  153B  0086               	movwf	6
 11885  153C  082E               	movf	Util_IncValue@pSrc+1,w
 11886  153D  0087               	movwf	7
 11887  153E  3F40               	moviw [0]fsr1
 11888  153F  00B3               	movwf	??_Util_IncValue
 11889  1540  3F41               	moviw [1]fsr1
 11890  1541  00B4               	movwf	??_Util_IncValue+1
 11891  1542  0831               	movf	Util_IncValue@delta,w
 11892  1543  0733               	addwf	??_Util_IncValue,w
 11893  1544  00B5               	movwf	??_Util_IncValue+2
 11894  1545  0832               	movf	Util_IncValue@delta+1,w
 11895  1546  3D34               	addwfc	??_Util_IncValue+1,w
 11896  1547  00B6               	movwf	??_Util_IncValue+3
 11897  1548  0830               	movf	Util_IncValue@max+1,w
 11898  1549  0236               	subwf	??_Util_IncValue+3,w
 11899  154A  1D03               	skipz
 11900  154B  2D4E               	goto	u5735
 11901  154C  082F               	movf	Util_IncValue@max,w
 11902  154D  0235               	subwf	??_Util_IncValue+2,w
 11903  154E                     u5735:	
 11904                           
 11905                           ;util.c: 6: {
 11906                           ;util.c: 7: (*pSrc) += delta;
 11907  154E  082D               	movf	Util_IncValue@pSrc,w
 11908  154F  0086               	movwf	6
 11909  1550  082E               	movf	Util_IncValue@pSrc+1,w
 11910  1551  0087               	movwf	7
 11911  1552  1803               	skipnc
 11912  1553  2D5B               	goto	L8
 11913  1554  0831               	movf	Util_IncValue@delta,w
 11914  1555  0781               	addwf	1,f
 11915  1556  3141               	addfsr 1,1
 11916  1557  0832               	movf	Util_IncValue@delta+1,w
 11917  1558  3D81               	addwfc	1,f
 11918  1559  317F               	addfsr 1,-1
 11919                           
 11920                           ;util.c: 8: }
 11921  155A  0008               	return
 11922  155B                     L8:	
 11923                           ;util.c: 9: else
 11924                           ;util.c: 10: {
 11925                           ;util.c: 11: *pSrc = max;
 11926                           
 11927  155B  082F               	movf	Util_IncValue@max,w
 11928  155C  3FC0               	movwi [0]fsr1
 11929  155D  0830               	movf	Util_IncValue@max+1,w
 11930  155E  3FC1               	movwi [1]fsr1
 11931  155F  0008               	return
 11932  1560                     __end_of_Util_IncValue:	
 11933  1560                     __ptext67:	
 11934 ;; *************** function ___wmul *****************
 11935 ;; Defined at:
 11936 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11937 ;; Parameters:    Size  Location     Type
 11938 ;;  multiplier      2   13[BANK0 ] unsigned int 
 11939 ;;  multiplicand    2   15[BANK0 ] unsigned int 
 11940 ;; Auto vars:     Size  Location     Type
 11941 ;;  product         2   17[BANK0 ] unsigned int 
 11942 ;; Return value:  Size  Location     Type
 11943 ;;                  2   13[BANK0 ] unsigned int 
 11944 ;; Registers used:
 11945 ;;		wreg, status,2, status,0
 11946 ;; Tracked objects:
 11947 ;;		On entry : 1F/0
 11948 ;;		On exit  : 1F/0
 11949 ;;		Unchanged: 0/0
 11950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11951 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11952 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11954 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;Total ram usage:        6 bytes
 11956 ;; Hardware stack levels used:    1
 11957 ;; Hardware stack levels required when called:    7
 11958 ;; This function calls:
 11959 ;;		Nothing
 11960 ;; This function is called by:
 11961 ;;		_Audio_GetValue
 11962 ;;		_Led_InitPara
 11963 ;;		_Led_Initialize
 11964 ;;		_Led_CheckAutoStatus
 11965 ;;		_IR_KeyAction
 11966 ;; This function uses a non-reentrant model
 11967 ;;
 11968                           
 11969                           
 11970                           ;psect for function ___wmul
 11971  1560                     ___wmul:	
 11972                           
 11973                           ;incstack = 0
 11974                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11975  1560  01B1               	clrf	___wmul@product
 11976  1561  01B2               	clrf	___wmul@product+1
 11977  1562                     l6239:	
 11978  1562  1C2D               	btfss	___wmul@multiplier,0
 11979  1563  2D68               	goto	l6243
 11980  1564  082F               	movf	___wmul@multiplicand,w
 11981  1565  07B1               	addwf	___wmul@product,f
 11982  1566  0830               	movf	___wmul@multiplicand+1,w
 11983  1567  3DB2               	addwfc	___wmul@product+1,f
 11984  1568                     l6243:	
 11985  1568  35AF               	lslf	___wmul@multiplicand,f
 11986  1569  0DB0               	rlf	___wmul@multiplicand+1,f
 11987  156A  36AE               	lsrf	___wmul@multiplier+1,f
 11988  156B  0CAD               	rrf	___wmul@multiplier,f
 11989  156C  082D               	movf	___wmul@multiplier,w
 11990  156D  042E               	iorwf	___wmul@multiplier+1,w
 11991  156E  1D03               	btfss	3,2
 11992  156F  2D62               	goto	l6239
 11993  1570  0832               	movf	___wmul@product+1,w
 11994  1571  00AE               	movwf	?___wmul+1
 11995  1572  0831               	movf	___wmul@product,w
 11996  1573  00AD               	movwf	?___wmul
 11997  1574  0008               	return
 11998  1575                     __end_of___wmul:	
 11999  1575                     __ptext62:	
 12000 ;; *************** function _Audio_StopSound *****************
 12001 ;; Defined at:
 12002 ;;		line 15 in file "user/src/audio.c"
 12003 ;; Parameters:    Size  Location     Type
 12004 ;;		None
 12005 ;; Auto vars:     Size  Location     Type
 12006 ;;  checksum        1   14[BANK0 ] unsigned char 
 12007 ;; Return value:  Size  Location     Type
 12008 ;;                  1    wreg      void 
 12009 ;; Registers used:
 12010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12011 ;; Tracked objects:
 12012 ;;		On entry : 0/0
 12013 ;;		On exit  : 1F/0
 12014 ;;		Unchanged: 0/0
 12015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12017 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;Total ram usage:        1 bytes
 12021 ;; Hardware stack levels used:    1
 12022 ;; Hardware stack levels required when called:    8
 12023 ;; This function calls:
 12024 ;;		_EUSART_Write
 12025 ;; This function is called by:
 12026 ;;		_Audio_Initialize
 12027 ;;		_IR_KeyAction
 12028 ;; This function uses a non-reentrant model
 12029 ;;
 12030                           
 12031                           
 12032                           ;psect for function _Audio_StopSound
 12033  1575                     _Audio_StopSound:	
 12034                           
 12035                           ;audio.c: 17: uint8_t checksum = 0x00;
 12036                           
 12037                           ;incstack = 0
 12038                           ; Regs used in _Audio_StopSound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12039  1575  0020               	movlb	0	; select bank0
 12040  1576  307E               	movlw	126
 12041  1577  01AE               	clrf	Audio_StopSound@checksum
 12042                           
 12043                           ;audio.c: 18: EUSART_Write ( 0x7E );
 12044  1578  2642  3191         	fcall	_EUSART_Write
 12045                           
 12046                           ;audio.c: 19: checksum += EUSART_Write ( 0x03 );
 12047  157A  3003               	movlw	3
 12048  157B  2642  3191         	fcall	_EUSART_Write
 12049  157D  07AE               	addwf	Audio_StopSound@checksum,f
 12050                           
 12051                           ;audio.c: 20: checksum += EUSART_Write ( 0xAB );
 12052  157E  30AB               	movlw	171
 12053  157F  2642  3191         	fcall	_EUSART_Write
 12054  1581  07AE               	addwf	Audio_StopSound@checksum,f
 12055                           
 12056                           ;audio.c: 21: EUSART_Write ( checksum );
 12057  1582  082E               	movf	Audio_StopSound@checksum,w
 12058  1583  2642  3191         	fcall	_EUSART_Write
 12059                           
 12060                           ;audio.c: 22: EUSART_Write ( 0xEF );
 12061  1585  30EF               	movlw	239
 12062  1586  2E42               	ljmp	_EUSART_Write
 12063  1587                     __end_of_Audio_StopSound:	
 12064  1587                     __ptext47:	
 12065 ;; *************** function _IR_GetIndex *****************
 12066 ;; Defined at:
 12067 ;;		line 10 in file "user/src/ir.c"
 12068 ;; Parameters:    Size  Location     Type
 12069 ;;  keynum          1    wreg     unsigned char 
 12070 ;; Auto vars:     Size  Location     Type
 12071 ;;  keynum          1   13[BANK0 ] unsigned char 
 12072 ;;  idx             1   14[BANK0 ] unsigned char 
 12073 ;; Return value:  Size  Location     Type
 12074 ;;                  1    wreg      unsigned char 
 12075 ;; Registers used:
 12076 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12077 ;; Tracked objects:
 12078 ;;		On entry : 1F/0
 12079 ;;		On exit  : 1F/0
 12080 ;;		Unchanged: 0/0
 12081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12083 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12085 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12086 ;;Total ram usage:        2 bytes
 12087 ;; Hardware stack levels used:    1
 12088 ;; Hardware stack levels required when called:    7
 12089 ;; This function calls:
 12090 ;;		Nothing
 12091 ;; This function is called by:
 12092 ;;		_IR_KeyAction
 12093 ;; This function uses a non-reentrant model
 12094 ;;
 12095                           
 12096                           
 12097                           ;psect for function _IR_GetIndex
 12098  1587                     _IR_GetIndex:	
 12099                           
 12100                           ;incstack = 0
 12101                           ; Regs used in _IR_GetIndex: [wreg-fsr0h+status,2+status,0]
 12102                           ;IR_GetIndex@keynum stored from wreg
 12103  1587  00AD               	movwf	IR_GetIndex@keynum
 12104                           
 12105                           ;ir.c: 11: uint8_t idx = 0xFF;
 12106  1588  30FF               	movlw	255
 12107  1589  00AE               	movwf	IR_GetIndex@idx
 12108                           
 12109                           ;ir.c: 12: switch (keynum) {
 12110  158A  2DA1               	goto	l6647
 12111  158B                     l900:	
 12112  158B                     l6605:	
 12113                           
 12114                           ;ir.c: 14: case 0x05:
 12115                           ;ir.c: 15: case 0x14:
 12116                           ;ir.c: 16: case 0x1D:
 12117                           ;ir.c: 17: idx = 0;
 12118  158B  01AE               	clrf	IR_GetIndex@idx
 12119                           
 12120                           ;ir.c: 18: break;
 12121  158C  2E12               	goto	l6649
 12122  158D                     l906:	
 12123                           
 12124                           ;ir.c: 20: case 0x06:
 12125                           ;ir.c: 21: case 0x0B:
 12126                           ;ir.c: 22: case 0x1E:
 12127                           ;ir.c: 23: idx = 1;
 12128  158D  01AE               	clrf	IR_GetIndex@idx
 12129  158E  0AAE               	incf	IR_GetIndex@idx,f
 12130                           
 12131                           ;ir.c: 24: break;
 12132  158F  2E12               	goto	l6649
 12133  1590                     l909:	
 12134  1590                     l6607:	
 12135                           
 12136                           ;ir.c: 26: case 0x11:
 12137                           ;ir.c: 27: case 0x1A:
 12138                           ;ir.c: 28: case 0x07:
 12139                           ;ir.c: 29: idx = 2;
 12140  1590  3002               	movlw	2
 12141  1591  2D9F               	goto	L18
 12142  1592                     l913:	
 12143                           ;ir.c: 30: break;
 12144                           
 12145  1592                     l6609:	
 12146                           
 12147                           ;ir.c: 32: case 0x5E:
 12148                           ;ir.c: 33: case 0x03:
 12149                           ;ir.c: 34: case 0x18:
 12150                           ;ir.c: 35: idx = 3;
 12151  1592  3003               	movlw	3
 12152  1593  2D9F               	goto	L18
 12153  1594                     l6611:	
 12154                           ;ir.c: 36: break;
 12155                           
 12156                           
 12157                           ;ir.c: 38: case 0x15:
 12158                           ;ir.c: 39: case 0x08:
 12159                           ;ir.c: 40: idx = 4;
 12160  1594  3004               	movlw	4
 12161  1595  2D9F               	goto	L18
 12162  1596                     l6619:	
 12163                           ;ir.c: 41: break;
 12164                           
 12165                           
 12166                           ;ir.c: 55: idx = 5;
 12167  1596  3005               	movlw	5
 12168  1597  2D9F               	goto	L18
 12169  1598                     l6621:	
 12170                           ;ir.c: 56: break;
 12171                           
 12172                           
 12173                           ;ir.c: 58: idx = 6;
 12174  1598  3006               	movlw	6
 12175  1599  2D9F               	goto	L18
 12176  159A                     l6623:	
 12177                           ;ir.c: 59: break;
 12178                           
 12179                           
 12180                           ;ir.c: 61: idx = 7;
 12181  159A  3007               	movlw	7
 12182  159B  2D9F               	goto	L18
 12183  159C                     l6625:	
 12184                           ;ir.c: 62: break;
 12185                           
 12186                           
 12187                           ;ir.c: 64: idx = 8;
 12188  159C  3008               	movlw	8
 12189  159D  2D9F               	goto	L18
 12190  159E                     l6643:	
 12191                           ;ir.c: 65: break;
 12192                           
 12193                           
 12194                           ;ir.c: 94: idx = 9;
 12195  159E  3009               	movlw	9
 12196  159F                     L18:	
 12197  159F  00AE               	movwf	IR_GetIndex@idx
 12198                           
 12199                           ;ir.c: 95: break;
 12200  15A0  2E12               	goto	l6649
 12201  15A1                     l6647:	
 12202  15A1  082D               	movf	IR_GetIndex@keynum,w
 12203                           
 12204                           ; Switch size 1, requested type "space"
 12205                           ; Number of cases is 37, Range of values is 2 to 94
 12206                           ; switch strategies available:
 12207                           ; Name         Instructions Cycles
 12208                           ; simple_byte          112    57 (average)
 12209                           ; direct_byte          195     9 (fixed)
 12210                           ; jumptable            263     9 (fixed)
 12211                           ;	Chosen strategy is simple_byte
 12212  15A2  3A02               	xorlw	2	; case 2
 12213  15A3  1903               	skipnz
 12214  15A4  2D9A               	goto	l6623
 12215  15A5  3A01               	xorlw	1	; case 3
 12216  15A6  1903               	skipnz
 12217  15A7  2D92               	goto	l6609
 12218  15A8  3A06               	xorlw	6	; case 5
 12219  15A9  1903               	skipnz
 12220  15AA  2D8B               	goto	l6605
 12221  15AB  3A03               	xorlw	3	; case 6
 12222  15AC  1903               	skipnz
 12223  15AD  2D8D               	goto	l906
 12224  15AE  3A01               	xorlw	1	; case 7
 12225  15AF  1903               	skipnz
 12226  15B0  2D90               	goto	l6607
 12227  15B1  3A0F               	xorlw	15	; case 8
 12228  15B2  1903               	skipnz
 12229  15B3  2D94               	goto	l6611
 12230  15B4  3A02               	xorlw	2	; case 10
 12231  15B5  1903               	skipnz
 12232  15B6  2D92               	goto	l6609
 12233  15B7  3A01               	xorlw	1	; case 11
 12234  15B8  1903               	skipnz
 12235  15B9  2D8D               	goto	l906
 12236  15BA  3A07               	xorlw	7	; case 12
 12237  15BB  1903               	skipnz
 12238  15BC  2D90               	goto	l6607
 12239  15BD  3A01               	xorlw	1	; case 13
 12240  15BE  1903               	skipnz
 12241  15BF  2D8B               	goto	l900
 12242  15C0  3A03               	xorlw	3	; case 14
 12243  15C1  1903               	skipnz
 12244  15C2  2D8D               	goto	l906
 12245  15C3  3A01               	xorlw	1	; case 15
 12246  15C4  1903               	skipnz
 12247  15C5  2D92               	goto	l6609
 12248  15C6  3A1F               	xorlw	31	; case 16
 12249  15C7  1903               	skipnz
 12250  15C8  2D90               	goto	l6607
 12251  15C9  3A01               	xorlw	1	; case 17
 12252  15CA  1903               	skipnz
 12253  15CB  2D90               	goto	l6607
 12254  15CC  3A03               	xorlw	3	; case 18
 12255  15CD  1903               	skipnz
 12256  15CE  2D94               	goto	l6611
 12257  15CF  3A01               	xorlw	1	; case 19
 12258  15D0  1903               	skipnz
 12259  15D1  2D96               	goto	l6619
 12260  15D2  3A07               	xorlw	7	; case 20
 12261  15D3  1903               	skipnz
 12262  15D4  2D8B               	goto	l6605
 12263  15D5  3A01               	xorlw	1	; case 21
 12264  15D6  1903               	skipnz
 12265  15D7  2D94               	goto	l6611
 12266  15D8  3A02               	xorlw	2	; case 23
 12267  15D9  1903               	skipnz
 12268  15DA  2D8D               	goto	l906
 12269  15DB  3A0F               	xorlw	15	; case 24
 12270  15DC  1903               	skipnz
 12271  15DD  2D92               	goto	l6609
 12272  15DE  3A02               	xorlw	2	; case 26
 12273  15DF  1903               	skipnz
 12274  15E0  2D90               	goto	l6607
 12275  15E1  3A07               	xorlw	7	; case 29
 12276  15E2  1903               	skipnz
 12277  15E3  2D8B               	goto	l6605
 12278  15E4  3A03               	xorlw	3	; case 30
 12279  15E5  1903               	skipnz
 12280  15E6  2D8D               	goto	l906
 12281  15E7  3A01               	xorlw	1	; case 31
 12282  15E8  1903               	skipnz
 12283  15E9  2D90               	goto	l909
 12284  15EA  3A5D               	xorlw	93	; case 66
 12285  15EB  1903               	skipnz
 12286  15EC  2D92               	goto	l913
 12287  15ED  3A06               	xorlw	6	; case 68
 12288  15EE  1903               	skipnz
 12289  15EF  2D98               	goto	l6621
 12290  15F0  3A01               	xorlw	1	; case 69
 12291  15F1  1903               	skipnz
 12292  15F2  2D96               	goto	l6619
 12293  15F3  3A03               	xorlw	3	; case 70
 12294  15F4  1903               	skipnz
 12295  15F5  2D9C               	goto	l6625
 12296  15F6  3A0E               	xorlw	14	; case 72
 12297  15F7  1903               	skipnz
 12298  15F8  2D9E               	goto	l6643
 12299  15F9  3A03               	xorlw	3	; case 75
 12300  15FA  1903               	skipnz
 12301  15FB  2D8B               	goto	l6605
 12302  15FC  3A07               	xorlw	7	; case 76
 12303  15FD  1903               	skipnz
 12304  15FE  2D98               	goto	l6621
 12305  15FF  3A02               	xorlw	2	; case 78
 12306  1600  1903               	skipnz
 12307  1601  2D9C               	goto	l6625
 12308  1602  3A01               	xorlw	1	; case 79
 12309  1603  1903               	skipnz
 12310  1604  2D9A               	goto	l6623
 12311  1605  3A1E               	xorlw	30	; case 81
 12312  1606  1903               	skipnz
 12313  1607  2D94               	goto	l6611
 12314  1608  3A0D               	xorlw	13	; case 92
 12315  1609  1903               	skipnz
 12316  160A  2D8D               	goto	l906
 12317  160B  3A01               	xorlw	1	; case 93
 12318  160C  1903               	skipnz
 12319  160D  2D94               	goto	l6611
 12320  160E  3A03               	xorlw	3	; case 94
 12321  160F  1903               	skipnz
 12322  1610  2D92               	goto	l6609
 12323  1611  2E12               	goto	l6649
 12324  1612                     l6649:	
 12325                           
 12326                           ;ir.c: 99: return idx;
 12327  1612  082E               	movf	IR_GetIndex@idx,w
 12328  1613  0008               	return
 12329  1614                     __end_of_IR_GetIndex:	
 12330  1614                     __ptext63:	
 12331 ;; *************** function _Audio_SetVolume *****************
 12332 ;; Defined at:
 12333 ;;		line 50 in file "user/src/audio.c"
 12334 ;; Parameters:    Size  Location     Type
 12335 ;;  vol             1    wreg     unsigned char 
 12336 ;; Auto vars:     Size  Location     Type
 12337 ;;  vol             1   14[BANK0 ] unsigned char 
 12338 ;;  checksum        1   15[BANK0 ] unsigned char 
 12339 ;; Return value:  Size  Location     Type
 12340 ;;                  1    wreg      void 
 12341 ;; Registers used:
 12342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12343 ;; Tracked objects:
 12344 ;;		On entry : 1D/2
 12345 ;;		On exit  : 1F/0
 12346 ;;		Unchanged: 0/0
 12347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12349 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12351 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12352 ;;Total ram usage:        2 bytes
 12353 ;; Hardware stack levels used:    1
 12354 ;; Hardware stack levels required when called:    8
 12355 ;; This function calls:
 12356 ;;		_EUSART_Write
 12357 ;; This function is called by:
 12358 ;;		_Audio_Initialize
 12359 ;;		_IR_KeyAction
 12360 ;; This function uses a non-reentrant model
 12361 ;;
 12362                           
 12363                           
 12364                           ;psect for function _Audio_SetVolume
 12365  1614                     _Audio_SetVolume:	
 12366                           
 12367                           ;incstack = 0
 12368                           ; Regs used in _Audio_SetVolume: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12369                           ;Audio_SetVolume@vol stored from wreg
 12370  1614  0020               	movlb	0	; select bank0
 12371  1615  00AE               	movwf	Audio_SetVolume@vol
 12372  1616  307E               	movlw	126
 12373                           
 12374                           ;audio.c: 52: uint8_t checksum = 0x00;
 12375  1617  01AF               	clrf	Audio_SetVolume@checksum
 12376                           
 12377                           ;audio.c: 53: EUSART_Write ( 0x7E );
 12378  1618  2642  3191         	fcall	_EUSART_Write
 12379                           
 12380                           ;audio.c: 54: checksum += EUSART_Write ( 0x04 );
 12381  161A  3004               	movlw	4
 12382  161B  2642  3191         	fcall	_EUSART_Write
 12383  161D  07AF               	addwf	Audio_SetVolume@checksum,f
 12384                           
 12385                           ;audio.c: 55: checksum += EUSART_Write ( 0xAE );
 12386  161E  30AE               	movlw	174
 12387  161F  2642  3191         	fcall	_EUSART_Write
 12388  1621  07AF               	addwf	Audio_SetVolume@checksum,f
 12389                           
 12390                           ;audio.c: 56: checksum += EUSART_Write ( vol );
 12391  1622  082E               	movf	Audio_SetVolume@vol,w
 12392  1623  2642  3191         	fcall	_EUSART_Write
 12393  1625  07AF               	addwf	Audio_SetVolume@checksum,f
 12394                           
 12395                           ;audio.c: 57: EUSART_Write ( checksum );
 12396  1626  082F               	movf	Audio_SetVolume@checksum,w
 12397  1627  2642  3191         	fcall	_EUSART_Write
 12398                           
 12399                           ;audio.c: 58: EUSART_Write ( 0xEF );
 12400  1629  30EF               	movlw	239
 12401  162A  2E42               	ljmp	_EUSART_Write
 12402  162B                     __end_of_Audio_SetVolume:	
 12403  162B                     __ptext64:	
 12404 ;; *************** function _Audio_SetPlayMode *****************
 12405 ;; Defined at:
 12406 ;;		line 39 in file "user/src/audio.c"
 12407 ;; Parameters:    Size  Location     Type
 12408 ;;  type            1    wreg     unsigned char 
 12409 ;; Auto vars:     Size  Location     Type
 12410 ;;  type            1   14[BANK0 ] unsigned char 
 12411 ;;  checksum        1   15[BANK0 ] unsigned char 
 12412 ;; Return value:  Size  Location     Type
 12413 ;;                  1    wreg      void 
 12414 ;; Registers used:
 12415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12416 ;; Tracked objects:
 12417 ;;		On entry : 0/0
 12418 ;;		On exit  : 1F/0
 12419 ;;		Unchanged: 0/0
 12420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12422 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12424 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12425 ;;Total ram usage:        2 bytes
 12426 ;; Hardware stack levels used:    1
 12427 ;; Hardware stack levels required when called:    8
 12428 ;; This function calls:
 12429 ;;		_EUSART_Write
 12430 ;; This function is called by:
 12431 ;;		_Audio_Initialize
 12432 ;; This function uses a non-reentrant model
 12433 ;;
 12434                           
 12435                           
 12436                           ;psect for function _Audio_SetPlayMode
 12437  162B                     _Audio_SetPlayMode:	
 12438                           
 12439                           ;incstack = 0
 12440                           ; Regs used in _Audio_SetPlayMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12441                           ;Audio_SetPlayMode@type stored from wreg
 12442  162B  0020               	movlb	0	; select bank0
 12443  162C  00AE               	movwf	Audio_SetPlayMode@type
 12444  162D  307E               	movlw	126
 12445                           
 12446                           ;audio.c: 41: uint8_t checksum = 0x00;
 12447  162E  01AF               	clrf	Audio_SetPlayMode@checksum
 12448                           
 12449                           ;audio.c: 42: EUSART_Write ( 0x7E );
 12450  162F  2642  3191         	fcall	_EUSART_Write
 12451                           
 12452                           ;audio.c: 43: checksum += EUSART_Write ( 0x04 );
 12453  1631  3004               	movlw	4
 12454  1632  2642  3191         	fcall	_EUSART_Write
 12455  1634  07AF               	addwf	Audio_SetPlayMode@checksum,f
 12456                           
 12457                           ;audio.c: 44: checksum += EUSART_Write ( 0xAF );
 12458  1635  30AF               	movlw	175
 12459  1636  2642  3191         	fcall	_EUSART_Write
 12460  1638  07AF               	addwf	Audio_SetPlayMode@checksum,f
 12461                           
 12462                           ;audio.c: 45: checksum += EUSART_Write ( type );
 12463  1639  082E               	movf	Audio_SetPlayMode@type,w
 12464  163A  2642  3191         	fcall	_EUSART_Write
 12465  163C  07AF               	addwf	Audio_SetPlayMode@checksum,f
 12466                           
 12467                           ;audio.c: 46: EUSART_Write ( checksum );
 12468  163D  082F               	movf	Audio_SetPlayMode@checksum,w
 12469  163E  2642  3191         	fcall	_EUSART_Write
 12470                           
 12471                           ;audio.c: 47: EUSART_Write ( 0xEF );
 12472  1640  30EF               	movlw	239
 12473  1641  2E42               	ljmp	_EUSART_Write
 12474  1642                     __end_of_Audio_SetPlayMode:	
 12475  1642                     __ptext65:	
 12476 ;; *************** function _EUSART_Write *****************
 12477 ;; Defined at:
 12478 ;;		line 32 in file "driver/src/eusart.c"
 12479 ;; Parameters:    Size  Location     Type
 12480 ;;  byte            1    wreg     unsigned char 
 12481 ;; Auto vars:     Size  Location     Type
 12482 ;;  byte            1   13[BANK0 ] unsigned char 
 12483 ;; Return value:  Size  Location     Type
 12484 ;;                  1    wreg      unsigned char 
 12485 ;; Registers used:
 12486 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12487 ;; Tracked objects:
 12488 ;;		On entry : 1F/0
 12489 ;;		On exit  : 1F/0
 12490 ;;		Unchanged: 0/0
 12491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;Total ram usage:        1 bytes
 12497 ;; Hardware stack levels used:    1
 12498 ;; Hardware stack levels required when called:    7
 12499 ;; This function calls:
 12500 ;;		Nothing
 12501 ;; This function is called by:
 12502 ;;		_Audio_StopSound
 12503 ;;		_Audio_SetPlayMode
 12504 ;;		_Audio_SetVolume
 12505 ;; This function uses a non-reentrant model
 12506 ;;
 12507                           
 12508                           
 12509                           ;psect for function _EUSART_Write
 12510  1642                     _EUSART_Write:	
 12511                           
 12512                           ;incstack = 0
 12513                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 12514                           ;EUSART_Write@byte stored from wreg
 12515  1642  00AD               	movwf	EUSART_Write@byte
 12516  1643                     l6267:	
 12517                           ;eusart.c: 34: while ( 0 == txRemain );
 12518                           
 12519  1643  0021               	movlb	1	; select bank1
 12520  1644  086C               	movf	_txRemain^(0+128),w
 12521  1645  1903               	btfsc	3,2
 12522  1646  2E43               	goto	l6267
 12523                           
 12524                           ;eusart.c: 36: if ( !PIE1bits.TXIE )
 12525  1647  1A11               	btfsc	17,4	;volatile
 12526  1648  2E4E               	goto	l95
 12527                           
 12528                           ;eusart.c: 37: {
 12529                           ;eusart.c: 38: TXREG = byte;
 12530  1649  0020               	movlb	0	; select bank0
 12531  164A  082D               	movf	EUSART_Write@byte,w
 12532  164B  0023               	movlb	3	; select bank3
 12533  164C  009A               	movwf	26	;volatile
 12534                           
 12535                           ;eusart.c: 39: }
 12536  164D  2E54               	goto	l6281
 12537  164E                     l95:	
 12538                           
 12539                           ;eusart.c: 40: else
 12540                           ;eusart.c: 41: {
 12541                           ;eusart.c: 42: PIE1bits.TXIE = 0;
 12542                           
 12543                           ;eusart.c: 43: txBuf[txHead++] = byte;
 12544  164E  3185  2560  3191   	fcall	PL126	;call to abstracted procedure
 12545  1651  082D               	movf	EUSART_Write@byte,w
 12546                           
 12547                           ;eusart.c: 44: if ( sizeof (txBuf ) <= txHead )
 12548                           
 12549                           ;eusart.c: 45: {
 12550                           ;eusart.c: 46: txHead = 0;
 12551                           
 12552                           ;eusart.c: 47: }
 12553                           ;eusart.c: 48: txRemain--;
 12554  1652  3185  2547         	fcall	PL118	;call to abstracted procedure
 12555  1654                     l6281:	
 12556                           
 12557                           ;eusart.c: 49: }
 12558                           ;eusart.c: 50: PIE1bits.TXIE = 1;
 12559  1654  0021               	movlb	1	; select bank1
 12560  1655  1611               	bsf	17,4	;volatile
 12561                           
 12562                           ;eusart.c: 51: return byte;
 12563  1656  0020               	movlb	0	; select bank0
 12564  1657  082D               	movf	EUSART_Write@byte,w
 12565  1658  0008               	return
 12566  1659                     __end_of_EUSART_Write:	
 12567  1659                     __ptext49:	
 12568 ;; *************** function _Led_StartNotice *****************
 12569 ;; Defined at:
 12570 ;;		line 419 in file "user/src/led.c"
 12571 ;; Parameters:    Size  Location     Type
 12572 ;;  cnt             1    wreg     unsigned char 
 12573 ;; Auto vars:     Size  Location     Type
 12574 ;;  cnt             1   14[BANK0 ] unsigned char 
 12575 ;; Return value:  Size  Location     Type
 12576 ;;                  1    wreg      void 
 12577 ;; Registers used:
 12578 ;;		wreg, status,2, status,0, pclath, cstack
 12579 ;; Tracked objects:
 12580 ;;		On entry : 1F/0
 12581 ;;		On exit  : 1F/8
 12582 ;;		Unchanged: 0/0
 12583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12585 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12586 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12587 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12588 ;;Total ram usage:        2 bytes
 12589 ;; Hardware stack levels used:    1
 12590 ;; Hardware stack levels required when called:    8
 12591 ;; This function calls:
 12592 ;;		_TMR4_StartTimer
 12593 ;; This function is called by:
 12594 ;;		_IR_ExitSet
 12595 ;;		_IR_ExitTimeout
 12596 ;;		_IR_KeyAction
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           
 12601                           ;psect for function _Led_StartNotice
 12602  1659                     _Led_StartNotice:	
 12603                           
 12604                           ;incstack = 0
 12605                           ; Regs used in _Led_StartNotice: [wreg+status,2+status,0+pclath+cstack]
 12606                           ;Led_StartNotice@cnt stored from wreg
 12607  1659  00AE               	movwf	Led_StartNotice@cnt
 12608                           
 12609                           ;led.c: 420: gLedRunPara.mNoticeCount = cnt;
 12610  165A  00AD               	movwf	??_Led_StartNotice
 12611  165B  0DAD               	rlf	??_Led_StartNotice,f
 12612  165C  0DAD               	rlf	??_Led_StartNotice,f
 12613  165D  0021               	movlb	1	; select bank1
 12614  165E  085E               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
 12615  165F  0020               	movlb	0	; select bank0
 12616  1660  062D               	xorwf	??_Led_StartNotice,w
 12617  1661  3903               	andlw	-253
 12618  1662  062D               	xorwf	??_Led_StartNotice,w
 12619  1663  0021               	movlb	1	; select bank1
 12620  1664  00DE               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
 12621                           
 12622                           ;led.c: 421: TMR4_StartTimer();
 12623  1665  2E72               	ljmp	l6191
 12624  1666                     __end_of_Led_StartNotice:	
 12625  1666                     __ptext48:	
 12626 ;; *************** function _IR_ExitSet *****************
 12627 ;; Defined at:
 12628 ;;		line 472 in file "user/src/ir.c"
 12629 ;; Parameters:    Size  Location     Type
 12630 ;;		None
 12631 ;; Auto vars:     Size  Location     Type
 12632 ;;		None
 12633 ;; Return value:  Size  Location     Type
 12634 ;;                  1    wreg      void 
 12635 ;; Registers used:
 12636 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12637 ;; Tracked objects:
 12638 ;;		On entry : 16/8
 12639 ;;		On exit  : 1E/0
 12640 ;;		Unchanged: 0/0
 12641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12646 ;;Total ram usage:        0 bytes
 12647 ;; Hardware stack levels used:    1
 12648 ;; Hardware stack levels required when called:   10
 12649 ;; This function calls:
 12650 ;;		_Led_Initialize
 12651 ;;		_Led_StartNotice
 12652 ;; This function is called by:
 12653 ;;		_IR_KeyAction
 12654 ;; This function uses a non-reentrant model
 12655 ;;
 12656                           
 12657                           
 12658                           ;psect for function _IR_ExitSet
 12659  1666                     _IR_ExitSet:	
 12660                           
 12661                           ;ir.c: 473: ir_state.mSet = 0;
 12662                           
 12663                           ;incstack = 0
 12664                           ; Regs used in _IR_ExitSet: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12665  1666  301F               	movlw	-225
 12666  1667  0020               	movlb	0	; select bank0
 12667  1668  05D9               	andwf	_ir_state,f	;volatile
 12668                           
 12669                           ;ir.c: 474: ir_state.tmIdx = 0;
 12670  1669  01DA               	clrf	_ir_state+1	;volatile
 12671                           
 12672                           ;ir.c: 475: ir_state.mSetDelay = 0;
 12673  166A  01DF               	clrf	_ir_state+6	;volatile
 12674                           
 12675                           ;ir.c: 476: Led_StartNotice(1);
 12676  166B  3001               	movlw	1
 12677  166C  2659               	fcall	_Led_StartNotice
 12678                           
 12679                           ;ir.c: 477: Led_Initialize();
 12680  166D  3189  2988         	ljmp	l6287
 12681  166F                     __end_of_IR_ExitSet:	
 12682  166F                     __ptext44:	
 12683 ;; *************** function _TMR2_DisableInterrupt *****************
 12684 ;; Defined at:
 12685 ;;		line 40 in file "driver/src/tmr2.c"
 12686 ;; Parameters:    Size  Location     Type
 12687 ;;		None
 12688 ;; Auto vars:     Size  Location     Type
 12689 ;;		None
 12690 ;; Return value:  Size  Location     Type
 12691 ;;                  1    wreg      void 
 12692 ;; Registers used:
 12693 ;;		None
 12694 ;; Tracked objects:
 12695 ;;		On entry : 1F/0
 12696 ;;		On exit  : 1F/1
 12697 ;;		Unchanged: 0/0
 12698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12703 ;;Total ram usage:        0 bytes
 12704 ;; Hardware stack levels used:    1
 12705 ;; Hardware stack levels required when called:    7
 12706 ;; This function calls:
 12707 ;;		Nothing
 12708 ;; This function is called by:
 12709 ;;		_IR_KeyAction
 12710 ;; This function uses a non-reentrant model
 12711 ;;
 12712                           
 12713                           
 12714                           ;psect for function _TMR2_DisableInterrupt
 12715  166F                     _TMR2_DisableInterrupt:	
 12716                           
 12717                           ;tmr2.c: 42: PIE1bits.TMR2IE = 0;
 12718                           
 12719                           ;incstack = 0
 12720                           ; Regs used in _TMR2_DisableInterrupt: []
 12721  166F  0021               	movlb	1	; select bank1
 12722  1670  1091               	bcf	17,1	;volatile
 12723  1671  0008               	return
 12724  1672                     __end_of_TMR2_DisableInterrupt:	
 12725  1672                     __ptext50:	
 12726 ;; *************** function _TMR4_StartTimer *****************
 12727 ;; Defined at:
 12728 ;;		line 17 in file "driver/src/tmr4.c"
 12729 ;; Parameters:    Size  Location     Type
 12730 ;;		None
 12731 ;; Auto vars:     Size  Location     Type
 12732 ;;		None
 12733 ;; Return value:  Size  Location     Type
 12734 ;;                  1    wreg      void 
 12735 ;; Registers used:
 12736 ;;		None
 12737 ;; Tracked objects:
 12738 ;;		On entry : 1F/1
 12739 ;;		On exit  : 1F/8
 12740 ;;		Unchanged: 0/0
 12741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;Total ram usage:        0 bytes
 12747 ;; Hardware stack levels used:    1
 12748 ;; Hardware stack levels required when called:    7
 12749 ;; This function calls:
 12750 ;;		Nothing
 12751 ;; This function is called by:
 12752 ;;		_Led_StartNotice
 12753 ;; This function uses a non-reentrant model
 12754 ;;
 12755                           
 12756                           
 12757                           ;psect for function _TMR4_StartTimer
 12758  1672                     _TMR4_StartTimer:	
 12759  1672                     l6191:	
 12760                           ;incstack = 0
 12761                           ; Regs used in _TMR4_StartTimer: []
 12762                           
 12763                           
 12764                           ;tmr4.c: 19: T4CONbits.TMR4ON = 1;
 12765  1672  0028               	movlb	8	; select bank8
 12766  1673  1517               	bsf	23,2	;volatile
 12767  1674  0008               	return
 12768  1675                     __end_of_TMR4_StartTimer:	
 12769  1675                     __ptext43:	
 12770 ;; *************** function _TMR2_EnableInterrupt *****************
 12771 ;; Defined at:
 12772 ;;		line 45 in file "driver/src/tmr2.c"
 12773 ;; Parameters:    Size  Location     Type
 12774 ;;		None
 12775 ;; Auto vars:     Size  Location     Type
 12776 ;;		None
 12777 ;; Return value:  Size  Location     Type
 12778 ;;                  1    wreg      void 
 12779 ;; Registers used:
 12780 ;;		None
 12781 ;; Tracked objects:
 12782 ;;		On entry : 14/0
 12783 ;;		On exit  : 1F/1
 12784 ;;		Unchanged: 0/0
 12785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;Total ram usage:        0 bytes
 12791 ;; Hardware stack levels used:    1
 12792 ;; Hardware stack levels required when called:    7
 12793 ;; This function calls:
 12794 ;;		Nothing
 12795 ;; This function is called by:
 12796 ;;		_IR_ResetIfTMR1Overflow
 12797 ;;		_IR_KeyAction
 12798 ;; This function uses a non-reentrant model
 12799 ;;
 12800                           
 12801                           
 12802                           ;psect for function _TMR2_EnableInterrupt
 12803  1675                     _TMR2_EnableInterrupt:	
 12804                           
 12805                           ;tmr2.c: 47: PIE1bits.TMR2IE = 1;
 12806                           
 12807                           ;incstack = 0
 12808                           ; Regs used in _TMR2_EnableInterrupt: []
 12809  1675  0021               	movlb	1	; select bank1
 12810  1676  1491               	bsf	17,1	;volatile
 12811  1677  0008               	return
 12812  1678                     __end_of_TMR2_EnableInterrupt:	
 12813  1678                     PL4:	
 12814  1678  01BC               	clrf	??_IR_KeyAction+1
 12815  1679  35BB               	lslf	??_IR_KeyAction,f
 12816  167A  0DBC               	rlf	??_IR_KeyAction+1,f
 12817  167B  00BD               	movwf	??_IR_KeyAction+2
 12818  167C  3023               	movlw	35
 12819  167D  00BE               	movwf	??_IR_KeyAction+3
 12820  167E  083B               	movf	??_IR_KeyAction,w
 12821  167F  073D               	addwf	??_IR_KeyAction+2,w
 12822  1680  0084               	movwf	4
 12823  1681  083C               	movf	??_IR_KeyAction+1,w
 12824  1682  3D3E               	addwfc	??_IR_KeyAction+3,w
 12825  1683  0085               	movwf	5
 12826  1684  3F40               	moviw [0]fsr1
 12827  1685  3F80               	movwi [0]fsr0
 12828  1686  3F41               	moviw [1]fsr1
 12829  1687  3F81               	movwi [1]fsr0
 12830  1688  0022               	movlb	2	; select bank2
 12831  1689  0008               	return
 12832  168A                     __end_ofPL4:	
 12833  168A                     PL8:	
 12834  168A  307B               	movlw	123
 12835  168B  0086               	movwf	6
 12836  168C  3023               	movlw	35
 12837  168D  0087               	movwf	7
 12838  168E  0C01               	rrf	1,w
 12839  168F  00BB               	movwf	??_IR_KeyAction
 12840  1690  0CBB               	rrf	??_IR_KeyAction,f
 12841  1691  0C3B               	rrf	??_IR_KeyAction,w
 12842  1692  390F               	andlw	15
 12843  1693  0008               	return
 12844  1694                     __end_ofPL8:	
 12845  1694                     PL14:	
 12846  1694  00AE               	movwf	Util_IncValue@pSrc+1
 12847  1695  30E8               	movlw	232
 12848  1696  00AF               	movwf	Util_IncValue@max
 12849  1697  3003               	movlw	3
 12850  1698  00B0               	movwf	Util_IncValue@max+1
 12851  1699  30C8               	movlw	200
 12852  169A  00B1               	movwf	Util_IncValue@delta
 12853  169B  01B2               	clrf	Util_IncValue@delta+1
 12854  169C  0008               	return
 12855  169D                     __end_ofPL14:	
 12856  169D                     PL16:	
 12857  169D  307B               	movlw	123
 12858  169E  0086               	movwf	6
 12859  169F  3023               	movlw	35
 12860  16A0  0087               	movwf	7
 12861  16A1  3142               	addfsr 1,2
 12862  16A2  0801               	movf	1,w
 12863  16A3  3E05               	addlw	low (_VOLUME| (0+32768))
 12864  16A4  0084               	movwf	4
 12865  16A5  3098               	movlw	high (_VOLUME| (0+32768))
 12866  16A6  1803               	skipnc
 12867  16A7  3E01               	addlw	1
 12868  16A8  0085               	movwf	5
 12869  16A9  0800               	movf	0,w	;code access
 12870  16AA  0008               	return
 12871  16AB                     __end_ofPL16:	
 12872  16AB                     PL28:	
 12873  16AB  0084               	movwf	4
 12874  16AC  0185               	clrf	5
 12875  16AD  3F40               	moviw [0]fsr1
 12876  16AE  3F80               	movwi [0]fsr0
 12877  16AF  3F41               	moviw [1]fsr1
 12878  16B0  3F81               	movwi [1]fsr0
 12879  16B1  0008               	return
 12880  16B2                     __end_ofPL28:	
 12881  16B2                     PL30:	
 12882  16B2  00AF               	movwf	Util_IncValue@max
 12883  16B3  3003               	movlw	3
 12884  16B4  00B0               	movwf	Util_IncValue@max+1
 12885  16B5  30C8               	movlw	200
 12886  16B6  00B1               	movwf	Util_IncValue@delta
 12887  16B7  01B2               	clrf	Util_IncValue@delta+1
 12888  16B8  0008               	return
 12889  16B9                     __end_ofPL30:	
 12890  16B9                     PL32:	
 12891  16B9  00AE               	movwf	Util_DecValue@pSrc+1
 12892  16BA  3064               	movlw	100
 12893  16BB  00AF               	movwf	Util_DecValue@min
 12894  16BC  30C8               	movlw	200
 12895  16BD  01B0               	clrf	Util_DecValue@min+1
 12896  16BE  00B1               	movwf	Util_DecValue@delta
 12897  16BF  01B2               	clrf	Util_DecValue@delta+1
 12898  16C0  0008               	return
 12899  16C1                     __end_ofPL32:	
 12900  16C1                     PL34:	
 12901  16C1  30CE               	movlw	206
 12902  16C2  0086               	movwf	6
 12903  16C3  3023               	movlw	35
 12904  16C4  0087               	movwf	7
 12905  16C5  0021               	movlb	1	; select bank1
 12906  16C6  0854               	movf	(_gLedRunPara^(0+128)+10),w	;volatile
 12907  16C7  3FC0               	movwi [0]fsr1
 12908  16C8  0855               	movf	((_gLedRunPara+1)^(0+128)+10),w	;volatile
 12909  16C9  3FC1               	movwi [1]fsr1
 12910  16CA  30D2               	movlw	210
 12911  16CB  0086               	movwf	6
 12912  16CC  0858               	movf	(_gLedRunPara^(0+128)+14),w	;volatile
 12913  16CD  3FC0               	movwi [0]fsr1
 12914  16CE  0859               	movf	((_gLedRunPara+1)^(0+128)+14),w	;volatile
 12915  16CF  3FC1               	movwi [1]fsr1
 12916  16D0  30D4               	movlw	212
 12917  16D1  0086               	movwf	6
 12918  16D2  085A               	movf	(_gLedRunPara^(0+128)+16),w	;volatile
 12919  16D3  3FC0               	movwi [0]fsr1
 12920  16D4  085B               	movf	((_gLedRunPara+1)^(0+128)+16),w	;volatile
 12921  16D5  3FC1               	movwi [1]fsr1
 12922  16D6  30D6               	movlw	214
 12923  16D7  0086               	movwf	6
 12924  16D8  085C               	movf	(_gLedRunPara^(0+128)+18),w	;volatile
 12925  16D9  3FC0               	movwi [0]fsr1
 12926  16DA  085D               	movf	((_gLedRunPara+1)^(0+128)+18),w	;volatile
 12927  16DB  3FC1               	movwi [1]fsr1
 12928  16DC  0008               	return
 12929  16DD                     __end_ofPL34:	
 12930  16DD                     PL38:	
 12931  16DD  30C8               	movlw	200
 12932  16DE  0086               	movwf	6
 12933  16DF  3023               	movlw	35
 12934  16E0  0087               	movwf	7
 12935  16E1  0021               	movlb	1	; select bank1
 12936  16E2  0858               	movf	(_gLedRunPara^(0+128)+14),w	;volatile
 12937  16E3  3FC0               	movwi [0]fsr1
 12938  16E4  0859               	movf	((_gLedRunPara+1)^(0+128)+14),w	;volatile
 12939  16E5  3FC1               	movwi [1]fsr1
 12940  16E6  30CA               	movlw	202
 12941  16E7  0086               	movwf	6
 12942  16E8  085A               	movf	(_gLedRunPara^(0+128)+16),w	;volatile
 12943  16E9  3FC0               	movwi [0]fsr1
 12944  16EA  085B               	movf	((_gLedRunPara+1)^(0+128)+16),w	;volatile
 12945  16EB  3FC1               	movwi [1]fsr1
 12946  16EC  30CC               	movlw	204
 12947  16ED  0086               	movwf	6
 12948  16EE  085C               	movf	(_gLedRunPara^(0+128)+18),w	;volatile
 12949  16EF  3FC0               	movwi [0]fsr1
 12950  16F0  085D               	movf	((_gLedRunPara+1)^(0+128)+18),w	;volatile
 12951  16F1  3FC1               	movwi [1]fsr1
 12952  16F2  0008               	return
 12953  16F3                     __end_ofPL38:	
 12954  16F3                     PL40:	
 12955  16F3  0085               	movwf	5
 12956  16F4  3F40               	moviw [0]fsr1
 12957  16F5  3F80               	movwi [0]fsr0
 12958  16F6  3F41               	moviw [1]fsr1
 12959  16F7  3F81               	movwi [1]fsr0
 12960  16F8  0008               	return
 12961  16F9                     __end_ofPL40:	
 12962  16F9                     PL44:	
 12963  16F9  307B               	movlw	123
 12964  16FA  0086               	movwf	6
 12965  16FB  3023               	movlw	35
 12966  16FC  0087               	movwf	7
 12967  16FD  3087               	movlw	-121
 12968  16FE  1001               	bcf	1,0
 12969  16FF  0581               	andwf	1,f
 12970  1700  1381               	bcf	1,7
 12971  1701  0022               	movlb	2	; select bank2
 12972  1702  0008               	return
 12973  1703                     __end_ofPL44:	
 12974  1703                     PL46:	
 12975  1703  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 12976  1704  0020               	movlb	0	; select bank0
 12977  1705  00AD               	movwf	Util_IncValue@pSrc
 12978  1706  30E8               	movlw	232
 12979  1707  01AE               	clrf	Util_IncValue@pSrc+1
 12980  1708  0008               	return
 12981  1709                     __end_ofPL46:	
 12982  1709                     PL48:	
 12983  1709  0086               	movwf	6
 12984  170A  3023               	movlw	35
 12985  170B  0087               	movwf	7
 12986  170C  0021               	movlb	1	; select bank1
 12987  170D  0858               	movf	(_gLedRunPara^(0+128)+14),w	;volatile
 12988  170E  3FC0               	movwi [0]fsr1
 12989  170F  0859               	movf	((_gLedRunPara+1)^(0+128)+14),w	;volatile
 12990  1710  3FC1               	movwi [1]fsr1
 12991  1711  0008               	return
 12992  1712                     __end_ofPL48:	
 12993  1712                     PL54:	
 12994  1712  3088               	movlw	136
 12995  1713  00BD               	movwf	??_IR_KeyAction+2
 12996  1714  3023               	movlw	35
 12997  1715  00BE               	movwf	??_IR_KeyAction+3
 12998  1716  082D               	movf	?___wmul,w
 12999  1717  073D               	addwf	??_IR_KeyAction+2,w
 13000  1718  00BF               	movwf	??_IR_KeyAction+4
 13001  1719  082E               	movf	?___wmul+1,w
 13002  171A  3D3E               	addwfc	??_IR_KeyAction+3,w
 13003  171B  00C0               	movwf	??_IR_KeyAction+5
 13004  171C  083B               	movf	??_IR_KeyAction,w
 13005  171D  073F               	addwf	??_IR_KeyAction+4,w
 13006  171E  0086               	movwf	6
 13007  171F  083C               	movf	??_IR_KeyAction+1,w
 13008  1720  3D40               	addwfc	??_IR_KeyAction+5,w
 13009  1721  0087               	movwf	7
 13010  1722  0022               	movlb	2	; select bank2
 13011  1723  0008               	return
 13012  1724                     __end_ofPL54:	
 13013  1724                     PL64:	
 13014  1724  0020               	movlb	0	; select bank0
 13015  1725  00BB               	movwf	??_IR_KeyAction
 13016  1726  01BC               	clrf	??_IR_KeyAction+1
 13017  1727  35BB               	lslf	??_IR_KeyAction,f
 13018  1728  0DBC               	rlf	??_IR_KeyAction+1,f
 13019  1729  0022               	movlb	2	; select bank2
 13020  172A  084C               	movf	IR_KeyAction@idx^(0+256),w
 13021  172B  0020               	movlb	0	; select bank0
 13022  172C  00AD               	movwf	___wmul@multiplier
 13023  172D  300A               	movlw	10
 13024  172E  01AE               	clrf	___wmul@multiplier+1
 13025  172F  00AF               	movwf	___wmul@multiplicand
 13026  1730  01B0               	clrf	___wmul@multiplicand+1
 13027  1731  0008               	return
 13028  1732                     __end_ofPL64:	
 13029  1732                     PL70:	
 13030  1732  082D               	movf	?___wmul,w
 13031  1733  073F               	addwf	??_IR_KeyAction+4,w
 13032  1734  00C1               	movwf	??_IR_KeyAction+6
 13033  1735  082E               	movf	?___wmul+1,w
 13034  1736  3D40               	addwfc	??_IR_KeyAction+5,w
 13035  1737  00C2               	movwf	??_IR_KeyAction+7
 13036  1738  083B               	movf	??_IR_KeyAction,w
 13037  1739  0741               	addwf	??_IR_KeyAction+6,w
 13038  173A  00C3               	movwf	??_IR_KeyAction+8
 13039  173B  083C               	movf	??_IR_KeyAction+1,w
 13040  173C  3D42               	addwfc	??_IR_KeyAction+7,w
 13041  173D  00C4               	movwf	??_IR_KeyAction+9
 13042  173E  0008               	return
 13043  173F                     __end_ofPL70:	
 13044  173F                     PL78:	
 13045  173F  00AD               	movwf	___wmul@multiplier
 13046  1740  300A               	movlw	10
 13047  1741  01AE               	clrf	___wmul@multiplier+1
 13048  1742  00AF               	movwf	___wmul@multiplicand
 13049  1743  01B0               	clrf	___wmul@multiplicand+1
 13050  1744  0008               	return
 13051  1745                     __end_ofPL78:	
 13052  1745                     PL80:	
 13053  1745  307B               	movlw	123
 13054  1746  0086               	movwf	6
 13055  1747  3023               	movlw	35
 13056  1748  0087               	movwf	7
 13057  1749  0801               	movf	1,w
 13058  174A  3987               	andlw	-121
 13059  174B  0008               	return
 13060  174C                     __end_ofPL80:	
 13061  174C                     PL94:	
 13062  174C  082D               	movf	?___wmul,w
 13063  174D  073D               	addwf	??_IR_KeyAction+2,w
 13064  174E  00BF               	movwf	??_IR_KeyAction+4
 13065  174F  082E               	movf	?___wmul+1,w
 13066  1750  3D3E               	addwfc	??_IR_KeyAction+3,w
 13067  1751  00C0               	movwf	??_IR_KeyAction+5
 13068  1752  085D               	movf	_ir_state+4,w	;volatile
 13069  1753  0008               	return
 13070  1754                     __end_ofPL94:	
 13071  1754                     PL100:	
 13072  1754  085E               	movf	_ir_state+5,w	;volatile
 13073  1755  00BB               	movwf	??_IR_KeyAction
 13074  1756  01BC               	clrf	??_IR_KeyAction+1
 13075  1757  085B               	movf	_ir_state+2,w	;volatile
 13076  1758  00AD               	movwf	___wmul@multiplier
 13077  1759  3058               	movlw	88
 13078  175A  01AE               	clrf	___wmul@multiplier+1
 13079  175B  00AF               	movwf	___wmul@multiplicand
 13080  175C  3002               	movlw	2
 13081  175D  00B0               	movwf	___wmul@multiplicand+1
 13082  175E  0008               	return
 13083  175F                     __end_ofPL100:	
 13084  175F                     PL104:	
 13085  175F  082D               	movf	?___wmul,w
 13086  1760  00BD               	movwf	??_IR_KeyAction+2
 13087  1761  082E               	movf	?___wmul+1,w
 13088  1762  00BE               	movwf	??_IR_KeyAction+3
 13089  1763  085C               	movf	_ir_state+3,w	;volatile
 13090  1764  00AD               	movwf	___wmul@multiplier
 13091  1765  303C               	movlw	60
 13092  1766  01AE               	clrf	___wmul@multiplier+1
 13093  1767  00AF               	movwf	___wmul@multiplicand
 13094  1768  01B0               	clrf	___wmul@multiplicand+1
 13095  1769  0008               	return
 13096  176A                     __end_ofPL104:	
 13097  176A                     PL108:	
 13098  176A  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 13099  176B  0020               	movlb	0	; select bank0
 13100  176C  00AD               	movwf	Util_DecValue@pSrc
 13101  176D  30C8               	movlw	200
 13102  176E  01AE               	clrf	Util_DecValue@pSrc+1
 13103  176F  01AF               	clrf	Util_DecValue@min
 13104  1770  01B0               	clrf	Util_DecValue@min+1
 13105  1771  00B1               	movwf	Util_DecValue@delta
 13106  1772  01B2               	clrf	Util_DecValue@delta+1
 13107  1773  0008               	return
 13108  1774                     __end_ofPL108:	
 13109  1774                     PL136:	
 13110  1774  0086               	movwf	6
 13111  1775  3023               	movlw	35
 13112  1776  0087               	movwf	7
 13113  1777  0843               	movf	??_IR_KeyAction+8,w
 13114  1778  3FC0               	movwi [0]fsr1
 13115  1779  0844               	movf	??_IR_KeyAction+9,w
 13116  177A  3FC1               	movwi [1]fsr1
 13117  177B  0008               	return
 13118  177C                     __end_ofPL136:	
 13119  177C                     PL148:	
 13120  177C  0022               	movlb	2	; select bank2
 13121  177D  354B               	lslf	IR_KeyAction@i_1447^(0+256),w
 13122  177E  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 13123  177F  0086               	movwf	6
 13124  1780  0187               	clrf	7
 13125  1781  0008               	return
 13126  1782                     __end_ofPL148:	
 13127  1782                     PL154:	
 13128  1782  3000               	movlw	0
 13129  1783  3D09               	addwfc	9,w
 13130  1784  00BB               	movwf	??_IR_KeyAction
 13131  1785  3023               	movlw	35
 13132  1786  0DBB               	rlf	??_IR_KeyAction,f
 13133  1787  0008               	return
 13134  1788                     __end_ofPL154:	
 13135  1788                     PL160:	
 13136  1788  0E59               	swapf	_ir_state,w	;volatile
 13137  1789  0C89               	rrf	9,f
 13138  178A  3907               	andlw	7
 13139  178B  3A03               	xorlw	3
 13140  178C  0008               	return
 13141  178D                     __end_ofPL160:	
 13142  178D                     PL162:	
 13143  178D  0020               	movlb	0	; select bank0
 13144  178E  0E59               	swapf	_ir_state,w	;volatile
 13145  178F  0C89               	rrf	9,f
 13146  1790  3907               	andlw	7
 13147  1791  0008               	return
 13148  1792                     __end_ofPL162:	
 13149  1792                     PL172:	
 13150  1792  0E59               	swapf	_ir_state,w	;volatile
 13151  1793  0C89               	rrf	9,f
 13152  1794  3907               	andlw	7
 13153  1795  3A02               	xorlw	2
 13154  1796  0008               	return
 13155  1797                     __end_ofPL172:	
 13156  1797                     __ptext45:	
 13157 ;; *************** function _IR_IsValidTime *****************
 13158 ;; Defined at:
 13159 ;;		line 102 in file "user/src/ir.c"
 13160 ;; Parameters:    Size  Location     Type
 13161 ;;  tm              1    wreg     PTR unsigned char 
 13162 ;;		 -> ir_state.time(4), ir_state(7), 
 13163 ;;  len             1   16[BANK0 ] unsigned char 
 13164 ;; Auto vars:     Size  Location     Type
 13165 ;;  tm              1   20[BANK0 ] PTR unsigned char 
 13166 ;;		 -> ir_state.time(4), ir_state(7), 
 13167 ;;  hour            1   19[BANK0 ] unsigned char 
 13168 ;;  result          1   18[BANK0 ] unsigned char 
 13169 ;;  min             1   17[BANK0 ] unsigned char 
 13170 ;; Return value:  Size  Location     Type
 13171 ;;                  1    wreg      unsigned char 
 13172 ;; Registers used:
 13173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13174 ;; Tracked objects:
 13175 ;;		On entry : 1F/0
 13176 ;;		On exit  : 1F/0
 13177 ;;		Unchanged: 0/0
 13178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13179 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13182 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13183 ;;Total ram usage:        5 bytes
 13184 ;; Hardware stack levels used:    1
 13185 ;; Hardware stack levels required when called:    8
 13186 ;; This function calls:
 13187 ;;		___bmul
 13188 ;; This function is called by:
 13189 ;;		_IR_KeyAction
 13190 ;; This function uses a non-reentrant model
 13191 ;;
 13192                           
 13193                           
 13194                           ;psect for function _IR_IsValidTime
 13195  1797                     _IR_IsValidTime:	
 13196                           
 13197                           ;incstack = 0
 13198                           ; Regs used in _IR_IsValidTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13199                           ;IR_IsValidTime@tm stored from wreg
 13200  1797  00B4               	movwf	IR_IsValidTime@tm
 13201                           
 13202                           ;ir.c: 103: bool result = 0;
 13203  1798  01B2               	clrf	IR_IsValidTime@result
 13204                           
 13205                           ;ir.c: 105: uint8_t min = 0;
 13206  1799  01B1               	clrf	IR_IsValidTime@min
 13207                           
 13208                           ;ir.c: 107: switch (len) {
 13209  179A  2FD5               	goto	l6683
 13210  179B                     l6655:	
 13211                           
 13212                           ;ir.c: 109: if ((*tm) < 3) {
 13213  179B  0834               	movf	IR_IsValidTime@tm,w
 13214  179C  0086               	movwf	6
 13215  179D  3003               	movlw	3
 13216  179E                     L11:	
 13217  179E  0187               	clrf	7
 13218  179F  0201               	subwf	1,w
 13219  17A0                     L10:	
 13220  17A0  1803               	skipnc
 13221  17A1  2FE3               	goto	l6685
 13222                           
 13223                           ;ir.c: 110: result = 1;
 13224  17A2  01B2               	clrf	IR_IsValidTime@result
 13225  17A3  0AB2               	incf	IR_IsValidTime@result,f
 13226  17A4  2FE3               	goto	l6685
 13227  17A5                     l6659:	
 13228                           
 13229                           ;ir.c: 114: hour = (*tm)*10 + (*(tm + 1));
 13230  17A5  27F1  3191         	fcall	PL62	;call to abstracted procedure
 13231  17A7  27E5  3191         	fcall	___bmul
 13232                           
 13233                           ;ir.c: 115: if (hour < 24) {
 13234  17A9  27FB  3191         	fcall	PL166	;call to abstracted procedure
 13235  17AB  2FA0               	goto	L10
 13236  17AC                     l6665:	
 13237                           
 13238                           ;ir.c: 120: hour = (*tm)*10 + (*(tm + 1));
 13239  17AC  27F1  3191         	fcall	PL62	;call to abstracted procedure
 13240  17AE  27E5  3191         	fcall	___bmul
 13241                           
 13242                           ;ir.c: 121: if (hour < 24 && (*(tm + 2)) < 6) {
 13243  17B0  27FB  3191         	fcall	PL166	;call to abstracted procedure
 13244  17B2  1803               	skipnc
 13245  17B3  2FE3               	goto	l6685
 13246  17B4  0834               	movf	IR_IsValidTime@tm,w
 13247  17B5  3E02               	addlw	2
 13248  17B6  0086               	movwf	6
 13249  17B7  3006               	movlw	6
 13250  17B8  2F9E               	goto	L11
 13251  17B9                     l6673:	
 13252                           
 13253                           ;ir.c: 126: hour = (*tm)*10 + (*(tm + 1));
 13254  17B9  27F1  3191         	fcall	PL62	;call to abstracted procedure
 13255  17BB  27E5  3191         	fcall	___bmul
 13256  17BD  0701               	addwf	1,w
 13257  17BE  00B3               	movwf	IR_IsValidTime@hour
 13258                           
 13259                           ;ir.c: 127: min = (*(tm + 2))*10 + (*(tm + 3));
 13260  17BF  0834               	movf	IR_IsValidTime@tm,w
 13261  17C0  3E03               	addlw	3
 13262  17C1  0086               	movwf	6
 13263  17C2  300A               	movlw	10
 13264  17C3  0187               	clrf	7
 13265  17C4  00AD               	movwf	___bmul@multiplicand
 13266  17C5  0834               	movf	IR_IsValidTime@tm,w
 13267  17C6  3E02               	addlw	2
 13268  17C7  0084               	movwf	4
 13269  17C8  0185               	clrf	5
 13270  17C9  0800               	movf	0,w
 13271  17CA  27E5  3191         	fcall	___bmul
 13272  17CC  0701               	addwf	1,w
 13273  17CD  00B1               	movwf	IR_IsValidTime@min
 13274                           
 13275                           ;ir.c: 128: if (hour < 24 && min < 60) {
 13276  17CE  3018               	movlw	24
 13277  17CF  0233               	subwf	IR_IsValidTime@hour,w
 13278  17D0  1803               	skipnc
 13279  17D1  2FE3               	goto	l6685
 13280  17D2  303C               	movlw	60
 13281  17D3  0231               	subwf	IR_IsValidTime@min,w
 13282  17D4  2FA0               	goto	L10
 13283  17D5                     l6683:	
 13284  17D5  0830               	movf	IR_IsValidTime@len,w
 13285                           
 13286                           ; Switch size 1, requested type "space"
 13287                           ; Number of cases is 4, Range of values is 1 to 4
 13288                           ; switch strategies available:
 13289                           ; Name         Instructions Cycles
 13290                           ; simple_byte           13     7 (average)
 13291                           ; direct_byte           17     9 (fixed)
 13292                           ; jumptable            263     9 (fixed)
 13293                           ;	Chosen strategy is simple_byte
 13294  17D6  3A01               	xorlw	1	; case 1
 13295  17D7  1903               	skipnz
 13296  17D8  2F9B               	goto	l6655
 13297  17D9  3A03               	xorlw	3	; case 2
 13298  17DA  1903               	skipnz
 13299  17DB  2FA5               	goto	l6659
 13300  17DC  3A01               	xorlw	1	; case 3
 13301  17DD  1903               	skipnz
 13302  17DE  2FAC               	goto	l6665
 13303  17DF  3A07               	xorlw	7	; case 4
 13304  17E0  1903               	skipnz
 13305  17E1  2FB9               	goto	l6673
 13306  17E2  2FE3               	goto	l6685
 13307  17E3                     l6685:	
 13308                           
 13309                           ;ir.c: 135: return result;
 13310  17E3  0832               	movf	IR_IsValidTime@result,w
 13311  17E4  0008               	return
 13312  17E5                     __end_of_IR_IsValidTime:	
 13313  17E5                     __ptext46:	
 13314 ;; *************** function ___bmul *****************
 13315 ;; Defined at:
 13316 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul8.c"
 13317 ;; Parameters:    Size  Location     Type
 13318 ;;  multiplier      1    wreg     unsigned char 
 13319 ;;  multiplicand    1   13[BANK0 ] unsigned char 
 13320 ;; Auto vars:     Size  Location     Type
 13321 ;;  multiplier      1   15[BANK0 ] unsigned char 
 13322 ;;  product         1   14[BANK0 ] unsigned char 
 13323 ;; Return value:  Size  Location     Type
 13324 ;;                  1    wreg      unsigned char 
 13325 ;; Registers used:
 13326 ;;		wreg, status,2, status,0
 13327 ;; Tracked objects:
 13328 ;;		On entry : 1F/0
 13329 ;;		On exit  : 1F/0
 13330 ;;		Unchanged: 0/0
 13331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13332 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13333 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13335 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13336 ;;Total ram usage:        3 bytes
 13337 ;; Hardware stack levels used:    1
 13338 ;; Hardware stack levels required when called:    7
 13339 ;; This function calls:
 13340 ;;		Nothing
 13341 ;; This function is called by:
 13342 ;;		_IR_IsValidTime
 13343 ;;		_IR_KeyAction
 13344 ;; This function uses a non-reentrant model
 13345 ;;
 13346                           
 13347                           
 13348                           ;psect for function ___bmul
 13349  17E5                     ___bmul:	
 13350                           
 13351                           ;incstack = 0
 13352                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 13353                           ;___bmul@multiplier stored from wreg
 13354  17E5  00AF               	movwf	___bmul@multiplier
 13355  17E6  01AE               	clrf	___bmul@product
 13356  17E7                     l6499:	
 13357  17E7  082D               	movf	___bmul@multiplicand,w
 13358  17E8  182F               	btfsc	___bmul@multiplier,0
 13359  17E9  07AE               	addwf	___bmul@product,f
 13360  17EA  35AD               	lslf	___bmul@multiplicand,f
 13361  17EB  36AF               	lsrf	___bmul@multiplier,f
 13362  17EC  082F               	movf	___bmul@multiplier,w
 13363  17ED  1D03               	btfss	3,2
 13364  17EE  2FE7               	goto	l6499
 13365  17EF  082E               	movf	___bmul@product,w
 13366  17F0  0008               	return
 13367  17F1                     __end_of___bmul:	
 13368  17F1                     PL62:	
 13369  17F1  0A34               	incf	IR_IsValidTime@tm,w
 13370  17F2  0086               	movwf	6
 13371  17F3  300A               	movlw	10
 13372  17F4  0187               	clrf	7
 13373  17F5  00AD               	movwf	___bmul@multiplicand
 13374  17F6  0834               	movf	IR_IsValidTime@tm,w
 13375  17F7  0084               	movwf	4
 13376  17F8  0185               	clrf	5
 13377  17F9  0800               	movf	0,w
 13378  17FA  0008               	return
 13379  17FB                     __end_ofPL62:	
 13380  17FB                     PL166:	
 13381  17FB  0701               	addwf	1,w
 13382  17FC  00B3               	movwf	IR_IsValidTime@hour
 13383  17FD  3018               	movlw	24
 13384  17FE  0233               	subwf	IR_IsValidTime@hour,w
 13385  17FF  0008               	return
 13386  1800                     __end_ofPL166:	
 13387                           
 13388                           	psect	text54
 13389  07EE                     __ptext54:	
 13390 ;; *************** function _PWM4_LoadDutyValue *****************
 13391 ;; Defined at:
 13392 ;;		line 49 in file "driver/src/pwm.c"
 13393 ;; Parameters:    Size  Location     Type
 13394 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13395 ;; Auto vars:     Size  Location     Type
 13396 ;;		None
 13397 ;; Return value:  Size  Location     Type
 13398 ;;                  1    wreg      void 
 13399 ;; Registers used:
 13400 ;;		wreg
 13401 ;; Tracked objects:
 13402 ;;		On entry : 10/0
 13403 ;;		On exit  : 1F/6
 13404 ;;		Unchanged: 0/0
 13405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13406 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13409 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;Total ram usage:        2 bytes
 13411 ;; Hardware stack levels used:    1
 13412 ;; Hardware stack levels required when called:    7
 13413 ;; This function calls:
 13414 ;;		Nothing
 13415 ;; This function is called by:
 13416 ;;		_Led_UpdateBright
 13417 ;;		i1_Led_UpdateBright
 13418 ;;		_Led_Ramp
 13419 ;; This function uses a non-reentrant model
 13420 ;;
 13421                           
 13422                           
 13423                           ;psect for function _PWM4_LoadDutyValue
 13424  07EE                     _PWM4_LoadDutyValue:	
 13425                           
 13426                           ;Skip over the trampoline to the duplicate function for level 1
 13427  07EE  1C7E               	btfss	126,0
 13428  07EF  2FF1               	goto	l6187
 13429  07F0  2FFA               	ljmp	i1l3989
 13430  07F1                     _PWM4_LoadDutyValue$intlevel0:	
 13431  07F1                     l6187:	
 13432                           ;incstack = 0
 13433                           ; Regs used in _PWM4_LoadDutyValue: [wreg]
 13434                           
 13435                           
 13436                           ;pwm.c: 51: CCPR4 = dutyValue;
 13437  07F1  0020               	movlb	0	; select bank0
 13438  07F2  082E               	movf	PWM4_LoadDutyValue@dutyValue+1,w
 13439  07F3  0026               	movlb	6	; select bank6
 13440  07F4  0096               	movwf	22	;volatile
 13441  07F5  0020               	movlb	0	; select bank0
 13442  07F6  082D               	movf	PWM4_LoadDutyValue@dutyValue,w
 13443  07F7  0026               	movlb	6	; select bank6
 13444  07F8  0095               	movwf	21	;volatile
 13445  07F9  0008               	return
 13446  07FA                     __end_of_PWM4_LoadDutyValue:	
 13447  07FA                     __ptext86:	
 13448 ;; *************** function i1_PWM4_LoadDutyValue *****************
 13449 ;; Defined at:
 13450 ;;		line 49 in file "driver/src/pwm.c"
 13451 ;; Parameters:    Size  Location     Type
 13452 ;;  dutyValue       2    0[COMMON] unsigned int 
 13453 ;; Auto vars:     Size  Location     Type
 13454 ;;		None
 13455 ;; Return value:  Size  Location     Type
 13456 ;;                  1    wreg      void 
 13457 ;; Registers used:
 13458 ;;		wreg
 13459 ;; Tracked objects:
 13460 ;;		On entry : 0/0
 13461 ;;		On exit  : 1F/6
 13462 ;;		Unchanged: 0/0
 13463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13464 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13467 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13468 ;;Total ram usage:        2 bytes
 13469 ;; Hardware stack levels used:    1
 13470 ;; This function calls:
 13471 ;;		Nothing
 13472 ;; This function is called by:
 13473 ;; This function uses a non-reentrant model
 13474 ;;
 13475                           
 13476                           
 13477                           ;psect for function i1_PWM4_LoadDutyValue
 13478  07FA                     i1_PWM4_LoadDutyValue:	
 13479  07FA                     i1l3989:	
 13480                           ;incstack = 0
 13481                           ; Regs used in i1_PWM4_LoadDutyValue: [wreg]
 13482                           
 13483                           
 13484                           ;pwm.c: 51: CCPR4 = dutyValue;
 13485  07FA  0871               	movf	i1PWM4_LoadDutyValue@dutyValue+1,w
 13486  07FB  0026               	movlb	6	; select bank6
 13487  07FC  0096               	movwf	22	;volatile
 13488  07FD  0870               	movf	i1PWM4_LoadDutyValue@dutyValue,w
 13489  07FE  0095               	movwf	21	;volatile
 13490  07FF  0008               	return
 13491  0800                     __end_ofi1_PWM4_LoadDutyValue:	
 13492                           
 13493                           	psect	text55
 13494  10DA                     __ptext55:	
 13495 ;; *************** function _PWM3_LoadDutyValue *****************
 13496 ;; Defined at:
 13497 ;;		line 37 in file "driver/src/pwm.c"
 13498 ;; Parameters:    Size  Location     Type
 13499 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13500 ;; Auto vars:     Size  Location     Type
 13501 ;;		None
 13502 ;; Return value:  Size  Location     Type
 13503 ;;                  1    wreg      void 
 13504 ;; Registers used:
 13505 ;;		wreg
 13506 ;; Tracked objects:
 13507 ;;		On entry : 10/0
 13508 ;;		On exit  : 1F/6
 13509 ;;		Unchanged: 0/0
 13510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13511 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13515 ;;Total ram usage:        2 bytes
 13516 ;; Hardware stack levels used:    1
 13517 ;; Hardware stack levels required when called:    7
 13518 ;; This function calls:
 13519 ;;		Nothing
 13520 ;; This function is called by:
 13521 ;;		_Led_UpdateBright
 13522 ;;		i1_Led_UpdateBright
 13523 ;;		_Led_Ramp
 13524 ;; This function uses a non-reentrant model
 13525 ;;
 13526                           
 13527                           
 13528                           ;psect for function _PWM3_LoadDutyValue
 13529  10DA                     _PWM3_LoadDutyValue:	
 13530                           
 13531                           ;Skip over the trampoline to the duplicate function for level 1
 13532  10DA  1C7E               	btfss	126,0
 13533  10DB  28DD               	goto	l6185
 13534  10DC  28E6               	ljmp	i1l3987
 13535  10DD                     _PWM3_LoadDutyValue$intlevel0:	
 13536  10DD                     l6185:	
 13537                           ;incstack = 0
 13538                           ; Regs used in _PWM3_LoadDutyValue: [wreg]
 13539                           
 13540                           
 13541                           ;pwm.c: 39: CCPR3 = dutyValue;
 13542  10DD  0020               	movlb	0	; select bank0
 13543  10DE  082E               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 13544  10DF  0026               	movlb	6	; select bank6
 13545  10E0  0092               	movwf	18	;volatile
 13546  10E1  0020               	movlb	0	; select bank0
 13547  10E2  082D               	movf	PWM3_LoadDutyValue@dutyValue,w
 13548  10E3  0026               	movlb	6	; select bank6
 13549  10E4  0091               	movwf	17	;volatile
 13550  10E5  0008               	return
 13551  10E6                     __end_of_PWM3_LoadDutyValue:	
 13552  10E6                     __ptext87:	
 13553 ;; *************** function i1_PWM3_LoadDutyValue *****************
 13554 ;; Defined at:
 13555 ;;		line 37 in file "driver/src/pwm.c"
 13556 ;; Parameters:    Size  Location     Type
 13557 ;;  dutyValue       2    0[COMMON] unsigned int 
 13558 ;; Auto vars:     Size  Location     Type
 13559 ;;		None
 13560 ;; Return value:  Size  Location     Type
 13561 ;;                  1    wreg      void 
 13562 ;; Registers used:
 13563 ;;		wreg
 13564 ;; Tracked objects:
 13565 ;;		On entry : 0/0
 13566 ;;		On exit  : 1F/6
 13567 ;;		Unchanged: 0/0
 13568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13569 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13572 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13573 ;;Total ram usage:        2 bytes
 13574 ;; Hardware stack levels used:    1
 13575 ;; This function calls:
 13576 ;;		Nothing
 13577 ;; This function is called by:
 13578 ;; This function uses a non-reentrant model
 13579 ;;
 13580                           
 13581                           
 13582                           ;psect for function i1_PWM3_LoadDutyValue
 13583  10E6                     i1_PWM3_LoadDutyValue:	
 13584  10E6                     i1l3987:	
 13585                           ;incstack = 0
 13586                           ; Regs used in i1_PWM3_LoadDutyValue: [wreg]
 13587                           
 13588                           
 13589                           ;pwm.c: 39: CCPR3 = dutyValue;
 13590  10E6  0871               	movf	i1PWM3_LoadDutyValue@dutyValue+1,w
 13591  10E7  0026               	movlb	6	; select bank6
 13592  10E8  0092               	movwf	18	;volatile
 13593  10E9  0870               	movf	i1PWM3_LoadDutyValue@dutyValue,w
 13594  10EA  0091               	movwf	17	;volatile
 13595  10EB  0008               	return
 13596  10EC                     __end_ofi1_PWM3_LoadDutyValue:	
 13597                           
 13598                           	psect	text56
 13599  10C8                     __ptext56:	
 13600 ;; *************** function _PWM2_LoadDutyValue *****************
 13601 ;; Defined at:
 13602 ;;		line 25 in file "driver/src/pwm.c"
 13603 ;; Parameters:    Size  Location     Type
 13604 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13605 ;; Auto vars:     Size  Location     Type
 13606 ;;		None
 13607 ;; Return value:  Size  Location     Type
 13608 ;;                  1    wreg      void 
 13609 ;; Registers used:
 13610 ;;		wreg
 13611 ;; Tracked objects:
 13612 ;;		On entry : 10/0
 13613 ;;		On exit  : 1F/5
 13614 ;;		Unchanged: 0/0
 13615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13616 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;Total ram usage:        2 bytes
 13621 ;; Hardware stack levels used:    1
 13622 ;; Hardware stack levels required when called:    7
 13623 ;; This function calls:
 13624 ;;		Nothing
 13625 ;; This function is called by:
 13626 ;;		_Led_UpdateBright
 13627 ;;		i1_Led_UpdateBright
 13628 ;;		_Led_Ramp
 13629 ;; This function uses a non-reentrant model
 13630 ;;
 13631                           
 13632                           
 13633                           ;psect for function _PWM2_LoadDutyValue
 13634  10C8                     _PWM2_LoadDutyValue:	
 13635                           
 13636                           ;Skip over the trampoline to the duplicate function for level 1
 13637  10C8  1C7E               	btfss	126,0
 13638  10C9  28CB               	goto	l6183
 13639  10CA  28D4               	ljmp	i1l3985
 13640  10CB                     _PWM2_LoadDutyValue$intlevel0:	
 13641  10CB                     l6183:	
 13642                           ;incstack = 0
 13643                           ; Regs used in _PWM2_LoadDutyValue: [wreg]
 13644                           
 13645                           
 13646                           ;pwm.c: 27: CCPR2 = dutyValue;
 13647  10CB  0020               	movlb	0	; select bank0
 13648  10CC  082E               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 13649  10CD  0025               	movlb	5	; select bank5
 13650  10CE  0096               	movwf	22	;volatile
 13651  10CF  0020               	movlb	0	; select bank0
 13652  10D0  082D               	movf	PWM2_LoadDutyValue@dutyValue,w
 13653  10D1  0025               	movlb	5	; select bank5
 13654  10D2  0095               	movwf	21	;volatile
 13655  10D3  0008               	return
 13656  10D4                     __end_of_PWM2_LoadDutyValue:	
 13657  10D4                     __ptext88:	
 13658 ;; *************** function i1_PWM2_LoadDutyValue *****************
 13659 ;; Defined at:
 13660 ;;		line 25 in file "driver/src/pwm.c"
 13661 ;; Parameters:    Size  Location     Type
 13662 ;;  dutyValue       2    0[COMMON] unsigned int 
 13663 ;; Auto vars:     Size  Location     Type
 13664 ;;		None
 13665 ;; Return value:  Size  Location     Type
 13666 ;;                  1    wreg      void 
 13667 ;; Registers used:
 13668 ;;		wreg
 13669 ;; Tracked objects:
 13670 ;;		On entry : 0/0
 13671 ;;		On exit  : 1F/5
 13672 ;;		Unchanged: 0/0
 13673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13674 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13677 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13678 ;;Total ram usage:        2 bytes
 13679 ;; Hardware stack levels used:    1
 13680 ;; This function calls:
 13681 ;;		Nothing
 13682 ;; This function is called by:
 13683 ;; This function uses a non-reentrant model
 13684 ;;
 13685                           
 13686                           
 13687                           ;psect for function i1_PWM2_LoadDutyValue
 13688  10D4                     i1_PWM2_LoadDutyValue:	
 13689  10D4                     i1l3985:	
 13690                           ;incstack = 0
 13691                           ; Regs used in i1_PWM2_LoadDutyValue: [wreg]
 13692                           
 13693                           
 13694                           ;pwm.c: 27: CCPR2 = dutyValue;
 13695  10D4  0871               	movf	i1PWM2_LoadDutyValue@dutyValue+1,w
 13696  10D5  0025               	movlb	5	; select bank5
 13697  10D6  0096               	movwf	22	;volatile
 13698  10D7  0870               	movf	i1PWM2_LoadDutyValue@dutyValue,w
 13699  10D8  0095               	movwf	21	;volatile
 13700  10D9  0008               	return
 13701  10DA                     __end_ofi1_PWM2_LoadDutyValue:	
 13702                           
 13703                           	psect	text57
 13704  10B6                     __ptext57:	
 13705 ;; *************** function _PWM1_LoadDutyValue *****************
 13706 ;; Defined at:
 13707 ;;		line 13 in file "driver/src/pwm.c"
 13708 ;; Parameters:    Size  Location     Type
 13709 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13710 ;; Auto vars:     Size  Location     Type
 13711 ;;		None
 13712 ;; Return value:  Size  Location     Type
 13713 ;;                  1    wreg      void 
 13714 ;; Registers used:
 13715 ;;		wreg
 13716 ;; Tracked objects:
 13717 ;;		On entry : 10/0
 13718 ;;		On exit  : 1F/5
 13719 ;;		Unchanged: 0/0
 13720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13721 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13724 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13725 ;;Total ram usage:        2 bytes
 13726 ;; Hardware stack levels used:    1
 13727 ;; Hardware stack levels required when called:    7
 13728 ;; This function calls:
 13729 ;;		Nothing
 13730 ;; This function is called by:
 13731 ;;		_Led_UpdateBright
 13732 ;;		i1_Led_UpdateBright
 13733 ;;		_Led_Ramp
 13734 ;; This function uses a non-reentrant model
 13735 ;;
 13736                           
 13737                           
 13738                           ;psect for function _PWM1_LoadDutyValue
 13739  10B6                     _PWM1_LoadDutyValue:	
 13740                           
 13741                           ;Skip over the trampoline to the duplicate function for level 1
 13742  10B6  1C7E               	btfss	126,0
 13743  10B7  28B9               	goto	l6181
 13744  10B8  28C2               	ljmp	i1l3983
 13745  10B9                     _PWM1_LoadDutyValue$intlevel0:	
 13746  10B9                     l6181:	
 13747                           ;incstack = 0
 13748                           ; Regs used in _PWM1_LoadDutyValue: [wreg]
 13749                           
 13750                           
 13751                           ;pwm.c: 15: CCPR1 = dutyValue;
 13752  10B9  0020               	movlb	0	; select bank0
 13753  10BA  082E               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 13754  10BB  0025               	movlb	5	; select bank5
 13755  10BC  0092               	movwf	18	;volatile
 13756  10BD  0020               	movlb	0	; select bank0
 13757  10BE  082D               	movf	PWM1_LoadDutyValue@dutyValue,w
 13758  10BF  0025               	movlb	5	; select bank5
 13759  10C0  0091               	movwf	17	;volatile
 13760  10C1  0008               	return
 13761  10C2                     __end_of_PWM1_LoadDutyValue:	
 13762  10C2                     __ptext89:	
 13763 ;; *************** function i1_PWM1_LoadDutyValue *****************
 13764 ;; Defined at:
 13765 ;;		line 13 in file "driver/src/pwm.c"
 13766 ;; Parameters:    Size  Location     Type
 13767 ;;  dutyValue       2    0[COMMON] unsigned int 
 13768 ;; Auto vars:     Size  Location     Type
 13769 ;;		None
 13770 ;; Return value:  Size  Location     Type
 13771 ;;                  1    wreg      void 
 13772 ;; Registers used:
 13773 ;;		wreg
 13774 ;; Tracked objects:
 13775 ;;		On entry : 0/0
 13776 ;;		On exit  : 1F/5
 13777 ;;		Unchanged: 0/0
 13778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13779 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13783 ;;Total ram usage:        2 bytes
 13784 ;; Hardware stack levels used:    1
 13785 ;; This function calls:
 13786 ;;		Nothing
 13787 ;; This function is called by:
 13788 ;; This function uses a non-reentrant model
 13789 ;;
 13790                           
 13791                           
 13792                           ;psect for function i1_PWM1_LoadDutyValue
 13793  10C2                     i1_PWM1_LoadDutyValue:	
 13794  10C2                     i1l3983:	
 13795                           ;incstack = 0
 13796                           ; Regs used in i1_PWM1_LoadDutyValue: [wreg]
 13797                           
 13798                           
 13799                           ;pwm.c: 15: CCPR1 = dutyValue;
 13800  10C2  0871               	movf	i1PWM1_LoadDutyValue@dutyValue+1,w
 13801  10C3  0025               	movlb	5	; select bank5
 13802  10C4  0092               	movwf	18	;volatile
 13803  10C5  0870               	movf	i1PWM1_LoadDutyValue@dutyValue,w
 13804  10C6  0091               	movwf	17	;volatile
 13805  10C7  0008               	return
 13806  10C8                     __end_ofi1_PWM1_LoadDutyValue:	
 13807                           
 13808                           	psect	text58
 13809  111B                     __ptext58:	
 13810 ;; *************** function _PWM5_LoadDutyValue *****************
 13811 ;; Defined at:
 13812 ;;		line 61 in file "driver/src/pwm.c"
 13813 ;; Parameters:    Size  Location     Type
 13814 ;;  dutyValue       2   13[BANK0 ] unsigned int 
 13815 ;; Auto vars:     Size  Location     Type
 13816 ;;		None
 13817 ;; Return value:  Size  Location     Type
 13818 ;;                  1    wreg      void 
 13819 ;; Registers used:
 13820 ;;		wreg
 13821 ;; Tracked objects:
 13822 ;;		On entry : 10/0
 13823 ;;		On exit  : 1F/C
 13824 ;;		Unchanged: 0/0
 13825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13826 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13829 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13830 ;;Total ram usage:        4 bytes
 13831 ;; Hardware stack levels used:    1
 13832 ;; Hardware stack levels required when called:    7
 13833 ;; This function calls:
 13834 ;;		Nothing
 13835 ;; This function is called by:
 13836 ;;		_Led_UpdateBright
 13837 ;;		i1_Led_UpdateBright
 13838 ;;		_Led_Ramp
 13839 ;; This function uses a non-reentrant model
 13840 ;;
 13841                           
 13842                           
 13843                           ;psect for function _PWM5_LoadDutyValue
 13844  111B                     _PWM5_LoadDutyValue:	
 13845                           
 13846                           ;Skip over the trampoline to the duplicate function for level 1
 13847  111B  1C7E               	btfss	126,0
 13848  111C  291E               	goto	l6189
 13849  111D  2930               	ljmp	i1l3991
 13850  111E                     _PWM5_LoadDutyValue$intlevel0:	
 13851  111E                     l6189:	
 13852                           ;incstack = 0
 13853                           ; Regs used in _PWM5_LoadDutyValue: [wreg]
 13854                           
 13855                           
 13856                           ;pwm.c: 63: PWM5DC = dutyValue << 6;
 13857  111E  0020               	movlb	0	; select bank0
 13858  111F  082E               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 13859  1120  00B0               	movwf	??_PWM5_LoadDutyValue+1
 13860  1121  082D               	movf	PWM5_LoadDutyValue@dutyValue,w
 13861  1122  00AF               	movwf	??_PWM5_LoadDutyValue
 13862  1123  3006               	movlw	6
 13863  1124                     u5235:	
 13864  1124  35AF               	lslf	??_PWM5_LoadDutyValue,f
 13865  1125  0DB0               	rlf	??_PWM5_LoadDutyValue+1,f
 13866  1126  0B89               	decfsz	9,f
 13867  1127  2924               	goto	u5235
 13868  1128  082F               	movf	??_PWM5_LoadDutyValue,w
 13869  1129  002C               	movlb	12	; select bank12
 13870  112A  0097               	movwf	23	;volatile
 13871  112B  0020               	movlb	0	; select bank0
 13872  112C  0830               	movf	??_PWM5_LoadDutyValue+1,w
 13873  112D  002C               	movlb	12	; select bank12
 13874  112E  0098               	movwf	24	;volatile
 13875  112F  0008               	return
 13876  1130                     __end_of_PWM5_LoadDutyValue:	
 13877  1130                     __ptext90:	
 13878 ;; *************** function i1_PWM5_LoadDutyValue *****************
 13879 ;; Defined at:
 13880 ;;		line 61 in file "driver/src/pwm.c"
 13881 ;; Parameters:    Size  Location     Type
 13882 ;;  dutyValue       2    0[COMMON] unsigned int 
 13883 ;; Auto vars:     Size  Location     Type
 13884 ;;		None
 13885 ;; Return value:  Size  Location     Type
 13886 ;;                  1    wreg      void 
 13887 ;; Registers used:
 13888 ;;		wreg
 13889 ;; Tracked objects:
 13890 ;;		On entry : 0/0
 13891 ;;		On exit  : 1F/C
 13892 ;;		Unchanged: 0/0
 13893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13894 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13896 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13897 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13898 ;;Total ram usage:        4 bytes
 13899 ;; Hardware stack levels used:    1
 13900 ;; This function calls:
 13901 ;;		Nothing
 13902 ;; This function is called by:
 13903 ;; This function uses a non-reentrant model
 13904 ;;
 13905                           
 13906                           
 13907                           ;psect for function i1_PWM5_LoadDutyValue
 13908  1130                     i1_PWM5_LoadDutyValue:	
 13909  1130                     i1l3991:	
 13910                           ;incstack = 0
 13911                           ; Regs used in i1_PWM5_LoadDutyValue: [wreg]
 13912                           
 13913                           
 13914                           ;pwm.c: 63: PWM5DC = dutyValue << 6;
 13915  1130  0871               	movf	i1PWM5_LoadDutyValue@dutyValue+1,w
 13916  1131  00F3               	movwf	??i1_PWM5_LoadDutyValue+1
 13917  1132  0870               	movf	i1PWM5_LoadDutyValue@dutyValue,w
 13918  1133  00F2               	movwf	??i1_PWM5_LoadDutyValue
 13919  1134  3006               	movlw	6
 13920  1135                     u263_25:	
 13921  1135  35F2               	lslf	??i1_PWM5_LoadDutyValue,f
 13922  1136  0DF3               	rlf	??i1_PWM5_LoadDutyValue+1,f
 13923  1137  0B89               	decfsz	9,f
 13924  1138  2935               	goto	u263_25
 13925  1139  0872               	movf	??i1_PWM5_LoadDutyValue,w
 13926  113A  002C               	movlb	12	; select bank12
 13927  113B  0097               	movwf	23	;volatile
 13928  113C  0873               	movf	??i1_PWM5_LoadDutyValue+1,w
 13929  113D  0098               	movwf	24	;volatile
 13930  113E  0008               	return
 13931  113F                     __end_ofi1_PWM5_LoadDutyValue:	
 13932                           
 13933                           	psect	intentry
 13934  0004                     __pintentry:	
 13935 ;; *************** function _ISR *****************
 13936 ;; Defined at:
 13937 ;;		line 75 in file "user/src/main.c"
 13938 ;; Parameters:    Size  Location     Type
 13939 ;;		None
 13940 ;; Auto vars:     Size  Location     Type
 13941 ;;		None
 13942 ;; Return value:  Size  Location     Type
 13943 ;;                  1    wreg      void 
 13944 ;; Registers used:
 13945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13946 ;; Tracked objects:
 13947 ;;		On entry : 0/0
 13948 ;;		On exit  : 0/0
 13949 ;;		Unchanged: 0/0
 13950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13955 ;;Total ram usage:        0 bytes
 13956 ;; Hardware stack levels used:    1
 13957 ;; Hardware stack levels required when called:    6
 13958 ;; This function calls:
 13959 ;;		_EUSART_Transmit_ISR
 13960 ;;		_TMR0_ISR
 13961 ;;		_TMR1_GATE_ISR
 13962 ;;		_TMR2_ISR
 13963 ;;		_TMR4_ISR
 13964 ;; This function is called by:
 13965 ;;		Interrupt level 1
 13966 ;; This function uses a non-reentrant model
 13967 ;;
 13968                           
 13969  0004                     _ISR:	
 13970                           
 13971                           ;incstack = 0
 13972  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13973                           
 13974                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13975  0005  3180               	pagesel	$
 13976                           
 13977                           ;main.c: 76: if (PIR1bits.TMR1GIF) {
 13978  0006  0020               	movlb	0	; select bank0
 13979  0007  1F91               	btfss	17,7	;volatile
 13980  0008  280D               	goto	i1l519
 13981                           
 13982                           ;main.c: 77: TMR1_GATE_ISR();
 13983  0009  3190  207A  3180   	fcall	_TMR1_GATE_ISR
 13984                           
 13985                           ;main.c: 78: } else if (PIE1bits.TMR2IE && PIR1bits.TMR2IF) {
 13986  000C  282C               	goto	i1l528
 13987  000D                     i1l519:	
 13988  000D  0021               	movlb	1	; select bank1
 13989  000E  1C91               	btfss	17,1	;volatile
 13990  000F  2817               	goto	i1l521
 13991  0010  0020               	movlb	0	; select bank0
 13992  0011  1C91               	btfss	17,1	;volatile
 13993  0012  2817               	goto	i1l521
 13994                           
 13995                           ;main.c: 79: TMR2_ISR();
 13996  0013  3190  2086  3180   	fcall	_TMR2_ISR
 13997                           
 13998                           ;main.c: 80: } else if (PIR0bits.TMR0IF) {
 13999  0016  282C               	goto	i1l528
 14000  0017                     i1l521:	
 14001  0017  0020               	movlb	0	; select bank0
 14002  0018  1E90               	btfss	16,5	;volatile
 14003  0019  281E               	goto	i1l523
 14004                           
 14005                           ;main.c: 81: TMR0_ISR();
 14006  001A  3190  206E  3180   	fcall	_TMR0_ISR
 14007                           
 14008                           ;main.c: 82: } else if (PIR2bits.TMR4IF) {
 14009  001D  282C               	goto	i1l528
 14010  001E                     i1l523:	
 14011  001E  1C92               	btfss	18,1	;volatile
 14012  001F  2824               	goto	i1l525
 14013                           
 14014                           ;main.c: 83: TMR4_ISR();
 14015  0020  3190  2092  3180   	fcall	_TMR4_ISR
 14016                           
 14017                           ;main.c: 84: } else if (PIE1bits.TXIE && PIR1bits.TXIF) {
 14018  0023  282C               	goto	i1l528
 14019  0024                     i1l525:	
 14020  0024  0021               	movlb	1	; select bank1
 14021  0025  1E11               	btfss	17,4	;volatile
 14022  0026  282C               	goto	i1l528
 14023  0027  0020               	movlb	0	; select bank0
 14024  0028  1E11               	btfss	17,4	;volatile
 14025  0029  282C               	goto	i1l528
 14026                           
 14027                           ;main.c: 85: EUSART_Transmit_ISR();
 14028  002A  3191  2102         	fcall	_EUSART_Transmit_ISR
 14029  002C                     i1l528:	
 14030  002C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14031  002D  0009               	retfie
 14032  002E                     __end_of_ISR:	
 14033                           
 14034                           	psect	text70
 14035  1092                     __ptext70:	
 14036 ;; *************** function _TMR4_ISR *****************
 14037 ;; Defined at:
 14038 ;;		line 27 in file "driver/src/tmr4.c"
 14039 ;; Parameters:    Size  Location     Type
 14040 ;;		None
 14041 ;; Auto vars:     Size  Location     Type
 14042 ;;		None
 14043 ;; Return value:  Size  Location     Type
 14044 ;;                  1    wreg      void 
 14045 ;; Registers used:
 14046 ;;		wreg, status,2, status,0, pclath, cstack
 14047 ;; Tracked objects:
 14048 ;;		On entry : 1F/0
 14049 ;;		On exit  : 0/0
 14050 ;;		Unchanged: 0/0
 14051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14056 ;;Total ram usage:        0 bytes
 14057 ;; Hardware stack levels used:    1
 14058 ;; Hardware stack levels required when called:    2
 14059 ;; This function calls:
 14060 ;;		Absolute function
 14061 ;;		_Led_Notice
 14062 ;; This function is called by:
 14063 ;;		_ISR
 14064 ;; This function uses a non-reentrant model
 14065 ;;
 14066                           
 14067                           
 14068                           ;psect for function _TMR4_ISR
 14069  1092                     _TMR4_ISR:	
 14070                           
 14071                           ;tmr4.c: 29: PIR2bits.TMR4IF = 0;
 14072                           
 14073                           ;incstack = 0
 14074                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 14075  1092  1092               	bcf	18,1	;volatile
 14076                           
 14077                           ;tmr4.c: 31: if ( tmr4_isr_handler )
 14078  1093  0021               	movlb	1	; select bank1
 14079  1094  0864               	movf	_tmr4_isr_handler^(0+128),w
 14080  1095  0465               	iorwf	(_tmr4_isr_handler+1)^(0+128),w
 14081  1096  1903               	btfsc	3,2
 14082  1097  0008               	return
 14083                           
 14084                           ;tmr4.c: 32: {
 14085                           ;tmr4.c: 33: tmr4_isr_handler ( );
 14086  1098  0865               	movf	(_tmr4_isr_handler+1)^(0+128),w
 14087  1099  008A               	movwf	10
 14088  109A  0864               	movf	_tmr4_isr_handler^(0+128),w
 14089  109B  000A               	callw
 14090  109C  3190               	pagesel	$
 14091  109D  0008               	return
 14092  109E                     __end_of_TMR4_ISR:	
 14093                           
 14094                           	psect	text71
 14095  07B2                     __ptext71:	
 14096 ;; *************** function _Led_Notice *****************
 14097 ;; Defined at:
 14098 ;;		line 424 in file "user/src/led.c"
 14099 ;; Parameters:    Size  Location     Type
 14100 ;;		None
 14101 ;; Auto vars:     Size  Location     Type
 14102 ;;		None
 14103 ;; Return value:  Size  Location     Type
 14104 ;;                  1    wreg      void 
 14105 ;; Registers used:
 14106 ;;		wreg, status,2, status,0, pclath, cstack
 14107 ;; Tracked objects:
 14108 ;;		On entry : 1F/1
 14109 ;;		On exit  : 1E/0
 14110 ;;		Unchanged: 0/0
 14111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14114 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;Total ram usage:        1 bytes
 14117 ;; Hardware stack levels used:    1
 14118 ;; Hardware stack levels required when called:    1
 14119 ;; This function calls:
 14120 ;;		_Led_TurnOffDirect
 14121 ;;		_Led_TurnOnDirect
 14122 ;;		_TMR4_StopTimer
 14123 ;; This function is called by:
 14124 ;;		_Interrupt_Initialize
 14125 ;;		_TMR4_ISR
 14126 ;; This function uses a non-reentrant model
 14127 ;;
 14128                           
 14129                           
 14130                           ;psect for function _Led_Notice
 14131  07B2                     _Led_Notice:	
 14132                           
 14133                           ;led.c: 425: static uint8_t cnt = 0;
 14134                           ;led.c: 426: if (gLedRunPara.mNoticeCount) {
 14135                           
 14136                           ;incstack = 0
 14137                           ; Regs used in _Led_Notice: [wreg+status,2+status,0+pclath+cstack]
 14138  07B2  0C5E               	rrf	(_gLedRunPara^(0+128)+20),w	;volatile
 14139  07B3  0C89               	rrf	9,f
 14140  07B4  393F               	andlw	63
 14141  07B5  1903               	skipnz
 14142  07B6  2FD5               	goto	i1l5153
 14143                           
 14144                           ;led.c: 427: cnt++;
 14145  07B7  0020               	movlb	0	; select bank0
 14146  07B8  0AD6               	incf	Led_Notice@cnt,f
 14147                           
 14148                           ;led.c: 428: if ((cnt & 0x07) == 0) {
 14149  07B9  0856               	movf	Led_Notice@cnt,w
 14150  07BA  3907               	andlw	7
 14151  07BB  1D03               	btfss	3,2
 14152  07BC  0008               	return
 14153                           
 14154                           ;led.c: 429: if (gLedRunPara.mNoticeStatus) {
 14155  07BD  0021               	movlb	1	; select bank1
 14156  07BE  1CDE               	btfss	(_gLedRunPara^(0+128)+20),1	;volatile
 14157  07BF  2FD1               	goto	i1l5149
 14158                           
 14159                           ;led.c: 430: Led_TurnOnDirect();
 14160  07C0  27E2               	fcall	_Led_TurnOnDirect
 14161                           
 14162                           ;led.c: 431: gLedRunPara.mNoticeCount--;
 14163  07C1  0021               	movlb	1	; select bank1
 14164  07C2  0C5E               	rrf	(_gLedRunPara^(0+128)+20),w	;volatile
 14165  07C3  00F0               	movwf	??_Led_Notice
 14166  07C4  0C70               	rrf	??_Led_Notice,w
 14167  07C5  393F               	andlw	63
 14168  07C6  00F0               	movwf	??_Led_Notice
 14169  07C7  03F0               	decf	??_Led_Notice,f
 14170  07C8  0DF0               	rlf	??_Led_Notice,f
 14171  07C9  0DF0               	rlf	??_Led_Notice,f
 14172  07CA  085E               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
 14173  07CB  0670               	xorwf	??_Led_Notice,w
 14174  07CC  3903               	andlw	-253
 14175  07CD  0670               	xorwf	??_Led_Notice,w
 14176  07CE  00DE               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
 14177                           
 14178                           ;led.c: 432: gLedRunPara.mNoticeStatus = 0;
 14179  07CF  10DE               	bcf	(_gLedRunPara^(0+128)+20),1	;volatile
 14180                           
 14181                           ;led.c: 433: } else {
 14182  07D0  0008               	return
 14183  07D1                     i1l5149:	
 14184                           
 14185                           ;led.c: 434: Led_TurnOffDirect();
 14186  07D1  27D9               	fcall	_Led_TurnOffDirect
 14187                           
 14188                           ;led.c: 435: gLedRunPara.mNoticeStatus = 1;
 14189  07D2  0021               	movlb	1	; select bank1
 14190  07D3  14DE               	bsf	(_gLedRunPara^(0+128)+20),1	;volatile
 14191  07D4  0008               	return
 14192  07D5                     i1l5153:	
 14193                           
 14194                           ;led.c: 439: TMR4_StopTimer();
 14195  07D5  27EB               	fcall	_TMR4_StopTimer
 14196                           
 14197                           ;led.c: 440: cnt = 0;
 14198  07D6  0020               	movlb	0	; select bank0
 14199  07D7  01D6               	clrf	Led_Notice@cnt
 14200  07D8  0008               	return
 14201  07D9                     __end_of_Led_Notice:	
 14202  07D9                     __ptext74:	
 14203 ;; *************** function _Led_TurnOffDirect *****************
 14204 ;; Defined at:
 14205 ;;		line 197 in file "user/src/led.c"
 14206 ;; Parameters:    Size  Location     Type
 14207 ;;		None
 14208 ;; Auto vars:     Size  Location     Type
 14209 ;;		None
 14210 ;; Return value:  Size  Location     Type
 14211 ;;                  1    wreg      void 
 14212 ;; Registers used:
 14213 ;;		None
 14214 ;; Tracked objects:
 14215 ;;		On entry : 1F/1
 14216 ;;		On exit  : 1F/C
 14217 ;;		Unchanged: 0/0
 14218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14223 ;;Total ram usage:        0 bytes
 14224 ;; Hardware stack levels used:    1
 14225 ;; This function calls:
 14226 ;;		Nothing
 14227 ;; This function is called by:
 14228 ;;		_Led_Notice
 14229 ;; This function uses a non-reentrant model
 14230 ;;
 14231                           
 14232                           
 14233                           ;psect for function _Led_TurnOffDirect
 14234  07D9                     _Led_TurnOffDirect:	
 14235                           
 14236                           ;led.c: 198: CCP1CON &= 0x7F;
 14237                           
 14238                           ;incstack = 0
 14239                           ; Regs used in _Led_TurnOffDirect: []
 14240  07D9  0025               	movlb	5	; select bank5
 14241  07DA  1393               	bcf	19,7	;volatile
 14242                           
 14243                           ;led.c: 199: CCP2CON &= 0x7F;
 14244  07DB  1397               	bcf	23,7	;volatile
 14245                           
 14246                           ;led.c: 200: CCP3CON &= 0x7F;
 14247  07DC  0026               	movlb	6	; select bank6
 14248  07DD  1393               	bcf	19,7	;volatile
 14249                           
 14250                           ;led.c: 201: CCP4CON &= 0x7F;
 14251  07DE  1397               	bcf	23,7	;volatile
 14252                           
 14253                           ;led.c: 202: PWM5CON &= 0x7F;
 14254  07DF  002C               	movlb	12	; select bank12
 14255  07E0  1399               	bcf	25,7	;volatile
 14256  07E1  0008               	return
 14257  07E2                     __end_of_Led_TurnOffDirect:	
 14258  07E2                     __ptext73:	
 14259 ;; *************** function _Led_TurnOnDirect *****************
 14260 ;; Defined at:
 14261 ;;		line 189 in file "user/src/led.c"
 14262 ;; Parameters:    Size  Location     Type
 14263 ;;		None
 14264 ;; Auto vars:     Size  Location     Type
 14265 ;;		None
 14266 ;; Return value:  Size  Location     Type
 14267 ;;                  1    wreg      void 
 14268 ;; Registers used:
 14269 ;;		None
 14270 ;; Tracked objects:
 14271 ;;		On entry : 1F/1
 14272 ;;		On exit  : 1F/C
 14273 ;;		Unchanged: 0/0
 14274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14279 ;;Total ram usage:        0 bytes
 14280 ;; Hardware stack levels used:    1
 14281 ;; This function calls:
 14282 ;;		Nothing
 14283 ;; This function is called by:
 14284 ;;		_Led_Notice
 14285 ;; This function uses a non-reentrant model
 14286 ;;
 14287                           
 14288                           
 14289                           ;psect for function _Led_TurnOnDirect
 14290  07E2                     _Led_TurnOnDirect:	
 14291                           
 14292                           ;led.c: 190: CCP1CON |= 0x80;
 14293                           
 14294                           ;incstack = 0
 14295                           ; Regs used in _Led_TurnOnDirect: []
 14296  07E2  0025               	movlb	5	; select bank5
 14297  07E3  1793               	bsf	19,7	;volatile
 14298                           
 14299                           ;led.c: 191: CCP2CON |= 0x80;
 14300  07E4  1797               	bsf	23,7	;volatile
 14301                           
 14302                           ;led.c: 192: CCP3CON |= 0x80;
 14303  07E5  0026               	movlb	6	; select bank6
 14304  07E6  1793               	bsf	19,7	;volatile
 14305                           
 14306                           ;led.c: 193: CCP4CON |= 0x80;
 14307  07E7  1797               	bsf	23,7	;volatile
 14308                           
 14309                           ;led.c: 194: PWM5CON |= 0x80;
 14310  07E8  002C               	movlb	12	; select bank12
 14311  07E9  1799               	bsf	25,7	;volatile
 14312  07EA  0008               	return
 14313  07EB                     __end_of_Led_TurnOnDirect:	
 14314  07EB                     __ptext72:	
 14315 ;; *************** function _TMR4_StopTimer *****************
 14316 ;; Defined at:
 14317 ;;		line 22 in file "driver/src/tmr4.c"
 14318 ;; Parameters:    Size  Location     Type
 14319 ;;		None
 14320 ;; Auto vars:     Size  Location     Type
 14321 ;;		None
 14322 ;; Return value:  Size  Location     Type
 14323 ;;                  1    wreg      void 
 14324 ;; Registers used:
 14325 ;;		None
 14326 ;; Tracked objects:
 14327 ;;		On entry : 1F/1
 14328 ;;		On exit  : 1F/8
 14329 ;;		Unchanged: 0/0
 14330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14335 ;;Total ram usage:        0 bytes
 14336 ;; Hardware stack levels used:    1
 14337 ;; This function calls:
 14338 ;;		Nothing
 14339 ;; This function is called by:
 14340 ;;		_Led_Notice
 14341 ;; This function uses a non-reentrant model
 14342 ;;
 14343                           
 14344                           
 14345                           ;psect for function _TMR4_StopTimer
 14346  07EB                     _TMR4_StopTimer:	
 14347                           
 14348                           ;tmr4.c: 24: T4CONbits.TMR4ON = 0;
 14349                           
 14350                           ;incstack = 0
 14351                           ; Regs used in _TMR4_StopTimer: []
 14352  07EB  0028               	movlb	8	; select bank8
 14353  07EC  1117               	bcf	23,2	;volatile
 14354  07ED  0008               	return
 14355  07EE                     __end_of_TMR4_StopTimer:	
 14356                           
 14357                           	psect	text75
 14358  1086                     __ptext75:	
 14359 ;; *************** function _TMR2_ISR *****************
 14360 ;; Defined at:
 14361 ;;		line 26 in file "driver/src/tmr2.c"
 14362 ;; Parameters:    Size  Location     Type
 14363 ;;		None
 14364 ;; Auto vars:     Size  Location     Type
 14365 ;;		None
 14366 ;; Return value:  Size  Location     Type
 14367 ;;                  1    wreg      void 
 14368 ;; Registers used:
 14369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14370 ;; Tracked objects:
 14371 ;;		On entry : 1F/0
 14372 ;;		On exit  : 0/0
 14373 ;;		Unchanged: 0/0
 14374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14379 ;;Total ram usage:        0 bytes
 14380 ;; Hardware stack levels used:    1
 14381 ;; Hardware stack levels required when called:    5
 14382 ;; This function calls:
 14383 ;;		Absolute function
 14384 ;;		_Led_Run
 14385 ;; This function is called by:
 14386 ;;		_ISR
 14387 ;; This function uses a non-reentrant model
 14388 ;;
 14389                           
 14390                           
 14391                           ;psect for function _TMR2_ISR
 14392  1086                     _TMR2_ISR:	
 14393                           
 14394                           ;tmr2.c: 28: PIR1bits.TMR2IF = 0;
 14395                           
 14396                           ;incstack = 0
 14397                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14398  1086  1091               	bcf	17,1	;volatile
 14399                           
 14400                           ;tmr2.c: 29: if ( tmr2_isr_handler )
 14401  1087  0021               	movlb	1	; select bank1
 14402  1088  0866               	movf	_tmr2_isr_handler^(0+128),w
 14403  1089  0467               	iorwf	(_tmr2_isr_handler+1)^(0+128),w
 14404  108A  1903               	btfsc	3,2
 14405  108B  0008               	return
 14406                           
 14407                           ;tmr2.c: 30: {
 14408                           ;tmr2.c: 31: tmr2_isr_handler ( );
 14409  108C  0867               	movf	(_tmr2_isr_handler+1)^(0+128),w
 14410  108D  008A               	movwf	10
 14411  108E  0866               	movf	_tmr2_isr_handler^(0+128),w
 14412  108F  000A               	callw
 14413  1090  3190               	pagesel	$
 14414  1091  0008               	return
 14415  1092                     __end_of_TMR2_ISR:	
 14416                           
 14417                           	psect	text76
 14418  0030                     __ptext76:	
 14419 ;; *************** function _Led_Run *****************
 14420 ;; Defined at:
 14421 ;;		line 564 in file "user/src/led.c"
 14422 ;; Parameters:    Size  Location     Type
 14423 ;;		None
 14424 ;; Auto vars:     Size  Location     Type
 14425 ;;		None
 14426 ;; Return value:  Size  Location     Type
 14427 ;;                  1    wreg      void 
 14428 ;; Registers used:
 14429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14430 ;; Tracked objects:
 14431 ;;		On entry : 1F/1
 14432 ;;		On exit  : 10/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14439 ;;Total ram usage:        1 bytes
 14440 ;; Hardware stack levels used:    1
 14441 ;; Hardware stack levels required when called:    4
 14442 ;; This function calls:
 14443 ;;		_IR_ScanLongPress
 14444 ;;		_Led_Ramp
 14445 ;;		_Led_RunMusic
 14446 ;; This function is called by:
 14447 ;;		_Interrupt_Initialize
 14448 ;;		_TMR2_ISR
 14449 ;; This function uses a non-reentrant model
 14450 ;;
 14451                           
 14452                           
 14453                           ;psect for function _Led_Run
 14454  0030                     _Led_Run:	
 14455                           
 14456                           ;led.c: 565: static uint8_t cnt = 0;
 14457                           ;led.c: 566: cnt++;
 14458                           
 14459                           ;incstack = 0
 14460                           ; Regs used in _Led_Run: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14461  0030  0020               	movlb	0	; select bank0
 14462  0031  0AD5               	incf	Led_Run@cnt,f
 14463                           
 14464                           ;led.c: 567: if ((cnt & 0x03) == 0x00) {
 14465  0032  0855               	movf	Led_Run@cnt,w
 14466  0033  3903               	andlw	3
 14467  0034  1D03               	btfss	3,2
 14468  0035  2838               	goto	i1l6725
 14469                           
 14470                           ;led.c: 568: IR_ScanLongPress();
 14471  0036  2292  3180         	fcall	_IR_ScanLongPress
 14472  0038                     i1l6725:	
 14473                           
 14474                           ;led.c: 569: }
 14475                           ;led.c: 570: if ((ir_state.mSet == 4) || (ir_state.mSet == 5)) {
 14476  0038  0020               	movlb	0	; select bank0
 14477  0039  27A8  3180         	fcall	PL158	;call to abstracted procedure
 14478  003B  1903               	skipnz
 14479  003C  2841               	goto	i1l6729
 14480  003D  27A3  3180         	fcall	PL156	;call to abstracted procedure
 14481  003F  1D03               	skipz
 14482  0040  2842               	goto	i1l6731
 14483  0041                     i1l6729:	
 14484                           
 14485                           ;led.c: 571: Led_Ramp();
 14486  0041  2869               	ljmp	i1l6541
 14487  0042                     i1l6731:	
 14488                           ;led.c: 572: } else if (!gLedPara.mAuto) {
 14489                           
 14490  0042  279E  3180         	fcall	PL98	;call to abstracted procedure
 14491  0044  1801               	btfsc	1,0
 14492  0045  0008               	return
 14493                           
 14494                           ;led.c: 573: if (gLedPara.mOn && gLedPara.mMsc) {
 14495  0046  1C81               	btfss	1,1
 14496  0047  2841               	goto	i1l6729
 14497  0048  307B               	movlw	123
 14498  0049  0086               	movwf	6
 14499  004A  3023               	movlw	35
 14500  004B  2541  3180         	fcall	PL106	;call to abstracted procedure
 14501  004D  1903               	skipnz
 14502  004E  2841               	goto	i1l6729
 14503                           
 14504                           ;led.c: 574: if(gLedPara.mMsc == 1 || gLedPara.mMsc == 2 || gLedPara.mMsc == 3 || gLedPa
      +                          ra.mMsc == 4) {
 14505  004F  307B               	movlw	123
 14506  0050  0086               	movwf	6
 14507  0051  3023               	movlw	35
 14508  0052  2541  3180         	fcall	PL106	;call to abstracted procedure
 14509  0054  3A01               	xorlw	1
 14510  0055  1903               	skipnz
 14511  0056  2866               	goto	i1l6745
 14512  0057  2539  3180         	fcall	PL96	;call to abstracted procedure
 14513  0059  3A02               	xorlw	2
 14514  005A  1903               	skipnz
 14515  005B  2866               	goto	i1l6745
 14516  005C  2539  3180         	fcall	PL96	;call to abstracted procedure
 14517  005E  3A03               	xorlw	3
 14518  005F  1903               	skipnz
 14519  0060  2866               	goto	i1l6745
 14520  0061  2539  3180         	fcall	PL96	;call to abstracted procedure
 14521  0063  3A04               	xorlw	4
 14522  0064  1D03               	skipz
 14523  0065  2868               	goto	i1l827
 14524  0066                     i1l6745:	
 14525                           
 14526                           ;led.c: 575: Led_Ramp();
 14527  0066  2069  3180         	fcall	_Led_Ramp
 14528  0068                     i1l827:	
 14529                           
 14530                           ;led.c: 576: }
 14531                           ;led.c: 577: Led_RunMusic();
 14532  0068  289F               	ljmp	i1l6569
 14533  0069                     __end_of_Led_Run:	
 14534                           ;led.c: 578: } else {
 14535                           
 14536  0069                     __ptext85:	
 14537 ;; *************** function _Led_Ramp *****************
 14538 ;; Defined at:
 14539 ;;		line 297 in file "user/src/led.c"
 14540 ;; Parameters:    Size  Location     Type
 14541 ;;		None
 14542 ;; Auto vars:     Size  Location     Type
 14543 ;;  i               1   10[COMMON] unsigned char 
 14544 ;; Return value:  Size  Location     Type
 14545 ;;                  1    wreg      void 
 14546 ;; Registers used:
 14547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14548 ;; Tracked objects:
 14549 ;;		On entry : 1E/0
 14550 ;;		On exit  : 14/4
 14551 ;;		Unchanged: 0/0
 14552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14554 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14555 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14556 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14557 ;;Total ram usage:        7 bytes
 14558 ;; Hardware stack levels used:    1
 14559 ;; Hardware stack levels required when called:    1
 14560 ;; This function calls:
 14561 ;;		i1_PWM1_LoadDutyValue
 14562 ;;		i1_PWM2_LoadDutyValue
 14563 ;;		i1_PWM3_LoadDutyValue
 14564 ;;		i1_PWM4_LoadDutyValue
 14565 ;;		i1_PWM5_LoadDutyValue
 14566 ;; This function is called by:
 14567 ;;		_Led_Run
 14568 ;; This function uses a non-reentrant model
 14569 ;;
 14570                           
 14571                           
 14572                           ;psect for function _Led_Ramp
 14573  0069                     _Led_Ramp:	
 14574  0069                     i1l6541:	
 14575                           ;incstack = 0
 14576                           ; Regs used in _Led_Ramp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14577                           
 14578                           
 14579                           ;led.c: 298: for (uint8_t i = 0; i < 5; i++) {
 14580  0069  01FA               	clrf	Led_Ramp@i
 14581  006A                     i1l6547:	
 14582                           
 14583                           ;led.c: 299: if (gLedRunPara.mCurrentBright[i] + 1 < gLedRunPara.mTargetBright[i]) {
 14584  006A  357A               	lslf	Led_Ramp@i,w
 14585  006B  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14586  006C  2580  3180         	fcall	PL138	;call to abstracted procedure
 14587  006E  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14588  006F  24E0  3180         	fcall	PL52	;call to abstracted procedure
 14589  0071  1803               	skipnc
 14590  0072  2879               	goto	i1l6551
 14591                           
 14592                           ;led.c: 300: gLedRunPara.mCurrentBright[i] += 1;
 14593  0073  357A               	lslf	Led_Ramp@i,w
 14594  0074  24F9  3180         	fcall	PL58	;call to abstracted procedure
 14595  0076  1803               	skipnc
 14596  0077  0A81               	incf	1,f
 14597                           
 14598                           ;led.c: 301: } else if (gLedRunPara.mCurrentBright[i] > gLedRunPara.mTargetBright[i] + 1
      +                          ) {
 14599  0078  288F               	goto	i1l6557
 14600  0079                     i1l6551:	
 14601  0079  357A               	lslf	Led_Ramp@i,w
 14602  007A  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14603  007B  2580  3180         	fcall	PL138	;call to abstracted procedure
 14604  007D  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14605  007E  24E0  3180         	fcall	PL52	;call to abstracted procedure
 14606  0080  1803               	skipnc
 14607  0081  2886               	goto	i1l6555
 14608                           
 14609                           ;led.c: 302: gLedRunPara.mCurrentBright[i] -= 1;
 14610  0082  357A               	lslf	Led_Ramp@i,w
 14611  0083  24C8  3180         	fcall	PL22	;call to abstracted procedure
 14612                           
 14613                           ;led.c: 303: } else {
 14614  0085  288F               	goto	i1l6557
 14615  0086                     i1l6555:	
 14616                           
 14617                           ;led.c: 304: gLedRunPara.mCurrentBright[i] = gLedRunPara.mTargetBright[i];
 14618  0086  357A               	lslf	Led_Ramp@i,w
 14619  0087  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14620  0088  0086               	movwf	6
 14621  0089  0187               	clrf	7
 14622  008A  357A               	lslf	Led_Ramp@i,w
 14623  008B  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14624  008C  3196  26AB  3180   	fcall	PL28	;call to abstracted procedure
 14625  008F                     i1l6557:	
 14626                           
 14627                           ;led.c: 305: }
 14628                           ;led.c: 306: loadDuty[i](gLedRunPara.mCurrentBright[i]);
 14629  008F  357A               	lslf	Led_Ramp@i,w
 14630  0090  2578               	fcall	PL134	;call to abstracted procedure
 14631  0091  357A               	lslf	Led_Ramp@i,w
 14632  0092  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
 14633  0093  0086               	movwf	6
 14634  0094  3F41               	moviw [1]fsr1
 14635  0095  008A               	movwf	10
 14636  0096  3F40               	moviw [0]fsr1
 14637  0097  000A               	callw
 14638  0098  3005               	movlw	5
 14639  0099  3180               	pagesel	$
 14640  009A  0AFA               	incf	Led_Ramp@i,f
 14641  009B  027A               	subwf	Led_Ramp@i,w
 14642  009C  1803               	btfsc	3,0
 14643  009D  0008               	return
 14644  009E  286A               	goto	i1l6547
 14645  009F                     __end_of_Led_Ramp:	
 14646  009F                     __ptext77:	
 14647 ;; *************** function _Led_RunMusic *****************
 14648 ;; Defined at:
 14649 ;;		line 532 in file "user/src/led.c"
 14650 ;; Parameters:    Size  Location     Type
 14651 ;;		None
 14652 ;; Auto vars:     Size  Location     Type
 14653 ;;		None
 14654 ;; Return value:  Size  Location     Type
 14655 ;;                  1    wreg      void 
 14656 ;; Registers used:
 14657 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14658 ;; Tracked objects:
 14659 ;;		On entry : 10/0
 14660 ;;		On exit  : 10/0
 14661 ;;		Unchanged: 0/0
 14662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14665 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14667 ;;Total ram usage:        1 bytes
 14668 ;; Hardware stack levels used:    1
 14669 ;; Hardware stack levels required when called:    3
 14670 ;; This function calls:
 14671 ;;		_Audio_SelectSound
 14672 ;;		_Led_DynamicCloud
 14673 ;;		_Led_DynamicMoon
 14674 ;;		_Led_DynamicStorm
 14675 ;;		_Led_DynamicWave
 14676 ;; This function is called by:
 14677 ;;		_Led_Run
 14678 ;; This function uses a non-reentrant model
 14679 ;;
 14680                           
 14681                           
 14682                           ;psect for function _Led_RunMusic
 14683  009F                     _Led_RunMusic:	
 14684  009F                     i1l6569:	
 14685                           ;incstack = 0
 14686                           ; Regs used in _Led_RunMusic: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14687                           
 14688                           
 14689                           ;led.c: 533: if (gLedRunPara.music_state < 32) {
 14690  009F  3020               	movlw	32
 14691  00A0  0021               	movlb	1	; select bank1
 14692  00A1  0263               	subwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14693  00A2  1C03               	btfss	3,0
 14694  00A3  28B9               	goto	i1l6571
 14695                           
 14696                           ;led.c: 535: } else if (gLedRunPara.music_state == 32) {
 14697  00A4  3020               	movlw	32
 14698  00A5  0663               	xorwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14699  00A6  1D03               	btfss	3,2
 14700  00A7  28B2               	goto	i1l6579
 14701                           
 14702                           ;led.c: 536: Audio_SelectSound(gLedPara.mMsc + 0x30);
 14703  00A8  307B               	movlw	123
 14704  00A9  0086               	movwf	6
 14705  00AA  3023               	movlw	35
 14706  00AB  0087               	movwf	7
 14707  00AC  2588  3180         	fcall	PL146	;call to abstracted procedure
 14708  00AE  3E30               	addlw	48
 14709  00AF  20E8  3180         	fcall	_Audio_SelectSound
 14710  00B1  28B9               	goto	i1l6571
 14711  00B2                     i1l6579:	
 14712  00B2  3040               	movlw	64
 14713  00B3  0263               	subwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14714  00B4  1C03               	btfss	3,0
 14715  00B5  28B9               	goto	i1l6571
 14716  00B6  3040               	movlw	64
 14717  00B7  0663               	xorwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14718  00B8  1903               	btfsc	3,2
 14719  00B9                     i1l6571:	
 14720                           
 14721                           ;led.c: 534: gLedRunPara.music_state++;
 14722  00B9  0AE3               	incf	(_gLedRunPara^(0+128)+25),f	;volatile
 14723                           
 14724                           ;led.c: 543: }
 14725                           ;led.c: 544: if (gLedPara.mDyn) {
 14726  00BA  307B               	movlw	123
 14727  00BB  0086               	movwf	6
 14728  00BC  3023               	movlw	35
 14729  00BD  0087               	movwf	7
 14730  00BE  1F81               	btfss	1,7
 14731  00BF  0008               	return
 14732                           
 14733                           ;led.c: 557: break;
 14734  00C0  2588  3180         	fcall	PL146	;call to abstracted procedure
 14735                           
 14736                           ; Switch size 1, requested type "space"
 14737                           ; Number of cases is 4, Range of values is 5 to 8
 14738                           ; switch strategies available:
 14739                           ; Name         Instructions Cycles
 14740                           ; simple_byte           13     7 (average)
 14741                           ; direct_byte           17     9 (fixed)
 14742                           ; jumptable            263     9 (fixed)
 14743                           ;	Chosen strategy is simple_byte
 14744  00C2  3A05               	xorlw	5	; case 5
 14745  00C3  1903               	skipnz
 14746  00C4  28CF               	goto	i1l6591
 14747  00C5  3A03               	xorlw	3	; case 6
 14748  00C6  1903               	skipnz
 14749  00C7  28D5               	goto	i1l6593
 14750  00C8  3A01               	xorlw	1	; case 7
 14751  00C9  1903               	skipnz
 14752  00CA  28DB               	goto	i1l6595
 14753  00CB  3A0F               	xorlw	15	; case 8
 14754  00CC  1903               	skipnz
 14755  00CD  28E1               	goto	i1l6597
 14756  00CE  28E7               	goto	i1l815
 14757  00CF                     i1l6591:	
 14758                           
 14759                           ;led.c: 547: Led_DynamicWave(audio_value);
 14760  00CF  0020               	movlb	0	; select bank0
 14761  00D0  0850               	movf	_audio_value+1,w	;volatile
 14762  00D1  00F7               	movwf	Led_DynamicWave@ptp+1
 14763  00D2  084F               	movf	_audio_value,w	;volatile
 14764  00D3  00F6               	movwf	Led_DynamicWave@ptp
 14765  00D4  296F               	ljmp	i1l6363
 14766  00D5                     i1l6593:	
 14767                           ;led.c: 548: break;
 14768                           
 14769                           
 14770                           ;led.c: 550: Led_DynamicMoon(audio_value);
 14771  00D5  0020               	movlb	0	; select bank0
 14772  00D6  0850               	movf	_audio_value+1,w	;volatile
 14773  00D7  00F7               	movwf	Led_DynamicMoon@ptp+1
 14774  00D8  084F               	movf	_audio_value,w	;volatile
 14775  00D9  00F6               	movwf	Led_DynamicMoon@ptp
 14776  00DA  291D               	ljmp	i1l6393
 14777  00DB                     i1l6595:	
 14778                           ;led.c: 551: break;
 14779                           
 14780                           
 14781                           ;led.c: 553: Led_DynamicCloud(audio_value);
 14782  00DB  0020               	movlb	0	; select bank0
 14783  00DC  0850               	movf	_audio_value+1,w	;volatile
 14784  00DD  00F7               	movwf	Led_DynamicCloud@ptp+1
 14785  00DE  084F               	movf	_audio_value,w	;volatile
 14786  00DF  00F6               	movwf	Led_DynamicCloud@ptp
 14787  00E0  2A22               	ljmp	i1l6421
 14788  00E1                     i1l6597:	
 14789                           ;led.c: 554: break;
 14790                           
 14791                           
 14792                           ;led.c: 556: Led_DynamicStorm(audio_value);
 14793  00E1  0020               	movlb	0	; select bank0
 14794  00E2  0850               	movf	_audio_value+1,w	;volatile
 14795  00E3  00F7               	movwf	Led_DynamicStorm@ptp+1
 14796  00E4  084F               	movf	_audio_value,w	;volatile
 14797  00E5  00F6               	movwf	Led_DynamicStorm@ptp
 14798  00E6  29C1               	ljmp	i1l6461
 14799  00E7                     i1l815:	
 14800  00E7  0008               	return
 14801  00E8                     __end_of_Led_RunMusic:	
 14802  00E8                     __ptext83:	
 14803 ;; *************** function _Audio_SelectSound *****************
 14804 ;; Defined at:
 14805 ;;		line 25 in file "user/src/audio.c"
 14806 ;; Parameters:    Size  Location     Type
 14807 ;;  index           1    wreg     unsigned char 
 14808 ;; Auto vars:     Size  Location     Type
 14809 ;;  index           1    1[COMMON] unsigned char 
 14810 ;;  checksum        1    2[COMMON] unsigned char 
 14811 ;; Return value:  Size  Location     Type
 14812 ;;                  1    wreg      void 
 14813 ;; Registers used:
 14814 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14815 ;; Tracked objects:
 14816 ;;		On entry : 1F/1
 14817 ;;		On exit  : 1F/1
 14818 ;;		Unchanged: 0/0
 14819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14821 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14823 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14824 ;;Total ram usage:        2 bytes
 14825 ;; Hardware stack levels used:    1
 14826 ;; Hardware stack levels required when called:    1
 14827 ;; This function calls:
 14828 ;;		i1_EUSART_Write
 14829 ;; This function is called by:
 14830 ;;		_Led_RunMusic
 14831 ;; This function uses a non-reentrant model
 14832 ;;
 14833                           
 14834                           
 14835                           ;psect for function _Audio_SelectSound
 14836  00E8                     _Audio_SelectSound:	
 14837                           
 14838                           ;incstack = 0
 14839                           ; Regs used in _Audio_SelectSound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14840                           ;Audio_SelectSound@index stored from wreg
 14841  00E8  00F1               	movwf	Audio_SelectSound@index
 14842  00E9  307E               	movlw	126
 14843                           
 14844                           ;audio.c: 27: uint8_t checksum = 0x00;
 14845  00EA  01F2               	clrf	Audio_SelectSound@checksum
 14846                           
 14847                           ;audio.c: 28: EUSART_Write ( 0x7E );
 14848  00EB  210B  3180         	fcall	i1_EUSART_Write
 14849                           
 14850                           ;audio.c: 29: checksum += EUSART_Write ( 0x07 );
 14851  00ED  3007               	movlw	7
 14852  00EE  210B  3180         	fcall	i1_EUSART_Write
 14853  00F0  07F2               	addwf	Audio_SelectSound@checksum,f
 14854                           
 14855                           ;audio.c: 30: checksum += EUSART_Write ( 0xA1 );
 14856  00F1  30A1               	movlw	161
 14857  00F2  210B  3180         	fcall	i1_EUSART_Write
 14858  00F4  07F2               	addwf	Audio_SelectSound@checksum,f
 14859                           
 14860                           ;audio.c: 31: checksum += EUSART_Write ( 0x30 );
 14861  00F5  3030               	movlw	48
 14862  00F6  210B  3180         	fcall	i1_EUSART_Write
 14863  00F8  07F2               	addwf	Audio_SelectSound@checksum,f
 14864                           
 14865                           ;audio.c: 32: checksum += EUSART_Write ( 0x30 );
 14866  00F9  3030               	movlw	48
 14867  00FA  210B  3180         	fcall	i1_EUSART_Write
 14868  00FC  07F2               	addwf	Audio_SelectSound@checksum,f
 14869                           
 14870                           ;audio.c: 33: checksum += EUSART_Write ( 0x30 );
 14871  00FD  3030               	movlw	48
 14872  00FE  210B  3180         	fcall	i1_EUSART_Write
 14873  0100  07F2               	addwf	Audio_SelectSound@checksum,f
 14874                           
 14875                           ;audio.c: 34: checksum += EUSART_Write ( index );
 14876  0101  0871               	movf	Audio_SelectSound@index,w
 14877  0102  210B  3180         	fcall	i1_EUSART_Write
 14878  0104  07F2               	addwf	Audio_SelectSound@checksum,f
 14879                           
 14880                           ;audio.c: 35: EUSART_Write ( checksum );
 14881  0105  0872               	movf	Audio_SelectSound@checksum,w
 14882  0106  210B  3180         	fcall	i1_EUSART_Write
 14883                           
 14884                           ;audio.c: 36: EUSART_Write ( 0xEF );
 14885  0108  30EF               	movlw	239
 14886  0109  210B               	fcall	i1_EUSART_Write
 14887  010A  0008               	return
 14888  010B                     __end_of_Audio_SelectSound:	
 14889  010B                     __ptext84:	
 14890 ;; *************** function i1_EUSART_Write *****************
 14891 ;; Defined at:
 14892 ;;		line 32 in file "driver/src/eusart.c"
 14893 ;; Parameters:    Size  Location     Type
 14894 ;;  byte            1    wreg     unsigned char 
 14895 ;; Auto vars:     Size  Location     Type
 14896 ;;  byte            1    0[COMMON] unsigned char 
 14897 ;; Return value:  Size  Location     Type
 14898 ;;                  1    wreg      unsigned char 
 14899 ;; Registers used:
 14900 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14901 ;; Tracked objects:
 14902 ;;		On entry : 1F/1
 14903 ;;		On exit  : 1F/1
 14904 ;;		Unchanged: 0/0
 14905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14907 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14909 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;Total ram usage:        1 bytes
 14911 ;; Hardware stack levels used:    1
 14912 ;; This function calls:
 14913 ;;		Nothing
 14914 ;; This function is called by:
 14915 ;;		_Audio_SelectSound
 14916 ;; This function uses a non-reentrant model
 14917 ;;
 14918                           
 14919                           
 14920                           ;psect for function i1_EUSART_Write
 14921  010B                     i1_EUSART_Write:	
 14922                           
 14923                           ;incstack = 0
 14924                           ; Regs used in i1_EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 14925                           ;i1EUSART_Write@byte stored from wreg
 14926  010B  00F0               	movwf	i1EUSART_Write@byte
 14927  010C                     i1l4057:	
 14928                           ;eusart.c: 34: while ( 0 == txRemain );
 14929                           
 14930  010C  086C               	movf	_txRemain^(0+128),w
 14931  010D  1903               	btfsc	3,2
 14932  010E  290C               	goto	i1l4057
 14933                           
 14934                           ;eusart.c: 36: if ( !PIE1bits.TXIE )
 14935  010F  1A11               	btfsc	17,4	;volatile
 14936  0110  2915               	goto	i1l95
 14937                           
 14938                           ;eusart.c: 37: {
 14939                           ;eusart.c: 38: TXREG = byte;
 14940  0111  0870               	movf	i1EUSART_Write@byte,w
 14941  0112  0023               	movlb	3	; select bank3
 14942  0113  009A               	movwf	26	;volatile
 14943                           
 14944                           ;eusart.c: 39: }
 14945  0114  2919               	goto	i1l4071
 14946  0115                     i1l95:	
 14947                           
 14948                           ;eusart.c: 40: else
 14949                           ;eusart.c: 41: {
 14950                           ;eusart.c: 42: PIE1bits.TXIE = 0;
 14951                           
 14952                           ;eusart.c: 43: txBuf[txHead++] = byte;
 14953  0115  2560  3180         	fcall	PL126	;call to abstracted procedure
 14954  0117  0870               	movf	i1EUSART_Write@byte,w
 14955                           
 14956                           ;eusart.c: 44: if ( sizeof (txBuf ) <= txHead )
 14957                           
 14958                           ;eusart.c: 45: {
 14959                           ;eusart.c: 46: txHead = 0;
 14960                           
 14961                           ;eusart.c: 47: }
 14962                           ;eusart.c: 48: txRemain--;
 14963  0118  2547               	fcall	PL118	;call to abstracted procedure
 14964  0119                     i1l4071:	
 14965                           
 14966                           ;eusart.c: 49: }
 14967                           ;eusart.c: 50: PIE1bits.TXIE = 1;
 14968  0119  0021               	movlb	1	; select bank1
 14969  011A  1611               	bsf	17,4	;volatile
 14970                           
 14971                           ;eusart.c: 51: return byte;
 14972  011B  0870               	movf	i1EUSART_Write@byte,w
 14973  011C  0008               	return
 14974  011D                     __end_ofi1_EUSART_Write:	
 14975  011D                     __ptext80:	
 14976 ;; *************** function _Led_DynamicMoon *****************
 14977 ;; Defined at:
 14978 ;;		line 462 in file "user/src/led.c"
 14979 ;; Parameters:    Size  Location     Type
 14980 ;;  ptp             2    6[COMMON] unsigned int 
 14981 ;; Auto vars:     Size  Location     Type
 14982 ;;  duty           10    0[BANK0 ] unsigned int [5]
 14983 ;;  val             2   10[BANK0 ] unsigned int 
 14984 ;;  i               1   12[BANK0 ] unsigned char 
 14985 ;; Return value:  Size  Location     Type
 14986 ;;                  1    wreg      void 
 14987 ;; Registers used:
 14988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14989 ;; Tracked objects:
 14990 ;;		On entry : 1F/0
 14991 ;;		On exit  : 14/4
 14992 ;;		Unchanged: 0/0
 14993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14994 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14995 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14996 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14997 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14998 ;;Total ram usage:       19 bytes
 14999 ;; Hardware stack levels used:    1
 15000 ;; Hardware stack levels required when called:    2
 15001 ;; This function calls:
 15002 ;;		i1_Led_UpdateBright
 15003 ;;		i1___wmul
 15004 ;; This function is called by:
 15005 ;;		_Led_RunMusic
 15006 ;; This function uses a non-reentrant model
 15007 ;;
 15008                           
 15009                           
 15010                           ;psect for function _Led_DynamicMoon
 15011  011D                     _Led_DynamicMoon:	
 15012  011D                     i1l6393:	
 15013                           ;incstack = 0
 15014                           ; Regs used in _Led_DynamicMoon: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15015                           
 15016                           
 15017                           ;led.c: 463: uint8_t i;
 15018                           ;led.c: 464: uint16_t val = ptp * ( 5 + GAIN[gLedPara.mVolume] );
 15019  011D  307B               	movlw	123
 15020  011E  24D2  3180         	fcall	PL26	;call to abstracted procedure
 15021  0120  3005               	movlw	5
 15022  0121  01F1               	clrf	i1___wmul@multiplier+1
 15023  0122  07F0               	addwf	i1___wmul@multiplier,f
 15024  0123  1803               	skipnc
 15025  0124  0AF1               	incf	i1___wmul@multiplier+1,f
 15026  0125  0877               	movf	Led_DynamicMoon@ptp+1,w
 15027  0126  00F3               	movwf	i1___wmul@multiplicand+1
 15028  0127  0876               	movf	Led_DynamicMoon@ptp,w
 15029  0128  00F2               	movwf	i1___wmul@multiplicand
 15030  0129  2453  3180         	fcall	i1___wmul
 15031  012B  0871               	movf	?i1___wmul+1,w
 15032  012C  00AB               	movwf	Led_DynamicMoon@val+1
 15033  012D  0870               	movf	?i1___wmul,w
 15034  012E  00AA               	movwf	Led_DynamicMoon@val
 15035                           
 15036                           ;led.c: 465: uint16_t duty[5] = {0, 0, 1000, 200, 0};
 15037  012F  30AA               	movlw	low Led_DynamicMoon@F8363
 15038  0130  0086               	movwf	6
 15039  0131  3000               	movlw	high Led_DynamicMoon@F8363
 15040  0132  0087               	movwf	7
 15041  0133  3020               	movlw	low Led_DynamicMoon@duty
 15042  0134  0084               	movwf	4
 15043  0135  3000               	movlw	high Led_DynamicMoon@duty
 15044  0136  0085               	movwf	5
 15045  0137  300A               	movlw	10
 15046  0138  00F8               	movwf	??_Led_DynamicMoon
 15047  0139                     u550_20:	
 15048  0139  0016               	moviw fsr1++
 15049  013A  001A               	movwi fsr0++
 15050  013B  0BF8               	decfsz	??_Led_DynamicMoon,f
 15051  013C  2939               	goto	u550_20
 15052                           
 15053                           ;led.c: 466: if (duty[3] > val) {
 15054  013D  0827               	movf	Led_DynamicMoon@duty+7,w
 15055  013E  022B               	subwf	Led_DynamicMoon@val+1,w
 15056  013F  1D03               	skipz
 15057  0140  2943               	goto	u551_25
 15058  0141  0826               	movf	Led_DynamicMoon@duty+6,w
 15059  0142  022A               	subwf	Led_DynamicMoon@val,w
 15060  0143                     u551_25:	
 15061  0143  1803               	skipnc
 15062  0144  294A               	goto	i1l6401
 15063                           
 15064                           ;led.c: 467: duty[3] -= val;
 15065  0145  082A               	movf	Led_DynamicMoon@val,w
 15066  0146  02A6               	subwf	Led_DynamicMoon@duty+6,f
 15067  0147  082B               	movf	Led_DynamicMoon@val+1,w
 15068  0148  3BA7               	subwfb	Led_DynamicMoon@duty+7,f
 15069                           
 15070                           ;led.c: 468: } else {
 15071  0149  294C               	goto	i1l764
 15072  014A                     i1l6401:	
 15073                           
 15074                           ;led.c: 469: duty[3] = 0;
 15075  014A  01A6               	clrf	Led_DynamicMoon@duty+6
 15076  014B  01A7               	clrf	Led_DynamicMoon@duty+7
 15077  014C                     i1l764:	
 15078                           
 15079                           ;led.c: 470: }
 15080                           ;led.c: 471: for (i = 0; i < 5; i++) {
 15081  014C  01AC               	clrf	Led_DynamicMoon@i
 15082  014D                     i1l6407:	
 15083                           
 15084                           ;led.c: 472: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 15085  014D  352C               	lslf	Led_DynamicMoon@i,w
 15086  014E  3E20               	addlw	(low (Led_DynamicMoon@duty| 0))& (0+255)
 15087  014F  2558  3180         	fcall	PL124	;call to abstracted procedure
 15088  0151  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15089  0152  252D  3180         	fcall	PL88	;call to abstracted procedure
 15090  0154  1803               	skipnc
 15091  0155  295C               	goto	i1l6411
 15092                           
 15093                           ;led.c: 473: gLedRunPara.mCurrentBright[i]++;
 15094  0156  352C               	lslf	Led_DynamicMoon@i,w
 15095  0157  24F9  3180         	fcall	PL58	;call to abstracted procedure
 15096  0159  1803               	skipnc
 15097  015A  0A81               	incf	1,f
 15098                           
 15099                           ;led.c: 474: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 15100  015B  2968               	goto	i1l6415
 15101  015C                     i1l6411:	
 15102  015C  352C               	lslf	Led_DynamicMoon@i,w
 15103  015D  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15104  015E  2558  3180         	fcall	PL124	;call to abstracted procedure
 15105  0160  3E20               	addlw	(low (Led_DynamicMoon@duty| 0))& (0+255)
 15106  0161  252D  3180         	fcall	PL88	;call to abstracted procedure
 15107  0163  1803               	skipnc
 15108  0164  2968               	goto	i1l6415
 15109                           
 15110                           ;led.c: 475: gLedRunPara.mCurrentBright[i]--;
 15111  0165  352C               	lslf	Led_DynamicMoon@i,w
 15112  0166  24C8  3180         	fcall	PL22	;call to abstracted procedure
 15113  0168                     i1l6415:	
 15114  0168  3005               	movlw	5
 15115  0169  0AAC               	incf	Led_DynamicMoon@i,f
 15116  016A  022C               	subwf	Led_DynamicMoon@i,w
 15117  016B  1C03               	skipc
 15118  016C  294D               	goto	i1l6407
 15119                           
 15120                           ;led.c: 476: }
 15121                           ;led.c: 477: }
 15122                           ;led.c: 478: Led_UpdateBright();
 15123  016D  24B4               	fcall	i1_Led_UpdateBright
 15124  016E  0008               	return
 15125  016F                     __end_of_Led_DynamicMoon:	
 15126  016F                     __ptext78:	
 15127 ;; *************** function _Led_DynamicWave *****************
 15128 ;; Defined at:
 15129 ;;		line 444 in file "user/src/led.c"
 15130 ;; Parameters:    Size  Location     Type
 15131 ;;  ptp             2    6[COMMON] unsigned int 
 15132 ;; Auto vars:     Size  Location     Type
 15133 ;;  duty           10    0[BANK0 ] unsigned int [5]
 15134 ;;  val             2   10[BANK0 ] unsigned int 
 15135 ;;  i               1   12[BANK0 ] unsigned char 
 15136 ;; Return value:  Size  Location     Type
 15137 ;;                  1    wreg      void 
 15138 ;; Registers used:
 15139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15140 ;; Tracked objects:
 15141 ;;		On entry : 1F/0
 15142 ;;		On exit  : 14/4
 15143 ;;		Unchanged: 0/0
 15144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15145 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15146 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15147 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15148 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15149 ;;Total ram usage:       19 bytes
 15150 ;; Hardware stack levels used:    1
 15151 ;; Hardware stack levels required when called:    2
 15152 ;; This function calls:
 15153 ;;		i1_Led_UpdateBright
 15154 ;;		i1___wmul
 15155 ;; This function is called by:
 15156 ;;		_Led_RunMusic
 15157 ;; This function uses a non-reentrant model
 15158 ;;
 15159                           
 15160                           
 15161                           ;psect for function _Led_DynamicWave
 15162  016F                     _Led_DynamicWave:	
 15163  016F                     i1l6363:	
 15164                           ;incstack = 0
 15165                           ; Regs used in _Led_DynamicWave: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15166                           
 15167                           
 15168                           ;led.c: 445: uint8_t i;
 15169                           ;led.c: 446: uint16_t val = ptp * ( 6 + GAIN[gLedPara.mVolume] );
 15170  016F  307B               	movlw	123
 15171  0170  24D2  3180         	fcall	PL26	;call to abstracted procedure
 15172  0172  3006               	movlw	6
 15173  0173  01F1               	clrf	i1___wmul@multiplier+1
 15174  0174  07F0               	addwf	i1___wmul@multiplier,f
 15175  0175  1803               	skipnc
 15176  0176  0AF1               	incf	i1___wmul@multiplier+1,f
 15177  0177  0877               	movf	Led_DynamicWave@ptp+1,w
 15178  0178  00F3               	movwf	i1___wmul@multiplicand+1
 15179  0179  0876               	movf	Led_DynamicWave@ptp,w
 15180  017A  00F2               	movwf	i1___wmul@multiplicand
 15181  017B  2453  3180         	fcall	i1___wmul
 15182  017D  0871               	movf	?i1___wmul+1,w
 15183  017E  00AB               	movwf	Led_DynamicWave@val+1
 15184  017F  0870               	movf	?i1___wmul,w
 15185  0180  00AA               	movwf	Led_DynamicWave@val
 15186                           
 15187                           ;led.c: 447: uint16_t duty[5] = {500, 500, 500, 200, 500};
 15188  0181  30B4               	movlw	low Led_DynamicWave@F8353
 15189  0182  0086               	movwf	6
 15190  0183  3000               	movlw	high Led_DynamicWave@F8353
 15191  0184  0087               	movwf	7
 15192  0185  3020               	movlw	low Led_DynamicWave@duty
 15193  0186  0084               	movwf	4
 15194  0187  3000               	movlw	high Led_DynamicWave@duty
 15195  0188  0085               	movwf	5
 15196  0189  300A               	movlw	10
 15197  018A  00F8               	movwf	??_Led_DynamicWave
 15198  018B                     u545_20:	
 15199  018B  0016               	moviw fsr1++
 15200  018C  001A               	movwi fsr0++
 15201  018D  0BF8               	decfsz	??_Led_DynamicWave,f
 15202  018E  298B               	goto	u545_20
 15203                           
 15204                           ;led.c: 448: duty[3] += val;
 15205  018F  082A               	movf	Led_DynamicWave@val,w
 15206  0190  07A6               	addwf	Led_DynamicWave@duty+6,f
 15207  0191  082B               	movf	Led_DynamicWave@val+1,w
 15208  0192  3DA7               	addwfc	Led_DynamicWave@duty+7,f
 15209                           
 15210                           ;led.c: 449: if (duty[3] > 1000) {
 15211  0193  3003               	movlw	3
 15212  0194  0227               	subwf	Led_DynamicWave@duty+7,w
 15213  0195  30E9               	movlw	233
 15214  0196  1903               	skipnz
 15215  0197  0226               	subwf	Led_DynamicWave@duty+6,w
 15216  0198  1C03               	skipc
 15217  0199  299E               	goto	i1l6373
 15218                           
 15219                           ;led.c: 450: duty[3] = 1000;
 15220  019A  30E8               	movlw	232
 15221  019B  00A6               	movwf	Led_DynamicWave@duty+6
 15222  019C  3003               	movlw	3
 15223  019D  00A7               	movwf	Led_DynamicWave@duty+7
 15224  019E                     i1l6373:	
 15225                           
 15226                           ;led.c: 451: }
 15227                           ;led.c: 452: for (i = 0; i < 5; i++) {
 15228  019E  01AC               	clrf	Led_DynamicWave@i
 15229  019F                     i1l6379:	
 15230                           
 15231                           ;led.c: 453: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 15232  019F  352C               	lslf	Led_DynamicWave@i,w
 15233  01A0  3E20               	addlw	(low (Led_DynamicWave@duty| 0))& (0+255)
 15234  01A1  2568  3180         	fcall	PL128	;call to abstracted procedure
 15235  01A3  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15236  01A4  2515  3180         	fcall	PL76	;call to abstracted procedure
 15237  01A6  1803               	skipnc
 15238  01A7  29AE               	goto	i1l6383
 15239                           
 15240                           ;led.c: 454: gLedRunPara.mCurrentBright[i]++;
 15241  01A8  352C               	lslf	Led_DynamicWave@i,w
 15242  01A9  24F9  3180         	fcall	PL58	;call to abstracted procedure
 15243  01AB  1803               	skipnc
 15244  01AC  0A81               	incf	1,f
 15245                           
 15246                           ;led.c: 455: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 15247  01AD  29BA               	goto	i1l6387
 15248  01AE                     i1l6383:	
 15249  01AE  352C               	lslf	Led_DynamicWave@i,w
 15250  01AF  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15251  01B0  2568  3180         	fcall	PL128	;call to abstracted procedure
 15252  01B2  3E20               	addlw	(low (Led_DynamicWave@duty| 0))& (0+255)
 15253  01B3  2515  3180         	fcall	PL76	;call to abstracted procedure
 15254  01B5  1803               	skipnc
 15255  01B6  29BA               	goto	i1l6387
 15256                           
 15257                           ;led.c: 456: gLedRunPara.mCurrentBright[i]--;
 15258  01B7  352C               	lslf	Led_DynamicWave@i,w
 15259  01B8  24C8  3180         	fcall	PL22	;call to abstracted procedure
 15260  01BA                     i1l6387:	
 15261  01BA  3005               	movlw	5
 15262  01BB  0AAC               	incf	Led_DynamicWave@i,f
 15263  01BC  022C               	subwf	Led_DynamicWave@i,w
 15264  01BD  1C03               	skipc
 15265  01BE  299F               	goto	i1l6379
 15266                           
 15267                           ;led.c: 457: }
 15268                           ;led.c: 458: }
 15269                           ;led.c: 459: Led_UpdateBright();
 15270  01BF  24B4               	fcall	i1_Led_UpdateBright
 15271  01C0  0008               	return
 15272  01C1                     __end_of_Led_DynamicWave:	
 15273  01C1                     __ptext79:	
 15274 ;; *************** function _Led_DynamicStorm *****************
 15275 ;; Defined at:
 15276 ;;		line 508 in file "user/src/led.c"
 15277 ;; Parameters:    Size  Location     Type
 15278 ;;  ptp             2    6[COMMON] unsigned int 
 15279 ;; Auto vars:     Size  Location     Type
 15280 ;;  duty           10    0[BANK0 ] unsigned int [5]
 15281 ;;  val             2   10[BANK0 ] unsigned int 
 15282 ;;  i               1   12[BANK0 ] unsigned char 
 15283 ;; Return value:  Size  Location     Type
 15284 ;;                  1    wreg      void 
 15285 ;; Registers used:
 15286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15287 ;; Tracked objects:
 15288 ;;		On entry : 1F/0
 15289 ;;		On exit  : 14/4
 15290 ;;		Unchanged: 0/0
 15291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15292 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15293 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15294 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15295 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15296 ;;Total ram usage:       19 bytes
 15297 ;; Hardware stack levels used:    1
 15298 ;; Hardware stack levels required when called:    2
 15299 ;; This function calls:
 15300 ;;		i1_Led_UpdateBright
 15301 ;;		i1___wmul
 15302 ;; This function is called by:
 15303 ;;		_Led_RunMusic
 15304 ;; This function uses a non-reentrant model
 15305 ;;
 15306                           
 15307                           
 15308                           ;psect for function _Led_DynamicStorm
 15309  01C1                     _Led_DynamicStorm:	
 15310  01C1                     i1l6461:	
 15311                           ;incstack = 0
 15312                           ; Regs used in _Led_DynamicStorm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15313                           
 15314                           
 15315                           ;led.c: 509: uint8_t i;
 15316                           ;led.c: 510: uint16_t val = ptp * ( 5 + GAIN[gLedPara.mVolume] );
 15317  01C1  307B               	movlw	123
 15318  01C2  24D2  3180         	fcall	PL26	;call to abstracted procedure
 15319  01C4  3005               	movlw	5
 15320  01C5  01F1               	clrf	i1___wmul@multiplier+1
 15321  01C6  07F0               	addwf	i1___wmul@multiplier,f
 15322  01C7  1803               	skipnc
 15323  01C8  0AF1               	incf	i1___wmul@multiplier+1,f
 15324  01C9  0877               	movf	Led_DynamicStorm@ptp+1,w
 15325  01CA  00F3               	movwf	i1___wmul@multiplicand+1
 15326  01CB  0876               	movf	Led_DynamicStorm@ptp,w
 15327  01CC  00F2               	movwf	i1___wmul@multiplicand
 15328  01CD  2453  3180         	fcall	i1___wmul
 15329  01CF  0871               	movf	?i1___wmul+1,w
 15330  01D0  00AB               	movwf	Led_DynamicStorm@val+1
 15331  01D1  0870               	movf	?i1___wmul,w
 15332  01D2  00AA               	movwf	Led_DynamicStorm@val
 15333                           
 15334                           ;led.c: 511: uint16_t duty[5] = {0, 0, 600, 64, 0};
 15335  01D3  304D               	movlw	low Led_DynamicStorm@F8383
 15336  01D4  0086               	movwf	6
 15337  01D5  3001               	movlw	high Led_DynamicStorm@F8383
 15338  01D6  0087               	movwf	7
 15339  01D7  3020               	movlw	low Led_DynamicStorm@duty
 15340  01D8  0084               	movwf	4
 15341  01D9  3000               	movlw	high Led_DynamicStorm@duty
 15342  01DA  0085               	movwf	5
 15343  01DB  300A               	movlw	10
 15344  01DC  00F8               	movwf	??_Led_DynamicStorm
 15345  01DD                     u562_20:	
 15346  01DD  0016               	moviw fsr1++
 15347  01DE  001A               	movwi fsr0++
 15348  01DF  0BF8               	decfsz	??_Led_DynamicStorm,f
 15349  01E0  29DD               	goto	u562_20
 15350                           
 15351                           ;led.c: 512: if (duty[2] > val) {
 15352  01E1  0825               	movf	Led_DynamicStorm@duty+5,w
 15353  01E2  022B               	subwf	Led_DynamicStorm@val+1,w
 15354  01E3  1D03               	skipz
 15355  01E4  29E7               	goto	u563_25
 15356  01E5  0824               	movf	Led_DynamicStorm@duty+4,w
 15357  01E6  022A               	subwf	Led_DynamicStorm@val,w
 15358  01E7                     u563_25:	
 15359  01E7  1803               	skipnc
 15360  01E8  29EE               	goto	i1l6469
 15361                           
 15362                           ;led.c: 513: duty[2] -= val;
 15363  01E9  082A               	movf	Led_DynamicStorm@val,w
 15364  01EA  02A4               	subwf	Led_DynamicStorm@duty+4,f
 15365  01EB  082B               	movf	Led_DynamicStorm@val+1,w
 15366  01EC  3BA5               	subwfb	Led_DynamicStorm@duty+5,f
 15367                           
 15368                           ;led.c: 514: } else {
 15369  01ED  29F0               	goto	i1l6471
 15370  01EE                     i1l6469:	
 15371                           
 15372                           ;led.c: 515: duty[2] = 0;
 15373  01EE  01A4               	clrf	Led_DynamicStorm@duty+4
 15374  01EF  01A5               	clrf	Led_DynamicStorm@duty+5
 15375  01F0                     i1l6471:	
 15376                           
 15377                           ;led.c: 516: }
 15378                           ;led.c: 517: duty[3] += val;
 15379  01F0  082A               	movf	Led_DynamicStorm@val,w
 15380  01F1  07A6               	addwf	Led_DynamicStorm@duty+6,f
 15381  01F2  082B               	movf	Led_DynamicStorm@val+1,w
 15382  01F3  3DA7               	addwfc	Led_DynamicStorm@duty+7,f
 15383                           
 15384                           ;led.c: 518: if( duty[3] > 1000 )
 15385  01F4  3003               	movlw	3
 15386  01F5  0227               	subwf	Led_DynamicStorm@duty+7,w
 15387  01F6  30E9               	movlw	233
 15388  01F7  1903               	skipnz
 15389  01F8  0226               	subwf	Led_DynamicStorm@duty+6,w
 15390  01F9  1C03               	skipc
 15391  01FA  29FF               	goto	i1l6477
 15392                           
 15393                           ;led.c: 519: {
 15394                           ;led.c: 520: duty[3] = 1000;
 15395  01FB  30E8               	movlw	232
 15396  01FC  00A6               	movwf	Led_DynamicStorm@duty+6
 15397  01FD  3003               	movlw	3
 15398  01FE  00A7               	movwf	Led_DynamicStorm@duty+7
 15399  01FF                     i1l6477:	
 15400                           
 15401                           ;led.c: 521: }
 15402                           ;led.c: 522: for (i = 0; i < 5; i++) {
 15403  01FF  01AC               	clrf	Led_DynamicStorm@i
 15404  0200                     i1l6483:	
 15405                           
 15406                           ;led.c: 523: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 15407  0200  352C               	lslf	Led_DynamicStorm@i,w
 15408  0201  3E20               	addlw	(low (Led_DynamicStorm@duty| 0))& (0+255)
 15409  0202  2570  3180         	fcall	PL130	;call to abstracted procedure
 15410  0204  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15411  0205  2521  3180         	fcall	PL84	;call to abstracted procedure
 15412  0207  1803               	skipnc
 15413  0208  2A0F               	goto	i1l6487
 15414                           
 15415                           ;led.c: 524: gLedRunPara.mCurrentBright[i]++;
 15416  0209  352C               	lslf	Led_DynamicStorm@i,w
 15417  020A  24F9  3180         	fcall	PL58	;call to abstracted procedure
 15418  020C  1803               	skipnc
 15419  020D  0A81               	incf	1,f
 15420                           
 15421                           ;led.c: 525: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 15422  020E  2A1B               	goto	i1l6491
 15423  020F                     i1l6487:	
 15424  020F  352C               	lslf	Led_DynamicStorm@i,w
 15425  0210  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15426  0211  2570  3180         	fcall	PL130	;call to abstracted procedure
 15427  0213  3E20               	addlw	(low (Led_DynamicStorm@duty| 0))& (0+255)
 15428  0214  2521  3180         	fcall	PL84	;call to abstracted procedure
 15429  0216  1803               	skipnc
 15430  0217  2A1B               	goto	i1l6491
 15431                           
 15432                           ;led.c: 526: gLedRunPara.mCurrentBright[i]--;
 15433  0218  352C               	lslf	Led_DynamicStorm@i,w
 15434  0219  24C8  3180         	fcall	PL22	;call to abstracted procedure
 15435  021B                     i1l6491:	
 15436  021B  3005               	movlw	5
 15437  021C  0AAC               	incf	Led_DynamicStorm@i,f
 15438  021D  022C               	subwf	Led_DynamicStorm@i,w
 15439  021E  1C03               	skipc
 15440  021F  2A00               	goto	i1l6483
 15441                           
 15442                           ;led.c: 527: }
 15443                           ;led.c: 528: }
 15444                           ;led.c: 529: Led_UpdateBright();
 15445  0220  24B4               	fcall	i1_Led_UpdateBright
 15446  0221  0008               	return
 15447  0222                     __end_of_Led_DynamicStorm:	
 15448  0222                     __ptext81:	
 15449 ;; *************** function _Led_DynamicCloud *****************
 15450 ;; Defined at:
 15451 ;;		line 481 in file "user/src/led.c"
 15452 ;; Parameters:    Size  Location     Type
 15453 ;;  ptp             2    6[COMMON] unsigned int 
 15454 ;; Auto vars:     Size  Location     Type
 15455 ;;  duty           10    0[BANK0 ] unsigned int [5]
 15456 ;;  val             2   10[BANK0 ] unsigned int 
 15457 ;;  i               1   12[BANK0 ] unsigned char 
 15458 ;; Return value:  Size  Location     Type
 15459 ;;                  1    wreg      void 
 15460 ;; Registers used:
 15461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15462 ;; Tracked objects:
 15463 ;;		On entry : 1F/0
 15464 ;;		On exit  : 14/4
 15465 ;;		Unchanged: 0/0
 15466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15467 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15468 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15469 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15470 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15471 ;;Total ram usage:       19 bytes
 15472 ;; Hardware stack levels used:    1
 15473 ;; Hardware stack levels required when called:    2
 15474 ;; This function calls:
 15475 ;;		i1_Led_UpdateBright
 15476 ;;		i1___wmul
 15477 ;; This function is called by:
 15478 ;;		_Led_RunMusic
 15479 ;; This function uses a non-reentrant model
 15480 ;;
 15481                           
 15482                           
 15483                           ;psect for function _Led_DynamicCloud
 15484  0222                     _Led_DynamicCloud:	
 15485  0222                     i1l6421:	
 15486                           ;incstack = 0
 15487                           ; Regs used in _Led_DynamicCloud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15488                           
 15489                           
 15490                           ;led.c: 482: uint8_t i;
 15491                           ;led.c: 483: uint16_t val = ptp * ( 16 + GAIN[gLedPara.mVolume] );
 15492  0222  307B               	movlw	123
 15493  0223  24D2  3180         	fcall	PL26	;call to abstracted procedure
 15494  0225  3010               	movlw	16
 15495  0226  01F1               	clrf	i1___wmul@multiplier+1
 15496  0227  07F0               	addwf	i1___wmul@multiplier,f
 15497  0228  1803               	skipnc
 15498  0229  0AF1               	incf	i1___wmul@multiplier+1,f
 15499  022A  0877               	movf	Led_DynamicCloud@ptp+1,w
 15500  022B  00F3               	movwf	i1___wmul@multiplicand+1
 15501  022C  0876               	movf	Led_DynamicCloud@ptp,w
 15502  022D  00F2               	movwf	i1___wmul@multiplicand
 15503  022E  2453  3180         	fcall	i1___wmul
 15504  0230  0871               	movf	?i1___wmul+1,w
 15505  0231  00AB               	movwf	Led_DynamicCloud@val+1
 15506  0232  0870               	movf	?i1___wmul,w
 15507  0233  00AA               	movwf	Led_DynamicCloud@val
 15508                           
 15509                           ;led.c: 484: uint16_t duty[5] = {200, 200, 400, 320, 400};
 15510  0234  30A0               	movlw	low Led_DynamicCloud@F8373
 15511  0235  0086               	movwf	6
 15512  0236  3000               	movlw	high Led_DynamicCloud@F8373
 15513  0237  0087               	movwf	7
 15514  0238  3020               	movlw	low Led_DynamicCloud@duty
 15515  0239  0084               	movwf	4
 15516  023A  3000               	movlw	high Led_DynamicCloud@duty
 15517  023B  0085               	movwf	5
 15518  023C  300A               	movlw	10
 15519  023D  00F8               	movwf	??_Led_DynamicCloud
 15520  023E                     u555_20:	
 15521  023E  0016               	moviw fsr1++
 15522  023F  001A               	movwi fsr0++
 15523  0240  0BF8               	decfsz	??_Led_DynamicCloud,f
 15524  0241  2A3E               	goto	u555_20
 15525                           
 15526                           ;led.c: 485: duty[2] += val;
 15527  0242  082A               	movf	Led_DynamicCloud@val,w
 15528  0243  07A4               	addwf	Led_DynamicCloud@duty+4,f
 15529  0244  082B               	movf	Led_DynamicCloud@val+1,w
 15530  0245  3DA5               	addwfc	Led_DynamicCloud@duty+5,f
 15531                           
 15532                           ;led.c: 486: if (duty[2] > 1000) {
 15533  0246  3003               	movlw	3
 15534  0247  0225               	subwf	Led_DynamicCloud@duty+5,w
 15535  0248  30E9               	movlw	233
 15536  0249  1903               	skipnz
 15537  024A  0224               	subwf	Led_DynamicCloud@duty+4,w
 15538  024B  1C03               	skipc
 15539  024C  2A51               	goto	i1l775
 15540                           
 15541                           ;led.c: 487: duty[2] = 1000;
 15542  024D  30E8               	movlw	232
 15543  024E  00A4               	movwf	Led_DynamicCloud@duty+4
 15544  024F  3003               	movlw	3
 15545  0250  00A5               	movwf	Led_DynamicCloud@duty+5
 15546  0251                     i1l775:	
 15547                           
 15548                           ;led.c: 488: }
 15549                           ;led.c: 489: if (duty[3] > val) {
 15550  0251  0827               	movf	Led_DynamicCloud@duty+7,w
 15551  0252  022B               	subwf	Led_DynamicCloud@val+1,w
 15552  0253  1D03               	skipz
 15553  0254  2A57               	goto	u557_25
 15554  0255  0826               	movf	Led_DynamicCloud@duty+6,w
 15555  0256  022A               	subwf	Led_DynamicCloud@val,w
 15556  0257                     u557_25:	
 15557  0257  1803               	skipnc
 15558  0258  2A5E               	goto	i1l6433
 15559                           
 15560                           ;led.c: 490: duty[3] -= val;
 15561  0259  082A               	movf	Led_DynamicCloud@val,w
 15562  025A  02A6               	subwf	Led_DynamicCloud@duty+6,f
 15563  025B  082B               	movf	Led_DynamicCloud@val+1,w
 15564  025C  3BA7               	subwfb	Led_DynamicCloud@duty+7,f
 15565                           
 15566                           ;led.c: 491: } else {
 15567  025D  2A60               	goto	i1l6435
 15568  025E                     i1l6433:	
 15569                           
 15570                           ;led.c: 492: duty[3] = 0;
 15571  025E  01A6               	clrf	Led_DynamicCloud@duty+6
 15572  025F  01A7               	clrf	Led_DynamicCloud@duty+7
 15573  0260                     i1l6435:	
 15574                           
 15575                           ;led.c: 493: }
 15576                           ;led.c: 494: duty[4] += val;
 15577  0260  082A               	movf	Led_DynamicCloud@val,w
 15578  0261  07A8               	addwf	Led_DynamicCloud@duty+8,f
 15579  0262  082B               	movf	Led_DynamicCloud@val+1,w
 15580  0263  3DA9               	addwfc	Led_DynamicCloud@duty+9,f
 15581                           
 15582                           ;led.c: 495: if (duty[4] > 1000) {
 15583  0264  3003               	movlw	3
 15584  0265  0229               	subwf	Led_DynamicCloud@duty+9,w
 15585  0266  30E9               	movlw	233
 15586  0267  1903               	skipnz
 15587  0268  0228               	subwf	Led_DynamicCloud@duty+8,w
 15588  0269  1C03               	skipc
 15589  026A  2A6F               	goto	i1l6441
 15590                           
 15591                           ;led.c: 496: duty[4] = 1000;
 15592  026B  30E8               	movlw	232
 15593  026C  00A8               	movwf	Led_DynamicCloud@duty+8
 15594  026D  3003               	movlw	3
 15595  026E  00A9               	movwf	Led_DynamicCloud@duty+9
 15596  026F                     i1l6441:	
 15597                           
 15598                           ;led.c: 497: }
 15599                           ;led.c: 498: for (i = 0; i < 5; i++) {
 15600  026F  01AC               	clrf	Led_DynamicCloud@i
 15601  0270                     i1l6447:	
 15602                           
 15603                           ;led.c: 499: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 15604  0270  352C               	lslf	Led_DynamicCloud@i,w
 15605  0271  3E20               	addlw	(low (Led_DynamicCloud@duty| 0))& (0+255)
 15606  0272  2550  3180         	fcall	PL122	;call to abstracted procedure
 15607  0274  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15608  0275  2509  3180         	fcall	PL74	;call to abstracted procedure
 15609  0277  1803               	skipnc
 15610  0278  2A7F               	goto	i1l6451
 15611                           
 15612                           ;led.c: 500: gLedRunPara.mCurrentBright[i]++;
 15613  0279  352C               	lslf	Led_DynamicCloud@i,w
 15614  027A  24F9  3180         	fcall	PL58	;call to abstracted procedure
 15615  027C  1803               	skipnc
 15616  027D  0A81               	incf	1,f
 15617                           
 15618                           ;led.c: 501: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 15619  027E  2A8B               	goto	i1l6455
 15620  027F                     i1l6451:	
 15621  027F  352C               	lslf	Led_DynamicCloud@i,w
 15622  0280  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15623  0281  2550  3180         	fcall	PL122	;call to abstracted procedure
 15624  0283  3E20               	addlw	(low (Led_DynamicCloud@duty| 0))& (0+255)
 15625  0284  2509  3180         	fcall	PL74	;call to abstracted procedure
 15626  0286  1803               	skipnc
 15627  0287  2A8B               	goto	i1l6455
 15628                           
 15629                           ;led.c: 502: gLedRunPara.mCurrentBright[i]--;
 15630  0288  352C               	lslf	Led_DynamicCloud@i,w
 15631  0289  24C8  3180         	fcall	PL22	;call to abstracted procedure
 15632  028B                     i1l6455:	
 15633  028B  3005               	movlw	5
 15634  028C  0AAC               	incf	Led_DynamicCloud@i,f
 15635  028D  022C               	subwf	Led_DynamicCloud@i,w
 15636  028E  1C03               	skipc
 15637  028F  2A70               	goto	i1l6447
 15638                           
 15639                           ;led.c: 503: }
 15640                           ;led.c: 504: }
 15641                           ;led.c: 505: Led_UpdateBright();
 15642  0290  24B4               	fcall	i1_Led_UpdateBright
 15643  0291  0008               	return
 15644  0292                     __end_of_Led_DynamicCloud:	
 15645  0292                     __ptext91:	
 15646 ;; *************** function _IR_ScanLongPress *****************
 15647 ;; Defined at:
 15648 ;;		line 372 in file "user/src/ir.c"
 15649 ;; Parameters:    Size  Location     Type
 15650 ;;		None
 15651 ;; Auto vars:     Size  Location     Type
 15652 ;;  i               1    9[BANK0 ] unsigned char 
 15653 ;;  i               1    8[BANK0 ] unsigned char 
 15654 ;;  idx             1   10[BANK0 ] unsigned char 
 15655 ;; Return value:  Size  Location     Type
 15656 ;;                  1    wreg      void 
 15657 ;; Registers used:
 15658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15659 ;; Tracked objects:
 15660 ;;		On entry : 1F/0
 15661 ;;		On exit  : 16/0
 15662 ;;		Unchanged: 0/0
 15663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15665 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15666 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15667 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15668 ;;Total ram usage:        7 bytes
 15669 ;; Hardware stack levels used:    1
 15670 ;; Hardware stack levels required when called:    2
 15671 ;; This function calls:
 15672 ;;		_Led_SetCustom
 15673 ;;		i1_IR_GetIndex
 15674 ;;		i1_Led_StartNotice
 15675 ;;		i1_Util_DecValue
 15676 ;;		i1_Util_IncValue
 15677 ;; This function is called by:
 15678 ;;		_Led_Run
 15679 ;; This function uses a non-reentrant model
 15680 ;;
 15681                           
 15682                           
 15683                           ;psect for function _IR_ScanLongPress
 15684  0292                     _IR_ScanLongPress:	
 15685                           
 15686                           ;ir.c: 375: if (!ir_state.mKeyRpt) {
 15687                           
 15688                           ;incstack = 0
 15689                           ; Regs used in _IR_ScanLongPress: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15690  0292  18D9               	btfsc	_ir_state,1	;volatile
 15691  0293  2B41               	goto	i1l4713
 15692                           
 15693                           ;ir.c: 376: cnt = 0;
 15694  0294  01C5               	clrf	IR_ScanLongPress@cnt
 15695  0295  01C6               	clrf	IR_ScanLongPress@cnt+1
 15696  0296  0008               	return
 15697  0297                     i1l1123:	
 15698  0297                     i1l4601:	
 15699                           
 15700                           ;ir.c: 381: case 0x0E:
 15701                           ;ir.c: 382: case 0x1F:
 15702                           ;ir.c: 383: case 0x5E:
 15703                           ;ir.c: 384: case 0x12:
 15704                           ;ir.c: 385: idx = IR_GetIndex(keyValue);
 15705  0297  0853               	movf	_keyValue,w	;volatile
 15706  0298  237D  3180         	fcall	i1_IR_GetIndex
 15707  029A  00AA               	movwf	IR_ScanLongPress@idx
 15708                           
 15709                           ;ir.c: 386: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 1000, 1);
 15710  029B  352A               	lslf	IR_ScanLongPress@idx,w
 15711  029C  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15712  029D  00F0               	movwf	i1Util_IncValue@pSrc
 15713  029E  30E8               	movlw	232
 15714  029F  01F1               	clrf	i1Util_IncValue@pSrc+1
 15715  02A0  00F2               	movwf	i1Util_IncValue@max
 15716  02A1  3003               	movlw	3
 15717  02A2  00F3               	movwf	i1Util_IncValue@max+1
 15718  02A3  01F4               	clrf	i1Util_IncValue@delta
 15719  02A4  0AF4               	incf	i1Util_IncValue@delta,f
 15720  02A5  01F5               	clrf	i1Util_IncValue@delta+1
 15721  02A6  248E  3180         	fcall	i1_Util_IncValue
 15722  02A8                     L22:	
 15723                           
 15724                           ;ir.c: 387: if (ir_state.mSet == 0) {
 15725  02A8  0E59               	swapf	_ir_state,w	;volatile
 15726  02A9  0C89               	rrf	9,f
 15727  02AA  3907               	andlw	7
 15728  02AB  1D03               	skipz
 15729  02AC  0008               	return
 15730                           
 15731                           ;ir.c: 388: gLedPara.mBright[idx] = gLedRunPara.mTargetBright[idx];
 15732  02AD  352A               	lslf	IR_ScanLongPress@idx,w
 15733  02AE  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15734  02AF  0086               	movwf	6
 15735  02B0  0187               	clrf	7
 15736  02B1  082A               	movf	IR_ScanLongPress@idx,w
 15737  02B2  00A4               	movwf	??_IR_ScanLongPress
 15738  02B3  307E               	movlw	126
 15739  02B4  2500               	fcall	PL68	;call to abstracted procedure
 15740  02B5  0084               	movwf	4
 15741  02B6  0825               	movf	??_IR_ScanLongPress+1,w
 15742  02B7  3D27               	addwfc	??_IR_ScanLongPress+3,w
 15743  02B8  3196  26F3         	fcall	PL40	;call to abstracted procedure
 15744  02BA  0008               	return
 15745  02BB                     i1l1130:	
 15746  02BB                     i1l4609:	
 15747                           
 15748                           ;ir.c: 392: case 0x06:
 15749                           ;ir.c: 393: case 0x11:
 15750                           ;ir.c: 394: case 0x42:
 15751                           ;ir.c: 395: case 0x15:
 15752                           ;ir.c: 396: idx = IR_GetIndex(keyValue);
 15753  02BB  0853               	movf	_keyValue,w	;volatile
 15754  02BC  237D  3180         	fcall	i1_IR_GetIndex
 15755  02BE  00AA               	movwf	IR_ScanLongPress@idx
 15756                           
 15757                           ;ir.c: 397: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 0, 1);
 15758  02BF  352A               	lslf	IR_ScanLongPress@idx,w
 15759  02C0  3ED4               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15760  02C1  00F0               	movwf	i1Util_DecValue@pSrc
 15761  02C2  01F1               	clrf	i1Util_DecValue@pSrc+1
 15762  02C3  01F2               	clrf	i1Util_DecValue@min
 15763  02C4  01F3               	clrf	i1Util_DecValue@min+1
 15764  02C5  01F4               	clrf	i1Util_DecValue@delta
 15765  02C6  0AF4               	incf	i1Util_DecValue@delta,f
 15766  02C7  01F5               	clrf	i1Util_DecValue@delta+1
 15767  02C8  2468  3180         	fcall	i1_Util_DecValue
 15768  02CA  2AA8               	goto	L22
 15769  02CB                     i1l1135:	
 15770                           ;ir.c: 398: if (ir_state.mSet == 0) {
 15771                           
 15772  02CB                     i1l4617:	
 15773                           
 15774                           ;ir.c: 403: case 0x0B:
 15775                           ;ir.c: 404: case 0x1A:
 15776                           ;ir.c: 405: case 0x03:
 15777                           ;ir.c: 406: cnt++;
 15778                           
 15779                           ;ir.c: 407: if (cnt == 0x200) {
 15780  02CB  24F2  3180         	fcall	PL56	;call to abstracted procedure
 15781  02CD  1D03               	btfss	3,2
 15782  02CE  0008               	return
 15783                           
 15784                           ;ir.c: 408: ir_state.mKeyRpt = 0;
 15785  02CF  10D9               	bcf	_ir_state,1	;volatile
 15786                           
 15787                           ;ir.c: 409: idx = IR_GetIndex(keyValue);
 15788  02D0  0853               	movf	_keyValue,w	;volatile
 15789  02D1  237D  3180         	fcall	i1_IR_GetIndex
 15790  02D3  00AA               	movwf	IR_ScanLongPress@idx
 15791                           
 15792                           ;ir.c: 410: Led_SetCustom(idx, (uint16_t*) gLedRunPara.mTargetBright);
 15793  02D4  30D4               	movlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 15794  02D5  00F6               	movwf	Led_SetCustom@pValue
 15795  02D6  082A               	movf	IR_ScanLongPress@idx,w
 15796  02D7  2416  3180         	fcall	_Led_SetCustom
 15797                           
 15798                           ;ir.c: 411: Led_StartNotice(1);
 15799  02D9  3001               	movlw	1
 15800  02DA  240A               	fcall	i1_Led_StartNotice
 15801                           
 15802                           ;ir.c: 412: gLedRunPara.mParaChanged = 1;
 15803  02DB  0021               	movlb	1	; select bank1
 15804  02DC  145E               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 15805  02DD  0008               	return
 15806  02DE                     i1l4631:	
 15807                           
 15808                           ;ir.c: 417: cnt++;
 15809                           
 15810                           ;ir.c: 418: if (cnt == 0x200) {
 15811  02DE  24F2  3180         	fcall	PL56	;call to abstracted procedure
 15812  02E0  1D03               	btfss	3,2
 15813  02E1  0008               	return
 15814                           
 15815                           ;ir.c: 419: ir_state.mKeyRpt = 0;
 15816  02E2  10D9               	bcf	_ir_state,1	;volatile
 15817                           
 15818                           ;ir.c: 420: ir_state.mSet = 2;
 15819  02E3  0859               	movf	_ir_state,w	;volatile
 15820  02E4  391F               	andlw	-225
 15821  02E5  3840               	iorlw	64
 15822  02E6  00D9               	movwf	_ir_state	;volatile
 15823                           
 15824                           ;ir.c: 421: ir_state.tmIdx = 0;
 15825  02E7  01DA               	clrf	_ir_state+1	;volatile
 15826                           
 15827                           ;ir.c: 422: Led_StartNotice(1);
 15828  02E8  3001               	movlw	1
 15829  02E9  240A               	fcall	i1_Led_StartNotice
 15830  02EA  0008               	return
 15831  02EB                     i1l4643:	
 15832                           
 15833                           ;ir.c: 427: cnt++;
 15834                           
 15835                           ;ir.c: 428: if (cnt == 0x200) {
 15836  02EB  24F2  3180         	fcall	PL56	;call to abstracted procedure
 15837  02ED  1D03               	btfss	3,2
 15838  02EE  0008               	return
 15839                           
 15840                           ;ir.c: 429: ir_state.mKeyRpt = 0;
 15841  02EF  10D9               	bcf	_ir_state,1	;volatile
 15842                           
 15843                           ;ir.c: 430: ir_state.mSet = 3;
 15844  02F0  0859               	movf	_ir_state,w	;volatile
 15845  02F1  391F               	andlw	-225
 15846  02F2  3860               	iorlw	96
 15847  02F3  00D9               	movwf	_ir_state	;volatile
 15848                           
 15849                           ;ir.c: 431: ir_state.tmIdx = 0;
 15850  02F4  01DA               	clrf	_ir_state+1	;volatile
 15851                           
 15852                           ;ir.c: 432: Led_StartNotice(1);
 15853  02F5  3001               	movlw	1
 15854  02F6  240A               	fcall	i1_Led_StartNotice
 15855  02F7  0008               	return
 15856  02F8                     i1l4655:	
 15857                           
 15858                           ;ir.c: 437: cnt++;
 15859                           
 15860                           ;ir.c: 438: if (cnt == 0x200) {
 15861  02F8  24F2  3180         	fcall	PL56	;call to abstracted procedure
 15862  02FA  1D03               	btfss	3,2
 15863  02FB  0008               	return
 15864                           
 15865                           ;ir.c: 439: ir_state.mKeyRpt = 0;
 15866  02FC  10D9               	bcf	_ir_state,1	;volatile
 15867                           
 15868                           ;ir.c: 440: ir_state.mSet = 4;
 15869  02FD  0859               	movf	_ir_state,w	;volatile
 15870  02FE  391F               	andlw	-225
 15871  02FF  3880               	iorlw	128
 15872  0300  00D9               	movwf	_ir_state	;volatile
 15873                           
 15874                           ;ir.c: 441: for (uint8_t i = 0; i < 5; i++) {
 15875  0301  01A8               	clrf	IR_ScanLongPress@i
 15876  0302                     i1l4669:	
 15877                           
 15878                           ;ir.c: 442: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
 15879  0302  0828               	movf	IR_ScanLongPress@i,w
 15880  0303  00A4               	movwf	??_IR_ScanLongPress
 15881  0304  30DA               	movlw	218
 15882  0305  2500               	fcall	PL68	;call to abstracted procedure
 15883  0306  0086               	movwf	6
 15884  0307  0825               	movf	??_IR_ScanLongPress+1,w
 15885  0308  3D27               	addwfc	??_IR_ScanLongPress+3,w
 15886  0309  0087               	movwf	7
 15887  030A  3528               	lslf	IR_ScanLongPress@i,w
 15888  030B  318D  25EE  3180   	fcall	PL20	;call to abstracted procedure
 15889  030E  3005               	movlw	5
 15890  030F  0AA8               	incf	IR_ScanLongPress@i,f
 15891  0310  0228               	subwf	IR_ScanLongPress@i,w
 15892  0311  1C03               	skipc
 15893  0312  2B02               	goto	i1l4669
 15894                           
 15895                           ;ir.c: 443: }
 15896                           ;ir.c: 444: Led_StartNotice(1);
 15897  0313  3001               	movlw	1
 15898  0314  240A               	fcall	i1_Led_StartNotice
 15899  0315  0008               	return
 15900  0316                     i1l4677:	
 15901                           
 15902                           ;ir.c: 448: cnt++;
 15903                           
 15904                           ;ir.c: 449: if (cnt == 0x200) {
 15905  0316  24F2  3180         	fcall	PL56	;call to abstracted procedure
 15906  0318  1D03               	btfss	3,2
 15907  0319  0008               	return
 15908                           
 15909                           ;ir.c: 450: ir_state.mKeyRpt = 0;
 15910  031A  10D9               	bcf	_ir_state,1	;volatile
 15911                           
 15912                           ;ir.c: 451: ir_state.mSet = 5;
 15913  031B  0859               	movf	_ir_state,w	;volatile
 15914  031C  391F               	andlw	-225
 15915  031D  38A0               	iorlw	160
 15916  031E  00D9               	movwf	_ir_state	;volatile
 15917                           
 15918                           ;ir.c: 452: for (uint8_t i = 0; i < 5; i++) {
 15919  031F  01A9               	clrf	IR_ScanLongPress@i_1441
 15920  0320                     i1l4691:	
 15921                           
 15922                           ;ir.c: 453: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
 15923  0320  0829               	movf	IR_ScanLongPress@i_1441,w
 15924  0321  00A4               	movwf	??_IR_ScanLongPress
 15925  0322  30E6               	movlw	230
 15926  0323  2500               	fcall	PL68	;call to abstracted procedure
 15927  0324  0086               	movwf	6
 15928  0325  0825               	movf	??_IR_ScanLongPress+1,w
 15929  0326  3D27               	addwfc	??_IR_ScanLongPress+3,w
 15930  0327  0087               	movwf	7
 15931  0328  3529               	lslf	IR_ScanLongPress@i_1441,w
 15932  0329  318D  25EE  3180   	fcall	PL20	;call to abstracted procedure
 15933  032C  3005               	movlw	5
 15934  032D  0AA9               	incf	IR_ScanLongPress@i_1441,f
 15935  032E  0229               	subwf	IR_ScanLongPress@i_1441,w
 15936  032F  1C03               	skipc
 15937  0330  2B20               	goto	i1l4691
 15938                           
 15939                           ;ir.c: 454: }
 15940                           ;ir.c: 455: Led_StartNotice(1);
 15941  0331  3001               	movlw	1
 15942  0332  240A               	fcall	i1_Led_StartNotice
 15943  0333  0008               	return
 15944  0334                     i1l4699:	
 15945                           
 15946                           ;ir.c: 459: cnt++;
 15947                           
 15948                           ;ir.c: 460: if (cnt == 0x200) {
 15949  0334  24F2  3180         	fcall	PL56	;call to abstracted procedure
 15950  0336  1D03               	btfss	3,2
 15951  0337  0008               	return
 15952                           
 15953                           ;ir.c: 461: ir_state.mKeyRpt = 0;
 15954  0338  10D9               	bcf	_ir_state,1	;volatile
 15955                           
 15956                           ;ir.c: 462: ir_state.mSet = 1;
 15957  0339  0859               	movf	_ir_state,w	;volatile
 15958  033A  391F               	andlw	-225
 15959  033B  3820               	iorlw	32
 15960  033C  00D9               	movwf	_ir_state	;volatile
 15961                           
 15962                           ;ir.c: 463: ir_state.tmIdx = 0;
 15963  033D  01DA               	clrf	_ir_state+1	;volatile
 15964                           
 15965                           ;ir.c: 464: Led_StartNotice(1);
 15966  033E  3001               	movlw	1
 15967  033F  240A               	fcall	i1_Led_StartNotice
 15968  0340  0008               	return
 15969  0341                     i1l4713:	
 15970  0341  0853               	movf	_keyValue,w	;volatile
 15971                           
 15972                           ; Switch size 1, requested type "space"
 15973                           ; Number of cases is 19, Range of values is 0 to 94
 15974                           ; switch strategies available:
 15975                           ; Name         Instructions Cycles
 15976                           ; simple_byte           58    30 (average)
 15977                           ; direct_byte          196     6 (fixed)
 15978                           ; jumptable            260     6 (fixed)
 15979                           ;	Chosen strategy is simple_byte
 15980  0342  3A00               	xorlw	0	; case 0
 15981  0343  1903               	skipnz
 15982  0344  2ADE               	goto	i1l4631
 15983  0345  3A03               	xorlw	3	; case 3
 15984  0346  1903               	skipnz
 15985  0347  2ACB               	goto	i1l4617
 15986  0348  3A06               	xorlw	6	; case 5
 15987  0349  1903               	skipnz
 15988  034A  2ABB               	goto	i1l1130
 15989  034B  3A03               	xorlw	3	; case 6
 15990  034C  1903               	skipnz
 15991  034D  2ABB               	goto	i1l4609
 15992  034E  3A0D               	xorlw	13	; case 11
 15993  034F  1903               	skipnz
 15994  0350  2ACB               	goto	i1l4617
 15995  0351  3A06               	xorlw	6	; case 13
 15996  0352  1903               	skipnz
 15997  0353  2A97               	goto	i1l1123
 15998  0354  3A03               	xorlw	3	; case 14
 15999  0355  1903               	skipnz
 16000  0356  2A97               	goto	i1l4601
 16001  0357  3A1F               	xorlw	31	; case 17
 16002  0358  1903               	skipnz
 16003  0359  2ABB               	goto	i1l4609
 16004  035A  3A03               	xorlw	3	; case 18
 16005  035B  1903               	skipnz
 16006  035C  2A97               	goto	i1l4601
 16007  035D  3A06               	xorlw	6	; case 20
 16008  035E  1903               	skipnz
 16009  035F  2ACB               	goto	i1l1135
 16010  0360  3A01               	xorlw	1	; case 21
 16011  0361  1903               	skipnz
 16012  0362  2ABB               	goto	i1l4609
 16013  0363  3A0F               	xorlw	15	; case 26
 16014  0364  1903               	skipnz
 16015  0365  2ACB               	goto	i1l4617
 16016  0366  3A05               	xorlw	5	; case 31
 16017  0367  1903               	skipnz
 16018  0368  2A97               	goto	i1l4601
 16019  0369  3A5D               	xorlw	93	; case 66
 16020  036A  1903               	skipnz
 16021  036B  2ABB               	goto	i1l4609
 16022  036C  3A01               	xorlw	1	; case 67
 16023  036D  1903               	skipnz
 16024  036E  2B16               	goto	i1l4677
 16025  036F  3A04               	xorlw	4	; case 71
 16026  0370  1903               	skipnz
 16027  0371  2B34               	goto	i1l4699
 16028  0372  3A0A               	xorlw	10	; case 77
 16029  0373  1903               	skipnz
 16030  0374  2AEB               	goto	i1l4643
 16031  0375  3A1D               	xorlw	29	; case 80
 16032  0376  1903               	skipnz
 16033  0377  2AF8               	goto	i1l4655
 16034  0378  3A0E               	xorlw	14	; case 94
 16035  0379  1903               	skipnz
 16036  037A  2A97               	goto	i1l4601
 16037  037B  2B7C               	goto	i1l1118
 16038  037C                     i1l1118:	
 16039  037C  0008               	return
 16040  037D                     __end_of_IR_ScanLongPress:	
 16041  037D                     __ptext96:	
 16042 ;; *************** function i1_IR_GetIndex *****************
 16043 ;; Defined at:
 16044 ;;		line 10 in file "user/src/ir.c"
 16045 ;; Parameters:    Size  Location     Type
 16046 ;;  keynum          1    wreg     unsigned char 
 16047 ;; Auto vars:     Size  Location     Type
 16048 ;;  keynum          1    0[COMMON] unsigned char 
 16049 ;;  IR_GetIndex     1    1[COMMON] unsigned char 
 16050 ;; Return value:  Size  Location     Type
 16051 ;;                  1    wreg      unsigned char 
 16052 ;; Registers used:
 16053 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16054 ;; Tracked objects:
 16055 ;;		On entry : 1F/0
 16056 ;;		On exit  : 1F/0
 16057 ;;		Unchanged: 1F/0
 16058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16060 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16062 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16063 ;;Total ram usage:        2 bytes
 16064 ;; Hardware stack levels used:    1
 16065 ;; This function calls:
 16066 ;;		Nothing
 16067 ;; This function is called by:
 16068 ;;		_IR_ScanLongPress
 16069 ;; This function uses a non-reentrant model
 16070 ;;
 16071                           
 16072                           
 16073                           ;psect for function i1_IR_GetIndex
 16074  037D                     i1_IR_GetIndex:	
 16075                           
 16076                           ;incstack = 0
 16077                           ; Regs used in i1_IR_GetIndex: [wreg-fsr0h+status,2+status,0]
 16078                           ;i1IR_GetIndex@keynum stored from wreg
 16079  037D  00F0               	movwf	i1IR_GetIndex@keynum
 16080                           
 16081                           ;ir.c: 11: uint8_t idx = 0xFF;
 16082  037E  30FF               	movlw	255
 16083  037F  00F1               	movwf	i1IR_GetIndex@idx
 16084                           
 16085                           ;ir.c: 12: switch (keynum) {
 16086  0380  2B97               	goto	i1l4443
 16087  0381                     i1l900:	
 16088  0381                     i1l4401:	
 16089                           
 16090                           ;ir.c: 14: case 0x05:
 16091                           ;ir.c: 15: case 0x14:
 16092                           ;ir.c: 16: case 0x1D:
 16093                           ;ir.c: 17: idx = 0;
 16094  0381  01F1               	clrf	i1IR_GetIndex@idx
 16095                           
 16096                           ;ir.c: 18: break;
 16097  0382  2C08               	goto	i1l4445
 16098  0383                     i1l906:	
 16099                           
 16100                           ;ir.c: 20: case 0x06:
 16101                           ;ir.c: 21: case 0x0B:
 16102                           ;ir.c: 22: case 0x1E:
 16103                           ;ir.c: 23: idx = 1;
 16104  0383  01F1               	clrf	i1IR_GetIndex@idx
 16105  0384  0AF1               	incf	i1IR_GetIndex@idx,f
 16106                           
 16107                           ;ir.c: 24: break;
 16108  0385  2C08               	goto	i1l4445
 16109  0386                     i1l909:	
 16110  0386                     i1l4403:	
 16111                           
 16112                           ;ir.c: 26: case 0x11:
 16113                           ;ir.c: 27: case 0x1A:
 16114                           ;ir.c: 28: case 0x07:
 16115                           ;ir.c: 29: idx = 2;
 16116  0386  3002               	movlw	2
 16117  0387  2B95               	goto	L31
 16118  0388                     i1l913:	
 16119                           ;ir.c: 30: break;
 16120                           
 16121  0388                     i1l4405:	
 16122                           
 16123                           ;ir.c: 32: case 0x5E:
 16124                           ;ir.c: 33: case 0x03:
 16125                           ;ir.c: 34: case 0x18:
 16126                           ;ir.c: 35: idx = 3;
 16127  0388  3003               	movlw	3
 16128  0389  2B95               	goto	L31
 16129  038A                     i1l4407:	
 16130                           ;ir.c: 36: break;
 16131                           
 16132                           
 16133                           ;ir.c: 38: case 0x15:
 16134                           ;ir.c: 39: case 0x08:
 16135                           ;ir.c: 40: idx = 4;
 16136  038A  3004               	movlw	4
 16137  038B  2B95               	goto	L31
 16138  038C                     i1l4415:	
 16139                           ;ir.c: 41: break;
 16140                           
 16141                           
 16142                           ;ir.c: 55: idx = 5;
 16143  038C  3005               	movlw	5
 16144  038D  2B95               	goto	L31
 16145  038E                     i1l4417:	
 16146                           ;ir.c: 56: break;
 16147                           
 16148                           
 16149                           ;ir.c: 58: idx = 6;
 16150  038E  3006               	movlw	6
 16151  038F  2B95               	goto	L31
 16152  0390                     i1l4419:	
 16153                           ;ir.c: 59: break;
 16154                           
 16155                           
 16156                           ;ir.c: 61: idx = 7;
 16157  0390  3007               	movlw	7
 16158  0391  2B95               	goto	L31
 16159  0392                     i1l4421:	
 16160                           ;ir.c: 62: break;
 16161                           
 16162                           
 16163                           ;ir.c: 64: idx = 8;
 16164  0392  3008               	movlw	8
 16165  0393  2B95               	goto	L31
 16166  0394                     i1l4439:	
 16167                           ;ir.c: 65: break;
 16168                           
 16169                           
 16170                           ;ir.c: 94: idx = 9;
 16171  0394  3009               	movlw	9
 16172  0395                     L31:	
 16173  0395  00F1               	movwf	i1IR_GetIndex@idx
 16174                           
 16175                           ;ir.c: 95: break;
 16176  0396  2C08               	goto	i1l4445
 16177  0397                     i1l4443:	
 16178  0397  0870               	movf	i1IR_GetIndex@keynum,w
 16179                           
 16180                           ; Switch size 1, requested type "space"
 16181                           ; Number of cases is 37, Range of values is 2 to 94
 16182                           ; switch strategies available:
 16183                           ; Name         Instructions Cycles
 16184                           ; simple_byte          112    57 (average)
 16185                           ; direct_byte          195     9 (fixed)
 16186                           ; jumptable            263     9 (fixed)
 16187                           ;	Chosen strategy is simple_byte
 16188  0398  3A02               	xorlw	2	; case 2
 16189  0399  1903               	skipnz
 16190  039A  2B90               	goto	i1l4419
 16191  039B  3A01               	xorlw	1	; case 3
 16192  039C  1903               	skipnz
 16193  039D  2B88               	goto	i1l4405
 16194  039E  3A06               	xorlw	6	; case 5
 16195  039F  1903               	skipnz
 16196  03A0  2B81               	goto	i1l4401
 16197  03A1  3A03               	xorlw	3	; case 6
 16198  03A2  1903               	skipnz
 16199  03A3  2B83               	goto	i1l906
 16200  03A4  3A01               	xorlw	1	; case 7
 16201  03A5  1903               	skipnz
 16202  03A6  2B86               	goto	i1l4403
 16203  03A7  3A0F               	xorlw	15	; case 8
 16204  03A8  1903               	skipnz
 16205  03A9  2B8A               	goto	i1l4407
 16206  03AA  3A02               	xorlw	2	; case 10
 16207  03AB  1903               	skipnz
 16208  03AC  2B88               	goto	i1l4405
 16209  03AD  3A01               	xorlw	1	; case 11
 16210  03AE  1903               	skipnz
 16211  03AF  2B83               	goto	i1l906
 16212  03B0  3A07               	xorlw	7	; case 12
 16213  03B1  1903               	skipnz
 16214  03B2  2B86               	goto	i1l4403
 16215  03B3  3A01               	xorlw	1	; case 13
 16216  03B4  1903               	skipnz
 16217  03B5  2B81               	goto	i1l900
 16218  03B6  3A03               	xorlw	3	; case 14
 16219  03B7  1903               	skipnz
 16220  03B8  2B83               	goto	i1l906
 16221  03B9  3A01               	xorlw	1	; case 15
 16222  03BA  1903               	skipnz
 16223  03BB  2B88               	goto	i1l4405
 16224  03BC  3A1F               	xorlw	31	; case 16
 16225  03BD  1903               	skipnz
 16226  03BE  2B86               	goto	i1l4403
 16227  03BF  3A01               	xorlw	1	; case 17
 16228  03C0  1903               	skipnz
 16229  03C1  2B86               	goto	i1l4403
 16230  03C2  3A03               	xorlw	3	; case 18
 16231  03C3  1903               	skipnz
 16232  03C4  2B8A               	goto	i1l4407
 16233  03C5  3A01               	xorlw	1	; case 19
 16234  03C6  1903               	skipnz
 16235  03C7  2B8C               	goto	i1l4415
 16236  03C8  3A07               	xorlw	7	; case 20
 16237  03C9  1903               	skipnz
 16238  03CA  2B81               	goto	i1l4401
 16239  03CB  3A01               	xorlw	1	; case 21
 16240  03CC  1903               	skipnz
 16241  03CD  2B8A               	goto	i1l4407
 16242  03CE  3A02               	xorlw	2	; case 23
 16243  03CF  1903               	skipnz
 16244  03D0  2B83               	goto	i1l906
 16245  03D1  3A0F               	xorlw	15	; case 24
 16246  03D2  1903               	skipnz
 16247  03D3  2B88               	goto	i1l4405
 16248  03D4  3A02               	xorlw	2	; case 26
 16249  03D5  1903               	skipnz
 16250  03D6  2B86               	goto	i1l4403
 16251  03D7  3A07               	xorlw	7	; case 29
 16252  03D8  1903               	skipnz
 16253  03D9  2B81               	goto	i1l4401
 16254  03DA  3A03               	xorlw	3	; case 30
 16255  03DB  1903               	skipnz
 16256  03DC  2B83               	goto	i1l906
 16257  03DD  3A01               	xorlw	1	; case 31
 16258  03DE  1903               	skipnz
 16259  03DF  2B86               	goto	i1l909
 16260  03E0  3A5D               	xorlw	93	; case 66
 16261  03E1  1903               	skipnz
 16262  03E2  2B88               	goto	i1l913
 16263  03E3  3A06               	xorlw	6	; case 68
 16264  03E4  1903               	skipnz
 16265  03E5  2B8E               	goto	i1l4417
 16266  03E6  3A01               	xorlw	1	; case 69
 16267  03E7  1903               	skipnz
 16268  03E8  2B8C               	goto	i1l4415
 16269  03E9  3A03               	xorlw	3	; case 70
 16270  03EA  1903               	skipnz
 16271  03EB  2B92               	goto	i1l4421
 16272  03EC  3A0E               	xorlw	14	; case 72
 16273  03ED  1903               	skipnz
 16274  03EE  2B94               	goto	i1l4439
 16275  03EF  3A03               	xorlw	3	; case 75
 16276  03F0  1903               	skipnz
 16277  03F1  2B81               	goto	i1l4401
 16278  03F2  3A07               	xorlw	7	; case 76
 16279  03F3  1903               	skipnz
 16280  03F4  2B8E               	goto	i1l4417
 16281  03F5  3A02               	xorlw	2	; case 78
 16282  03F6  1903               	skipnz
 16283  03F7  2B92               	goto	i1l4421
 16284  03F8  3A01               	xorlw	1	; case 79
 16285  03F9  1903               	skipnz
 16286  03FA  2B90               	goto	i1l4419
 16287  03FB  3A1E               	xorlw	30	; case 81
 16288  03FC  1903               	skipnz
 16289  03FD  2B8A               	goto	i1l4407
 16290  03FE  3A0D               	xorlw	13	; case 92
 16291  03FF  1903               	skipnz
 16292  0400  2B83               	goto	i1l906
 16293  0401  3A01               	xorlw	1	; case 93
 16294  0402  1903               	skipnz
 16295  0403  2B8A               	goto	i1l4407
 16296  0404  3A03               	xorlw	3	; case 94
 16297  0405  1903               	skipnz
 16298  0406  2B88               	goto	i1l4405
 16299  0407  2C08               	goto	i1l4445
 16300  0408                     i1l4445:	
 16301                           
 16302                           ;ir.c: 99: return idx;
 16303  0408  0871               	movf	i1IR_GetIndex@idx,w
 16304  0409  0008               	return
 16305  040A                     __end_ofi1_IR_GetIndex:	
 16306  040A                     __ptext94:	
 16307 ;; *************** function i1_Led_StartNotice *****************
 16308 ;; Defined at:
 16309 ;;		line 419 in file "user/src/led.c"
 16310 ;; Parameters:    Size  Location     Type
 16311 ;;  cnt             1    wreg     unsigned char 
 16312 ;; Auto vars:     Size  Location     Type
 16313 ;;  cnt             1    1[COMMON] unsigned char 
 16314 ;; Return value:  Size  Location     Type
 16315 ;;                  1    wreg      void 
 16316 ;; Registers used:
 16317 ;;		wreg, status,2, status,0, pclath, cstack
 16318 ;; Tracked objects:
 16319 ;;		On entry : 1F/0
 16320 ;;		On exit  : 1F/8
 16321 ;;		Unchanged: 0/0
 16322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16324 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;Total ram usage:        2 bytes
 16328 ;; Hardware stack levels used:    1
 16329 ;; Hardware stack levels required when called:    1
 16330 ;; This function calls:
 16331 ;;		i1_TMR4_StartTimer
 16332 ;; This function is called by:
 16333 ;;		_IR_ScanLongPress
 16334 ;; This function uses a non-reentrant model
 16335 ;;
 16336                           
 16337                           
 16338                           ;psect for function i1_Led_StartNotice
 16339  040A                     i1_Led_StartNotice:	
 16340                           
 16341                           ;incstack = 0
 16342                           ; Regs used in i1_Led_StartNotice: [wreg+status,2+status,0+pclath+cstack]
 16343                           ;i1Led_StartNotice@cnt stored from wreg
 16344  040A  00F1               	movwf	i1Led_StartNotice@cnt
 16345                           
 16346                           ;led.c: 420: gLedRunPara.mNoticeCount = cnt;
 16347  040B  00F0               	movwf	??i1_Led_StartNotice
 16348  040C  0DF0               	rlf	??i1_Led_StartNotice,f
 16349  040D  0DF0               	rlf	??i1_Led_StartNotice,f
 16350  040E  0021               	movlb	1	; select bank1
 16351  040F  085E               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
 16352  0410  0670               	xorwf	??i1_Led_StartNotice,w
 16353  0411  3903               	andlw	-253
 16354  0412  0670               	xorwf	??i1_Led_StartNotice,w
 16355  0413  00DE               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
 16356                           
 16357                           ;led.c: 421: TMR4_StartTimer();
 16358  0414  24C5               	fcall	i1_TMR4_StartTimer
 16359  0415  0008               	return
 16360  0416                     __end_ofi1_Led_StartNotice:	
 16361  0416                     __ptext97:	
 16362 ;; *************** function _Led_SetCustom *****************
 16363 ;; Defined at:
 16364 ;;		line 279 in file "user/src/led.c"
 16365 ;; Parameters:    Size  Location     Type
 16366 ;;  idx             1    wreg     unsigned char 
 16367 ;;  pValue          1    6[COMMON] PTR unsigned int 
 16368 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), 
 16369 ;; Auto vars:     Size  Location     Type
 16370 ;;  idx             1    2[BANK0 ] unsigned char 
 16371 ;;  i               1    3[BANK0 ] unsigned char 
 16372 ;;  value           2    0[BANK0 ] unsigned int 
 16373 ;; Return value:  Size  Location     Type
 16374 ;;                  1    wreg      void 
 16375 ;; Registers used:
 16376 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16377 ;; Tracked objects:
 16378 ;;		On entry : 1F/0
 16379 ;;		On exit  : 1F/0
 16380 ;;		Unchanged: 0/0
 16381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16382 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16383 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16384 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16385 ;;      Totals:         7       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;Total ram usage:       11 bytes
 16387 ;; Hardware stack levels used:    1
 16388 ;; Hardware stack levels required when called:    1
 16389 ;; This function calls:
 16390 ;;		i1___wmul
 16391 ;; This function is called by:
 16392 ;;		_IR_ScanLongPress
 16393 ;; This function uses a non-reentrant model
 16394 ;;
 16395                           
 16396                           
 16397                           ;psect for function _Led_SetCustom
 16398  0416                     _Led_SetCustom:	
 16399                           
 16400                           ;incstack = 0
 16401                           ; Regs used in _Led_SetCustom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16402                           ;Led_SetCustom@idx stored from wreg
 16403  0416  00A2               	movwf	Led_SetCustom@idx
 16404                           
 16405                           ;led.c: 280: uint16_t value;
 16406                           ;led.c: 281: if (idx >= 4) {
 16407  0417  3004               	movlw	4
 16408  0418  0222               	subwf	Led_SetCustom@idx,w
 16409  0419  1803               	btfsc	3,0
 16410  041A  0008               	return
 16411                           
 16412                           ;led.c: 283: }
 16413                           ;led.c: 284: for (uint8_t i = 0; i < 5; i++) {
 16414  041B  01A3               	clrf	Led_SetCustom@i
 16415  041C                     i1l4231:	
 16416                           
 16417                           ;led.c: 285: value = *pValue++;
 16418  041C  0876               	movf	Led_SetCustom@pValue,w
 16419  041D  0086               	movwf	6
 16420  041E  0187               	clrf	7
 16421  041F  3F40               	moviw [0]fsr1
 16422  0420  00A0               	movwf	Led_SetCustom@value
 16423  0421  3F41               	moviw [1]fsr1
 16424  0422  00A1               	movwf	Led_SetCustom@value+1
 16425  0423  3003               	movlw	3
 16426  0424  0AF6               	incf	Led_SetCustom@pValue,f
 16427  0425  0AF6               	incf	Led_SetCustom@pValue,f
 16428                           
 16429                           ;led.c: 289: if (value <= 1000)
 16430  0426  0221               	subwf	Led_SetCustom@value+1,w
 16431  0427  30E9               	movlw	233
 16432  0428  1903               	skipnz
 16433  0429  0220               	subwf	Led_SetCustom@value,w
 16434  042A  1803               	skipnc
 16435  042B  2C4D               	goto	i1l4239
 16436                           
 16437                           ;led.c: 291: {
 16438                           ;led.c: 292: gLedPara.mCustom[idx][i] = value;
 16439  042C  0823               	movf	Led_SetCustom@i,w
 16440  042D  00F7               	movwf	??_Led_SetCustom
 16441  042E  01F8               	clrf	??_Led_SetCustom+1
 16442  042F  35F7               	lslf	??_Led_SetCustom,f
 16443  0430  0DF8               	rlf	??_Led_SetCustom+1,f
 16444  0431  0822               	movf	Led_SetCustom@idx,w
 16445  0432  00F0               	movwf	i1___wmul@multiplier
 16446  0433  300A               	movlw	10
 16447  0434  01F1               	clrf	i1___wmul@multiplier+1
 16448  0435  00F2               	movwf	i1___wmul@multiplicand
 16449  0436  01F3               	clrf	i1___wmul@multiplicand+1
 16450  0437  2453  3180         	fcall	i1___wmul
 16451  0439  3088               	movlw	136
 16452  043A  00F9               	movwf	??_Led_SetCustom+2
 16453  043B  3023               	movlw	35
 16454  043C  00FA               	movwf	??_Led_SetCustom+3
 16455  043D  0870               	movf	?i1___wmul,w
 16456  043E  0779               	addwf	??_Led_SetCustom+2,w
 16457  043F  00FB               	movwf	??_Led_SetCustom+4
 16458  0440  0871               	movf	?i1___wmul+1,w
 16459  0441  3D7A               	addwfc	??_Led_SetCustom+3,w
 16460  0442  00FC               	movwf	??_Led_SetCustom+5
 16461  0443  0877               	movf	??_Led_SetCustom,w
 16462  0444  077B               	addwf	??_Led_SetCustom+4,w
 16463  0445  0086               	movwf	6
 16464  0446  0878               	movf	??_Led_SetCustom+1,w
 16465  0447  3D7C               	addwfc	??_Led_SetCustom+5,w
 16466  0448  0087               	movwf	7
 16467  0449  0820               	movf	Led_SetCustom@value,w
 16468  044A  3FC0               	movwi [0]fsr1
 16469  044B  0821               	movf	Led_SetCustom@value+1,w
 16470  044C  3FC1               	movwi [1]fsr1
 16471  044D                     i1l4239:	
 16472  044D  3005               	movlw	5
 16473  044E  0AA3               	incf	Led_SetCustom@i,f
 16474  044F  0223               	subwf	Led_SetCustom@i,w
 16475  0450  1803               	btfsc	3,0
 16476  0451  0008               	return
 16477  0452  2C1C               	goto	i1l4231
 16478  0453                     __end_of_Led_SetCustom:	
 16479  0453                     __ptext98:	
 16480 ;; *************** function i1___wmul *****************
 16481 ;; Defined at:
 16482 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
 16483 ;; Parameters:    Size  Location     Type
 16484 ;;  multiplier      2    0[COMMON] unsigned int 
 16485 ;;  multiplicand    2    2[COMMON] unsigned int 
 16486 ;; Auto vars:     Size  Location     Type
 16487 ;;  __wmul          2    4[COMMON] unsigned int 
 16488 ;; Return value:  Size  Location     Type
 16489 ;;                  2    0[COMMON] unsigned int 
 16490 ;; Registers used:
 16491 ;;		wreg, status,2, status,0
 16492 ;; Tracked objects:
 16493 ;;		On entry : 1F/0
 16494 ;;		On exit  : 1F/0
 16495 ;;		Unchanged: 1F/0
 16496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16497 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16501 ;;Total ram usage:        6 bytes
 16502 ;; Hardware stack levels used:    1
 16503 ;; This function calls:
 16504 ;;		Nothing
 16505 ;; This function is called by:
 16506 ;;		_Led_SetCustom
 16507 ;;		_Led_DynamicWave
 16508 ;;		_Led_DynamicMoon
 16509 ;;		_Led_DynamicCloud
 16510 ;;		_Led_DynamicStorm
 16511 ;; This function uses a non-reentrant model
 16512 ;;
 16513                           
 16514                           
 16515                           ;psect for function i1___wmul
 16516  0453                     i1___wmul:	
 16517                           
 16518                           ;incstack = 0
 16519                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 16520  0453  01F4               	clrf	i1___wmul@product
 16521  0454  01F5               	clrf	i1___wmul@product+1
 16522  0455                     i1l4093:	
 16523  0455  1C70               	btfss	i1___wmul@multiplier,0
 16524  0456  2C5B               	goto	i1l4097
 16525  0457  0872               	movf	i1___wmul@multiplicand,w
 16526  0458  07F4               	addwf	i1___wmul@product,f
 16527  0459  0873               	movf	i1___wmul@multiplicand+1,w
 16528  045A  3DF5               	addwfc	i1___wmul@product+1,f
 16529  045B                     i1l4097:	
 16530  045B  35F2               	lslf	i1___wmul@multiplicand,f
 16531  045C  0DF3               	rlf	i1___wmul@multiplicand+1,f
 16532  045D  36F1               	lsrf	i1___wmul@multiplier+1,f
 16533  045E  0CF0               	rrf	i1___wmul@multiplier,f
 16534  045F  0870               	movf	i1___wmul@multiplier,w
 16535  0460  0471               	iorwf	i1___wmul@multiplier+1,w
 16536  0461  1D03               	btfss	3,2
 16537  0462  2C55               	goto	i1l4093
 16538  0463  0875               	movf	i1___wmul@product+1,w
 16539  0464  00F1               	movwf	?i1___wmul+1
 16540  0465  0874               	movf	i1___wmul@product,w
 16541  0466  00F0               	movwf	?i1___wmul
 16542  0467  0008               	return
 16543  0468                     __end_ofi1___wmul:	
 16544  0468                     __ptext93:	
 16545 ;; *************** function i1_Util_DecValue *****************
 16546 ;; Defined at:
 16547 ;;		line 15 in file "user/src/util.c"
 16548 ;; Parameters:    Size  Location     Type
 16549 ;;  pSrc            2    0[COMMON] PTR unsigned int 
 16550 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), gLedPara(117), 
 16551 ;;  min             2    2[COMMON] unsigned int 
 16552 ;;  delta           2    4[COMMON] unsigned int 
 16553 ;; Auto vars:     Size  Location     Type
 16554 ;;		None
 16555 ;; Return value:  Size  Location     Type
 16556 ;;                  1    wreg      void 
 16557 ;; Registers used:
 16558 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16559 ;; Tracked objects:
 16560 ;;		On entry : 1F/0
 16561 ;;		On exit  : 1F/0
 16562 ;;		Unchanged: 1F/0
 16563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16564 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16568 ;;Total ram usage:       10 bytes
 16569 ;; Hardware stack levels used:    1
 16570 ;; This function calls:
 16571 ;;		Nothing
 16572 ;; This function is called by:
 16573 ;;		_IR_ScanLongPress
 16574 ;; This function uses a non-reentrant model
 16575 ;;
 16576                           
 16577                           
 16578                           ;psect for function i1_Util_DecValue
 16579  0468                     i1_Util_DecValue:	
 16580                           
 16581                           ;util.c: 17: if( *pSrc > min + delta )
 16582                           
 16583                           ;incstack = 0
 16584                           ; Regs used in i1_Util_DecValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 16585  0468  0870               	movf	i1Util_DecValue@pSrc,w
 16586  0469  0086               	movwf	6
 16587  046A  0871               	movf	i1Util_DecValue@pSrc+1,w
 16588  046B  0087               	movwf	7
 16589  046C  3F40               	moviw [0]fsr1
 16590  046D  00F6               	movwf	??i1_Util_DecValue
 16591  046E  3F41               	moviw [1]fsr1
 16592  046F  00F7               	movwf	??i1_Util_DecValue+1
 16593  0470  0874               	movf	i1Util_DecValue@delta,w
 16594  0471  0772               	addwf	i1Util_DecValue@min,w
 16595  0472  00F8               	movwf	??i1_Util_DecValue+2
 16596  0473  0875               	movf	i1Util_DecValue@delta+1,w
 16597  0474  3D73               	addwfc	i1Util_DecValue@min+1,w
 16598  0475  00F9               	movwf	??i1_Util_DecValue+3
 16599  0476  0877               	movf	??i1_Util_DecValue+1,w
 16600  0477  0279               	subwf	??i1_Util_DecValue+3,w
 16601  0478  1D03               	skipz
 16602  0479  2C7C               	goto	u319_25
 16603  047A  0876               	movf	??i1_Util_DecValue,w
 16604  047B  0278               	subwf	??i1_Util_DecValue+2,w
 16605  047C                     u319_25:	
 16606                           
 16607                           ;util.c: 18: {
 16608                           ;util.c: 19: (*pSrc) -= delta;
 16609  047C  0870               	movf	i1Util_DecValue@pSrc,w
 16610  047D  0086               	movwf	6
 16611  047E  0871               	movf	i1Util_DecValue@pSrc+1,w
 16612  047F  0087               	movwf	7
 16613  0480  1803               	skipnc
 16614  0481  2C89               	goto	L24
 16615  0482  0874               	movf	i1Util_DecValue@delta,w
 16616  0483  0281               	subwf	1,f
 16617  0484  3141               	addfsr 1,1
 16618  0485  0875               	movf	i1Util_DecValue@delta+1,w
 16619  0486  3B81               	subwfb	1,f
 16620  0487  317F               	addfsr 1,-1
 16621                           
 16622                           ;util.c: 20: }
 16623  0488  0008               	return
 16624  0489                     L24:	
 16625                           ;util.c: 21: else
 16626                           ;util.c: 22: {
 16627                           ;util.c: 23: *pSrc = min;
 16628                           
 16629  0489  0872               	movf	i1Util_DecValue@min,w
 16630  048A  3FC0               	movwi [0]fsr1
 16631  048B  0873               	movf	i1Util_DecValue@min+1,w
 16632  048C  3FC1               	movwi [1]fsr1
 16633  048D  0008               	return
 16634  048E                     __end_ofi1_Util_DecValue:	
 16635  048E                     __ptext92:	
 16636 ;; *************** function i1_Util_IncValue *****************
 16637 ;; Defined at:
 16638 ;;		line 3 in file "user/src/util.c"
 16639 ;; Parameters:    Size  Location     Type
 16640 ;;  pSrc            2    0[COMMON] PTR unsigned int 
 16641 ;;		 -> gLedRunPara.mCurrentBright(10), gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), 
 16642 ;;		 -> gLedPara(117), 
 16643 ;;  max             2    2[COMMON] unsigned int 
 16644 ;;  delta           2    4[COMMON] unsigned int 
 16645 ;; Auto vars:     Size  Location     Type
 16646 ;;		None
 16647 ;; Return value:  Size  Location     Type
 16648 ;;                  1    wreg      void 
 16649 ;; Registers used:
 16650 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16651 ;; Tracked objects:
 16652 ;;		On entry : 1F/0
 16653 ;;		On exit  : 1F/0
 16654 ;;		Unchanged: 1F/0
 16655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16656 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16658 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16659 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16660 ;;Total ram usage:       10 bytes
 16661 ;; Hardware stack levels used:    1
 16662 ;; This function calls:
 16663 ;;		Nothing
 16664 ;; This function is called by:
 16665 ;;		_IR_ScanLongPress
 16666 ;; This function uses a non-reentrant model
 16667 ;;
 16668                           
 16669                           
 16670                           ;psect for function i1_Util_IncValue
 16671  048E                     i1_Util_IncValue:	
 16672                           
 16673                           ;util.c: 5: if( *pSrc + delta < max )
 16674                           
 16675                           ;incstack = 0
 16676                           ; Regs used in i1_Util_IncValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 16677  048E  0870               	movf	i1Util_IncValue@pSrc,w
 16678  048F  0086               	movwf	6
 16679  0490  0871               	movf	i1Util_IncValue@pSrc+1,w
 16680  0491  0087               	movwf	7
 16681  0492  3F40               	moviw [0]fsr1
 16682  0493  00F6               	movwf	??i1_Util_IncValue
 16683  0494  3F41               	moviw [1]fsr1
 16684  0495  00F7               	movwf	??i1_Util_IncValue+1
 16685  0496  0874               	movf	i1Util_IncValue@delta,w
 16686  0497  0776               	addwf	??i1_Util_IncValue,w
 16687  0498  00F8               	movwf	??i1_Util_IncValue+2
 16688  0499  0875               	movf	i1Util_IncValue@delta+1,w
 16689  049A  3D77               	addwfc	??i1_Util_IncValue+1,w
 16690  049B  00F9               	movwf	??i1_Util_IncValue+3
 16691  049C  0873               	movf	i1Util_IncValue@max+1,w
 16692  049D  0279               	subwf	??i1_Util_IncValue+3,w
 16693  049E  1D03               	skipz
 16694  049F  2CA2               	goto	u318_25
 16695  04A0  0872               	movf	i1Util_IncValue@max,w
 16696  04A1  0278               	subwf	??i1_Util_IncValue+2,w
 16697  04A2                     u318_25:	
 16698                           
 16699                           ;util.c: 6: {
 16700                           ;util.c: 7: (*pSrc) += delta;
 16701  04A2  0870               	movf	i1Util_IncValue@pSrc,w
 16702  04A3  0086               	movwf	6
 16703  04A4  0871               	movf	i1Util_IncValue@pSrc+1,w
 16704  04A5  0087               	movwf	7
 16705  04A6  1803               	skipnc
 16706  04A7  2CAF               	goto	L23
 16707  04A8  0874               	movf	i1Util_IncValue@delta,w
 16708  04A9  0781               	addwf	1,f
 16709  04AA  3141               	addfsr 1,1
 16710  04AB  0875               	movf	i1Util_IncValue@delta+1,w
 16711  04AC  3D81               	addwfc	1,f
 16712  04AD  317F               	addfsr 1,-1
 16713                           
 16714                           ;util.c: 8: }
 16715  04AE  0008               	return
 16716  04AF                     L23:	
 16717                           ;util.c: 9: else
 16718                           ;util.c: 10: {
 16719                           ;util.c: 11: *pSrc = max;
 16720                           
 16721  04AF  0872               	movf	i1Util_IncValue@max,w
 16722  04B0  3FC0               	movwi [0]fsr1
 16723  04B1  0873               	movf	i1Util_IncValue@max+1,w
 16724  04B2  3FC1               	movwi [1]fsr1
 16725  04B3  0008               	return
 16726  04B4                     __end_ofi1_Util_IncValue:	
 16727  04B4                     __ptext82:	
 16728 ;; *************** function i1_Led_UpdateBright *****************
 16729 ;; Defined at:
 16730 ;;		line 183 in file "user/src/led.c"
 16731 ;; Parameters:    Size  Location     Type
 16732 ;;		None
 16733 ;; Auto vars:     Size  Location     Type
 16734 ;;  Led_UpdateBr    1    4[COMMON] unsigned char 
 16735 ;; Return value:  Size  Location     Type
 16736 ;;                  1    wreg      void 
 16737 ;; Registers used:
 16738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16739 ;; Tracked objects:
 16740 ;;		On entry : 1F/0
 16741 ;;		On exit  : 14/4
 16742 ;;		Unchanged: 0/0
 16743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16747 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16748 ;;Total ram usage:        1 bytes
 16749 ;; Hardware stack levels used:    1
 16750 ;; Hardware stack levels required when called:    1
 16751 ;; This function calls:
 16752 ;;		i1_PWM1_LoadDutyValue
 16753 ;;		i1_PWM2_LoadDutyValue
 16754 ;;		i1_PWM3_LoadDutyValue
 16755 ;;		i1_PWM4_LoadDutyValue
 16756 ;;		i1_PWM5_LoadDutyValue
 16757 ;; This function is called by:
 16758 ;;		_Led_DynamicWave
 16759 ;;		_Led_DynamicMoon
 16760 ;;		_Led_DynamicCloud
 16761 ;;		_Led_DynamicStorm
 16762 ;; This function uses a non-reentrant model
 16763 ;;
 16764                           
 16765                           
 16766                           ;psect for function i1_Led_UpdateBright
 16767  04B4                     i1_Led_UpdateBright:	
 16768                           
 16769                           ;led.c: 184: for (uint8_t i = 0; i < 5; i++) {
 16770                           
 16771                           ;incstack = 0
 16772                           ; Regs used in i1_Led_UpdateBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16773  04B4  01F4               	clrf	i1Led_UpdateBright@i
 16774  04B5                     i1l6259:	
 16775                           
 16776                           ;led.c: 185: loadDuty[i](gLedRunPara.mCurrentBright[i]);
 16777  04B5  3574               	lslf	i1Led_UpdateBright@i,w
 16778  04B6  2578               	fcall	PL134	;call to abstracted procedure
 16779  04B7  3574               	lslf	i1Led_UpdateBright@i,w
 16780  04B8  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
 16781  04B9  0086               	movwf	6
 16782  04BA  3F41               	moviw [1]fsr1
 16783  04BB  008A               	movwf	10
 16784  04BC  3F40               	moviw [0]fsr1
 16785  04BD  000A               	callw
 16786  04BE  3005               	movlw	5
 16787  04BF  3180               	pagesel	$
 16788  04C0  0AF4               	incf	i1Led_UpdateBright@i,f
 16789  04C1  0274               	subwf	i1Led_UpdateBright@i,w
 16790  04C2  1803               	btfsc	3,0
 16791  04C3  0008               	return
 16792  04C4  2CB5               	goto	i1l6259
 16793  04C5                     __end_ofi1_Led_UpdateBright:	
 16794  04C5                     __ptext95:	
 16795 ;; *************** function i1_TMR4_StartTimer *****************
 16796 ;; Defined at:
 16797 ;;		line 17 in file "driver/src/tmr4.c"
 16798 ;; Parameters:    Size  Location     Type
 16799 ;;		None
 16800 ;; Auto vars:     Size  Location     Type
 16801 ;;		None
 16802 ;; Return value:  Size  Location     Type
 16803 ;;                  1    wreg      void 
 16804 ;; Registers used:
 16805 ;;		None
 16806 ;; Tracked objects:
 16807 ;;		On entry : 1F/1
 16808 ;;		On exit  : 1F/8
 16809 ;;		Unchanged: 0/0
 16810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;Total ram usage:        0 bytes
 16816 ;; Hardware stack levels used:    1
 16817 ;; This function calls:
 16818 ;;		Nothing
 16819 ;; This function is called by:
 16820 ;;		i1_Led_StartNotice
 16821 ;; This function uses a non-reentrant model
 16822 ;;
 16823                           
 16824                           
 16825                           ;psect for function i1_TMR4_StartTimer
 16826  04C5                     i1_TMR4_StartTimer:	
 16827                           
 16828                           ;tmr4.c: 19: T4CONbits.TMR4ON = 1;
 16829                           
 16830                           ;incstack = 0
 16831                           ; Regs used in i1_TMR4_StartTimer: []
 16832  04C5  0028               	movlb	8	; select bank8
 16833  04C6  1517               	bsf	23,2	;volatile
 16834  04C7  0008               	return
 16835  04C8                     __end_ofi1_TMR4_StartTimer:	
 16836  04C8                     PL22:	
 16837  04C8  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 16838  04C9  0086               	movwf	6
 16839  04CA  3001               	movlw	1
 16840  04CB  0187               	clrf	7
 16841  04CC  0281               	subwf	1,f
 16842  04CD  3000               	movlw	0
 16843  04CE  3141               	addfsr 1,1
 16844  04CF  3B81               	subwfb	1,f
 16845  04D0  317F               	addfsr 1,-1
 16846  04D1  0008               	return
 16847  04D2                     __end_ofPL22:	
 16848  04D2                     PL26:	
 16849  04D2  0086               	movwf	6
 16850  04D3  3023               	movlw	35
 16851  04D4  0087               	movwf	7
 16852  04D5  3142               	addfsr 1,2
 16853  04D6  0801               	movf	1,w
 16854  04D7  3E00               	addlw	low (_GAIN| (0+32768))
 16855  04D8  0084               	movwf	4
 16856  04D9  3098               	movlw	high (_GAIN| (0+32768))
 16857  04DA  1803               	skipnc
 16858  04DB  3E01               	addlw	1
 16859  04DC  0085               	movwf	5
 16860  04DD  0800               	movf	0,w	;code access
 16861  04DE  00F0               	movwf	i1___wmul@multiplier
 16862  04DF  0008               	return
 16863  04E0                     __end_ofPL26:	
 16864  04E0                     PL52:	
 16865  04E0  0086               	movwf	6
 16866  04E1  3F40               	moviw [0]fsr1
 16867  04E2  00F6               	movwf	??_Led_Ramp+2
 16868  04E3  3F41               	moviw [1]fsr1
 16869  04E4  00F7               	movwf	??_Led_Ramp+3
 16870  04E5  0876               	movf	??_Led_Ramp+2,w
 16871  04E6  3E01               	addlw	1
 16872  04E7  00F8               	movwf	??_Led_Ramp+4
 16873  04E8  3000               	movlw	0
 16874  04E9  3D77               	addwfc	??_Led_Ramp+3,w
 16875  04EA  00F9               	movwf	??_Led_Ramp+5
 16876  04EB  0875               	movf	??_Led_Ramp+1,w
 16877  04EC  0279               	subwf	??_Led_Ramp+5,w
 16878  04ED  1D03               	skipz
 16879  04EE  0008               	return
 16880  04EF  0874               	movf	??_Led_Ramp,w
 16881  04F0  0278               	subwf	??_Led_Ramp+4,w
 16882  04F1  0008               	return
 16883  04F2                     __end_ofPL52:	
 16884  04F2                     PL56:	
 16885  04F2  0AC5               	incf	IR_ScanLongPress@cnt,f
 16886  04F3  1903               	skipnz
 16887  04F4  0AC6               	incf	IR_ScanLongPress@cnt+1,f
 16888  04F5  3002               	movlw	2
 16889  04F6  0646               	xorwf	IR_ScanLongPress@cnt+1,w
 16890  04F7  0445               	iorwf	IR_ScanLongPress@cnt,w
 16891  04F8  0008               	return
 16892  04F9                     __end_ofPL56:	
 16893  04F9                     PL58:	
 16894  04F9  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 16895  04FA  0086               	movwf	6
 16896  04FB  3001               	movlw	1
 16897  04FC  0187               	clrf	7
 16898  04FD  0781               	addwf	1,f
 16899  04FE  3141               	addfsr 1,1
 16900  04FF  0008               	return
 16901  0500                     __end_ofPL58:	
 16902  0500                     PL68:	
 16903  0500  01A5               	clrf	??_IR_ScanLongPress+1
 16904  0501  35A4               	lslf	??_IR_ScanLongPress,f
 16905  0502  0DA5               	rlf	??_IR_ScanLongPress+1,f
 16906  0503  00A6               	movwf	??_IR_ScanLongPress+2
 16907  0504  3023               	movlw	35
 16908  0505  00A7               	movwf	??_IR_ScanLongPress+3
 16909  0506  0824               	movf	??_IR_ScanLongPress,w
 16910  0507  0726               	addwf	??_IR_ScanLongPress+2,w
 16911  0508  0008               	return
 16912  0509                     __end_ofPL68:	
 16913  0509                     PL74:	
 16914  0509  0086               	movwf	6
 16915  050A  3F40               	moviw [0]fsr1
 16916  050B  00FA               	movwf	??_Led_DynamicCloud+2
 16917  050C  3F41               	moviw [1]fsr1
 16918  050D  00FB               	movwf	??_Led_DynamicCloud+3
 16919  050E  0879               	movf	??_Led_DynamicCloud+1,w
 16920  050F  027B               	subwf	??_Led_DynamicCloud+3,w
 16921  0510  1D03               	skipz
 16922  0511  0008               	return
 16923  0512  0878               	movf	??_Led_DynamicCloud,w
 16924  0513  027A               	subwf	??_Led_DynamicCloud+2,w
 16925  0514  0008               	return
 16926  0515                     __end_ofPL74:	
 16927  0515                     PL76:	
 16928  0515  0086               	movwf	6
 16929  0516  3F40               	moviw [0]fsr1
 16930  0517  00FA               	movwf	??_Led_DynamicWave+2
 16931  0518  3F41               	moviw [1]fsr1
 16932  0519  00FB               	movwf	??_Led_DynamicWave+3
 16933  051A  0879               	movf	??_Led_DynamicWave+1,w
 16934  051B  027B               	subwf	??_Led_DynamicWave+3,w
 16935  051C  1D03               	skipz
 16936  051D  0008               	return
 16937  051E  0878               	movf	??_Led_DynamicWave,w
 16938  051F  027A               	subwf	??_Led_DynamicWave+2,w
 16939  0520  0008               	return
 16940  0521                     __end_ofPL76:	
 16941  0521                     PL84:	
 16942  0521  0086               	movwf	6
 16943  0522  3F40               	moviw [0]fsr1
 16944  0523  00FA               	movwf	??_Led_DynamicStorm+2
 16945  0524  3F41               	moviw [1]fsr1
 16946  0525  00FB               	movwf	??_Led_DynamicStorm+3
 16947  0526  0879               	movf	??_Led_DynamicStorm+1,w
 16948  0527  027B               	subwf	??_Led_DynamicStorm+3,w
 16949  0528  1D03               	skipz
 16950  0529  0008               	return
 16951  052A  0878               	movf	??_Led_DynamicStorm,w
 16952  052B  027A               	subwf	??_Led_DynamicStorm+2,w
 16953  052C  0008               	return
 16954  052D                     __end_ofPL84:	
 16955  052D                     PL88:	
 16956  052D  0086               	movwf	6
 16957  052E  3F40               	moviw [0]fsr1
 16958  052F  00FA               	movwf	??_Led_DynamicMoon+2
 16959  0530  3F41               	moviw [1]fsr1
 16960  0531  00FB               	movwf	??_Led_DynamicMoon+3
 16961  0532  0879               	movf	??_Led_DynamicMoon+1,w
 16962  0533  027B               	subwf	??_Led_DynamicMoon+3,w
 16963  0534  1D03               	skipz
 16964  0535  0008               	return
 16965  0536  0878               	movf	??_Led_DynamicMoon,w
 16966  0537  027A               	subwf	??_Led_DynamicMoon+2,w
 16967  0538  0008               	return
 16968  0539                     __end_ofPL88:	
 16969  0539                     PL96:	
 16970  0539  307B               	movlw	123
 16971  053A  0086               	movwf	6
 16972  053B  0C01               	rrf	1,w
 16973  053C  00FD               	movwf	??_Led_Run
 16974  053D  0CFD               	rrf	??_Led_Run,f
 16975  053E  0C7D               	rrf	??_Led_Run,w
 16976  053F  390F               	andlw	15
 16977  0540  0008               	return
 16978  0541                     __end_ofPL96:	
 16979  0541                     PL106:	
 16980  0541  0C01               	rrf	1,w
 16981  0542  00FD               	movwf	??_Led_Run
 16982  0543  0CFD               	rrf	??_Led_Run,f
 16983  0544  0C7D               	rrf	??_Led_Run,w
 16984  0545  390F               	andlw	15
 16985  0546  0008               	return
 16986  0547                     __end_ofPL106:	
 16987  0547                     PL118:	
 16988  0547  0081               	movwf	1
 16989  0548  3020               	movlw	32
 16990  0549  0AD7               	incf	_txHead,f
 16991  054A  0257               	subwf	_txHead,w
 16992  054B  1803               	btfsc	3,0
 16993  054C  01D7               	clrf	_txHead
 16994  054D  0021               	movlb	1	; select bank1
 16995  054E  03EC               	decf	_txRemain^(0+128),f
 16996  054F  0008               	return
 16997  0550                     __end_ofPL118:	
 16998  0550                     PL122:	
 16999  0550  0086               	movwf	6
 17000  0551  0187               	clrf	7
 17001  0552  3F40               	moviw [0]fsr1
 17002  0553  00F8               	movwf	??_Led_DynamicCloud
 17003  0554  3F41               	moviw [1]fsr1
 17004  0555  00F9               	movwf	??_Led_DynamicCloud+1
 17005  0556  352C               	lslf	Led_DynamicCloud@i,w
 17006  0557  0008               	return
 17007  0558                     __end_ofPL122:	
 17008  0558                     PL124:	
 17009  0558  0086               	movwf	6
 17010  0559  0187               	clrf	7
 17011  055A  3F40               	moviw [0]fsr1
 17012  055B  00F8               	movwf	??_Led_DynamicMoon
 17013  055C  3F41               	moviw [1]fsr1
 17014  055D  00F9               	movwf	??_Led_DynamicMoon+1
 17015  055E  352C               	lslf	Led_DynamicMoon@i,w
 17016  055F  0008               	return
 17017  0560                     __end_ofPL124:	
 17018  0560                     PL126:	
 17019  0560  1211               	bcf	17,4	;volatile
 17020  0561  0020               	movlb	0	; select bank0
 17021  0562  0857               	movf	_txHead,w
 17022  0563  3E20               	addlw	(low (_txBuf| (0+256)))& (0+255)
 17023  0564  0086               	movwf	6
 17024  0565  3001               	movlw	1	; select bank2/3
 17025  0566  0087               	movwf	7
 17026  0567  0008               	return
 17027  0568                     __end_ofPL126:	
 17028  0568                     PL128:	
 17029  0568  0086               	movwf	6
 17030  0569  0187               	clrf	7
 17031  056A  3F40               	moviw [0]fsr1
 17032  056B  00F8               	movwf	??_Led_DynamicWave
 17033  056C  3F41               	moviw [1]fsr1
 17034  056D  00F9               	movwf	??_Led_DynamicWave+1
 17035  056E  352C               	lslf	Led_DynamicWave@i,w
 17036  056F  0008               	return
 17037  0570                     __end_ofPL128:	
 17038  0570                     PL130:	
 17039  0570  0086               	movwf	6
 17040  0571  0187               	clrf	7
 17041  0572  3F40               	moviw [0]fsr1
 17042  0573  00F8               	movwf	??_Led_DynamicStorm
 17043  0574  3F41               	moviw [1]fsr1
 17044  0575  00F9               	movwf	??_Led_DynamicStorm+1
 17045  0576  352C               	lslf	Led_DynamicStorm@i,w
 17046  0577  0008               	return
 17047  0578                     __end_ofPL130:	
 17048  0578                     PL134:	
 17049  0578  3ECA               	addlw	(low (_gLedRunPara| 0))& (0+255)
 17050  0579  0086               	movwf	6
 17051  057A  0187               	clrf	7
 17052  057B  3F40               	moviw [0]fsr1
 17053  057C  00F0               	movwf	i1PWM5_LoadDutyValue@dutyValue
 17054  057D  3F41               	moviw [1]fsr1
 17055  057E  00F1               	movwf	i1PWM5_LoadDutyValue@dutyValue+1
 17056  057F  0008               	return
 17057  0580                     __end_ofPL134:	
 17058  0580                     PL138:	
 17059  0580  0086               	movwf	6
 17060  0581  0187               	clrf	7
 17061  0582  3F40               	moviw [0]fsr1
 17062  0583  00F4               	movwf	??_Led_Ramp
 17063  0584  3F41               	moviw [1]fsr1
 17064  0585  00F5               	movwf	??_Led_Ramp+1
 17065  0586  357A               	lslf	Led_Ramp@i,w
 17066  0587  0008               	return
 17067  0588                     __end_ofPL138:	
 17068  0588                     PL146:	
 17069  0588  0C01               	rrf	1,w
 17070  0589  00FC               	movwf	??_Led_RunMusic
 17071  058A  0CFC               	rrf	??_Led_RunMusic,f
 17072  058B  0C7C               	rrf	??_Led_RunMusic,w
 17073  058C  390F               	andlw	15
 17074  058D  0008               	return
 17075  058E                     __end_ofPL146:	
 17076  058E                     __ptext100:	
 17077 ;; *************** function _IR_Decode *****************
 17078 ;; Defined at:
 17079 ;;		line 288 in file "user/src/ir.c"
 17080 ;; Parameters:    Size  Location     Type
 17081 ;;		None
 17082 ;; Auto vars:     Size  Location     Type
 17083 ;;  type            1    8[COMMON] unsigned char 
 17084 ;;  hVal            2   10[COMMON] unsigned int 
 17085 ;;  keyNum          1    9[COMMON] unsigned char 
 17086 ;;  revKeyNum       1    7[COMMON] unsigned char 
 17087 ;; Return value:  Size  Location     Type
 17088 ;;                  1    wreg      void 
 17089 ;; Registers used:
 17090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17091 ;; Tracked objects:
 17092 ;;		On entry : 1F/1
 17093 ;;		On exit  : 1E/0
 17094 ;;		Unchanged: 0/0
 17095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17097 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17098 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17099 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17100 ;;Total ram usage:        9 bytes
 17101 ;; Hardware stack levels used:    1
 17102 ;; Hardware stack levels required when called:    1
 17103 ;; This function calls:
 17104 ;;		_IR_GetKeyType
 17105 ;;		i1_TMR2_DisableInterrupt
 17106 ;;		i1_TMR2_EnableInterrupt
 17107 ;; This function is called by:
 17108 ;;		_Interrupt_Initialize
 17109 ;;		_TMR1_GATE_ISR
 17110 ;; This function uses a non-reentrant model
 17111 ;;
 17112                           
 17113                           
 17114                           ;psect for function _IR_Decode
 17115  058E                     _IR_Decode:	
 17116                           
 17117                           ;ir.c: 290: uint8_t revKeyNum = 0;
 17118                           
 17119                           ;incstack = 0
 17120                           ; Regs used in _IR_Decode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17121  058E  01F7               	clrf	IR_Decode@revKeyNum
 17122                           
 17123                           ;ir.c: 291: uint16_t hVal = TMR1;
 17124  058F  0020               	movlb	0	; select bank0
 17125  0590  081A               	movf	26,w	;volatile
 17126  0591  00FB               	movwf	IR_Decode@hVal+1
 17127  0592  0819               	movf	25,w	;volatile
 17128  0593  00FA               	movwf	IR_Decode@hVal
 17129                           
 17130                           ;ir.c: 292: static uint16_t codeVal = 0;
 17131                           ;ir.c: 293: static uint8_t nBit = 0;
 17132                           ;ir.c: 294: static uint8_t rptCnt = 0;
 17133                           ;ir.c: 296: TMR1 = 0;
 17134  0594  0199               	clrf	25	;volatile
 17135  0595  019A               	clrf	26	;volatile
 17136                           
 17137                           ;ir.c: 298: switch (ir_state.mState) {
 17138  0596  2E4A               	goto	i1l5313
 17139  0597                     i1l5217:	
 17140                           
 17141                           ;ir.c: 300: if (hVal > 2000 && hVal < 2500) {
 17142  0597  3007               	movlw	7
 17143  0598  027B               	subwf	IR_Decode@hVal+1,w
 17144  0599  30D1               	movlw	209
 17145  059A  1903               	skipnz
 17146  059B  027A               	subwf	IR_Decode@hVal,w
 17147  059C  1C03               	skipc
 17148  059D  0008               	return
 17149  059E  3009               	movlw	9
 17150  059F  027B               	subwf	IR_Decode@hVal+1,w
 17151  05A0  30C4               	movlw	196
 17152  05A1  1903               	skipnz
 17153  05A2  027A               	subwf	IR_Decode@hVal,w
 17154  05A3  1803               	skipnc
 17155  05A4  0008               	return
 17156                           
 17157                           ;ir.c: 301: ir_state.mState = 1;
 17158  05A5  0859               	movf	_ir_state,w	;volatile
 17159  05A6  39E3               	andlw	-29
 17160  05A7  3804               	iorlw	4
 17161  05A8  00D9               	movwf	_ir_state	;volatile
 17162                           
 17163                           ;ir.c: 302: codeVal = 0;
 17164  05A9  01C7               	clrf	IR_Decode@codeVal
 17165  05AA  01C8               	clrf	IR_Decode@codeVal+1
 17166                           
 17167                           ;ir.c: 303: nBit = 0;
 17168  05AB  01D2               	clrf	IR_Decode@nBit
 17169                           
 17170                           ;ir.c: 304: TMR2_DisableInterrupt();
 17171  05AC  2792               	fcall	i1_TMR2_DisableInterrupt
 17172  05AD  0008               	return
 17173  05AE                     i1l5229:	
 17174                           
 17175                           ;ir.c: 309: case 2:
 17176                           ;ir.c: 310: if (hVal > 220 && hVal < 340) {
 17177  05AE  3000               	movlw	0
 17178  05AF  027B               	subwf	IR_Decode@hVal+1,w
 17179  05B0  30DD               	movlw	221
 17180  05B1  1903               	skipnz
 17181  05B2  027A               	subwf	IR_Decode@hVal,w
 17182  05B3  1C03               	skipc
 17183  05B4  2DBE               	goto	i1l5235
 17184  05B5  3001               	movlw	1
 17185  05B6  027B               	subwf	IR_Decode@hVal+1,w
 17186  05B7  3054               	movlw	84
 17187  05B8  1903               	skipnz
 17188  05B9  027A               	subwf	IR_Decode@hVal,w
 17189  05BA  1803               	skipnc
 17190  05BB  2DBE               	goto	i1l5235
 17191  05BC                     i1l5233:	
 17192                           
 17193                           ;ir.c: 311: nBit++;
 17194  05BC  0AD2               	incf	IR_Decode@nBit,f
 17195                           
 17196                           ;ir.c: 312: } else if (hVal > 720 && hVal < 960) {
 17197  05BD  2DDC               	goto	i1l5245
 17198  05BE                     i1l5235:	
 17199  05BE  3002               	movlw	2
 17200  05BF  027B               	subwf	IR_Decode@hVal+1,w
 17201  05C0  30D1               	movlw	209
 17202  05C1  1903               	skipnz
 17203  05C2  027A               	subwf	IR_Decode@hVal,w
 17204  05C3  1C03               	skipc
 17205  05C4  2DDA               	goto	i1l5243
 17206  05C5  3003               	movlw	3
 17207  05C6  027B               	subwf	IR_Decode@hVal+1,w
 17208  05C7  30C0               	movlw	192
 17209  05C8  1903               	skipnz
 17210  05C9  027A               	subwf	IR_Decode@hVal,w
 17211  05CA  1803               	skipnc
 17212  05CB  2DDA               	goto	i1l5243
 17213                           
 17214                           ;ir.c: 313: codeVal |= (1 << nBit);
 17215  05CC  3001               	movlw	1
 17216  05CD  00F3               	movwf	??_IR_Decode
 17217  05CE  01F4               	clrf	??_IR_Decode+1
 17218  05CF  0A52               	incf	IR_Decode@nBit,w
 17219  05D0  2DD3               	goto	u403_24
 17220  05D1                     u403_25:	
 17221  05D1  35F3               	lslf	??_IR_Decode,f
 17222  05D2  0DF4               	rlf	??_IR_Decode+1,f
 17223  05D3                     u403_24:	
 17224  05D3  0B89               	decfsz	9,f
 17225  05D4  2DD1               	goto	u403_25
 17226  05D5  0873               	movf	??_IR_Decode,w
 17227  05D6  04C7               	iorwf	IR_Decode@codeVal,f
 17228  05D7  0874               	movf	??_IR_Decode+1,w
 17229  05D8  04C8               	iorwf	IR_Decode@codeVal+1,f
 17230  05D9  2DBC               	goto	i1l5233
 17231  05DA                     i1l5243:	
 17232                           
 17233                           ;ir.c: 316: ir_state.mState = 0;
 17234  05DA  30E3               	movlw	-29
 17235  05DB  05D9               	andwf	_ir_state,f	;volatile
 17236  05DC                     i1l5245:	
 17237                           
 17238                           ;ir.c: 317: }
 17239                           ;ir.c: 318: if (nBit >= 16) {
 17240  05DC  3010               	movlw	16
 17241  05DD  0252               	subwf	IR_Decode@nBit,w
 17242  05DE  1C03               	skipc
 17243  05DF  0008               	return
 17244                           
 17245                           ;ir.c: 319: if (ir_state.mState == 1) {
 17246  05E0  0C59               	rrf	_ir_state,w	;volatile
 17247  05E1  0C89               	rrf	9,f
 17248  05E2  3907               	andlw	7
 17249  05E3  3A01               	xorlw	1
 17250  05E4  1D03               	skipz
 17251  05E5  2DF2               	goto	i1l5255
 17252                           
 17253                           ;ir.c: 320: if (codeVal == 0xFD02) {
 17254  05E6  3002               	movlw	2
 17255  05E7  0647               	xorwf	IR_Decode@codeVal,w
 17256  05E8  30FD               	movlw	253
 17257  05E9  1903               	skipnz
 17258  05EA  0648               	xorwf	IR_Decode@codeVal+1,w
 17259  05EB  1D03               	btfss	3,2
 17260  05EC  2E2B               	goto	i1l5295
 17261                           
 17262                           ;ir.c: 321: ir_state.mState = 2;
 17263  05ED  0859               	movf	_ir_state,w	;volatile
 17264  05EE  39E3               	andlw	-29
 17265  05EF  3808               	iorlw	8
 17266  05F0  00D9               	movwf	_ir_state	;volatile
 17267                           
 17268                           ;ir.c: 322: } else {
 17269  05F1  2E2D               	goto	i1l5297
 17270  05F2                     i1l5255:	
 17271                           ;ir.c: 323: ir_state.mState = 0;
 17272                           
 17273  05F2  0C59               	rrf	_ir_state,w	;volatile
 17274  05F3  0C89               	rrf	9,f
 17275  05F4  3907               	andlw	7
 17276  05F5  3A02               	xorlw	2
 17277  05F6  1D03               	skipz
 17278  05F7  2E2D               	goto	i1l5297
 17279                           
 17280                           ;ir.c: 326: TMR2_EnableInterrupt();
 17281  05F8  278F  3180         	fcall	i1_TMR2_EnableInterrupt
 17282                           
 17283                           ;ir.c: 327: keyNum = codeVal & 0xFF;
 17284  05FA  0020               	movlb	0	; select bank0
 17285  05FB  0847               	movf	IR_Decode@codeVal,w
 17286  05FC  00F9               	movwf	IR_Decode@keyNum
 17287                           
 17288                           ;ir.c: 328: revKeyNum = codeVal >> 8;
 17289  05FD  0848               	movf	IR_Decode@codeVal+1,w
 17290  05FE  00F7               	movwf	IR_Decode@revKeyNum
 17291                           
 17292                           ;ir.c: 329: if (keyNum ^ revKeyNum == 0xFF)
 17293  05FF  0F77               	incfsz	IR_Decode@revKeyNum,w
 17294  0600  2E03               	goto	u408_20
 17295  0601  3001               	movlw	1
 17296  0602  2E04               	goto	u409_20
 17297  0603                     u408_20:	
 17298  0603  3000               	movlw	0
 17299  0604                     u409_20:	
 17300  0604  00F3               	movwf	??_IR_Decode
 17301  0605  01F4               	clrf	??_IR_Decode+1
 17302  0606  0679               	xorwf	IR_Decode@keyNum,w
 17303  0607  00F5               	movwf	??_IR_Decode+2
 17304  0608  0874               	movf	??_IR_Decode+1,w
 17305  0609  00F6               	movwf	??_IR_Decode+3
 17306  060A  0475               	iorwf	??_IR_Decode+2,w
 17307  060B  1903               	btfsc	3,2
 17308  060C  2E2B               	goto	i1l5295
 17309                           
 17310                           ;ir.c: 330: {
 17311                           ;ir.c: 331: uint8_t type = IR_GetKeyType(keyNum);
 17312  060D  0879               	movf	IR_Decode@keyNum,w
 17313  060E  265A  3180         	fcall	_IR_GetKeyType
 17314  0610  00F8               	movwf	IR_Decode@type
 17315                           
 17316                           ;ir.c: 332: if (type == 255) {
 17317  0611  0F78               	incfsz	IR_Decode@type,w
 17318  0612  2E15               	goto	i1l5275
 17319                           
 17320                           ;ir.c: 333: keyValue = 255;
 17321  0613  30FF               	movlw	255
 17322  0614  2E18               	goto	L32
 17323  0615                     i1l5275:	
 17324                           ;ir.c: 336: } else if (type == 1) {
 17325                           
 17326                           ;ir.c: 335: ir_state.mState = 0;
 17327                           
 17328                           ;ir.c: 334: ir_state.mKeyRcv = 1;
 17329                           
 17330  0615  0B78               	decfsz	IR_Decode@type,w
 17331  0616  2E1B               	goto	i1l5283
 17332                           
 17333                           ;ir.c: 337: keyValue = keyNum;
 17334  0617  0879               	movf	IR_Decode@keyNum,w
 17335  0618                     L32:	
 17336  0618  00D3               	movwf	_keyValue	;volatile
 17337                           
 17338                           ;ir.c: 338: ir_state.mKeyRcv = 1;
 17339  0619  1459               	bsf	_ir_state,0	;volatile
 17340  061A  2E2B               	goto	i1l5295
 17341  061B                     i1l5283:	
 17342                           ;ir.c: 340: } else if (type == 3 || type == 2) {
 17343                           
 17344                           ;ir.c: 339: ir_state.mState = 0;
 17345                           
 17346  061B  3003               	movlw	3
 17347  061C  0678               	xorwf	IR_Decode@type,w
 17348  061D  1903               	btfsc	3,2
 17349  061E  2E23               	goto	i1l5287
 17350  061F  3002               	movlw	2
 17351  0620  0678               	xorwf	IR_Decode@type,w
 17352  0621  1D03               	btfss	3,2
 17353  0622  2E2B               	goto	i1l5295
 17354  0623                     i1l5287:	
 17355                           
 17356                           ;ir.c: 341: keyValue = keyNum;
 17357  0623  0879               	movf	IR_Decode@keyNum,w
 17358  0624  00D3               	movwf	_keyValue	;volatile
 17359                           
 17360                           ;ir.c: 342: ir_state.mState = 3;
 17361  0625  0859               	movf	_ir_state,w	;volatile
 17362  0626  39E3               	andlw	-29
 17363  0627  380C               	iorlw	12
 17364  0628  00D9               	movwf	_ir_state	;volatile
 17365                           
 17366                           ;ir.c: 343: rptCnt = 0;
 17367  0629  01D1               	clrf	IR_Decode@rptCnt
 17368                           
 17369                           ;ir.c: 344: } else {
 17370  062A  2E2D               	goto	i1l5297
 17371  062B                     i1l5295:	
 17372                           ;ir.c: 345: ir_state.mState = 0;
 17373                           
 17374                           
 17375                           ;ir.c: 348: ir_state.mState = 0;
 17376  062B  30E3               	movlw	-29
 17377  062C  05D9               	andwf	_ir_state,f	;volatile
 17378  062D                     i1l5297:	
 17379                           
 17380                           ;ir.c: 349: }
 17381                           ;ir.c: 350: }
 17382                           ;ir.c: 351: codeVal = 0;
 17383  062D  01C7               	clrf	IR_Decode@codeVal
 17384  062E  01C8               	clrf	IR_Decode@codeVal+1
 17385                           
 17386                           ;ir.c: 352: nBit = 0;
 17387  062F  01D2               	clrf	IR_Decode@nBit
 17388  0630  0008               	return
 17389  0631                     i1l5301:	
 17390                           
 17391                           ;ir.c: 357: if (hVal > 1000 && hVal < 1250) {
 17392  0631  3003               	movlw	3
 17393  0632  027B               	subwf	IR_Decode@hVal+1,w
 17394  0633  30E9               	movlw	233
 17395  0634  1903               	skipnz
 17396  0635  027A               	subwf	IR_Decode@hVal,w
 17397  0636  1C03               	skipc
 17398  0637  0008               	return
 17399  0638  3004               	movlw	4
 17400  0639  027B               	subwf	IR_Decode@hVal+1,w
 17401  063A  30E2               	movlw	226
 17402  063B  1903               	skipnz
 17403  063C  027A               	subwf	IR_Decode@hVal,w
 17404  063D  1803               	skipnc
 17405  063E  0008               	return
 17406                           
 17407                           ;ir.c: 358: if (rptCnt < 4) {
 17408  063F  3004               	movlw	4
 17409  0640  0251               	subwf	IR_Decode@rptCnt,w
 17410  0641  1803               	skipnc
 17411  0642  2E45               	goto	i1l1109
 17412                           
 17413                           ;ir.c: 359: rptCnt++;
 17414  0643  0AD1               	incf	IR_Decode@rptCnt,f
 17415                           
 17416                           ;ir.c: 360: } else {
 17417  0644  0008               	return
 17418  0645                     i1l1109:	
 17419                           
 17420                           ;ir.c: 361: ir_state.mKeyRpt = 1;
 17421  0645  14D9               	bsf	_ir_state,1	;volatile
 17422  0646  0008               	return
 17423  0647                     i1l5309:	
 17424                           
 17425                           ;ir.c: 367: ir_state.mState = 0;
 17426  0647  30E3               	movlw	-29
 17427  0648  05D9               	andwf	_ir_state,f	;volatile
 17428                           
 17429                           ;ir.c: 368: break;
 17430  0649  0008               	return
 17431  064A                     i1l5313:	
 17432  064A  0C59               	rrf	_ir_state,w	;volatile
 17433  064B  0C89               	rrf	9,f
 17434  064C  3907               	andlw	7
 17435                           
 17436                           ; Switch size 1, requested type "space"
 17437                           ; Number of cases is 4, Range of values is 0 to 3
 17438                           ; switch strategies available:
 17439                           ; Name         Instructions Cycles
 17440                           ; simple_byte           13     7 (average)
 17441                           ; direct_byte           14     6 (fixed)
 17442                           ; jumptable            260     6 (fixed)
 17443                           ;	Chosen strategy is simple_byte
 17444  064D  1903               	skipnz
 17445  064E  2D97               	goto	i1l5217
 17446  064F  3A01               	xorlw	1	; case 1
 17447  0650  1903               	skipnz
 17448  0651  2DAE               	goto	i1l5229
 17449  0652  3A03               	xorlw	3	; case 2
 17450  0653  1903               	skipnz
 17451  0654  2DAE               	goto	i1l5229
 17452  0655  3A01               	xorlw	1	; case 3
 17453  0656  1903               	skipnz
 17454  0657  2E31               	goto	i1l5301
 17455  0658  2E47               	goto	i1l5309
 17456  0659  0008               	return
 17457  065A                     __end_of_IR_Decode:	
 17458  065A                     __ptext103:	
 17459 ;; *************** function _IR_GetKeyType *****************
 17460 ;; Defined at:
 17461 ;;		line 138 in file "user/src/ir.c"
 17462 ;; Parameters:    Size  Location     Type
 17463 ;;  keynum          1    wreg     unsigned char 
 17464 ;; Auto vars:     Size  Location     Type
 17465 ;;  keynum          1    2[COMMON] unsigned char 
 17466 ;;  result          1    1[COMMON] unsigned char 
 17467 ;; Return value:  Size  Location     Type
 17468 ;;                  1    wreg      unsigned char 
 17469 ;; Registers used:
 17470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 17471 ;; Tracked objects:
 17472 ;;		On entry : 1F/0
 17473 ;;		On exit  : 1F/0
 17474 ;;		Unchanged: 0/0
 17475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17477 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17478 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17479 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17480 ;;Total ram usage:        3 bytes
 17481 ;; Hardware stack levels used:    1
 17482 ;; This function calls:
 17483 ;;		Nothing
 17484 ;; This function is called by:
 17485 ;;		_IR_Decode
 17486 ;; This function uses a non-reentrant model
 17487 ;;
 17488                           
 17489                           
 17490                           ;psect for function _IR_GetKeyType
 17491  065A                     _IR_GetKeyType:	
 17492                           
 17493                           ;incstack = 0
 17494                           ; Regs used in _IR_GetKeyType: [wreg-fsr1h+status,2+status,0]
 17495                           ;IR_GetKeyType@keynum stored from wreg
 17496  065A  00F2               	movwf	IR_GetKeyType@keynum
 17497                           
 17498                           ;ir.c: 139: uint8_t result = 0;
 17499  065B  01F1               	clrf	IR_GetKeyType@result
 17500                           
 17501                           ;ir.c: 140: if (ir_state.mSet == 0) {
 17502  065C  0E59               	swapf	_ir_state,w	;volatile
 17503  065D  0C89               	rrf	9,f
 17504  065E  3907               	andlw	7
 17505  065F  1D03               	skipz
 17506  0660  2F23               	goto	i1l4859
 17507                           
 17508                           ;ir.c: 141: if (keynum == 0x04 || keynum == 0x1C) {
 17509  0661  3004               	movlw	4
 17510  0662  0672               	xorwf	IR_GetKeyType@keynum,w
 17511  0663  1903               	btfsc	3,2
 17512  0664  2E69               	goto	i1l957
 17513  0665  301C               	movlw	28
 17514  0666  0672               	xorwf	IR_GetKeyType@keynum,w
 17515  0667  1D03               	btfss	3,2
 17516  0668  2E6C               	goto	i1l4809
 17517  0669                     i1l957:	
 17518                           
 17519                           ;ir.c: 142: result = 1;
 17520  0669  01F1               	clrf	IR_GetKeyType@result
 17521  066A  0AF1               	incf	IR_GetKeyType@result,f
 17522                           
 17523                           ;ir.c: 143: } else if (keynum == 0x00 || keynum == 0x50
 17524  066B  2F8D               	goto	i1l4883
 17525  066C                     i1l4809:	
 17526                           
 17527                           ;ir.c: 144: || keynum == 0x4D || keynum == 0x43
 17528                           ;ir.c: 145: || keynum == 0x47) {
 17529  066C  0872               	movf	IR_GetKeyType@keynum,w
 17530  066D  1903               	btfsc	3,2
 17531  066E  2E7F               	goto	i1l4819
 17532  066F  3050               	movlw	80
 17533  0670  0672               	xorwf	IR_GetKeyType@keynum,w
 17534  0671  1903               	btfsc	3,2
 17535  0672  2E7F               	goto	i1l4819
 17536  0673  304D               	movlw	77
 17537  0674  0672               	xorwf	IR_GetKeyType@keynum,w
 17538  0675  1903               	btfsc	3,2
 17539  0676  2E7F               	goto	i1l4819
 17540  0677  3043               	movlw	67
 17541  0678  0672               	xorwf	IR_GetKeyType@keynum,w
 17542  0679  1903               	btfsc	3,2
 17543  067A  2E7F               	goto	i1l4819
 17544  067B  3047               	movlw	71
 17545  067C  0672               	xorwf	IR_GetKeyType@keynum,w
 17546  067D  1D03               	btfss	3,2
 17547  067E  2E81               	goto	i1l4821
 17548  067F                     i1l4819:	
 17549                           
 17550                           ;ir.c: 146: result = 3;
 17551  067F  3003               	movlw	3
 17552  0680  2F2E               	goto	L34
 17553  0681                     i1l4821:	
 17554                           ;ir.c: 147: } else if (gLedPara.mOn) {
 17555                           
 17556  0681  279E  3180         	fcall	PL98	;call to abstracted procedure
 17557  0683  1881               	btfsc	1,1
 17558  0684  2EC0               	goto	i1l4857
 17559  0685  2F8D               	goto	i1l4883
 17560  0686                     i1l968:	
 17561  0686  2E69               	goto	i1l957
 17562  0687                     i1l4825:	
 17563                           
 17564                           ;ir.c: 166: case 0x01:
 17565                           ;ir.c: 167: if (gLedPara.mAuto || gLedPara.mMsc == 0 || gLedPara.mMsc == 1 || gLedPara.m
      +                          Msc == 2
 17566                           ;ir.c: 168: || gLedPara.mMsc == 3 || gLedPara.mMsc == 4) {
 17567  0687  279E  3180         	fcall	PL98	;call to abstracted procedure
 17568  0689  1801               	btfsc	1,0
 17569  068A  2E69               	goto	i1l957
 17570  068B  2795  3180         	fcall	PL12	;call to abstracted procedure
 17571  068D  1903               	skipnz
 17572  068E  2E69               	goto	i1l957
 17573  068F  2795  3180         	fcall	PL12	;call to abstracted procedure
 17574  0691  3A01               	xorlw	1
 17575  0692  1903               	skipnz
 17576  0693  2E69               	goto	i1l957
 17577  0694  2795  3180         	fcall	PL12	;call to abstracted procedure
 17578  0696  3A02               	xorlw	2
 17579  0697  1903               	skipnz
 17580  0698  2E69               	goto	i1l957
 17581  0699  2795  3180         	fcall	PL12	;call to abstracted procedure
 17582  069B  3A03               	xorlw	3
 17583  069C  1903               	skipnz
 17584  069D  2E69               	goto	i1l957
 17585  069E  2795  3180         	fcall	PL12	;call to abstracted procedure
 17586  06A0  3A04               	xorlw	4
 17587  06A1  1903               	btfsc	3,2
 17588  06A2  2E69               	goto	i1l957
 17589  06A3  2F8D               	goto	i1l4883
 17590  06A4                     i1l4837:	
 17591                           
 17592                           ;ir.c: 173: case 0x41:
 17593                           ;ir.c: 174: if (!gLedPara.mAuto && gLedPara.mMsc) {
 17594  06A4  279E  3180         	fcall	PL98	;call to abstracted procedure
 17595  06A6  1801               	btfsc	1,0
 17596  06A7  2F8D               	goto	i1l4883
 17597  06A8  2795  3180         	fcall	PL12	;call to abstracted procedure
 17598  06AA  1D03               	btfss	3,2
 17599  06AB  2E69               	goto	i1l957
 17600  06AC  2F8D               	goto	i1l4883
 17601  06AD                     i1l990:	
 17602  06AD                     i1l4843:	
 17603                           
 17604                           ;ir.c: 179: case 0x0B:
 17605                           ;ir.c: 180: case 0x1A:
 17606                           ;ir.c: 181: case 0x03:
 17607                           ;ir.c: 182: if (gLedPara.mAuto || gLedPara.mMsc) {
 17608  06AD  279E  3180         	fcall	PL98	;call to abstracted procedure
 17609  06AF  1801               	btfsc	1,0
 17610  06B0  2E69               	goto	i1l957
 17611  06B1  2795  3180         	fcall	PL12	;call to abstracted procedure
 17612  06B3  1D03               	btfss	3,2
 17613  06B4  2E69               	goto	i1l957
 17614  06B5                     i1l4847:	
 17615                           
 17616                           ;ir.c: 185: result = 2;
 17617  06B5  3002               	movlw	2
 17618  06B6  2F2E               	goto	L34
 17619  06B7                     i1l999:	
 17620  06B7                     i1l4849:	
 17621                           
 17622                           ;ir.c: 189: case 0x0E:
 17623                           ;ir.c: 190: case 0x1F:
 17624                           ;ir.c: 191: case 0x5E:
 17625                           ;ir.c: 192: case 0x12:
 17626                           ;ir.c: 193: case 0x05:
 17627                           ;ir.c: 194: case 0x06:
 17628                           ;ir.c: 195: case 0x11:
 17629                           ;ir.c: 196: case 0x42:
 17630                           ;ir.c: 197: case 0x15:
 17631                           ;ir.c: 198: if (gLedPara.mAuto || gLedPara.mMsc == 0) {
 17632  06B7  279E  3180         	fcall	PL98	;call to abstracted procedure
 17633  06B9  1801               	btfsc	1,0
 17634  06BA  2EB5               	goto	i1l4847
 17635  06BB  2795  3180         	fcall	PL12	;call to abstracted procedure
 17636  06BD  1903               	btfsc	3,2
 17637  06BE  2EB5               	goto	i1l4847
 17638  06BF  2F8D               	goto	i1l4883
 17639  06C0                     i1l4857:	
 17640  06C0  0872               	movf	IR_GetKeyType@keynum,w
 17641                           
 17642                           ; Switch size 1, requested type "space"
 17643                           ; Number of cases is 32, Range of values is 1 to 94
 17644                           ; switch strategies available:
 17645                           ; Name         Instructions Cycles
 17646                           ; simple_byte           97    49 (average)
 17647                           ; direct_byte          197     9 (fixed)
 17648                           ; jumptable            263     9 (fixed)
 17649                           ;	Chosen strategy is simple_byte
 17650  06C1  3A01               	xorlw	1	; case 1
 17651  06C2  1903               	skipnz
 17652  06C3  2E87               	goto	i1l4825
 17653  06C4  3A03               	xorlw	3	; case 2
 17654  06C5  1903               	skipnz
 17655  06C6  2E69               	goto	i1l957
 17656  06C7  3A01               	xorlw	1	; case 3
 17657  06C8  1903               	skipnz
 17658  06C9  2EAD               	goto	i1l4843
 17659  06CA  3A06               	xorlw	6	; case 5
 17660  06CB  1903               	skipnz
 17661  06CC  2EB7               	goto	i1l4849
 17662  06CD  3A03               	xorlw	3	; case 6
 17663  06CE  1903               	skipnz
 17664  06CF  2EB7               	goto	i1l4849
 17665  06D0  3A01               	xorlw	1	; case 7
 17666  06D1  1903               	skipnz
 17667  06D2  2E86               	goto	i1l968
 17668  06D3  3A0F               	xorlw	15	; case 8
 17669  06D4  1903               	skipnz
 17670  06D5  2E69               	goto	i1l957
 17671  06D6  3A03               	xorlw	3	; case 11
 17672  06D7  1903               	skipnz
 17673  06D8  2EAD               	goto	i1l4843
 17674  06D9  3A06               	xorlw	6	; case 13
 17675  06DA  1903               	skipnz
 17676  06DB  2EB7               	goto	i1l999
 17677  06DC  3A03               	xorlw	3	; case 14
 17678  06DD  1903               	skipnz
 17679  06DE  2EB7               	goto	i1l999
 17680  06DF  3A01               	xorlw	1	; case 15
 17681  06E0  1903               	skipnz
 17682  06E1  2E69               	goto	i1l957
 17683  06E2  3A1F               	xorlw	31	; case 16
 17684  06E3  1903               	skipnz
 17685  06E4  2E69               	goto	i1l957
 17686  06E5  3A01               	xorlw	1	; case 17
 17687  06E6  1903               	skipnz
 17688  06E7  2EB7               	goto	i1l4849
 17689  06E8  3A03               	xorlw	3	; case 18
 17690  06E9  1903               	skipnz
 17691  06EA  2EB7               	goto	i1l4849
 17692  06EB  3A01               	xorlw	1	; case 19
 17693  06EC  1903               	skipnz
 17694  06ED  2E69               	goto	i1l957
 17695  06EE  3A07               	xorlw	7	; case 20
 17696  06EF  1903               	skipnz
 17697  06F0  2EAD               	goto	i1l990
 17698  06F1  3A01               	xorlw	1	; case 21
 17699  06F2  1903               	skipnz
 17700  06F3  2EB7               	goto	i1l4849
 17701  06F4  3A03               	xorlw	3	; case 22
 17702  06F5  1903               	skipnz
 17703  06F6  2EA4               	goto	i1l4837
 17704  06F7  3A01               	xorlw	1	; case 23
 17705  06F8  1903               	skipnz
 17706  06F9  2E69               	goto	i1l957
 17707  06FA  3A0F               	xorlw	15	; case 24
 17708  06FB  1903               	skipnz
 17709  06FC  2E69               	goto	i1l957
 17710  06FD  3A02               	xorlw	2	; case 26
 17711  06FE  1903               	skipnz
 17712  06FF  2EAD               	goto	i1l4843
 17713  0700  3A01               	xorlw	1	; case 27
 17714  0701  1903               	skipnz
 17715  0702  2E87               	goto	i1l4825
 17716  0703  3A06               	xorlw	6	; case 29
 17717  0704  1903               	skipnz
 17718  0705  2E86               	goto	i1l968
 17719  0706  3A03               	xorlw	3	; case 30
 17720  0707  1903               	skipnz
 17721  0708  2E86               	goto	i1l968
 17722  0709  3A01               	xorlw	1	; case 31
 17723  070A  1903               	skipnz
 17724  070B  2EB7               	goto	i1l4849
 17725  070C  3A5F               	xorlw	95	; case 64
 17726  070D  1903               	skipnz
 17727  070E  2E69               	goto	i1l957
 17728  070F  3A01               	xorlw	1	; case 65
 17729  0710  1903               	skipnz
 17730  0711  2EA4               	goto	i1l4837
 17731  0712  3A03               	xorlw	3	; case 66
 17732  0713  1903               	skipnz
 17733  0714  2EB7               	goto	i1l4849
 17734  0715  3A0E               	xorlw	14	; case 76
 17735  0716  1903               	skipnz
 17736  0717  2E69               	goto	i1l957
 17737  0718  3A02               	xorlw	2	; case 78
 17738  0719  1903               	skipnz
 17739  071A  2E69               	goto	i1l957
 17740  071B  3A13               	xorlw	19	; case 93
 17741  071C  1903               	skipnz
 17742  071D  2E69               	goto	i1l957
 17743  071E  3A03               	xorlw	3	; case 94
 17744  071F  1903               	skipnz
 17745  0720  2EB7               	goto	i1l4849
 17746  0721  2F22               	goto	i1l962
 17747  0722                     i1l962:	
 17748  0722  2F8D               	goto	i1l4883
 17749  0723                     i1l4859:	
 17750  0723  27A8  3180         	fcall	PL158	;call to abstracted procedure
 17751  0725  1903               	skipnz
 17752  0726  2F30               	goto	i1l4869
 17753  0727  27A3  3180         	fcall	PL156	;call to abstracted procedure
 17754  0729  1903               	btfsc	3,2
 17755  072A  2F30               	goto	i1l4869
 17756  072B  2F5F               	goto	i1l4871
 17757  072C                     i1l1018:	
 17758  072C  2EB5               	goto	i1l4847
 17759  072D                     i1l4865:	
 17760                           
 17761                           ;ir.c: 228: result = 255;
 17762  072D  30FF               	movlw	255
 17763  072E                     L34:	
 17764  072E  00F1               	movwf	IR_GetKeyType@result
 17765                           
 17766                           ;ir.c: 229: break;
 17767  072F  2F8D               	goto	i1l4883
 17768  0730                     i1l4869:	
 17769  0730  0872               	movf	IR_GetKeyType@keynum,w
 17770                           
 17771                           ; Switch size 1, requested type "space"
 17772                           ; Number of cases is 15, Range of values is 3 to 94
 17773                           ; switch strategies available:
 17774                           ; Name         Instructions Cycles
 17775                           ; simple_byte           46    24 (average)
 17776                           ; direct_byte          193     9 (fixed)
 17777                           ; jumptable            263     9 (fixed)
 17778                           ;	Chosen strategy is simple_byte
 17779  0731  3A03               	xorlw	3	; case 3
 17780  0732  1903               	skipnz
 17781  0733  2E69               	goto	i1l957
 17782  0734  3A06               	xorlw	6	; case 5
 17783  0735  1903               	skipnz
 17784  0736  2EB5               	goto	i1l4847
 17785  0737  3A03               	xorlw	3	; case 6
 17786  0738  1903               	skipnz
 17787  0739  2EB5               	goto	i1l4847
 17788  073A  3A0F               	xorlw	15	; case 9
 17789  073B  1903               	skipnz
 17790  073C  2E69               	goto	i1l957
 17791  073D  3A02               	xorlw	2	; case 11
 17792  073E  1903               	skipnz
 17793  073F  2E69               	goto	i1l957
 17794  0740  3A06               	xorlw	6	; case 13
 17795  0741  1903               	skipnz
 17796  0742  2F2C               	goto	i1l1018
 17797  0743  3A03               	xorlw	3	; case 14
 17798  0744  1903               	skipnz
 17799  0745  2F2C               	goto	i1l1018
 17800  0746  3A1F               	xorlw	31	; case 17
 17801  0747  1903               	skipnz
 17802  0748  2EB5               	goto	i1l4847
 17803  0749  3A03               	xorlw	3	; case 18
 17804  074A  1903               	skipnz
 17805  074B  2EB5               	goto	i1l4847
 17806  074C  3A06               	xorlw	6	; case 20
 17807  074D  1903               	skipnz
 17808  074E  2E86               	goto	i1l968
 17809  074F  3A01               	xorlw	1	; case 21
 17810  0750  1903               	skipnz
 17811  0751  2EB5               	goto	i1l4847
 17812  0752  3A0F               	xorlw	15	; case 26
 17813  0753  1903               	skipnz
 17814  0754  2E69               	goto	i1l957
 17815  0755  3A05               	xorlw	5	; case 31
 17816  0756  1903               	skipnz
 17817  0757  2EB5               	goto	i1l4847
 17818  0758  3A5D               	xorlw	93	; case 66
 17819  0759  1903               	skipnz
 17820  075A  2EB5               	goto	i1l4847
 17821  075B  3A1C               	xorlw	28	; case 94
 17822  075C  1903               	skipnz
 17823  075D  2EB5               	goto	i1l4847
 17824  075E  2F2D               	goto	i1l4865
 17825  075F                     i1l4871:	
 17826  075F  27AD  3180         	fcall	PL168	;call to abstracted procedure
 17827  0761  1903               	skipnz
 17828  0762  2F6D               	goto	i1l4881
 17829  0763  3197  2792  3180   	fcall	PL172	;call to abstracted procedure
 17830  0766  1903               	skipnz
 17831  0767  2F6D               	goto	i1l4881
 17832  0768  3197  2788  3180   	fcall	PL160	;call to abstracted procedure
 17833  076B  1D03               	skipz
 17834  076C  2F8D               	goto	i1l4883
 17835  076D                     i1l4881:	
 17836  076D  0872               	movf	IR_GetKeyType@keynum,w
 17837                           
 17838                           ; Switch size 1, requested type "space"
 17839                           ; Number of cases is 10, Range of values is 10 to 92
 17840                           ; switch strategies available:
 17841                           ; Name         Instructions Cycles
 17842                           ; simple_byte           31    16 (average)
 17843                           ; direct_byte          175     9 (fixed)
 17844                           ; jumptable            263     9 (fixed)
 17845                           ;	Chosen strategy is simple_byte
 17846  076E  3A0A               	xorlw	10	; case 10
 17847  076F  1903               	skipnz
 17848  0770  2E69               	goto	i1l957
 17849  0771  3A06               	xorlw	6	; case 12
 17850  0772  1903               	skipnz
 17851  0773  2E69               	goto	i1l957
 17852  0774  3A48               	xorlw	72	; case 68
 17853  0775  1903               	skipnz
 17854  0776  2E69               	goto	i1l957
 17855  0777  3A01               	xorlw	1	; case 69
 17856  0778  1903               	skipnz
 17857  0779  2E69               	goto	i1l957
 17858  077A  3A03               	xorlw	3	; case 70
 17859  077B  1903               	skipnz
 17860  077C  2E69               	goto	i1l957
 17861  077D  3A0E               	xorlw	14	; case 72
 17862  077E  1903               	skipnz
 17863  077F  2E69               	goto	i1l957
 17864  0780  3A03               	xorlw	3	; case 75
 17865  0781  1903               	skipnz
 17866  0782  2E86               	goto	i1l968
 17867  0783  3A04               	xorlw	4	; case 79
 17868  0784  1903               	skipnz
 17869  0785  2E69               	goto	i1l957
 17870  0786  3A1E               	xorlw	30	; case 81
 17871  0787  1903               	skipnz
 17872  0788  2E69               	goto	i1l957
 17873  0789  3A0D               	xorlw	13	; case 92
 17874  078A  1903               	skipnz
 17875  078B  2E69               	goto	i1l957
 17876  078C  2F2D               	goto	i1l4865
 17877  078D                     i1l4883:	
 17878                           
 17879                           ;ir.c: 249: }
 17880                           ;ir.c: 250: return result;
 17881  078D  0871               	movf	IR_GetKeyType@result,w
 17882  078E  0008               	return
 17883  078F                     __end_of_IR_GetKeyType:	
 17884  078F                     __ptext101:	
 17885 ;; *************** function i1_TMR2_EnableInterrupt *****************
 17886 ;; Defined at:
 17887 ;;		line 45 in file "driver/src/tmr2.c"
 17888 ;; Parameters:    Size  Location     Type
 17889 ;;		None
 17890 ;; Auto vars:     Size  Location     Type
 17891 ;;		None
 17892 ;; Return value:  Size  Location     Type
 17893 ;;                  1    wreg      void 
 17894 ;; Registers used:
 17895 ;;		None
 17896 ;; Tracked objects:
 17897 ;;		On entry : 1F/0
 17898 ;;		On exit  : 1F/1
 17899 ;;		Unchanged: 0/0
 17900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17905 ;;Total ram usage:        0 bytes
 17906 ;; Hardware stack levels used:    1
 17907 ;; This function calls:
 17908 ;;		Nothing
 17909 ;; This function is called by:
 17910 ;;		_IR_Decode
 17911 ;; This function uses a non-reentrant model
 17912 ;;
 17913                           
 17914                           
 17915                           ;psect for function i1_TMR2_EnableInterrupt
 17916  078F                     i1_TMR2_EnableInterrupt:	
 17917                           
 17918                           ;tmr2.c: 47: PIE1bits.TMR2IE = 1;
 17919                           
 17920                           ;incstack = 0
 17921                           ; Regs used in i1_TMR2_EnableInterrupt: []
 17922  078F  0021               	movlb	1	; select bank1
 17923  0790  1491               	bsf	17,1	;volatile
 17924  0791  0008               	return
 17925  0792                     __end_ofi1_TMR2_EnableInterrupt:	
 17926  0792                     __ptext102:	
 17927 ;; *************** function i1_TMR2_DisableInterrupt *****************
 17928 ;; Defined at:
 17929 ;;		line 40 in file "driver/src/tmr2.c"
 17930 ;; Parameters:    Size  Location     Type
 17931 ;;		None
 17932 ;; Auto vars:     Size  Location     Type
 17933 ;;		None
 17934 ;; Return value:  Size  Location     Type
 17935 ;;                  1    wreg      void 
 17936 ;; Registers used:
 17937 ;;		None
 17938 ;; Tracked objects:
 17939 ;;		On entry : 1F/0
 17940 ;;		On exit  : 1F/1
 17941 ;;		Unchanged: 0/0
 17942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17947 ;;Total ram usage:        0 bytes
 17948 ;; Hardware stack levels used:    1
 17949 ;; This function calls:
 17950 ;;		Nothing
 17951 ;; This function is called by:
 17952 ;;		_IR_Decode
 17953 ;; This function uses a non-reentrant model
 17954 ;;
 17955                           
 17956                           
 17957                           ;psect for function i1_TMR2_DisableInterrupt
 17958  0792                     i1_TMR2_DisableInterrupt:	
 17959                           
 17960                           ;tmr2.c: 42: PIE1bits.TMR2IE = 0;
 17961                           
 17962                           ;incstack = 0
 17963                           ; Regs used in i1_TMR2_DisableInterrupt: []
 17964  0792  0021               	movlb	1	; select bank1
 17965  0793  1091               	bcf	17,1	;volatile
 17966  0794  0008               	return
 17967  0795                     __end_ofi1_TMR2_DisableInterrupt:	
 17968  0795                     PL12:	
 17969  0795  307B               	movlw	123
 17970  0796  0086               	movwf	6
 17971  0797  3023               	movlw	35
 17972  0798  0C01               	rrf	1,w
 17973  0799  00F0               	movwf	??_IR_GetKeyType
 17974  079A  0CF0               	rrf	??_IR_GetKeyType,f
 17975  079B  0C70               	rrf	??_IR_GetKeyType,w
 17976  079C  390F               	andlw	15
 17977  079D  0008               	return
 17978  079E                     __end_ofPL12:	
 17979  079E                     PL98:	
 17980  079E  307B               	movlw	123
 17981  079F  0086               	movwf	6
 17982  07A0  3023               	movlw	35
 17983  07A1  0087               	movwf	7
 17984  07A2  0008               	return
 17985  07A3                     __end_ofPL98:	
 17986  07A3                     PL156:	
 17987  07A3  0E59               	swapf	_ir_state,w	;volatile
 17988  07A4  0C89               	rrf	9,f
 17989  07A5  3907               	andlw	7
 17990  07A6  3A05               	xorlw	5
 17991  07A7  0008               	return
 17992  07A8                     __end_ofPL156:	
 17993  07A8                     PL158:	
 17994  07A8  0E59               	swapf	_ir_state,w	;volatile
 17995  07A9  0C89               	rrf	9,f
 17996  07AA  3907               	andlw	7
 17997  07AB  3A04               	xorlw	4
 17998  07AC  0008               	return
 17999  07AD                     __end_ofPL158:	
 18000  07AD                     PL168:	
 18001  07AD  0E59               	swapf	_ir_state,w	;volatile
 18002  07AE  0C89               	rrf	9,f
 18003  07AF  3907               	andlw	7
 18004  07B0  3A01               	xorlw	1
 18005  07B1  0008               	return
 18006  07B2                     __end_ofPL168:	
 18007                           
 18008                           	psect	text99
 18009  107A                     __ptext99:	
 18010 ;; *************** function _TMR1_GATE_ISR *****************
 18011 ;; Defined at:
 18012 ;;		line 40 in file "driver/src/tmr1.c"
 18013 ;; Parameters:    Size  Location     Type
 18014 ;;		None
 18015 ;; Auto vars:     Size  Location     Type
 18016 ;;		None
 18017 ;; Return value:  Size  Location     Type
 18018 ;;                  1    wreg      void 
 18019 ;; Registers used:
 18020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18021 ;; Tracked objects:
 18022 ;;		On entry : 1F/0
 18023 ;;		On exit  : 0/0
 18024 ;;		Unchanged: 0/0
 18025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18030 ;;Total ram usage:        0 bytes
 18031 ;; Hardware stack levels used:    1
 18032 ;; Hardware stack levels required when called:    2
 18033 ;; This function calls:
 18034 ;;		Absolute function
 18035 ;;		_IR_Decode
 18036 ;; This function is called by:
 18037 ;;		_ISR
 18038 ;; This function uses a non-reentrant model
 18039 ;;
 18040                           
 18041                           
 18042                           ;psect for function _TMR1_GATE_ISR
 18043  107A                     _TMR1_GATE_ISR:	
 18044                           
 18045                           ;tmr1.c: 42: PIR1bits.TMR1GIF = 0;
 18046                           
 18047                           ;incstack = 0
 18048                           ; Regs used in _TMR1_GATE_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18049  107A  1391               	bcf	17,7	;volatile
 18050                           
 18051                           ;tmr1.c: 43: if ( tmr1_gate_isr_handler )
 18052  107B  0021               	movlb	1	; select bank1
 18053  107C  0868               	movf	_tmr1_gate_isr_handler^(0+128),w
 18054  107D  0469               	iorwf	(_tmr1_gate_isr_handler+1)^(0+128),w
 18055  107E  1903               	btfsc	3,2
 18056  107F  0008               	return
 18057                           
 18058                           ;tmr1.c: 44: {
 18059                           ;tmr1.c: 45: tmr1_gate_isr_handler ( );
 18060  1080  0869               	movf	(_tmr1_gate_isr_handler+1)^(0+128),w
 18061  1081  008A               	movwf	10
 18062  1082  0868               	movf	_tmr1_gate_isr_handler^(0+128),w
 18063  1083  000A               	callw
 18064  1084  3190               	pagesel	$
 18065  1085  0008               	return
 18066  1086                     __end_of_TMR1_GATE_ISR:	
 18067                           
 18068                           	psect	text104
 18069  106E                     __ptext104:	
 18070 ;; *************** function _TMR0_ISR *****************
 18071 ;; Defined at:
 18072 ;;		line 27 in file "driver/src/tmr0.c"
 18073 ;; Parameters:    Size  Location     Type
 18074 ;;		None
 18075 ;; Auto vars:     Size  Location     Type
 18076 ;;		None
 18077 ;; Return value:  Size  Location     Type
 18078 ;;                  1    wreg      void 
 18079 ;; Registers used:
 18080 ;;		wreg, status,2, status,0, pclath, cstack
 18081 ;; Tracked objects:
 18082 ;;		On entry : 1F/0
 18083 ;;		On exit  : 0/0
 18084 ;;		Unchanged: 0/0
 18085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18090 ;;Total ram usage:        0 bytes
 18091 ;; Hardware stack levels used:    1
 18092 ;; Hardware stack levels required when called:    1
 18093 ;; This function calls:
 18094 ;;		Absolute function
 18095 ;;		_RTC_OnSecond
 18096 ;; This function is called by:
 18097 ;;		_ISR
 18098 ;; This function uses a non-reentrant model
 18099 ;;
 18100                           
 18101                           
 18102                           ;psect for function _TMR0_ISR
 18103  106E                     _TMR0_ISR:	
 18104                           
 18105                           ;tmr0.c: 29: PIR0bits.TMR0IF = 0;
 18106                           
 18107                           ;incstack = 0
 18108                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 18109  106E  1290               	bcf	16,5	;volatile
 18110                           
 18111                           ;tmr0.c: 31: if ( tmr0_isr_handler )
 18112  106F  0021               	movlb	1	; select bank1
 18113  1070  086A               	movf	_tmr0_isr_handler^(0+128),w
 18114  1071  046B               	iorwf	(_tmr0_isr_handler+1)^(0+128),w
 18115  1072  1903               	btfsc	3,2
 18116  1073  0008               	return
 18117                           
 18118                           ;tmr0.c: 32: {
 18119                           ;tmr0.c: 33: tmr0_isr_handler ( );
 18120  1074  086B               	movf	(_tmr0_isr_handler+1)^(0+128),w
 18121  1075  008A               	movwf	10
 18122  1076  086A               	movf	_tmr0_isr_handler^(0+128),w
 18123  1077  000A               	callw
 18124  1078  3190               	pagesel	$
 18125  1079  0008               	return
 18126  107A                     __end_of_TMR0_ISR:	
 18127                           
 18128                           	psect	text105
 18129  10EC                     __ptext105:	
 18130 ;; *************** function _RTC_OnSecond *****************
 18131 ;; Defined at:
 18132 ;;		line 19 in file "user/src/rtc.c"
 18133 ;; Parameters:    Size  Location     Type
 18134 ;;		None
 18135 ;; Auto vars:     Size  Location     Type
 18136 ;;		None
 18137 ;; Return value:  Size  Location     Type
 18138 ;;                  1    wreg      void 
 18139 ;; Registers used:
 18140 ;;		wreg, status,2, status,0
 18141 ;; Tracked objects:
 18142 ;;		On entry : 1F/1
 18143 ;;		On exit  : 1F/0
 18144 ;;		Unchanged: 0/0
 18145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18150 ;;Total ram usage:        0 bytes
 18151 ;; Hardware stack levels used:    1
 18152 ;; This function calls:
 18153 ;;		Nothing
 18154 ;; This function is called by:
 18155 ;;		_Interrupt_Initialize
 18156 ;;		_TMR0_ISR
 18157 ;; This function uses a non-reentrant model
 18158 ;;
 18159                           
 18160                           
 18161                           ;psect for function _RTC_OnSecond
 18162  10EC                     _RTC_OnSecond:	
 18163                           
 18164                           ;rtc.c: 21: rtc_time.second++;
 18165                           
 18166                           ;incstack = 0
 18167                           ; Regs used in _RTC_OnSecond: [wreg+status,2+status,0]
 18168  10EC  0020               	movlb	0	; select bank0
 18169  10ED  303C               	movlw	60
 18170  10EE  0AE2               	incf	_rtc_time+2,f
 18171                           
 18172                           ;rtc.c: 22: if( rtc_time.second > 59 )
 18173  10EF  0262               	subwf	_rtc_time+2,w
 18174  10F0  1C03               	skipc
 18175  10F1  2900               	goto	i1l5209
 18176  10F2  303C               	movlw	60
 18177                           
 18178                           ;rtc.c: 23: {
 18179                           ;rtc.c: 24: rtc_time.second = 0;
 18180  10F3  01E2               	clrf	_rtc_time+2
 18181                           
 18182                           ;rtc.c: 25: rtc_time.minute++;
 18183  10F4  0AE1               	incf	_rtc_time+1,f
 18184                           
 18185                           ;rtc.c: 26: if( rtc_time.minute > 59 )
 18186  10F5  0261               	subwf	_rtc_time+1,w
 18187  10F6  1C03               	skipc
 18188  10F7  28FF               	goto	i1l5207
 18189  10F8  3018               	movlw	24
 18190                           
 18191                           ;rtc.c: 27: {
 18192                           ;rtc.c: 28: rtc_time.minute = 0;
 18193  10F9  01E1               	clrf	_rtc_time+1
 18194                           
 18195                           ;rtc.c: 29: rtc_time.hour++;
 18196  10FA  0AE0               	incf	_rtc_time,f
 18197                           
 18198                           ;rtc.c: 30: if( rtc_time.hour > 23 )
 18199  10FB  0260               	subwf	_rtc_time,w
 18200  10FC  1803               	btfsc	3,0
 18201                           
 18202                           ;rtc.c: 31: {
 18203                           ;rtc.c: 32: rtc_time.hour = 0;
 18204  10FD  01E0               	clrf	_rtc_time
 18205                           
 18206                           ;rtc.c: 33: }
 18207                           ;rtc.c: 34: rtc_status.mHour = 1;
 18208  10FE  1554               	bsf	_rtc_status,2	;volatile
 18209  10FF                     i1l5207:	
 18210                           
 18211                           ;rtc.c: 35: }
 18212                           ;rtc.c: 36: rtc_status.mMin = 1;
 18213  10FF  14D4               	bsf	_rtc_status,1	;volatile
 18214  1100                     i1l5209:	
 18215                           
 18216                           ;rtc.c: 37: }
 18217                           ;rtc.c: 38: rtc_status.mSec = 1;
 18218  1100  1454               	bsf	_rtc_status,0	;volatile
 18219  1101  0008               	return
 18220  1102                     __end_of_RTC_OnSecond:	
 18221                           
 18222                           	psect	text106
 18223  1102                     __ptext106:	
 18224 ;; *************** function _EUSART_Transmit_ISR *****************
 18225 ;; Defined at:
 18226 ;;		line 63 in file "driver/src/eusart.c"
 18227 ;; Parameters:    Size  Location     Type
 18228 ;;		None
 18229 ;; Auto vars:     Size  Location     Type
 18230 ;;		None
 18231 ;; Return value:  Size  Location     Type
 18232 ;;                  1    wreg      void 
 18233 ;; Registers used:
 18234 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18235 ;; Tracked objects:
 18236 ;;		On entry : 1F/0
 18237 ;;		On exit  : 1F/1
 18238 ;;		Unchanged: 0/0
 18239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18244 ;;Total ram usage:        0 bytes
 18245 ;; Hardware stack levels used:    1
 18246 ;; This function calls:
 18247 ;;		Nothing
 18248 ;; This function is called by:
 18249 ;;		_ISR
 18250 ;; This function uses a non-reentrant model
 18251 ;;
 18252                           
 18253                           
 18254                           ;psect for function _EUSART_Transmit_ISR
 18255  1102                     _EUSART_Transmit_ISR:	
 18256                           
 18257                           ;eusart.c: 65: if ( sizeof (txBuf ) > txRemain )
 18258                           
 18259                           ;incstack = 0
 18260                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 18261  1102  3020               	movlw	32
 18262  1103  0021               	movlb	1	; select bank1
 18263  1104  026C               	subwf	_txRemain^(0+128),w
 18264  1105  1803               	skipnc
 18265  1106  2919               	goto	i1l105
 18266                           
 18267                           ;eusart.c: 66: {
 18268                           ;eusart.c: 67: TXREG = txBuf[txTail++];
 18269  1107  0020               	movlb	0	; select bank0
 18270  1108  0858               	movf	_txTail,w
 18271  1109  3E20               	addlw	(low (_txBuf| (0+256)))& (0+255)
 18272  110A  0086               	movwf	6
 18273  110B  3001               	movlw	1	; select bank2/3
 18274  110C  0087               	movwf	7
 18275  110D  0801               	movf	1,w
 18276  110E  0023               	movlb	3	; select bank3
 18277  110F  009A               	movwf	26	;volatile
 18278  1110  0020               	movlb	0	; select bank0
 18279  1111  3020               	movlw	32
 18280  1112  0AD8               	incf	_txTail,f
 18281                           
 18282                           ;eusart.c: 68: if ( sizeof (txBuf ) <= txTail )
 18283  1113  0258               	subwf	_txTail,w
 18284  1114  1803               	btfsc	3,0
 18285                           
 18286                           ;eusart.c: 69: {
 18287                           ;eusart.c: 70: txTail = 0;
 18288  1115  01D8               	clrf	_txTail
 18289                           
 18290                           ;eusart.c: 71: }
 18291                           ;eusart.c: 72: txRemain++;
 18292  1116  0021               	movlb	1	; select bank1
 18293  1117  0AEC               	incf	_txRemain^(0+128),f
 18294                           
 18295                           ;eusart.c: 73: }
 18296  1118  0008               	return
 18297  1119                     i1l105:	
 18298                           
 18299                           ;eusart.c: 74: else
 18300                           ;eusart.c: 75: {
 18301                           ;eusart.c: 76: PIE1bits.TXIE = 0;
 18302  1119  1211               	bcf	17,4	;volatile
 18303  111A  0008               	return
 18304  111B                     __end_of_EUSART_Transmit_ISR:	
 18305  007E                     btemp	set	126	;btemp
 18306  007E                     int$flags	set	126
 18307  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    10
    Data        50
    BSS         90
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     37      67
    BANK1            80      0      77
    BANK2            80     13      55
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           11      0       0
    BANK12            0      0       0

Pointer List with Targets:

    Util_DecValue@pSrc	PTR unsigned int  size(2) Largest target is 117
		 -> gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara(BANK1[26]), gLedPara.mVolume(BIGRAM[1]), gLedPara(BIGRAM[117]), 

    Util_IncValue@pSrc	PTR unsigned int  size(2) Largest target is 117
		 -> gLedRunPara.mCurrentBright(BANK1[10]), gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara(BANK1[26]), gLedPara.mVolume(BIGRAM[1]), 
		 -> gLedPara(BIGRAM[117]), 

    IR_IsValidTime@tm	PTR unsigned char  size(1) Largest target is 7
		 -> ir_state.time(BANK0[4]), ir_state(BANK0[7]), 

    Led_SetCustom@pValue	PTR unsigned int  size(1) Largest target is 26
		 -> gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara(BANK1[26]), 

    sp__RTC_GetTime	PTR struct . size(1) Largest target is 3
		 -> rtc_time(BANK0[3]), 

    loadDuty	PTR FTN(unsigned int ,)void [5] size(2) Largest target is 1
		 -> PWM5_LoadDutyValue(), PWM4_LoadDutyValue(), PWM3_LoadDutyValue(), PWM2_LoadDutyValue(), 
		 -> PWM1_LoadDutyValue(), 

    TMR4_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Notice(), 

    tmr4_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Notice(), Absolute function(), 

    TMR2_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Run(), 

    tmr2_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Run(), Absolute function(), 

    TMR1_Gate_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> IR_Decode(), 

    tmr1_gate_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> IR_Decode(), Absolute function(), 

    tmr1_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> RTC_OnSecond(), 

    tmr0_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> RTC_OnSecond(), Absolute function(), 

    eusart_rcv_isr_handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    DATAEE_ReadBuffer@buf	PTR unsigned char  size(2) Largest target is 117
		 -> gLedPara(BIGRAM[117]), 

    DATAEE_WriteBuffer@buf	PTR unsigned char  size(2) Largest target is 117
		 -> gLedPara(BIGRAM[117]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR4_ISR->_Led_Notice
    _TMR2_ISR->_Led_Run
    _Led_Run->_Led_RunMusic
    _Led_RunMusic->_Led_DynamicCloud
    _Led_RunMusic->_Led_DynamicMoon
    _Led_RunMusic->_Led_DynamicStorm
    _Led_RunMusic->_Led_DynamicWave
    _Led_DynamicWave->i1___wmul
    _Led_DynamicStorm->i1___wmul
    _Led_DynamicMoon->i1___wmul
    _Led_DynamicCloud->i1___wmul
    i1_Led_UpdateBright->i1_PWM5_LoadDutyValue
    _Audio_SelectSound->i1_EUSART_Write
    _Led_Ramp->i1_PWM5_LoadDutyValue
    _IR_ScanLongPress->_Led_SetCustom
    _Led_SetCustom->i1___wmul
    _TMR1_GATE_ISR->_IR_Decode
    _IR_Decode->_IR_GetKeyType

Critical Paths under _main in BANK0

    _SYSTEM_Initialize->_PIN_Initialize
    _Led_SaveParaIfChanged->_DATAEE_WriteBuffer
    _DATAEE_WriteBuffer->_DATAEE_WriteByte
    _Led_InitPara->_DATAEE_ReadBuffer
    _DATAEE_ReadBuffer->_DATAEE_ReadByte
    _Led_CheckAutoStatus->___wmul
    _Led_AutoRun->_Util_IncValue
    _Interrupt_Initialize->_TMR0_SetInterruptHandler
    _Interrupt_Initialize->_TMR1_Gate_SetInterruptHandler
    _Interrupt_Initialize->_TMR2_SetInterruptHandler
    _Interrupt_Initialize->_TMR4_SetInterruptHandler
    _IR_ExitTimeout->_Led_Initialize
    _IR_KeyAtionIfPressed->_IR_KeyAction
    _IR_KeyAction->_Led_Initialize
    _IR_IsValidTime->___bmul
    _IR_ExitSet->_Led_Initialize
    _Led_Initialize->___wmul
    _Led_UpdateBright->_PWM5_LoadDutyValue
    _Audio_Initialize->_Audio_SetPlayMode
    _Audio_Initialize->_Audio_SetVolume
    _Audio_StopSound->_EUSART_Write
    _Audio_SetVolume->_EUSART_Write
    _Audio_SetPlayMode->_EUSART_Write
    _Audio_GetValue->___wmul

Critical Paths under _ISR in BANK0

    _Led_RunMusic->_Led_DynamicCloud
    _Led_RunMusic->_Led_DynamicMoon
    _Led_RunMusic->_Led_DynamicStorm
    _Led_RunMusic->_Led_DynamicWave
    _IR_ScanLongPress->_Led_SetCustom

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _IR_KeyAtionIfPressed->_IR_KeyAction

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   51658
                     _Audio_GetValue
                   _Audio_Initialize
               _IR_KeyAtionIfPressed
             _IR_ResetIfTMR1Overflow
                 _IR_UpdateSetStatus
               _Interrupt_Initialize
                        _Led_AutoRun
                _Led_CheckAutoStatus
                       _Led_InitPara
                     _Led_Initialize
              _Led_SaveParaIfChanged
                      _RTC_HourReady
                    _RTC_MinuteReady
                    _RTC_SecondReady
                  _SYSTEM_Initialize
                    _TMR0_StartTimer
                    _TMR1_StartTimer
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
             _ADC_Initialize_Default
          _EUSART_Initialize_Default
              _OSCILLATOR_Initialize
                     _PIN_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM3_Initialize
                    _PWM4_Initialize
                    _PWM5_Initialize
            _TMR0_Initialize_Default
            _TMR1_Initialize_Default
            _TMR2_Initialize_Default
            _TMR4_Initialize_Default
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_Initialize                                       1     1      0      23
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize_Default                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize_Default                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_SecondReady                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_MinuteReady                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_HourReady                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_SaveParaIfChanged                                0     0      0     584
                 _DATAEE_WriteBuffer
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteBuffer                                   6     1      5     584
                                             17 BANK0      6     1      5
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     4     1      3     242
                                             13 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Led_InitPara                                        10    10      0    4581
                                             22 BANK0     10    10      0
                  _DATAEE_ReadBuffer
                   _Led_FirstPowerUp
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Led_FirstPowerUp                                     7     7      0     178
                                             13 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadBuffer                                    7     2      5     463
                                             15 BANK0      7     2      5
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      2     0      2     121
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Led_CheckAutoStatus                                 13    13      0    4276
                                             19 BANK0     13    13      0
                   _Led_UpdateBright
                        _RTC_GetTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Led_AutoRun                                          5     5      0    4796
                                             23 BANK0      5     5      0
                   _Led_UpdateBright
                      _Util_IncValue
 ---------------------------------------------------------------------------------
 (1) _Interrupt_Initialize                                 0     0      0     392
           _TMR0_SetInterruptHandler
      _TMR1_Gate_SetInterruptHandler
           _TMR2_SetInterruptHandler
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR4_SetInterruptHandler                             2     0      2      98
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2      98
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_Gate_SetInterruptHandler                        2     0      2      98
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2      98
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _IR_UpdateSetStatus                                   0     0      0    4440
                     _IR_ExitTimeout
 ---------------------------------------------------------------------------------
 (2) _IR_ExitTimeout                                       0     0      0    4440
                     _Led_Initialize
                    _Led_StartNotice
 ---------------------------------------------------------------------------------
 (1) _IR_ResetIfTMR1Overflow                               0     0      0       0
                    _TMR1_StartTimer
                     _TMR1_StopTimer
               _TMR2_EnableInterrupt
 ---------------------------------------------------------------------------------
 (2) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_KeyAtionIfPressed                                 0     0      0   24196
                       _IR_KeyAction
 ---------------------------------------------------------------------------------
 (2) _IR_KeyAction                                        23    23      0   24196
                                             27 BANK0     10    10      0
                                              0 BANK2     13    13      0
                    _Audio_SetVolume
                    _Audio_StopSound
                         _IR_ExitSet
                        _IR_GetIndex
                     _IR_IsValidTime
                     _Led_Initialize
                    _Led_StartNotice
                        _RTC_GetTime
              _TMR2_DisableInterrupt
               _TMR2_EnableInterrupt
                      _Util_DecValue
                      _Util_IncValue
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Util_IncValue                                       10     4      6    4162
                                             13 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (3) _Util_DecValue                                       10     4      6    3622
                                             13 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _TMR2_EnableInterrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_DisableInterrupt                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _IR_IsValidTime                                       5     4      1    1331
                                             16 BANK0      5     4      1
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     676
                                             13 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _IR_GetIndex                                          2     2      0     134
                                             13 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _IR_ExitSet                                           0     0      0    4440
                     _Led_Initialize
                    _Led_StartNotice
 ---------------------------------------------------------------------------------
 (3) _Led_StartNotice                                      2     2      0      31
                                             13 BANK0      2     2      0
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (4) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_Initialize                                       8     8      0    4409
                                             19 BANK0      8     8      0
                    _Led_TurnOffRamp
                     _Led_TurnOnRamp
                   _Led_UpdateBright
                        _RTC_GetTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _RTC_GetTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Led_UpdateBright                                     1     1      0     380
                                             17 BANK0      1     1      0
                 _PWM1_LoadDutyValue *
                 _PWM2_LoadDutyValue *
                 _PWM3_LoadDutyValue *
                 _PWM4_LoadDutyValue *
                 _PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (3) _PWM5_LoadDutyValue                                   4     2      2     126
                                             13 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _PWM4_LoadDutyValue                                   2     0      2      31
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM3_LoadDutyValue                                   2     0      2      31
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM2_LoadDutyValue                                   2     0      2      31
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM1_LoadDutyValue                                   2     0      2      31
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOnRamp                                       5     5      0     130
                                             13 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOffRamp                                      1     1      0      99
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Audio_Initialize                                     4     4      0     504
                                             16 BANK0      4     4      0
                  _Audio_SetPlayMode
                    _Audio_SetVolume
                    _Audio_StopSound
 ---------------------------------------------------------------------------------
 (3) _Audio_StopSound                                      1     1      0     133
                                             14 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _Audio_SetVolume                                      2     2      0     167
                                             14 BANK0      2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _Audio_SetPlayMode                                    2     2      0     167
                                             14 BANK0      2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      93
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Audio_GetValue                                       6     6      0    3457
                                             19 BANK0      6     6      0
                     _ADC_Conversion
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3246
                                             13 BANK0      6     2      4
                        _RTC_GetTime (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADC_Conversion                                       4     2      2      22
                                             13 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    8671
                _EUSART_Transmit_ISR
                           _TMR0_ISR
                      _TMR1_GATE_ISR
                           _TMR2_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR4_ISR                                             0     0      0       0
                   Absolute function *
                         _Led_Notice *
 ---------------------------------------------------------------------------------
 (9) _Led_Notice                                           1     1      0       0
                                              0 COMMON     1     1      0
                  _Led_TurnOffDirect
                   _Led_TurnOnDirect
                     _TMR4_StopTimer
 ---------------------------------------------------------------------------------
 (10) _TMR4_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Led_TurnOnDirect                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Led_TurnOffDirect                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR2_ISR                                             0     0      0    8035
                   Absolute function *
                            _Led_Run *
 ---------------------------------------------------------------------------------
 (9) _Led_Run                                              1     1      0    8035
                                             13 COMMON     1     1      0
                   _IR_ScanLongPress
                           _Led_Ramp
                       _Led_RunMusic
 ---------------------------------------------------------------------------------
 (10) _Led_RunMusic                                        1     1      0    5907
                                             12 COMMON     1     1      0
                  _Audio_SelectSound
                   _Led_DynamicCloud
                    _Led_DynamicMoon
                   _Led_DynamicStorm
                    _Led_DynamicWave
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicWave                                    19    17      2    1320
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicStorm                                   19    17      2    1490
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicMoon                                    19    17      2    1351
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicCloud                                   19    17      2    1629
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (12) i1_Led_UpdateBright                                  1     1      0     292
                                              4 COMMON     1     1      0
               i1_PWM1_LoadDutyValue *
               i1_PWM2_LoadDutyValue *
               i1_PWM3_LoadDutyValue *
               i1_PWM4_LoadDutyValue *
               i1_PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (11) _Audio_SelectSound                                   2     2      0     117
                                              1 COMMON     2     2      0
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (12) i1_EUSART_Write                                      1     1      0      66
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _Led_Ramp                                            7     7      0     540
                                              4 COMMON     7     7      0
               i1_PWM1_LoadDutyValue *
               i1_PWM2_LoadDutyValue *
               i1_PWM3_LoadDutyValue *
               i1_PWM4_LoadDutyValue *
               i1_PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (13) i1_PWM5_LoadDutyValue                                4     2      2      74
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM4_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM3_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM2_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM1_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _IR_ScanLongPress                                    7     7      0    1588
                                              4 BANK0      7     7      0
                      _Led_SetCustom
                      i1_IR_GetIndex
                  i1_Led_StartNotice
                    i1_Util_DecValue
                    i1_Util_IncValue
 ---------------------------------------------------------------------------------
 (11) i1_Util_IncValue                                    10     4      6     232
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (11) i1_Util_DecValue                                    10     4      6     232
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (11) i1_Led_StartNotice                                   2     2      0      22
                                              0 COMMON     2     2      0
                  i1_TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (12) i1_TMR4_StartTimer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_IR_GetIndex                                       2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _Led_SetCustom                                      11    10      1     696
                                              6 COMMON     7     6      1
                                              0 BANK0      4     4      0
                           i1___wmul
 ---------------------------------------------------------------------------------
 (12) i1___wmul                                            6     2      4     440
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) _TMR1_GATE_ISR                                        0     0      0     636
                   Absolute function *
                          _IR_Decode *
 ---------------------------------------------------------------------------------
 (9) _IR_Decode                                            9     9      0     636
                                              3 COMMON     9     9      0
                      _IR_GetKeyType
            i1_TMR2_DisableInterrupt
             i1_TMR2_EnableInterrupt
 ---------------------------------------------------------------------------------
 (10) i1_TMR2_EnableInterrupt                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_TMR2_DisableInterrupt                             0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _IR_GetKeyType                                       3     3      0     256
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
                       _RTC_OnSecond *
 ---------------------------------------------------------------------------------
 (9) _RTC_OnSecond                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Audio_GetValue
     _ADC_Conversion
     ___wmul
       _RTC_GetTime (ARG)
   _Audio_Initialize
     _Audio_SetPlayMode
       _EUSART_Write
     _Audio_SetVolume
       _EUSART_Write
     _Audio_StopSound
       _EUSART_Write
   _IR_KeyAtionIfPressed
     _IR_KeyAction
       _Audio_SetVolume
         _EUSART_Write
       _Audio_StopSound
         _EUSART_Write
       _IR_ExitSet
         _Led_Initialize
           _Led_TurnOffRamp
           _Led_TurnOnRamp
           _Led_UpdateBright
             _PWM1_LoadDutyValue *
             _PWM2_LoadDutyValue *
             _PWM3_LoadDutyValue *
             _PWM4_LoadDutyValue *
             _PWM5_LoadDutyValue *
           _RTC_GetTime
           ___wmul
             _RTC_GetTime (ARG)
         _Led_StartNotice
           _TMR4_StartTimer
       _IR_GetIndex
       _IR_IsValidTime
         ___bmul
       _Led_Initialize
         _Led_TurnOffRamp
         _Led_TurnOnRamp
         _Led_UpdateBright
           _PWM1_LoadDutyValue *
           _PWM2_LoadDutyValue *
           _PWM3_LoadDutyValue *
           _PWM4_LoadDutyValue *
           _PWM5_LoadDutyValue *
         _RTC_GetTime
         ___wmul
           _RTC_GetTime (ARG)
       _Led_StartNotice
         _TMR4_StartTimer
       _RTC_GetTime
       _TMR2_DisableInterrupt
       _TMR2_EnableInterrupt
       _Util_DecValue
       _Util_IncValue
       ___bmul
       ___wmul
         _RTC_GetTime (ARG)
   _IR_ResetIfTMR1Overflow
     _TMR1_StartTimer
     _TMR1_StopTimer
     _TMR2_EnableInterrupt
   _IR_UpdateSetStatus
     _IR_ExitTimeout
       _Led_Initialize
         _Led_TurnOffRamp
         _Led_TurnOnRamp
         _Led_UpdateBright
           _PWM1_LoadDutyValue *
           _PWM2_LoadDutyValue *
           _PWM3_LoadDutyValue *
           _PWM4_LoadDutyValue *
           _PWM5_LoadDutyValue *
         _RTC_GetTime
         ___wmul
           _RTC_GetTime (ARG)
       _Led_StartNotice
         _TMR4_StartTimer
   _Interrupt_Initialize
     _TMR0_SetInterruptHandler
     _TMR1_Gate_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR4_SetInterruptHandler
   _Led_AutoRun
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _Util_IncValue
   _Led_CheckAutoStatus
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _RTC_GetTime
     ___wmul
       _RTC_GetTime (ARG)
   _Led_InitPara
     _DATAEE_ReadBuffer
       _DATAEE_ReadByte
     _Led_FirstPowerUp
     ___wmul
       _RTC_GetTime (ARG)
   _Led_Initialize
     _Led_TurnOffRamp
     _Led_TurnOnRamp
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _RTC_GetTime
     ___wmul
       _RTC_GetTime (ARG)
   _Led_SaveParaIfChanged
     _DATAEE_WriteBuffer
       _DATAEE_WriteByte
   _RTC_HourReady
   _RTC_MinuteReady
   _RTC_SecondReady
   _SYSTEM_Initialize
     _ADC_Initialize_Default
     _EUSART_Initialize_Default
     _OSCILLATOR_Initialize
     _PIN_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _PWM3_Initialize
     _PWM4_Initialize
     _PWM5_Initialize
     _TMR0_Initialize_Default
     _TMR1_Initialize_Default
     _TMR2_Initialize_Default
     _TMR4_Initialize_Default
   _TMR0_StartTimer
   _TMR1_StartTimer
   _TMR2_StartTimer

 _ISR (ROOT)
   _EUSART_Transmit_ISR
   _TMR0_ISR
     Absolute function(Fake) *
     _RTC_OnSecond *
   _TMR1_GATE_ISR
     Absolute function(Fake) *
     _IR_Decode *
       _IR_GetKeyType
       i1_TMR2_DisableInterrupt
       i1_TMR2_EnableInterrupt
   _TMR2_ISR
     Absolute function(Fake) *
     _Led_Run *
       _IR_ScanLongPress
         _Led_SetCustom
           i1___wmul
         i1_IR_GetIndex
         i1_Led_StartNotice
           i1_TMR4_StartTimer
         i1_Util_DecValue
         i1_Util_IncValue
       _Led_Ramp
         i1_PWM1_LoadDutyValue *
         i1_PWM2_LoadDutyValue *
         i1_PWM3_LoadDutyValue *
         i1_PWM4_LoadDutyValue *
         i1_PWM5_LoadDutyValue *
       _Led_RunMusic
         _Audio_SelectSound
           i1_EUSART_Write
         _Led_DynamicCloud
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicMoon
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicStorm
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicWave
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
   _TMR4_ISR
     Absolute function(Fake) *
     _Led_Notice *
       _Led_TurnOffDirect
       _Led_TurnOnDirect
       _TMR4_StopTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      43       5       83.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      D      37       9       68.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      D5      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11               B      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      D5      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Jan 26 11:06:36 2018

                      ??i1_EUSART_Write 0070              __size_of_Audio_SetPlayMode 0017  
      __end_of_TMR2_SetInterruptHandler 0F0F                          ___bmul@product 002E  
            __size_of_Audio_SelectSound 0023                             __CFG_CP$OFF 0000  
                                    PL2 0DBC                                      PL4 1678  
                                    PL6 0DCF                                      PL8 168A  
                                    l26 092F                                      l46 0FDA  
                                    l95 164E                    i1_PWM1_LoadDutyValue 10C2  
                   ?_IR_UpdateSetStatus 0070                           _Util_IncValue 153A  
                   ___wmul@multiplicand 002F                       _IR_KeyAction$1448 0140  
                      i1___wmul@product 0074                  ??i1_PWM4_LoadDutyValue 0072  
         i1PWM5_LoadDutyValue@dutyValue 0070                  _ADC_Initialize_Default 0FE4  
                                   PL10 0F73                                     PL20 0DEE  
                                   PL12 0795                                     PL30 16B2  
                                   PL22 04C8                                     PL14 1694  
                                   PL40 16F3                                     PL32 16B9  
                                   PL24 0DF6                                     PL16 169D  
                   IR_ScanLongPress@cnt 0045                                     PL50 0E0A  
                                   PL42 0E03                                     PL34 16C1  
                                   PL26 04D2                                     PL18 0DE0  
                                   PL60 0E13                                     PL52 04E0  
                                   PL44 16F9                                     PL36 0F84  
                                   PL28 16AB                                     PL70 1732  
                                   PL62 17F1                                     PL54 1712  
                                   PL46 1703                                     PL38 16DD  
                           __CFG_LVP$ON 0000                                     PL80 1745  
                                   PL72 0E18                                     PL64 1724  
                                   PL56 04F2                                     PL48 1709  
                   IR_ScanLongPress@idx 002A                                     PL90 0E2A  
                                   PL82 0FA3                                     PL74 0509  
                                   PL66 0F9A                                     PL58 04F9  
                                   PL92 0E36                                     PL84 0521  
                                   PL76 0515                                     PL68 0500  
                                   PL94 174C                                     PL86 0E1E  
                                   PL78 173F                                     PL96 0539  
                                   PL88 052D                                     PL98 079E  
                                   l343 08E2                                     l507 0889  
                                   l620 0BA5                                     l615 0B5F  
                                   l616 0B6D                                     l641 0A07  
                                   l625 0C10                                     l617 0B7B  
                                   l626 0C1A                                     l618 0B89  
                                   l619 0B97                                     l900 158B  
                                   l913 1592                                     l906 158D  
                                   l909 1590                                     _GIE 005F  
                                   _PR2 001E                                     _PR4 0416  
                          __CFG_CPD$OFF 0000                                     _ISR 0004  
                       _Led_TurnOffRamp 0ED0                        ?_Led_DynamicMoon 0076  
       __end_of_TMR2_Initialize_Default 0EC5                        ?_Led_DynamicWave 0076  
                       _PWM4_Initialize 0E90                                     wreg 0009  
                 ?_Interrupt_Initialize 0070                          ?_RTC_HourReady 0070  
                                  PL100 1754                                    PL110 0E47  
                                  PL102 0E3D                                    PL120 0E67  
                                  PL112 0E51                                    PL104 175F  
                                  PL130 0570                                    PL122 0550  
                                  PL114 0E5B                                    PL106 0541  
                                  PL140 0EDF                                    PL132 0E6D  
                                  PL124 0558                                    PL116 0E61  
                                  PL108 176A                                    PL150 0F01  
                                  PL142 0E75                                    PL134 0578  
                                  PL126 0560                                    PL118 0547  
                                  PL160 1788                                    PL152 0E80  
                                  PL144 0E7B                                    PL136 1774  
                                  PL128 0568                                    PL170 0E8B  
                                  PL162 178D                                    PL154 1782  
                                  PL146 0588                                    PL138 0580  
                                  PL172 1792                                    PL164 0E86  
                                  PL156 07A3                                    PL148 177C  
                                  PL166 17FB                                    PL158 07A8  
                                  PL168 07AD                                    ?_ISR 0070  
             _EUSART_Initialize_Default 0FEB                                    l1203 123E  
                                  l1053 0AB5                                    l1209 124B  
                                  l1250 13CE                                    l1058 0A87  
                                  l1068 0A87                                    l1183 11EB  
                                  l1273 145E                                    l1169 116B  
                                  l1179 11BB                                    l1196 1213  
                                  l5025 0A78                                    l5117 0F17  
                                  l5127 0F27                                    l7001 12AE  
                                  l5049 0F0F                                    l6205 0ED6  
                                  l6301 09CE                                    l7013 12C6  
                   PIN_Initialize@state 002D                                    l6231 0CA5  
                                  l6303 09DC                                    l6225 0CA3  
                                  l6305 09EA                                    l6313 0A06  
                                  l7113 13AD                                    l6243 1568  
                                  l6219 0EE9                                    l6323 0A41  
                                  l6331 0A43                                    l6307 09F8  
                                  l6315 0A08                                    l7203 147A  
                                  l7131 13DC                                    l7107 13A6  
                                  l7051 131B                                    l7019 12D6  
                                  l6181 10B9                                    l7133 13DD  
                                  l7125 13CE                                    l7029 12F3  
                                  l7213 1482                                    l7301 0C33  
                                  l6239 1562                                    l7231 08D8  
                                  l6183 10CB                                    l6351 0A5D  
                                  l6191 1672                                    l7119 13BD  
                                  l7063 1331                                    l7047 1315  
                                  l7215 150F                                    l6281 1654  
                                  l6185 10DD                                    l6345 0A5C  
                                  l7137 13E8                                    l7235 08EA  
                                  l6267 1643                                    l6187 07F1  
                                  l6339 0A47                                    l6611 1594  
                                  l7171 1447                                    l7139 13EB  
                                  l7067 1338                                    l4931 0FAC  
                                  l4907 0FE4                                    l7237 08EE  
                                  l7317 0961                                    l6197 0ED0  
                                  l6189 111E                                    l6357 0A71  
                                  l6621 1598                                    l6605 158B  
                                  l7149 1417                                    l7085 1366  
                                  l7405 0D27                                    l6295 09A6  
                                  l6287 0988                                    l6623 159A  
                                  l6607 1590                                    l7191 146A  
                                  l7175 144E                                    l7159 142D  
                                  l7095 1383                                    l7079 1356  
                                  l7423 0C4B                                    l6625 159C  
                                  l6609 1592                                    l7281 0BB3  
                                  l4929 0FAA                                    l6643 159E  
                                  l6619 1596                                    l7187 1463  
                                  l6811 116B                                    l7347 0A89  
                                  l7435 0C6B                                    l4947 0D38  
                                  l7275 0BB2                                    l7259 0B51  
                                  l7349 0AB6                                    l7453 0C90  
                                  l7461 0CA2                                    l7429 0C5E  
                                  l7365 0CE7                                    l7285 0BF9  
                                  l7509 08AF                                    l6647 15A1  
                                  l6655 179B                                    l6903 1213  
                                  l6823 1189                                    l7439 0C77  
                                  l7519 08C7                                    l6649 1612  
                                  l6673 17B9                                    l6665 17AC  
                                  l6833 119C                                    l7457 0C9D  
                                  l7449 0C80                                    l7385 0D0B  
                                  l7377 0D02                                    l7297 0C24  
                                  l6499 17E7                                    l6659 17A5  
                                  l6683 17D5                                    l6923 123E  
                                  l6851 11AD                                    l6771 1153  
                                  l6763 114B                                    l6685 17E3  
                                  l6773 1155                                    l6749 113F  
                                  l7397 0D1E                                    l6943 124B  
                                  l6775 1159                                    l6759 1147  
                                  l6881 11DE                                    l6857 11BB  
                                  l7497 089B                                    l6875 11C9  
                                  l6787 115F                                    l6981 1289  
                                  l6949 1253                                    l6959 1263  
                                  l6879 11DA                                    l6887 11EE  
                                  l6799 1165                 __end_of_RTC_MinuteReady 0B0C  
                                  l6985 128F                                    l6969 126A  
                                  l6897 120A                                    l6889 11F1  
                                  l6997 12A7                            __CFG_WDTE$ON 0000  
                                  _GAIN 1800                 __end_of_PWM1_Initialize 0B3A  
                                  _LATA 010C                                    _LATB 010D  
                                  _LATC 010E                 __end_of_RTC_SecondReady 0B11  
                                  u5235 1124                                    u5405 0A34  
                                  u5415 0A3F                                    u3770 0DAA  
                                  u5375 0A1F                                    u6605 0D08  
                                  i1l95 0115                                    u6375 08DE  
                                  u5735 154E                                    u6385 08E8  
                                  u6625 0D24                    ??_IR_UpdateSetStatus 003B  
                                  u5855 1528                                    u6585 0CE4  
                                  u6685 0C65                                    u6927 0942  
                                  u6695 0C71                                    u6937 0953  
                                  u6947 0971                                    u6957 0981  
                                  u6967 092A                                    _TMR1 0019  
                                  _TMR2 001D                                    _TMR4 0415  
                                  _WPUA 020C                                    _WPUB 020D  
                                  _WPUC 020E                        _Led_TurnOnDirect 07E2  
                          __CFG_WRT$OFF 0000                     __end_of_Led_AutoRun 0CA3  
                                  _main 0878                       ?_Led_DynamicCloud 0076  
                       _TMR0_StartTimer 0DB7                                    fsr0h 0005  
                                  fsr1h 0007                                    indf0 0000  
                                  fsr0l 0004                                    indf1 0001  
                                  fsr1l 0006                                    btemp 007E  
                        ?_Util_DecValue 002D                      Led_DynamicMoon@val 002A  
                    Led_DynamicMoon@ptp 0076                       ?_Led_DynamicStorm 0076  
                                  start 002E                      ??_Led_DynamicCloud 0078  
                      Util_DecValue@min 002F                         _PWM5_Initialize 0E9B  
               _TMR0_Initialize_Default 0EA1                    _IR_KeyAtionIfPressed 0A73  
                         __CFG_CSWEN$ON 0000                      Led_DynamicWave@val 002A  
                    Led_DynamicWave@ptp 0076                       ___bmul@multiplier 002F  
                         __CFG_MCLRE$ON 0000                         __end_of_Led_Run 0069  
                    ??_Led_DynamicStorm 0078              ??_TMR4_SetInterruptHandler 002F  
            __end_of_PWM5_LoadDutyValue 1130                         IR_Decode@keyNum 0079  
                                 ??_ISR 007E                     Led_DynamicCloud@val 002A  
                   Led_DynamicCloud@ptp 0076                      i1_Led_UpdateBright 04B4  
                 ?i1_PWM1_LoadDutyValue 0070               __size_of_DATAEE_WriteByte 0021  
                        ?_Util_IncValue 002D                         IR_Decode@rptCnt 0051  
               __end_of_PWM2_Initialize 0B43                     _Led_CheckAutoStatus 0CBC  
                         ?_EUSART_Write 0070          __size_of_OSCILLATOR_Initialize 000A  
         __end_of_OSCILLATOR_Initialize 0B34                                   _ADACT 009F  
                                 ?_main 0070                 __end_of_Led_StartNotice 1666  
         __size_ofi1_PWM3_LoadDutyValue 0006                                   _ADRES 009B  
                                 _CCPR1 0291                                   _CCPR2 0295  
                                 _CCPR3 0311                                   _CCPR4 0315  
        ?_TMR1_Gate_SetInterruptHandler 002D                         _TMR1_StartTimer 0A78  
                                 _T1CON 001B                                   _T2CON 001F  
                                 _T4CON 0417                          __CFG_DEBUG$OFF 0000  
                                 i1l105 1119                              _Led_Notice 07B2  
                                 i1l521 0017                                   i1l523 001E  
                                 i1l525 0024                                   i1l519 000D  
                                 i1l528 002C                                   i1l900 0381  
                                 i1l815 00E7                                   i1l913 0388  
                                 i1l906 0383                                   i1l827 0068  
                                 i1l764 014C                                   i1l909 0386  
                                 i1l775 0251                                   i1l962 0722  
                                 i1l957 0669                                   i1l990 06AD  
                                 i1l968 0686                                   i1l999 06B7  
                   ?i1_Led_UpdateBright 0070                                   _OSCEN 091D  
                    _PWM4_LoadDutyValue 07EE                                   _TMR0H 0016  
                                 _TMR0L 0015                __end_of_IR_ScanLongPress 037D  
                                 _TRISA 008C                                   _TRISB 008D  
                                 _TRISC 008E                       _Led_TurnOffDirect 07D9  
                                 _TXREG 019A                    i1_PWM5_LoadDutyValue 1130  
                    __size_of_IR_Decode 00CC       __size_of_TMR0_SetInterruptHandler 0008  
               __size_of_PIN_Initialize 004D               ?_TMR0_SetInterruptHandler 002D  
                         __CFG_PWRTE$ON 0000                             ?_IR_ExitSet 0070  
                        __CFG_FCMEN$OFF 0000                      _DATAEE_WriteBuffer 0FAA  
                      __end_of_TMR0_ISR 107A                        __end_of_TMR2_ISR 1092  
                      __end_of_TMR4_ISR 109E                      ?_Led_TurnOffDirect 0070  
                      _tmr4_isr_handler 00E4                         _DATAEE_ReadByte 0D51  
       __end_ofi1_TMR2_DisableInterrupt 0795                     ?_PWM4_LoadDutyValue 002D  
                                 _txBuf 0120                    __end_of_Led_InitPara 0C39  
                  ?_Led_CheckAutoStatus 0070            __end_ofi1_PWM2_LoadDutyValue 10DA  
               __end_of_PWM3_Initialize 0DB7                          __CFG_BOREN$OFF 0000  
                                 pclath 000A                        __end_ofi1___wmul 0468  
                        __CFG_BORV$HIGH 0000                     Led_DynamicMoon@duty 0020  
                   ?_DATAEE_WriteBuffer 0031                     ??_Led_TurnOffDirect 0070  
                                 status 0003                     i1___wmul@multiplier 0070  
                                 wtemp0 007E                   Audio_SetPlayMode@type 002E  
                       _TMR2_StartTimer 0DBA                       Util_DecValue@pSrc 002D  
                          __end_ofPL100 175F                            __end_ofPL110 0E51  
                          __end_ofPL102 0E47                            __end_ofPL120 0E6D  
                          __end_ofPL112 0E5B                            __end_ofPL104 176A  
                  ??i1_Led_UpdateBright 0074                            __end_ofPL130 0578  
                          __end_ofPL122 0558                            __end_ofPL114 0E61  
                          __end_ofPL106 0547                            __end_ofPL140 0EE6  
                          __end_ofPL132 0E75                            __end_ofPL124 0560  
                          __end_ofPL116 0E67                            __end_ofPL108 1774  
                          __end_ofPL150 0F07                            __end_ofPL142 0E7B  
                          __end_ofPL134 0580                            __end_ofPL126 0568  
                          __end_ofPL118 0550                            __end_ofPL160 178D  
                          __end_ofPL152 0E86                            __end_ofPL144 0E80  
                          __end_ofPL136 177C                            __end_ofPL128 0570  
                          __end_ofPL170 0E90                            __end_ofPL162 1792  
                          __end_ofPL154 1788                            __end_ofPL146 058E  
                          __end_ofPL138 0588                            __end_ofPL172 1797  
                          __end_ofPL164 0E8B                            __end_ofPL156 07A8  
                          __end_ofPL148 1782                            __end_ofPL166 1800  
                          __end_ofPL158 07AD                            __end_ofPL168 07B2  
              __end_of_Led_UpdateBright 0CBC                   ?_IR_KeyAtionIfPressed 0070  
                          __end_of_GAIN 1805                 __size_of_Audio_GetValue 0051  
                   Led_DynamicWave@duty 0020                         Led_TurnOnRamp@i 0031  
                   i1Util_IncValue@pSrc 0070                        __end_of_Led_Ramp 009F  
                       __initialization 082D                    __end_of_Led_RunMusic 00E8  
                      IR_Decode@codeVal 0047                            __end_of_main 08CA  
                  ??_PWM4_LoadDutyValue 002F                 __end_of_Led_TurnOffRamp 0EDF  
                       i1_Util_DecValue 0468                  IR_ScanLongPress@i_1441 0029  
                        ??_EUSART_Write 002D                 __end_of_PWM4_Initialize 0E9B  
                    Led_SetCustom@value 0020                      Led_StartNotice@cnt 002E  
                  ??_DATAEE_WriteBuffer 0036                    Led_DynamicCloud@duty 0020  
             __end_of_Led_TurnOffDirect 07E2                _TMR2_SetInterruptHandler 0F07  
                                ??_main 0045                          IR_GetIndex@idx 002E  
                 ?i1_PWM5_LoadDutyValue 0070                     Led_DynamicStorm@val 002A  
                       ??_RTC_HourReady 002D                    DATAEE_ReadBuffer@buf 0031  
                   Led_DynamicStorm@ptp 0076                    DATAEE_ReadBuffer@len 0033  
                ??_Interrupt_Initialize 002F                         i1_Util_IncValue 048E  
                           _Led_AutoRun 0C39                 __end_of_TMR0_StartTimer 0DBA  
                                _ADCON0 009D                                  _ADCON1 009E  
                     Led_FirstPowerUp@i 0033                                  _ADRESH 009C  
             __size_of_Audio_Initialize 004C                                  _ADRESL 009B  
                 ??_Led_CheckAutoStatus 0033                                  _ANSELA 018C  
                                _ANSELB 018D                                  _ANSELC 018E  
                    __CFG_RSTOSC$HFINT1 0000           __size_of_TMR2_EnableInterrupt 0003  
                                _T0CON0 0017                                  _T0CON1 0018  
                                _T1GCON 001C                        ?_RTC_MinuteReady 0070  
                                _RC1STA 019D                                  i1l1018 072C  
                                i1l1130 02BB                                  i1l1123 0297  
                                i1l1109 0645                                  i1l1118 037C  
                      ?_PWM1_Initialize 0070                                  i1l1135 02CB  
                          ?_IR_GetIndex 0070                                  _ODCONA 028C  
                                _ODCONB 028D                                  _ODCONC 028E  
                                i1l4231 041C                                  i1l4071 0119  
                                i1l4401 0381                                  i1l4057 010C  
                                i1l4403 0386                 __end_of_PWM5_Initialize 0EA1  
                                i1l5301 0631                                  i1l4093 0455  
                                i1l4421 0392                                  i1l4405 0388  
                                i1l5207 10FF                                  i1l4239 044D  
                                i1l4415 038C                                  i1l4407 038A  
                                i1l5209 1100                                  i1l5233 05BC  
                                i1l5217 0597                                  i1l5313 064A  
                                i1l4097 045B                                  i1l4417 038E  
                                i1l4601 0297                                  i1l5153 07D5  
                                i1l5243 05DA                                  i1l5235 05BE  
                                i1l4419 0390                                  i1l4443 0397  
                                i1l5309 0647                                  i1l5245 05DC  
                                i1l5229 05AE                                  i1l4445 0408  
                                i1l5149 07D1                                  i1l5255 05F2  
                                i1l4439 0394                                  i1l4631 02DE  
                                i1l4617 02CB                                  i1l4609 02BB  
                                i1l4713 0341                                  i1l6401 014A  
                                i1l5283 061B                                  i1l5275 0615  
                                i1l4643 02EB                                  i1l6411 015C  
                                i1l4821 0681                                  i1l6421 0222  
                                i1l5287 0623                                  i1l5295 062B  
                                i1l4655 02F8                                  i1l6415 0168  
                                i1l6407 014D                                  i1l4825 0687  
                                i1l4809 066C                                  i1l5297 062D  
                                i1l6441 026F                                  i1l6433 025E  
                      ?_RTC_SecondReady 0070                                  i1l4843 06AD  
                                i1l4819 067F                                  i1l4691 0320  
                                i1l6259 04B5                                  i1l6451 027F  
                                i1l6435 0260                                  i1l6363 016F  
                                i1l4837 06A4                                  i1l4677 0316  
                                i1l4669 0302                                  i1l6541 0069  
                                i1l6461 01C1                                  i1l6373 019E  
                                i1l4871 075F                                  i1l4847 06B5  
                                i1l3991 1130                                  i1l3983 10C2  
                                i1l6551 0079                                  i1l6455 028B  
                                i1l6447 0270                                  i1l6471 01F0  
                                i1l6383 01AE                                  i1l4881 076D  
                                i1l4865 072D                                  i1l4849 06B7  
                                i1l4857 06C0                                  i1l3985 10D4  
                                i1l6393 011D                                  i1l4883 078D  
                                i1l4859 0723                                  i1l4699 0334  
                                i1l3987 10E6                                  i1l6555 0086  
                                i1l6547 006A                                  i1l6491 021B  
                                i1l6483 0200                                  i1l6387 01BA  
                                i1l6379 019F                                  i1l6571 00B9  
                                i1l6731 0042                                  i1l4869 0730  
                                i1l3989 07FA                                  i1l6557 008F  
                                i1l6477 01FF                                  i1l6469 01EE  
                                i1l6725 0038                                  i1l6487 020F  
                                i1l6591 00CF                                  i1l6593 00D5  
                                i1l6569 009F                                  i1l6745 0066  
                                i1l6729 0041                                  i1l6595 00DB  
                                i1l6579 00B2                                  i1l6597 00E1  
                                u403_24 05D3                                  u403_25 05D1  
                                u318_25 04A2                                  u319_25 047C  
                                u263_25 1135                                  u408_20 0603  
                                u409_20 0604                                  _SP1BRG 019B  
                                u550_20 0139                                  u551_25 0143  
                                u545_20 018B                         ??_Util_DecValue 0033  
                                u562_20 01DD                                  u555_20 023E  
                                u563_25 01E7                                  _OSCFRQ 091F  
                                u557_25 0257                                  _PWM5DC 0617  
                                _TX1STA 019E                   __end_of_IR_GetKeyType 078F  
               __size_of_IR_IsValidTime 004E                               ??_Led_Run 007D  
             ??_TMR0_Initialize_Default 002D                                  _VOLUME 1805  
                       _TMR4_StartTimer 1672                 __size_of_Led_Initialize 00EA  
                     __end_of_IR_Decode 065A                   __end_of_TMR1_GATE_ISR 1086  
      __size_of_TMR2_Initialize_Default 000A                         ??_Util_IncValue 0033  
                                ___bmul 17E5                     __size_of_IR_ExitSet 0009  
                ??i1_PWM1_LoadDutyValue 0072             __size_of_PWM3_LoadDutyValue 000C  
               __end_of_TMR1_StartTimer 0A7B                                  ___wmul 1560  
                        __CFG_STVREN$ON 0000                    Led_DynamicMoon@F8363 00AA  
                   Audio_GetValue@value 0037                     _EUSART_Transmit_ISR 1102  
                      ?_PWM2_Initialize 0070                                  _txHead 0057  
                                _txTail 0058                 __end_of_DATAEE_ReadByte 0D5F  
                      ?_Led_StartNotice 0070                             ?_Led_Notice 0070  
                      IR_IsValidTime@tm 0034                    Led_DynamicWave@F8353 00B4  
               __end_of_TMR2_StartTimer 0DBC                   __end_of_Led_SetCustom 0453  
              ??_IR_ResetIfTMR1Overflow 002D                ?_TMR1_Initialize_Default 0070  
              ?_TMR4_Initialize_Default 0070                    ?_EUSART_Transmit_ISR 0070  
                    Util_DecValue@delta 0031                      i1Util_DecValue@min 0072  
                      ?_PWM3_Initialize 0070                       _SYSTEM_Initialize 0B11  
                          ?_RTC_GetTime 0070                 __end_of__initialization 0875  
                ??_IR_KeyAtionIfPressed 0045                      ?_SYSTEM_Initialize 0070  
                   i1Led_UpdateBright@i 0074          __size_of_Led_SaveParaIfChanged 0010  
            __end_of_PWM2_LoadDutyValue 10D4           __end_of_Led_SaveParaIfChanged 0B03  
                      Led_TurnOffRamp@i 002D                 __end_ofi1_Util_DecValue 048E  
               __size_of_IR_ExitTimeout 0008             PWM1_LoadDutyValue@dutyValue 002D  
                  i1Util_IncValue@delta 0074                     ___bmul@multiplicand 002D  
             __size_of_Led_FirstPowerUp 005C                        Led_DynamicMoon@i 002C  
                      Led_DynamicWave@i 002C         TMR4_SetInterruptHandler@handler 002D  
                        __pcstackCOMMON 0070                       IR_GetIndex@keynum 002D  
                          __pidataBANK1 0805                            __pidataBANK2 1064  
                   ??_SYSTEM_Initialize 002E                               ?_TMR0_ISR 0070  
        __size_of_TMR2_DisableInterrupt 0003                               ?_TMR2_ISR 0070  
                 Led_DynamicCloud@F8373 00A0                               ?_TMR4_ISR 0070  
               ?_ADC_Initialize_Default 0070           __end_of_TMR2_DisableInterrupt 1672  
                      _DATAEE_WriteByte 0FC3                        ?_Led_TurnOffRamp 0070  
               __end_ofi1_Util_IncValue 04B4                              _adc_result 00C8  
                    _PWM1_LoadDutyValue 10B6                        ?_PWM4_Initialize 0070  
                            __end_ofPL2 0DCF                              __end_ofPL4 168A  
                            __end_ofPL6 0DE0                              __end_ofPL8 1694  
      __size_ofi1_TMR2_DisableInterrupt 0003                __end_of_Led_TurnOnDirect 07EB  
                  i1_PWM2_LoadDutyValue 10D4                     Led_SetCustom@pValue 0076  
            __size_of_Led_TurnOffDirect 0009             PWM4_LoadDutyValue@dutyValue 002D  
                ??i1_PWM5_LoadDutyValue 0072                               ?i1___wmul 0070  
                    DATAEE_ReadBuffer@i 0035                          _PIN_Initialize 0D5F  
                 __size_of_Led_InitPara 00F6                     ?_PWM1_LoadDutyValue 002D  
                      Led_Initialize@ct 0038                               ?_Led_Ramp 0070  
                      ?_TMR0_StartTimer 0070                 __end_of_TMR4_StartTimer 1675  
             __end_of_SYSTEM_Initialize 0B2A                   ??_EUSART_Transmit_ISR 0070  
                            __pbssBANK0 0045                              __pbssBANK1 00C8  
                            __pbssBANK2 0120                __size_of_Audio_SetVolume 0017  
                  __end_of_EUSART_Write 1659                        ?_PWM5_Initialize 0070  
               __size_of_Led_TurnOnRamp 001B            _PWM2_LoadDutyValue$intlevel0 10CB  
                 DATAEE_ReadBuffer@addr 002F                    Led_DynamicStorm@duty 0020  
                 __size_of_Led_RunMusic 0049                     IR_GetKeyType@keynum 0072  
               __size_of_ADC_Conversion 0021                     IR_GetKeyType@result 0071  
                        _Audio_GetValue 08CA                    ??_PWM1_LoadDutyValue 002F  
                   __size_of_Led_Notice 0027                              __pmaintext 0878  
         i1PWM3_LoadDutyValue@dutyValue 0070          __end_of_ADC_Initialize_Default 0FEB  
                               ?___bmul 002D        __end_of_TMR0_SetInterruptHandler 0AEB  
              ??i1_TMR2_EnableInterrupt 0070                                 ?___wmul 002D  
                      ?_TMR1_StartTimer 0070                              ??_TMR0_ISR 0070  
                       __CFG_PPS1WAY$ON 0000                              ??_TMR2_ISR 007E  
                            ??_TMR4_ISR 0071         TMR2_SetInterruptHandler@handler 002D  
          _PWM5_LoadDutyValue$intlevel0 111E                              __pintentry 0004  
                          _Led_InitPara 0B43                                 _CCP1CON 0293  
                               _CCP2CON 0297                                 _CCP3CON 0313  
                               _CCP4CON 0317                   ?i1_PWM2_LoadDutyValue 0070  
              __size_of_Audio_StopSound 0012               __size_of_Led_DynamicCloud 0070  
                __end_of_PIN_Initialize 0DAC                  __size_ofi1_IR_GetIndex 008D  
                            ??i1___wmul 0074                 __size_of_TMR1_StopTimer 0002  
             __size_of_Led_DynamicStorm 0061                        ?_DATAEE_ReadByte 002D  
         __size_ofi1_PWM4_LoadDutyValue 0006         __end_of_TMR1_Initialize_Default 0EBB  
       __end_of_TMR4_Initialize_Default 0ED0                       ?_IR_ScanLongPress 0070  
                    _PWM5_LoadDutyValue 111B                            ??_IR_ExitSet 003B  
                               _OSCCON1 0919                                 _OSCCON3 091B  
                               _NVMADRH 0892                                 _NVMADRL 0891  
                               _OSCTUNE 091E                                 _NVMDATL 0893  
                               _NVMCON2 0896                                 _PWM5CON 0619  
                          _Led_RunMusic 009F                                 _PPSLOCK 0E0F  
                    ??_IR_ScanLongPress 0024                              ??_Led_Ramp 0074  
                      _Audio_Initialize 093C                        ?_TMR2_StartTimer 0070  
                         ?_IR_KeyAction 0070         __size_of_IR_ResetIfTMR1Overflow 003F  
                   ?_PWM5_LoadDutyValue 002D             __size_of_IR_UpdateSetStatus 000C  
              __size_of_Led_DynamicMoon 0052                __size_of_Led_DynamicWave 0052  
       ??_TMR1_Gate_SetInterruptHandler 002F            __end_ofi1_PWM3_LoadDutyValue 10EC  
                      Util_IncValue@max 002F                          _IR_IsValidTime 1797  
                        Led_SetCustom@i 0023                  __end_of_Audio_GetValue 091B  
                  DATAEE_WriteByte@addr 002D                                 _Led_Run 0030  
                  DATAEE_WriteByte@byte 002F                    __size_of_IR_GetIndex 008D  
                        _Led_Initialize 0988                        ?i1_Util_DecValue 0070  
                     ?_Led_UpdateBright 0070                 _TMR2_Initialize_Default 0EBB  
            ??_TMR2_SetInterruptHandler 002F                      ??_Led_UpdateBright 0031  
               __size_of_TMR4_StopTimer 0003                         __size_of___bmul 000C  
                    __end_of_IR_ExitSet 166F                         __size_of___wmul 0015  
                  ??_PWM5_LoadDutyValue 002F                       _DATAEE_ReadBuffer 0D36  
                      ?i1_Util_IncValue 0070         TMR0_SetInterruptHandler@handler 002D  
                               __ptext1 0DBA                                 __ptext2 0DB7  
                               __ptext3 0B11                                 __ptext4 0EC5  
                               __ptext5 0EBB                                 __ptext6 0EAC  
                               __ptext7 0EA1                                 __ptext8 0E9B  
                               __ptext9 0E90                         ?_PIN_Initialize 0070  
                    ?_DATAEE_ReadBuffer 002F                            __size_of_ISR 002A  
                             _T1CONbits 001B                   _OSCILLATOR_Initialize 0B2A  
                             _T2CONbits 001F                 __size_ofi1_EUSART_Write 0012  
                             _T4CONbits 0417       __size_of_TMR4_SetInterruptHandler 0008  
             ?_TMR4_SetInterruptHandler 002D                   _tmr1_gate_isr_handler 00E8  
                   ??_DATAEE_ReadBuffer 0034                            ?_Led_AutoRun 0070  
                        ??_IR_KeyAction 003B              __size_of_SYSTEM_Initialize 0019  
                               clrloop0 109F                        ?_TMR4_StartTimer 0070  
                __end_of_IR_IsValidTime 17E5                    end_of_initialization 0875  
                           _gLedRunPara 00CA                  __end_of_Led_Initialize 0A72  
                         i1_IR_GetIndex 037D                                 init_ram 10AA  
               Audio_SetVolume@checksum 002F                         ?_Audio_GetValue 0070  
                               initloop 10AB                        i1IR_GetIndex@idx 0071  
                     IR_IsValidTime@len 0030                       IR_IsValidTime@min 0031  
               Audio_StopSound@checksum 002E             __size_ofi1_Led_UpdateBright 0011  
                        _IR_ExitTimeout 113F                    __size_of_RTC_GetTime 0001  
             Audio_SetPlayMode@checksum 002F                        _Led_FirstPowerUp 0F17  
                     ??_Audio_SetVolume 002E               __end_of_DATAEE_ReadBuffer 0D51  
          __end_of_TMR2_EnableInterrupt 1678                  _IR_ResetIfTMR1Overflow 0A7B  
                ??i1_PWM2_LoadDutyValue 0072         __size_ofi1_TMR2_EnableInterrupt 0003  
           __size_of_PWM4_LoadDutyValue 000C                            __pstringtext 1800  
               i1_TMR2_DisableInterrupt 0792                               _IR_Decode 058E  
                 i1___wmul@multiplicand 0072                               Led_Ramp@i 007A  
           __size_of_DATAEE_WriteBuffer 0019                _TMR0_SetInterruptHandler 0AE3  
                   i1Util_DecValue@pSrc 0070                            ??_Led_Notice 0070  
                DATAEE_WriteBuffer@addr 0031                              _rtc_status 0054  
           __end_of_Led_CheckAutoStatus 0D36                       ??_Audio_StopSound 002E  
                 __size_of_EUSART_Write 0017                   __end_of_RTC_HourReady 0B08  
         __size_of_Interrupt_Initialize 001B                        __CFG_FEXTOSC$OFF 0000  
                       ?_IR_IsValidTime 0030                __end_of_DATAEE_WriteByte 0FE4  
                         ?_RTC_OnSecond 0070                          _Led_TurnOnRamp 0EE6  
                        ?i1_IR_GetIndex 0070                           IR_Decode@nBit 0052  
                         IR_Decode@hVal 007A                  __end_of_IR_ExitTimeout 1147  
                       ?_Led_Initialize 0070                       Led_DynamicCloud@i 002C  
                        _ADC_Conversion 091B                           IR_Decode@type 0078  
             ??_TMR2_Initialize_Default 002D                   __end_of_Util_DecValue 153A  
                        __end_of_VOLUME 180A              __end_of_PWM3_LoadDutyValue 10E6  
                    Util_IncValue@delta 0031                      __end_of_Led_Notice 07D9  
              __size_of_RTC_MinuteReady 0004                       ??_Led_DynamicMoon 0078  
                     ??_Led_DynamicWave 0078                __size_of_PWM1_Initialize 0006  
              __size_of_RTC_SecondReady 0005                        Led_SetCustom@idx 0022  
      __size_of_TMR1_Initialize_Default 000F        __size_of_TMR4_Initialize_Default 000B  
                     Led_DynamicStorm@i 002C                              ?_IR_Decode 0070  
                        __end_of___bmul 17F1                   __end_of_Util_IncValue 1560  
         __size_ofi1_PWM1_LoadDutyValue 0006                          __end_of___wmul 1575  
                      _Led_DynamicCloud 0222                            _EUSART_Write 1642  
                     __size_of_TMR0_ISR 000C                       __size_of_TMR2_ISR 000C  
                    _PWM2_LoadDutyValue 10C8                       __size_of_TMR4_ISR 000C  
                     Audio_GetValue@cnt 0049                       ?_Led_TurnOnDirect 0070  
                     Audio_GetValue@max 004D                       Audio_GetValue@min 004B  
                        _TMR1_StopTimer 0ABA                  ?_OSCILLATOR_Initialize 0070  
                  i1_PWM3_LoadDutyValue 10E6                        _Led_DynamicStorm 01C1  
                __size_of_IR_GetKeyType 0135                      ??_Led_TurnOnDirect 0070  
                     i1_Led_StartNotice 040A                             __end_ofPL10 0F84  
                           __end_ofPL20 0DF6                             __end_ofPL12 079E  
                           __end_ofPL30 16B9                             __end_ofPL22 04D2  
                           __end_ofPL14 169D                             __end_ofPL40 16F9  
                           __end_ofPL32 16C1                             __end_ofPL24 0E03  
                           __end_ofPL16 16AB                             __end_ofPL50 0E13  
                           __end_ofPL42 0E0A                             __end_ofPL34 16DD  
                           __end_ofPL26 04E0                             __end_ofPL18 0DEE  
                           __end_ofPL60 0E18                             __end_ofPL52 04F2  
                           __end_ofPL44 1703                             __end_ofPL36 0F9A  
                           __end_ofPL28 16B2                             __end_ofPL70 173F  
                           __end_ofPL62 17FB                             __end_ofPL54 1724  
                           __end_ofPL46 1709                             __end_ofPL38 16F3  
                           __end_ofPL80 174C                             __end_ofPL72 0E1E  
                           __end_ofPL64 1732                             __end_ofPL56 04F9  
                           __end_ofPL48 1712                             __end_ofPL90 0E36  
                           __end_ofPL82 0FAA                             __end_ofPL74 0515  
                           __end_ofPL66 0FA3                             __end_ofPL58 0500  
                           __end_ofPL92 0E3D                             __end_ofPL84 052D  
                           __end_ofPL76 0521                             __end_ofPL68 0509  
                           __end_ofPL94 1754                             __end_ofPL86 0E2A  
                           __end_ofPL78 1745                             __end_ofPL96 0541  
                           __end_ofPL88 0539                             __end_ofPL98 07A3  
                   start_initialization 082D                       __size_ofi1___wmul 0015  
                           __end_of_ISR 002E                      i1Util_IncValue@max 0072  
              __size_of_PWM2_Initialize 0009                     ?_PWM2_LoadDutyValue 002D  
                    ?i1_Led_StartNotice 0070                  __size_of_TMR1_GATE_ISR 000C  
                __end_of_Led_TurnOnRamp 0F01                  i1_TMR2_EnableInterrupt 078F  
              __size_of_Led_StartNotice 000D                ?_TMR0_Initialize_Default 0070  
                        ??_RTC_OnSecond 0070                  __end_of_ADC_Conversion 093C  
                     __size_of_Led_Ramp 0036                     ??i1_Led_StartNotice 0070  
                       ?_IR_ExitTimeout 0070                     DATAEE_ReadByte@addr 002D  
         __size_of_IR_KeyAtionIfPressed 0005                        __CFG_LPBOREN$OFF 0000  
                       IR_KeyAction@idx 014C                    ??_PWM2_LoadDutyValue 002F  
                    IR_Decode@revKeyNum 0077               ??i1_TMR2_DisableInterrupt 0070  
              __size_of_PWM3_Initialize 000B                   _Led_SaveParaIfChanged 0AF3  
                        _TMR4_StopTimer 07EB                                ??___bmul 002E  
           PWM2_LoadDutyValue@dutyValue 002D              __size_of_DATAEE_ReadBuffer 001B  
                              ??___wmul 0031                __end_of_Audio_Initialize 0988  
                           _CCPTMRSbits 029F                    __end_of_IR_KeyAction 1514  
                __end_of_TMR1_StopTimer 0ABC                             __pdataBANK1 00A0  
                           __pdataBANK2 014D                  __size_of_Led_SetCustom 003D  
                 Led_DynamicStorm@F8383 014D                   ?i1_PWM3_LoadDutyValue 0070  
                 _TMR2_DisableInterrupt 166F               __end_ofi1_Led_StartNotice 0416  
                        i1_EUSART_Write 010B                             __pbssBIGRAM 237B  
           __end_of_EUSART_Transmit_ISR 111B             PWM5_LoadDutyValue@dutyValue 002D  
         __size_ofi1_PWM5_LoadDutyValue 000F                __size_of_Led_TurnOffRamp 000F  
                             ___latbits 0002                           __pcstackBANK0 0020  
                         __pcstackBANK2 0140                __size_of_PWM4_Initialize 000B  
                Audio_SelectSound@index 0071                     i1IR_GetIndex@keynum 0070  
                       ?_Led_TurnOnRamp 0070                         ??i1_IR_GetIndex 0070  
                     ADC_Conversion@chn 0030                    IR_IsValidTime@result 0032  
                  _TMR2_EnableInterrupt 1675                    __size_of_Led_AutoRun 006A  
                       ?_ADC_Conversion 002D                           Led_InitPara@i 003F  
                         Led_InitPara@j 003E                         Led_Initialize@i 003A  
                         IR_KeyAction@i 0142           i1PWM1_LoadDutyValue@dutyValue 0070  
                              ?_Led_Run 0070            __end_ofi1_PWM4_LoadDutyValue 0800  
                         _IR_GetKeyType 065A                               __pnvBANK1 00E4  
          _PWM3_LoadDutyValue$intlevel0 10DD                __size_of_TMR0_StartTimer 0003  
             __size_of_IR_ScanLongPress 00EB                  __end_of_TMR4_StopTimer 07EE  
           __size_of_PWM1_LoadDutyValue 000C                __size_of_PWM5_Initialize 0006  
             Audio_SelectSound@checksum 0072                           _TMR1_GATE_ISR 107A  
                      ??_PIN_Initialize 002D        __end_of_TMR4_SetInterruptHandler 0F17  
    __size_of_EUSART_Initialize_Default 0015                               __ptext100 058E  
                             __ptext101 078F                               __ptext102 0792  
                             __ptext103 065A                               __ptext104 106E  
                             __ptext105 10EC                               __ptext106 1102  
         i1PWM4_LoadDutyValue@dutyValue 0070                             ??_IR_Decode 0073  
            ?_EUSART_Initialize_Default 0070                         ?_TMR1_StopTimer 0070  
                __end_ofi1_EUSART_Write 011D                       ??_RTC_MinuteReady 002D  
                     ??_PWM1_Initialize 002D                       ??_RTC_SecondReady 002D  
                   DATAEE_WriteBuffer@i 0036                                _BAUD1CON 019F  
              __size_of_TMR1_StartTimer 0003               __size_of_Led_UpdateBright 0019  
       __end_of_TMR0_Initialize_Default 0EAC                __end_of_Led_FirstPowerUp 0F73  
                      ??_Audio_GetValue 0033              __end_of_IR_UpdateSetStatus 0AC8  
                 ?_TMR2_EnableInterrupt 0070                __size_of_DATAEE_ReadByte 000E  
                       _Audio_SetVolume 1614                           ??_IR_GetIndex 002D  
                         _Led_SetCustom 0416                           Led_Notice@cnt 0056  
                     ??_PWM2_Initialize 002D                          ?_IR_GetKeyType 0070  
                           _audio_value 004F                          ___wmul@product 0031  
                             clear_ram0 109E                                _PIE0bits 0090  
                     ??_Led_StartNotice 002D                                _PIE1bits 0091  
                              _PIE2bits 0092                __size_of_TMR2_StartTimer 0002  
                ?_Led_SaveParaIfChanged 0070                         ?_TMR4_StopTimer 0070  
               ?_IR_ResetIfTMR1Overflow 0070                 _TMR1_Initialize_Default 0EAC  
               _TMR4_Initialize_Default 0EC5              ??_TMR0_SetInterruptHandler 002F  
                              _PIR0bits 0010                          ?_TMR1_GATE_ISR 0070  
                              _PIR1bits 0011                                _PIR2bits 0012  
                              _TMR0_ISR 106E                                _TMR2_ISR 1086  
                              _TMR4_ISR 1092                         _Audio_StopSound 1575  
                      EUSART_Write@byte 002D                   DATAEE_WriteBuffer@buf 0033  
                ??i1_PWM3_LoadDutyValue 0072                   DATAEE_WriteBuffer@len 0035  
                ?_TMR2_DisableInterrupt 0070                    __end_of_RTC_OnSecond 1102  
           __size_of_PWM5_LoadDutyValue 0015                __size_ofi1_Util_DecValue 0026  
     __end_of_EUSART_Initialize_Default 1000                         ?i1_EUSART_Write 0070  
                     ??_PWM3_Initialize 002D              __size_ofi1_Led_StartNotice 000C  
                            _ADCON0bits 009D                       ___wmul@multiplier 002D  
                              i1___wmul 0453                       IR_ScanLongPress@i 0028  
                  Led_Initialize@result 0037                        ??_IR_IsValidTime 0031  
     __size_of_TMR2_SetInterruptHandler 0008               ?_TMR2_SetInterruptHandler 002D  
                     Util_IncValue@pSrc 002D                __size_ofi1_Util_IncValue 0026  
                 Led_CheckAutoStatus@ct 003B                        ??_Led_Initialize 0033  
                    IR_KeyAction@i_1450 0144                      IR_KeyAction@i_1451 0147  
                    IR_KeyAction@i_1452 0148                      IR_KeyAction@i_1453 0149  
                    IR_KeyAction@i_1454 014A                      IR_KeyAction@i_1447 014B  
                    IR_KeyAction@i_1457 0145                      IR_KeyAction@i_1449 0143  
                    IR_KeyAction@i_1458 0146                                _Led_Ramp 0069  
                        ?_Led_SetCustom 0076                         _Led_DynamicMoon 011D  
                       _Led_DynamicWave 016F                       ?_DATAEE_WriteByte 002D  
                     ??_Led_TurnOffRamp 002D                       i1_TMR4_StartTimer 04C5  
                         ??_RTC_GetTime 002D              __end_ofi1_Led_UpdateBright 04C5  
              __end_of_Led_DynamicCloud 0292                       ??_PWM4_Initialize 002D  
              ??_ADC_Initialize_Default 002D                      ??_DATAEE_WriteByte 0030  
              __end_of_Led_DynamicStorm 0222                      ?i1_TMR4_StartTimer 0070  
        __end_of_IR_ResetIfTMR1Overflow 0ABA                        __size_of_Led_Run 0039  
              __size_of_TMR4_StartTimer 0003                   __size_of_IR_KeyAction 03CD  
                   __end_of_IR_GetIndex 1614            __end_of_Interrupt_Initialize 0AE3  
            __end_of_PWM4_LoadDutyValue 07FA                                _gLedPara 237B  
                   ??i1_TMR4_StartTimer 0070              __end_of_DATAEE_WriteBuffer 0FC3  
               ??_OSCILLATOR_Initialize 002D                       ??_TMR0_StartTimer 002D  
                     _Audio_SetPlayMode 162B           __size_ofi1_PWM2_LoadDutyValue 0006  
                          Led_AutoRun@i 003B                       _Audio_SelectSound 00E8  
                     ??_PWM5_Initialize 002D                      ?_Audio_SetPlayMode 0070  
              _TMR4_SetInterruptHandler 0F0F                      _PWM3_LoadDutyValue 10DA  
                  i1_PWM4_LoadDutyValue 07FA                 __end_of_Audio_SetVolume 162B  
                    ?_Audio_SelectSound 0070                 ?i1_TMR2_EnableInterrupt 0070  
                            _T0CON0bits 0017              Led_CheckAutoStatus@sunrise 0037  
                      _tmr0_isr_handler 00EA                  ??_TMR2_EnableInterrupt 002D  
                   ??_Audio_SetPlayMode 002E                        ??_IR_ExitTimeout 003B  
                              __ptext10 0DAC                                __ptext11 0B3A  
                              __ptext20 0AF3                                __ptext12 0B34  
                              __ptext21 0FAA                                __ptext13 0D5F  
                              __ptext30 0F0F                                __ptext22 0FC3  
                              __ptext14 0B2A                                __ptext31 0F07  
                              __ptext23 0B43                                __ptext15 0FEB  
                              __ptext40 1147                                __ptext32 0AEB  
                              __ptext24 0F17                                __ptext16 0FE4  
                              __ptext41 153A                                __ptext33 0AE3  
                              __ptext25 0D36                                __ptext17 0B0C  
                              __ptext50 1672                                __ptext42 1514  
                              __ptext34 0ABC                                __ptext26 0D51  
                              __ptext18 0B08                                __ptext51 0988  
                              __ptext43 1675                                __ptext35 113F  
                              __ptext27 0CBC                                __ptext19 0B03  
                              __ptext60 0ED0                                __ptext52 0A72  
                              __ptext44 166F                                __ptext36 0A7B  
                              __ptext28 0C39                                __ptext61 093C  
                              __ptext53 0CA3                                __ptext45 1797  
                              __ptext37 0ABA                                __ptext29 0AC8  
                              __ptext70 1092                                __ptext62 1575  
                              __ptext54 07EE                                __ptext46 17E5  
                              __ptext38 0A78                                __ptext71 07B2  
                              __ptext63 1614                                __ptext55 10DA  
                              __ptext47 1587                                __ptext39 0A73  
                              __ptext80 011D                                __ptext72 07EB  
                              __ptext64 162B                                __ptext56 10C8  
                              __ptext48 1666                                __ptext81 0222  
                              __ptext73 07E2                                __ptext65 1642  
                              __ptext57 10B6                                __ptext49 1659  
                              __ptext90 1130                                __ptext82 04B4  
                              __ptext74 07D9                                __ptext66 08CA  
                              __ptext58 111B                     ?_PWM3_LoadDutyValue 002D  
                              __ptext91 0292                                __ptext83 00E8  
                              __ptext75 1086                                __ptext67 1560  
                              __ptext59 0EE6                                __ptext92 048E  
                              __ptext84 010B                                __ptext76 0030  
                              __ptext68 091B                                __ptext93 0468  
                              __ptext85 0069                                __ptext77 009F  
                              __ptext94 040A                                __ptext86 07FA  
                              __ptext78 016F                                __ptext95 04C5  
                              __ptext87 10E6                                __ptext79 01C1  
                              __ptext96 037D                                __ptext88 10D4  
                              __ptext97 0416                                __ptext89 10C2  
                              __ptext98 0453                                __ptext99 107A  
             __end_ofi1_TMR4_StartTimer 04C8            __end_ofi1_PWM1_LoadDutyValue 10C8  
                   ??_Audio_SelectSound 0071                       ??_TMR1_StartTimer 002D  
                          _IR_KeyAction 1147            __size_of_Led_CheckAutoStatus 007A  
                       ??_IR_GetKeyType 0070             DATAEE_WriteByte@GIEBitValue 0030  
             __size_of_Led_TurnOnDirect 0009                                _keyValue 0053  
                              _loadDuty 00BE                              _T1GPPSbits 0E13  
                         __size_of_main 0052               ??_TMR1_Initialize_Default 002D  
                              _ir_state 0059               ??_TMR4_Initialize_Default 002D  
                       ??_TMR1_GATE_ISR 007C                        _IR_ScanLongPress 0292  
                            _RA2PPSbits 0E92                 __end_of_Audio_StopSound 1587  
                     ??_DATAEE_ReadByte 002F                              _RC1PPSbits 0EA1  
                   __end_of_RTC_GetTime 0A73        __size_of_TMR0_Initialize_Default 000B  
                  ??_PWM3_LoadDutyValue 002F                              _RC3PPSbits 0EA3  
             __end_of_Audio_SetPlayMode 1642                                _txRemain 00EC  
                __size_of_RTC_HourReady 0005                                _rtc_time 0060  
                              int$flags 007E                              _RC5PPSbits 0EA5  
                            _RB7PPSbits 0E9F                           ?_Led_InitPara 0070  
             __end_of_Audio_SelectSound 010B                       ?_Audio_Initialize 0070  
                     ??_TMR2_StartTimer 002D                              _RC7PPSbits 0EA7  
  TMR1_Gate_SetInterruptHandler@handler 002D                    i1Led_StartNotice@cnt 0071  
                  Led_CheckAutoStatus@i 003F                      ??_Audio_Initialize 0030  
        __end_ofi1_TMR2_EnableInterrupt 0792                   ?i1_PWM4_LoadDutyValue 0070  
             Led_CheckAutoStatus@i_1252 003D               Led_CheckAutoStatus@i_1253 003E  
                     Led_UpdateBright@i 0031                        ??_Led_TurnOnRamp 002D  
                      _Led_UpdateBright 0CA3                 __end_of_Led_DynamicMoon 016F  
          __end_of_IR_KeyAtionIfPressed 0A78                 __end_of_Led_DynamicWave 01C1  
                            _INTCONbits 000B                  __size_of_Util_DecValue 0026  
                           _NVMCON1bits 0895                       ??i1_Util_DecValue 0076  
                      ??_ADC_Conversion 002F                         ??_Led_SetCustom 0077  
                         ?_Led_RunMusic 0070                ?_TMR2_Initialize_Default 0070  
                    IR_IsValidTime@hour 0033                                intlevel1 0000  
                 _Audio_Initialize$1221 0032                             _IR_GetIndex 1587  
                __size_of_Util_IncValue 0026               Led_CheckAutoStatus@sunset 0039  
                     ??i1_Util_IncValue 0076         __size_of_ADC_Initialize_Default 0007  
                     __CFG_CLKOUTEN$OFF 0000            __end_ofi1_PWM5_LoadDutyValue 113F  
                           _PPSLOCKbits 0E0F                         _RTC_MinuteReady 0B08  
                    i1EUSART_Write@byte 0070                         _PWM1_Initialize 0B34  
                       _RTC_SecondReady 0B0C                        ??_TMR1_StopTimer 002D  
                 __size_of_RTC_OnSecond 0016             __size_of_PWM2_LoadDutyValue 000C  
                        ??_Led_InitPara 0036   __end_of_TMR1_Gate_SetInterruptHandler 0AF3  
__size_of_TMR1_Gate_SetInterruptHandler 0008           _TMR1_Gate_SetInterruptHandler 0AEB  
           PWM3_LoadDutyValue@dutyValue 002D             ??_EUSART_Initialize_Default 002D  
                     ??_TMR4_StartTimer 002D                        ?_Audio_SetVolume 0070  
                       _PWM2_Initialize 0B3A                          ??_Led_RunMusic 007C  
                            Led_Run@cnt 0055                              _IR_ExitSet 1666  
                     ?_Led_FirstPowerUp 0070                           ??_Led_AutoRun 0037  
                      _tmr2_isr_handler 00E6                         _Led_StartNotice 1659  
                  _Interrupt_Initialize 0AC8                           _RTC_HourReady 0B03  
            __size_ofi1_TMR4_StartTimer 0003                      ??_Led_FirstPowerUp 002D  
          _PWM1_LoadDutyValue$intlevel0 10B9                    i1Util_DecValue@delta 0074  
          __size_of_EUSART_Transmit_ISR 0019                   __end_ofi1_IR_GetIndex 040A  
                      ??_TMR4_StopTimer 0070                            _RTC_OnSecond 10EC  
                           _RTC_GetTime 0A72                 ??_Led_SaveParaIfChanged 0037  
                    Audio_SetVolume@vol 002E                             _PWMTMRSbits 061F  
            __end_of_PWM1_LoadDutyValue 10C2                ?i1_TMR2_DisableInterrupt 0070  
         i1PWM2_LoadDutyValue@dutyValue 0070                           _Util_DecValue 1514  
                      ?_Audio_StopSound 0070                         _PWM3_Initialize 0DAC  
                    _IR_UpdateSetStatus 0ABC            _PWM4_LoadDutyValue$intlevel0 07F1  
               ??_TMR2_DisableInterrupt 002D  
