

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Fri Dec 01 09:50:14 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text23,local,class=CODE,merge=1,delta=2
    23                           	psect	text54,local,class=CODE,merge=1,delta=2
    24                           	psect	text55,local,class=CODE,merge=1,delta=2
    25                           	psect	text56,local,class=CODE,merge=1,delta=2
    26                           	psect	text57,local,class=CODE,merge=1,delta=2
    27                           	psect	text58,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	text69,local,class=CODE,merge=1,delta=2
    30                           	psect	text70,local,class=CODE,merge=1,delta=2
    31                           	psect	text74,local,class=CODE,merge=1,delta=2
    32                           	psect	text75,local,class=CODE,merge=1,delta=2
    33                           	psect	text100,local,class=CODE,merge=1,delta=2
    34                           	psect	text101,local,class=CODE,merge=1,delta=2
    35                           	psect	text105,local,class=CODE,merge=1,delta=2
    36                           	psect	text106,local,class=CODE,merge=1,delta=2
    37                           	psect	text107,local,class=CODE,merge=1,delta=2
    38                           	psect	pa_nodes0,global,class=CODE,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 1.41
    42                           ; Generated 25/01/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F18345 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  0090                     	;# 
   113  0091                     	;# 
   114  0092                     	;# 
   115  0093                     	;# 
   116  0094                     	;# 
   117  0097                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  018C                     	;# 
   137  018D                     	;# 
   138  018E                     	;# 
   139  0197                     	;# 
   140  0199                     	;# 
   141  0199                     	;# 
   142  0199                     	;# 
   143  019A                     	;# 
   144  019A                     	;# 
   145  019A                     	;# 
   146  019B                     	;# 
   147  019B                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019C                     	;# 
   152  019C                     	;# 
   153  019C                     	;# 
   154  019D                     	;# 
   155  019D                     	;# 
   156  019D                     	;# 
   157  019E                     	;# 
   158  019E                     	;# 
   159  019E                     	;# 
   160  019F                     	;# 
   161  019F                     	;# 
   162  019F                     	;# 
   163  019F                     	;# 
   164  019F                     	;# 
   165  020C                     	;# 
   166  020D                     	;# 
   167  020E                     	;# 
   168  0211                     	;# 
   169  0211                     	;# 
   170  0212                     	;# 
   171  0212                     	;# 
   172  0213                     	;# 
   173  0213                     	;# 
   174  0214                     	;# 
   175  0214                     	;# 
   176  0215                     	;# 
   177  0215                     	;# 
   178  0215                     	;# 
   179  0215                     	;# 
   180  0216                     	;# 
   181  0216                     	;# 
   182  0217                     	;# 
   183  0217                     	;# 
   184  0219                     	;# 
   185  021A                     	;# 
   186  021B                     	;# 
   187  021C                     	;# 
   188  021D                     	;# 
   189  021D                     	;# 
   190  021E                     	;# 
   191  021F                     	;# 
   192  028C                     	;# 
   193  028D                     	;# 
   194  028E                     	;# 
   195  0291                     	;# 
   196  0291                     	;# 
   197  0292                     	;# 
   198  0293                     	;# 
   199  0294                     	;# 
   200  0295                     	;# 
   201  0295                     	;# 
   202  0296                     	;# 
   203  0297                     	;# 
   204  0298                     	;# 
   205  029F                     	;# 
   206  030C                     	;# 
   207  030D                     	;# 
   208  030E                     	;# 
   209  0311                     	;# 
   210  0311                     	;# 
   211  0312                     	;# 
   212  0313                     	;# 
   213  0314                     	;# 
   214  0315                     	;# 
   215  0315                     	;# 
   216  0316                     	;# 
   217  0317                     	;# 
   218  0318                     	;# 
   219  038C                     	;# 
   220  038D                     	;# 
   221  038E                     	;# 
   222  0391                     	;# 
   223  0392                     	;# 
   224  0393                     	;# 
   225  0394                     	;# 
   226  0395                     	;# 
   227  0396                     	;# 
   228  0397                     	;# 
   229  0398                     	;# 
   230  0399                     	;# 
   231  039A                     	;# 
   232  039C                     	;# 
   233  039D                     	;# 
   234  039E                     	;# 
   235  039F                     	;# 
   236  0411                     	;# 
   237  0411                     	;# 
   238  0412                     	;# 
   239  0413                     	;# 
   240  0414                     	;# 
   241  0415                     	;# 
   242  0416                     	;# 
   243  0417                     	;# 
   244  0418                     	;# 
   245  0418                     	;# 
   246  0419                     	;# 
   247  041A                     	;# 
   248  041B                     	;# 
   249  041C                     	;# 
   250  041D                     	;# 
   251  041E                     	;# 
   252  041F                     	;# 
   253  0498                     	;# 
   254  0498                     	;# 
   255  0499                     	;# 
   256  049A                     	;# 
   257  049B                     	;# 
   258  049B                     	;# 
   259  049C                     	;# 
   260  049D                     	;# 
   261  049E                     	;# 
   262  049F                     	;# 
   263  0617                     	;# 
   264  0618                     	;# 
   265  0619                     	;# 
   266  0619                     	;# 
   267  061A                     	;# 
   268  061B                     	;# 
   269  061C                     	;# 
   270  061C                     	;# 
   271  061F                     	;# 
   272  0691                     	;# 
   273  0692                     	;# 
   274  0693                     	;# 
   275  0694                     	;# 
   276  0695                     	;# 
   277  0696                     	;# 
   278  0697                     	;# 
   279  0698                     	;# 
   280  0699                     	;# 
   281  0711                     	;# 
   282  0712                     	;# 
   283  0713                     	;# 
   284  0714                     	;# 
   285  0715                     	;# 
   286  0716                     	;# 
   287  0717                     	;# 
   288  0718                     	;# 
   289  0719                     	;# 
   290  0891                     	;# 
   291  0891                     	;# 
   292  0891                     	;# 
   293  0891                     	;# 
   294  0891                     	;# 
   295  0891                     	;# 
   296  0892                     	;# 
   297  0892                     	;# 
   298  0892                     	;# 
   299  0893                     	;# 
   300  0893                     	;# 
   301  0893                     	;# 
   302  0893                     	;# 
   303  0893                     	;# 
   304  0893                     	;# 
   305  0894                     	;# 
   306  0894                     	;# 
   307  0894                     	;# 
   308  0895                     	;# 
   309  0895                     	;# 
   310  0895                     	;# 
   311  0896                     	;# 
   312  0896                     	;# 
   313  0896                     	;# 
   314  089B                     	;# 
   315  0911                     	;# 
   316  0912                     	;# 
   317  0913                     	;# 
   318  0914                     	;# 
   319  0915                     	;# 
   320  0916                     	;# 
   321  0918                     	;# 
   322  0919                     	;# 
   323  091A                     	;# 
   324  091B                     	;# 
   325  091C                     	;# 
   326  091D                     	;# 
   327  091E                     	;# 
   328  091F                     	;# 
   329  0E0F                     	;# 
   330  0E10                     	;# 
   331  0E11                     	;# 
   332  0E12                     	;# 
   333  0E13                     	;# 
   334  0E14                     	;# 
   335  0E15                     	;# 
   336  0E16                     	;# 
   337  0E17                     	;# 
   338  0E18                     	;# 
   339  0E19                     	;# 
   340  0E1A                     	;# 
   341  0E1B                     	;# 
   342  0E1C                     	;# 
   343  0E1D                     	;# 
   344  0E1E                     	;# 
   345  0E1F                     	;# 
   346  0E20                     	;# 
   347  0E21                     	;# 
   348  0E22                     	;# 
   349  0E24                     	;# 
   350  0E25                     	;# 
   351  0E28                     	;# 
   352  0E29                     	;# 
   353  0E2A                     	;# 
   354  0E2B                     	;# 
   355  0E2C                     	;# 
   356  0E2D                     	;# 
   357  0E2E                     	;# 
   358  0E2F                     	;# 
   359  0E90                     	;# 
   360  0E91                     	;# 
   361  0E92                     	;# 
   362  0E94                     	;# 
   363  0E95                     	;# 
   364  0E9C                     	;# 
   365  0E9D                     	;# 
   366  0E9E                     	;# 
   367  0E9F                     	;# 
   368  0EA0                     	;# 
   369  0EA1                     	;# 
   370  0EA2                     	;# 
   371  0EA3                     	;# 
   372  0EA4                     	;# 
   373  0EA5                     	;# 
   374  0EA6                     	;# 
   375  0EA7                     	;# 
   376  0F0F                     	;# 
   377  0F10                     	;# 
   378  0F11                     	;# 
   379  0F12                     	;# 
   380  0F13                     	;# 
   381  0F14                     	;# 
   382  0F15                     	;# 
   383  0F16                     	;# 
   384  0F17                     	;# 
   385  0F18                     	;# 
   386  0F19                     	;# 
   387  0F1A                     	;# 
   388  0F1B                     	;# 
   389  0F1C                     	;# 
   390  0F1D                     	;# 
   391  0F1E                     	;# 
   392  0F1F                     	;# 
   393  0F20                     	;# 
   394  0F21                     	;# 
   395  0F22                     	;# 
   396  0F23                     	;# 
   397  0F24                     	;# 
   398  0F25                     	;# 
   399  0F26                     	;# 
   400  0F27                     	;# 
   401  0F28                     	;# 
   402  0F29                     	;# 
   403  0F2A                     	;# 
   404  0F2B                     	;# 
   405  0F2C                     	;# 
   406  0F2D                     	;# 
   407  0F2E                     	;# 
   408  0F2F                     	;# 
   409  0F30                     	;# 
   410  0F31                     	;# 
   411  0F32                     	;# 
   412  0F33                     	;# 
   413  0F34                     	;# 
   414  0F35                     	;# 
   415  0F36                     	;# 
   416  0F37                     	;# 
   417  0FE4                     	;# 
   418  0FE5                     	;# 
   419  0FE6                     	;# 
   420  0FE7                     	;# 
   421  0FE8                     	;# 
   422  0FE9                     	;# 
   423  0FEA                     	;# 
   424  0FEB                     	;# 
   425  0FED                     	;# 
   426  0FEE                     	;# 
   427  0FEF                     	;# 
   428  0000                     	;# 
   429  0001                     	;# 
   430  0002                     	;# 
   431  0003                     	;# 
   432  0004                     	;# 
   433  0005                     	;# 
   434  0006                     	;# 
   435  0007                     	;# 
   436  0008                     	;# 
   437  0009                     	;# 
   438  000A                     	;# 
   439  000B                     	;# 
   440  000C                     	;# 
   441  000D                     	;# 
   442  000E                     	;# 
   443  0010                     	;# 
   444  0011                     	;# 
   445  0012                     	;# 
   446  0013                     	;# 
   447  0014                     	;# 
   448  0015                     	;# 
   449  0015                     	;# 
   450  0016                     	;# 
   451  0016                     	;# 
   452  0017                     	;# 
   453  0018                     	;# 
   454  0019                     	;# 
   455  0019                     	;# 
   456  001A                     	;# 
   457  001B                     	;# 
   458  001C                     	;# 
   459  001D                     	;# 
   460  001E                     	;# 
   461  001F                     	;# 
   462  008C                     	;# 
   463  008D                     	;# 
   464  008E                     	;# 
   465  0090                     	;# 
   466  0091                     	;# 
   467  0092                     	;# 
   468  0093                     	;# 
   469  0094                     	;# 
   470  0097                     	;# 
   471  009B                     	;# 
   472  009B                     	;# 
   473  009C                     	;# 
   474  009D                     	;# 
   475  009E                     	;# 
   476  009F                     	;# 
   477  010C                     	;# 
   478  010D                     	;# 
   479  010E                     	;# 
   480  0111                     	;# 
   481  0112                     	;# 
   482  0113                     	;# 
   483  0114                     	;# 
   484  0115                     	;# 
   485  0116                     	;# 
   486  0117                     	;# 
   487  0118                     	;# 
   488  0119                     	;# 
   489  018C                     	;# 
   490  018D                     	;# 
   491  018E                     	;# 
   492  0197                     	;# 
   493  0199                     	;# 
   494  0199                     	;# 
   495  0199                     	;# 
   496  019A                     	;# 
   497  019A                     	;# 
   498  019A                     	;# 
   499  019B                     	;# 
   500  019B                     	;# 
   501  019B                     	;# 
   502  019B                     	;# 
   503  019B                     	;# 
   504  019C                     	;# 
   505  019C                     	;# 
   506  019C                     	;# 
   507  019D                     	;# 
   508  019D                     	;# 
   509  019D                     	;# 
   510  019E                     	;# 
   511  019E                     	;# 
   512  019E                     	;# 
   513  019F                     	;# 
   514  019F                     	;# 
   515  019F                     	;# 
   516  019F                     	;# 
   517  019F                     	;# 
   518  020C                     	;# 
   519  020D                     	;# 
   520  020E                     	;# 
   521  0211                     	;# 
   522  0211                     	;# 
   523  0212                     	;# 
   524  0212                     	;# 
   525  0213                     	;# 
   526  0213                     	;# 
   527  0214                     	;# 
   528  0214                     	;# 
   529  0215                     	;# 
   530  0215                     	;# 
   531  0215                     	;# 
   532  0215                     	;# 
   533  0216                     	;# 
   534  0216                     	;# 
   535  0217                     	;# 
   536  0217                     	;# 
   537  0219                     	;# 
   538  021A                     	;# 
   539  021B                     	;# 
   540  021C                     	;# 
   541  021D                     	;# 
   542  021D                     	;# 
   543  021E                     	;# 
   544  021F                     	;# 
   545  028C                     	;# 
   546  028D                     	;# 
   547  028E                     	;# 
   548  0291                     	;# 
   549  0291                     	;# 
   550  0292                     	;# 
   551  0293                     	;# 
   552  0294                     	;# 
   553  0295                     	;# 
   554  0295                     	;# 
   555  0296                     	;# 
   556  0297                     	;# 
   557  0298                     	;# 
   558  029F                     	;# 
   559  030C                     	;# 
   560  030D                     	;# 
   561  030E                     	;# 
   562  0311                     	;# 
   563  0311                     	;# 
   564  0312                     	;# 
   565  0313                     	;# 
   566  0314                     	;# 
   567  0315                     	;# 
   568  0315                     	;# 
   569  0316                     	;# 
   570  0317                     	;# 
   571  0318                     	;# 
   572  038C                     	;# 
   573  038D                     	;# 
   574  038E                     	;# 
   575  0391                     	;# 
   576  0392                     	;# 
   577  0393                     	;# 
   578  0394                     	;# 
   579  0395                     	;# 
   580  0396                     	;# 
   581  0397                     	;# 
   582  0398                     	;# 
   583  0399                     	;# 
   584  039A                     	;# 
   585  039C                     	;# 
   586  039D                     	;# 
   587  039E                     	;# 
   588  039F                     	;# 
   589  0411                     	;# 
   590  0411                     	;# 
   591  0412                     	;# 
   592  0413                     	;# 
   593  0414                     	;# 
   594  0415                     	;# 
   595  0416                     	;# 
   596  0417                     	;# 
   597  0418                     	;# 
   598  0418                     	;# 
   599  0419                     	;# 
   600  041A                     	;# 
   601  041B                     	;# 
   602  041C                     	;# 
   603  041D                     	;# 
   604  041E                     	;# 
   605  041F                     	;# 
   606  0498                     	;# 
   607  0498                     	;# 
   608  0499                     	;# 
   609  049A                     	;# 
   610  049B                     	;# 
   611  049B                     	;# 
   612  049C                     	;# 
   613  049D                     	;# 
   614  049E                     	;# 
   615  049F                     	;# 
   616  0617                     	;# 
   617  0618                     	;# 
   618  0619                     	;# 
   619  0619                     	;# 
   620  061A                     	;# 
   621  061B                     	;# 
   622  061C                     	;# 
   623  061C                     	;# 
   624  061F                     	;# 
   625  0691                     	;# 
   626  0692                     	;# 
   627  0693                     	;# 
   628  0694                     	;# 
   629  0695                     	;# 
   630  0696                     	;# 
   631  0697                     	;# 
   632  0698                     	;# 
   633  0699                     	;# 
   634  0711                     	;# 
   635  0712                     	;# 
   636  0713                     	;# 
   637  0714                     	;# 
   638  0715                     	;# 
   639  0716                     	;# 
   640  0717                     	;# 
   641  0718                     	;# 
   642  0719                     	;# 
   643  0891                     	;# 
   644  0891                     	;# 
   645  0891                     	;# 
   646  0891                     	;# 
   647  0891                     	;# 
   648  0891                     	;# 
   649  0892                     	;# 
   650  0892                     	;# 
   651  0892                     	;# 
   652  0893                     	;# 
   653  0893                     	;# 
   654  0893                     	;# 
   655  0893                     	;# 
   656  0893                     	;# 
   657  0893                     	;# 
   658  0894                     	;# 
   659  0894                     	;# 
   660  0894                     	;# 
   661  0895                     	;# 
   662  0895                     	;# 
   663  0895                     	;# 
   664  0896                     	;# 
   665  0896                     	;# 
   666  0896                     	;# 
   667  089B                     	;# 
   668  0911                     	;# 
   669  0912                     	;# 
   670  0913                     	;# 
   671  0914                     	;# 
   672  0915                     	;# 
   673  0916                     	;# 
   674  0918                     	;# 
   675  0919                     	;# 
   676  091A                     	;# 
   677  091B                     	;# 
   678  091C                     	;# 
   679  091D                     	;# 
   680  091E                     	;# 
   681  091F                     	;# 
   682  0E0F                     	;# 
   683  0E10                     	;# 
   684  0E11                     	;# 
   685  0E12                     	;# 
   686  0E13                     	;# 
   687  0E14                     	;# 
   688  0E15                     	;# 
   689  0E16                     	;# 
   690  0E17                     	;# 
   691  0E18                     	;# 
   692  0E19                     	;# 
   693  0E1A                     	;# 
   694  0E1B                     	;# 
   695  0E1C                     	;# 
   696  0E1D                     	;# 
   697  0E1E                     	;# 
   698  0E1F                     	;# 
   699  0E20                     	;# 
   700  0E21                     	;# 
   701  0E22                     	;# 
   702  0E24                     	;# 
   703  0E25                     	;# 
   704  0E28                     	;# 
   705  0E29                     	;# 
   706  0E2A                     	;# 
   707  0E2B                     	;# 
   708  0E2C                     	;# 
   709  0E2D                     	;# 
   710  0E2E                     	;# 
   711  0E2F                     	;# 
   712  0E90                     	;# 
   713  0E91                     	;# 
   714  0E92                     	;# 
   715  0E94                     	;# 
   716  0E95                     	;# 
   717  0E9C                     	;# 
   718  0E9D                     	;# 
   719  0E9E                     	;# 
   720  0E9F                     	;# 
   721  0EA0                     	;# 
   722  0EA1                     	;# 
   723  0EA2                     	;# 
   724  0EA3                     	;# 
   725  0EA4                     	;# 
   726  0EA5                     	;# 
   727  0EA6                     	;# 
   728  0EA7                     	;# 
   729  0F0F                     	;# 
   730  0F10                     	;# 
   731  0F11                     	;# 
   732  0F12                     	;# 
   733  0F13                     	;# 
   734  0F14                     	;# 
   735  0F15                     	;# 
   736  0F16                     	;# 
   737  0F17                     	;# 
   738  0F18                     	;# 
   739  0F19                     	;# 
   740  0F1A                     	;# 
   741  0F1B                     	;# 
   742  0F1C                     	;# 
   743  0F1D                     	;# 
   744  0F1E                     	;# 
   745  0F1F                     	;# 
   746  0F20                     	;# 
   747  0F21                     	;# 
   748  0F22                     	;# 
   749  0F23                     	;# 
   750  0F24                     	;# 
   751  0F25                     	;# 
   752  0F26                     	;# 
   753  0F27                     	;# 
   754  0F28                     	;# 
   755  0F29                     	;# 
   756  0F2A                     	;# 
   757  0F2B                     	;# 
   758  0F2C                     	;# 
   759  0F2D                     	;# 
   760  0F2E                     	;# 
   761  0F2F                     	;# 
   762  0F30                     	;# 
   763  0F31                     	;# 
   764  0F32                     	;# 
   765  0F33                     	;# 
   766  0F34                     	;# 
   767  0F35                     	;# 
   768  0F36                     	;# 
   769  0F37                     	;# 
   770  0FE4                     	;# 
   771  0FE5                     	;# 
   772  0FE6                     	;# 
   773  0FE7                     	;# 
   774  0FE8                     	;# 
   775  0FE9                     	;# 
   776  0FEA                     	;# 
   777  0FEB                     	;# 
   778  0FED                     	;# 
   779  0FEE                     	;# 
   780  0FEF                     	;# 
   781  0000                     	;# 
   782  0001                     	;# 
   783  0002                     	;# 
   784  0003                     	;# 
   785  0004                     	;# 
   786  0005                     	;# 
   787  0006                     	;# 
   788  0007                     	;# 
   789  0008                     	;# 
   790  0009                     	;# 
   791  000A                     	;# 
   792  000B                     	;# 
   793  000C                     	;# 
   794  000D                     	;# 
   795  000E                     	;# 
   796  0010                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0013                     	;# 
   800  0014                     	;# 
   801  0015                     	;# 
   802  0015                     	;# 
   803  0016                     	;# 
   804  0016                     	;# 
   805  0017                     	;# 
   806  0018                     	;# 
   807  0019                     	;# 
   808  0019                     	;# 
   809  001A                     	;# 
   810  001B                     	;# 
   811  001C                     	;# 
   812  001D                     	;# 
   813  001E                     	;# 
   814  001F                     	;# 
   815  008C                     	;# 
   816  008D                     	;# 
   817  008E                     	;# 
   818  0090                     	;# 
   819  0091                     	;# 
   820  0092                     	;# 
   821  0093                     	;# 
   822  0094                     	;# 
   823  0097                     	;# 
   824  009B                     	;# 
   825  009B                     	;# 
   826  009C                     	;# 
   827  009D                     	;# 
   828  009E                     	;# 
   829  009F                     	;# 
   830  010C                     	;# 
   831  010D                     	;# 
   832  010E                     	;# 
   833  0111                     	;# 
   834  0112                     	;# 
   835  0113                     	;# 
   836  0114                     	;# 
   837  0115                     	;# 
   838  0116                     	;# 
   839  0117                     	;# 
   840  0118                     	;# 
   841  0119                     	;# 
   842  018C                     	;# 
   843  018D                     	;# 
   844  018E                     	;# 
   845  0197                     	;# 
   846  0199                     	;# 
   847  0199                     	;# 
   848  0199                     	;# 
   849  019A                     	;# 
   850  019A                     	;# 
   851  019A                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019C                     	;# 
   858  019C                     	;# 
   859  019C                     	;# 
   860  019D                     	;# 
   861  019D                     	;# 
   862  019D                     	;# 
   863  019E                     	;# 
   864  019E                     	;# 
   865  019E                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  019F                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  020C                     	;# 
   872  020D                     	;# 
   873  020E                     	;# 
   874  0211                     	;# 
   875  0211                     	;# 
   876  0212                     	;# 
   877  0212                     	;# 
   878  0213                     	;# 
   879  0213                     	;# 
   880  0214                     	;# 
   881  0214                     	;# 
   882  0215                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0216                     	;# 
   887  0216                     	;# 
   888  0217                     	;# 
   889  0217                     	;# 
   890  0219                     	;# 
   891  021A                     	;# 
   892  021B                     	;# 
   893  021C                     	;# 
   894  021D                     	;# 
   895  021D                     	;# 
   896  021E                     	;# 
   897  021F                     	;# 
   898  028C                     	;# 
   899  028D                     	;# 
   900  028E                     	;# 
   901  0291                     	;# 
   902  0291                     	;# 
   903  0292                     	;# 
   904  0293                     	;# 
   905  0294                     	;# 
   906  0295                     	;# 
   907  0295                     	;# 
   908  0296                     	;# 
   909  0297                     	;# 
   910  0298                     	;# 
   911  029F                     	;# 
   912  030C                     	;# 
   913  030D                     	;# 
   914  030E                     	;# 
   915  0311                     	;# 
   916  0311                     	;# 
   917  0312                     	;# 
   918  0313                     	;# 
   919  0314                     	;# 
   920  0315                     	;# 
   921  0315                     	;# 
   922  0316                     	;# 
   923  0317                     	;# 
   924  0318                     	;# 
   925  038C                     	;# 
   926  038D                     	;# 
   927  038E                     	;# 
   928  0391                     	;# 
   929  0392                     	;# 
   930  0393                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0397                     	;# 
   935  0398                     	;# 
   936  0399                     	;# 
   937  039A                     	;# 
   938  039C                     	;# 
   939  039D                     	;# 
   940  039E                     	;# 
   941  039F                     	;# 
   942  0411                     	;# 
   943  0411                     	;# 
   944  0412                     	;# 
   945  0413                     	;# 
   946  0414                     	;# 
   947  0415                     	;# 
   948  0416                     	;# 
   949  0417                     	;# 
   950  0418                     	;# 
   951  0418                     	;# 
   952  0419                     	;# 
   953  041A                     	;# 
   954  041B                     	;# 
   955  041C                     	;# 
   956  041D                     	;# 
   957  041E                     	;# 
   958  041F                     	;# 
   959  0498                     	;# 
   960  0498                     	;# 
   961  0499                     	;# 
   962  049A                     	;# 
   963  049B                     	;# 
   964  049B                     	;# 
   965  049C                     	;# 
   966  049D                     	;# 
   967  049E                     	;# 
   968  049F                     	;# 
   969  0617                     	;# 
   970  0618                     	;# 
   971  0619                     	;# 
   972  0619                     	;# 
   973  061A                     	;# 
   974  061B                     	;# 
   975  061C                     	;# 
   976  061C                     	;# 
   977  061F                     	;# 
   978  0691                     	;# 
   979  0692                     	;# 
   980  0693                     	;# 
   981  0694                     	;# 
   982  0695                     	;# 
   983  0696                     	;# 
   984  0697                     	;# 
   985  0698                     	;# 
   986  0699                     	;# 
   987  0711                     	;# 
   988  0712                     	;# 
   989  0713                     	;# 
   990  0714                     	;# 
   991  0715                     	;# 
   992  0716                     	;# 
   993  0717                     	;# 
   994  0718                     	;# 
   995  0719                     	;# 
   996  0891                     	;# 
   997  0891                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0892                     	;# 
  1003  0892                     	;# 
  1004  0892                     	;# 
  1005  0893                     	;# 
  1006  0893                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0894                     	;# 
  1012  0894                     	;# 
  1013  0894                     	;# 
  1014  0895                     	;# 
  1015  0895                     	;# 
  1016  0895                     	;# 
  1017  0896                     	;# 
  1018  0896                     	;# 
  1019  0896                     	;# 
  1020  089B                     	;# 
  1021  0911                     	;# 
  1022  0912                     	;# 
  1023  0913                     	;# 
  1024  0914                     	;# 
  1025  0915                     	;# 
  1026  0916                     	;# 
  1027  0918                     	;# 
  1028  0919                     	;# 
  1029  091A                     	;# 
  1030  091B                     	;# 
  1031  091C                     	;# 
  1032  091D                     	;# 
  1033  091E                     	;# 
  1034  091F                     	;# 
  1035  0E0F                     	;# 
  1036  0E10                     	;# 
  1037  0E11                     	;# 
  1038  0E12                     	;# 
  1039  0E13                     	;# 
  1040  0E14                     	;# 
  1041  0E15                     	;# 
  1042  0E16                     	;# 
  1043  0E17                     	;# 
  1044  0E18                     	;# 
  1045  0E19                     	;# 
  1046  0E1A                     	;# 
  1047  0E1B                     	;# 
  1048  0E1C                     	;# 
  1049  0E1D                     	;# 
  1050  0E1E                     	;# 
  1051  0E1F                     	;# 
  1052  0E20                     	;# 
  1053  0E21                     	;# 
  1054  0E22                     	;# 
  1055  0E24                     	;# 
  1056  0E25                     	;# 
  1057  0E28                     	;# 
  1058  0E29                     	;# 
  1059  0E2A                     	;# 
  1060  0E2B                     	;# 
  1061  0E2C                     	;# 
  1062  0E2D                     	;# 
  1063  0E2E                     	;# 
  1064  0E2F                     	;# 
  1065  0E90                     	;# 
  1066  0E91                     	;# 
  1067  0E92                     	;# 
  1068  0E94                     	;# 
  1069  0E95                     	;# 
  1070  0E9C                     	;# 
  1071  0E9D                     	;# 
  1072  0E9E                     	;# 
  1073  0E9F                     	;# 
  1074  0EA0                     	;# 
  1075  0EA1                     	;# 
  1076  0EA2                     	;# 
  1077  0EA3                     	;# 
  1078  0EA4                     	;# 
  1079  0EA5                     	;# 
  1080  0EA6                     	;# 
  1081  0EA7                     	;# 
  1082  0F0F                     	;# 
  1083  0F10                     	;# 
  1084  0F11                     	;# 
  1085  0F12                     	;# 
  1086  0F13                     	;# 
  1087  0F14                     	;# 
  1088  0F15                     	;# 
  1089  0F16                     	;# 
  1090  0F17                     	;# 
  1091  0F18                     	;# 
  1092  0F19                     	;# 
  1093  0F1A                     	;# 
  1094  0F1B                     	;# 
  1095  0F1C                     	;# 
  1096  0F1D                     	;# 
  1097  0F1E                     	;# 
  1098  0F1F                     	;# 
  1099  0F20                     	;# 
  1100  0F21                     	;# 
  1101  0F22                     	;# 
  1102  0F23                     	;# 
  1103  0F24                     	;# 
  1104  0F25                     	;# 
  1105  0F26                     	;# 
  1106  0F27                     	;# 
  1107  0F28                     	;# 
  1108  0F29                     	;# 
  1109  0F2A                     	;# 
  1110  0F2B                     	;# 
  1111  0F2C                     	;# 
  1112  0F2D                     	;# 
  1113  0F2E                     	;# 
  1114  0F2F                     	;# 
  1115  0F30                     	;# 
  1116  0F31                     	;# 
  1117  0F32                     	;# 
  1118  0F33                     	;# 
  1119  0F34                     	;# 
  1120  0F35                     	;# 
  1121  0F36                     	;# 
  1122  0F37                     	;# 
  1123  0FE4                     	;# 
  1124  0FE5                     	;# 
  1125  0FE6                     	;# 
  1126  0FE7                     	;# 
  1127  0FE8                     	;# 
  1128  0FE9                     	;# 
  1129  0FEA                     	;# 
  1130  0FEB                     	;# 
  1131  0FED                     	;# 
  1132  0FEE                     	;# 
  1133  0FEF                     	;# 
  1134  0000                     	;# 
  1135  0001                     	;# 
  1136  0002                     	;# 
  1137  0003                     	;# 
  1138  0004                     	;# 
  1139  0005                     	;# 
  1140  0006                     	;# 
  1141  0007                     	;# 
  1142  0008                     	;# 
  1143  0009                     	;# 
  1144  000A                     	;# 
  1145  000B                     	;# 
  1146  000C                     	;# 
  1147  000D                     	;# 
  1148  000E                     	;# 
  1149  0010                     	;# 
  1150  0011                     	;# 
  1151  0012                     	;# 
  1152  0013                     	;# 
  1153  0014                     	;# 
  1154  0015                     	;# 
  1155  0015                     	;# 
  1156  0016                     	;# 
  1157  0016                     	;# 
  1158  0017                     	;# 
  1159  0018                     	;# 
  1160  0019                     	;# 
  1161  0019                     	;# 
  1162  001A                     	;# 
  1163  001B                     	;# 
  1164  001C                     	;# 
  1165  001D                     	;# 
  1166  001E                     	;# 
  1167  001F                     	;# 
  1168  008C                     	;# 
  1169  008D                     	;# 
  1170  008E                     	;# 
  1171  0090                     	;# 
  1172  0091                     	;# 
  1173  0092                     	;# 
  1174  0093                     	;# 
  1175  0094                     	;# 
  1176  0097                     	;# 
  1177  009B                     	;# 
  1178  009B                     	;# 
  1179  009C                     	;# 
  1180  009D                     	;# 
  1181  009E                     	;# 
  1182  009F                     	;# 
  1183  010C                     	;# 
  1184  010D                     	;# 
  1185  010E                     	;# 
  1186  0111                     	;# 
  1187  0112                     	;# 
  1188  0113                     	;# 
  1189  0114                     	;# 
  1190  0115                     	;# 
  1191  0116                     	;# 
  1192  0117                     	;# 
  1193  0118                     	;# 
  1194  0119                     	;# 
  1195  018C                     	;# 
  1196  018D                     	;# 
  1197  018E                     	;# 
  1198  0197                     	;# 
  1199  0199                     	;# 
  1200  0199                     	;# 
  1201  0199                     	;# 
  1202  019A                     	;# 
  1203  019A                     	;# 
  1204  019A                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019C                     	;# 
  1211  019C                     	;# 
  1212  019C                     	;# 
  1213  019D                     	;# 
  1214  019D                     	;# 
  1215  019D                     	;# 
  1216  019E                     	;# 
  1217  019E                     	;# 
  1218  019E                     	;# 
  1219  019F                     	;# 
  1220  019F                     	;# 
  1221  019F                     	;# 
  1222  019F                     	;# 
  1223  019F                     	;# 
  1224  020C                     	;# 
  1225  020D                     	;# 
  1226  020E                     	;# 
  1227  0211                     	;# 
  1228  0211                     	;# 
  1229  0212                     	;# 
  1230  0212                     	;# 
  1231  0213                     	;# 
  1232  0213                     	;# 
  1233  0214                     	;# 
  1234  0214                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0216                     	;# 
  1240  0216                     	;# 
  1241  0217                     	;# 
  1242  0217                     	;# 
  1243  0219                     	;# 
  1244  021A                     	;# 
  1245  021B                     	;# 
  1246  021C                     	;# 
  1247  021D                     	;# 
  1248  021D                     	;# 
  1249  021E                     	;# 
  1250  021F                     	;# 
  1251  028C                     	;# 
  1252  028D                     	;# 
  1253  028E                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0294                     	;# 
  1259  0295                     	;# 
  1260  0295                     	;# 
  1261  0296                     	;# 
  1262  0297                     	;# 
  1263  0298                     	;# 
  1264  029F                     	;# 
  1265  030C                     	;# 
  1266  030D                     	;# 
  1267  030E                     	;# 
  1268  0311                     	;# 
  1269  0311                     	;# 
  1270  0312                     	;# 
  1271  0313                     	;# 
  1272  0314                     	;# 
  1273  0315                     	;# 
  1274  0315                     	;# 
  1275  0316                     	;# 
  1276  0317                     	;# 
  1277  0318                     	;# 
  1278  038C                     	;# 
  1279  038D                     	;# 
  1280  038E                     	;# 
  1281  0391                     	;# 
  1282  0392                     	;# 
  1283  0393                     	;# 
  1284  0394                     	;# 
  1285  0395                     	;# 
  1286  0396                     	;# 
  1287  0397                     	;# 
  1288  0398                     	;# 
  1289  0399                     	;# 
  1290  039A                     	;# 
  1291  039C                     	;# 
  1292  039D                     	;# 
  1293  039E                     	;# 
  1294  039F                     	;# 
  1295  0411                     	;# 
  1296  0411                     	;# 
  1297  0412                     	;# 
  1298  0413                     	;# 
  1299  0414                     	;# 
  1300  0415                     	;# 
  1301  0416                     	;# 
  1302  0417                     	;# 
  1303  0418                     	;# 
  1304  0418                     	;# 
  1305  0419                     	;# 
  1306  041A                     	;# 
  1307  041B                     	;# 
  1308  041C                     	;# 
  1309  041D                     	;# 
  1310  041E                     	;# 
  1311  041F                     	;# 
  1312  0498                     	;# 
  1313  0498                     	;# 
  1314  0499                     	;# 
  1315  049A                     	;# 
  1316  049B                     	;# 
  1317  049B                     	;# 
  1318  049C                     	;# 
  1319  049D                     	;# 
  1320  049E                     	;# 
  1321  049F                     	;# 
  1322  0617                     	;# 
  1323  0618                     	;# 
  1324  0619                     	;# 
  1325  0619                     	;# 
  1326  061A                     	;# 
  1327  061B                     	;# 
  1328  061C                     	;# 
  1329  061C                     	;# 
  1330  061F                     	;# 
  1331  0691                     	;# 
  1332  0692                     	;# 
  1333  0693                     	;# 
  1334  0694                     	;# 
  1335  0695                     	;# 
  1336  0696                     	;# 
  1337  0697                     	;# 
  1338  0698                     	;# 
  1339  0699                     	;# 
  1340  0711                     	;# 
  1341  0712                     	;# 
  1342  0713                     	;# 
  1343  0714                     	;# 
  1344  0715                     	;# 
  1345  0716                     	;# 
  1346  0717                     	;# 
  1347  0718                     	;# 
  1348  0719                     	;# 
  1349  0891                     	;# 
  1350  0891                     	;# 
  1351  0891                     	;# 
  1352  0891                     	;# 
  1353  0891                     	;# 
  1354  0891                     	;# 
  1355  0892                     	;# 
  1356  0892                     	;# 
  1357  0892                     	;# 
  1358  0893                     	;# 
  1359  0893                     	;# 
  1360  0893                     	;# 
  1361  0893                     	;# 
  1362  0893                     	;# 
  1363  0893                     	;# 
  1364  0894                     	;# 
  1365  0894                     	;# 
  1366  0894                     	;# 
  1367  0895                     	;# 
  1368  0895                     	;# 
  1369  0895                     	;# 
  1370  0896                     	;# 
  1371  0896                     	;# 
  1372  0896                     	;# 
  1373  089B                     	;# 
  1374  0911                     	;# 
  1375  0912                     	;# 
  1376  0913                     	;# 
  1377  0914                     	;# 
  1378  0915                     	;# 
  1379  0916                     	;# 
  1380  0918                     	;# 
  1381  0919                     	;# 
  1382  091A                     	;# 
  1383  091B                     	;# 
  1384  091C                     	;# 
  1385  091D                     	;# 
  1386  091E                     	;# 
  1387  091F                     	;# 
  1388  0E0F                     	;# 
  1389  0E10                     	;# 
  1390  0E11                     	;# 
  1391  0E12                     	;# 
  1392  0E13                     	;# 
  1393  0E14                     	;# 
  1394  0E15                     	;# 
  1395  0E16                     	;# 
  1396  0E17                     	;# 
  1397  0E18                     	;# 
  1398  0E19                     	;# 
  1399  0E1A                     	;# 
  1400  0E1B                     	;# 
  1401  0E1C                     	;# 
  1402  0E1D                     	;# 
  1403  0E1E                     	;# 
  1404  0E1F                     	;# 
  1405  0E20                     	;# 
  1406  0E21                     	;# 
  1407  0E22                     	;# 
  1408  0E24                     	;# 
  1409  0E25                     	;# 
  1410  0E28                     	;# 
  1411  0E29                     	;# 
  1412  0E2A                     	;# 
  1413  0E2B                     	;# 
  1414  0E2C                     	;# 
  1415  0E2D                     	;# 
  1416  0E2E                     	;# 
  1417  0E2F                     	;# 
  1418  0E90                     	;# 
  1419  0E91                     	;# 
  1420  0E92                     	;# 
  1421  0E94                     	;# 
  1422  0E95                     	;# 
  1423  0E9C                     	;# 
  1424  0E9D                     	;# 
  1425  0E9E                     	;# 
  1426  0E9F                     	;# 
  1427  0EA0                     	;# 
  1428  0EA1                     	;# 
  1429  0EA2                     	;# 
  1430  0EA3                     	;# 
  1431  0EA4                     	;# 
  1432  0EA5                     	;# 
  1433  0EA6                     	;# 
  1434  0EA7                     	;# 
  1435  0F0F                     	;# 
  1436  0F10                     	;# 
  1437  0F11                     	;# 
  1438  0F12                     	;# 
  1439  0F13                     	;# 
  1440  0F14                     	;# 
  1441  0F15                     	;# 
  1442  0F16                     	;# 
  1443  0F17                     	;# 
  1444  0F18                     	;# 
  1445  0F19                     	;# 
  1446  0F1A                     	;# 
  1447  0F1B                     	;# 
  1448  0F1C                     	;# 
  1449  0F1D                     	;# 
  1450  0F1E                     	;# 
  1451  0F1F                     	;# 
  1452  0F20                     	;# 
  1453  0F21                     	;# 
  1454  0F22                     	;# 
  1455  0F23                     	;# 
  1456  0F24                     	;# 
  1457  0F25                     	;# 
  1458  0F26                     	;# 
  1459  0F27                     	;# 
  1460  0F28                     	;# 
  1461  0F29                     	;# 
  1462  0F2A                     	;# 
  1463  0F2B                     	;# 
  1464  0F2C                     	;# 
  1465  0F2D                     	;# 
  1466  0F2E                     	;# 
  1467  0F2F                     	;# 
  1468  0F30                     	;# 
  1469  0F31                     	;# 
  1470  0F32                     	;# 
  1471  0F33                     	;# 
  1472  0F34                     	;# 
  1473  0F35                     	;# 
  1474  0F36                     	;# 
  1475  0F37                     	;# 
  1476  0FE4                     	;# 
  1477  0FE5                     	;# 
  1478  0FE6                     	;# 
  1479  0FE7                     	;# 
  1480  0FE8                     	;# 
  1481  0FE9                     	;# 
  1482  0FEA                     	;# 
  1483  0FEB                     	;# 
  1484  0FED                     	;# 
  1485  0FEE                     	;# 
  1486  0FEF                     	;# 
  1487  0000                     	;# 
  1488  0001                     	;# 
  1489  0002                     	;# 
  1490  0003                     	;# 
  1491  0004                     	;# 
  1492  0005                     	;# 
  1493  0006                     	;# 
  1494  0007                     	;# 
  1495  0008                     	;# 
  1496  0009                     	;# 
  1497  000A                     	;# 
  1498  000B                     	;# 
  1499  000C                     	;# 
  1500  000D                     	;# 
  1501  000E                     	;# 
  1502  0010                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0013                     	;# 
  1506  0014                     	;# 
  1507  0015                     	;# 
  1508  0015                     	;# 
  1509  0016                     	;# 
  1510  0016                     	;# 
  1511  0017                     	;# 
  1512  0018                     	;# 
  1513  0019                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  001D                     	;# 
  1519  001E                     	;# 
  1520  001F                     	;# 
  1521  008C                     	;# 
  1522  008D                     	;# 
  1523  008E                     	;# 
  1524  0090                     	;# 
  1525  0091                     	;# 
  1526  0092                     	;# 
  1527  0093                     	;# 
  1528  0094                     	;# 
  1529  0097                     	;# 
  1530  009B                     	;# 
  1531  009B                     	;# 
  1532  009C                     	;# 
  1533  009D                     	;# 
  1534  009E                     	;# 
  1535  009F                     	;# 
  1536  010C                     	;# 
  1537  010D                     	;# 
  1538  010E                     	;# 
  1539  0111                     	;# 
  1540  0112                     	;# 
  1541  0113                     	;# 
  1542  0114                     	;# 
  1543  0115                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  0118                     	;# 
  1547  0119                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  0199                     	;# 
  1554  0199                     	;# 
  1555  019A                     	;# 
  1556  019A                     	;# 
  1557  019A                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019C                     	;# 
  1566  019D                     	;# 
  1567  019D                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019E                     	;# 
  1571  019E                     	;# 
  1572  019F                     	;# 
  1573  019F                     	;# 
  1574  019F                     	;# 
  1575  019F                     	;# 
  1576  019F                     	;# 
  1577  020C                     	;# 
  1578  020D                     	;# 
  1579  020E                     	;# 
  1580  0211                     	;# 
  1581  0211                     	;# 
  1582  0212                     	;# 
  1583  0212                     	;# 
  1584  0213                     	;# 
  1585  0213                     	;# 
  1586  0214                     	;# 
  1587  0214                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0216                     	;# 
  1593  0216                     	;# 
  1594  0217                     	;# 
  1595  0217                     	;# 
  1596  0219                     	;# 
  1597  021A                     	;# 
  1598  021B                     	;# 
  1599  021C                     	;# 
  1600  021D                     	;# 
  1601  021D                     	;# 
  1602  021E                     	;# 
  1603  021F                     	;# 
  1604  028C                     	;# 
  1605  028D                     	;# 
  1606  028E                     	;# 
  1607  0291                     	;# 
  1608  0291                     	;# 
  1609  0292                     	;# 
  1610  0293                     	;# 
  1611  0294                     	;# 
  1612  0295                     	;# 
  1613  0295                     	;# 
  1614  0296                     	;# 
  1615  0297                     	;# 
  1616  0298                     	;# 
  1617  029F                     	;# 
  1618  030C                     	;# 
  1619  030D                     	;# 
  1620  030E                     	;# 
  1621  0311                     	;# 
  1622  0311                     	;# 
  1623  0312                     	;# 
  1624  0313                     	;# 
  1625  0314                     	;# 
  1626  0315                     	;# 
  1627  0315                     	;# 
  1628  0316                     	;# 
  1629  0317                     	;# 
  1630  0318                     	;# 
  1631  038C                     	;# 
  1632  038D                     	;# 
  1633  038E                     	;# 
  1634  0391                     	;# 
  1635  0392                     	;# 
  1636  0393                     	;# 
  1637  0394                     	;# 
  1638  0395                     	;# 
  1639  0396                     	;# 
  1640  0397                     	;# 
  1641  0398                     	;# 
  1642  0399                     	;# 
  1643  039A                     	;# 
  1644  039C                     	;# 
  1645  039D                     	;# 
  1646  039E                     	;# 
  1647  039F                     	;# 
  1648  0411                     	;# 
  1649  0411                     	;# 
  1650  0412                     	;# 
  1651  0413                     	;# 
  1652  0414                     	;# 
  1653  0415                     	;# 
  1654  0416                     	;# 
  1655  0417                     	;# 
  1656  0418                     	;# 
  1657  0418                     	;# 
  1658  0419                     	;# 
  1659  041A                     	;# 
  1660  041B                     	;# 
  1661  041C                     	;# 
  1662  041D                     	;# 
  1663  041E                     	;# 
  1664  041F                     	;# 
  1665  0498                     	;# 
  1666  0498                     	;# 
  1667  0499                     	;# 
  1668  049A                     	;# 
  1669  049B                     	;# 
  1670  049B                     	;# 
  1671  049C                     	;# 
  1672  049D                     	;# 
  1673  049E                     	;# 
  1674  049F                     	;# 
  1675  0617                     	;# 
  1676  0618                     	;# 
  1677  0619                     	;# 
  1678  0619                     	;# 
  1679  061A                     	;# 
  1680  061B                     	;# 
  1681  061C                     	;# 
  1682  061C                     	;# 
  1683  061F                     	;# 
  1684  0691                     	;# 
  1685  0692                     	;# 
  1686  0693                     	;# 
  1687  0694                     	;# 
  1688  0695                     	;# 
  1689  0696                     	;# 
  1690  0697                     	;# 
  1691  0698                     	;# 
  1692  0699                     	;# 
  1693  0711                     	;# 
  1694  0712                     	;# 
  1695  0713                     	;# 
  1696  0714                     	;# 
  1697  0715                     	;# 
  1698  0716                     	;# 
  1699  0717                     	;# 
  1700  0718                     	;# 
  1701  0719                     	;# 
  1702  0891                     	;# 
  1703  0891                     	;# 
  1704  0891                     	;# 
  1705  0891                     	;# 
  1706  0891                     	;# 
  1707  0891                     	;# 
  1708  0892                     	;# 
  1709  0892                     	;# 
  1710  0892                     	;# 
  1711  0893                     	;# 
  1712  0893                     	;# 
  1713  0893                     	;# 
  1714  0893                     	;# 
  1715  0893                     	;# 
  1716  0893                     	;# 
  1717  0894                     	;# 
  1718  0894                     	;# 
  1719  0894                     	;# 
  1720  0895                     	;# 
  1721  0895                     	;# 
  1722  0895                     	;# 
  1723  0896                     	;# 
  1724  0896                     	;# 
  1725  0896                     	;# 
  1726  089B                     	;# 
  1727  0911                     	;# 
  1728  0912                     	;# 
  1729  0913                     	;# 
  1730  0914                     	;# 
  1731  0915                     	;# 
  1732  0916                     	;# 
  1733  0918                     	;# 
  1734  0919                     	;# 
  1735  091A                     	;# 
  1736  091B                     	;# 
  1737  091C                     	;# 
  1738  091D                     	;# 
  1739  091E                     	;# 
  1740  091F                     	;# 
  1741  0E0F                     	;# 
  1742  0E10                     	;# 
  1743  0E11                     	;# 
  1744  0E12                     	;# 
  1745  0E13                     	;# 
  1746  0E14                     	;# 
  1747  0E15                     	;# 
  1748  0E16                     	;# 
  1749  0E17                     	;# 
  1750  0E18                     	;# 
  1751  0E19                     	;# 
  1752  0E1A                     	;# 
  1753  0E1B                     	;# 
  1754  0E1C                     	;# 
  1755  0E1D                     	;# 
  1756  0E1E                     	;# 
  1757  0E1F                     	;# 
  1758  0E20                     	;# 
  1759  0E21                     	;# 
  1760  0E22                     	;# 
  1761  0E24                     	;# 
  1762  0E25                     	;# 
  1763  0E28                     	;# 
  1764  0E29                     	;# 
  1765  0E2A                     	;# 
  1766  0E2B                     	;# 
  1767  0E2C                     	;# 
  1768  0E2D                     	;# 
  1769  0E2E                     	;# 
  1770  0E2F                     	;# 
  1771  0E90                     	;# 
  1772  0E91                     	;# 
  1773  0E92                     	;# 
  1774  0E94                     	;# 
  1775  0E95                     	;# 
  1776  0E9C                     	;# 
  1777  0E9D                     	;# 
  1778  0E9E                     	;# 
  1779  0E9F                     	;# 
  1780  0EA0                     	;# 
  1781  0EA1                     	;# 
  1782  0EA2                     	;# 
  1783  0EA3                     	;# 
  1784  0EA4                     	;# 
  1785  0EA5                     	;# 
  1786  0EA6                     	;# 
  1787  0EA7                     	;# 
  1788  0F0F                     	;# 
  1789  0F10                     	;# 
  1790  0F11                     	;# 
  1791  0F12                     	;# 
  1792  0F13                     	;# 
  1793  0F14                     	;# 
  1794  0F15                     	;# 
  1795  0F16                     	;# 
  1796  0F17                     	;# 
  1797  0F18                     	;# 
  1798  0F19                     	;# 
  1799  0F1A                     	;# 
  1800  0F1B                     	;# 
  1801  0F1C                     	;# 
  1802  0F1D                     	;# 
  1803  0F1E                     	;# 
  1804  0F1F                     	;# 
  1805  0F20                     	;# 
  1806  0F21                     	;# 
  1807  0F22                     	;# 
  1808  0F23                     	;# 
  1809  0F24                     	;# 
  1810  0F25                     	;# 
  1811  0F26                     	;# 
  1812  0F27                     	;# 
  1813  0F28                     	;# 
  1814  0F29                     	;# 
  1815  0F2A                     	;# 
  1816  0F2B                     	;# 
  1817  0F2C                     	;# 
  1818  0F2D                     	;# 
  1819  0F2E                     	;# 
  1820  0F2F                     	;# 
  1821  0F30                     	;# 
  1822  0F31                     	;# 
  1823  0F32                     	;# 
  1824  0F33                     	;# 
  1825  0F34                     	;# 
  1826  0F35                     	;# 
  1827  0F36                     	;# 
  1828  0F37                     	;# 
  1829  0FE4                     	;# 
  1830  0FE5                     	;# 
  1831  0FE6                     	;# 
  1832  0FE7                     	;# 
  1833  0FE8                     	;# 
  1834  0FE9                     	;# 
  1835  0FEA                     	;# 
  1836  0FEB                     	;# 
  1837  0FED                     	;# 
  1838  0FEE                     	;# 
  1839  0FEF                     	;# 
  1840  0000                     	;# 
  1841  0001                     	;# 
  1842  0002                     	;# 
  1843  0003                     	;# 
  1844  0004                     	;# 
  1845  0005                     	;# 
  1846  0006                     	;# 
  1847  0007                     	;# 
  1848  0008                     	;# 
  1849  0009                     	;# 
  1850  000A                     	;# 
  1851  000B                     	;# 
  1852  000C                     	;# 
  1853  000D                     	;# 
  1854  000E                     	;# 
  1855  0010                     	;# 
  1856  0011                     	;# 
  1857  0012                     	;# 
  1858  0013                     	;# 
  1859  0014                     	;# 
  1860  0015                     	;# 
  1861  0015                     	;# 
  1862  0016                     	;# 
  1863  0016                     	;# 
  1864  0017                     	;# 
  1865  0018                     	;# 
  1866  0019                     	;# 
  1867  0019                     	;# 
  1868  001A                     	;# 
  1869  001B                     	;# 
  1870  001C                     	;# 
  1871  001D                     	;# 
  1872  001E                     	;# 
  1873  001F                     	;# 
  1874  008C                     	;# 
  1875  008D                     	;# 
  1876  008E                     	;# 
  1877  0090                     	;# 
  1878  0091                     	;# 
  1879  0092                     	;# 
  1880  0093                     	;# 
  1881  0094                     	;# 
  1882  0097                     	;# 
  1883  009B                     	;# 
  1884  009B                     	;# 
  1885  009C                     	;# 
  1886  009D                     	;# 
  1887  009E                     	;# 
  1888  009F                     	;# 
  1889  010C                     	;# 
  1890  010D                     	;# 
  1891  010E                     	;# 
  1892  0111                     	;# 
  1893  0112                     	;# 
  1894  0113                     	;# 
  1895  0114                     	;# 
  1896  0115                     	;# 
  1897  0116                     	;# 
  1898  0117                     	;# 
  1899  0118                     	;# 
  1900  0119                     	;# 
  1901  018C                     	;# 
  1902  018D                     	;# 
  1903  018E                     	;# 
  1904  0197                     	;# 
  1905  0199                     	;# 
  1906  0199                     	;# 
  1907  0199                     	;# 
  1908  019A                     	;# 
  1909  019A                     	;# 
  1910  019A                     	;# 
  1911  019B                     	;# 
  1912  019B                     	;# 
  1913  019B                     	;# 
  1914  019B                     	;# 
  1915  019B                     	;# 
  1916  019C                     	;# 
  1917  019C                     	;# 
  1918  019C                     	;# 
  1919  019D                     	;# 
  1920  019D                     	;# 
  1921  019D                     	;# 
  1922  019E                     	;# 
  1923  019E                     	;# 
  1924  019E                     	;# 
  1925  019F                     	;# 
  1926  019F                     	;# 
  1927  019F                     	;# 
  1928  019F                     	;# 
  1929  019F                     	;# 
  1930  020C                     	;# 
  1931  020D                     	;# 
  1932  020E                     	;# 
  1933  0211                     	;# 
  1934  0211                     	;# 
  1935  0212                     	;# 
  1936  0212                     	;# 
  1937  0213                     	;# 
  1938  0213                     	;# 
  1939  0214                     	;# 
  1940  0214                     	;# 
  1941  0215                     	;# 
  1942  0215                     	;# 
  1943  0215                     	;# 
  1944  0215                     	;# 
  1945  0216                     	;# 
  1946  0216                     	;# 
  1947  0217                     	;# 
  1948  0217                     	;# 
  1949  0219                     	;# 
  1950  021A                     	;# 
  1951  021B                     	;# 
  1952  021C                     	;# 
  1953  021D                     	;# 
  1954  021D                     	;# 
  1955  021E                     	;# 
  1956  021F                     	;# 
  1957  028C                     	;# 
  1958  028D                     	;# 
  1959  028E                     	;# 
  1960  0291                     	;# 
  1961  0291                     	;# 
  1962  0292                     	;# 
  1963  0293                     	;# 
  1964  0294                     	;# 
  1965  0295                     	;# 
  1966  0295                     	;# 
  1967  0296                     	;# 
  1968  0297                     	;# 
  1969  0298                     	;# 
  1970  029F                     	;# 
  1971  030C                     	;# 
  1972  030D                     	;# 
  1973  030E                     	;# 
  1974  0311                     	;# 
  1975  0311                     	;# 
  1976  0312                     	;# 
  1977  0313                     	;# 
  1978  0314                     	;# 
  1979  0315                     	;# 
  1980  0315                     	;# 
  1981  0316                     	;# 
  1982  0317                     	;# 
  1983  0318                     	;# 
  1984  038C                     	;# 
  1985  038D                     	;# 
  1986  038E                     	;# 
  1987  0391                     	;# 
  1988  0392                     	;# 
  1989  0393                     	;# 
  1990  0394                     	;# 
  1991  0395                     	;# 
  1992  0396                     	;# 
  1993  0397                     	;# 
  1994  0398                     	;# 
  1995  0399                     	;# 
  1996  039A                     	;# 
  1997  039C                     	;# 
  1998  039D                     	;# 
  1999  039E                     	;# 
  2000  039F                     	;# 
  2001  0411                     	;# 
  2002  0411                     	;# 
  2003  0412                     	;# 
  2004  0413                     	;# 
  2005  0414                     	;# 
  2006  0415                     	;# 
  2007  0416                     	;# 
  2008  0417                     	;# 
  2009  0418                     	;# 
  2010  0418                     	;# 
  2011  0419                     	;# 
  2012  041A                     	;# 
  2013  041B                     	;# 
  2014  041C                     	;# 
  2015  041D                     	;# 
  2016  041E                     	;# 
  2017  041F                     	;# 
  2018  0498                     	;# 
  2019  0498                     	;# 
  2020  0499                     	;# 
  2021  049A                     	;# 
  2022  049B                     	;# 
  2023  049B                     	;# 
  2024  049C                     	;# 
  2025  049D                     	;# 
  2026  049E                     	;# 
  2027  049F                     	;# 
  2028  0617                     	;# 
  2029  0618                     	;# 
  2030  0619                     	;# 
  2031  0619                     	;# 
  2032  061A                     	;# 
  2033  061B                     	;# 
  2034  061C                     	;# 
  2035  061C                     	;# 
  2036  061F                     	;# 
  2037  0691                     	;# 
  2038  0692                     	;# 
  2039  0693                     	;# 
  2040  0694                     	;# 
  2041  0695                     	;# 
  2042  0696                     	;# 
  2043  0697                     	;# 
  2044  0698                     	;# 
  2045  0699                     	;# 
  2046  0711                     	;# 
  2047  0712                     	;# 
  2048  0713                     	;# 
  2049  0714                     	;# 
  2050  0715                     	;# 
  2051  0716                     	;# 
  2052  0717                     	;# 
  2053  0718                     	;# 
  2054  0719                     	;# 
  2055  0891                     	;# 
  2056  0891                     	;# 
  2057  0891                     	;# 
  2058  0891                     	;# 
  2059  0891                     	;# 
  2060  0891                     	;# 
  2061  0892                     	;# 
  2062  0892                     	;# 
  2063  0892                     	;# 
  2064  0893                     	;# 
  2065  0893                     	;# 
  2066  0893                     	;# 
  2067  0893                     	;# 
  2068  0893                     	;# 
  2069  0893                     	;# 
  2070  0894                     	;# 
  2071  0894                     	;# 
  2072  0894                     	;# 
  2073  0895                     	;# 
  2074  0895                     	;# 
  2075  0895                     	;# 
  2076  0896                     	;# 
  2077  0896                     	;# 
  2078  0896                     	;# 
  2079  089B                     	;# 
  2080  0911                     	;# 
  2081  0912                     	;# 
  2082  0913                     	;# 
  2083  0914                     	;# 
  2084  0915                     	;# 
  2085  0916                     	;# 
  2086  0918                     	;# 
  2087  0919                     	;# 
  2088  091A                     	;# 
  2089  091B                     	;# 
  2090  091C                     	;# 
  2091  091D                     	;# 
  2092  091E                     	;# 
  2093  091F                     	;# 
  2094  0E0F                     	;# 
  2095  0E10                     	;# 
  2096  0E11                     	;# 
  2097  0E12                     	;# 
  2098  0E13                     	;# 
  2099  0E14                     	;# 
  2100  0E15                     	;# 
  2101  0E16                     	;# 
  2102  0E17                     	;# 
  2103  0E18                     	;# 
  2104  0E19                     	;# 
  2105  0E1A                     	;# 
  2106  0E1B                     	;# 
  2107  0E1C                     	;# 
  2108  0E1D                     	;# 
  2109  0E1E                     	;# 
  2110  0E1F                     	;# 
  2111  0E20                     	;# 
  2112  0E21                     	;# 
  2113  0E22                     	;# 
  2114  0E24                     	;# 
  2115  0E25                     	;# 
  2116  0E28                     	;# 
  2117  0E29                     	;# 
  2118  0E2A                     	;# 
  2119  0E2B                     	;# 
  2120  0E2C                     	;# 
  2121  0E2D                     	;# 
  2122  0E2E                     	;# 
  2123  0E2F                     	;# 
  2124  0E90                     	;# 
  2125  0E91                     	;# 
  2126  0E92                     	;# 
  2127  0E94                     	;# 
  2128  0E95                     	;# 
  2129  0E9C                     	;# 
  2130  0E9D                     	;# 
  2131  0E9E                     	;# 
  2132  0E9F                     	;# 
  2133  0EA0                     	;# 
  2134  0EA1                     	;# 
  2135  0EA2                     	;# 
  2136  0EA3                     	;# 
  2137  0EA4                     	;# 
  2138  0EA5                     	;# 
  2139  0EA6                     	;# 
  2140  0EA7                     	;# 
  2141  0F0F                     	;# 
  2142  0F10                     	;# 
  2143  0F11                     	;# 
  2144  0F12                     	;# 
  2145  0F13                     	;# 
  2146  0F14                     	;# 
  2147  0F15                     	;# 
  2148  0F16                     	;# 
  2149  0F17                     	;# 
  2150  0F18                     	;# 
  2151  0F19                     	;# 
  2152  0F1A                     	;# 
  2153  0F1B                     	;# 
  2154  0F1C                     	;# 
  2155  0F1D                     	;# 
  2156  0F1E                     	;# 
  2157  0F1F                     	;# 
  2158  0F20                     	;# 
  2159  0F21                     	;# 
  2160  0F22                     	;# 
  2161  0F23                     	;# 
  2162  0F24                     	;# 
  2163  0F25                     	;# 
  2164  0F26                     	;# 
  2165  0F27                     	;# 
  2166  0F28                     	;# 
  2167  0F29                     	;# 
  2168  0F2A                     	;# 
  2169  0F2B                     	;# 
  2170  0F2C                     	;# 
  2171  0F2D                     	;# 
  2172  0F2E                     	;# 
  2173  0F2F                     	;# 
  2174  0F30                     	;# 
  2175  0F31                     	;# 
  2176  0F32                     	;# 
  2177  0F33                     	;# 
  2178  0F34                     	;# 
  2179  0F35                     	;# 
  2180  0F36                     	;# 
  2181  0F37                     	;# 
  2182  0FE4                     	;# 
  2183  0FE5                     	;# 
  2184  0FE6                     	;# 
  2185  0FE7                     	;# 
  2186  0FE8                     	;# 
  2187  0FE9                     	;# 
  2188  0FEA                     	;# 
  2189  0FEB                     	;# 
  2190  0FED                     	;# 
  2191  0FEE                     	;# 
  2192  0FEF                     	;# 
  2193  0000                     	;# 
  2194  0001                     	;# 
  2195  0002                     	;# 
  2196  0003                     	;# 
  2197  0004                     	;# 
  2198  0005                     	;# 
  2199  0006                     	;# 
  2200  0007                     	;# 
  2201  0008                     	;# 
  2202  0009                     	;# 
  2203  000A                     	;# 
  2204  000B                     	;# 
  2205  000C                     	;# 
  2206  000D                     	;# 
  2207  000E                     	;# 
  2208  0010                     	;# 
  2209  0011                     	;# 
  2210  0012                     	;# 
  2211  0013                     	;# 
  2212  0014                     	;# 
  2213  0015                     	;# 
  2214  0015                     	;# 
  2215  0016                     	;# 
  2216  0016                     	;# 
  2217  0017                     	;# 
  2218  0018                     	;# 
  2219  0019                     	;# 
  2220  0019                     	;# 
  2221  001A                     	;# 
  2222  001B                     	;# 
  2223  001C                     	;# 
  2224  001D                     	;# 
  2225  001E                     	;# 
  2226  001F                     	;# 
  2227  008C                     	;# 
  2228  008D                     	;# 
  2229  008E                     	;# 
  2230  0090                     	;# 
  2231  0091                     	;# 
  2232  0092                     	;# 
  2233  0093                     	;# 
  2234  0094                     	;# 
  2235  0097                     	;# 
  2236  009B                     	;# 
  2237  009B                     	;# 
  2238  009C                     	;# 
  2239  009D                     	;# 
  2240  009E                     	;# 
  2241  009F                     	;# 
  2242  010C                     	;# 
  2243  010D                     	;# 
  2244  010E                     	;# 
  2245  0111                     	;# 
  2246  0112                     	;# 
  2247  0113                     	;# 
  2248  0114                     	;# 
  2249  0115                     	;# 
  2250  0116                     	;# 
  2251  0117                     	;# 
  2252  0118                     	;# 
  2253  0119                     	;# 
  2254  018C                     	;# 
  2255  018D                     	;# 
  2256  018E                     	;# 
  2257  0197                     	;# 
  2258  0199                     	;# 
  2259  0199                     	;# 
  2260  0199                     	;# 
  2261  019A                     	;# 
  2262  019A                     	;# 
  2263  019A                     	;# 
  2264  019B                     	;# 
  2265  019B                     	;# 
  2266  019B                     	;# 
  2267  019B                     	;# 
  2268  019B                     	;# 
  2269  019C                     	;# 
  2270  019C                     	;# 
  2271  019C                     	;# 
  2272  019D                     	;# 
  2273  019D                     	;# 
  2274  019D                     	;# 
  2275  019E                     	;# 
  2276  019E                     	;# 
  2277  019E                     	;# 
  2278  019F                     	;# 
  2279  019F                     	;# 
  2280  019F                     	;# 
  2281  019F                     	;# 
  2282  019F                     	;# 
  2283  020C                     	;# 
  2284  020D                     	;# 
  2285  020E                     	;# 
  2286  0211                     	;# 
  2287  0211                     	;# 
  2288  0212                     	;# 
  2289  0212                     	;# 
  2290  0213                     	;# 
  2291  0213                     	;# 
  2292  0214                     	;# 
  2293  0214                     	;# 
  2294  0215                     	;# 
  2295  0215                     	;# 
  2296  0215                     	;# 
  2297  0215                     	;# 
  2298  0216                     	;# 
  2299  0216                     	;# 
  2300  0217                     	;# 
  2301  0217                     	;# 
  2302  0219                     	;# 
  2303  021A                     	;# 
  2304  021B                     	;# 
  2305  021C                     	;# 
  2306  021D                     	;# 
  2307  021D                     	;# 
  2308  021E                     	;# 
  2309  021F                     	;# 
  2310  028C                     	;# 
  2311  028D                     	;# 
  2312  028E                     	;# 
  2313  0291                     	;# 
  2314  0291                     	;# 
  2315  0292                     	;# 
  2316  0293                     	;# 
  2317  0294                     	;# 
  2318  0295                     	;# 
  2319  0295                     	;# 
  2320  0296                     	;# 
  2321  0297                     	;# 
  2322  0298                     	;# 
  2323  029F                     	;# 
  2324  030C                     	;# 
  2325  030D                     	;# 
  2326  030E                     	;# 
  2327  0311                     	;# 
  2328  0311                     	;# 
  2329  0312                     	;# 
  2330  0313                     	;# 
  2331  0314                     	;# 
  2332  0315                     	;# 
  2333  0315                     	;# 
  2334  0316                     	;# 
  2335  0317                     	;# 
  2336  0318                     	;# 
  2337  038C                     	;# 
  2338  038D                     	;# 
  2339  038E                     	;# 
  2340  0391                     	;# 
  2341  0392                     	;# 
  2342  0393                     	;# 
  2343  0394                     	;# 
  2344  0395                     	;# 
  2345  0396                     	;# 
  2346  0397                     	;# 
  2347  0398                     	;# 
  2348  0399                     	;# 
  2349  039A                     	;# 
  2350  039C                     	;# 
  2351  039D                     	;# 
  2352  039E                     	;# 
  2353  039F                     	;# 
  2354  0411                     	;# 
  2355  0411                     	;# 
  2356  0412                     	;# 
  2357  0413                     	;# 
  2358  0414                     	;# 
  2359  0415                     	;# 
  2360  0416                     	;# 
  2361  0417                     	;# 
  2362  0418                     	;# 
  2363  0418                     	;# 
  2364  0419                     	;# 
  2365  041A                     	;# 
  2366  041B                     	;# 
  2367  041C                     	;# 
  2368  041D                     	;# 
  2369  041E                     	;# 
  2370  041F                     	;# 
  2371  0498                     	;# 
  2372  0498                     	;# 
  2373  0499                     	;# 
  2374  049A                     	;# 
  2375  049B                     	;# 
  2376  049B                     	;# 
  2377  049C                     	;# 
  2378  049D                     	;# 
  2379  049E                     	;# 
  2380  049F                     	;# 
  2381  0617                     	;# 
  2382  0618                     	;# 
  2383  0619                     	;# 
  2384  0619                     	;# 
  2385  061A                     	;# 
  2386  061B                     	;# 
  2387  061C                     	;# 
  2388  061C                     	;# 
  2389  061F                     	;# 
  2390  0691                     	;# 
  2391  0692                     	;# 
  2392  0693                     	;# 
  2393  0694                     	;# 
  2394  0695                     	;# 
  2395  0696                     	;# 
  2396  0697                     	;# 
  2397  0698                     	;# 
  2398  0699                     	;# 
  2399  0711                     	;# 
  2400  0712                     	;# 
  2401  0713                     	;# 
  2402  0714                     	;# 
  2403  0715                     	;# 
  2404  0716                     	;# 
  2405  0717                     	;# 
  2406  0718                     	;# 
  2407  0719                     	;# 
  2408  0891                     	;# 
  2409  0891                     	;# 
  2410  0891                     	;# 
  2411  0891                     	;# 
  2412  0891                     	;# 
  2413  0891                     	;# 
  2414  0892                     	;# 
  2415  0892                     	;# 
  2416  0892                     	;# 
  2417  0893                     	;# 
  2418  0893                     	;# 
  2419  0893                     	;# 
  2420  0893                     	;# 
  2421  0893                     	;# 
  2422  0893                     	;# 
  2423  0894                     	;# 
  2424  0894                     	;# 
  2425  0894                     	;# 
  2426  0895                     	;# 
  2427  0895                     	;# 
  2428  0895                     	;# 
  2429  0896                     	;# 
  2430  0896                     	;# 
  2431  0896                     	;# 
  2432  089B                     	;# 
  2433  0911                     	;# 
  2434  0912                     	;# 
  2435  0913                     	;# 
  2436  0914                     	;# 
  2437  0915                     	;# 
  2438  0916                     	;# 
  2439  0918                     	;# 
  2440  0919                     	;# 
  2441  091A                     	;# 
  2442  091B                     	;# 
  2443  091C                     	;# 
  2444  091D                     	;# 
  2445  091E                     	;# 
  2446  091F                     	;# 
  2447  0E0F                     	;# 
  2448  0E10                     	;# 
  2449  0E11                     	;# 
  2450  0E12                     	;# 
  2451  0E13                     	;# 
  2452  0E14                     	;# 
  2453  0E15                     	;# 
  2454  0E16                     	;# 
  2455  0E17                     	;# 
  2456  0E18                     	;# 
  2457  0E19                     	;# 
  2458  0E1A                     	;# 
  2459  0E1B                     	;# 
  2460  0E1C                     	;# 
  2461  0E1D                     	;# 
  2462  0E1E                     	;# 
  2463  0E1F                     	;# 
  2464  0E20                     	;# 
  2465  0E21                     	;# 
  2466  0E22                     	;# 
  2467  0E24                     	;# 
  2468  0E25                     	;# 
  2469  0E28                     	;# 
  2470  0E29                     	;# 
  2471  0E2A                     	;# 
  2472  0E2B                     	;# 
  2473  0E2C                     	;# 
  2474  0E2D                     	;# 
  2475  0E2E                     	;# 
  2476  0E2F                     	;# 
  2477  0E90                     	;# 
  2478  0E91                     	;# 
  2479  0E92                     	;# 
  2480  0E94                     	;# 
  2481  0E95                     	;# 
  2482  0E9C                     	;# 
  2483  0E9D                     	;# 
  2484  0E9E                     	;# 
  2485  0E9F                     	;# 
  2486  0EA0                     	;# 
  2487  0EA1                     	;# 
  2488  0EA2                     	;# 
  2489  0EA3                     	;# 
  2490  0EA4                     	;# 
  2491  0EA5                     	;# 
  2492  0EA6                     	;# 
  2493  0EA7                     	;# 
  2494  0F0F                     	;# 
  2495  0F10                     	;# 
  2496  0F11                     	;# 
  2497  0F12                     	;# 
  2498  0F13                     	;# 
  2499  0F14                     	;# 
  2500  0F15                     	;# 
  2501  0F16                     	;# 
  2502  0F17                     	;# 
  2503  0F18                     	;# 
  2504  0F19                     	;# 
  2505  0F1A                     	;# 
  2506  0F1B                     	;# 
  2507  0F1C                     	;# 
  2508  0F1D                     	;# 
  2509  0F1E                     	;# 
  2510  0F1F                     	;# 
  2511  0F20                     	;# 
  2512  0F21                     	;# 
  2513  0F22                     	;# 
  2514  0F23                     	;# 
  2515  0F24                     	;# 
  2516  0F25                     	;# 
  2517  0F26                     	;# 
  2518  0F27                     	;# 
  2519  0F28                     	;# 
  2520  0F29                     	;# 
  2521  0F2A                     	;# 
  2522  0F2B                     	;# 
  2523  0F2C                     	;# 
  2524  0F2D                     	;# 
  2525  0F2E                     	;# 
  2526  0F2F                     	;# 
  2527  0F30                     	;# 
  2528  0F31                     	;# 
  2529  0F32                     	;# 
  2530  0F33                     	;# 
  2531  0F34                     	;# 
  2532  0F35                     	;# 
  2533  0F36                     	;# 
  2534  0F37                     	;# 
  2535  0FE4                     	;# 
  2536  0FE5                     	;# 
  2537  0FE6                     	;# 
  2538  0FE7                     	;# 
  2539  0FE8                     	;# 
  2540  0FE9                     	;# 
  2541  0FEA                     	;# 
  2542  0FEB                     	;# 
  2543  0FED                     	;# 
  2544  0FEE                     	;# 
  2545  0FEF                     	;# 
  2546  0000                     	;# 
  2547  0001                     	;# 
  2548  0002                     	;# 
  2549  0003                     	;# 
  2550  0004                     	;# 
  2551  0005                     	;# 
  2552  0006                     	;# 
  2553  0007                     	;# 
  2554  0008                     	;# 
  2555  0009                     	;# 
  2556  000A                     	;# 
  2557  000B                     	;# 
  2558  000C                     	;# 
  2559  000D                     	;# 
  2560  000E                     	;# 
  2561  0010                     	;# 
  2562  0011                     	;# 
  2563  0012                     	;# 
  2564  0013                     	;# 
  2565  0014                     	;# 
  2566  0015                     	;# 
  2567  0015                     	;# 
  2568  0016                     	;# 
  2569  0016                     	;# 
  2570  0017                     	;# 
  2571  0018                     	;# 
  2572  0019                     	;# 
  2573  0019                     	;# 
  2574  001A                     	;# 
  2575  001B                     	;# 
  2576  001C                     	;# 
  2577  001D                     	;# 
  2578  001E                     	;# 
  2579  001F                     	;# 
  2580  008C                     	;# 
  2581  008D                     	;# 
  2582  008E                     	;# 
  2583  0090                     	;# 
  2584  0091                     	;# 
  2585  0092                     	;# 
  2586  0093                     	;# 
  2587  0094                     	;# 
  2588  0097                     	;# 
  2589  009B                     	;# 
  2590  009B                     	;# 
  2591  009C                     	;# 
  2592  009D                     	;# 
  2593  009E                     	;# 
  2594  009F                     	;# 
  2595  010C                     	;# 
  2596  010D                     	;# 
  2597  010E                     	;# 
  2598  0111                     	;# 
  2599  0112                     	;# 
  2600  0113                     	;# 
  2601  0114                     	;# 
  2602  0115                     	;# 
  2603  0116                     	;# 
  2604  0117                     	;# 
  2605  0118                     	;# 
  2606  0119                     	;# 
  2607  018C                     	;# 
  2608  018D                     	;# 
  2609  018E                     	;# 
  2610  0197                     	;# 
  2611  0199                     	;# 
  2612  0199                     	;# 
  2613  0199                     	;# 
  2614  019A                     	;# 
  2615  019A                     	;# 
  2616  019A                     	;# 
  2617  019B                     	;# 
  2618  019B                     	;# 
  2619  019B                     	;# 
  2620  019B                     	;# 
  2621  019B                     	;# 
  2622  019C                     	;# 
  2623  019C                     	;# 
  2624  019C                     	;# 
  2625  019D                     	;# 
  2626  019D                     	;# 
  2627  019D                     	;# 
  2628  019E                     	;# 
  2629  019E                     	;# 
  2630  019E                     	;# 
  2631  019F                     	;# 
  2632  019F                     	;# 
  2633  019F                     	;# 
  2634  019F                     	;# 
  2635  019F                     	;# 
  2636  020C                     	;# 
  2637  020D                     	;# 
  2638  020E                     	;# 
  2639  0211                     	;# 
  2640  0211                     	;# 
  2641  0212                     	;# 
  2642  0212                     	;# 
  2643  0213                     	;# 
  2644  0213                     	;# 
  2645  0214                     	;# 
  2646  0214                     	;# 
  2647  0215                     	;# 
  2648  0215                     	;# 
  2649  0215                     	;# 
  2650  0215                     	;# 
  2651  0216                     	;# 
  2652  0216                     	;# 
  2653  0217                     	;# 
  2654  0217                     	;# 
  2655  0219                     	;# 
  2656  021A                     	;# 
  2657  021B                     	;# 
  2658  021C                     	;# 
  2659  021D                     	;# 
  2660  021D                     	;# 
  2661  021E                     	;# 
  2662  021F                     	;# 
  2663  028C                     	;# 
  2664  028D                     	;# 
  2665  028E                     	;# 
  2666  0291                     	;# 
  2667  0291                     	;# 
  2668  0292                     	;# 
  2669  0293                     	;# 
  2670  0294                     	;# 
  2671  0295                     	;# 
  2672  0295                     	;# 
  2673  0296                     	;# 
  2674  0297                     	;# 
  2675  0298                     	;# 
  2676  029F                     	;# 
  2677  030C                     	;# 
  2678  030D                     	;# 
  2679  030E                     	;# 
  2680  0311                     	;# 
  2681  0311                     	;# 
  2682  0312                     	;# 
  2683  0313                     	;# 
  2684  0314                     	;# 
  2685  0315                     	;# 
  2686  0315                     	;# 
  2687  0316                     	;# 
  2688  0317                     	;# 
  2689  0318                     	;# 
  2690  038C                     	;# 
  2691  038D                     	;# 
  2692  038E                     	;# 
  2693  0391                     	;# 
  2694  0392                     	;# 
  2695  0393                     	;# 
  2696  0394                     	;# 
  2697  0395                     	;# 
  2698  0396                     	;# 
  2699  0397                     	;# 
  2700  0398                     	;# 
  2701  0399                     	;# 
  2702  039A                     	;# 
  2703  039C                     	;# 
  2704  039D                     	;# 
  2705  039E                     	;# 
  2706  039F                     	;# 
  2707  0411                     	;# 
  2708  0411                     	;# 
  2709  0412                     	;# 
  2710  0413                     	;# 
  2711  0414                     	;# 
  2712  0415                     	;# 
  2713  0416                     	;# 
  2714  0417                     	;# 
  2715  0418                     	;# 
  2716  0418                     	;# 
  2717  0419                     	;# 
  2718  041A                     	;# 
  2719  041B                     	;# 
  2720  041C                     	;# 
  2721  041D                     	;# 
  2722  041E                     	;# 
  2723  041F                     	;# 
  2724  0498                     	;# 
  2725  0498                     	;# 
  2726  0499                     	;# 
  2727  049A                     	;# 
  2728  049B                     	;# 
  2729  049B                     	;# 
  2730  049C                     	;# 
  2731  049D                     	;# 
  2732  049E                     	;# 
  2733  049F                     	;# 
  2734  0617                     	;# 
  2735  0618                     	;# 
  2736  0619                     	;# 
  2737  0619                     	;# 
  2738  061A                     	;# 
  2739  061B                     	;# 
  2740  061C                     	;# 
  2741  061C                     	;# 
  2742  061F                     	;# 
  2743  0691                     	;# 
  2744  0692                     	;# 
  2745  0693                     	;# 
  2746  0694                     	;# 
  2747  0695                     	;# 
  2748  0696                     	;# 
  2749  0697                     	;# 
  2750  0698                     	;# 
  2751  0699                     	;# 
  2752  0711                     	;# 
  2753  0712                     	;# 
  2754  0713                     	;# 
  2755  0714                     	;# 
  2756  0715                     	;# 
  2757  0716                     	;# 
  2758  0717                     	;# 
  2759  0718                     	;# 
  2760  0719                     	;# 
  2761  0891                     	;# 
  2762  0891                     	;# 
  2763  0891                     	;# 
  2764  0891                     	;# 
  2765  0891                     	;# 
  2766  0891                     	;# 
  2767  0892                     	;# 
  2768  0892                     	;# 
  2769  0892                     	;# 
  2770  0893                     	;# 
  2771  0893                     	;# 
  2772  0893                     	;# 
  2773  0893                     	;# 
  2774  0893                     	;# 
  2775  0893                     	;# 
  2776  0894                     	;# 
  2777  0894                     	;# 
  2778  0894                     	;# 
  2779  0895                     	;# 
  2780  0895                     	;# 
  2781  0895                     	;# 
  2782  0896                     	;# 
  2783  0896                     	;# 
  2784  0896                     	;# 
  2785  089B                     	;# 
  2786  0911                     	;# 
  2787  0912                     	;# 
  2788  0913                     	;# 
  2789  0914                     	;# 
  2790  0915                     	;# 
  2791  0916                     	;# 
  2792  0918                     	;# 
  2793  0919                     	;# 
  2794  091A                     	;# 
  2795  091B                     	;# 
  2796  091C                     	;# 
  2797  091D                     	;# 
  2798  091E                     	;# 
  2799  091F                     	;# 
  2800  0E0F                     	;# 
  2801  0E10                     	;# 
  2802  0E11                     	;# 
  2803  0E12                     	;# 
  2804  0E13                     	;# 
  2805  0E14                     	;# 
  2806  0E15                     	;# 
  2807  0E16                     	;# 
  2808  0E17                     	;# 
  2809  0E18                     	;# 
  2810  0E19                     	;# 
  2811  0E1A                     	;# 
  2812  0E1B                     	;# 
  2813  0E1C                     	;# 
  2814  0E1D                     	;# 
  2815  0E1E                     	;# 
  2816  0E1F                     	;# 
  2817  0E20                     	;# 
  2818  0E21                     	;# 
  2819  0E22                     	;# 
  2820  0E24                     	;# 
  2821  0E25                     	;# 
  2822  0E28                     	;# 
  2823  0E29                     	;# 
  2824  0E2A                     	;# 
  2825  0E2B                     	;# 
  2826  0E2C                     	;# 
  2827  0E2D                     	;# 
  2828  0E2E                     	;# 
  2829  0E2F                     	;# 
  2830  0E90                     	;# 
  2831  0E91                     	;# 
  2832  0E92                     	;# 
  2833  0E94                     	;# 
  2834  0E95                     	;# 
  2835  0E9C                     	;# 
  2836  0E9D                     	;# 
  2837  0E9E                     	;# 
  2838  0E9F                     	;# 
  2839  0EA0                     	;# 
  2840  0EA1                     	;# 
  2841  0EA2                     	;# 
  2842  0EA3                     	;# 
  2843  0EA4                     	;# 
  2844  0EA5                     	;# 
  2845  0EA6                     	;# 
  2846  0EA7                     	;# 
  2847  0F0F                     	;# 
  2848  0F10                     	;# 
  2849  0F11                     	;# 
  2850  0F12                     	;# 
  2851  0F13                     	;# 
  2852  0F14                     	;# 
  2853  0F15                     	;# 
  2854  0F16                     	;# 
  2855  0F17                     	;# 
  2856  0F18                     	;# 
  2857  0F19                     	;# 
  2858  0F1A                     	;# 
  2859  0F1B                     	;# 
  2860  0F1C                     	;# 
  2861  0F1D                     	;# 
  2862  0F1E                     	;# 
  2863  0F1F                     	;# 
  2864  0F20                     	;# 
  2865  0F21                     	;# 
  2866  0F22                     	;# 
  2867  0F23                     	;# 
  2868  0F24                     	;# 
  2869  0F25                     	;# 
  2870  0F26                     	;# 
  2871  0F27                     	;# 
  2872  0F28                     	;# 
  2873  0F29                     	;# 
  2874  0F2A                     	;# 
  2875  0F2B                     	;# 
  2876  0F2C                     	;# 
  2877  0F2D                     	;# 
  2878  0F2E                     	;# 
  2879  0F2F                     	;# 
  2880  0F30                     	;# 
  2881  0F31                     	;# 
  2882  0F32                     	;# 
  2883  0F33                     	;# 
  2884  0F34                     	;# 
  2885  0F35                     	;# 
  2886  0F36                     	;# 
  2887  0F37                     	;# 
  2888  0FE4                     	;# 
  2889  0FE5                     	;# 
  2890  0FE6                     	;# 
  2891  0FE7                     	;# 
  2892  0FE8                     	;# 
  2893  0FE9                     	;# 
  2894  0FEA                     	;# 
  2895  0FEB                     	;# 
  2896  0FED                     	;# 
  2897  0FEE                     	;# 
  2898  0FEF                     	;# 
  2899  0000                     	;# 
  2900  0001                     	;# 
  2901  0002                     	;# 
  2902  0003                     	;# 
  2903  0004                     	;# 
  2904  0005                     	;# 
  2905  0006                     	;# 
  2906  0007                     	;# 
  2907  0008                     	;# 
  2908  0009                     	;# 
  2909  000A                     	;# 
  2910  000B                     	;# 
  2911  000C                     	;# 
  2912  000D                     	;# 
  2913  000E                     	;# 
  2914  0010                     	;# 
  2915  0011                     	;# 
  2916  0012                     	;# 
  2917  0013                     	;# 
  2918  0014                     	;# 
  2919  0015                     	;# 
  2920  0015                     	;# 
  2921  0016                     	;# 
  2922  0016                     	;# 
  2923  0017                     	;# 
  2924  0018                     	;# 
  2925  0019                     	;# 
  2926  0019                     	;# 
  2927  001A                     	;# 
  2928  001B                     	;# 
  2929  001C                     	;# 
  2930  001D                     	;# 
  2931  001E                     	;# 
  2932  001F                     	;# 
  2933  008C                     	;# 
  2934  008D                     	;# 
  2935  008E                     	;# 
  2936  0090                     	;# 
  2937  0091                     	;# 
  2938  0092                     	;# 
  2939  0093                     	;# 
  2940  0094                     	;# 
  2941  0097                     	;# 
  2942  009B                     	;# 
  2943  009B                     	;# 
  2944  009C                     	;# 
  2945  009D                     	;# 
  2946  009E                     	;# 
  2947  009F                     	;# 
  2948  010C                     	;# 
  2949  010D                     	;# 
  2950  010E                     	;# 
  2951  0111                     	;# 
  2952  0112                     	;# 
  2953  0113                     	;# 
  2954  0114                     	;# 
  2955  0115                     	;# 
  2956  0116                     	;# 
  2957  0117                     	;# 
  2958  0118                     	;# 
  2959  0119                     	;# 
  2960  018C                     	;# 
  2961  018D                     	;# 
  2962  018E                     	;# 
  2963  0197                     	;# 
  2964  0199                     	;# 
  2965  0199                     	;# 
  2966  0199                     	;# 
  2967  019A                     	;# 
  2968  019A                     	;# 
  2969  019A                     	;# 
  2970  019B                     	;# 
  2971  019B                     	;# 
  2972  019B                     	;# 
  2973  019B                     	;# 
  2974  019B                     	;# 
  2975  019C                     	;# 
  2976  019C                     	;# 
  2977  019C                     	;# 
  2978  019D                     	;# 
  2979  019D                     	;# 
  2980  019D                     	;# 
  2981  019E                     	;# 
  2982  019E                     	;# 
  2983  019E                     	;# 
  2984  019F                     	;# 
  2985  019F                     	;# 
  2986  019F                     	;# 
  2987  019F                     	;# 
  2988  019F                     	;# 
  2989  020C                     	;# 
  2990  020D                     	;# 
  2991  020E                     	;# 
  2992  0211                     	;# 
  2993  0211                     	;# 
  2994  0212                     	;# 
  2995  0212                     	;# 
  2996  0213                     	;# 
  2997  0213                     	;# 
  2998  0214                     	;# 
  2999  0214                     	;# 
  3000  0215                     	;# 
  3001  0215                     	;# 
  3002  0215                     	;# 
  3003  0215                     	;# 
  3004  0216                     	;# 
  3005  0216                     	;# 
  3006  0217                     	;# 
  3007  0217                     	;# 
  3008  0219                     	;# 
  3009  021A                     	;# 
  3010  021B                     	;# 
  3011  021C                     	;# 
  3012  021D                     	;# 
  3013  021D                     	;# 
  3014  021E                     	;# 
  3015  021F                     	;# 
  3016  028C                     	;# 
  3017  028D                     	;# 
  3018  028E                     	;# 
  3019  0291                     	;# 
  3020  0291                     	;# 
  3021  0292                     	;# 
  3022  0293                     	;# 
  3023  0294                     	;# 
  3024  0295                     	;# 
  3025  0295                     	;# 
  3026  0296                     	;# 
  3027  0297                     	;# 
  3028  0298                     	;# 
  3029  029F                     	;# 
  3030  030C                     	;# 
  3031  030D                     	;# 
  3032  030E                     	;# 
  3033  0311                     	;# 
  3034  0311                     	;# 
  3035  0312                     	;# 
  3036  0313                     	;# 
  3037  0314                     	;# 
  3038  0315                     	;# 
  3039  0315                     	;# 
  3040  0316                     	;# 
  3041  0317                     	;# 
  3042  0318                     	;# 
  3043  038C                     	;# 
  3044  038D                     	;# 
  3045  038E                     	;# 
  3046  0391                     	;# 
  3047  0392                     	;# 
  3048  0393                     	;# 
  3049  0394                     	;# 
  3050  0395                     	;# 
  3051  0396                     	;# 
  3052  0397                     	;# 
  3053  0398                     	;# 
  3054  0399                     	;# 
  3055  039A                     	;# 
  3056  039C                     	;# 
  3057  039D                     	;# 
  3058  039E                     	;# 
  3059  039F                     	;# 
  3060  0411                     	;# 
  3061  0411                     	;# 
  3062  0412                     	;# 
  3063  0413                     	;# 
  3064  0414                     	;# 
  3065  0415                     	;# 
  3066  0416                     	;# 
  3067  0417                     	;# 
  3068  0418                     	;# 
  3069  0418                     	;# 
  3070  0419                     	;# 
  3071  041A                     	;# 
  3072  041B                     	;# 
  3073  041C                     	;# 
  3074  041D                     	;# 
  3075  041E                     	;# 
  3076  041F                     	;# 
  3077  0498                     	;# 
  3078  0498                     	;# 
  3079  0499                     	;# 
  3080  049A                     	;# 
  3081  049B                     	;# 
  3082  049B                     	;# 
  3083  049C                     	;# 
  3084  049D                     	;# 
  3085  049E                     	;# 
  3086  049F                     	;# 
  3087  0617                     	;# 
  3088  0618                     	;# 
  3089  0619                     	;# 
  3090  0619                     	;# 
  3091  061A                     	;# 
  3092  061B                     	;# 
  3093  061C                     	;# 
  3094  061C                     	;# 
  3095  061F                     	;# 
  3096  0691                     	;# 
  3097  0692                     	;# 
  3098  0693                     	;# 
  3099  0694                     	;# 
  3100  0695                     	;# 
  3101  0696                     	;# 
  3102  0697                     	;# 
  3103  0698                     	;# 
  3104  0699                     	;# 
  3105  0711                     	;# 
  3106  0712                     	;# 
  3107  0713                     	;# 
  3108  0714                     	;# 
  3109  0715                     	;# 
  3110  0716                     	;# 
  3111  0717                     	;# 
  3112  0718                     	;# 
  3113  0719                     	;# 
  3114  0891                     	;# 
  3115  0891                     	;# 
  3116  0891                     	;# 
  3117  0891                     	;# 
  3118  0891                     	;# 
  3119  0891                     	;# 
  3120  0892                     	;# 
  3121  0892                     	;# 
  3122  0892                     	;# 
  3123  0893                     	;# 
  3124  0893                     	;# 
  3125  0893                     	;# 
  3126  0893                     	;# 
  3127  0893                     	;# 
  3128  0893                     	;# 
  3129  0894                     	;# 
  3130  0894                     	;# 
  3131  0894                     	;# 
  3132  0895                     	;# 
  3133  0895                     	;# 
  3134  0895                     	;# 
  3135  0896                     	;# 
  3136  0896                     	;# 
  3137  0896                     	;# 
  3138  089B                     	;# 
  3139  0911                     	;# 
  3140  0912                     	;# 
  3141  0913                     	;# 
  3142  0914                     	;# 
  3143  0915                     	;# 
  3144  0916                     	;# 
  3145  0918                     	;# 
  3146  0919                     	;# 
  3147  091A                     	;# 
  3148  091B                     	;# 
  3149  091C                     	;# 
  3150  091D                     	;# 
  3151  091E                     	;# 
  3152  091F                     	;# 
  3153  0E0F                     	;# 
  3154  0E10                     	;# 
  3155  0E11                     	;# 
  3156  0E12                     	;# 
  3157  0E13                     	;# 
  3158  0E14                     	;# 
  3159  0E15                     	;# 
  3160  0E16                     	;# 
  3161  0E17                     	;# 
  3162  0E18                     	;# 
  3163  0E19                     	;# 
  3164  0E1A                     	;# 
  3165  0E1B                     	;# 
  3166  0E1C                     	;# 
  3167  0E1D                     	;# 
  3168  0E1E                     	;# 
  3169  0E1F                     	;# 
  3170  0E20                     	;# 
  3171  0E21                     	;# 
  3172  0E22                     	;# 
  3173  0E24                     	;# 
  3174  0E25                     	;# 
  3175  0E28                     	;# 
  3176  0E29                     	;# 
  3177  0E2A                     	;# 
  3178  0E2B                     	;# 
  3179  0E2C                     	;# 
  3180  0E2D                     	;# 
  3181  0E2E                     	;# 
  3182  0E2F                     	;# 
  3183  0E90                     	;# 
  3184  0E91                     	;# 
  3185  0E92                     	;# 
  3186  0E94                     	;# 
  3187  0E95                     	;# 
  3188  0E9C                     	;# 
  3189  0E9D                     	;# 
  3190  0E9E                     	;# 
  3191  0E9F                     	;# 
  3192  0EA0                     	;# 
  3193  0EA1                     	;# 
  3194  0EA2                     	;# 
  3195  0EA3                     	;# 
  3196  0EA4                     	;# 
  3197  0EA5                     	;# 
  3198  0EA6                     	;# 
  3199  0EA7                     	;# 
  3200  0F0F                     	;# 
  3201  0F10                     	;# 
  3202  0F11                     	;# 
  3203  0F12                     	;# 
  3204  0F13                     	;# 
  3205  0F14                     	;# 
  3206  0F15                     	;# 
  3207  0F16                     	;# 
  3208  0F17                     	;# 
  3209  0F18                     	;# 
  3210  0F19                     	;# 
  3211  0F1A                     	;# 
  3212  0F1B                     	;# 
  3213  0F1C                     	;# 
  3214  0F1D                     	;# 
  3215  0F1E                     	;# 
  3216  0F1F                     	;# 
  3217  0F20                     	;# 
  3218  0F21                     	;# 
  3219  0F22                     	;# 
  3220  0F23                     	;# 
  3221  0F24                     	;# 
  3222  0F25                     	;# 
  3223  0F26                     	;# 
  3224  0F27                     	;# 
  3225  0F28                     	;# 
  3226  0F29                     	;# 
  3227  0F2A                     	;# 
  3228  0F2B                     	;# 
  3229  0F2C                     	;# 
  3230  0F2D                     	;# 
  3231  0F2E                     	;# 
  3232  0F2F                     	;# 
  3233  0F30                     	;# 
  3234  0F31                     	;# 
  3235  0F32                     	;# 
  3236  0F33                     	;# 
  3237  0F34                     	;# 
  3238  0F35                     	;# 
  3239  0F36                     	;# 
  3240  0F37                     	;# 
  3241  0FE4                     	;# 
  3242  0FE5                     	;# 
  3243  0FE6                     	;# 
  3244  0FE7                     	;# 
  3245  0FE8                     	;# 
  3246  0FE9                     	;# 
  3247  0FEA                     	;# 
  3248  0FEB                     	;# 
  3249  0FED                     	;# 
  3250  0FEE                     	;# 
  3251  0FEF                     	;# 
  3252  0000                     	;# 
  3253  0001                     	;# 
  3254  0002                     	;# 
  3255  0003                     	;# 
  3256  0004                     	;# 
  3257  0005                     	;# 
  3258  0006                     	;# 
  3259  0007                     	;# 
  3260  0008                     	;# 
  3261  0009                     	;# 
  3262  000A                     	;# 
  3263  000B                     	;# 
  3264  000C                     	;# 
  3265  000D                     	;# 
  3266  000E                     	;# 
  3267  0010                     	;# 
  3268  0011                     	;# 
  3269  0012                     	;# 
  3270  0013                     	;# 
  3271  0014                     	;# 
  3272  0015                     	;# 
  3273  0015                     	;# 
  3274  0016                     	;# 
  3275  0016                     	;# 
  3276  0017                     	;# 
  3277  0018                     	;# 
  3278  0019                     	;# 
  3279  0019                     	;# 
  3280  001A                     	;# 
  3281  001B                     	;# 
  3282  001C                     	;# 
  3283  001D                     	;# 
  3284  001E                     	;# 
  3285  001F                     	;# 
  3286  008C                     	;# 
  3287  008D                     	;# 
  3288  008E                     	;# 
  3289  0090                     	;# 
  3290  0091                     	;# 
  3291  0092                     	;# 
  3292  0093                     	;# 
  3293  0094                     	;# 
  3294  0097                     	;# 
  3295  009B                     	;# 
  3296  009B                     	;# 
  3297  009C                     	;# 
  3298  009D                     	;# 
  3299  009E                     	;# 
  3300  009F                     	;# 
  3301  010C                     	;# 
  3302  010D                     	;# 
  3303  010E                     	;# 
  3304  0111                     	;# 
  3305  0112                     	;# 
  3306  0113                     	;# 
  3307  0114                     	;# 
  3308  0115                     	;# 
  3309  0116                     	;# 
  3310  0117                     	;# 
  3311  0118                     	;# 
  3312  0119                     	;# 
  3313  018C                     	;# 
  3314  018D                     	;# 
  3315  018E                     	;# 
  3316  0197                     	;# 
  3317  0199                     	;# 
  3318  0199                     	;# 
  3319  0199                     	;# 
  3320  019A                     	;# 
  3321  019A                     	;# 
  3322  019A                     	;# 
  3323  019B                     	;# 
  3324  019B                     	;# 
  3325  019B                     	;# 
  3326  019B                     	;# 
  3327  019B                     	;# 
  3328  019C                     	;# 
  3329  019C                     	;# 
  3330  019C                     	;# 
  3331  019D                     	;# 
  3332  019D                     	;# 
  3333  019D                     	;# 
  3334  019E                     	;# 
  3335  019E                     	;# 
  3336  019E                     	;# 
  3337  019F                     	;# 
  3338  019F                     	;# 
  3339  019F                     	;# 
  3340  019F                     	;# 
  3341  019F                     	;# 
  3342  020C                     	;# 
  3343  020D                     	;# 
  3344  020E                     	;# 
  3345  0211                     	;# 
  3346  0211                     	;# 
  3347  0212                     	;# 
  3348  0212                     	;# 
  3349  0213                     	;# 
  3350  0213                     	;# 
  3351  0214                     	;# 
  3352  0214                     	;# 
  3353  0215                     	;# 
  3354  0215                     	;# 
  3355  0215                     	;# 
  3356  0215                     	;# 
  3357  0216                     	;# 
  3358  0216                     	;# 
  3359  0217                     	;# 
  3360  0217                     	;# 
  3361  0219                     	;# 
  3362  021A                     	;# 
  3363  021B                     	;# 
  3364  021C                     	;# 
  3365  021D                     	;# 
  3366  021D                     	;# 
  3367  021E                     	;# 
  3368  021F                     	;# 
  3369  028C                     	;# 
  3370  028D                     	;# 
  3371  028E                     	;# 
  3372  0291                     	;# 
  3373  0291                     	;# 
  3374  0292                     	;# 
  3375  0293                     	;# 
  3376  0294                     	;# 
  3377  0295                     	;# 
  3378  0295                     	;# 
  3379  0296                     	;# 
  3380  0297                     	;# 
  3381  0298                     	;# 
  3382  029F                     	;# 
  3383  030C                     	;# 
  3384  030D                     	;# 
  3385  030E                     	;# 
  3386  0311                     	;# 
  3387  0311                     	;# 
  3388  0312                     	;# 
  3389  0313                     	;# 
  3390  0314                     	;# 
  3391  0315                     	;# 
  3392  0315                     	;# 
  3393  0316                     	;# 
  3394  0317                     	;# 
  3395  0318                     	;# 
  3396  038C                     	;# 
  3397  038D                     	;# 
  3398  038E                     	;# 
  3399  0391                     	;# 
  3400  0392                     	;# 
  3401  0393                     	;# 
  3402  0394                     	;# 
  3403  0395                     	;# 
  3404  0396                     	;# 
  3405  0397                     	;# 
  3406  0398                     	;# 
  3407  0399                     	;# 
  3408  039A                     	;# 
  3409  039C                     	;# 
  3410  039D                     	;# 
  3411  039E                     	;# 
  3412  039F                     	;# 
  3413  0411                     	;# 
  3414  0411                     	;# 
  3415  0412                     	;# 
  3416  0413                     	;# 
  3417  0414                     	;# 
  3418  0415                     	;# 
  3419  0416                     	;# 
  3420  0417                     	;# 
  3421  0418                     	;# 
  3422  0418                     	;# 
  3423  0419                     	;# 
  3424  041A                     	;# 
  3425  041B                     	;# 
  3426  041C                     	;# 
  3427  041D                     	;# 
  3428  041E                     	;# 
  3429  041F                     	;# 
  3430  0498                     	;# 
  3431  0498                     	;# 
  3432  0499                     	;# 
  3433  049A                     	;# 
  3434  049B                     	;# 
  3435  049B                     	;# 
  3436  049C                     	;# 
  3437  049D                     	;# 
  3438  049E                     	;# 
  3439  049F                     	;# 
  3440  0617                     	;# 
  3441  0618                     	;# 
  3442  0619                     	;# 
  3443  0619                     	;# 
  3444  061A                     	;# 
  3445  061B                     	;# 
  3446  061C                     	;# 
  3447  061C                     	;# 
  3448  061F                     	;# 
  3449  0691                     	;# 
  3450  0692                     	;# 
  3451  0693                     	;# 
  3452  0694                     	;# 
  3453  0695                     	;# 
  3454  0696                     	;# 
  3455  0697                     	;# 
  3456  0698                     	;# 
  3457  0699                     	;# 
  3458  0711                     	;# 
  3459  0712                     	;# 
  3460  0713                     	;# 
  3461  0714                     	;# 
  3462  0715                     	;# 
  3463  0716                     	;# 
  3464  0717                     	;# 
  3465  0718                     	;# 
  3466  0719                     	;# 
  3467  0891                     	;# 
  3468  0891                     	;# 
  3469  0891                     	;# 
  3470  0891                     	;# 
  3471  0891                     	;# 
  3472  0891                     	;# 
  3473  0892                     	;# 
  3474  0892                     	;# 
  3475  0892                     	;# 
  3476  0893                     	;# 
  3477  0893                     	;# 
  3478  0893                     	;# 
  3479  0893                     	;# 
  3480  0893                     	;# 
  3481  0893                     	;# 
  3482  0894                     	;# 
  3483  0894                     	;# 
  3484  0894                     	;# 
  3485  0895                     	;# 
  3486  0895                     	;# 
  3487  0895                     	;# 
  3488  0896                     	;# 
  3489  0896                     	;# 
  3490  0896                     	;# 
  3491  089B                     	;# 
  3492  0911                     	;# 
  3493  0912                     	;# 
  3494  0913                     	;# 
  3495  0914                     	;# 
  3496  0915                     	;# 
  3497  0916                     	;# 
  3498  0918                     	;# 
  3499  0919                     	;# 
  3500  091A                     	;# 
  3501  091B                     	;# 
  3502  091C                     	;# 
  3503  091D                     	;# 
  3504  091E                     	;# 
  3505  091F                     	;# 
  3506  0E0F                     	;# 
  3507  0E10                     	;# 
  3508  0E11                     	;# 
  3509  0E12                     	;# 
  3510  0E13                     	;# 
  3511  0E14                     	;# 
  3512  0E15                     	;# 
  3513  0E16                     	;# 
  3514  0E17                     	;# 
  3515  0E18                     	;# 
  3516  0E19                     	;# 
  3517  0E1A                     	;# 
  3518  0E1B                     	;# 
  3519  0E1C                     	;# 
  3520  0E1D                     	;# 
  3521  0E1E                     	;# 
  3522  0E1F                     	;# 
  3523  0E20                     	;# 
  3524  0E21                     	;# 
  3525  0E22                     	;# 
  3526  0E24                     	;# 
  3527  0E25                     	;# 
  3528  0E28                     	;# 
  3529  0E29                     	;# 
  3530  0E2A                     	;# 
  3531  0E2B                     	;# 
  3532  0E2C                     	;# 
  3533  0E2D                     	;# 
  3534  0E2E                     	;# 
  3535  0E2F                     	;# 
  3536  0E90                     	;# 
  3537  0E91                     	;# 
  3538  0E92                     	;# 
  3539  0E94                     	;# 
  3540  0E95                     	;# 
  3541  0E9C                     	;# 
  3542  0E9D                     	;# 
  3543  0E9E                     	;# 
  3544  0E9F                     	;# 
  3545  0EA0                     	;# 
  3546  0EA1                     	;# 
  3547  0EA2                     	;# 
  3548  0EA3                     	;# 
  3549  0EA4                     	;# 
  3550  0EA5                     	;# 
  3551  0EA6                     	;# 
  3552  0EA7                     	;# 
  3553  0F0F                     	;# 
  3554  0F10                     	;# 
  3555  0F11                     	;# 
  3556  0F12                     	;# 
  3557  0F13                     	;# 
  3558  0F14                     	;# 
  3559  0F15                     	;# 
  3560  0F16                     	;# 
  3561  0F17                     	;# 
  3562  0F18                     	;# 
  3563  0F19                     	;# 
  3564  0F1A                     	;# 
  3565  0F1B                     	;# 
  3566  0F1C                     	;# 
  3567  0F1D                     	;# 
  3568  0F1E                     	;# 
  3569  0F1F                     	;# 
  3570  0F20                     	;# 
  3571  0F21                     	;# 
  3572  0F22                     	;# 
  3573  0F23                     	;# 
  3574  0F24                     	;# 
  3575  0F25                     	;# 
  3576  0F26                     	;# 
  3577  0F27                     	;# 
  3578  0F28                     	;# 
  3579  0F29                     	;# 
  3580  0F2A                     	;# 
  3581  0F2B                     	;# 
  3582  0F2C                     	;# 
  3583  0F2D                     	;# 
  3584  0F2E                     	;# 
  3585  0F2F                     	;# 
  3586  0F30                     	;# 
  3587  0F31                     	;# 
  3588  0F32                     	;# 
  3589  0F33                     	;# 
  3590  0F34                     	;# 
  3591  0F35                     	;# 
  3592  0F36                     	;# 
  3593  0F37                     	;# 
  3594  0FE4                     	;# 
  3595  0FE5                     	;# 
  3596  0FE6                     	;# 
  3597  0FE7                     	;# 
  3598  0FE8                     	;# 
  3599  0FE9                     	;# 
  3600  0FEA                     	;# 
  3601  0FEB                     	;# 
  3602  0FED                     	;# 
  3603  0FEE                     	;# 
  3604  0FEF                     	;# 
  3605  0000                     	;# 
  3606  0001                     	;# 
  3607  0002                     	;# 
  3608  0003                     	;# 
  3609  0004                     	;# 
  3610  0005                     	;# 
  3611  0006                     	;# 
  3612  0007                     	;# 
  3613  0008                     	;# 
  3614  0009                     	;# 
  3615  000A                     	;# 
  3616  000B                     	;# 
  3617  000C                     	;# 
  3618  000D                     	;# 
  3619  000E                     	;# 
  3620  0010                     	;# 
  3621  0011                     	;# 
  3622  0012                     	;# 
  3623  0013                     	;# 
  3624  0014                     	;# 
  3625  0015                     	;# 
  3626  0015                     	;# 
  3627  0016                     	;# 
  3628  0016                     	;# 
  3629  0017                     	;# 
  3630  0018                     	;# 
  3631  0019                     	;# 
  3632  0019                     	;# 
  3633  001A                     	;# 
  3634  001B                     	;# 
  3635  001C                     	;# 
  3636  001D                     	;# 
  3637  001E                     	;# 
  3638  001F                     	;# 
  3639  008C                     	;# 
  3640  008D                     	;# 
  3641  008E                     	;# 
  3642  0090                     	;# 
  3643  0091                     	;# 
  3644  0092                     	;# 
  3645  0093                     	;# 
  3646  0094                     	;# 
  3647  0097                     	;# 
  3648  009B                     	;# 
  3649  009B                     	;# 
  3650  009C                     	;# 
  3651  009D                     	;# 
  3652  009E                     	;# 
  3653  009F                     	;# 
  3654  010C                     	;# 
  3655  010D                     	;# 
  3656  010E                     	;# 
  3657  0111                     	;# 
  3658  0112                     	;# 
  3659  0113                     	;# 
  3660  0114                     	;# 
  3661  0115                     	;# 
  3662  0116                     	;# 
  3663  0117                     	;# 
  3664  0118                     	;# 
  3665  0119                     	;# 
  3666  018C                     	;# 
  3667  018D                     	;# 
  3668  018E                     	;# 
  3669  0197                     	;# 
  3670  0199                     	;# 
  3671  0199                     	;# 
  3672  0199                     	;# 
  3673  019A                     	;# 
  3674  019A                     	;# 
  3675  019A                     	;# 
  3676  019B                     	;# 
  3677  019B                     	;# 
  3678  019B                     	;# 
  3679  019B                     	;# 
  3680  019B                     	;# 
  3681  019C                     	;# 
  3682  019C                     	;# 
  3683  019C                     	;# 
  3684  019D                     	;# 
  3685  019D                     	;# 
  3686  019D                     	;# 
  3687  019E                     	;# 
  3688  019E                     	;# 
  3689  019E                     	;# 
  3690  019F                     	;# 
  3691  019F                     	;# 
  3692  019F                     	;# 
  3693  019F                     	;# 
  3694  019F                     	;# 
  3695  020C                     	;# 
  3696  020D                     	;# 
  3697  020E                     	;# 
  3698  0211                     	;# 
  3699  0211                     	;# 
  3700  0212                     	;# 
  3701  0212                     	;# 
  3702  0213                     	;# 
  3703  0213                     	;# 
  3704  0214                     	;# 
  3705  0214                     	;# 
  3706  0215                     	;# 
  3707  0215                     	;# 
  3708  0215                     	;# 
  3709  0215                     	;# 
  3710  0216                     	;# 
  3711  0216                     	;# 
  3712  0217                     	;# 
  3713  0217                     	;# 
  3714  0219                     	;# 
  3715  021A                     	;# 
  3716  021B                     	;# 
  3717  021C                     	;# 
  3718  021D                     	;# 
  3719  021D                     	;# 
  3720  021E                     	;# 
  3721  021F                     	;# 
  3722  028C                     	;# 
  3723  028D                     	;# 
  3724  028E                     	;# 
  3725  0291                     	;# 
  3726  0291                     	;# 
  3727  0292                     	;# 
  3728  0293                     	;# 
  3729  0294                     	;# 
  3730  0295                     	;# 
  3731  0295                     	;# 
  3732  0296                     	;# 
  3733  0297                     	;# 
  3734  0298                     	;# 
  3735  029F                     	;# 
  3736  030C                     	;# 
  3737  030D                     	;# 
  3738  030E                     	;# 
  3739  0311                     	;# 
  3740  0311                     	;# 
  3741  0312                     	;# 
  3742  0313                     	;# 
  3743  0314                     	;# 
  3744  0315                     	;# 
  3745  0315                     	;# 
  3746  0316                     	;# 
  3747  0317                     	;# 
  3748  0318                     	;# 
  3749  038C                     	;# 
  3750  038D                     	;# 
  3751  038E                     	;# 
  3752  0391                     	;# 
  3753  0392                     	;# 
  3754  0393                     	;# 
  3755  0394                     	;# 
  3756  0395                     	;# 
  3757  0396                     	;# 
  3758  0397                     	;# 
  3759  0398                     	;# 
  3760  0399                     	;# 
  3761  039A                     	;# 
  3762  039C                     	;# 
  3763  039D                     	;# 
  3764  039E                     	;# 
  3765  039F                     	;# 
  3766  0411                     	;# 
  3767  0411                     	;# 
  3768  0412                     	;# 
  3769  0413                     	;# 
  3770  0414                     	;# 
  3771  0415                     	;# 
  3772  0416                     	;# 
  3773  0417                     	;# 
  3774  0418                     	;# 
  3775  0418                     	;# 
  3776  0419                     	;# 
  3777  041A                     	;# 
  3778  041B                     	;# 
  3779  041C                     	;# 
  3780  041D                     	;# 
  3781  041E                     	;# 
  3782  041F                     	;# 
  3783  0498                     	;# 
  3784  0498                     	;# 
  3785  0499                     	;# 
  3786  049A                     	;# 
  3787  049B                     	;# 
  3788  049B                     	;# 
  3789  049C                     	;# 
  3790  049D                     	;# 
  3791  049E                     	;# 
  3792  049F                     	;# 
  3793  0617                     	;# 
  3794  0618                     	;# 
  3795  0619                     	;# 
  3796  0619                     	;# 
  3797  061A                     	;# 
  3798  061B                     	;# 
  3799  061C                     	;# 
  3800  061C                     	;# 
  3801  061F                     	;# 
  3802  0691                     	;# 
  3803  0692                     	;# 
  3804  0693                     	;# 
  3805  0694                     	;# 
  3806  0695                     	;# 
  3807  0696                     	;# 
  3808  0697                     	;# 
  3809  0698                     	;# 
  3810  0699                     	;# 
  3811  0711                     	;# 
  3812  0712                     	;# 
  3813  0713                     	;# 
  3814  0714                     	;# 
  3815  0715                     	;# 
  3816  0716                     	;# 
  3817  0717                     	;# 
  3818  0718                     	;# 
  3819  0719                     	;# 
  3820  0891                     	;# 
  3821  0891                     	;# 
  3822  0891                     	;# 
  3823  0891                     	;# 
  3824  0891                     	;# 
  3825  0891                     	;# 
  3826  0892                     	;# 
  3827  0892                     	;# 
  3828  0892                     	;# 
  3829  0893                     	;# 
  3830  0893                     	;# 
  3831  0893                     	;# 
  3832  0893                     	;# 
  3833  0893                     	;# 
  3834  0893                     	;# 
  3835  0894                     	;# 
  3836  0894                     	;# 
  3837  0894                     	;# 
  3838  0895                     	;# 
  3839  0895                     	;# 
  3840  0895                     	;# 
  3841  0896                     	;# 
  3842  0896                     	;# 
  3843  0896                     	;# 
  3844  089B                     	;# 
  3845  0911                     	;# 
  3846  0912                     	;# 
  3847  0913                     	;# 
  3848  0914                     	;# 
  3849  0915                     	;# 
  3850  0916                     	;# 
  3851  0918                     	;# 
  3852  0919                     	;# 
  3853  091A                     	;# 
  3854  091B                     	;# 
  3855  091C                     	;# 
  3856  091D                     	;# 
  3857  091E                     	;# 
  3858  091F                     	;# 
  3859  0E0F                     	;# 
  3860  0E10                     	;# 
  3861  0E11                     	;# 
  3862  0E12                     	;# 
  3863  0E13                     	;# 
  3864  0E14                     	;# 
  3865  0E15                     	;# 
  3866  0E16                     	;# 
  3867  0E17                     	;# 
  3868  0E18                     	;# 
  3869  0E19                     	;# 
  3870  0E1A                     	;# 
  3871  0E1B                     	;# 
  3872  0E1C                     	;# 
  3873  0E1D                     	;# 
  3874  0E1E                     	;# 
  3875  0E1F                     	;# 
  3876  0E20                     	;# 
  3877  0E21                     	;# 
  3878  0E22                     	;# 
  3879  0E24                     	;# 
  3880  0E25                     	;# 
  3881  0E28                     	;# 
  3882  0E29                     	;# 
  3883  0E2A                     	;# 
  3884  0E2B                     	;# 
  3885  0E2C                     	;# 
  3886  0E2D                     	;# 
  3887  0E2E                     	;# 
  3888  0E2F                     	;# 
  3889  0E90                     	;# 
  3890  0E91                     	;# 
  3891  0E92                     	;# 
  3892  0E94                     	;# 
  3893  0E95                     	;# 
  3894  0E9C                     	;# 
  3895  0E9D                     	;# 
  3896  0E9E                     	;# 
  3897  0E9F                     	;# 
  3898  0EA0                     	;# 
  3899  0EA1                     	;# 
  3900  0EA2                     	;# 
  3901  0EA3                     	;# 
  3902  0EA4                     	;# 
  3903  0EA5                     	;# 
  3904  0EA6                     	;# 
  3905  0EA7                     	;# 
  3906  0F0F                     	;# 
  3907  0F10                     	;# 
  3908  0F11                     	;# 
  3909  0F12                     	;# 
  3910  0F13                     	;# 
  3911  0F14                     	;# 
  3912  0F15                     	;# 
  3913  0F16                     	;# 
  3914  0F17                     	;# 
  3915  0F18                     	;# 
  3916  0F19                     	;# 
  3917  0F1A                     	;# 
  3918  0F1B                     	;# 
  3919  0F1C                     	;# 
  3920  0F1D                     	;# 
  3921  0F1E                     	;# 
  3922  0F1F                     	;# 
  3923  0F20                     	;# 
  3924  0F21                     	;# 
  3925  0F22                     	;# 
  3926  0F23                     	;# 
  3927  0F24                     	;# 
  3928  0F25                     	;# 
  3929  0F26                     	;# 
  3930  0F27                     	;# 
  3931  0F28                     	;# 
  3932  0F29                     	;# 
  3933  0F2A                     	;# 
  3934  0F2B                     	;# 
  3935  0F2C                     	;# 
  3936  0F2D                     	;# 
  3937  0F2E                     	;# 
  3938  0F2F                     	;# 
  3939  0F30                     	;# 
  3940  0F31                     	;# 
  3941  0F32                     	;# 
  3942  0F33                     	;# 
  3943  0F34                     	;# 
  3944  0F35                     	;# 
  3945  0F36                     	;# 
  3946  0F37                     	;# 
  3947  0FE4                     	;# 
  3948  0FE5                     	;# 
  3949  0FE6                     	;# 
  3950  0FE7                     	;# 
  3951  0FE8                     	;# 
  3952  0FE9                     	;# 
  3953  0FEA                     	;# 
  3954  0FEB                     	;# 
  3955  0FED                     	;# 
  3956  0FEE                     	;# 
  3957  0FEF                     	;# 
  3958  0000                     	;# 
  3959  0001                     	;# 
  3960  0002                     	;# 
  3961  0003                     	;# 
  3962  0004                     	;# 
  3963  0005                     	;# 
  3964  0006                     	;# 
  3965  0007                     	;# 
  3966  0008                     	;# 
  3967  0009                     	;# 
  3968  000A                     	;# 
  3969  000B                     	;# 
  3970  000C                     	;# 
  3971  000D                     	;# 
  3972  000E                     	;# 
  3973  0010                     	;# 
  3974  0011                     	;# 
  3975  0012                     	;# 
  3976  0013                     	;# 
  3977  0014                     	;# 
  3978  0015                     	;# 
  3979  0015                     	;# 
  3980  0016                     	;# 
  3981  0016                     	;# 
  3982  0017                     	;# 
  3983  0018                     	;# 
  3984  0019                     	;# 
  3985  0019                     	;# 
  3986  001A                     	;# 
  3987  001B                     	;# 
  3988  001C                     	;# 
  3989  001D                     	;# 
  3990  001E                     	;# 
  3991  001F                     	;# 
  3992  008C                     	;# 
  3993  008D                     	;# 
  3994  008E                     	;# 
  3995  0090                     	;# 
  3996  0091                     	;# 
  3997  0092                     	;# 
  3998  0093                     	;# 
  3999  0094                     	;# 
  4000  0097                     	;# 
  4001  009B                     	;# 
  4002  009B                     	;# 
  4003  009C                     	;# 
  4004  009D                     	;# 
  4005  009E                     	;# 
  4006  009F                     	;# 
  4007  010C                     	;# 
  4008  010D                     	;# 
  4009  010E                     	;# 
  4010  0111                     	;# 
  4011  0112                     	;# 
  4012  0113                     	;# 
  4013  0114                     	;# 
  4014  0115                     	;# 
  4015  0116                     	;# 
  4016  0117                     	;# 
  4017  0118                     	;# 
  4018  0119                     	;# 
  4019  018C                     	;# 
  4020  018D                     	;# 
  4021  018E                     	;# 
  4022  0197                     	;# 
  4023  0199                     	;# 
  4024  0199                     	;# 
  4025  0199                     	;# 
  4026  019A                     	;# 
  4027  019A                     	;# 
  4028  019A                     	;# 
  4029  019B                     	;# 
  4030  019B                     	;# 
  4031  019B                     	;# 
  4032  019B                     	;# 
  4033  019B                     	;# 
  4034  019C                     	;# 
  4035  019C                     	;# 
  4036  019C                     	;# 
  4037  019D                     	;# 
  4038  019D                     	;# 
  4039  019D                     	;# 
  4040  019E                     	;# 
  4041  019E                     	;# 
  4042  019E                     	;# 
  4043  019F                     	;# 
  4044  019F                     	;# 
  4045  019F                     	;# 
  4046  019F                     	;# 
  4047  019F                     	;# 
  4048  020C                     	;# 
  4049  020D                     	;# 
  4050  020E                     	;# 
  4051  0211                     	;# 
  4052  0211                     	;# 
  4053  0212                     	;# 
  4054  0212                     	;# 
  4055  0213                     	;# 
  4056  0213                     	;# 
  4057  0214                     	;# 
  4058  0214                     	;# 
  4059  0215                     	;# 
  4060  0215                     	;# 
  4061  0215                     	;# 
  4062  0215                     	;# 
  4063  0216                     	;# 
  4064  0216                     	;# 
  4065  0217                     	;# 
  4066  0217                     	;# 
  4067  0219                     	;# 
  4068  021A                     	;# 
  4069  021B                     	;# 
  4070  021C                     	;# 
  4071  021D                     	;# 
  4072  021D                     	;# 
  4073  021E                     	;# 
  4074  021F                     	;# 
  4075  028C                     	;# 
  4076  028D                     	;# 
  4077  028E                     	;# 
  4078  0291                     	;# 
  4079  0291                     	;# 
  4080  0292                     	;# 
  4081  0293                     	;# 
  4082  0294                     	;# 
  4083  0295                     	;# 
  4084  0295                     	;# 
  4085  0296                     	;# 
  4086  0297                     	;# 
  4087  0298                     	;# 
  4088  029F                     	;# 
  4089  030C                     	;# 
  4090  030D                     	;# 
  4091  030E                     	;# 
  4092  0311                     	;# 
  4093  0311                     	;# 
  4094  0312                     	;# 
  4095  0313                     	;# 
  4096  0314                     	;# 
  4097  0315                     	;# 
  4098  0315                     	;# 
  4099  0316                     	;# 
  4100  0317                     	;# 
  4101  0318                     	;# 
  4102  038C                     	;# 
  4103  038D                     	;# 
  4104  038E                     	;# 
  4105  0391                     	;# 
  4106  0392                     	;# 
  4107  0393                     	;# 
  4108  0394                     	;# 
  4109  0395                     	;# 
  4110  0396                     	;# 
  4111  0397                     	;# 
  4112  0398                     	;# 
  4113  0399                     	;# 
  4114  039A                     	;# 
  4115  039C                     	;# 
  4116  039D                     	;# 
  4117  039E                     	;# 
  4118  039F                     	;# 
  4119  0411                     	;# 
  4120  0411                     	;# 
  4121  0412                     	;# 
  4122  0413                     	;# 
  4123  0414                     	;# 
  4124  0415                     	;# 
  4125  0416                     	;# 
  4126  0417                     	;# 
  4127  0418                     	;# 
  4128  0418                     	;# 
  4129  0419                     	;# 
  4130  041A                     	;# 
  4131  041B                     	;# 
  4132  041C                     	;# 
  4133  041D                     	;# 
  4134  041E                     	;# 
  4135  041F                     	;# 
  4136  0498                     	;# 
  4137  0498                     	;# 
  4138  0499                     	;# 
  4139  049A                     	;# 
  4140  049B                     	;# 
  4141  049B                     	;# 
  4142  049C                     	;# 
  4143  049D                     	;# 
  4144  049E                     	;# 
  4145  049F                     	;# 
  4146  0617                     	;# 
  4147  0618                     	;# 
  4148  0619                     	;# 
  4149  0619                     	;# 
  4150  061A                     	;# 
  4151  061B                     	;# 
  4152  061C                     	;# 
  4153  061C                     	;# 
  4154  061F                     	;# 
  4155  0691                     	;# 
  4156  0692                     	;# 
  4157  0693                     	;# 
  4158  0694                     	;# 
  4159  0695                     	;# 
  4160  0696                     	;# 
  4161  0697                     	;# 
  4162  0698                     	;# 
  4163  0699                     	;# 
  4164  0711                     	;# 
  4165  0712                     	;# 
  4166  0713                     	;# 
  4167  0714                     	;# 
  4168  0715                     	;# 
  4169  0716                     	;# 
  4170  0717                     	;# 
  4171  0718                     	;# 
  4172  0719                     	;# 
  4173  0891                     	;# 
  4174  0891                     	;# 
  4175  0891                     	;# 
  4176  0891                     	;# 
  4177  0891                     	;# 
  4178  0891                     	;# 
  4179  0892                     	;# 
  4180  0892                     	;# 
  4181  0892                     	;# 
  4182  0893                     	;# 
  4183  0893                     	;# 
  4184  0893                     	;# 
  4185  0893                     	;# 
  4186  0893                     	;# 
  4187  0893                     	;# 
  4188  0894                     	;# 
  4189  0894                     	;# 
  4190  0894                     	;# 
  4191  0895                     	;# 
  4192  0895                     	;# 
  4193  0895                     	;# 
  4194  0896                     	;# 
  4195  0896                     	;# 
  4196  0896                     	;# 
  4197  089B                     	;# 
  4198  0911                     	;# 
  4199  0912                     	;# 
  4200  0913                     	;# 
  4201  0914                     	;# 
  4202  0915                     	;# 
  4203  0916                     	;# 
  4204  0918                     	;# 
  4205  0919                     	;# 
  4206  091A                     	;# 
  4207  091B                     	;# 
  4208  091C                     	;# 
  4209  091D                     	;# 
  4210  091E                     	;# 
  4211  091F                     	;# 
  4212  0E0F                     	;# 
  4213  0E10                     	;# 
  4214  0E11                     	;# 
  4215  0E12                     	;# 
  4216  0E13                     	;# 
  4217  0E14                     	;# 
  4218  0E15                     	;# 
  4219  0E16                     	;# 
  4220  0E17                     	;# 
  4221  0E18                     	;# 
  4222  0E19                     	;# 
  4223  0E1A                     	;# 
  4224  0E1B                     	;# 
  4225  0E1C                     	;# 
  4226  0E1D                     	;# 
  4227  0E1E                     	;# 
  4228  0E1F                     	;# 
  4229  0E20                     	;# 
  4230  0E21                     	;# 
  4231  0E22                     	;# 
  4232  0E24                     	;# 
  4233  0E25                     	;# 
  4234  0E28                     	;# 
  4235  0E29                     	;# 
  4236  0E2A                     	;# 
  4237  0E2B                     	;# 
  4238  0E2C                     	;# 
  4239  0E2D                     	;# 
  4240  0E2E                     	;# 
  4241  0E2F                     	;# 
  4242  0E90                     	;# 
  4243  0E91                     	;# 
  4244  0E92                     	;# 
  4245  0E94                     	;# 
  4246  0E95                     	;# 
  4247  0E9C                     	;# 
  4248  0E9D                     	;# 
  4249  0E9E                     	;# 
  4250  0E9F                     	;# 
  4251  0EA0                     	;# 
  4252  0EA1                     	;# 
  4253  0EA2                     	;# 
  4254  0EA3                     	;# 
  4255  0EA4                     	;# 
  4256  0EA5                     	;# 
  4257  0EA6                     	;# 
  4258  0EA7                     	;# 
  4259  0F0F                     	;# 
  4260  0F10                     	;# 
  4261  0F11                     	;# 
  4262  0F12                     	;# 
  4263  0F13                     	;# 
  4264  0F14                     	;# 
  4265  0F15                     	;# 
  4266  0F16                     	;# 
  4267  0F17                     	;# 
  4268  0F18                     	;# 
  4269  0F19                     	;# 
  4270  0F1A                     	;# 
  4271  0F1B                     	;# 
  4272  0F1C                     	;# 
  4273  0F1D                     	;# 
  4274  0F1E                     	;# 
  4275  0F1F                     	;# 
  4276  0F20                     	;# 
  4277  0F21                     	;# 
  4278  0F22                     	;# 
  4279  0F23                     	;# 
  4280  0F24                     	;# 
  4281  0F25                     	;# 
  4282  0F26                     	;# 
  4283  0F27                     	;# 
  4284  0F28                     	;# 
  4285  0F29                     	;# 
  4286  0F2A                     	;# 
  4287  0F2B                     	;# 
  4288  0F2C                     	;# 
  4289  0F2D                     	;# 
  4290  0F2E                     	;# 
  4291  0F2F                     	;# 
  4292  0F30                     	;# 
  4293  0F31                     	;# 
  4294  0F32                     	;# 
  4295  0F33                     	;# 
  4296  0F34                     	;# 
  4297  0F35                     	;# 
  4298  0F36                     	;# 
  4299  0F37                     	;# 
  4300  0FE4                     	;# 
  4301  0FE5                     	;# 
  4302  0FE6                     	;# 
  4303  0FE7                     	;# 
  4304  0FE8                     	;# 
  4305  0FE9                     	;# 
  4306  0FEA                     	;# 
  4307  0FEB                     	;# 
  4308  0FED                     	;# 
  4309  0FEE                     	;# 
  4310  0FEF                     	;# 
  4311                           
  4312                           	psect	idataBANK1
  4313  07B0                     __pidataBANK1:	
  4314                           
  4315                           ;initializer for Led_DynamicCloud@F8332
  4316  07B0  34C8               	retlw	200
  4317  07B1  3400               	retlw	0
  4318  07B2  34C8               	retlw	200
  4319  07B3  3400               	retlw	0
  4320  07B4  3490               	retlw	144
  4321  07B5  3401               	retlw	1
  4322  07B6  3440               	retlw	64
  4323  07B7  3401               	retlw	1
  4324  07B8  3490               	retlw	144
  4325  07B9  3401               	retlw	1
  4326                           
  4327                           ;initializer for Led_DynamicMoon@F8322
  4328  07BA  3400               	retlw	0
  4329  07BB  3400               	retlw	0
  4330  07BC  3400               	retlw	0
  4331  07BD  3400               	retlw	0
  4332  07BE  34E8               	retlw	232
  4333  07BF  3403               	retlw	3
  4334  07C0  34C8               	retlw	200
  4335  07C1  3400               	retlw	0
  4336  07C2  3400               	retlw	0
  4337  07C3  3400               	retlw	0
  4338                           
  4339                           ;initializer for Led_DynamicWave@F8312
  4340  07C4  34F4               	retlw	244
  4341  07C5  3401               	retlw	1
  4342  07C6  34F4               	retlw	244
  4343  07C7  3401               	retlw	1
  4344  07C8  34F4               	retlw	244
  4345  07C9  3401               	retlw	1
  4346  07CA  34C8               	retlw	200
  4347  07CB  3400               	retlw	0
  4348  07CC  34F4               	retlw	244
  4349  07CD  3401               	retlw	1
  4350                           
  4351                           ;initializer for _loadDuty
  4352  07CE  34D8               	retlw	low _PWM5_LoadDutyValue
  4353  07CF  3407               	retlw	high _PWM5_LoadDutyValue
  4354  07D0  34BC               	retlw	low _PWM2_LoadDutyValue
  4355  07D1  3414               	retlw	high _PWM2_LoadDutyValue
  4356  07D2  34E0               	retlw	low _PWM4_LoadDutyValue
  4357  07D3  3414               	retlw	high _PWM4_LoadDutyValue
  4358  07D4  34CE               	retlw	low _PWM3_LoadDutyValue
  4359  07D5  3414               	retlw	high _PWM3_LoadDutyValue
  4360  07D6  34AA               	retlw	low _PWM1_LoadDutyValue
  4361  07D7  3414               	retlw	high _PWM1_LoadDutyValue
  4362                           
  4363                           	psect	idataBANK3
  4364  1470                     __pidataBANK3:	
  4365                           
  4366                           ;initializer for Led_DynamicStorm@F8342
  4367  1470  3400               	retlw	0
  4368  1471  3400               	retlw	0
  4369  1472  3400               	retlw	0
  4370  1473  3400               	retlw	0
  4371  1474  3458               	retlw	88
  4372  1475  3402               	retlw	2
  4373  1476  3440               	retlw	64
  4374  1477  3400               	retlw	0
  4375  1478  3400               	retlw	0
  4376  1479  3400               	retlw	0
  4377                           
  4378                           	psect	stringtext
  4379  1800                     __pstringtext:	
  4380  1800                     _GAIN:	
  4381  1800  3407               	retlw	7
  4382  1801  3405               	retlw	5
  4383  1802  3403               	retlw	3
  4384  1803  3401               	retlw	1
  4385  1804  3400               	retlw	0
  4386  1805                     __end_of_GAIN:	
  4387  1805                     _VOLUME:	
  4388  1805  340E               	retlw	14
  4389  1806  3411               	retlw	17
  4390  1807  3414               	retlw	20
  4391  1808  3417               	retlw	23
  4392  1809  341A               	retlw	26
  4393  180A                     __end_of_VOLUME:	
  4394                           
  4395                           	psect	nvBANK0
  4396  005E                     __pnvBANK0:	
  4397  005E                     _txRemain:	
  4398  005E                     	ds	1
  4399                           
  4400                           	psect	nvBANK1
  4401  00E2                     __pnvBANK1:	
  4402  00E2                     _tmr4_isr_handler:	
  4403  00E2                     	ds	2
  4404  00E4                     _tmr2_isr_handler:	
  4405  00E4                     	ds	2
  4406  00E6                     _tmr1_gate_isr_handler:	
  4407  00E6                     	ds	2
  4408  00E8                     _tmr0_isr_handler:	
  4409  00E8                     	ds	2
  4410  0019                     _TMR1	set	25
  4411  0012                     _PIR2bits	set	18
  4412  001F                     _T2CONbits	set	31
  4413  001D                     _TMR2	set	29
  4414  001E                     _PR2	set	30
  4415  001F                     _T2CON	set	31
  4416  001B                     _T1CONbits	set	27
  4417  001C                     _T1GCON	set	28
  4418  001B                     _T1CON	set	27
  4419  0017                     _T0CON0bits	set	23
  4420  0010                     _PIR0bits	set	16
  4421  0015                     _TMR0L	set	21
  4422  0016                     _TMR0H	set	22
  4423  0018                     _T0CON1	set	24
  4424  0017                     _T0CON0	set	23
  4425  000B                     _INTCONbits	set	11
  4426  0011                     _PIR1bits	set	17
  4427  005F                     _GIE	set	95
  4428  009B                     _ADRES	set	155
  4429  008E                     _TRISC	set	142
  4430  008D                     _TRISB	set	141
  4431  008C                     _TRISA	set	140
  4432  0092                     _PIE2bits	set	146
  4433  0090                     _PIE0bits	set	144
  4434  0091                     _PIE1bits	set	145
  4435  009D                     _ADCON0bits	set	157
  4436  009B                     _ADRESL	set	155
  4437  009C                     _ADRESH	set	156
  4438  009F                     _ADACT	set	159
  4439  009E                     _ADCON1	set	158
  4440  009D                     _ADCON0	set	157
  4441  010E                     _LATC	set	270
  4442  010D                     _LATB	set	269
  4443  010C                     _LATA	set	268
  4444  019B                     _SP1BRG	set	411
  4445  018C                     _ANSELA	set	396
  4446  018D                     _ANSELB	set	397
  4447  018E                     _ANSELC	set	398
  4448  019A                     _TXREG	set	410
  4449  019E                     _TX1STA	set	414
  4450  019D                     _RC1STA	set	413
  4451  019F                     _BAUD1CON	set	415
  4452  020E                     _WPUC	set	526
  4453  020C                     _WPUA	set	524
  4454  020D                     _WPUB	set	525
  4455  0295                     _CCPR2	set	661
  4456  0291                     _CCPR1	set	657
  4457  028E                     _ODCONC	set	654
  4458  028D                     _ODCONB	set	653
  4459  028C                     _ODCONA	set	652
  4460  0297                     _CCP2CON	set	663
  4461  029F                     _CCPTMRSbits	set	671
  4462  0293                     _CCP1CON	set	659
  4463  0315                     _CCPR4	set	789
  4464  0311                     _CCPR3	set	785
  4465  0317                     _CCP4CON	set	791
  4466  0313                     _CCP3CON	set	787
  4467  0417                     _T4CONbits	set	1047
  4468  0415                     _TMR4	set	1045
  4469  0416                     _PR4	set	1046
  4470  0417                     _T4CON	set	1047
  4471  0617                     _PWM5DC	set	1559
  4472  061F                     _PWMTMRSbits	set	1567
  4473  0619                     _PWM5CON	set	1561
  4474  0896                     _NVMCON2	set	2198
  4475  0895                     _NVMCON1bits	set	2197
  4476  0893                     _NVMDATL	set	2195
  4477  0891                     _NVMADRL	set	2193
  4478  0892                     _NVMADRH	set	2194
  4479  091E                     _OSCTUNE	set	2334
  4480  091F                     _OSCFRQ	set	2335
  4481  091D                     _OSCEN	set	2333
  4482  091B                     _OSCCON3	set	2331
  4483  0919                     _OSCCON1	set	2329
  4484  0E13                     _T1GPPSbits	set	3603
  4485  0E0F                     _PPSLOCKbits	set	3599
  4486  0E0F                     _PPSLOCK	set	3599
  4487  0E9F                     _RB7PPSbits	set	3743
  4488  0EA7                     _RC7PPSbits	set	3751
  4489  0EA1                     _RC1PPSbits	set	3745
  4490  0E92                     _RA2PPSbits	set	3730
  4491  0EA3                     _RC3PPSbits	set	3747
  4492  0EA5                     _RC5PPSbits	set	3749
  4493                           
  4494                           ; #config settings
  4495  0000                     
  4496                           	psect	cinit
  4497  0805                     start_initialization:	
  4498  0805                     __initialization:	
  4499                           
  4500                           ; Initialize objects allocated to BANK1
  4501  0805  30B0               	movlw	low __pidataBANK1
  4502  0806  0084               	movwf	4
  4503  0807  3087               	movlw	(high __pidataBANK1)| (0+128)
  4504  0808  0085               	movwf	5
  4505  0809  30A0               	movlw	low __pdataBANK1
  4506  080A  0086               	movwf	6
  4507  080B  3000               	movlw	high __pdataBANK1
  4508  080C  0087               	movwf	7
  4509  080D  3028               	movlw	40
  4510  080E  3194  246A  3188   	fcall	init_ram
  4511                           
  4512                           ; Initialize objects allocated to BANK3
  4513  0811  3070               	movlw	low __pidataBANK3
  4514  0812  0084               	movwf	4
  4515  0813  3094               	movlw	(high __pidataBANK3)| (0+128)
  4516  0814  0085               	movwf	5
  4517  0815  30D2               	movlw	low __pdataBANK3
  4518  0816  0086               	movwf	6
  4519  0817  3001               	movlw	high __pdataBANK3
  4520  0818  0087               	movwf	7
  4521  0819  300A               	movlw	10
  4522  081A  3194  246A  3188   	fcall	init_ram
  4523                           
  4524                           ; Clear objects allocated to BANK0
  4525  081D  3020               	movlw	low __pbssBANK0
  4526  081E  0084               	movwf	4
  4527  081F  3000               	movlw	high __pbssBANK0
  4528  0820  0085               	movwf	5
  4529  0821  3020               	movlw	32
  4530  0822  3194  2464  3188   	fcall	clear_ram0
  4531                           
  4532                           ; Clear objects allocated to BANK1
  4533  0825  30C8               	movlw	low __pbssBANK1
  4534  0826  0084               	movwf	4
  4535  0827  3000               	movlw	high __pbssBANK1
  4536  0828  0085               	movwf	5
  4537  0829  301A               	movlw	26
  4538  082A  3194  2464  3188   	fcall	clear_ram0
  4539                           
  4540                           ; Clear objects allocated to BANK2
  4541  082D  3020               	movlw	low __pbssBANK2
  4542  082E  0084               	movwf	4
  4543  082F  3001               	movlw	high __pbssBANK2
  4544  0830  0085               	movwf	5
  4545  0831  304E               	movlw	78
  4546  0832  3194  2464  3188   	fcall	clear_ram0
  4547                           
  4548                           ; Clear objects allocated to BANK3
  4549  0835  30A0               	movlw	low __pbssBANK3
  4550  0836  0084               	movwf	4
  4551  0837  3001               	movlw	high __pbssBANK3
  4552  0838  0085               	movwf	5
  4553  0839  3020               	movlw	32
  4554  083A  3194  2464  3188   	fcall	clear_ram0
  4555  083D                     end_of_initialization:	
  4556                           ;End of C runtime variable initialization code
  4557                           
  4558  083D                     __end_of__initialization:	
  4559  083D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4560  083E  0020               	movlb	0
  4561  083F  2840               	ljmp	_main	;jump to C main() function
  4562  0840                     __pmaintext:	
  4563                           ; 1 bytes @ 0x1E
  4564 ;;
  4565 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4566 ;;
  4567 ;; *************** function _main *****************
  4568 ;; Defined at:
  4569 ;;		line 37 in file "user/src/main.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;		None
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;		None
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      void 
  4576 ;; Registers used:
  4577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : B1F/0
  4580 ;;		On exit  : 1F/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;Total ram usage:        0 bytes
  4588 ;; Hardware stack levels required when called:   13
  4589 ;; This function calls:
  4590 ;;		_Audio_GetValue
  4591 ;;		_IR_KeyAtionIfPressed
  4592 ;;		_IR_ResetIfTMR1Overflow
  4593 ;;		_IR_UpdateSetStatus
  4594 ;;		_Interrupt_Initialize
  4595 ;;		_Led_AutoRun
  4596 ;;		_Led_CheckAutoStatus
  4597 ;;		_Led_InitPara
  4598 ;;		_Led_Initialize
  4599 ;;		_Led_SaveParaIfChanged
  4600 ;;		_RTC_HourReady
  4601 ;;		_RTC_MinuteReady
  4602 ;;		_RTC_SecondReady
  4603 ;;		_SYSTEM_Initialize
  4604 ;;		_TMR0_StartTimer
  4605 ;;		_TMR1_StartTimer
  4606 ;;		_TMR2_StartTimer
  4607 ;; This function is called by:
  4608 ;;		Startup code after reset
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           
  4613                           ;psect for function _main
  4614  0840                     _main:	
  4615                           
  4616                           ;main.c: 38: SYSTEM_Initialize();
  4617                           
  4618                           ;incstack = 0
  4619                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4620  0840  3195  251F  3188   	fcall	_SYSTEM_Initialize
  4621                           
  4622                           ;main.c: 39: Interrupt_Initialize();
  4623  0843  2775               	fcall	_Interrupt_Initialize
  4624                           
  4625                           ;main.c: 40: (INTCONbits.GIE = 1);
  4626  0844  178B               	bsf	11,7	;volatile
  4627                           
  4628                           ;main.c: 41: (INTCONbits.PEIE = 1);
  4629  0845  170B               	bsf	11,6	;volatile
  4630                           
  4631                           ;main.c: 42: Led_InitPara();
  4632  0846  3186  266A  3188   	fcall	_Led_InitPara
  4633                           
  4634                           ;main.c: 43: Led_Initialize();
  4635  0849  20F9  3188         	fcall	_Led_Initialize
  4636                           
  4637                           ;main.c: 44: TMR0_StartTimer();
  4638  084B  26B0  3188         	fcall	_TMR0_StartTimer
  4639                           
  4640                           ;main.c: 45: TMR1_StartTimer();
  4641  084D  2650  3188         	fcall	_TMR1_StartTimer
  4642                           
  4643                           ;main.c: 46: TMR2_StartTimer();
  4644  084F  27BE  3188         	fcall	_TMR2_StartTimer
  4645  0851                     l505:	
  4646                           ;main.c: 48: while (1) {
  4647                           
  4648  0851  0064               	clrwdt	;# 
  4649                           
  4650                           ;main.c: 51: if (!gLedPara.mAuto && gLedPara.mOn && gLedPara.mDyn) {
  4651  0852  0022               	movlb	2	; select bank2
  4652  0853  1C20               	btfss	_gLedPara^(0+256),0	;volatile
  4653  0854  1CA0               	btfss	_gLedPara^(0+256),1	;volatile
  4654  0855  285A               	goto	l7150
  4655  0856  1FA0               	btfss	_gLedPara^(0+256),7	;volatile
  4656  0857  285A               	goto	l7150
  4657                           
  4658                           ;main.c: 52: Audio_GetValue();
  4659  0858  2088  3188         	fcall	_Audio_GetValue
  4660  085A                     l7150:	
  4661                           
  4662                           ;main.c: 53: }
  4663                           ;main.c: 54: IR_KeyAtionIfPressed();
  4664  085A  264C  3188         	fcall	_IR_KeyAtionIfPressed
  4665                           
  4666                           ;main.c: 55: IR_ResetIfTMR1Overflow();
  4667  085C  2653  3188         	fcall	_IR_ResetIfTMR1Overflow
  4668                           
  4669                           ;main.c: 56: Led_SaveParaIfChanged();
  4670  085E  26A2  3188         	fcall	_Led_SaveParaIfChanged
  4671                           
  4672                           ;main.c: 58: if (RTC_HourReady()) {
  4673  0860  27B0  3188         	fcall	_RTC_HourReady
  4674                           
  4675                           ;main.c: 59: }
  4676                           ;main.c: 60: if (RTC_MinuteReady()) {
  4677  0862  27B5  3188         	fcall	_RTC_MinuteReady
  4678  0864  3A00               	xorlw	0
  4679  0865  1903               	skipnz
  4680  0866  286D               	goto	l7162
  4681                           
  4682                           ;main.c: 61: if (gLedPara.mAuto) {
  4683  0867  0022               	movlb	2	; select bank2
  4684  0868  1C20               	btfss	_gLedPara^(0+256),0	;volatile
  4685  0869  286D               	goto	l7162
  4686                           
  4687                           ;main.c: 62: Led_CheckAutoStatus();
  4688  086A  3182  22AE  3188   	fcall	_Led_CheckAutoStatus
  4689  086D                     l7162:	
  4690                           
  4691                           ;main.c: 63: }
  4692                           ;main.c: 64: }
  4693                           ;main.c: 65: if (RTC_SecondReady()) {
  4694  086D  27B9  3188         	fcall	_RTC_SecondReady
  4695  086F  3A00               	xorlw	0
  4696  0870  1903               	skipnz
  4697  0871  2851               	goto	l505
  4698                           
  4699                           ;main.c: 66: if (gLedPara.mAuto && ir_state.mState != 4 && ir_state.mState != 5) {
  4700  0872  0022               	movlb	2	; select bank2
  4701  0873  1C20               	btfss	_gLedPara^(0+256),0	;volatile
  4702  0874  2885               	goto	l7172
  4703  0875  0020               	movlb	0	; select bank0
  4704  0876  0C36               	rrf	_ir_state,w	;volatile
  4705  0877  0C89               	rrf	9,f
  4706  0878  3907               	andlw	7
  4707  0879  3A04               	xorlw	4
  4708  087A  1903               	skipnz
  4709  087B  2885               	goto	l7172
  4710  087C  0C36               	rrf	_ir_state,w	;volatile
  4711  087D  0C89               	rrf	9,f
  4712  087E  3907               	andlw	7
  4713  087F  3A05               	xorlw	5
  4714  0880  1903               	skipnz
  4715  0881  2885               	goto	l7172
  4716                           
  4717                           ;main.c: 67: Led_AutoRun();
  4718  0882  3183  233E  3188   	fcall	_Led_AutoRun
  4719  0885                     l7172:	
  4720                           
  4721                           ;main.c: 68: }
  4722                           ;main.c: 69: IR_UpdateSetStatus();
  4723  0885  2696  3188         	fcall	_IR_UpdateSetStatus
  4724  0887  2851               	goto	l505
  4725  0888                     __end_of_main:	
  4726  0888                     __ptext65:	
  4727 ;; *************** function _Audio_GetValue *****************
  4728 ;; Defined at:
  4729 ;;		line 59 in file "user/src/audio.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;		None
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;  value           2   24[BANK0 ] unsigned int 
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  1    wreg      void 
  4736 ;; Registers used:
  4737 ;;		wreg, status,2, status,0, pclath, cstack
  4738 ;; Tracked objects:
  4739 ;;		On entry : 1F/2
  4740 ;;		On exit  : 1F/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4744 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4745 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;Total ram usage:        6 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; Hardware stack levels required when called:    8
  4750 ;; This function calls:
  4751 ;;		_ADC_Conversion
  4752 ;;		___wmul
  4753 ;; This function is called by:
  4754 ;;		_main
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           
  4759                           ;psect for function _Audio_GetValue
  4760  0888                     _Audio_GetValue:	
  4761                           
  4762                           ;audio.c: 61: static uint16_t max = 0;
  4763                           ;audio.c: 62: static uint16_t min = 0;
  4764                           ;audio.c: 63: static uint16_t cnt = 0;
  4765                           ;audio.c: 64: uint16_t value;
  4766                           ;audio.c: 66: value = ADC_Conversion ( 0x12 );
  4767                           
  4768                           ;incstack = 0
  4769                           ; Regs used in _Audio_GetValue: [wreg+status,2+status,0+pclath+cstack]
  4770  0888  3012               	movlw	18
  4771  0889  20D8  3188         	fcall	_ADC_Conversion
  4772  088B  084F               	movf	?_ADC_Conversion+1,w
  4773  088C  00D9               	movwf	Audio_GetValue@value+1
  4774  088D  084E               	movf	?_ADC_Conversion,w
  4775  088E  00D8               	movwf	Audio_GetValue@value
  4776                           
  4777                           ;audio.c: 67: if ( cnt == 0 )
  4778  088F  0824               	movf	Audio_GetValue@cnt,w
  4779  0890  0425               	iorwf	Audio_GetValue@cnt+1,w
  4780  0891  1D03               	btfss	3,2
  4781  0892  2896               	goto	l6912
  4782                           
  4783                           ;audio.c: 68: {
  4784                           ;audio.c: 69: max = value;
  4785  0893  2766  3188         	fcall	PL104	;call to abstracted procedure
  4786  0895  28A8               	goto	l6916
  4787  0896                     l6912:	
  4788                           ;audio.c: 71: }
  4789                           
  4790                           ;audio.c: 70: min = value;
  4791                           
  4792                           
  4793                           ;audio.c: 72: else
  4794                           ;audio.c: 73: {
  4795                           ;audio.c: 74: if ( max < value )
  4796  0896  0859               	movf	Audio_GetValue@value+1,w
  4797  0897  0229               	subwf	Audio_GetValue@max+1,w
  4798  0898  1D03               	skipz
  4799  0899  289C               	goto	u5805
  4800  089A  0858               	movf	Audio_GetValue@value,w
  4801  089B  0228               	subwf	Audio_GetValue@max,w
  4802  089C                     u5805:	
  4803  089C  1803               	skipnc
  4804  089D  28A0               	goto	l343
  4805                           
  4806                           ;audio.c: 75: {
  4807                           ;audio.c: 76: max = value;
  4808  089E  2766  3188         	fcall	PL104	;call to abstracted procedure
  4809  08A0                     l343:	
  4810                           
  4811                           ;audio.c: 77: }
  4812                           ;audio.c: 78: if ( min > value )
  4813  08A0  0827               	movf	Audio_GetValue@min+1,w
  4814  08A1  0259               	subwf	Audio_GetValue@value+1,w
  4815  08A2  1D03               	skipz
  4816  08A3  28A6               	goto	u5815
  4817  08A4  0826               	movf	Audio_GetValue@min,w
  4818  08A5  0258               	subwf	Audio_GetValue@value,w
  4819  08A6                     u5815:	
  4820  08A6  1803               	skipnc
  4821  08A7  28AC               	goto	l6918
  4822  08A8                     l6916:	
  4823                           
  4824                           ;audio.c: 79: {
  4825                           ;audio.c: 80: min = value;
  4826  08A8  0859               	movf	Audio_GetValue@value+1,w
  4827  08A9  00A7               	movwf	Audio_GetValue@min+1
  4828  08AA  0858               	movf	Audio_GetValue@value,w
  4829  08AB  00A6               	movwf	Audio_GetValue@min
  4830  08AC                     l6918:	
  4831                           
  4832                           ;audio.c: 81: }
  4833                           ;audio.c: 82: }
  4834                           ;audio.c: 83: cnt++;
  4835  08AC  0AA4               	incf	Audio_GetValue@cnt,f
  4836  08AD  1903               	skipnz
  4837  08AE  0AA5               	incf	Audio_GetValue@cnt+1,f
  4838                           
  4839                           ;audio.c: 84: if ( cnt >= 256 )
  4840  08AF  3001               	movlw	1
  4841  08B0  0225               	subwf	Audio_GetValue@cnt+1,w
  4842  08B1  3000               	movlw	0
  4843  08B2  1903               	skipnz
  4844  08B3  0224               	subwf	Audio_GetValue@cnt,w
  4845  08B4  1C03               	skipc
  4846  08B5  0008               	return
  4847                           
  4848                           ;audio.c: 85: {
  4849                           ;audio.c: 86: cnt = 0;
  4850  08B6  01A4               	clrf	Audio_GetValue@cnt
  4851  08B7  01A5               	clrf	Audio_GetValue@cnt+1
  4852                           
  4853                           ;audio.c: 87: (INTCONbits.GIE = 0);
  4854  08B8  138B               	bcf	11,7	;volatile
  4855                           
  4856                           ;audio.c: 88: audio_value = ( audio_value * 15 + max - min ) >> 4;
  4857  08B9  082B               	movf	_audio_value+1,w	;volatile
  4858  08BA  00CF               	movwf	___wmul@multiplier+1
  4859  08BB  082A               	movf	_audio_value,w	;volatile
  4860  08BC  00CE               	movwf	___wmul@multiplier
  4861  08BD  300F               	movlw	15
  4862  08BE  00D0               	movwf	___wmul@multiplicand
  4863  08BF  01D1               	clrf	___wmul@multiplicand+1
  4864  08C0  24D9               	fcall	___wmul
  4865  08C1  0826               	movf	Audio_GetValue@min,w
  4866  08C2  024E               	subwf	?___wmul,w
  4867  08C3  00D4               	movwf	??_Audio_GetValue
  4868  08C4  0827               	movf	Audio_GetValue@min+1,w
  4869  08C5  3B4F               	subwfb	?___wmul+1,w
  4870  08C6  00D5               	movwf	??_Audio_GetValue+1
  4871  08C7  0828               	movf	Audio_GetValue@max,w
  4872  08C8  0754               	addwf	??_Audio_GetValue,w
  4873  08C9  00D6               	movwf	??_Audio_GetValue+2
  4874  08CA  0829               	movf	Audio_GetValue@max+1,w
  4875  08CB  3D55               	addwfc	??_Audio_GetValue+1,w
  4876  08CC  00D7               	movwf	??_Audio_GetValue+3
  4877  08CD  0E56               	swapf	??_Audio_GetValue+2,w
  4878  08CE  390F               	andlw	15
  4879  08CF  00AA               	movwf	_audio_value	;volatile
  4880  08D0  0E57               	swapf	??_Audio_GetValue+3,w
  4881  08D1  39F0               	andlw	240
  4882  08D2  04AA               	iorwf	_audio_value,f	;volatile
  4883  08D3  0E57               	swapf	??_Audio_GetValue+3,w
  4884  08D4  390F               	andlw	15
  4885  08D5  00AB               	movwf	_audio_value+1	;volatile
  4886                           
  4887                           ;audio.c: 89: (INTCONbits.GIE = 1);
  4888  08D6  178B               	bsf	11,7	;volatile
  4889  08D7  0008               	return
  4890  08D8                     __end_of_Audio_GetValue:	
  4891  08D8                     __ptext67:	
  4892 ;; *************** function _ADC_Conversion *****************
  4893 ;; Defined at:
  4894 ;;		line 23 in file "driver/src/adc.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;  chn             1    wreg     unsigned char 
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;  chn             1   17[BANK0 ] unsigned char 
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  2   14[BANK0 ] unsigned int 
  4901 ;; Registers used:
  4902 ;;		wreg, status,2, status,0
  4903 ;; Tracked objects:
  4904 ;;		On entry : 1F/2
  4905 ;;		On exit  : 1F/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4908 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;Total ram usage:        4 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; Hardware stack levels required when called:    7
  4915 ;; This function calls:
  4916 ;;		Nothing
  4917 ;; This function is called by:
  4918 ;;		_Audio_GetValue
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           
  4923                           ;psect for function _ADC_Conversion
  4924  08D8                     _ADC_Conversion:	
  4925                           
  4926                           ;incstack = 0
  4927                           ; Regs used in _ADC_Conversion: [wreg+status,2+status,0]
  4928                           ;ADC_Conversion@chn stored from wreg
  4929  08D8  0020               	movlb	0	; select bank0
  4930  08D9  00D1               	movwf	ADC_Conversion@chn
  4931                           
  4932                           ;adc.c: 25: ADCON0bits.CHS = chn;
  4933  08DA  00D0               	movwf	??_ADC_Conversion
  4934  08DB  0DD0               	rlf	??_ADC_Conversion,f
  4935  08DC  0DD0               	rlf	??_ADC_Conversion,f
  4936  08DD  0021               	movlb	1	; select bank1
  4937  08DE  081D               	movf	29,w	;volatile
  4938  08DF  0020               	movlb	0	; select bank0
  4939  08E0  0650               	xorwf	??_ADC_Conversion,w
  4940  08E1  3903               	andlw	-253
  4941  08E2  0650               	xorwf	??_ADC_Conversion,w
  4942  08E3  0021               	movlb	1	; select bank1
  4943  08E4  009D               	movwf	29	;volatile
  4944                           
  4945                           ;adc.c: 26: ADCON0bits.ADON = 1;
  4946  08E5  141D               	bsf	29,0	;volatile
  4947                           
  4948                           ;adc.c: 27: _delay((unsigned long)((4)*(16000000/4000000.0)));
  4949  08E6  3005               	movlw	5
  4950  08E7                     u6347:	
  4951  08E7  0B89               	decfsz	9,f
  4952  08E8  28E7               	goto	u6347
  4953  08E9  0000               	nop
  4954                           
  4955                           ;adc.c: 28: ADCON0bits.GO_nDONE = 1;
  4956  08EA  0021               	movlb	1	; select bank1
  4957  08EB  149D               	bsf	29,1	;volatile
  4958  08EC                     l26:	
  4959                           ;adc.c: 29: while ( !PIR1bits.ADIF );
  4960                           
  4961  08EC  0020               	movlb	0	; select bank0
  4962  08ED  1F11               	btfss	17,6	;volatile
  4963  08EE  28EC               	goto	l26
  4964                           
  4965                           ;adc.c: 30: PIR1bits.ADIF = 0;
  4966  08EF  1311               	bcf	17,6	;volatile
  4967                           
  4968                           ;adc.c: 31: return ADRES;
  4969  08F0  0021               	movlb	1	; select bank1
  4970  08F1  081C               	movf	28,w	;volatile
  4971  08F2  0020               	movlb	0	; select bank0
  4972  08F3  00CF               	movwf	?_ADC_Conversion+1
  4973  08F4  0021               	movlb	1	; select bank1
  4974  08F5  081B               	movf	27,w	;volatile
  4975  08F6  0020               	movlb	0	; select bank0
  4976  08F7  00CE               	movwf	?_ADC_Conversion
  4977  08F8  0008               	return
  4978  08F9                     __end_of_ADC_Conversion:	
  4979  08F9                     __ptext51:	
  4980 ;; *************** function _Led_Initialize *****************
  4981 ;; Defined at:
  4982 ;;		line 69 in file "user/src/led.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;		None
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;  i               1   27[BANK0 ] unsigned char 
  4987 ;;  result          1   24[BANK0 ] unsigned char 
  4988 ;;  ct              2   25[BANK0 ] unsigned int 
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  1    wreg      void 
  4991 ;; Registers used:
  4992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4993 ;; Tracked objects:
  4994 ;;		On entry : 14/0
  4995 ;;		On exit  : 1F/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5000 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5001 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5002 ;;Total ram usage:        8 bytes
  5003 ;; Hardware stack levels used:    1
  5004 ;; Hardware stack levels required when called:    9
  5005 ;; This function calls:
  5006 ;;		_Audio_SetPlayMode
  5007 ;;		_Audio_SetVolume
  5008 ;;		_Audio_StopSound
  5009 ;;		_Led_TurnOffRamp
  5010 ;;		_Led_TurnOnRamp
  5011 ;;		_Led_UpdateBright
  5012 ;;		_RTC_GetTime
  5013 ;;		___wmul
  5014 ;; This function is called by:
  5015 ;;		_main
  5016 ;;		_IR_ExitSet
  5017 ;;		_IR_ExitTimeout
  5018 ;;		_IR_KeyAction
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           
  5023                           ;psect for function _Led_Initialize
  5024  08F9                     _Led_Initialize:	
  5025  08F9                     l5966:	
  5026                           ;incstack = 0
  5027                           ; Regs used in _Led_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5028                           
  5029                           
  5030                           ;led.c: 70: _delay((unsigned long)((640)*(16000000/4000.0)));
  5031  08F9  300D               	movlw	13
  5032  08FA  0020               	movlb	0	; select bank0
  5033  08FB  00D5               	movwf	??_Led_Initialize+1
  5034  08FC  30FD               	movlw	253
  5035  08FD  00D4               	movwf	??_Led_Initialize
  5036  08FE  30A2               	movlw	162
  5037  08FF                     u6307:	
  5038  08FF  0B89               	decfsz	9,f
  5039  0900  28FF               	goto	u6307
  5040  0901  0BD4               	decfsz	??_Led_Initialize,f
  5041  0902  28FF               	goto	u6307
  5042  0903  0BD5               	decfsz	??_Led_Initialize+1,f
  5043  0904  28FF               	goto	u6307
  5044  0905  0000               	nop
  5045  0906  0064               	clrwdt	;# 
  5046                           
  5047                           ;led.c: 72: Audio_StopSound();
  5048  0907  24C7  3188         	fcall	_Audio_StopSound
  5049                           
  5050                           ;led.c: 73: _delay((unsigned long)((64)*(16000000/4000.0)));
  5051  0909  3002               	movlw	2
  5052  090A  0020               	movlb	0	; select bank0
  5053  090B  00D5               	movwf	??_Led_Initialize+1
  5054  090C  304D               	movlw	77
  5055  090D  00D4               	movwf	??_Led_Initialize
  5056  090E  3074               	movlw	116
  5057  090F                     u6317:	
  5058  090F  0B89               	decfsz	9,f
  5059  0910  290F               	goto	u6317
  5060  0911  0BD4               	decfsz	??_Led_Initialize,f
  5061  0912  290F               	goto	u6317
  5062  0913  0BD5               	decfsz	??_Led_Initialize+1,f
  5063  0914  290F               	goto	u6317
  5064  0915  0000               	nop
  5065                           
  5066                           ;led.c: 74: Audio_SetVolume(gLedPara.mVolOn ? VOLUME[ gLedPara.mVolume ] : 0);
  5067  0916  0022               	movlb	2	; select bank2
  5068  0917  1920               	btfsc	_gLedPara^(0+256),2	;volatile
  5069  0918  291C               	goto	l5976
  5070  0919  0020               	movlb	0	; select bank0
  5071  091A  01D6               	clrf	_Led_Initialize$1206
  5072  091B  2920               	goto	L17
  5073  091C                     l5976:	
  5074  091C  26FB  3188         	fcall	PL30	;call to abstracted procedure
  5075  091E  0020               	movlb	0	; select bank0
  5076  091F  00D6               	movwf	_Led_Initialize$1206
  5077  0920                     L17:	
  5078  0920  01D7               	clrf	_Led_Initialize$1206+1
  5079  0921  0856               	movf	_Led_Initialize$1206,w
  5080  0922  2216  3188         	fcall	_Audio_SetVolume
  5081                           
  5082                           ;led.c: 75: _delay((unsigned long)((64)*(16000000/4000.0)));
  5083  0924  3002               	movlw	2
  5084  0925  0020               	movlb	0	; select bank0
  5085  0926  00D5               	movwf	??_Led_Initialize+1
  5086  0927  304D               	movlw	77
  5087  0928  00D4               	movwf	??_Led_Initialize
  5088  0929  3074               	movlw	116
  5089  092A                     u6327:	
  5090  092A  0B89               	decfsz	9,f
  5091  092B  292A               	goto	u6327
  5092  092C  0BD4               	decfsz	??_Led_Initialize,f
  5093  092D  292A               	goto	u6327
  5094  092E  0BD5               	decfsz	??_Led_Initialize+1,f
  5095  092F  292A               	goto	u6327
  5096  0930  0000               	nop
  5097                           
  5098                           ;led.c: 76: Audio_SetPlayMode(0x02);
  5099  0931  3002               	movlw	2
  5100  0932  21FF  3188         	fcall	_Audio_SetPlayMode
  5101                           
  5102                           ;led.c: 77: _delay((unsigned long)((64)*(16000000/4000.0)));
  5103  0934  3002               	movlw	2
  5104  0935  0020               	movlb	0	; select bank0
  5105  0936  00D5               	movwf	??_Led_Initialize+1
  5106  0937  304D               	movlw	77
  5107  0938  00D4               	movwf	??_Led_Initialize
  5108  0939  3074               	movlw	116
  5109  093A                     u6337:	
  5110  093A  0B89               	decfsz	9,f
  5111  093B  293A               	goto	u6337
  5112  093C  0BD4               	decfsz	??_Led_Initialize,f
  5113  093D  293A               	goto	u6337
  5114  093E  0BD5               	decfsz	??_Led_Initialize+1,f
  5115  093F  293A               	goto	u6337
  5116  0940  0000               	nop
  5117                           
  5118                           ;led.c: 78: uint16_t ct = RTC_GetTime()->hour * 60u + RTC_GetTime()->minute;
  5119  0941  255E               	fcall	_RTC_GetTime
  5120  0942  3183  2334  3188   	fcall	PL54	;call to abstracted procedure
  5121  0945  24D9  3188         	fcall	___wmul
  5122  0947  084F               	movf	?___wmul+1,w
  5123  0948  00DA               	movwf	Led_Initialize@ct+1
  5124  0949  084E               	movf	?___wmul,w
  5125  094A  00D9               	movwf	Led_Initialize@ct
  5126  094B  255E  3188         	fcall	_RTC_GetTime
  5127  094D  0020               	movlb	0	; select bank0
  5128  094E  00D4               	movwf	??_Led_Initialize
  5129  094F  3E01               	addlw	1
  5130  0950  0086               	movwf	6
  5131  0951  0187               	clrf	7
  5132  0952  0801               	movf	1,w
  5133  0953  07D9               	addwf	Led_Initialize@ct,f
  5134  0954  1803               	skipnc
  5135  0955  0ADA               	incf	Led_Initialize@ct+1,f
  5136                           
  5137                           ;led.c: 79: if (!gLedPara.mAuto) {
  5138  0956  0022               	movlb	2	; select bank2
  5139  0957  1820               	btfsc	_gLedPara^(0+256),0	;volatile
  5140  0958  29A3               	goto	l6048
  5141                           
  5142                           ;led.c: 80: if (!gLedPara.mOn) {
  5143  0959  18A0               	btfsc	_gLedPara^(0+256),1	;volatile
  5144  095A  295C               	goto	l5996
  5145                           
  5146                           ;led.c: 81: Led_TurnOffRamp();
  5147  095B  2A2D               	ljmp	l5898
  5148  095C                     l5996:	
  5149                           ;led.c: 82: } else {
  5150                           
  5151                           
  5152                           ;led.c: 83: if (gLedPara.mMsc) {
  5153  095C  273C  3188         	fcall	PL58	;call to abstracted procedure
  5154  095E  1903               	skipnz
  5155  095F  29A1               	goto	l6046
  5156                           
  5157                           ;led.c: 84: gLedRunPara.music_index = gLedPara.mMsc;
  5158  0960  0022               	movlb	2	; select bank2
  5159  0961  273C  3188         	fcall	PL58	;call to abstracted procedure
  5160  0963  0021               	movlb	1	; select bank1
  5161  0964  00E0               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
  5162                           
  5163                           ;led.c: 85: gLedRunPara.music_state = 1;
  5164  0965  3001               	movlw	1
  5165  0966  00E1               	movwf	(_gLedRunPara^(0+128)+25)	;volatile
  5166                           
  5167                           ;led.c: 86: switch (gLedPara.mMsc) {
  5168  0967  2991               	goto	l6044
  5169  0968                     l6002:	
  5170                           
  5171                           ;led.c: 88: gLedRunPara.mCurrentBright[0] = 1000;
  5172  0968  2756  3188         	fcall	PL94	;call to abstracted procedure
  5173                           
  5174                           ;led.c: 89: gLedRunPara.mCurrentBright[1] = 1000;
  5175  096A  00CB               	movwf	((_gLedRunPara+1)^(0+128)+2)	;volatile
  5176  096B  30E8               	movlw	232
  5177  096C  00CA               	movwf	(_gLedRunPara^(0+128)+2)	;volatile
  5178  096D                     l6006:	
  5179                           
  5180                           ;led.c: 90: gLedRunPara.mCurrentBright[2] = 1000;
  5181  096D  3003               	movlw	3
  5182  096E  00CD               	movwf	((_gLedRunPara+1)^(0+128)+4)	;volatile
  5183  096F  30E8               	movlw	232
  5184  0970  00CC               	movwf	(_gLedRunPara^(0+128)+4)	;volatile
  5185                           
  5186                           ;led.c: 91: gLedRunPara.mCurrentBright[3] = 1000;
  5187  0971  3003               	movlw	3
  5188  0972  00CF               	movwf	((_gLedRunPara+1)^(0+128)+6)	;volatile
  5189  0973  30E8               	movlw	232
  5190  0974  00CE               	movwf	(_gLedRunPara^(0+128)+6)	;volatile
  5191                           
  5192                           ;led.c: 92: gLedRunPara.mCurrentBright[4] = 1000;
  5193  0975  3003               	movlw	3
  5194  0976  00D1               	movwf	((_gLedRunPara+1)^(0+128)+8)	;volatile
  5195  0977  30E8               	movlw	232
  5196  0978  00D0               	movwf	(_gLedRunPara^(0+128)+8)	;volatile
  5197  0979                     l6012:	
  5198                           
  5199                           ;led.c: 93: Led_UpdateBright();
  5200  0979  2A50               	ljmp	l5912
  5201  097A                     l6014:	
  5202                           ;led.c: 94: break;
  5203                           
  5204                           
  5205                           ;led.c: 96: gLedRunPara.mCurrentBright[0] = 0;
  5206  097A  0021               	movlb	1	; select bank1
  5207  097B  01C8               	clrf	_gLedRunPara^(0+128)	;volatile
  5208  097C  01C9               	clrf	(_gLedRunPara+1)^(0+128)	;volatile
  5209                           
  5210                           ;led.c: 97: gLedRunPara.mCurrentBright[1] = 0;
  5211  097D  01CA               	clrf	(_gLedRunPara^(0+128)+2)	;volatile
  5212  097E  01CB               	clrf	((_gLedRunPara+1)^(0+128)+2)	;volatile
  5213                           
  5214                           ;led.c: 98: gLedRunPara.mCurrentBright[2] = 1000;
  5215  097F  3003               	movlw	3
  5216  0980  00CD               	movwf	((_gLedRunPara+1)^(0+128)+4)	;volatile
  5217  0981  30E8               	movlw	232
  5218  0982  00CC               	movwf	(_gLedRunPara^(0+128)+4)	;volatile
  5219                           
  5220                           ;led.c: 99: gLedRunPara.mCurrentBright[3] = 0;
  5221  0983  01CE               	clrf	(_gLedRunPara^(0+128)+6)	;volatile
  5222  0984  01CF               	clrf	((_gLedRunPara+1)^(0+128)+6)	;volatile
  5223                           
  5224                           ;led.c: 100: gLedRunPara.mCurrentBright[4] = 0;
  5225  0985  01D0               	clrf	(_gLedRunPara^(0+128)+8)	;volatile
  5226  0986  01D1               	clrf	((_gLedRunPara+1)^(0+128)+8)	;volatile
  5227  0987  2979               	goto	l6012
  5228  0988                     l6020:	
  5229                           
  5230                           ;led.c: 104: gLedRunPara.mCurrentBright[0] = 0;
  5231  0988  0021               	movlb	1	; select bank1
  5232  0989  01C8               	clrf	_gLedRunPara^(0+128)	;volatile
  5233  098A  01C9               	clrf	(_gLedRunPara+1)^(0+128)	;volatile
  5234  098B  298E               	goto	l6032
  5235  098C                     l6030:	
  5236                           ;led.c: 105: gLedRunPara.mCurrentBright[1] = 0;
  5237                           
  5238                           
  5239                           ;led.c: 112: gLedRunPara.mCurrentBright[0] = 1000;
  5240  098C  2756  3188         	fcall	PL94	;call to abstracted procedure
  5241  098E                     l6032:	
  5242                           
  5243                           ;led.c: 113: gLedRunPara.mCurrentBright[1] = 0;
  5244  098E  01CA               	clrf	(_gLedRunPara^(0+128)+2)	;volatile
  5245  098F  01CB               	clrf	((_gLedRunPara+1)^(0+128)+2)	;volatile
  5246  0990  296D               	goto	l6006
  5247  0991                     l6044:	
  5248  0991  0022               	movlb	2	; select bank2
  5249  0992  273C  3188         	fcall	PL58	;call to abstracted procedure
  5250                           
  5251                           ; Switch size 1, requested type "space"
  5252                           ; Number of cases is 4, Range of values is 1 to 4
  5253                           ; switch strategies available:
  5254                           ; Name         Instructions Cycles
  5255                           ; simple_byte           13     7 (average)
  5256                           ; direct_byte           17     9 (fixed)
  5257                           ; jumptable            263     9 (fixed)
  5258                           ;	Chosen strategy is simple_byte
  5259  0994  3A01               	xorlw	1	; case 1
  5260  0995  1903               	skipnz
  5261  0996  2968               	goto	l6002
  5262  0997  3A03               	xorlw	3	; case 2
  5263  0998  1903               	skipnz
  5264  0999  297A               	goto	l6014
  5265  099A  3A01               	xorlw	1	; case 3
  5266  099B  1903               	skipnz
  5267  099C  2988               	goto	l6020
  5268  099D  3A07               	xorlw	7	; case 4
  5269  099E  1903               	skipnz
  5270  099F  298C               	goto	l6030
  5271  09A0  29A2               	goto	l634
  5272  09A1                     l6046:	
  5273                           
  5274                           ;led.c: 123: Led_TurnOnRamp();
  5275  09A1  223D               	fcall	_Led_TurnOnRamp
  5276  09A2                     l634:	
  5277                           
  5278                           ;led.c: 124: }
  5279                           ;led.c: 125: }
  5280                           ;led.c: 126: } else {
  5281  09A2  0008               	return
  5282  09A3                     l6048:	
  5283                           
  5284                           ;led.c: 127: bool result = 0;
  5285  09A3  0020               	movlb	0	; select bank0
  5286  09A4  01D8               	clrf	Led_Initialize@result
  5287                           
  5288                           ;led.c: 128: uint8_t i;
  5289                           ;led.c: 129: if (gLedPara.mSunrise < gLedPara.mSunset) {
  5290  09A5  0022               	movlb	2	; select bank2
  5291  09A6  0863               	movf	((_gLedPara+1)^(0+256)+66),w	;volatile
  5292  09A7  0257               	subwf	((_gLedPara+1)^(0+256)+54),w	;volatile
  5293  09A8  1D03               	skipz
  5294  09A9  29AC               	goto	u4855
  5295  09AA  0862               	movf	(_gLedPara^(0+256)+66),w	;volatile
  5296  09AB  0256               	subwf	(_gLedPara^(0+256)+54),w	;volatile
  5297  09AC                     u4855:	
  5298  09AC  1803               	skipnc
  5299  09AD  29B8               	goto	l6058
  5300                           
  5301                           ;led.c: 130: if (ct >= gLedPara.mSunrise && ct < gLedPara.mSunset) {
  5302  09AE  0857               	movf	((_gLedPara+1)^(0+256)+54),w	;volatile
  5303  09AF  0020               	movlb	0	; select bank0
  5304  09B0  025A               	subwf	Led_Initialize@ct+1,w
  5305  09B1  1D03               	skipz
  5306  09B2  29B5               	goto	u4865
  5307  09B3  276B  3188         	fcall	PL110	;call to abstracted procedure
  5308  09B5                     u4865:	
  5309  09B5  1C03               	skipc
  5310  09B6  29D7               	goto	l6064
  5311  09B7  29C9               	goto	L18
  5312  09B8                     l6058:	
  5313  09B8  0857               	movf	((_gLedPara+1)^(0+256)+54),w	;volatile
  5314  09B9  0263               	subwf	((_gLedPara+1)^(0+256)+66),w	;volatile
  5315  09BA  1D03               	skipz
  5316  09BB  29BE               	goto	u4885
  5317  09BC  0856               	movf	(_gLedPara^(0+256)+54),w	;volatile
  5318  09BD  0262               	subwf	(_gLedPara^(0+256)+66),w	;volatile
  5319  09BE                     u4885:	
  5320  09BE  1803               	skipnc
  5321  09BF  29D7               	goto	l6064
  5322                           
  5323                           ;led.c: 134: if (ct >= gLedPara.mSunrise || ct < gLedPara.mSunset) {
  5324  09C0  0857               	movf	((_gLedPara+1)^(0+256)+54),w	;volatile
  5325  09C1  0020               	movlb	0	; select bank0
  5326  09C2  025A               	subwf	Led_Initialize@ct+1,w
  5327  09C3  1D03               	skipz
  5328  09C4  29C7               	goto	u4895
  5329  09C5  276B  3188         	fcall	PL110	;call to abstracted procedure
  5330  09C7                     u4895:	
  5331  09C7  1803               	skipnc
  5332  09C8  29D5               	goto	l6056
  5333  09C9                     L18:	
  5334  09C9  0022               	movlb	2	; select bank2
  5335  09CA  0863               	movf	((_gLedPara+1)^(0+256)+66),w	;volatile
  5336  09CB  0020               	movlb	0	; select bank0
  5337  09CC  025A               	subwf	Led_Initialize@ct+1,w
  5338  09CD  1D03               	skipz
  5339  09CE  29D3               	goto	u4905
  5340  09CF  0022               	movlb	2	; select bank2
  5341  09D0  0862               	movf	(_gLedPara^(0+256)+66),w	;volatile
  5342  09D1  0020               	movlb	0	; select bank0
  5343  09D2  0259               	subwf	Led_Initialize@ct,w
  5344  09D3                     u4905:	
  5345  09D3  1803               	skipnc
  5346  09D4  29D7               	goto	l6064
  5347  09D5                     l6056:	
  5348                           
  5349                           ;led.c: 131: result = 1;
  5350  09D5  01D8               	clrf	Led_Initialize@result
  5351  09D6  0AD8               	incf	Led_Initialize@result,f
  5352  09D7                     l6064:	
  5353                           
  5354                           ;led.c: 136: }
  5355                           ;led.c: 137: }
  5356                           ;led.c: 138: if (result) {
  5357  09D7  0020               	movlb	0	; select bank0
  5358  09D8  0858               	movf	Led_Initialize@result,w
  5359  09D9  1903               	btfsc	3,2
  5360  09DA  29ED               	goto	l6078
  5361                           
  5362                           ;led.c: 139: for (i = 0; i < 5; i++) {
  5363  09DB  01DB               	clrf	Led_Initialize@i
  5364  09DC                     l6072:	
  5365                           
  5366                           ;led.c: 140: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
  5367  09DC  355B               	lslf	Led_Initialize@i,w
  5368  09DD  3E58               	addlw	(low ((_gLedPara| (0+256)+56)))& (0+255)
  5369  09DE  2711               	fcall	PL34	;call to abstracted procedure
  5370  09DF  3183  232C  3188   	fcall	PL2	;call to abstracted procedure
  5371                           
  5372                           ;led.c: 141: gLedRunPara.mCurrentBright[i] = gLedPara.mDayBright[i];
  5373  09E2  355B               	lslf	Led_Initialize@i,w
  5374  09E3  3E58               	addlw	(low ((_gLedPara| (0+256)+56)))& (0+255)
  5375  09E4  2716  3188         	fcall	PL40	;call to abstracted procedure
  5376  09E6  26DD  3188         	fcall	PL24	;call to abstracted procedure
  5377  09E8  0ADB               	incf	Led_Initialize@i,f
  5378  09E9  025B               	subwf	Led_Initialize@i,w
  5379  09EA  1803               	btfsc	3,0
  5380  09EB  2979               	goto	l6012
  5381  09EC  29DC               	goto	l6072
  5382  09ED                     l6078:	
  5383                           
  5384                           ;led.c: 144: for (i = 0; i < 5; i++) {
  5385  09ED  01DB               	clrf	Led_Initialize@i
  5386  09EE                     l6084:	
  5387                           
  5388                           ;led.c: 145: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
  5389  09EE  355B               	lslf	Led_Initialize@i,w
  5390  09EF  3E64               	addlw	(low ((_gLedPara| (0+256)+68)))& (0+255)
  5391  09F0  2711               	fcall	PL34	;call to abstracted procedure
  5392  09F1  3183  232C  3188   	fcall	PL2	;call to abstracted procedure
  5393                           
  5394                           ;led.c: 146: gLedRunPara.mCurrentBright[i] = gLedPara.mNightBright[i];
  5395  09F4  355B               	lslf	Led_Initialize@i,w
  5396  09F5  3E64               	addlw	(low ((_gLedPara| (0+256)+68)))& (0+255)
  5397  09F6  2716  3188         	fcall	PL40	;call to abstracted procedure
  5398  09F8  26DD  3188         	fcall	PL24	;call to abstracted procedure
  5399  09FA  0ADB               	incf	Led_Initialize@i,f
  5400  09FB  025B               	subwf	Led_Initialize@i,w
  5401  09FC  1803               	btfsc	3,0
  5402  09FD  2979               	goto	l6012
  5403  09FE  29EE               	goto	l6084
  5404  09FF                     __end_of_Led_Initialize:	
  5405  09FF                     __ptext63:	
  5406 ;; *************** function _Audio_SetPlayMode *****************
  5407 ;; Defined at:
  5408 ;;		line 37 in file "user/src/audio.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;  type            1    wreg     unsigned char 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  type            1   15[BANK0 ] unsigned char 
  5413 ;;  checksum        1   16[BANK0 ] unsigned char 
  5414 ;; Return value:  Size  Location     Type
  5415 ;;                  1    wreg      void 
  5416 ;; Registers used:
  5417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 1F/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5427 ;;Total ram usage:        2 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; Hardware stack levels required when called:    8
  5430 ;; This function calls:
  5431 ;;		_EUSART_Write
  5432 ;; This function is called by:
  5433 ;;		_Led_Initialize
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           
  5438                           ;psect for function _Audio_SetPlayMode
  5439  09FF                     _Audio_SetPlayMode:	
  5440                           
  5441                           ;incstack = 0
  5442                           ; Regs used in _Audio_SetPlayMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5443                           ;Audio_SetPlayMode@type stored from wreg
  5444  09FF  0020               	movlb	0	; select bank0
  5445  0A00  00CF               	movwf	Audio_SetPlayMode@type
  5446  0A01  307E               	movlw	126
  5447                           
  5448                           ;audio.c: 39: uint8_t checksum = 0x00;
  5449  0A02  01D0               	clrf	Audio_SetPlayMode@checksum
  5450                           
  5451                           ;audio.c: 40: EUSART_Write ( 0x7E );
  5452  0A03  24EE  3188         	fcall	_EUSART_Write
  5453                           
  5454                           ;audio.c: 41: checksum ^= EUSART_Write ( 0x04 );
  5455  0A05  3004               	movlw	4
  5456  0A06  24EE  3188         	fcall	_EUSART_Write
  5457  0A08  06D0               	xorwf	Audio_SetPlayMode@checksum,f
  5458                           
  5459                           ;audio.c: 42: checksum ^= EUSART_Write ( 0x33 );
  5460  0A09  3033               	movlw	51
  5461  0A0A  24EE  3188         	fcall	_EUSART_Write
  5462  0A0C  06D0               	xorwf	Audio_SetPlayMode@checksum,f
  5463                           
  5464                           ;audio.c: 43: checksum ^= EUSART_Write ( type );
  5465  0A0D  084F               	movf	Audio_SetPlayMode@type,w
  5466  0A0E  24EE  3188         	fcall	_EUSART_Write
  5467  0A10  06D0               	xorwf	Audio_SetPlayMode@checksum,f
  5468                           
  5469                           ;audio.c: 44: EUSART_Write ( checksum );
  5470  0A11  0850               	movf	Audio_SetPlayMode@checksum,w
  5471  0A12  24EE  3188         	fcall	_EUSART_Write
  5472                           
  5473                           ;audio.c: 45: EUSART_Write ( 0xEF );
  5474  0A14  30EF               	movlw	239
  5475  0A15  2CEE               	ljmp	_EUSART_Write
  5476  0A16                     __end_of_Audio_SetPlayMode:	
  5477  0A16                     __ptext62:	
  5478 ;; *************** function _Audio_SetVolume *****************
  5479 ;; Defined at:
  5480 ;;		line 48 in file "user/src/audio.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;  vol             1    wreg     unsigned char 
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;  vol             1   15[BANK0 ] unsigned char 
  5485 ;;  checksum        1   16[BANK0 ] unsigned char 
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      void 
  5488 ;; Registers used:
  5489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5490 ;; Tracked objects:
  5491 ;;		On entry : 1D/2
  5492 ;;		On exit  : 1F/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;Total ram usage:        2 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    8
  5502 ;; This function calls:
  5503 ;;		_EUSART_Write
  5504 ;; This function is called by:
  5505 ;;		_Led_Initialize
  5506 ;;		_IR_KeyAction
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           
  5511                           ;psect for function _Audio_SetVolume
  5512  0A16                     _Audio_SetVolume:	
  5513                           
  5514                           ;incstack = 0
  5515                           ; Regs used in _Audio_SetVolume: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5516                           ;Audio_SetVolume@vol stored from wreg
  5517  0A16  0020               	movlb	0	; select bank0
  5518  0A17  00CF               	movwf	Audio_SetVolume@vol
  5519  0A18  307E               	movlw	126
  5520                           
  5521                           ;audio.c: 50: uint8_t checksum = 0x00;
  5522  0A19  01D0               	clrf	Audio_SetVolume@checksum
  5523                           
  5524                           ;audio.c: 51: EUSART_Write ( 0x7E );
  5525  0A1A  24EE  3188         	fcall	_EUSART_Write
  5526                           
  5527                           ;audio.c: 52: checksum ^= EUSART_Write ( 0x04 );
  5528  0A1C  3004               	movlw	4
  5529  0A1D  24EE  3188         	fcall	_EUSART_Write
  5530  0A1F  06D0               	xorwf	Audio_SetVolume@checksum,f
  5531                           
  5532                           ;audio.c: 53: checksum ^= EUSART_Write ( 0x31 );
  5533  0A20  3031               	movlw	49
  5534  0A21  24EE  3188         	fcall	_EUSART_Write
  5535  0A23  06D0               	xorwf	Audio_SetVolume@checksum,f
  5536                           
  5537                           ;audio.c: 54: checksum ^= EUSART_Write ( vol );
  5538  0A24  084F               	movf	Audio_SetVolume@vol,w
  5539  0A25  24EE  3188         	fcall	_EUSART_Write
  5540  0A27  06D0               	xorwf	Audio_SetVolume@checksum,f
  5541                           
  5542                           ;audio.c: 55: EUSART_Write ( checksum );
  5543  0A28  0850               	movf	Audio_SetVolume@checksum,w
  5544  0A29  24EE  3188         	fcall	_EUSART_Write
  5545                           
  5546                           ;audio.c: 56: EUSART_Write ( 0xEF );
  5547  0A2B  30EF               	movlw	239
  5548  0A2C  2CEE               	ljmp	_EUSART_Write
  5549  0A2D                     __end_of_Audio_SetVolume:	
  5550  0A2D                     __ptext60:	
  5551 ;; *************** function _Led_TurnOffRamp *****************
  5552 ;; Defined at:
  5553 ;;		line 189 in file "user/src/led.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;		None
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;  i               1   14[BANK0 ] unsigned char 
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  1    wreg      void 
  5560 ;; Registers used:
  5561 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5562 ;; Tracked objects:
  5563 ;;		On entry : 1F/2
  5564 ;;		On exit  : 1F/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5568 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5570 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5571 ;;Total ram usage:        1 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; Hardware stack levels required when called:    7
  5574 ;; This function calls:
  5575 ;;		Nothing
  5576 ;; This function is called by:
  5577 ;;		_Led_Initialize
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           
  5582                           ;psect for function _Led_TurnOffRamp
  5583  0A2D                     _Led_TurnOffRamp:	
  5584  0A2D                     l5898:	
  5585                           ;incstack = 0
  5586                           ; Regs used in _Led_TurnOffRamp: [wreg+fsr1l+fsr1h+status,2+status,0]
  5587                           
  5588                           
  5589                           ;led.c: 190: gLedPara.mOn = 0;
  5590  0A2D  10A0               	bcf	_gLedPara^(0+256),1	;volatile
  5591                           
  5592                           ;led.c: 191: for (uint8_t i = 0; i < 5; i++) {
  5593  0A2E  0020               	movlb	0	; select bank0
  5594  0A2F  01CE               	clrf	Led_TurnOffRamp@i
  5595  0A30                     l5906:	
  5596                           
  5597                           ;led.c: 192: gLedRunPara.mTargetBright[i] = 0;
  5598  0A30  354E               	lslf	Led_TurnOffRamp@i,w
  5599  0A31  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  5600  0A32  0086               	movwf	6
  5601  0A33  3000               	movlw	0
  5602  0A34  0187               	clrf	7
  5603  0A35  3FC0               	movwi [0]fsr1
  5604  0A36  3FC1               	movwi [1]fsr1
  5605  0A37  3005               	movlw	5
  5606  0A38  0ACE               	incf	Led_TurnOffRamp@i,f
  5607  0A39  024E               	subwf	Led_TurnOffRamp@i,w
  5608  0A3A  1803               	btfsc	3,0
  5609  0A3B  0008               	return
  5610  0A3C  2A30               	goto	l5906
  5611  0A3D                     __end_of_Led_TurnOffRamp:	
  5612  0A3D                     __ptext59:	
  5613 ;; *************** function _Led_TurnOnRamp *****************
  5614 ;; Defined at:
  5615 ;;		line 182 in file "user/src/led.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;		None
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;  i               1   14[BANK0 ] unsigned char 
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  1    wreg      void 
  5622 ;; Registers used:
  5623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5624 ;; Tracked objects:
  5625 ;;		On entry : 1F/0
  5626 ;;		On exit  : 1F/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5633 ;;Total ram usage:        1 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; Hardware stack levels required when called:    7
  5636 ;; This function calls:
  5637 ;;		Nothing
  5638 ;; This function is called by:
  5639 ;;		_Led_Initialize
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           
  5644                           ;psect for function _Led_TurnOnRamp
  5645  0A3D                     _Led_TurnOnRamp:	
  5646                           
  5647                           ;led.c: 183: gLedPara.mOn = 1;
  5648                           
  5649                           ;incstack = 0
  5650                           ; Regs used in _Led_TurnOnRamp: [wreg-fsr1h+status,2+status,0]
  5651  0A3D  0022               	movlb	2	; select bank2
  5652  0A3E  14A0               	bsf	_gLedPara^(0+256),1	;volatile
  5653                           
  5654                           ;led.c: 184: for (uint8_t i = 0; i < 5; i++) {
  5655  0A3F  0020               	movlb	0	; select bank0
  5656  0A40  01CE               	clrf	Led_TurnOnRamp@i
  5657  0A41                     l5932:	
  5658                           
  5659                           ;led.c: 185: gLedRunPara.mTargetBright[i] = gLedPara.mBright[i];
  5660  0A41  354E               	lslf	Led_TurnOnRamp@i,w
  5661  0A42  3E24               	addlw	(low ((_gLedPara| (0+256)+4)))& (0+255)
  5662  0A43  0086               	movwf	6
  5663  0A44  3001               	movlw	1	; select bank2/3
  5664  0A45  0087               	movwf	7
  5665  0A46  354E               	lslf	Led_TurnOnRamp@i,w
  5666  0A47  3183  232C  3188   	fcall	PL2	;call to abstracted procedure
  5667  0A4A  3005               	movlw	5
  5668  0A4B  0ACE               	incf	Led_TurnOnRamp@i,f
  5669  0A4C  024E               	subwf	Led_TurnOnRamp@i,w
  5670  0A4D  1803               	btfsc	3,0
  5671  0A4E  0008               	return
  5672  0A4F  2A41               	goto	l5932
  5673  0A50                     __end_of_Led_TurnOnRamp:	
  5674  0A50                     __ptext53:	
  5675 ;; *************** function _Led_UpdateBright *****************
  5676 ;; Defined at:
  5677 ;;		line 160 in file "user/src/led.c"
  5678 ;; Parameters:    Size  Location     Type
  5679 ;;		None
  5680 ;; Auto vars:     Size  Location     Type
  5681 ;;  i               1   18[BANK0 ] unsigned char 
  5682 ;; Return value:  Size  Location     Type
  5683 ;;                  1    wreg      void 
  5684 ;; Registers used:
  5685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5686 ;; Tracked objects:
  5687 ;;		On entry : 14/1
  5688 ;;		On exit  : 1F/0
  5689 ;;		Unchanged: 0/0
  5690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;Total ram usage:        1 bytes
  5696 ;; Hardware stack levels used:    1
  5697 ;; Hardware stack levels required when called:    8
  5698 ;; This function calls:
  5699 ;;		_PWM1_LoadDutyValue
  5700 ;;		_PWM2_LoadDutyValue
  5701 ;;		_PWM3_LoadDutyValue
  5702 ;;		_PWM4_LoadDutyValue
  5703 ;;		_PWM5_LoadDutyValue
  5704 ;; This function is called by:
  5705 ;;		_Led_Initialize
  5706 ;;		_Led_CheckAutoStatus
  5707 ;;		_Led_AutoRun
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           
  5712                           ;psect for function _Led_UpdateBright
  5713  0A50                     _Led_UpdateBright:	
  5714  0A50                     l5912:	
  5715                           ;incstack = 0
  5716                           ; Regs used in _Led_UpdateBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5717                           
  5718                           
  5719                           ;led.c: 161: for (uint8_t i = 0; i < 5; i++) {
  5720  0A50  0020               	movlb	0	; select bank0
  5721  0A51  01D2               	clrf	Led_UpdateBright@i
  5722  0A52                     l5918:	
  5723                           
  5724                           ;led.c: 162: loadDuty[i](gLedRunPara.mCurrentBright[i]);
  5725  0A52  3552               	lslf	Led_UpdateBright@i,w
  5726  0A53  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
  5727  0A54  0086               	movwf	6
  5728  0A55  0187               	clrf	7
  5729  0A56  3F40               	moviw [0]fsr1
  5730  0A57  00CE               	movwf	PWM5_LoadDutyValue@dutyValue
  5731  0A58  3F41               	moviw [1]fsr1
  5732  0A59  00CF               	movwf	PWM5_LoadDutyValue@dutyValue+1
  5733  0A5A  3552               	lslf	Led_UpdateBright@i,w
  5734  0A5B  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
  5735  0A5C  0086               	movwf	6
  5736  0A5D  3F41               	moviw [1]fsr1
  5737  0A5E  008A               	movwf	10
  5738  0A5F  3F40               	moviw [0]fsr1
  5739  0A60  000A               	callw
  5740  0A61  3188               	pagesel	$
  5741  0A62  0020               	movlb	0	; select bank0
  5742  0A63  3005               	movlw	5
  5743  0A64  0AD2               	incf	Led_UpdateBright@i,f
  5744  0A65  0252               	subwf	Led_UpdateBright@i,w
  5745  0A66  1803               	btfsc	3,0
  5746  0A67  0008               	return
  5747  0A68  2A52               	goto	l5918
  5748  0A69                     __end_of_Led_UpdateBright:	
  5749  0A69                     __ptext40:	
  5750 ;; *************** function _IR_KeyAction *****************
  5751 ;; Defined at:
  5752 ;;		line 450 in file "user/src/ir.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;		None
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;  i               1   14[BANK3 ] unsigned char 
  5757 ;;  i               1   13[BANK3 ] unsigned char 
  5758 ;;  i               1   12[BANK3 ] unsigned char 
  5759 ;;  i               1   16[BANK3 ] unsigned char 
  5760 ;;  i               1   15[BANK3 ] unsigned char 
  5761 ;;  i               1   11[BANK3 ] unsigned char 
  5762 ;;  i               1   10[BANK3 ] unsigned char 
  5763 ;;  idx             1   17[BANK3 ] unsigned char 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      void 
  5766 ;; Registers used:
  5767 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5768 ;; Tracked objects:
  5769 ;;		On entry : 1F/0
  5770 ;;		On exit  : 1F/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5774 ;;      Locals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0
  5775 ;;      Temps:          0       0       0       0      10       0       0       0       0       0       0       0       
      +0       0
  5776 ;;      Totals:         0       0       0       0      18       0       0       0       0       0       0       0       
      +0       0
  5777 ;;Total ram usage:       18 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:   11
  5780 ;; This function calls:
  5781 ;;		_Audio_SetVolume
  5782 ;;		_Audio_StopSound
  5783 ;;		_IR_ExitSet
  5784 ;;		_IR_GetIndex
  5785 ;;		_IR_IsValidTime
  5786 ;;		_Led_Initialize
  5787 ;;		_Led_StartNotice
  5788 ;;		_RTC_GetTime
  5789 ;;		_TMR2_DisableInterrupt
  5790 ;;		_TMR2_EnableInterrupt
  5791 ;;		_Util_DecValue
  5792 ;;		_Util_IncValue
  5793 ;;		___bmul
  5794 ;;		___wmul
  5795 ;; This function is called by:
  5796 ;;		_IR_KeyAtionIfPressed
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           
  5801                           ;psect for function _IR_KeyAction
  5802  0A69                     _IR_KeyAction:	
  5803  0A69                     l6566:	
  5804                           ;incstack = 0
  5805                           ; Regs used in _IR_KeyAction: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5806                           
  5807                           
  5808                           ;ir.c: 451: uint8_t idx;
  5809                           ;ir.c: 452: ir_state.mKeyRcv = 0;
  5810  0A69  1036               	bcf	_ir_state,0	;volatile
  5811                           
  5812                           ;ir.c: 453: TMR2_DisableInterrupt();
  5813  0A6A  256C  3188         	fcall	_TMR2_DisableInterrupt
  5814                           
  5815                           ;ir.c: 454: switch (keyValue) {
  5816  0A6C  2C48               	goto	l6894
  5817  0A6D                     l6570:	
  5818                           
  5819                           ;ir.c: 456: Audio_StopSound();
  5820  0A6D  24C7  3188         	fcall	_Audio_StopSound
  5821                           
  5822                           ;ir.c: 457: gLedPara.mMsc = 1;
  5823  0A6F  0022               	movlb	2	; select bank2
  5824  0A70  0820               	movf	_gLedPara^(0+256),w	;volatile
  5825  0A71  3987               	andlw	-121
  5826  0A72  3808               	iorlw	8
  5827  0A73  00A0               	movwf	_gLedPara^(0+256)	;volatile
  5828                           
  5829                           ;ir.c: 458: gLedPara.mDyn = 0;
  5830  0A74  13A0               	bcf	_gLedPara^(0+256),7	;volatile
  5831                           
  5832                           ;ir.c: 459: gLedPara.mAuto = 0;
  5833  0A75  1020               	bcf	_gLedPara^(0+256),0	;volatile
  5834                           
  5835                           ;ir.c: 460: gLedRunPara.music_index = 1;
  5836  0A76  3001               	movlw	1
  5837  0A77                     L2:	
  5838  0A77  0021               	movlb	1	; select bank1
  5839  0A78  00E0               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
  5840  0A79                     l6580:	
  5841                           
  5842                           ;ir.c: 461: gLedRunPara.mParaChanged = 1;
  5843  0A79  0021               	movlb	1	; select bank1
  5844  0A7A  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
  5845  0A7B                     l6582:	
  5846                           
  5847                           ;ir.c: 462: Led_Initialize();
  5848  0A7B  20F9  3188         	fcall	_Led_Initialize
  5849                           
  5850                           ;ir.c: 463: break;
  5851  0A7D  2CC3               	goto	l6896
  5852  0A7E                     l6584:	
  5853                           
  5854                           ;ir.c: 465: Audio_StopSound();
  5855  0A7E  24C7  3188         	fcall	_Audio_StopSound
  5856                           
  5857                           ;ir.c: 466: gLedPara.mMsc = 2;
  5858  0A80  0022               	movlb	2	; select bank2
  5859  0A81  0820               	movf	_gLedPara^(0+256),w	;volatile
  5860  0A82  3987               	andlw	-121
  5861  0A83  3810               	iorlw	16
  5862  0A84  00A0               	movwf	_gLedPara^(0+256)	;volatile
  5863                           
  5864                           ;ir.c: 467: gLedPara.mDyn = 0;
  5865  0A85  13A0               	bcf	_gLedPara^(0+256),7	;volatile
  5866                           
  5867                           ;ir.c: 468: gLedPara.mAuto = 0;
  5868  0A86  1020               	bcf	_gLedPara^(0+256),0	;volatile
  5869                           
  5870                           ;ir.c: 469: gLedRunPara.music_index = 2;
  5871  0A87  3002               	movlw	2
  5872  0A88  2A77               	goto	L2
  5873  0A89                     l6598:	
  5874                           
  5875                           ;ir.c: 474: Audio_StopSound();
  5876  0A89  24C7  3188         	fcall	_Audio_StopSound
  5877                           
  5878                           ;ir.c: 475: gLedPara.mMsc = 3;
  5879  0A8B  0022               	movlb	2	; select bank2
  5880  0A8C  0820               	movf	_gLedPara^(0+256),w	;volatile
  5881  0A8D  3987               	andlw	-121
  5882  0A8E  3818               	iorlw	24
  5883  0A8F  00A0               	movwf	_gLedPara^(0+256)	;volatile
  5884                           
  5885                           ;ir.c: 476: gLedPara.mDyn = 0;
  5886  0A90  13A0               	bcf	_gLedPara^(0+256),7	;volatile
  5887                           
  5888                           ;ir.c: 477: gLedPara.mAuto = 0;
  5889  0A91  1020               	bcf	_gLedPara^(0+256),0	;volatile
  5890                           
  5891                           ;ir.c: 478: gLedRunPara.music_index = 3;
  5892  0A92  3003               	movlw	3
  5893  0A93  2A77               	goto	L2
  5894  0A94                     l6612:	
  5895                           
  5896                           ;ir.c: 483: Audio_StopSound();
  5897  0A94  24C7  3188         	fcall	_Audio_StopSound
  5898                           
  5899                           ;ir.c: 484: gLedPara.mMsc = 4;
  5900  0A96  0022               	movlb	2	; select bank2
  5901  0A97  0820               	movf	_gLedPara^(0+256),w	;volatile
  5902  0A98  3987               	andlw	-121
  5903  0A99  3820               	iorlw	32
  5904  0A9A  00A0               	movwf	_gLedPara^(0+256)	;volatile
  5905                           
  5906                           ;ir.c: 485: gLedPara.mDyn = 0;
  5907  0A9B  13A0               	bcf	_gLedPara^(0+256),7	;volatile
  5908                           
  5909                           ;ir.c: 486: gLedPara.mAuto = 0;
  5910  0A9C  1020               	bcf	_gLedPara^(0+256),0	;volatile
  5911                           
  5912                           ;ir.c: 487: gLedRunPara.music_index = 4;
  5913  0A9D  3004               	movlw	4
  5914  0A9E  2A77               	goto	L2
  5915  0A9F                     l1148:	
  5916  0A9F                     l6626:	
  5917                           
  5918                           ;ir.c: 492: case 0x15:
  5919                           ;ir.c: 493: case 0x16:
  5920                           ;ir.c: 494: case 0x17:
  5921                           ;ir.c: 495: Audio_StopSound();
  5922  0A9F  24C7  3188         	fcall	_Audio_StopSound
  5923                           
  5924                           ;ir.c: 496: gLedPara.mMsc = IR_GetIndex(keyValue);
  5925  0AA1  0830               	movf	_keyValue,w	;volatile
  5926  0AA2  2572  3188         	fcall	_IR_GetIndex
  5927  0AA4  0023               	movlb	3	; select bank3
  5928  0AA5  00C0               	movwf	??_IR_KeyAction^(0+384)
  5929  0AA6  0DC0               	rlf	??_IR_KeyAction^(0+384),f
  5930  0AA7  0DC0               	rlf	??_IR_KeyAction^(0+384),f
  5931  0AA8  0DC0               	rlf	??_IR_KeyAction^(0+384),f
  5932  0AA9  0022               	movlb	2	; select bank2
  5933  0AAA  0820               	movf	_gLedPara^(0+256),w	;volatile
  5934  0AAB  0023               	movlb	3	; select bank3
  5935  0AAC  0640               	xorwf	??_IR_KeyAction^(0+384),w
  5936  0AAD  3987               	andlw	-121
  5937  0AAE  0640               	xorwf	??_IR_KeyAction^(0+384),w
  5938  0AAF  0022               	movlb	2	; select bank2
  5939  0AB0  00A0               	movwf	_gLedPara^(0+256)	;volatile
  5940                           
  5941                           ;ir.c: 497: gLedPara.mDyn = 1;
  5942  0AB1  17A0               	bsf	_gLedPara^(0+256),7	;volatile
  5943                           
  5944                           ;ir.c: 498: gLedPara.mAuto = 0;
  5945  0AB2  1020               	bcf	_gLedPara^(0+256),0	;volatile
  5946                           
  5947                           ;ir.c: 499: gLedRunPara.mParaChanged = 1;
  5948  0AB3  0021               	movlb	1	; select bank1
  5949  0AB4  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
  5950                           
  5951                           ;ir.c: 500: gLedRunPara.music_index = gLedPara.mMsc;
  5952  0AB5  0022               	movlb	2	; select bank2
  5953  0AB6  0C20               	rrf	_gLedPara^(0+256),w	;volatile
  5954  0AB7  0023               	movlb	3	; select bank3
  5955  0AB8  00C0               	movwf	??_IR_KeyAction^(0+384)
  5956  0AB9  0CC0               	rrf	??_IR_KeyAction^(0+384),f
  5957  0ABA  0C40               	rrf	??_IR_KeyAction^(0+384),w
  5958  0ABB  390F               	andlw	15
  5959  0ABC  0021               	movlb	1	; select bank1
  5960  0ABD  00E0               	movwf	(_gLedRunPara^(0+128)+24)	;volatile
  5961  0ABE  2A7B               	goto	l6582
  5962  0ABF                     l6640:	
  5963                           
  5964                           ;ir.c: 504: Audio_StopSound();
  5965  0ABF  24C7  3188         	fcall	_Audio_StopSound
  5966                           
  5967                           ;ir.c: 505: gLedPara.mOn = !gLedPara.mOn;
  5968  0AC1  1003               	clrc
  5969  0AC2  0022               	movlb	2	; select bank2
  5970  0AC3  1CA0               	btfss	_gLedPara^(0+256),1	;volatile
  5971  0AC4  1403               	setc
  5972  0AC5  1C03               	btfss	3,0
  5973  0AC6  2ACA               	goto	u5550
  5974  0AC7  0022               	movlb	2	; select bank2
  5975  0AC8  14A0               	bsf	_gLedPara^(0+256),1	;volatile
  5976  0AC9  2ACC               	goto	l6644
  5977  0ACA                     u5550:	
  5978  0ACA  0022               	movlb	2	; select bank2
  5979  0ACB  10A0               	bcf	_gLedPara^(0+256),1	;volatile
  5980  0ACC                     l6644:	
  5981                           
  5982                           ;ir.c: 506: gLedPara.mAuto = 0;
  5983  0ACC  1020               	bcf	_gLedPara^(0+256),0	;volatile
  5984  0ACD  2A79               	goto	l6580
  5985  0ACE                     l6650:	
  5986                           
  5987                           ;ir.c: 511: Audio_StopSound();
  5988  0ACE  24C7  3188         	fcall	_Audio_StopSound
  5989                           
  5990                           ;ir.c: 512: gLedPara.mOn = 1;
  5991  0AD0  0022               	movlb	2	; select bank2
  5992  0AD1  14A0               	bsf	_gLedPara^(0+256),1	;volatile
  5993                           
  5994                           ;ir.c: 513: gLedPara.mAuto = 1;
  5995  0AD2  1420               	bsf	_gLedPara^(0+256),0	;volatile
  5996                           
  5997                           ;ir.c: 514: gLedRunPara.mParaChanged = 1;
  5998  0AD3  0021               	movlb	1	; select bank1
  5999  0AD4  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
  6000                           
  6001                           ;ir.c: 515: Led_Initialize();
  6002  0AD5  20F9               	fcall	_Led_Initialize
  6003                           
  6004                           ;ir.c: 516: for (uint8_t i = 0; i < 5; i++) {
  6005  0AD6  0023               	movlb	3	; select bank3
  6006  0AD7  01CA               	clrf	IR_KeyAction@i^(0+384)
  6007  0AD8                     l6666:	
  6008                           
  6009                           ;ir.c: 517: gLedRunPara.mCurrentBright[i] = gLedRunPara.mTargetBright[i];
  6010  0AD8  354A               	lslf	IR_KeyAction@i^(0+384),w
  6011  0AD9  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6012  0ADA  0086               	movwf	6
  6013  0ADB  0187               	clrf	7
  6014  0ADC  354A               	lslf	IR_KeyAction@i^(0+384),w
  6015  0ADD  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
  6016  0ADE  3182  227E  3188   	fcall	PL6	;call to abstracted procedure
  6017  0AE1  3005               	movlw	5
  6018  0AE2  0ACA               	incf	IR_KeyAction@i^(0+384),f
  6019  0AE3  024A               	subwf	IR_KeyAction@i^(0+384),w
  6020  0AE4  1803               	btfsc	3,0
  6021  0AE5  2CC3               	goto	l6896
  6022  0AE6  2AD8               	goto	l6666
  6023  0AE7                     l1157:	
  6024  0AE7                     l6672:	
  6025                           
  6026                           ;ir.c: 521: case 0x59:
  6027                           ;ir.c: 522: case 0x45:
  6028                           ;ir.c: 523: case 0x44:
  6029                           ;ir.c: 524: case 0x41:
  6030                           ;ir.c: 525: Audio_StopSound();
  6031  0AE7  24C7  3188         	fcall	_Audio_StopSound
  6032                           
  6033                           ;ir.c: 526: idx = IR_GetIndex(keyValue);
  6034  0AE9  0830               	movf	_keyValue,w	;volatile
  6035  0AEA  2572  3188         	fcall	_IR_GetIndex
  6036  0AEC  0023               	movlb	3	; select bank3
  6037  0AED  00D1               	movwf	IR_KeyAction@idx^(0+384)
  6038                           
  6039                           ;ir.c: 527: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 1000, 200);
  6040  0AEE  3551               	lslf	IR_KeyAction@idx^(0+384),w
  6041  0AEF  271B  3188         	fcall	PL44	;call to abstracted procedure
  6042  0AF1  2538  3188         	fcall	_Util_IncValue
  6043  0AF3                     L4:	
  6044                           
  6045                           ;ir.c: 528: if (ir_state.mSet == 0) {
  6046  0AF3  0E36               	swapf	_ir_state,w	;volatile
  6047  0AF4  0C89               	rrf	9,f
  6048  0AF5  3907               	andlw	7
  6049  0AF6  1D03               	skipz
  6050  0AF7  2B06               	goto	l6690
  6051                           
  6052                           ;ir.c: 529: gLedPara.mAuto = 0;
  6053                           
  6054                           ;ir.c: 530: gLedPara.mMsc = 0;
  6055                           
  6056                           ;ir.c: 531: gLedPara.mDyn = 0;
  6057  0AF8  2743  3188         	fcall	PL84	;call to abstracted procedure
  6058                           
  6059                           ;ir.c: 532: gLedPara.mBright[idx] = gLedRunPara.mTargetBright[idx];
  6060  0AFA  0023               	movlb	3	; select bank3
  6061  0AFB  3551               	lslf	IR_KeyAction@idx^(0+384),w
  6062  0AFC  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6063  0AFD  0086               	movwf	6
  6064  0AFE  0187               	clrf	7
  6065  0AFF  3551               	lslf	IR_KeyAction@idx^(0+384),w
  6066  0B00  3E24               	addlw	(low ((_gLedPara| (0+256)+4)))& (0+255)
  6067  0B01  26B2  3188         	fcall	PL8	;call to abstracted procedure
  6068  0B03                     l6688:	
  6069                           
  6070                           ;ir.c: 533: gLedRunPara.mParaChanged = 1;
  6071  0B03  0021               	movlb	1	; select bank1
  6072  0B04  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
  6073                           
  6074                           ;ir.c: 534: } else {
  6075  0B05  2CC3               	goto	l6896
  6076  0B06                     l6690:	
  6077                           
  6078                           ;ir.c: 535: ir_state.mSetDelay = 0;
  6079  0B06  01BC               	clrf	_ir_state+6	;volatile
  6080  0B07  2CC3               	goto	l6896
  6081  0B08                     l1164:	
  6082  0B08                     l6692:	
  6083                           
  6084                           ;ir.c: 539: case 0x55:
  6085                           ;ir.c: 540: case 0x49:
  6086                           ;ir.c: 541: case 0x48:
  6087                           ;ir.c: 542: case 0x40:
  6088                           ;ir.c: 543: Audio_StopSound();
  6089  0B08  24C7  3188         	fcall	_Audio_StopSound
  6090                           
  6091                           ;ir.c: 544: idx = IR_GetIndex(keyValue);
  6092  0B0A  0830               	movf	_keyValue,w	;volatile
  6093  0B0B  2572  3188         	fcall	_IR_GetIndex
  6094  0B0D  0023               	movlb	3	; select bank3
  6095  0B0E  00D1               	movwf	IR_KeyAction@idx^(0+384)
  6096                           
  6097                           ;ir.c: 545: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 0, 200);
  6098  0B0F  3551               	lslf	IR_KeyAction@idx^(0+384),w
  6099  0B10  2732  3188         	fcall	PL52	;call to abstracted procedure
  6100  0B12  2512  3188         	fcall	_Util_DecValue
  6101  0B14  2AF3               	goto	L4
  6102  0B15                     l1170:	
  6103                           ;ir.c: 549: gLedPara.mDyn = 0;
  6104                           
  6105                           ;ir.c: 548: gLedPara.mMsc = 0;
  6106                           
  6107                           ;ir.c: 547: gLedPara.mAuto = 0;
  6108                           
  6109                           ;ir.c: 546: if (ir_state.mSet == 0) {
  6110                           
  6111  0B15                     l6712:	
  6112                           
  6113                           ;ir.c: 557: case 0x51:
  6114                           ;ir.c: 558: case 0x4D:
  6115                           ;ir.c: 559: case 0x4C:
  6116                           ;ir.c: 560: Audio_StopSound();
  6117  0B15  24C7  3188         	fcall	_Audio_StopSound
  6118                           
  6119                           ;ir.c: 561: idx = IR_GetIndex(keyValue);
  6120  0B17  0830               	movf	_keyValue,w	;volatile
  6121  0B18  2572  3188         	fcall	_IR_GetIndex
  6122  0B1A  0023               	movlb	3	; select bank3
  6123  0B1B  00D1               	movwf	IR_KeyAction@idx^(0+384)
  6124                           
  6125                           ;ir.c: 562: for (uint8_t i = 0; i < 5; i++) {
  6126  0B1C  01CB               	clrf	IR_KeyAction@i_1428^(0+384)
  6127  0B1D                     l6718:	
  6128  0B1D  3005               	movlw	5
  6129  0B1E  024B               	subwf	IR_KeyAction@i_1428^(0+384),w
  6130  0B1F  1803               	btfsc	3,0
  6131  0B20  2B2D               	goto	l6728
  6132                           
  6133                           ;ir.c: 563: gLedRunPara.mTargetBright[i] = gLedPara.mCustom[idx][i];
  6134  0B21  084B               	movf	IR_KeyAction@i_1428^(0+384),w
  6135  0B22  2727  3188         	fcall	PL50	;call to abstracted procedure
  6136  0B24  2505  3188         	fcall	___bmul
  6137  0B26  2749               	fcall	PL86	;call to abstracted procedure
  6138  0B27  354B               	lslf	IR_KeyAction@i_1428^(0+384),w
  6139  0B28  3183  232C  3188   	fcall	PL2	;call to abstracted procedure
  6140  0B2B  0ACB               	incf	IR_KeyAction@i_1428^(0+384),f
  6141  0B2C  2B1D               	goto	l6718
  6142  0B2D                     l6728:	
  6143                           
  6144                           ;ir.c: 564: }
  6145                           ;ir.c: 565: if (ir_state.mSet == 0) {
  6146  0B2D  0020               	movlb	0	; select bank0
  6147  0B2E  0E36               	swapf	_ir_state,w	;volatile
  6148  0B2F  0C89               	rrf	9,f
  6149  0B30  3907               	andlw	7
  6150  0B31  1D03               	skipz
  6151  0B32  2B06               	goto	l6690
  6152                           
  6153                           ;ir.c: 566: gLedPara.mAuto = 0;
  6154                           
  6155                           ;ir.c: 567: gLedPara.mMsc = 0;
  6156                           
  6157                           ;ir.c: 568: gLedPara.mDyn = 0;
  6158  0B33  2743  3188         	fcall	PL84	;call to abstracted procedure
  6159                           
  6160                           ;ir.c: 569: for (uint8_t i = 0; i < 5; i++) {
  6161  0B35  0023               	movlb	3	; select bank3
  6162  0B36  01CC               	clrf	IR_KeyAction@i_1429^(0+384)
  6163  0B37                     l6738:	
  6164  0B37  3005               	movlw	5
  6165  0B38  024C               	subwf	IR_KeyAction@i_1429^(0+384),w
  6166  0B39  1803               	btfsc	3,0
  6167  0B3A  2B03               	goto	l6688
  6168                           
  6169                           ;ir.c: 570: gLedPara.mBright[i] = gLedPara.mCustom[idx][i];
  6170  0B3B  084C               	movf	IR_KeyAction@i_1429^(0+384),w
  6171  0B3C  2727  3188         	fcall	PL50	;call to abstracted procedure
  6172  0B3E  2505  3188         	fcall	___bmul
  6173  0B40  2749  3188         	fcall	PL86	;call to abstracted procedure
  6174  0B42  354C               	lslf	IR_KeyAction@i_1429^(0+384),w
  6175  0B43  3E24               	addlw	(low ((_gLedPara| (0+256)+4)))& (0+255)
  6176  0B44  26B2  3188         	fcall	PL8	;call to abstracted procedure
  6177  0B46  0ACC               	incf	IR_KeyAction@i_1429^(0+384),f
  6178  0B47  2B37               	goto	l6738
  6179  0B48                     l6750:	
  6180                           
  6181                           ;ir.c: 578: Audio_StopSound();
  6182  0B48  24C7  3188         	fcall	_Audio_StopSound
  6183                           
  6184                           ;ir.c: 579: for (uint8_t i = 0; i < 5; i++) {
  6185  0B4A  0023               	movlb	3	; select bank3
  6186  0B4B  01CF               	clrf	IR_KeyAction@i_1430^(0+384)
  6187  0B4C                     l6754:	
  6188  0B4C  3005               	movlw	5
  6189  0B4D  024F               	subwf	IR_KeyAction@i_1430^(0+384),w
  6190  0B4E  1803               	btfsc	3,0
  6191  0B4F  2B78               	goto	l1183
  6192                           
  6193                           ;ir.c: 580: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[i], 1000, 200);
  6194  0B50  354F               	lslf	IR_KeyAction@i_1430^(0+384),w
  6195  0B51  271B  3188         	fcall	PL44	;call to abstracted procedure
  6196  0B53  2538  3188         	fcall	_Util_IncValue
  6197                           
  6198                           ;ir.c: 581: gLedPara.mBright[i] = gLedRunPara.mTargetBright[i];
  6199  0B55  0023               	movlb	3	; select bank3
  6200  0B56  354F               	lslf	IR_KeyAction@i_1430^(0+384),w
  6201  0B57  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6202  0B58  0086               	movwf	6
  6203  0B59  0187               	clrf	7
  6204  0B5A  354F               	lslf	IR_KeyAction@i_1430^(0+384),w
  6205  0B5B  3E24               	addlw	(low ((_gLedPara| (0+256)+4)))& (0+255)
  6206  0B5C  26B2  3188         	fcall	PL8	;call to abstracted procedure
  6207  0B5E  0ACF               	incf	IR_KeyAction@i_1430^(0+384),f
  6208  0B5F  2B4C               	goto	l6754
  6209  0B60                     l6772:	
  6210                           ;ir.c: 585: gLedPara.mDyn = 0;
  6211                           
  6212                           ;ir.c: 584: gLedPara.mMsc = 0;
  6213                           
  6214                           ;ir.c: 582: }
  6215                           ;ir.c: 583: gLedPara.mAuto = 0;
  6216                           
  6217                           
  6218                           ;ir.c: 589: Audio_StopSound();
  6219  0B60  24C7  3188         	fcall	_Audio_StopSound
  6220                           
  6221                           ;ir.c: 590: for (uint8_t i = 0; i < 5; i++) {
  6222  0B62  0023               	movlb	3	; select bank3
  6223  0B63  01D0               	clrf	IR_KeyAction@i_1431^(0+384)
  6224  0B64                     l6776:	
  6225  0B64  3005               	movlw	5
  6226  0B65  0250               	subwf	IR_KeyAction@i_1431^(0+384),w
  6227  0B66  1803               	btfsc	3,0
  6228  0B67  2B78               	goto	l1183
  6229                           
  6230                           ;ir.c: 591: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[i], 0, 200);
  6231  0B68  3550               	lslf	IR_KeyAction@i_1431^(0+384),w
  6232  0B69  2732  3188         	fcall	PL52	;call to abstracted procedure
  6233  0B6B  2512  3188         	fcall	_Util_DecValue
  6234                           
  6235                           ;ir.c: 592: gLedPara.mBright[i] = gLedRunPara.mTargetBright[i];
  6236  0B6D  0023               	movlb	3	; select bank3
  6237  0B6E  3550               	lslf	IR_KeyAction@i_1431^(0+384),w
  6238  0B6F  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6239  0B70  0086               	movwf	6
  6240  0B71  0187               	clrf	7
  6241  0B72  3550               	lslf	IR_KeyAction@i_1431^(0+384),w
  6242  0B73  3E24               	addlw	(low ((_gLedPara| (0+256)+4)))& (0+255)
  6243  0B74  26B2  3188         	fcall	PL8	;call to abstracted procedure
  6244  0B76  0AD0               	incf	IR_KeyAction@i_1431^(0+384),f
  6245  0B77  2B64               	goto	l6776
  6246  0B78                     l1183:	
  6247                           
  6248                           ;ir.c: 593: }
  6249                           ;ir.c: 594: gLedPara.mAuto = 0;
  6250                           
  6251                           ;ir.c: 595: gLedPara.mMsc = 0;
  6252                           
  6253                           ;ir.c: 596: gLedPara.mDyn = 0;
  6254  0B78  2743  3188         	fcall	PL84	;call to abstracted procedure
  6255  0B7A  2B03               	goto	l6688
  6256  0B7B                     l6794:	
  6257                           
  6258                           ;ir.c: 600: Util_DecValue((uint16_t*) & gLedPara.mVolume, 0, 1);
  6259  0B7B  3023               	movlw	low (_gLedPara+3)
  6260  0B7C  00CE               	movwf	Util_DecValue@pSrc
  6261  0B7D  3001               	movlw	high (_gLedPara+3)
  6262  0B7E  00CF               	movwf	Util_DecValue@pSrc+1
  6263  0B7F  01D0               	clrf	Util_DecValue@min
  6264  0B80  01D1               	clrf	Util_DecValue@min+1
  6265  0B81  01D2               	clrf	Util_DecValue@delta
  6266  0B82  0AD2               	incf	Util_DecValue@delta,f
  6267  0B83  01D3               	clrf	Util_DecValue@delta+1
  6268  0B84  2512  3188         	fcall	_Util_DecValue
  6269                           
  6270                           ;ir.c: 601: Audio_SetVolume(VOLUME[ gLedPara.mVolume ]);
  6271  0B86  0022               	movlb	2	; select bank2
  6272  0B87  26FB  3188         	fcall	PL30	;call to abstracted procedure
  6273  0B89  2216  3188         	fcall	_Audio_SetVolume
  6274  0B8B  2B03               	goto	l6688
  6275  0B8C                     l6800:	
  6276                           
  6277                           ;ir.c: 605: Util_IncValue((uint16_t*) & gLedPara.mVolume, 4, 1);
  6278  0B8C  3023               	movlw	low (_gLedPara+3)
  6279  0B8D  00CE               	movwf	Util_IncValue@pSrc
  6280  0B8E  3001               	movlw	high (_gLedPara+3)
  6281  0B8F  00CF               	movwf	Util_IncValue@pSrc+1
  6282  0B90  3004               	movlw	4
  6283  0B91  00D0               	movwf	Util_IncValue@max
  6284  0B92  01D1               	clrf	Util_IncValue@max+1
  6285  0B93  01D2               	clrf	Util_IncValue@delta
  6286  0B94  0AD2               	incf	Util_IncValue@delta,f
  6287  0B95  01D3               	clrf	Util_IncValue@delta+1
  6288  0B96  2538  3188         	fcall	_Util_IncValue
  6289                           
  6290                           ;ir.c: 606: Audio_SetVolume(VOLUME[ gLedPara.mVolume ]);
  6291  0B98  0022               	movlb	2	; select bank2
  6292  0B99  26FB  3188         	fcall	PL30	;call to abstracted procedure
  6293  0B9B  2216  3188         	fcall	_Audio_SetVolume
  6294  0B9D  2B03               	goto	l6688
  6295  0B9E                     l1189:	
  6296  0B9E                     l6806:	
  6297                           
  6298                           ;ir.c: 610: case 0x0D:
  6299                           ;ir.c: 611: case 0x0E:
  6300                           ;ir.c: 612: case 0x0F:
  6301                           ;ir.c: 613: case 0x08:
  6302                           ;ir.c: 614: case 0x09:
  6303                           ;ir.c: 615: case 0x0A:
  6304                           ;ir.c: 616: case 0x0B:
  6305                           ;ir.c: 617: case 0x04:
  6306                           ;ir.c: 618: case 0x05:
  6307                           ;ir.c: 619: if (ir_state.tmIdx < 4) {
  6308  0B9E  3004               	movlw	4
  6309  0B9F  0237               	subwf	_ir_state+1,w	;volatile
  6310  0BA0  1803               	skipnc
  6311  0BA1  2BAC               	goto	l6812
  6312                           
  6313                           ;ir.c: 620: ir_state.time[ir_state.tmIdx++] = IR_GetIndex(keyValue);
  6314  0BA2  0837               	movf	_ir_state+1,w	;volatile
  6315  0BA3  3E38               	addlw	(low ((_ir_state| 0+2)))& (0+255)
  6316  0BA4  0086               	movwf	6
  6317  0BA5  0187               	clrf	7
  6318  0BA6  0830               	movf	_keyValue,w	;volatile
  6319  0BA7  2572  3188         	fcall	_IR_GetIndex
  6320  0BA9  0081               	movwf	1
  6321  0BAA  0AB7               	incf	_ir_state+1,f	;volatile
  6322                           
  6323                           ;ir.c: 621: } else {
  6324  0BAB  2BAD               	goto	l6814
  6325  0BAC                     l6812:	
  6326                           
  6327                           ;ir.c: 622: ir_state.tmIdx = 0;
  6328  0BAC  01B7               	clrf	_ir_state+1	;volatile
  6329  0BAD                     l6814:	
  6330                           
  6331                           ;ir.c: 623: }
  6332                           ;ir.c: 624: if (IR_IsValidTime((uint8_t*) & ir_state.time[0], ir_state.tmIdx) == 0) {
  6333  0BAD  0837               	movf	_ir_state+1,w	;volatile
  6334  0BAE  00D1               	movwf	IR_IsValidTime@len
  6335  0BAF  3038               	movlw	(low ((_ir_state| 0+2)))& (0+255)
  6336  0BB0  25FE  3188         	fcall	_IR_IsValidTime
  6337  0BB2  3A00               	xorlw	0
  6338  0BB3  1D03               	skipz
  6339  0BB4  2BBB               	goto	l6820
  6340                           
  6341                           ;ir.c: 625: Led_StartNotice(3);
  6342  0BB5  3003               	movlw	3
  6343  0BB6  255F  3188         	fcall	_Led_StartNotice
  6344  0BB8                     l6818:	
  6345                           
  6346                           ;ir.c: 626: IR_ExitSet();
  6347  0BB8  25F5  3188         	fcall	_IR_ExitSet
  6348                           
  6349                           ;ir.c: 627: } else if (ir_state.tmIdx == 4) {
  6350  0BBA  2B06               	goto	l6690
  6351  0BBB                     l6820:	
  6352  0BBB  3004               	movlw	4
  6353  0BBC  0637               	xorwf	_ir_state+1,w	;volatile
  6354  0BBD  1D03               	btfss	3,2
  6355  0BBE  2B06               	goto	l6690
  6356                           
  6357                           ;ir.c: 628: if (ir_state.mSet == 1) {
  6358  0BBF  3197  27F1  3188   	fcall	PL102	;call to abstracted procedure
  6359  0BC2  1D03               	skipz
  6360  0BC3  2BDF               	goto	l6830
  6361                           
  6362                           ;ir.c: 629: RTC_GetTime()->hour = ir_state.time[0]*10 + ir_state.time[1];
  6363  0BC4  255E  3188         	fcall	_RTC_GetTime
  6364  0BC6  2750  3188         	fcall	PL92	;call to abstracted procedure
  6365  0BC8  0838               	movf	_ir_state+2,w	;volatile
  6366  0BC9  2505  3188         	fcall	___bmul
  6367  0BCB  0739               	addwf	_ir_state+3,w	;volatile
  6368  0BCC  0081               	movwf	1
  6369                           
  6370                           ;ir.c: 630: RTC_GetTime()->minute = ir_state.time[2]*10 + ir_state.time[3];
  6371  0BCD  255E  3188         	fcall	_RTC_GetTime
  6372  0BCF  0023               	movlb	3	; select bank3
  6373  0BD0  00C0               	movwf	??_IR_KeyAction^(0+384)
  6374  0BD1  3E01               	addlw	1
  6375  0BD2  2750  3188         	fcall	PL92	;call to abstracted procedure
  6376  0BD4  083A               	movf	_ir_state+4,w	;volatile
  6377  0BD5  2505  3188         	fcall	___bmul
  6378  0BD7  073B               	addwf	_ir_state+5,w	;volatile
  6379  0BD8  0081               	movwf	1
  6380  0BD9                     L3:	
  6381                           
  6382                           ;ir.c: 631: if (gLedPara.mAuto) {
  6383  0BD9  0022               	movlb	2	; select bank2
  6384  0BDA  1C20               	btfss	_gLedPara^(0+256),0	;volatile
  6385  0BDB  2BB8               	goto	l6818
  6386                           
  6387                           ;ir.c: 632: Led_Initialize();
  6388  0BDC  20F9  3188         	fcall	_Led_Initialize
  6389  0BDE  2BB8               	goto	l6818
  6390  0BDF                     l6830:	
  6391  0BDF  3197  27F6  3188   	fcall	PL106	;call to abstracted procedure
  6392  0BE2  1D03               	skipz
  6393  0BE3  2BF8               	goto	l6840
  6394                           
  6395                           ;ir.c: 635: gLedPara.mSunrise = ir_state.time[0]*600 + ir_state.time[1]*60 + ir_state.ti
      +                          me[2]*10 + ir_state.time[3];
  6396  0BE4  2704  3188         	fcall	PL32	;call to abstracted procedure
  6397  0BE6  24D9  3188         	fcall	___wmul
  6398  0BE8  26EC  3188         	fcall	PL28	;call to abstracted procedure
  6399  0BEA  24D9  3188         	fcall	___wmul
  6400  0BEC  26CC  3188         	fcall	PL20	;call to abstracted procedure
  6401  0BEE  24D9  3188         	fcall	___wmul
  6402  0BF0  26BA  3188         	fcall	PL14	;call to abstracted procedure
  6403  0BF2  00D6               	movwf	(_gLedPara^(0+256)+54)	;volatile
  6404  0BF3  0023               	movlb	3	; select bank3
  6405  0BF4  0849               	movf	(??_IR_KeyAction+9)^(0+384),w
  6406  0BF5  0022               	movlb	2	; select bank2
  6407  0BF6  00D7               	movwf	((_gLedPara+1)^(0+256)+54)	;volatile
  6408  0BF7  2C10               	goto	L5
  6409  0BF8                     l6840:	
  6410                           ;ir.c: 637: if (gLedPara.mAuto) {
  6411                           
  6412                           ;ir.c: 636: gLedRunPara.mParaChanged = 1;
  6413                           
  6414  0BF8  3197  27FB  3188   	fcall	PL108	;call to abstracted procedure
  6415  0BFB  1D03               	skipz
  6416  0BFC  2BB8               	goto	l6818
  6417                           
  6418                           ;ir.c: 641: gLedPara.mSunset = ir_state.time[0]*600 + ir_state.time[1]*60 + ir_state.tim
      +                          e[2]*10 + ir_state.time[3];
  6419  0BFD  2704  3188         	fcall	PL32	;call to abstracted procedure
  6420  0BFF  24D9  3188         	fcall	___wmul
  6421  0C01  26EC  3188         	fcall	PL28	;call to abstracted procedure
  6422  0C03  24D9  3188         	fcall	___wmul
  6423  0C05  26CC  3188         	fcall	PL20	;call to abstracted procedure
  6424  0C07  24D9  3188         	fcall	___wmul
  6425  0C09  26BA  3188         	fcall	PL14	;call to abstracted procedure
  6426  0C0B  00E2               	movwf	(_gLedPara^(0+256)+66)	;volatile
  6427  0C0C  0023               	movlb	3	; select bank3
  6428  0C0D  0849               	movf	(??_IR_KeyAction+9)^(0+384),w
  6429  0C0E  0022               	movlb	2	; select bank2
  6430  0C0F  00E3               	movwf	((_gLedPara+1)^(0+256)+66)	;volatile
  6431  0C10                     L5:	
  6432                           
  6433                           ;ir.c: 642: gLedRunPara.mParaChanged = 1;
  6434  0C10  0021               	movlb	1	; select bank1
  6435  0C11  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
  6436  0C12  2BD9               	goto	L3
  6437  0C13                     l6852:	
  6438                           ;ir.c: 643: if (gLedPara.mAuto) {
  6439                           
  6440                           
  6441                           ;ir.c: 652: if (ir_state.mSet == 4) {
  6442  0C13  2761  3188         	fcall	PL100	;call to abstracted procedure
  6443  0C15  1D03               	skipz
  6444  0C16  2C2C               	goto	l6868
  6445                           
  6446                           ;ir.c: 653: for (uint8_t i = 0; i < 5; i++) {
  6447  0C17  0023               	movlb	3	; select bank3
  6448  0C18  01CD               	clrf	IR_KeyAction@i_1434^(0+384)
  6449  0C19                     l6856:	
  6450  0C19  3005               	movlw	5
  6451  0C1A  024D               	subwf	IR_KeyAction@i_1434^(0+384),w
  6452  0C1B  1803               	btfsc	3,0
  6453  0C1C  2C27               	goto	l1212
  6454                           
  6455                           ;ir.c: 654: gLedPara.mDayBright[i] = gLedRunPara.mTargetBright[i];
  6456  0C1D  354D               	lslf	IR_KeyAction@i_1434^(0+384),w
  6457  0C1E  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6458  0C1F  0086               	movwf	6
  6459  0C20  0187               	clrf	7
  6460  0C21  354D               	lslf	IR_KeyAction@i_1434^(0+384),w
  6461  0C22  3E58               	addlw	(low ((_gLedPara| (0+256)+56)))& (0+255)
  6462  0C23  26B2  3188         	fcall	PL8	;call to abstracted procedure
  6463  0C25  0ACD               	incf	IR_KeyAction@i_1434^(0+384),f
  6464  0C26  2C19               	goto	l6856
  6465  0C27                     l1212:	
  6466                           
  6467                           ;ir.c: 655: }
  6468                           ;ir.c: 656: gLedRunPara.mParaChanged = 1;
  6469  0C27  0021               	movlb	1	; select bank1
  6470  0C28  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
  6471                           
  6472                           ;ir.c: 657: IR_ExitSet();
  6473  0C29  25F5  3188         	fcall	_IR_ExitSet
  6474                           
  6475                           ;ir.c: 658: } else if (ir_state.mSet == 5) {
  6476  0C2B  2CC3               	goto	l6896
  6477  0C2C                     l6868:	
  6478  0C2C  275C  3188         	fcall	PL98	;call to abstracted procedure
  6479  0C2E  1D03               	skipz
  6480  0C2F  2CC3               	goto	l6896
  6481                           
  6482                           ;ir.c: 659: for (uint8_t i = 0; i < 5; i++) {
  6483  0C30  0023               	movlb	3	; select bank3
  6484  0C31  01CE               	clrf	IR_KeyAction@i_1435^(0+384)
  6485  0C32                     l6872:	
  6486  0C32  3005               	movlw	5
  6487  0C33  024E               	subwf	IR_KeyAction@i_1435^(0+384),w
  6488  0C34  1803               	btfsc	3,0
  6489  0C35  2C27               	goto	l1212
  6490                           
  6491                           ;ir.c: 660: gLedPara.mNightBright[i] = gLedRunPara.mTargetBright[i];
  6492  0C36  354E               	lslf	IR_KeyAction@i_1435^(0+384),w
  6493  0C37  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  6494  0C38  0086               	movwf	6
  6495  0C39  0187               	clrf	7
  6496  0C3A  354E               	lslf	IR_KeyAction@i_1435^(0+384),w
  6497  0C3B  3E64               	addlw	(low ((_gLedPara| (0+256)+68)))& (0+255)
  6498  0C3C  26B2  3188         	fcall	PL8	;call to abstracted procedure
  6499  0C3E  0ACE               	incf	IR_KeyAction@i_1435^(0+384),f
  6500  0C3F  2C32               	goto	l6872
  6501  0C40                     l6884:	
  6502                           
  6503                           ;ir.c: 667: ir_state.mSet = 0;
  6504  0C40  301F               	movlw	-225
  6505  0C41  05B6               	andwf	_ir_state,f	;volatile
  6506                           
  6507                           ;ir.c: 668: ir_state.tmIdx = 0;
  6508  0C42  01B7               	clrf	_ir_state+1	;volatile
  6509                           
  6510                           ;ir.c: 669: ir_state.mSetDelay = 0;
  6511  0C43  01BC               	clrf	_ir_state+6	;volatile
  6512                           
  6513                           ;ir.c: 670: Led_StartNotice(3);
  6514  0C44  3003               	movlw	3
  6515  0C45  255F  3188         	fcall	_Led_StartNotice
  6516                           
  6517                           ;ir.c: 671: break;
  6518  0C47  2CC3               	goto	l6896
  6519  0C48                     l6894:	
  6520  0C48  0020               	movlb	0	; select bank0
  6521  0C49  0830               	movf	_keyValue,w	;volatile
  6522                           
  6523                           ; Switch size 1, requested type "space"
  6524                           ; Number of cases is 40, Range of values is 4 to 255
  6525                           ; switch strategies available:
  6526                           ; Name         Instructions Cycles
  6527                           ; simple_byte          121    61 (average)
  6528                           ; jumptable            263     9 (fixed)
  6529                           ;	Chosen strategy is simple_byte
  6530  0C4A  3A04               	xorlw	4	; case 4
  6531  0C4B  1903               	skipnz
  6532  0C4C  2B9E               	goto	l6806
  6533  0C4D  3A01               	xorlw	1	; case 5
  6534  0C4E  1903               	skipnz
  6535  0C4F  2B9E               	goto	l6806
  6536  0C50  3A02               	xorlw	2	; case 7
  6537  0C51  1903               	skipnz
  6538  0C52  2C13               	goto	l6852
  6539  0C53  3A0F               	xorlw	15	; case 8
  6540  0C54  1903               	skipnz
  6541  0C55  2B9E               	goto	l6806
  6542  0C56  3A01               	xorlw	1	; case 9
  6543  0C57  1903               	skipnz
  6544  0C58  2B9E               	goto	l6806
  6545  0C59  3A03               	xorlw	3	; case 10
  6546  0C5A  1903               	skipnz
  6547  0C5B  2B9E               	goto	l6806
  6548  0C5C  3A01               	xorlw	1	; case 11
  6549  0C5D  1903               	skipnz
  6550  0C5E  2B9E               	goto	l6806
  6551  0C5F  3A07               	xorlw	7	; case 12
  6552  0C60  1903               	skipnz
  6553  0C61  2B9E               	goto	l1189
  6554  0C62  3A01               	xorlw	1	; case 13
  6555  0C63  1903               	skipnz
  6556  0C64  2B9E               	goto	l1189
  6557  0C65  3A03               	xorlw	3	; case 14
  6558  0C66  1903               	skipnz
  6559  0C67  2B9E               	goto	l6806
  6560  0C68  3A01               	xorlw	1	; case 15
  6561  0C69  1903               	skipnz
  6562  0C6A  2B9E               	goto	l6806
  6563  0C6B  3A1B               	xorlw	27	; case 20
  6564  0C6C  1903               	skipnz
  6565  0C6D  2A9F               	goto	l1148
  6566  0C6E  3A01               	xorlw	1	; case 21
  6567  0C6F  1903               	skipnz
  6568  0C70  2A9F               	goto	l6626
  6569  0C71  3A03               	xorlw	3	; case 22
  6570  0C72  1903               	skipnz
  6571  0C73  2A9F               	goto	l6626
  6572  0C74  3A01               	xorlw	1	; case 23
  6573  0C75  1903               	skipnz
  6574  0C76  2A9F               	goto	l6626
  6575  0C77  3A0F               	xorlw	15	; case 24
  6576  0C78  1903               	skipnz
  6577  0C79  2B60               	goto	l6772
  6578  0C7A  3A01               	xorlw	1	; case 25
  6579  0C7B  1903               	skipnz
  6580  0C7C  2B48               	goto	l6750
  6581  0C7D  3A03               	xorlw	3	; case 26
  6582  0C7E  1903               	skipnz
  6583  0C7F  2B7B               	goto	l6794
  6584  0C80  3A01               	xorlw	1	; case 27
  6585  0C81  1903               	skipnz
  6586  0C82  2B8C               	goto	l6800
  6587  0C83  3A07               	xorlw	7	; case 28
  6588  0C84  1903               	skipnz
  6589  0C85  2A6D               	goto	l6570
  6590  0C86  3A01               	xorlw	1	; case 29
  6591  0C87  1903               	skipnz
  6592  0C88  2A7E               	goto	l6584
  6593  0C89  3A03               	xorlw	3	; case 30
  6594  0C8A  1903               	skipnz
  6595  0C8B  2A89               	goto	l6598
  6596  0C8C  3A01               	xorlw	1	; case 31
  6597  0C8D  1903               	skipnz
  6598  0C8E  2A94               	goto	l6612
  6599  0C8F  3A5F               	xorlw	95	; case 64
  6600  0C90  1903               	skipnz
  6601  0C91  2B08               	goto	l6692
  6602  0C92  3A01               	xorlw	1	; case 65
  6603  0C93  1903               	skipnz
  6604  0C94  2AE7               	goto	l6672
  6605  0C95  3A05               	xorlw	5	; case 68
  6606  0C96  1903               	skipnz
  6607  0C97  2AE7               	goto	l6672
  6608  0C98  3A01               	xorlw	1	; case 69
  6609  0C99  1903               	skipnz
  6610  0C9A  2AE7               	goto	l6672
  6611  0C9B  3A0D               	xorlw	13	; case 72
  6612  0C9C  1903               	skipnz
  6613  0C9D  2B08               	goto	l6692
  6614  0C9E  3A01               	xorlw	1	; case 73
  6615  0C9F  1903               	skipnz
  6616  0CA0  2B08               	goto	l6692
  6617  0CA1  3A05               	xorlw	5	; case 76
  6618  0CA2  1903               	skipnz
  6619  0CA3  2B15               	goto	l6712
  6620  0CA4  3A01               	xorlw	1	; case 77
  6621  0CA5  1903               	skipnz
  6622  0CA6  2B15               	goto	l6712
  6623  0CA7  3A1D               	xorlw	29	; case 80
  6624  0CA8  1903               	skipnz
  6625  0CA9  2B15               	goto	l1170
  6626  0CAA  3A01               	xorlw	1	; case 81
  6627  0CAB  1903               	skipnz
  6628  0CAC  2B15               	goto	l6712
  6629  0CAD  3A05               	xorlw	5	; case 84
  6630  0CAE  1903               	skipnz
  6631  0CAF  2B08               	goto	l1164
  6632  0CB0  3A01               	xorlw	1	; case 85
  6633  0CB1  1903               	skipnz
  6634  0CB2  2B08               	goto	l6692
  6635  0CB3  3A0D               	xorlw	13	; case 88
  6636  0CB4  1903               	skipnz
  6637  0CB5  2AE7               	goto	l1157
  6638  0CB6  3A01               	xorlw	1	; case 89
  6639  0CB7  1903               	skipnz
  6640  0CB8  2AE7               	goto	l6672
  6641  0CB9  3A05               	xorlw	5	; case 92
  6642  0CBA  1903               	skipnz
  6643  0CBB  2ABF               	goto	l6640
  6644  0CBC  3A01               	xorlw	1	; case 93
  6645  0CBD  1903               	skipnz
  6646  0CBE  2ACE               	goto	l6650
  6647  0CBF  3AA2               	xorlw	162	; case 255
  6648  0CC0  1903               	skipnz
  6649  0CC1  2C40               	goto	l6884
  6650  0CC2  2CC3               	goto	l6896
  6651  0CC3                     l6896:	
  6652                           
  6653                           ;ir.c: 675: TMR2_EnableInterrupt();
  6654  0CC3  2691               	fcall	_TMR2_EnableInterrupt
  6655                           
  6656                           ;ir.c: 676: keyValue = 0x00;
  6657  0CC4  0020               	movlb	0	; select bank0
  6658  0CC5  01B0               	clrf	_keyValue	;volatile
  6659  0CC6  0008               	return
  6660  0CC7                     __end_of_IR_KeyAction:	
  6661  0CC7                     __ptext61:	
  6662 ;; *************** function _Audio_StopSound *****************
  6663 ;; Defined at:
  6664 ;;		line 15 in file "user/src/audio.c"
  6665 ;; Parameters:    Size  Location     Type
  6666 ;;		None
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;  checksum        1   15[BANK0 ] unsigned char 
  6669 ;; Return value:  Size  Location     Type
  6670 ;;                  1    wreg      void 
  6671 ;; Registers used:
  6672 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 1F/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6681 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6682 ;;Total ram usage:        1 bytes
  6683 ;; Hardware stack levels used:    1
  6684 ;; Hardware stack levels required when called:    8
  6685 ;; This function calls:
  6686 ;;		_EUSART_Write
  6687 ;; This function is called by:
  6688 ;;		_Led_Initialize
  6689 ;;		_IR_KeyAction
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           
  6694                           ;psect for function _Audio_StopSound
  6695  0CC7                     _Audio_StopSound:	
  6696                           
  6697                           ;audio.c: 17: uint8_t checksum = 0x00;
  6698                           
  6699                           ;incstack = 0
  6700                           ; Regs used in _Audio_StopSound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6701  0CC7  0020               	movlb	0	; select bank0
  6702  0CC8  307E               	movlw	126
  6703  0CC9  01CF               	clrf	Audio_StopSound@checksum
  6704                           
  6705                           ;audio.c: 18: EUSART_Write ( 0x7E );
  6706  0CCA  24EE  3188         	fcall	_EUSART_Write
  6707                           
  6708                           ;audio.c: 19: checksum ^= EUSART_Write ( 0x03 );
  6709  0CCC  3003               	movlw	3
  6710  0CCD  24EE  3188         	fcall	_EUSART_Write
  6711  0CCF  06CF               	xorwf	Audio_StopSound@checksum,f
  6712                           
  6713                           ;audio.c: 20: checksum ^= EUSART_Write ( 0x1E );
  6714  0CD0  301E               	movlw	30
  6715  0CD1  24EE  3188         	fcall	_EUSART_Write
  6716  0CD3  06CF               	xorwf	Audio_StopSound@checksum,f
  6717                           
  6718                           ;audio.c: 21: EUSART_Write ( checksum );
  6719  0CD4  084F               	movf	Audio_StopSound@checksum,w
  6720  0CD5  24EE  3188         	fcall	_EUSART_Write
  6721                           
  6722                           ;audio.c: 22: EUSART_Write ( 0xEF );
  6723  0CD7  30EF               	movlw	239
  6724  0CD8  2CEE               	ljmp	_EUSART_Write
  6725  0CD9                     __end_of_Audio_StopSound:	
  6726  0CD9                     __ptext66:	
  6727 ;; *************** function ___wmul *****************
  6728 ;; Defined at:
  6729 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;  multiplier      2   14[BANK0 ] unsigned int 
  6732 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  6733 ;; Auto vars:     Size  Location     Type
  6734 ;;  product         2   18[BANK0 ] unsigned int 
  6735 ;; Return value:  Size  Location     Type
  6736 ;;                  2   14[BANK0 ] unsigned int 
  6737 ;; Registers used:
  6738 ;;		wreg, status,2, status,0
  6739 ;; Tracked objects:
  6740 ;;		On entry : 1F/0
  6741 ;;		On exit  : 1F/0
  6742 ;;		Unchanged: 0/0
  6743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6744 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6747 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;Total ram usage:        6 bytes
  6749 ;; Hardware stack levels used:    1
  6750 ;; Hardware stack levels required when called:    7
  6751 ;; This function calls:
  6752 ;;		Nothing
  6753 ;; This function is called by:
  6754 ;;		_Audio_GetValue
  6755 ;;		_Led_Initialize
  6756 ;;		_Led_CheckAutoStatus
  6757 ;;		_IR_KeyAction
  6758 ;; This function uses a non-reentrant model
  6759 ;;
  6760                           
  6761                           
  6762                           ;psect for function ___wmul
  6763  0CD9                     ___wmul:	
  6764                           
  6765                           ;incstack = 0
  6766                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6767  0CD9  01D2               	clrf	___wmul@product
  6768  0CDA  01D3               	clrf	___wmul@product+1
  6769  0CDB                     l5940:	
  6770  0CDB  1C4E               	btfss	___wmul@multiplier,0
  6771  0CDC  2CE1               	goto	l5944
  6772  0CDD  0850               	movf	___wmul@multiplicand,w
  6773  0CDE  07D2               	addwf	___wmul@product,f
  6774  0CDF  0851               	movf	___wmul@multiplicand+1,w
  6775  0CE0  3DD3               	addwfc	___wmul@product+1,f
  6776  0CE1                     l5944:	
  6777  0CE1  35D0               	lslf	___wmul@multiplicand,f
  6778  0CE2  0DD1               	rlf	___wmul@multiplicand+1,f
  6779  0CE3  36CF               	lsrf	___wmul@multiplier+1,f
  6780  0CE4  0CCE               	rrf	___wmul@multiplier,f
  6781  0CE5  084E               	movf	___wmul@multiplier,w
  6782  0CE6  044F               	iorwf	___wmul@multiplier+1,w
  6783  0CE7  1D03               	btfss	3,2
  6784  0CE8  2CDB               	goto	l5940
  6785  0CE9  0853               	movf	___wmul@product+1,w
  6786  0CEA  00CF               	movwf	?___wmul+1
  6787  0CEB  0852               	movf	___wmul@product,w
  6788  0CEC  00CE               	movwf	?___wmul
  6789  0CED  0008               	return
  6790  0CEE                     __end_of___wmul:	
  6791  0CEE                     __ptext64:	
  6792 ;; *************** function _EUSART_Write *****************
  6793 ;; Defined at:
  6794 ;;		line 32 in file "driver/src/eusart.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;  byte            1    wreg     unsigned char 
  6797 ;; Auto vars:     Size  Location     Type
  6798 ;;  byte            1   14[BANK0 ] unsigned char 
  6799 ;; Return value:  Size  Location     Type
  6800 ;;                  1    wreg      unsigned char 
  6801 ;; Registers used:
  6802 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6803 ;; Tracked objects:
  6804 ;;		On entry : 1F/0
  6805 ;;		On exit  : 1F/0
  6806 ;;		Unchanged: 0/0
  6807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;Total ram usage:        1 bytes
  6813 ;; Hardware stack levels used:    1
  6814 ;; Hardware stack levels required when called:    7
  6815 ;; This function calls:
  6816 ;;		Nothing
  6817 ;; This function is called by:
  6818 ;;		_Audio_StopSound
  6819 ;;		_Audio_SetPlayMode
  6820 ;;		_Audio_SetVolume
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           
  6825                           ;psect for function _EUSART_Write
  6826  0CEE                     _EUSART_Write:	
  6827                           
  6828                           ;incstack = 0
  6829                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6830                           ;EUSART_Write@byte stored from wreg
  6831  0CEE  00CE               	movwf	EUSART_Write@byte
  6832  0CEF                     l5822:	
  6833                           ;eusart.c: 34: while ( 0 == txRemain );
  6834                           
  6835  0CEF  085E               	movf	_txRemain,w
  6836  0CF0  1903               	btfsc	3,2
  6837  0CF1  2CEF               	goto	l5822
  6838                           
  6839                           ;eusart.c: 36: if ( !PIE1bits.TXIE )
  6840  0CF2  0021               	movlb	1	; select bank1
  6841  0CF3  1A11               	btfsc	17,4	;volatile
  6842  0CF4  2CFA               	goto	l95
  6843                           
  6844                           ;eusart.c: 37: {
  6845                           ;eusart.c: 38: TXREG = byte;
  6846  0CF5  0020               	movlb	0	; select bank0
  6847  0CF6  084E               	movf	EUSART_Write@byte,w
  6848  0CF7  0023               	movlb	3	; select bank3
  6849  0CF8  009A               	movwf	26	;volatile
  6850                           
  6851                           ;eusart.c: 39: }
  6852  0CF9  2D00               	goto	l5836
  6853  0CFA                     l95:	
  6854                           
  6855                           ;eusart.c: 40: else
  6856                           ;eusart.c: 41: {
  6857                           ;eusart.c: 42: PIE1bits.TXIE = 0;
  6858                           
  6859                           ;eusart.c: 43: txBuf[txHead++] = byte;
  6860  0CFA  3186  264C  3188   	fcall	PL70	;call to abstracted procedure
  6861  0CFD  084E               	movf	EUSART_Write@byte,w
  6862                           
  6863                           ;eusart.c: 44: if ( sizeof (txBuf ) <= txHead )
  6864                           
  6865                           ;eusart.c: 45: {
  6866                           ;eusart.c: 46: txHead = 0;
  6867                           
  6868                           ;eusart.c: 47: }
  6869                           ;eusart.c: 48: txRemain--;
  6870  0CFE  3186  2634         	fcall	PL64	;call to abstracted procedure
  6871  0D00                     l5836:	
  6872                           
  6873                           ;eusart.c: 49: }
  6874                           ;eusart.c: 50: PIE1bits.TXIE = 1;
  6875  0D00  0021               	movlb	1	; select bank1
  6876  0D01  1611               	bsf	17,4	;volatile
  6877                           
  6878                           ;eusart.c: 51: return byte;
  6879  0D02  0020               	movlb	0	; select bank0
  6880  0D03  084E               	movf	EUSART_Write@byte,w
  6881  0D04  0008               	return
  6882  0D05                     __end_of_EUSART_Write:	
  6883  0D05                     __ptext46:	
  6884 ;; *************** function ___bmul *****************
  6885 ;; Defined at:
  6886 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul8.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;  multiplier      1    wreg     unsigned char 
  6889 ;;  multiplicand    1   14[BANK0 ] unsigned char 
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;  multiplier      1   16[BANK0 ] unsigned char 
  6892 ;;  product         1   15[BANK0 ] unsigned char 
  6893 ;; Return value:  Size  Location     Type
  6894 ;;                  1    wreg      unsigned char 
  6895 ;; Registers used:
  6896 ;;		wreg, status,2, status,0
  6897 ;; Tracked objects:
  6898 ;;		On entry : 1C/0
  6899 ;;		On exit  : 1F/0
  6900 ;;		Unchanged: 0/0
  6901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6902 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6903 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6905 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;Total ram usage:        3 bytes
  6907 ;; Hardware stack levels used:    1
  6908 ;; Hardware stack levels required when called:    7
  6909 ;; This function calls:
  6910 ;;		Nothing
  6911 ;; This function is called by:
  6912 ;;		_Led_InitPara
  6913 ;;		_Led_SetCustom
  6914 ;;		_IR_IsValidTime
  6915 ;;		_IR_KeyAction
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919                           
  6920                           ;psect for function ___bmul
  6921  0D05                     ___bmul:	
  6922                           
  6923                           ;incstack = 0
  6924                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6925                           ;___bmul@multiplier stored from wreg
  6926  0D05  0020               	movlb	0	; select bank0
  6927  0D06  00D0               	movwf	___bmul@multiplier
  6928  0D07  01CF               	clrf	___bmul@product
  6929  0D08                     l6254:	
  6930  0D08  084E               	movf	___bmul@multiplicand,w
  6931  0D09  1850               	btfsc	___bmul@multiplier,0
  6932  0D0A  07CF               	addwf	___bmul@product,f
  6933  0D0B  35CE               	lslf	___bmul@multiplicand,f
  6934  0D0C  36D0               	lsrf	___bmul@multiplier,f
  6935  0D0D  0850               	movf	___bmul@multiplier,w
  6936  0D0E  1D03               	btfss	3,2
  6937  0D0F  2D08               	goto	l6254
  6938  0D10  084F               	movf	___bmul@product,w
  6939  0D11  0008               	return
  6940  0D12                     __end_of___bmul:	
  6941  0D12                     __ptext42:	
  6942 ;; *************** function _Util_DecValue *****************
  6943 ;; Defined at:
  6944 ;;		line 15 in file "user/src/util.c"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;  pSrc            2   14[BANK0 ] PTR unsigned int 
  6947 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), gLedPara(78), 
  6948 ;;  min             2   16[BANK0 ] unsigned int 
  6949 ;;  delta           2   18[BANK0 ] unsigned int 
  6950 ;; Auto vars:     Size  Location     Type
  6951 ;;		None
  6952 ;; Return value:  Size  Location     Type
  6953 ;;                  1    wreg      void 
  6954 ;; Registers used:
  6955 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6956 ;; Tracked objects:
  6957 ;;		On entry : 1F/0
  6958 ;;		On exit  : 1F/0
  6959 ;;		Unchanged: 0/0
  6960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6961 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6963 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6964 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6965 ;;Total ram usage:       10 bytes
  6966 ;; Hardware stack levels used:    1
  6967 ;; Hardware stack levels required when called:    7
  6968 ;; This function calls:
  6969 ;;		Nothing
  6970 ;; This function is called by:
  6971 ;;		_IR_KeyAction
  6972 ;; This function uses a non-reentrant model
  6973 ;;
  6974                           
  6975                           
  6976                           ;psect for function _Util_DecValue
  6977  0D12                     _Util_DecValue:	
  6978                           
  6979                           ;util.c: 17: if( *pSrc > min + delta )
  6980                           
  6981                           ;incstack = 0
  6982                           ; Regs used in _Util_DecValue: [wreg+fsr1l+fsr1h+status,2+status,0]
  6983  0D12  084E               	movf	Util_DecValue@pSrc,w
  6984  0D13  0086               	movwf	6
  6985  0D14  084F               	movf	Util_DecValue@pSrc+1,w
  6986  0D15  0087               	movwf	7
  6987  0D16  3F40               	moviw [0]fsr1
  6988  0D17  00D4               	movwf	??_Util_DecValue
  6989  0D18  3F41               	moviw [1]fsr1
  6990  0D19  00D5               	movwf	??_Util_DecValue+1
  6991  0D1A  0852               	movf	Util_DecValue@delta,w
  6992  0D1B  0750               	addwf	Util_DecValue@min,w
  6993  0D1C  00D6               	movwf	??_Util_DecValue+2
  6994  0D1D  0853               	movf	Util_DecValue@delta+1,w
  6995  0D1E  3D51               	addwfc	Util_DecValue@min+1,w
  6996  0D1F  00D7               	movwf	??_Util_DecValue+3
  6997  0D20  0855               	movf	??_Util_DecValue+1,w
  6998  0D21  0257               	subwf	??_Util_DecValue+3,w
  6999  0D22  1D03               	skipz
  7000  0D23  2D26               	goto	u5485
  7001  0D24  0854               	movf	??_Util_DecValue,w
  7002  0D25  0256               	subwf	??_Util_DecValue+2,w
  7003  0D26                     u5485:	
  7004                           
  7005                           ;util.c: 18: {
  7006                           ;util.c: 19: (*pSrc) -= delta;
  7007  0D26  084E               	movf	Util_DecValue@pSrc,w
  7008  0D27  0086               	movwf	6
  7009  0D28  084F               	movf	Util_DecValue@pSrc+1,w
  7010  0D29  0087               	movwf	7
  7011  0D2A  1803               	skipnc
  7012  0D2B  2D33               	goto	L7
  7013  0D2C  0852               	movf	Util_DecValue@delta,w
  7014  0D2D  0281               	subwf	1,f
  7015  0D2E  3141               	addfsr 1,1
  7016  0D2F  0853               	movf	Util_DecValue@delta+1,w
  7017  0D30  3B81               	subwfb	1,f
  7018  0D31  317F               	addfsr 1,-1
  7019                           
  7020                           ;util.c: 20: }
  7021  0D32  0008               	return
  7022  0D33                     L7:	
  7023                           ;util.c: 21: else
  7024                           ;util.c: 22: {
  7025                           ;util.c: 23: *pSrc = min;
  7026                           
  7027  0D33  0850               	movf	Util_DecValue@min,w
  7028  0D34  3FC0               	movwi [0]fsr1
  7029  0D35  0851               	movf	Util_DecValue@min+1,w
  7030  0D36  3FC1               	movwi [1]fsr1
  7031  0D37  0008               	return
  7032  0D38                     __end_of_Util_DecValue:	
  7033  0D38                     __ptext41:	
  7034 ;; *************** function _Util_IncValue *****************
  7035 ;; Defined at:
  7036 ;;		line 3 in file "user/src/util.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;  pSrc            2   14[BANK0 ] PTR unsigned int 
  7039 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara.mCurrentBright(10), gLedRunPara(26), gLedPara.mVolume(1), 
  7040 ;;		 -> gLedPara(78), 
  7041 ;;  max             2   16[BANK0 ] unsigned int 
  7042 ;;  delta           2   18[BANK0 ] unsigned int 
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;		None
  7045 ;; Return value:  Size  Location     Type
  7046 ;;                  1    wreg      void 
  7047 ;; Registers used:
  7048 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7049 ;; Tracked objects:
  7050 ;;		On entry : 1F/0
  7051 ;;		On exit  : 1F/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7054 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;Total ram usage:       10 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; Hardware stack levels required when called:    7
  7061 ;; This function calls:
  7062 ;;		Nothing
  7063 ;; This function is called by:
  7064 ;;		_Led_AutoRun
  7065 ;;		_IR_KeyAction
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           
  7070                           ;psect for function _Util_IncValue
  7071  0D38                     _Util_IncValue:	
  7072                           
  7073                           ;util.c: 5: if( *pSrc + delta < max )
  7074                           
  7075                           ;incstack = 0
  7076                           ; Regs used in _Util_IncValue: [wreg+fsr1l+fsr1h+status,2+status,0]
  7077  0D38  084E               	movf	Util_IncValue@pSrc,w
  7078  0D39  0086               	movwf	6
  7079  0D3A  084F               	movf	Util_IncValue@pSrc+1,w
  7080  0D3B  0087               	movwf	7
  7081  0D3C  3F40               	moviw [0]fsr1
  7082  0D3D  00D4               	movwf	??_Util_IncValue
  7083  0D3E  3F41               	moviw [1]fsr1
  7084  0D3F  00D5               	movwf	??_Util_IncValue+1
  7085  0D40  0852               	movf	Util_IncValue@delta,w
  7086  0D41  0754               	addwf	??_Util_IncValue,w
  7087  0D42  00D6               	movwf	??_Util_IncValue+2
  7088  0D43  0853               	movf	Util_IncValue@delta+1,w
  7089  0D44  3D55               	addwfc	??_Util_IncValue+1,w
  7090  0D45  00D7               	movwf	??_Util_IncValue+3
  7091  0D46  0851               	movf	Util_IncValue@max+1,w
  7092  0D47  0257               	subwf	??_Util_IncValue+3,w
  7093  0D48  1D03               	skipz
  7094  0D49  2D4C               	goto	u5255
  7095  0D4A  0850               	movf	Util_IncValue@max,w
  7096  0D4B  0256               	subwf	??_Util_IncValue+2,w
  7097  0D4C                     u5255:	
  7098                           
  7099                           ;util.c: 6: {
  7100                           ;util.c: 7: (*pSrc) += delta;
  7101  0D4C  084E               	movf	Util_IncValue@pSrc,w
  7102  0D4D  0086               	movwf	6
  7103  0D4E  084F               	movf	Util_IncValue@pSrc+1,w
  7104  0D4F  0087               	movwf	7
  7105  0D50  1803               	skipnc
  7106  0D51  2D59               	goto	L6
  7107  0D52  0852               	movf	Util_IncValue@delta,w
  7108  0D53  0781               	addwf	1,f
  7109  0D54  3141               	addfsr 1,1
  7110  0D55  0853               	movf	Util_IncValue@delta+1,w
  7111  0D56  3D81               	addwfc	1,f
  7112  0D57  317F               	addfsr 1,-1
  7113                           
  7114                           ;util.c: 8: }
  7115  0D58  0008               	return
  7116  0D59                     L6:	
  7117                           ;util.c: 9: else
  7118                           ;util.c: 10: {
  7119                           ;util.c: 11: *pSrc = max;
  7120                           
  7121  0D59  0850               	movf	Util_IncValue@max,w
  7122  0D5A  3FC0               	movwi [0]fsr1
  7123  0D5B  0851               	movf	Util_IncValue@max+1,w
  7124  0D5C  3FC1               	movwi [1]fsr1
  7125  0D5D  0008               	return
  7126  0D5E                     __end_of_Util_IncValue:	
  7127  0D5E                     __ptext52:	
  7128 ;; *************** function _RTC_GetTime *****************
  7129 ;; Defined at:
  7130 ;;		line 14 in file "user/src/rtc.c"
  7131 ;; Parameters:    Size  Location     Type
  7132 ;;		None
  7133 ;; Auto vars:     Size  Location     Type
  7134 ;;		None
  7135 ;; Return value:  Size  Location     Type
  7136 ;;                  1    wreg      PTR struct .
  7137 ;; Registers used:
  7138 ;;		wreg
  7139 ;; Tracked objects:
  7140 ;;		On entry : 0/2
  7141 ;;		On exit  : 0/0
  7142 ;;		Unchanged: 0/0
  7143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;Total ram usage:        0 bytes
  7149 ;; Hardware stack levels used:    1
  7150 ;; Hardware stack levels required when called:    7
  7151 ;; This function calls:
  7152 ;;		Nothing
  7153 ;; This function is called by:
  7154 ;;		_Led_Initialize
  7155 ;;		_Led_CheckAutoStatus
  7156 ;;		_IR_KeyAction
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           
  7161                           ;psect for function _RTC_GetTime
  7162  0D5E                     _RTC_GetTime:	
  7163                           
  7164                           ;rtc.c: 16: return &rtc_time;
  7165                           
  7166                           ;incstack = 0
  7167                           ; Regs used in _RTC_GetTime: [wreg]
  7168  0D5E  343D               	retlw	(low (_rtc_time| 0))& (0+255)
  7169  0D5F                     __end_of_RTC_GetTime:	
  7170  0D5F                     __ptext49:	
  7171 ;; *************** function _Led_StartNotice *****************
  7172 ;; Defined at:
  7173 ;;		line 397 in file "user/src/led.c"
  7174 ;; Parameters:    Size  Location     Type
  7175 ;;  cnt             1    wreg     unsigned char 
  7176 ;; Auto vars:     Size  Location     Type
  7177 ;;  cnt             1   15[BANK0 ] unsigned char 
  7178 ;; Return value:  Size  Location     Type
  7179 ;;                  1    wreg      void 
  7180 ;; Registers used:
  7181 ;;		wreg, status,2, status,0, pclath, cstack
  7182 ;; Tracked objects:
  7183 ;;		On entry : 1F/0
  7184 ;;		On exit  : 1F/8
  7185 ;;		Unchanged: 0/0
  7186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7188 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7189 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7190 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7191 ;;Total ram usage:        2 bytes
  7192 ;; Hardware stack levels used:    1
  7193 ;; Hardware stack levels required when called:    8
  7194 ;; This function calls:
  7195 ;;		_TMR4_StartTimer
  7196 ;; This function is called by:
  7197 ;;		_IR_ExitSet
  7198 ;;		_IR_ExitTimeout
  7199 ;;		_IR_KeyAction
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203                           
  7204                           ;psect for function _Led_StartNotice
  7205  0D5F                     _Led_StartNotice:	
  7206                           
  7207                           ;incstack = 0
  7208                           ; Regs used in _Led_StartNotice: [wreg+status,2+status,0+pclath+cstack]
  7209                           ;Led_StartNotice@cnt stored from wreg
  7210  0D5F  00CF               	movwf	Led_StartNotice@cnt
  7211                           
  7212                           ;led.c: 398: gLedRunPara.mNoticeCount = cnt;
  7213  0D60  00CE               	movwf	??_Led_StartNotice
  7214  0D61  0DCE               	rlf	??_Led_StartNotice,f
  7215  0D62  0DCE               	rlf	??_Led_StartNotice,f
  7216  0D63  0021               	movlb	1	; select bank1
  7217  0D64  085C               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
  7218  0D65  0020               	movlb	0	; select bank0
  7219  0D66  064E               	xorwf	??_Led_StartNotice,w
  7220  0D67  3903               	andlw	-253
  7221  0D68  064E               	xorwf	??_Led_StartNotice,w
  7222  0D69  0021               	movlb	1	; select bank1
  7223  0D6A  00DC               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
  7224                           
  7225                           ;led.c: 399: TMR4_StartTimer();
  7226  0D6B  2D6F               	ljmp	l5852
  7227  0D6C                     __end_of_Led_StartNotice:	
  7228  0D6C                     __ptext44:	
  7229 ;; *************** function _TMR2_DisableInterrupt *****************
  7230 ;; Defined at:
  7231 ;;		line 40 in file "driver/src/tmr2.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;		None
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;		None
  7236 ;; Return value:  Size  Location     Type
  7237 ;;                  1    wreg      void 
  7238 ;; Registers used:
  7239 ;;		None
  7240 ;; Tracked objects:
  7241 ;;		On entry : 1F/0
  7242 ;;		On exit  : 1F/1
  7243 ;;		Unchanged: 0/0
  7244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;Total ram usage:        0 bytes
  7250 ;; Hardware stack levels used:    1
  7251 ;; Hardware stack levels required when called:    7
  7252 ;; This function calls:
  7253 ;;		Nothing
  7254 ;; This function is called by:
  7255 ;;		_IR_KeyAction
  7256 ;; This function uses a non-reentrant model
  7257 ;;
  7258                           
  7259                           
  7260                           ;psect for function _TMR2_DisableInterrupt
  7261  0D6C                     _TMR2_DisableInterrupt:	
  7262                           
  7263                           ;tmr2.c: 42: PIE1bits.TMR2IE = 0;
  7264                           
  7265                           ;incstack = 0
  7266                           ; Regs used in _TMR2_DisableInterrupt: []
  7267  0D6C  0021               	movlb	1	; select bank1
  7268  0D6D  1091               	bcf	17,1	;volatile
  7269  0D6E  0008               	return
  7270  0D6F                     __end_of_TMR2_DisableInterrupt:	
  7271  0D6F                     __ptext50:	
  7272 ;; *************** function _TMR4_StartTimer *****************
  7273 ;; Defined at:
  7274 ;;		line 17 in file "driver/src/tmr4.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;		None
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;		None
  7279 ;; Return value:  Size  Location     Type
  7280 ;;                  1    wreg      void 
  7281 ;; Registers used:
  7282 ;;		None
  7283 ;; Tracked objects:
  7284 ;;		On entry : 1F/1
  7285 ;;		On exit  : 1F/8
  7286 ;;		Unchanged: 0/0
  7287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;Total ram usage:        0 bytes
  7293 ;; Hardware stack levels used:    1
  7294 ;; Hardware stack levels required when called:    7
  7295 ;; This function calls:
  7296 ;;		Nothing
  7297 ;; This function is called by:
  7298 ;;		_Led_StartNotice
  7299 ;; This function uses a non-reentrant model
  7300 ;;
  7301                           
  7302                           
  7303                           ;psect for function _TMR4_StartTimer
  7304  0D6F                     _TMR4_StartTimer:	
  7305  0D6F                     l5852:	
  7306                           ;incstack = 0
  7307                           ; Regs used in _TMR4_StartTimer: []
  7308                           
  7309                           
  7310                           ;tmr4.c: 19: T4CONbits.TMR4ON = 1;
  7311  0D6F  0028               	movlb	8	; select bank8
  7312  0D70  1517               	bsf	23,2	;volatile
  7313  0D71  0008               	return
  7314  0D72                     __end_of_TMR4_StartTimer:	
  7315  0D72                     __ptext47:	
  7316 ;; *************** function _IR_GetIndex *****************
  7317 ;; Defined at:
  7318 ;;		line 10 in file "user/src/ir.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;  keynum          1    wreg     unsigned char 
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;  keynum          1   15[BANK0 ] unsigned char 
  7323 ;;  idx             1   14[BANK0 ] unsigned char 
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  1    wreg      unsigned char 
  7326 ;; Registers used:
  7327 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7328 ;; Tracked objects:
  7329 ;;		On entry : 1F/0
  7330 ;;		On exit  : 1F/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7334 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7336 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;Total ram usage:        2 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    7
  7340 ;; This function calls:
  7341 ;;		Nothing
  7342 ;; This function is called by:
  7343 ;;		_IR_KeyAction
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           
  7348                           ;psect for function _IR_GetIndex
  7349  0D72                     _IR_GetIndex:	
  7350                           
  7351                           ;incstack = 0
  7352                           ; Regs used in _IR_GetIndex: [wreg-fsr0h+status,2+status,0]
  7353                           ;IR_GetIndex@keynum stored from wreg
  7354  0D72  00CF               	movwf	IR_GetIndex@keynum
  7355                           
  7356                           ;ir.c: 11: uint8_t idx = 0xFF;
  7357  0D73  30FF               	movlw	255
  7358  0D74  00CE               	movwf	IR_GetIndex@idx
  7359                           
  7360                           ;ir.c: 12: switch (keynum) {
  7361  0D75  2D91               	goto	l6478
  7362  0D76                     l6458:	
  7363                           
  7364                           ;ir.c: 14: case 0x54:
  7365                           ;ir.c: 15: case 0x50:
  7366                           ;ir.c: 16: idx = 0;
  7367  0D76  01CE               	clrf	IR_GetIndex@idx
  7368                           
  7369                           ;ir.c: 17: break;
  7370  0D77  2DF3               	goto	l6480
  7371  0D78                     l894:	
  7372                           
  7373                           ;ir.c: 19: case 0x55:
  7374                           ;ir.c: 20: case 0x51:
  7375                           ;ir.c: 21: idx = 1;
  7376  0D78  01CE               	clrf	IR_GetIndex@idx
  7377  0D79  0ACE               	incf	IR_GetIndex@idx,f
  7378                           
  7379                           ;ir.c: 22: break;
  7380  0D7A  2DF3               	goto	l6480
  7381  0D7B                     l6460:	
  7382                           
  7383                           ;ir.c: 24: case 0x49:
  7384                           ;ir.c: 25: case 0x4D:
  7385                           ;ir.c: 26: idx = 2;
  7386  0D7B  3002               	movlw	2
  7387  0D7C  2D8F               	goto	L16
  7388  0D7D                     l6462:	
  7389                           ;ir.c: 27: break;
  7390                           
  7391                           
  7392                           ;ir.c: 29: case 0x44:
  7393                           ;ir.c: 30: case 0x4C:
  7394                           ;ir.c: 31: idx = 3;
  7395  0D7D  3003               	movlw	3
  7396  0D7E  2D8F               	goto	L16
  7397  0D7F                     l6464:	
  7398                           ;ir.c: 32: break;
  7399                           
  7400                           
  7401                           ;ir.c: 34: case 0x40:
  7402                           ;ir.c: 35: idx = 4;
  7403  0D7F  3004               	movlw	4
  7404  0D80  2D8F               	goto	L16
  7405  0D81                     l905:	
  7406                           ;ir.c: 36: break;
  7407                           
  7408  0D81                     l6466:	
  7409                           
  7410                           ;ir.c: 38: case 0x1D:
  7411                           ;ir.c: 39: case 0x1E:
  7412                           ;ir.c: 40: case 0x1F:
  7413                           ;ir.c: 41: idx = keynum - 0x1C + 1;
  7414  0D81  084F               	movf	IR_GetIndex@keynum,w
  7415  0D82  3EE5               	addlw	229
  7416  0D83  2D8F               	goto	L16
  7417  0D84                     l909:	
  7418                           ;ir.c: 42: break;
  7419                           
  7420  0D84                     l6468:	
  7421                           
  7422                           ;ir.c: 44: case 0x15:
  7423                           ;ir.c: 45: case 0x16:
  7424                           ;ir.c: 46: case 0x17:
  7425                           ;ir.c: 47: idx = keynum - 0x14 + 5;
  7426  0D84  084F               	movf	IR_GetIndex@keynum,w
  7427  0D85  3EF1               	addlw	241
  7428  0D86  2D8F               	goto	L16
  7429  0D87                     l913:	
  7430                           ;ir.c: 48: break;
  7431                           
  7432  0D87                     l6470:	
  7433                           
  7434                           ;ir.c: 50: case 0x0D:
  7435                           ;ir.c: 51: case 0x0E:
  7436                           ;ir.c: 52: case 0x0F:
  7437                           ;ir.c: 53: idx = keynum - 0x0C;
  7438  0D87  084F               	movf	IR_GetIndex@keynum,w
  7439  0D88  3EF4               	addlw	244
  7440  0D89  2D8F               	goto	L16
  7441  0D8A                     l917:	
  7442                           ;ir.c: 54: break;
  7443                           
  7444  0D8A                     l6472:	
  7445                           
  7446                           ;ir.c: 56: case 0x09:
  7447                           ;ir.c: 57: case 0x0A:
  7448                           ;ir.c: 58: case 0x0B:
  7449                           ;ir.c: 59: idx = keynum - 0x08 + 4;
  7450  0D8A  084F               	movf	IR_GetIndex@keynum,w
  7451  0D8B  3EFC               	addlw	252
  7452  0D8C  2D8F               	goto	L16
  7453  0D8D                     l6474:	
  7454                           ;ir.c: 60: break;
  7455                           
  7456                           
  7457                           ;ir.c: 62: case 0x05:
  7458                           ;ir.c: 63: idx = keynum - 0x04 + 8;
  7459  0D8D  084F               	movf	IR_GetIndex@keynum,w
  7460  0D8E  3E04               	addlw	4
  7461  0D8F                     L16:	
  7462  0D8F  00CE               	movwf	IR_GetIndex@idx
  7463                           
  7464                           ;ir.c: 64: break;
  7465  0D90  2DF3               	goto	l6480
  7466  0D91                     l6478:	
  7467  0D91  084F               	movf	IR_GetIndex@keynum,w
  7468                           
  7469                           ; Switch size 1, requested type "space"
  7470                           ; Number of cases is 32, Range of values is 4 to 89
  7471                           ; switch strategies available:
  7472                           ; Name         Instructions Cycles
  7473                           ; simple_byte           97    49 (average)
  7474                           ; direct_byte          181     9 (fixed)
  7475                           ; jumptable            263     9 (fixed)
  7476                           ;	Chosen strategy is simple_byte
  7477  0D92  3A04               	xorlw	4	; case 4
  7478  0D93  1903               	skipnz
  7479  0D94  2D8D               	goto	l6474
  7480  0D95  3A01               	xorlw	1	; case 5
  7481  0D96  1903               	skipnz
  7482  0D97  2D8D               	goto	l6474
  7483  0D98  3A0D               	xorlw	13	; case 8
  7484  0D99  1903               	skipnz
  7485  0D9A  2D8A               	goto	l917
  7486  0D9B  3A01               	xorlw	1	; case 9
  7487  0D9C  1903               	skipnz
  7488  0D9D  2D8A               	goto	l6472
  7489  0D9E  3A03               	xorlw	3	; case 10
  7490  0D9F  1903               	skipnz
  7491  0DA0  2D8A               	goto	l6472
  7492  0DA1  3A01               	xorlw	1	; case 11
  7493  0DA2  1903               	skipnz
  7494  0DA3  2D8A               	goto	l6472
  7495  0DA4  3A07               	xorlw	7	; case 12
  7496  0DA5  1903               	skipnz
  7497  0DA6  2D87               	goto	l913
  7498  0DA7  3A01               	xorlw	1	; case 13
  7499  0DA8  1903               	skipnz
  7500  0DA9  2D87               	goto	l6470
  7501  0DAA  3A03               	xorlw	3	; case 14
  7502  0DAB  1903               	skipnz
  7503  0DAC  2D87               	goto	l6470
  7504  0DAD  3A01               	xorlw	1	; case 15
  7505  0DAE  1903               	skipnz
  7506  0DAF  2D87               	goto	l6470
  7507  0DB0  3A1B               	xorlw	27	; case 20
  7508  0DB1  1903               	skipnz
  7509  0DB2  2D84               	goto	l909
  7510  0DB3  3A01               	xorlw	1	; case 21
  7511  0DB4  1903               	skipnz
  7512  0DB5  2D84               	goto	l6468
  7513  0DB6  3A03               	xorlw	3	; case 22
  7514  0DB7  1903               	skipnz
  7515  0DB8  2D84               	goto	l6468
  7516  0DB9  3A01               	xorlw	1	; case 23
  7517  0DBA  1903               	skipnz
  7518  0DBB  2D84               	goto	l6468
  7519  0DBC  3A0B               	xorlw	11	; case 28
  7520  0DBD  1903               	skipnz
  7521  0DBE  2D81               	goto	l905
  7522  0DBF  3A01               	xorlw	1	; case 29
  7523  0DC0  1903               	skipnz
  7524  0DC1  2D81               	goto	l6466
  7525  0DC2  3A03               	xorlw	3	; case 30
  7526  0DC3  1903               	skipnz
  7527  0DC4  2D81               	goto	l6466
  7528  0DC5  3A01               	xorlw	1	; case 31
  7529  0DC6  1903               	skipnz
  7530  0DC7  2D81               	goto	l6466
  7531  0DC8  3A5F               	xorlw	95	; case 64
  7532  0DC9  1903               	skipnz
  7533  0DCA  2D7F               	goto	l6464
  7534  0DCB  3A01               	xorlw	1	; case 65
  7535  0DCC  1903               	skipnz
  7536  0DCD  2D7F               	goto	l6464
  7537  0DCE  3A05               	xorlw	5	; case 68
  7538  0DCF  1903               	skipnz
  7539  0DD0  2D7D               	goto	l6462
  7540  0DD1  3A01               	xorlw	1	; case 69
  7541  0DD2  1903               	skipnz
  7542  0DD3  2D7B               	goto	l6460
  7543  0DD4  3A0D               	xorlw	13	; case 72
  7544  0DD5  1903               	skipnz
  7545  0DD6  2D7D               	goto	l6462
  7546  0DD7  3A01               	xorlw	1	; case 73
  7547  0DD8  1903               	skipnz
  7548  0DD9  2D7B               	goto	l6460
  7549  0DDA  3A05               	xorlw	5	; case 76
  7550  0DDB  1903               	skipnz
  7551  0DDC  2D7D               	goto	l6462
  7552  0DDD  3A01               	xorlw	1	; case 77
  7553  0DDE  1903               	skipnz
  7554  0DDF  2D7B               	goto	l6460
  7555  0DE0  3A1D               	xorlw	29	; case 80
  7556  0DE1  1903               	skipnz
  7557  0DE2  2D76               	goto	l6458
  7558  0DE3  3A01               	xorlw	1	; case 81
  7559  0DE4  1903               	skipnz
  7560  0DE5  2D78               	goto	l894
  7561  0DE6  3A05               	xorlw	5	; case 84
  7562  0DE7  1903               	skipnz
  7563  0DE8  2D76               	goto	l6458
  7564  0DE9  3A01               	xorlw	1	; case 85
  7565  0DEA  1903               	skipnz
  7566  0DEB  2D78               	goto	l894
  7567  0DEC  3A0D               	xorlw	13	; case 88
  7568  0DED  1903               	skipnz
  7569  0DEE  2D76               	goto	l6458
  7570  0DEF  3A01               	xorlw	1	; case 89
  7571  0DF0  1903               	skipnz
  7572  0DF1  2D78               	goto	l894
  7573  0DF2  2DF3               	goto	l6480
  7574  0DF3                     l6480:	
  7575                           
  7576                           ;ir.c: 68: return idx;
  7577  0DF3  084E               	movf	IR_GetIndex@idx,w
  7578  0DF4  0008               	return
  7579  0DF5                     __end_of_IR_GetIndex:	
  7580  0DF5                     __ptext48:	
  7581 ;; *************** function _IR_ExitSet *****************
  7582 ;; Defined at:
  7583 ;;		line 434 in file "user/src/ir.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;		None
  7586 ;; Auto vars:     Size  Location     Type
  7587 ;;		None
  7588 ;; Return value:  Size  Location     Type
  7589 ;;                  1    wreg      void 
  7590 ;; Registers used:
  7591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7592 ;; Tracked objects:
  7593 ;;		On entry : 14/8
  7594 ;;		On exit  : 1F/0
  7595 ;;		Unchanged: 0/0
  7596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;Total ram usage:        0 bytes
  7602 ;; Hardware stack levels used:    1
  7603 ;; Hardware stack levels required when called:   10
  7604 ;; This function calls:
  7605 ;;		_Led_Initialize
  7606 ;;		_Led_StartNotice
  7607 ;; This function is called by:
  7608 ;;		_IR_KeyAction
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           
  7613                           ;psect for function _IR_ExitSet
  7614  0DF5                     _IR_ExitSet:	
  7615                           
  7616                           ;ir.c: 435: ir_state.mSet = 0;
  7617                           
  7618                           ;incstack = 0
  7619                           ; Regs used in _IR_ExitSet: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7620  0DF5  301F               	movlw	-225
  7621  0DF6  0020               	movlb	0	; select bank0
  7622  0DF7  05B6               	andwf	_ir_state,f	;volatile
  7623                           
  7624                           ;ir.c: 436: ir_state.tmIdx = 0;
  7625  0DF8  01B7               	clrf	_ir_state+1	;volatile
  7626                           
  7627                           ;ir.c: 437: ir_state.mSetDelay = 0;
  7628  0DF9  01BC               	clrf	_ir_state+6	;volatile
  7629                           
  7630                           ;ir.c: 438: Led_StartNotice(1);
  7631  0DFA  3001               	movlw	1
  7632  0DFB  255F  3188         	fcall	_Led_StartNotice
  7633                           
  7634                           ;ir.c: 439: Led_Initialize();
  7635  0DFD  28F9               	ljmp	l5966
  7636  0DFE                     __end_of_IR_ExitSet:	
  7637  0DFE                     __ptext45:	
  7638 ;; *************** function _IR_IsValidTime *****************
  7639 ;; Defined at:
  7640 ;;		line 71 in file "user/src/ir.c"
  7641 ;; Parameters:    Size  Location     Type
  7642 ;;  tm              1    wreg     PTR unsigned char 
  7643 ;;		 -> ir_state.time(4), ir_state(7), 
  7644 ;;  len             1   17[BANK0 ] unsigned char 
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;  tm              1   21[BANK0 ] PTR unsigned char 
  7647 ;;		 -> ir_state.time(4), ir_state(7), 
  7648 ;;  hour            1   20[BANK0 ] unsigned char 
  7649 ;;  result          1   19[BANK0 ] unsigned char 
  7650 ;;  min             1   18[BANK0 ] unsigned char 
  7651 ;; Return value:  Size  Location     Type
  7652 ;;                  1    wreg      unsigned char 
  7653 ;; Registers used:
  7654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7655 ;; Tracked objects:
  7656 ;;		On entry : 1F/0
  7657 ;;		On exit  : 1F/0
  7658 ;;		Unchanged: 0/0
  7659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7660 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7663 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7664 ;;Total ram usage:        5 bytes
  7665 ;; Hardware stack levels used:    1
  7666 ;; Hardware stack levels required when called:    8
  7667 ;; This function calls:
  7668 ;;		___bmul
  7669 ;; This function is called by:
  7670 ;;		_IR_KeyAction
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           
  7675                           ;psect for function _IR_IsValidTime
  7676  0DFE                     _IR_IsValidTime:	
  7677                           
  7678                           ;incstack = 0
  7679                           ; Regs used in _IR_IsValidTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7680                           ;IR_IsValidTime@tm stored from wreg
  7681  0DFE  00D5               	movwf	IR_IsValidTime@tm
  7682                           
  7683                           ;ir.c: 72: bool result = 0;
  7684  0DFF  01D3               	clrf	IR_IsValidTime@result
  7685                           
  7686                           ;ir.c: 74: uint8_t min = 0;
  7687  0E00  01D2               	clrf	IR_IsValidTime@min
  7688                           
  7689                           ;ir.c: 76: switch (len) {
  7690  0E01  2E3C               	goto	l6514
  7691  0E02                     l6486:	
  7692                           
  7693                           ;ir.c: 78: if ((*tm) < 3) {
  7694  0E02  0855               	movf	IR_IsValidTime@tm,w
  7695  0E03  0086               	movwf	6
  7696  0E04  3003               	movlw	3
  7697  0E05                     L9:	
  7698  0E05  0187               	clrf	7
  7699  0E06  0201               	subwf	1,w
  7700  0E07                     L8:	
  7701  0E07  1803               	skipnc
  7702  0E08  2E4A               	goto	l6516
  7703                           
  7704                           ;ir.c: 79: result = 1;
  7705  0E09  01D3               	clrf	IR_IsValidTime@result
  7706  0E0A  0AD3               	incf	IR_IsValidTime@result,f
  7707  0E0B  2E4A               	goto	l6516
  7708  0E0C                     l6490:	
  7709                           
  7710                           ;ir.c: 83: hour = (*tm)*10 + (*(tm + 1));
  7711  0E0C  26E2  3188         	fcall	PL26	;call to abstracted procedure
  7712  0E0E  2505  3188         	fcall	___bmul
  7713                           
  7714                           ;ir.c: 84: if (hour < 24) {
  7715  0E10  2770  3188         	fcall	PL112	;call to abstracted procedure
  7716  0E12  2E07               	goto	L8
  7717  0E13                     l6496:	
  7718                           
  7719                           ;ir.c: 89: hour = (*tm)*10 + (*(tm + 1));
  7720  0E13  26E2  3188         	fcall	PL26	;call to abstracted procedure
  7721  0E15  2505  3188         	fcall	___bmul
  7722                           
  7723                           ;ir.c: 90: if (hour < 24 && (*(tm + 2)) < 6) {
  7724  0E17  2770  3188         	fcall	PL112	;call to abstracted procedure
  7725  0E19  1803               	skipnc
  7726  0E1A  2E4A               	goto	l6516
  7727  0E1B  0855               	movf	IR_IsValidTime@tm,w
  7728  0E1C  3E02               	addlw	2
  7729  0E1D  0086               	movwf	6
  7730  0E1E  3006               	movlw	6
  7731  0E1F  2E05               	goto	L9
  7732  0E20                     l6504:	
  7733                           
  7734                           ;ir.c: 95: hour = (*tm)*10 + (*(tm + 1));
  7735  0E20  26E2  3188         	fcall	PL26	;call to abstracted procedure
  7736  0E22  2505  3188         	fcall	___bmul
  7737  0E24  0701               	addwf	1,w
  7738  0E25  00D4               	movwf	IR_IsValidTime@hour
  7739                           
  7740                           ;ir.c: 96: min = (*(tm + 2))*10 + (*(tm + 3));
  7741  0E26  0855               	movf	IR_IsValidTime@tm,w
  7742  0E27  3E03               	addlw	3
  7743  0E28  0086               	movwf	6
  7744  0E29  300A               	movlw	10
  7745  0E2A  0187               	clrf	7
  7746  0E2B  00CE               	movwf	___bmul@multiplicand
  7747  0E2C  0855               	movf	IR_IsValidTime@tm,w
  7748  0E2D  3E02               	addlw	2
  7749  0E2E  0084               	movwf	4
  7750  0E2F  0185               	clrf	5
  7751  0E30  0800               	movf	0,w
  7752  0E31  2505  3188         	fcall	___bmul
  7753  0E33  0701               	addwf	1,w
  7754  0E34  00D2               	movwf	IR_IsValidTime@min
  7755                           
  7756                           ;ir.c: 97: if (hour < 24 && min < 60) {
  7757  0E35  3018               	movlw	24
  7758  0E36  0254               	subwf	IR_IsValidTime@hour,w
  7759  0E37  1803               	skipnc
  7760  0E38  2E4A               	goto	l6516
  7761  0E39  303C               	movlw	60
  7762  0E3A  0252               	subwf	IR_IsValidTime@min,w
  7763  0E3B  2E07               	goto	L8
  7764  0E3C                     l6514:	
  7765  0E3C  0851               	movf	IR_IsValidTime@len,w
  7766                           
  7767                           ; Switch size 1, requested type "space"
  7768                           ; Number of cases is 4, Range of values is 1 to 4
  7769                           ; switch strategies available:
  7770                           ; Name         Instructions Cycles
  7771                           ; simple_byte           13     7 (average)
  7772                           ; direct_byte           17     9 (fixed)
  7773                           ; jumptable            263     9 (fixed)
  7774                           ;	Chosen strategy is simple_byte
  7775  0E3D  3A01               	xorlw	1	; case 1
  7776  0E3E  1903               	skipnz
  7777  0E3F  2E02               	goto	l6486
  7778  0E40  3A03               	xorlw	3	; case 2
  7779  0E41  1903               	skipnz
  7780  0E42  2E0C               	goto	l6490
  7781  0E43  3A01               	xorlw	1	; case 3
  7782  0E44  1903               	skipnz
  7783  0E45  2E13               	goto	l6496
  7784  0E46  3A07               	xorlw	7	; case 4
  7785  0E47  1903               	skipnz
  7786  0E48  2E20               	goto	l6504
  7787  0E49  2E4A               	goto	l6516
  7788  0E4A                     l6516:	
  7789                           
  7790                           ;ir.c: 104: return result;
  7791  0E4A  0853               	movf	IR_IsValidTime@result,w
  7792  0E4B  0008               	return
  7793  0E4C                     __end_of_IR_IsValidTime:	
  7794  0E4C                     __ptext39:	
  7795 ;; *************** function _IR_KeyAtionIfPressed *****************
  7796 ;; Defined at:
  7797 ;;		line 679 in file "user/src/ir.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;		None
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;		None
  7802 ;; Return value:  Size  Location     Type
  7803 ;;                  1    wreg      void 
  7804 ;; Registers used:
  7805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7806 ;; Tracked objects:
  7807 ;;		On entry : 1D/2
  7808 ;;		On exit  : 1F/0
  7809 ;;		Unchanged: 0/0
  7810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;Total ram usage:        0 bytes
  7816 ;; Hardware stack levels used:    1
  7817 ;; Hardware stack levels required when called:   12
  7818 ;; This function calls:
  7819 ;;		_IR_KeyAction
  7820 ;; This function is called by:
  7821 ;;		_main
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           
  7826                           ;psect for function _IR_KeyAtionIfPressed
  7827  0E4C                     _IR_KeyAtionIfPressed:	
  7828                           
  7829                           ;ir.c: 680: if (ir_state.mKeyRcv) {
  7830                           
  7831                           ;incstack = 0
  7832                           ; Regs used in _IR_KeyAtionIfPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7833  0E4C  0020               	movlb	0	; select bank0
  7834  0E4D  1C36               	btfss	_ir_state,0	;volatile
  7835  0E4E  0008               	return
  7836                           
  7837                           ;ir.c: 681: IR_KeyAction();
  7838  0E4F  2A69               	ljmp	l6566
  7839  0E50                     __end_of_IR_KeyAtionIfPressed:	
  7840  0E50                     __ptext38:	
  7841 ;; *************** function _TMR1_StartTimer *****************
  7842 ;; Defined at:
  7843 ;;		line 21 in file "driver/src/tmr1.c"
  7844 ;; Parameters:    Size  Location     Type
  7845 ;;		None
  7846 ;; Auto vars:     Size  Location     Type
  7847 ;;		None
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  1    wreg      void 
  7850 ;; Registers used:
  7851 ;;		None
  7852 ;; Tracked objects:
  7853 ;;		On entry : 1E/0
  7854 ;;		On exit  : 1F/0
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;Total ram usage:        0 bytes
  7862 ;; Hardware stack levels used:    1
  7863 ;; Hardware stack levels required when called:    7
  7864 ;; This function calls:
  7865 ;;		Nothing
  7866 ;; This function is called by:
  7867 ;;		_main
  7868 ;;		_IR_ResetIfTMR1Overflow
  7869 ;; This function uses a non-reentrant model
  7870 ;;
  7871                           
  7872                           
  7873                           ;psect for function _TMR1_StartTimer
  7874  0E50                     _TMR1_StartTimer:	
  7875  0E50                     l4844:	
  7876                           ;incstack = 0
  7877                           ; Regs used in _TMR1_StartTimer: []
  7878                           
  7879                           
  7880                           ;tmr1.c: 23: T1CONbits.TMR1ON = 1;
  7881  0E50  0020               	movlb	0	; select bank0
  7882  0E51  141B               	bsf	27,0	;volatile
  7883  0E52  0008               	return
  7884  0E53                     __end_of_TMR1_StartTimer:	
  7885  0E53                     __ptext36:	
  7886 ;; *************** function _IR_ResetIfTMR1Overflow *****************
  7887 ;; Defined at:
  7888 ;;		line 215 in file "user/src/ir.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;		None
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;		None
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  1    wreg      void 
  7895 ;; Registers used:
  7896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7897 ;; Tracked objects:
  7898 ;;		On entry : 1F/0
  7899 ;;		On exit  : 1F/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7906 ;;Total ram usage:        0 bytes
  7907 ;; Hardware stack levels used:    1
  7908 ;; Hardware stack levels required when called:    8
  7909 ;; This function calls:
  7910 ;;		_TMR1_StartTimer
  7911 ;;		_TMR1_StopTimer
  7912 ;;		_TMR2_EnableInterrupt
  7913 ;; This function is called by:
  7914 ;;		_main
  7915 ;; This function uses a non-reentrant model
  7916 ;;
  7917                           
  7918                           
  7919                           ;psect for function _IR_ResetIfTMR1Overflow
  7920  0E53                     _IR_ResetIfTMR1Overflow:	
  7921                           
  7922                           ;ir.c: 216: if (PIR1bits.TMR1IF) {
  7923                           
  7924                           ;incstack = 0
  7925                           ; Regs used in _IR_ResetIfTMR1Overflow: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7926  0E53  1C11               	btfss	17,0	;volatile
  7927  0E54  0008               	return
  7928                           
  7929                           ;ir.c: 217: PIR1bits.TMR1IF = 0;
  7930  0E55  1011               	bcf	17,0	;volatile
  7931                           
  7932                           ;ir.c: 218: TMR1_StopTimer();
  7933  0E56  2694  3188         	fcall	_TMR1_StopTimer
  7934                           
  7935                           ;ir.c: 219: TMR1 = 0;
  7936  0E58  0199               	clrf	25	;volatile
  7937  0E59  019A               	clrf	26	;volatile
  7938                           
  7939                           ;ir.c: 220: ir_state.mState = 0;
  7940  0E5A  30E3               	movlw	-29
  7941  0E5B  05B6               	andwf	_ir_state,f	;volatile
  7942                           
  7943                           ;ir.c: 221: if (!ir_state.mKeyRpt) {
  7944  0E5C  1CB6               	btfss	_ir_state,1	;volatile
  7945  0E5D  2E61               	goto	l7002
  7946  0E5E  2E8D               	goto	l1032
  7947  0E5F                     l1037:	
  7948  0E5F                     l1047:	
  7949                           
  7950                           ;ir.c: 224: case 0x59:
  7951                           ;ir.c: 225: case 0x45:
  7952                           ;ir.c: 226: case 0x44:
  7953                           ;ir.c: 227: case 0x41:
  7954                           ;ir.c: 228: case 0x54:
  7955                           ;ir.c: 229: case 0x55:
  7956                           ;ir.c: 230: case 0x49:
  7957                           ;ir.c: 231: case 0x48:
  7958                           ;ir.c: 232: case 0x40:
  7959                           ;ir.c: 233: case 0x50:
  7960                           ;ir.c: 234: case 0x51:
  7961                           ;ir.c: 235: case 0x4D:
  7962                           ;ir.c: 236: case 0x4C:
  7963                           ;ir.c: 237: ir_state.mKeyRcv = 1;
  7964  0E5F  1436               	bsf	_ir_state,0	;volatile
  7965                           
  7966                           ;ir.c: 238: break;
  7967  0E60  2E8E               	goto	l7004
  7968  0E61                     l7002:	
  7969  0E61  0830               	movf	_keyValue,w	;volatile
  7970                           
  7971                           ; Switch size 1, requested type "space"
  7972                           ; Number of cases is 14, Range of values is 64 to 89
  7973                           ; switch strategies available:
  7974                           ; Name         Instructions Cycles
  7975                           ; simple_byte           43    22 (average)
  7976                           ; direct_byte           61     9 (fixed)
  7977                           ; jumptable            263     9 (fixed)
  7978                           ;	Chosen strategy is simple_byte
  7979  0E62  3A40               	xorlw	64	; case 64
  7980  0E63  1903               	skipnz
  7981  0E64  2E5F               	goto	l1047
  7982  0E65  3A01               	xorlw	1	; case 65
  7983  0E66  1903               	skipnz
  7984  0E67  2E5F               	goto	l1047
  7985  0E68  3A05               	xorlw	5	; case 68
  7986  0E69  1903               	skipnz
  7987  0E6A  2E5F               	goto	l1047
  7988  0E6B  3A01               	xorlw	1	; case 69
  7989  0E6C  1903               	skipnz
  7990  0E6D  2E5F               	goto	l1037
  7991  0E6E  3A0D               	xorlw	13	; case 72
  7992  0E6F  1903               	skipnz
  7993  0E70  2E5F               	goto	l1047
  7994  0E71  3A01               	xorlw	1	; case 73
  7995  0E72  1903               	skipnz
  7996  0E73  2E5F               	goto	l1047
  7997  0E74  3A05               	xorlw	5	; case 76
  7998  0E75  1903               	skipnz
  7999  0E76  2E5F               	goto	l1047
  8000  0E77  3A01               	xorlw	1	; case 77
  8001  0E78  1903               	skipnz
  8002  0E79  2E5F               	goto	l1047
  8003  0E7A  3A1D               	xorlw	29	; case 80
  8004  0E7B  1903               	skipnz
  8005  0E7C  2E5F               	goto	l1047
  8006  0E7D  3A01               	xorlw	1	; case 81
  8007  0E7E  1903               	skipnz
  8008  0E7F  2E5F               	goto	l1047
  8009  0E80  3A05               	xorlw	5	; case 84
  8010  0E81  1903               	skipnz
  8011  0E82  2E5F               	goto	l1047
  8012  0E83  3A01               	xorlw	1	; case 85
  8013  0E84  1903               	skipnz
  8014  0E85  2E5F               	goto	l1047
  8015  0E86  3A0D               	xorlw	13	; case 88
  8016  0E87  1903               	skipnz
  8017  0E88  2E5F               	goto	l1037
  8018  0E89  3A01               	xorlw	1	; case 89
  8019  0E8A  1903               	skipnz
  8020  0E8B  2E5F               	goto	l1037
  8021  0E8C  2E8E               	goto	l7004
  8022  0E8D                     l1032:	
  8023                           
  8024                           ;ir.c: 243: ir_state.mKeyRpt = 0;
  8025  0E8D  10B6               	bcf	_ir_state,1	;volatile
  8026  0E8E                     l7004:	
  8027                           
  8028                           ;ir.c: 244: }
  8029                           ;ir.c: 245: TMR2_EnableInterrupt();
  8030  0E8E  2691  3188         	fcall	_TMR2_EnableInterrupt
  8031                           
  8032                           ;ir.c: 246: TMR1_StartTimer();
  8033  0E90  2E50               	ljmp	l4844
  8034  0E91                     __end_of_IR_ResetIfTMR1Overflow:	
  8035  0E91                     __ptext43:	
  8036 ;; *************** function _TMR2_EnableInterrupt *****************
  8037 ;; Defined at:
  8038 ;;		line 45 in file "driver/src/tmr2.c"
  8039 ;; Parameters:    Size  Location     Type
  8040 ;;		None
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;		None
  8043 ;; Return value:  Size  Location     Type
  8044 ;;                  1    wreg      void 
  8045 ;; Registers used:
  8046 ;;		None
  8047 ;; Tracked objects:
  8048 ;;		On entry : 14/0
  8049 ;;		On exit  : 1F/1
  8050 ;;		Unchanged: 0/0
  8051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;Total ram usage:        0 bytes
  8057 ;; Hardware stack levels used:    1
  8058 ;; Hardware stack levels required when called:    7
  8059 ;; This function calls:
  8060 ;;		Nothing
  8061 ;; This function is called by:
  8062 ;;		_IR_ResetIfTMR1Overflow
  8063 ;;		_IR_KeyAction
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           
  8068                           ;psect for function _TMR2_EnableInterrupt
  8069  0E91                     _TMR2_EnableInterrupt:	
  8070                           
  8071                           ;tmr2.c: 47: PIE1bits.TMR2IE = 1;
  8072                           
  8073                           ;incstack = 0
  8074                           ; Regs used in _TMR2_EnableInterrupt: []
  8075  0E91  0021               	movlb	1	; select bank1
  8076  0E92  1491               	bsf	17,1	;volatile
  8077  0E93  0008               	return
  8078  0E94                     __end_of_TMR2_EnableInterrupt:	
  8079  0E94                     __ptext37:	
  8080 ;; *************** function _TMR1_StopTimer *****************
  8081 ;; Defined at:
  8082 ;;		line 26 in file "driver/src/tmr1.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;		None
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;		None
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  1    wreg      void 
  8089 ;; Registers used:
  8090 ;;		None
  8091 ;; Tracked objects:
  8092 ;;		On entry : 1F/0
  8093 ;;		On exit  : 1F/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;Total ram usage:        0 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    7
  8103 ;; This function calls:
  8104 ;;		Nothing
  8105 ;; This function is called by:
  8106 ;;		_IR_ResetIfTMR1Overflow
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           
  8111                           ;psect for function _TMR1_StopTimer
  8112  0E94                     _TMR1_StopTimer:	
  8113                           
  8114                           ;tmr1.c: 28: T1CONbits.TMR1ON = 0;
  8115                           
  8116                           ;incstack = 0
  8117                           ; Regs used in _TMR1_StopTimer: []
  8118  0E94  101B               	bcf	27,0	;volatile
  8119  0E95  0008               	return
  8120  0E96                     __end_of_TMR1_StopTimer:	
  8121  0E96                     __ptext34:	
  8122 ;; *************** function _IR_UpdateSetStatus *****************
  8123 ;; Defined at:
  8124 ;;		line 688 in file "user/src/ir.c"
  8125 ;; Parameters:    Size  Location     Type
  8126 ;;		None
  8127 ;; Auto vars:     Size  Location     Type
  8128 ;;		None
  8129 ;; Return value:  Size  Location     Type
  8130 ;;                  1    wreg      void 
  8131 ;; Registers used:
  8132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8133 ;; Tracked objects:
  8134 ;;		On entry : 1D/2
  8135 ;;		On exit  : 1F/0
  8136 ;;		Unchanged: 0/0
  8137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8142 ;;Total ram usage:        0 bytes
  8143 ;; Hardware stack levels used:    1
  8144 ;; Hardware stack levels required when called:   11
  8145 ;; This function calls:
  8146 ;;		_IR_ExitTimeout
  8147 ;; This function is called by:
  8148 ;;		_main
  8149 ;; This function uses a non-reentrant model
  8150 ;;
  8151                           
  8152                           
  8153                           ;psect for function _IR_UpdateSetStatus
  8154  0E96                     _IR_UpdateSetStatus:	
  8155                           
  8156                           ;ir.c: 689: if (ir_state.mSet) {
  8157                           
  8158                           ;incstack = 0
  8159                           ; Regs used in _IR_UpdateSetStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8160  0E96  0020               	movlb	0	; select bank0
  8161  0E97  0E36               	swapf	_ir_state,w	;volatile
  8162  0E98  0C89               	rrf	9,f
  8163  0E99  3907               	andlw	7
  8164  0E9A  1903               	skipnz
  8165  0E9B  0008               	return
  8166                           
  8167                           ;ir.c: 690: ir_state.mSetDelay++;
  8168  0E9C  0ABC               	incf	_ir_state+6,f	;volatile
  8169                           
  8170                           ;ir.c: 691: if (ir_state.mSetDelay > 10) {
  8171  0E9D  300B               	movlw	11
  8172  0E9E  023C               	subwf	_ir_state+6,w	;volatile
  8173  0E9F  1C03               	skipc
  8174  0EA0  0008               	return
  8175                           
  8176                           ;ir.c: 692: IR_ExitTimeout();
  8177  0EA1  2FC0               	ljmp	l6556
  8178  0EA2                     __end_of_IR_UpdateSetStatus:	
  8179  0EA2                     __ptext20:	
  8180 ;; *************** function _Led_SaveParaIfChanged *****************
  8181 ;; Defined at:
  8182 ;;		line 153 in file "user/src/led.c"
  8183 ;; Parameters:    Size  Location     Type
  8184 ;;		None
  8185 ;; Auto vars:     Size  Location     Type
  8186 ;;		None
  8187 ;; Return value:  Size  Location     Type
  8188 ;;                  1    wreg      void 
  8189 ;; Registers used:
  8190 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8191 ;; Tracked objects:
  8192 ;;		On entry : 1F/0
  8193 ;;		On exit  : 1E/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;Total ram usage:        0 bytes
  8201 ;; Hardware stack levels used:    1
  8202 ;; Hardware stack levels required when called:    9
  8203 ;; This function calls:
  8204 ;;		_DATAEE_WriteBuffer
  8205 ;; This function is called by:
  8206 ;;		_main
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210                           
  8211                           ;psect for function _Led_SaveParaIfChanged
  8212  0EA2                     _Led_SaveParaIfChanged:	
  8213                           
  8214                           ;led.c: 154: if (gLedRunPara.mParaChanged) {
  8215                           
  8216                           ;incstack = 0
  8217                           ; Regs used in _Led_SaveParaIfChanged: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8218  0EA2  0021               	movlb	1	; select bank1
  8219  0EA3  1C5C               	btfss	(_gLedRunPara^(0+128)+20),0	;volatile
  8220  0EA4  0008               	return
  8221                           
  8222                           ;led.c: 155: gLedRunPara.mParaChanged = 0;
  8223  0EA5  105C               	bcf	(_gLedRunPara^(0+128)+20),0	;volatile
  8224                           
  8225                           ;led.c: 156: DATAEE_WriteBuffer(0x7010, (uint8_t *) & gLedPara, sizeof ( gLedPara));
  8226  0EA6  3010               	movlw	16
  8227  0EA7  0020               	movlb	0	; select bank0
  8228  0EA8  00D2               	movwf	DATAEE_WriteBuffer@addr
  8229  0EA9  3070               	movlw	112
  8230  0EAA  00D3               	movwf	DATAEE_WriteBuffer@addr+1
  8231  0EAB  3020               	movlw	(low (_gLedPara| (0+256)))& (0+255)
  8232  0EAC  00D4               	movwf	DATAEE_WriteBuffer@buf
  8233  0EAD  304E               	movlw	78
  8234  0EAE  00D5               	movwf	DATAEE_WriteBuffer@len
  8235  0EAF  2FC8               	ljmp	l4748
  8236  0EB0                     __end_of_Led_SaveParaIfChanged:	
  8237  0EB0                     __ptext2:	
  8238 ;; *************** function _TMR0_StartTimer *****************
  8239 ;; Defined at:
  8240 ;;		line 17 in file "driver/src/tmr0.c"
  8241 ;; Parameters:    Size  Location     Type
  8242 ;;		None
  8243 ;; Auto vars:     Size  Location     Type
  8244 ;;		None
  8245 ;; Return value:  Size  Location     Type
  8246 ;;                  1    wreg      void 
  8247 ;; Registers used:
  8248 ;;		None
  8249 ;; Tracked objects:
  8250 ;;		On entry : 1F/0
  8251 ;;		On exit  : 1F/0
  8252 ;;		Unchanged: 0/0
  8253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;Total ram usage:        0 bytes
  8259 ;; Hardware stack levels used:    1
  8260 ;; Hardware stack levels required when called:    7
  8261 ;; This function calls:
  8262 ;;		Nothing
  8263 ;; This function is called by:
  8264 ;;		_main
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           
  8269                           ;psect for function _TMR0_StartTimer
  8270  0EB0                     _TMR0_StartTimer:	
  8271                           
  8272                           ;tmr0.c: 19: T0CON0bits.T0EN = 1;
  8273                           
  8274                           ;incstack = 0
  8275                           ; Regs used in _TMR0_StartTimer: []
  8276  0EB0  1797               	bsf	23,7	;volatile
  8277  0EB1  0008               	return
  8278  0EB2                     __end_of_TMR0_StartTimer:	
  8279  0EB2                     PL8:	
  8280  0EB2  0084               	movwf	4
  8281  0EB3  3001               	movlw	1	; select bank2/3
  8282  0EB4  0085               	movwf	5
  8283  0EB5  3F40               	moviw [0]fsr1
  8284  0EB6  3F80               	movwi [0]fsr0
  8285  0EB7  3F41               	moviw [1]fsr1
  8286  0EB8  3F81               	movwi [1]fsr0
  8287  0EB9  0008               	return
  8288  0EBA                     __end_ofPL8:	
  8289  0EBA                     PL14:	
  8290  0EBA  084E               	movf	?___wmul,w
  8291  0EBB  0023               	movlb	3	; select bank3
  8292  0EBC  0744               	addwf	(??_IR_KeyAction+4)^(0+384),w
  8293  0EBD  00C6               	movwf	(??_IR_KeyAction+6)^(0+384)
  8294  0EBE  0020               	movlb	0	; select bank0
  8295  0EBF  084F               	movf	?___wmul+1,w
  8296  0EC0  0023               	movlb	3	; select bank3
  8297  0EC1  3D45               	addwfc	(??_IR_KeyAction+5)^(0+384),w
  8298  0EC2  00C7               	movwf	(??_IR_KeyAction+7)^(0+384)
  8299  0EC3  0840               	movf	??_IR_KeyAction^(0+384),w
  8300  0EC4  0746               	addwf	(??_IR_KeyAction+6)^(0+384),w
  8301  0EC5  00C8               	movwf	(??_IR_KeyAction+8)^(0+384)
  8302  0EC6  0841               	movf	(??_IR_KeyAction+1)^(0+384),w
  8303  0EC7  3D47               	addwfc	(??_IR_KeyAction+7)^(0+384),w
  8304  0EC8  00C9               	movwf	(??_IR_KeyAction+9)^(0+384)
  8305  0EC9  0848               	movf	(??_IR_KeyAction+8)^(0+384),w
  8306  0ECA  0022               	movlb	2	; select bank2
  8307  0ECB  0008               	return
  8308  0ECC                     __end_ofPL14:	
  8309  0ECC                     PL20:	
  8310  0ECC  084E               	movf	?___wmul,w
  8311  0ECD  0023               	movlb	3	; select bank3
  8312  0ECE  0742               	addwf	(??_IR_KeyAction+2)^(0+384),w
  8313  0ECF  00C4               	movwf	(??_IR_KeyAction+4)^(0+384)
  8314  0ED0  0020               	movlb	0	; select bank0
  8315  0ED1  084F               	movf	?___wmul+1,w
  8316  0ED2  0023               	movlb	3	; select bank3
  8317  0ED3  3D43               	addwfc	(??_IR_KeyAction+3)^(0+384),w
  8318  0ED4  00C5               	movwf	(??_IR_KeyAction+5)^(0+384)
  8319  0ED5  0020               	movlb	0	; select bank0
  8320  0ED6  083A               	movf	_ir_state+4,w	;volatile
  8321  0ED7  00CE               	movwf	___wmul@multiplier
  8322  0ED8  300A               	movlw	10
  8323  0ED9  01CF               	clrf	___wmul@multiplier+1
  8324  0EDA  00D0               	movwf	___wmul@multiplicand
  8325  0EDB  01D1               	clrf	___wmul@multiplicand+1
  8326  0EDC  0008               	return
  8327  0EDD                     __end_ofPL20:	
  8328  0EDD                     PL24:	
  8329  0EDD  3F40               	moviw [0]fsr1
  8330  0EDE  3F80               	movwi [0]fsr0
  8331  0EDF  3F41               	moviw [1]fsr1
  8332  0EE0  3F81               	movwi [1]fsr0
  8333  0EE1  3405               	retlw	5
  8334  0EE2                     __end_ofPL24:	
  8335  0EE2                     PL26:	
  8336  0EE2  0A55               	incf	IR_IsValidTime@tm,w
  8337  0EE3  0086               	movwf	6
  8338  0EE4  300A               	movlw	10
  8339  0EE5  0187               	clrf	7
  8340  0EE6  00CE               	movwf	___bmul@multiplicand
  8341  0EE7  0855               	movf	IR_IsValidTime@tm,w
  8342  0EE8  0084               	movwf	4
  8343  0EE9  0185               	clrf	5
  8344  0EEA  0800               	movf	0,w
  8345  0EEB  0008               	return
  8346  0EEC                     __end_ofPL26:	
  8347  0EEC                     PL28:	
  8348  0EEC  084E               	movf	?___wmul,w
  8349  0EED  0023               	movlb	3	; select bank3
  8350  0EEE  00C2               	movwf	(??_IR_KeyAction+2)^(0+384)
  8351  0EEF  0020               	movlb	0	; select bank0
  8352  0EF0  084F               	movf	?___wmul+1,w
  8353  0EF1  0023               	movlb	3	; select bank3
  8354  0EF2  00C3               	movwf	((??_IR_KeyAction+2)^(0+384)+1)
  8355  0EF3  0020               	movlb	0	; select bank0
  8356  0EF4  0839               	movf	_ir_state+3,w	;volatile
  8357  0EF5  00CE               	movwf	___wmul@multiplier
  8358  0EF6  303C               	movlw	60
  8359  0EF7  01CF               	clrf	___wmul@multiplier+1
  8360  0EF8  00D0               	movwf	___wmul@multiplicand
  8361  0EF9  01D1               	clrf	___wmul@multiplicand+1
  8362  0EFA  0008               	return
  8363  0EFB                     __end_ofPL28:	
  8364  0EFB                     PL30:	
  8365  0EFB  0823               	movf	(_gLedPara^(0+256)+3),w	;volatile
  8366  0EFC  3E05               	addlw	low (_VOLUME| (0+32768))
  8367  0EFD  0084               	movwf	4
  8368  0EFE  3098               	movlw	high (_VOLUME| (0+32768))
  8369  0EFF  1803               	skipnc
  8370  0F00  3E01               	addlw	1
  8371  0F01  0085               	movwf	5
  8372  0F02  0800               	movf	0,w	;code access
  8373  0F03  0008               	return
  8374  0F04                     __end_ofPL30:	
  8375  0F04                     PL32:	
  8376  0F04  083B               	movf	_ir_state+5,w	;volatile
  8377  0F05  0023               	movlb	3	; select bank3
  8378  0F06  00C0               	movwf	??_IR_KeyAction^(0+384)
  8379  0F07  01C1               	clrf	(??_IR_KeyAction^(0+384)+1)
  8380  0F08  0020               	movlb	0	; select bank0
  8381  0F09  0838               	movf	_ir_state+2,w	;volatile
  8382  0F0A  00CE               	movwf	___wmul@multiplier
  8383  0F0B  3058               	movlw	88
  8384  0F0C  01CF               	clrf	___wmul@multiplier+1
  8385  0F0D  00D0               	movwf	___wmul@multiplicand
  8386  0F0E  3002               	movlw	2
  8387  0F0F  00D1               	movwf	___wmul@multiplicand+1
  8388  0F10  0008               	return
  8389  0F11                     __end_ofPL32:	
  8390  0F11                     PL34:	
  8391  0F11  0086               	movwf	6
  8392  0F12  3001               	movlw	1	; select bank2/3
  8393  0F13  0087               	movwf	7
  8394  0F14  355B               	lslf	Led_Initialize@i,w
  8395  0F15  0008               	return
  8396  0F16                     __end_ofPL34:	
  8397  0F16                     PL40:	
  8398  0F16  0086               	movwf	6
  8399  0F17  355B               	lslf	Led_Initialize@i,w
  8400  0F18  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
  8401  0F19  0084               	movwf	4
  8402  0F1A  0008               	return
  8403  0F1B                     __end_ofPL40:	
  8404  0F1B                     PL44:	
  8405  0F1B  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  8406  0F1C  0020               	movlb	0	; select bank0
  8407  0F1D  00CE               	movwf	Util_IncValue@pSrc
  8408  0F1E  30E8               	movlw	232
  8409  0F1F  01CF               	clrf	Util_IncValue@pSrc+1
  8410  0F20  00D0               	movwf	Util_IncValue@max
  8411  0F21  3003               	movlw	3
  8412  0F22  00D1               	movwf	Util_IncValue@max+1
  8413  0F23  30C8               	movlw	200
  8414  0F24  00D2               	movwf	Util_IncValue@delta
  8415  0F25  01D3               	clrf	Util_IncValue@delta+1
  8416  0F26  0008               	return
  8417  0F27                     __end_ofPL44:	
  8418  0F27                     PL50:	
  8419  0F27  00C0               	movwf	??_IR_KeyAction^(0+384)
  8420  0F28  302E               	movlw	(low ((_gLedPara| (0+256)+14)))& (0+255)
  8421  0F29  35C0               	lslf	??_IR_KeyAction^(0+384),f
  8422  0F2A  0740               	addwf	??_IR_KeyAction^(0+384),w
  8423  0F2B  00C1               	movwf	(??_IR_KeyAction+1)^(0+384)
  8424  0F2C  300A               	movlw	10
  8425  0F2D  0020               	movlb	0	; select bank0
  8426  0F2E  00CE               	movwf	___bmul@multiplicand
  8427  0F2F  0023               	movlb	3	; select bank3
  8428  0F30  0851               	movf	IR_KeyAction@idx^(0+384),w
  8429  0F31  0008               	return
  8430  0F32                     __end_ofPL50:	
  8431  0F32                     PL52:	
  8432  0F32  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
  8433  0F33  0020               	movlb	0	; select bank0
  8434  0F34  00CE               	movwf	Util_DecValue@pSrc
  8435  0F35  30C8               	movlw	200
  8436  0F36  01CF               	clrf	Util_DecValue@pSrc+1
  8437  0F37  01D0               	clrf	Util_DecValue@min
  8438  0F38  01D1               	clrf	Util_DecValue@min+1
  8439  0F39  00D2               	movwf	Util_DecValue@delta
  8440  0F3A  01D3               	clrf	Util_DecValue@delta+1
  8441  0F3B  0008               	return
  8442  0F3C                     __end_ofPL52:	
  8443  0F3C                     PL58:	
  8444  0F3C  0C20               	rrf	_gLedPara^(0+256),w	;volatile
  8445  0F3D  0020               	movlb	0	; select bank0
  8446  0F3E  00D4               	movwf	??_Led_Initialize
  8447  0F3F  0CD4               	rrf	??_Led_Initialize,f
  8448  0F40  0C54               	rrf	??_Led_Initialize,w
  8449  0F41  390F               	andlw	15
  8450  0F42  0008               	return
  8451  0F43                     __end_ofPL58:	
  8452  0F43                     PL84:	
  8453  0F43  0022               	movlb	2	; select bank2
  8454  0F44  1020               	bcf	_gLedPara^(0+256),0	;volatile
  8455  0F45  3087               	movlw	-121
  8456  0F46  05A0               	andwf	_gLedPara^(0+256),f	;volatile
  8457  0F47  13A0               	bcf	_gLedPara^(0+256),7	;volatile
  8458  0F48  0008               	return
  8459  0F49                     __end_ofPL84:	
  8460  0F49                     PL86:	
  8461  0F49  0023               	movlb	3	; select bank3
  8462  0F4A  0741               	addwf	(??_IR_KeyAction+1)^(0+384),w
  8463  0F4B  00C2               	movwf	(??_IR_KeyAction+2)^(0+384)
  8464  0F4C  0086               	movwf	6
  8465  0F4D  3001               	movlw	1	; select bank2/3
  8466  0F4E  0087               	movwf	7
  8467  0F4F  0008               	return
  8468  0F50                     __end_ofPL86:	
  8469  0F50                     PL92:	
  8470  0F50  0086               	movwf	6
  8471  0F51  300A               	movlw	10
  8472  0F52  0187               	clrf	7
  8473  0F53  0020               	movlb	0	; select bank0
  8474  0F54  00CE               	movwf	___bmul@multiplicand
  8475  0F55  0008               	return
  8476  0F56                     __end_ofPL92:	
  8477  0F56                     PL94:	
  8478  0F56  30E8               	movlw	232
  8479  0F57  0021               	movlb	1	; select bank1
  8480  0F58  00C8               	movwf	_gLedRunPara^(0+128)	;volatile
  8481  0F59  3003               	movlw	3
  8482  0F5A  00C9               	movwf	(_gLedRunPara^(0+128)+1)	;volatile
  8483  0F5B  0008               	return
  8484  0F5C                     __end_ofPL94:	
  8485  0F5C                     PL98:	
  8486  0F5C  0E36               	swapf	_ir_state,w	;volatile
  8487  0F5D  0C89               	rrf	9,f
  8488  0F5E  3907               	andlw	7
  8489  0F5F  3A05               	xorlw	5
  8490  0F60  0008               	return
  8491  0F61                     __end_ofPL98:	
  8492  0F61                     PL100:	
  8493  0F61  0E36               	swapf	_ir_state,w	;volatile
  8494  0F62  0C89               	rrf	9,f
  8495  0F63  3907               	andlw	7
  8496  0F64  3A04               	xorlw	4
  8497  0F65  0008               	return
  8498  0F66                     __end_ofPL100:	
  8499  0F66                     PL104:	
  8500  0F66  0859               	movf	Audio_GetValue@value+1,w
  8501  0F67  00A9               	movwf	Audio_GetValue@max+1
  8502  0F68  0858               	movf	Audio_GetValue@value,w
  8503  0F69  00A8               	movwf	Audio_GetValue@max
  8504  0F6A  0008               	return
  8505  0F6B                     __end_ofPL104:	
  8506  0F6B                     PL110:	
  8507  0F6B  0022               	movlb	2	; select bank2
  8508  0F6C  0856               	movf	(_gLedPara^(0+256)+54),w	;volatile
  8509  0F6D  0020               	movlb	0	; select bank0
  8510  0F6E  0259               	subwf	Led_Initialize@ct,w
  8511  0F6F  0008               	return
  8512  0F70                     __end_ofPL110:	
  8513  0F70                     PL112:	
  8514  0F70  0701               	addwf	1,w
  8515  0F71  00D4               	movwf	IR_IsValidTime@hour
  8516  0F72  3018               	movlw	24
  8517  0F73  0254               	subwf	IR_IsValidTime@hour,w
  8518  0F74  0008               	return
  8519  0F75                     __end_ofPL112:	
  8520  0F75                     __ptext29:	
  8521 ;; *************** function _Interrupt_Initialize *****************
  8522 ;; Defined at:
  8523 ;;		line 159 in file "user/src/main.c"
  8524 ;; Parameters:    Size  Location     Type
  8525 ;;		None
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;		None
  8528 ;; Return value:  Size  Location     Type
  8529 ;;                  1    wreg      void 
  8530 ;; Registers used:
  8531 ;;		wreg, status,2, status,0, pclath, cstack
  8532 ;; Tracked objects:
  8533 ;;		On entry : 1F/1
  8534 ;;		On exit  : 1F/1
  8535 ;;		Unchanged: 0/0
  8536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;Total ram usage:        0 bytes
  8542 ;; Hardware stack levels used:    1
  8543 ;; Hardware stack levels required when called:    8
  8544 ;; This function calls:
  8545 ;;		_TMR0_SetInterruptHandler
  8546 ;;		_TMR1_Gate_SetInterruptHandler
  8547 ;;		_TMR2_SetInterruptHandler
  8548 ;;		_TMR4_SetInterruptHandler
  8549 ;; This function is called by:
  8550 ;;		_main
  8551 ;; This function uses a non-reentrant model
  8552 ;;
  8553                           
  8554                           
  8555                           ;psect for function _Interrupt_Initialize
  8556  0F75                     _Interrupt_Initialize:	
  8557                           
  8558                           ;main.c: 160: TMR1_Gate_SetInterruptHandler(IR_Decode);
  8559                           
  8560                           ;incstack = 0
  8561                           ; Regs used in _Interrupt_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8562  0F75  3010               	movlw	low _IR_Decode
  8563  0F76  0020               	movlb	0	; select bank0
  8564  0F77  00CE               	movwf	TMR1_Gate_SetInterruptHandler@handler
  8565  0F78  3016               	movlw	high _IR_Decode
  8566  0F79  00CF               	movwf	TMR1_Gate_SetInterruptHandler@handler+1
  8567  0F7A  2798  3188         	fcall	_TMR1_Gate_SetInterruptHandler
  8568                           
  8569                           ;main.c: 161: TMR0_SetInterruptHandler(RTC_OnSecond);
  8570  0F7C  30F2               	movlw	low _RTC_OnSecond
  8571  0F7D  0020               	movlb	0	; select bank0
  8572  0F7E  00CE               	movwf	TMR0_SetInterruptHandler@handler
  8573  0F7F  3014               	movlw	high _RTC_OnSecond
  8574  0F80  00CF               	movwf	TMR0_SetInterruptHandler@handler+1
  8575  0F81  2790  3188         	fcall	_TMR0_SetInterruptHandler
  8576                           
  8577                           ;main.c: 162: TMR2_SetInterruptHandler(Led_Run);
  8578  0F83  3030               	movlw	low _Led_Run
  8579  0F84  0020               	movlb	0	; select bank0
  8580  0F85  00CE               	movwf	TMR2_SetInterruptHandler@handler
  8581  0F86  3000               	movlw	high _Led_Run
  8582  0F87  00CF               	movwf	TMR2_SetInterruptHandler@handler+1
  8583  0F88  27A0  3188         	fcall	_TMR2_SetInterruptHandler
  8584                           
  8585                           ;main.c: 163: TMR4_SetInterruptHandler(Led_Notice);
  8586  0F8A  3074               	movlw	low _Led_Notice
  8587  0F8B  0020               	movlb	0	; select bank0
  8588  0F8C  00CE               	movwf	TMR4_SetInterruptHandler@handler
  8589  0F8D  3007               	movlw	high _Led_Notice
  8590  0F8E  00CF               	movwf	TMR4_SetInterruptHandler@handler+1
  8591  0F8F  2FA8               	ljmp	l4868
  8592  0F90                     __end_of_Interrupt_Initialize:	
  8593  0F90                     __ptext33:	
  8594 ;; *************** function _TMR0_SetInterruptHandler *****************
  8595 ;; Defined at:
  8596 ;;		line 37 in file "driver/src/tmr0.c"
  8597 ;; Parameters:    Size  Location     Type
  8598 ;;  handler         2   14[BANK0 ] PTR FTN()void 
  8599 ;;		 -> RTC_OnSecond(1), 
  8600 ;; Auto vars:     Size  Location     Type
  8601 ;;		None
  8602 ;; Return value:  Size  Location     Type
  8603 ;;                  1    wreg      void 
  8604 ;; Registers used:
  8605 ;;		wreg
  8606 ;; Tracked objects:
  8607 ;;		On entry : 1F/0
  8608 ;;		On exit  : 1F/1
  8609 ;;		Unchanged: 0/0
  8610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8611 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8614 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8615 ;;Total ram usage:        2 bytes
  8616 ;; Hardware stack levels used:    1
  8617 ;; Hardware stack levels required when called:    7
  8618 ;; This function calls:
  8619 ;;		Nothing
  8620 ;; This function is called by:
  8621 ;;		_Interrupt_Initialize
  8622 ;; This function uses a non-reentrant model
  8623 ;;
  8624                           
  8625                           
  8626                           ;psect for function _TMR0_SetInterruptHandler
  8627  0F90                     _TMR0_SetInterruptHandler:	
  8628                           
  8629                           ;tmr0.c: 39: tmr0_isr_handler = handler;
  8630                           
  8631                           ;incstack = 0
  8632                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  8633  0F90  084F               	movf	TMR0_SetInterruptHandler@handler+1,w
  8634  0F91  0021               	movlb	1	; select bank1
  8635  0F92  00E9               	movwf	(_tmr0_isr_handler+1)^(0+128)
  8636  0F93  0020               	movlb	0	; select bank0
  8637  0F94  084E               	movf	TMR0_SetInterruptHandler@handler,w
  8638  0F95  0021               	movlb	1	; select bank1
  8639  0F96  00E8               	movwf	_tmr0_isr_handler^(0+128)
  8640  0F97  0008               	return
  8641  0F98                     __end_of_TMR0_SetInterruptHandler:	
  8642  0F98                     __ptext32:	
  8643 ;; *************** function _TMR1_Gate_SetInterruptHandler *****************
  8644 ;; Defined at:
  8645 ;;		line 54 in file "driver/src/tmr1.c"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;  handler         2   14[BANK0 ] PTR FTN()void 
  8648 ;;		 -> IR_Decode(1), 
  8649 ;; Auto vars:     Size  Location     Type
  8650 ;;		None
  8651 ;; Return value:  Size  Location     Type
  8652 ;;                  1    wreg      void 
  8653 ;; Registers used:
  8654 ;;		wreg
  8655 ;; Tracked objects:
  8656 ;;		On entry : 1F/0
  8657 ;;		On exit  : 1F/1
  8658 ;;		Unchanged: 0/0
  8659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8660 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8663 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8664 ;;Total ram usage:        2 bytes
  8665 ;; Hardware stack levels used:    1
  8666 ;; Hardware stack levels required when called:    7
  8667 ;; This function calls:
  8668 ;;		Nothing
  8669 ;; This function is called by:
  8670 ;;		_Interrupt_Initialize
  8671 ;; This function uses a non-reentrant model
  8672 ;;
  8673                           
  8674                           
  8675                           ;psect for function _TMR1_Gate_SetInterruptHandler
  8676  0F98                     _TMR1_Gate_SetInterruptHandler:	
  8677                           
  8678                           ;tmr1.c: 56: tmr1_gate_isr_handler = handler;
  8679                           
  8680                           ;incstack = 0
  8681                           ; Regs used in _TMR1_Gate_SetInterruptHandler: [wreg]
  8682  0F98  084F               	movf	TMR1_Gate_SetInterruptHandler@handler+1,w
  8683  0F99  0021               	movlb	1	; select bank1
  8684  0F9A  00E7               	movwf	(_tmr1_gate_isr_handler+1)^(0+128)
  8685  0F9B  0020               	movlb	0	; select bank0
  8686  0F9C  084E               	movf	TMR1_Gate_SetInterruptHandler@handler,w
  8687  0F9D  0021               	movlb	1	; select bank1
  8688  0F9E  00E6               	movwf	_tmr1_gate_isr_handler^(0+128)
  8689  0F9F  0008               	return
  8690  0FA0                     __end_of_TMR1_Gate_SetInterruptHandler:	
  8691  0FA0                     __ptext31:	
  8692 ;; *************** function _TMR2_SetInterruptHandler *****************
  8693 ;; Defined at:
  8694 ;;		line 35 in file "driver/src/tmr2.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  handler         2   14[BANK0 ] PTR FTN()void 
  8697 ;;		 -> Led_Run(1), 
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;		None
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  1    wreg      void 
  8702 ;; Registers used:
  8703 ;;		wreg
  8704 ;; Tracked objects:
  8705 ;;		On entry : 1F/0
  8706 ;;		On exit  : 1F/1
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8709 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;Total ram usage:        2 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    7
  8716 ;; This function calls:
  8717 ;;		Nothing
  8718 ;; This function is called by:
  8719 ;;		_Interrupt_Initialize
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           
  8724                           ;psect for function _TMR2_SetInterruptHandler
  8725  0FA0                     _TMR2_SetInterruptHandler:	
  8726                           
  8727                           ;tmr2.c: 37: tmr2_isr_handler = handler;
  8728                           
  8729                           ;incstack = 0
  8730                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  8731  0FA0  084F               	movf	TMR2_SetInterruptHandler@handler+1,w
  8732  0FA1  0021               	movlb	1	; select bank1
  8733  0FA2  00E5               	movwf	(_tmr2_isr_handler+1)^(0+128)
  8734  0FA3  0020               	movlb	0	; select bank0
  8735  0FA4  084E               	movf	TMR2_SetInterruptHandler@handler,w
  8736  0FA5  0021               	movlb	1	; select bank1
  8737  0FA6  00E4               	movwf	_tmr2_isr_handler^(0+128)
  8738  0FA7  0008               	return
  8739  0FA8                     __end_of_TMR2_SetInterruptHandler:	
  8740  0FA8                     __ptext30:	
  8741 ;; *************** function _TMR4_SetInterruptHandler *****************
  8742 ;; Defined at:
  8743 ;;		line 37 in file "driver/src/tmr4.c"
  8744 ;; Parameters:    Size  Location     Type
  8745 ;;  handler         2   14[BANK0 ] PTR FTN()void 
  8746 ;;		 -> Led_Notice(1), 
  8747 ;; Auto vars:     Size  Location     Type
  8748 ;;		None
  8749 ;; Return value:  Size  Location     Type
  8750 ;;                  1    wreg      void 
  8751 ;; Registers used:
  8752 ;;		wreg
  8753 ;; Tracked objects:
  8754 ;;		On entry : 1F/0
  8755 ;;		On exit  : 1F/1
  8756 ;;		Unchanged: 0/0
  8757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8758 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8762 ;;Total ram usage:        2 bytes
  8763 ;; Hardware stack levels used:    1
  8764 ;; Hardware stack levels required when called:    7
  8765 ;; This function calls:
  8766 ;;		Nothing
  8767 ;; This function is called by:
  8768 ;;		_Interrupt_Initialize
  8769 ;; This function uses a non-reentrant model
  8770 ;;
  8771                           
  8772                           
  8773                           ;psect for function _TMR4_SetInterruptHandler
  8774  0FA8                     _TMR4_SetInterruptHandler:	
  8775  0FA8                     l4868:	
  8776                           ;incstack = 0
  8777                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  8778                           
  8779                           
  8780                           ;tmr4.c: 39: tmr4_isr_handler = handler;
  8781  0FA8  084F               	movf	TMR4_SetInterruptHandler@handler+1,w
  8782  0FA9  0021               	movlb	1	; select bank1
  8783  0FAA  00E3               	movwf	(_tmr4_isr_handler+1)^(0+128)
  8784  0FAB  0020               	movlb	0	; select bank0
  8785  0FAC  084E               	movf	TMR4_SetInterruptHandler@handler,w
  8786  0FAD  0021               	movlb	1	; select bank1
  8787  0FAE  00E2               	movwf	_tmr4_isr_handler^(0+128)
  8788  0FAF  0008               	return
  8789  0FB0                     __end_of_TMR4_SetInterruptHandler:	
  8790  0FB0                     __ptext19:	
  8791 ;; *************** function _RTC_HourReady *****************
  8792 ;; Defined at:
  8793 ;;		line 61 in file "user/src/rtc.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;		None
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;		None
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  1    wreg      unsigned char 
  8800 ;; Registers used:
  8801 ;;		wreg
  8802 ;; Tracked objects:
  8803 ;;		On entry : 1E/0
  8804 ;;		On exit  : 1F/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;Total ram usage:        0 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; Hardware stack levels required when called:    7
  8814 ;; This function calls:
  8815 ;;		Nothing
  8816 ;; This function is called by:
  8817 ;;		_main
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           
  8822                           ;psect for function _RTC_HourReady
  8823  0FB0                     _RTC_HourReady:	
  8824                           
  8825                           ;rtc.c: 63: if( rtc_status.mHour )
  8826                           
  8827                           ;incstack = 0
  8828                           ; Regs used in _RTC_HourReady: [wreg]
  8829  0FB0  0020               	movlb	0	; select bank0
  8830  0FB1  1D31               	btfss	_rtc_status,2	;volatile
  8831  0FB2  3400               	retlw	0
  8832                           
  8833                           ;rtc.c: 64: {
  8834                           ;rtc.c: 65: rtc_status.mHour = 0;
  8835  0FB3  1131               	bcf	_rtc_status,2	;volatile
  8836                           
  8837                           ;rtc.c: 66: return 1;
  8838  0FB4  3401               	retlw	1
  8839  0FB5                     __end_of_RTC_HourReady:	
  8840                           ;rtc.c: 67: }
  8841                           ;rtc.c: 68: return 0;
  8842                           
  8843  0FB5                     __ptext18:	
  8844 ;; *************** function _RTC_MinuteReady *****************
  8845 ;; Defined at:
  8846 ;;		line 51 in file "user/src/rtc.c"
  8847 ;; Parameters:    Size  Location     Type
  8848 ;;		None
  8849 ;; Auto vars:     Size  Location     Type
  8850 ;;		None
  8851 ;; Return value:  Size  Location     Type
  8852 ;;                  1    wreg      unsigned char 
  8853 ;; Registers used:
  8854 ;;		wreg
  8855 ;; Tracked objects:
  8856 ;;		On entry : 1F/0
  8857 ;;		On exit  : 1F/0
  8858 ;;		Unchanged: 0/0
  8859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;Total ram usage:        0 bytes
  8865 ;; Hardware stack levels used:    1
  8866 ;; Hardware stack levels required when called:    7
  8867 ;; This function calls:
  8868 ;;		Nothing
  8869 ;; This function is called by:
  8870 ;;		_main
  8871 ;; This function uses a non-reentrant model
  8872 ;;
  8873                           
  8874                           
  8875                           ;psect for function _RTC_MinuteReady
  8876  0FB5                     _RTC_MinuteReady:	
  8877                           
  8878                           ;rtc.c: 53: if( rtc_status.mMin )
  8879                           
  8880                           ;incstack = 0
  8881                           ; Regs used in _RTC_MinuteReady: [wreg]
  8882  0FB5  1CB1               	btfss	_rtc_status,1	;volatile
  8883  0FB6  3400               	retlw	0
  8884                           
  8885                           ;rtc.c: 54: {
  8886                           ;rtc.c: 55: rtc_status.mMin = 0;
  8887  0FB7  10B1               	bcf	_rtc_status,1	;volatile
  8888                           
  8889                           ;rtc.c: 56: return 1;
  8890  0FB8  3401               	retlw	1
  8891  0FB9                     __end_of_RTC_MinuteReady:	
  8892                           ;rtc.c: 57: }
  8893                           ;rtc.c: 58: return 0;
  8894                           
  8895  0FB9                     __ptext17:	
  8896 ;; *************** function _RTC_SecondReady *****************
  8897 ;; Defined at:
  8898 ;;		line 41 in file "user/src/rtc.c"
  8899 ;; Parameters:    Size  Location     Type
  8900 ;;		None
  8901 ;; Auto vars:     Size  Location     Type
  8902 ;;		None
  8903 ;; Return value:  Size  Location     Type
  8904 ;;                  1    wreg      unsigned char 
  8905 ;; Registers used:
  8906 ;;		wreg
  8907 ;; Tracked objects:
  8908 ;;		On entry : 1C/0
  8909 ;;		On exit  : 1F/0
  8910 ;;		Unchanged: 0/0
  8911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;Total ram usage:        0 bytes
  8917 ;; Hardware stack levels used:    1
  8918 ;; Hardware stack levels required when called:    7
  8919 ;; This function calls:
  8920 ;;		Nothing
  8921 ;; This function is called by:
  8922 ;;		_main
  8923 ;; This function uses a non-reentrant model
  8924 ;;
  8925                           
  8926                           
  8927                           ;psect for function _RTC_SecondReady
  8928  0FB9                     _RTC_SecondReady:	
  8929                           
  8930                           ;rtc.c: 43: if( rtc_status.mSec )
  8931                           
  8932                           ;incstack = 0
  8933                           ; Regs used in _RTC_SecondReady: [wreg]
  8934  0FB9  0020               	movlb	0	; select bank0
  8935  0FBA  1C31               	btfss	_rtc_status,0	;volatile
  8936  0FBB  3400               	retlw	0
  8937                           
  8938                           ;rtc.c: 44: {
  8939                           ;rtc.c: 45: rtc_status.mSec = 0;
  8940  0FBC  1031               	bcf	_rtc_status,0	;volatile
  8941                           
  8942                           ;rtc.c: 46: return 1;
  8943  0FBD  3401               	retlw	1
  8944  0FBE                     __end_of_RTC_SecondReady:	
  8945                           ;rtc.c: 47: }
  8946                           ;rtc.c: 48: return 0;
  8947                           
  8948  0FBE                     __ptext1:	
  8949 ;; *************** function _TMR2_StartTimer *****************
  8950 ;; Defined at:
  8951 ;;		line 16 in file "driver/src/tmr2.c"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;		None
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;		None
  8956 ;; Return value:  Size  Location     Type
  8957 ;;                  1    wreg      void 
  8958 ;; Registers used:
  8959 ;;		None
  8960 ;; Tracked objects:
  8961 ;;		On entry : 1F/0
  8962 ;;		On exit  : 1F/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8969 ;;Total ram usage:        0 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    7
  8972 ;; This function calls:
  8973 ;;		Nothing
  8974 ;; This function is called by:
  8975 ;;		_main
  8976 ;; This function uses a non-reentrant model
  8977 ;;
  8978                           
  8979                           
  8980                           ;psect for function _TMR2_StartTimer
  8981  0FBE                     _TMR2_StartTimer:	
  8982                           
  8983                           ;tmr2.c: 18: T2CONbits.TMR2ON = 1;
  8984                           
  8985                           ;incstack = 0
  8986                           ; Regs used in _TMR2_StartTimer: []
  8987  0FBE  151F               	bsf	31,2	;volatile
  8988  0FBF  0008               	return
  8989  0FC0                     __end_of_TMR2_StartTimer:	
  8990  0FC0                     __ptext35:	
  8991 ;; *************** function _IR_ExitTimeout *****************
  8992 ;; Defined at:
  8993 ;;		line 442 in file "user/src/ir.c"
  8994 ;; Parameters:    Size  Location     Type
  8995 ;;		None
  8996 ;; Auto vars:     Size  Location     Type
  8997 ;;		None
  8998 ;; Return value:  Size  Location     Type
  8999 ;;                  1    wreg      void 
  9000 ;; Registers used:
  9001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9002 ;; Tracked objects:
  9003 ;;		On entry : 1F/0
  9004 ;;		On exit  : 1F/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;Total ram usage:        0 bytes
  9012 ;; Hardware stack levels used:    1
  9013 ;; Hardware stack levels required when called:   10
  9014 ;; This function calls:
  9015 ;;		_Led_Initialize
  9016 ;;		_Led_StartNotice
  9017 ;; This function is called by:
  9018 ;;		_IR_UpdateSetStatus
  9019 ;; This function uses a non-reentrant model
  9020 ;;
  9021                           
  9022                           
  9023                           ;psect for function _IR_ExitTimeout
  9024  0FC0                     _IR_ExitTimeout:	
  9025  0FC0                     l6556:	
  9026                           ;incstack = 0
  9027                           ; Regs used in _IR_ExitTimeout: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9028                           
  9029                           
  9030                           ;ir.c: 443: ir_state.mSet = 0;
  9031  0FC0  301F               	movlw	-225
  9032  0FC1  05B6               	andwf	_ir_state,f	;volatile
  9033                           
  9034                           ;ir.c: 444: ir_state.tmIdx = 0;
  9035  0FC2  01B7               	clrf	_ir_state+1	;volatile
  9036                           
  9037                           ;ir.c: 445: ir_state.mSetDelay = 0;
  9038  0FC3  01BC               	clrf	_ir_state+6	;volatile
  9039                           
  9040                           ;ir.c: 446: Led_StartNotice(2);
  9041  0FC4  3002               	movlw	2
  9042  0FC5  255F  3188         	fcall	_Led_StartNotice
  9043                           
  9044                           ;ir.c: 447: Led_Initialize();
  9045  0FC7  28F9               	ljmp	l5966
  9046  0FC8                     __end_of_IR_ExitTimeout:	
  9047  0FC8                     __ptext21:	
  9048 ;; *************** function _DATAEE_WriteBuffer *****************
  9049 ;; Defined at:
  9050 ;;		line 41 in file "driver/src/eeprom.c"
  9051 ;; Parameters:    Size  Location     Type
  9052 ;;  addr            2   18[BANK0 ] unsigned int 
  9053 ;;  buf             1   20[BANK0 ] PTR unsigned char 
  9054 ;;		 -> gLedPara(78), 
  9055 ;;  len             1   21[BANK0 ] unsigned char 
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;  i               1   22[BANK0 ] unsigned char 
  9058 ;; Return value:  Size  Location     Type
  9059 ;;                  1    wreg      void 
  9060 ;; Registers used:
  9061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9062 ;; Tracked objects:
  9063 ;;		On entry : 1F/0
  9064 ;;		On exit  : 1F/0
  9065 ;;		Unchanged: 0/0
  9066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9067 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;Total ram usage:        5 bytes
  9072 ;; Hardware stack levels used:    1
  9073 ;; Hardware stack levels required when called:    8
  9074 ;; This function calls:
  9075 ;;		_DATAEE_WriteByte
  9076 ;; This function is called by:
  9077 ;;		_Led_SaveParaIfChanged
  9078 ;; This function uses a non-reentrant model
  9079 ;;
  9080                           
  9081                           
  9082                           ;psect for function _DATAEE_WriteBuffer
  9083  0FC8                     _DATAEE_WriteBuffer:	
  9084  0FC8                     l4748:	
  9085                           ;incstack = 0
  9086                           ; Regs used in _DATAEE_WriteBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9087                           
  9088                           
  9089                           ;eeprom.c: 43: for ( uint8_t i = len; i != 0; i-- )
  9090  0FC8  0855               	movf	DATAEE_WriteBuffer@len,w
  9091  0FC9  00D6               	movwf	DATAEE_WriteBuffer@i
  9092  0FCA                     l4750:	
  9093  0FCA  0856               	movf	DATAEE_WriteBuffer@i,w
  9094  0FCB  1903               	btfsc	3,2
  9095  0FCC  0008               	return
  9096                           
  9097                           ;eeprom.c: 44: {
  9098                           ;eeprom.c: 45: DATAEE_WriteByte ( addr++, *buf++ );
  9099  0FCD  0853               	movf	DATAEE_WriteBuffer@addr+1,w
  9100  0FCE  00CF               	movwf	DATAEE_WriteByte@addr+1
  9101  0FCF  0852               	movf	DATAEE_WriteBuffer@addr,w
  9102  0FD0  00CE               	movwf	DATAEE_WriteByte@addr
  9103  0FD1  0854               	movf	DATAEE_WriteBuffer@buf,w
  9104  0FD2  0086               	movwf	6
  9105  0FD3  3001               	movlw	1	; select bank2/3
  9106  0FD4  0087               	movwf	7
  9107  0FD5  0801               	movf	1,w
  9108  0FD6  00D0               	movwf	DATAEE_WriteByte@byte
  9109  0FD7  27DF  3188         	fcall	_DATAEE_WriteByte
  9110  0FD9  0AD4               	incf	DATAEE_WriteBuffer@buf,f
  9111  0FDA  0AD2               	incf	DATAEE_WriteBuffer@addr,f
  9112  0FDB  1903               	skipnz
  9113  0FDC  0AD3               	incf	DATAEE_WriteBuffer@addr+1,f
  9114  0FDD  03D6               	decf	DATAEE_WriteBuffer@i,f
  9115  0FDE  2FCA               	goto	l4750
  9116  0FDF                     __end_of_DATAEE_WriteBuffer:	
  9117  0FDF                     __ptext22:	
  9118 ;; *************** function _DATAEE_WriteByte *****************
  9119 ;; Defined at:
  9120 ;;		line 3 in file "driver/src/eeprom.c"
  9121 ;; Parameters:    Size  Location     Type
  9122 ;;  addr            2   14[BANK0 ] unsigned int 
  9123 ;;  byte            1   16[BANK0 ] unsigned char 
  9124 ;; Auto vars:     Size  Location     Type
  9125 ;;  GIEBitValue     1   17[BANK0 ] unsigned char 
  9126 ;; Return value:  Size  Location     Type
  9127 ;;                  1    wreg      void 
  9128 ;; Registers used:
  9129 ;;		wreg, status,2, status,0
  9130 ;; Tracked objects:
  9131 ;;		On entry : 1F/0
  9132 ;;		On exit  : 1F/0
  9133 ;;		Unchanged: 0/0
  9134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9135 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9138 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;Total ram usage:        4 bytes
  9140 ;; Hardware stack levels used:    1
  9141 ;; Hardware stack levels required when called:    7
  9142 ;; This function calls:
  9143 ;;		Nothing
  9144 ;; This function is called by:
  9145 ;;		_DATAEE_WriteBuffer
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           
  9150                           ;psect for function _DATAEE_WriteByte
  9151  0FDF                     _DATAEE_WriteByte:	
  9152                           
  9153                           ;eeprom.c: 5: uint8_t GIEBitValue = INTCONbits.GIE;
  9154                           
  9155                           ;incstack = 0
  9156                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  9157  0FDF  3000               	movlw	0
  9158  0FE0  1B8B               	btfsc	11,7	;volatile
  9159  0FE1  3001               	movlw	1
  9160  0FE2  00D1               	movwf	DATAEE_WriteByte@GIEBitValue
  9161                           
  9162                           ;eeprom.c: 7: NVMADRH = addr >> 8;
  9163  0FE3  084F               	movf	DATAEE_WriteByte@addr+1,w
  9164  0FE4  0031               	movlb	17	; select bank17
  9165  0FE5  0092               	movwf	18	;volatile
  9166                           
  9167                           ;eeprom.c: 8: NVMADRL = addr & 0xFF;
  9168  0FE6  0020               	movlb	0	; select bank0
  9169  0FE7  084E               	movf	DATAEE_WriteByte@addr,w
  9170  0FE8  0031               	movlb	17	; select bank17
  9171  0FE9  0091               	movwf	17	;volatile
  9172                           
  9173                           ;eeprom.c: 9: NVMDATL = byte;
  9174  0FEA  0020               	movlb	0	; select bank0
  9175  0FEB  0850               	movf	DATAEE_WriteByte@byte,w
  9176  0FEC  0031               	movlb	17	; select bank17
  9177  0FED  0093               	movwf	19	;volatile
  9178                           
  9179                           ;eeprom.c: 10: NVMCON1bits.NVMREGS = 1;
  9180  0FEE  1715               	bsf	21,6	;volsfr
  9181                           
  9182                           ;eeprom.c: 11: NVMCON1bits.WREN = 1;
  9183  0FEF  1515               	bsf	21,2	;volsfr
  9184                           
  9185                           ;eeprom.c: 12: INTCONbits.GIE = 0;
  9186  0FF0  138B               	bcf	11,7	;volatile
  9187                           
  9188                           ;eeprom.c: 13: NVMCON2 = 0x55;
  9189  0FF1  3055               	movlw	85
  9190  0FF2  0096               	movwf	22	;volsfr
  9191                           
  9192                           ;eeprom.c: 14: NVMCON2 = 0xAA;
  9193  0FF3  30AA               	movlw	170
  9194  0FF4  0096               	movwf	22	;volsfr
  9195                           
  9196                           ;eeprom.c: 15: NVMCON1bits.WR = 1;
  9197  0FF5  1495               	bsf	21,1	;volsfr
  9198  0FF6                     l46:	
  9199                           ;eeprom.c: 17: while ( NVMCON1bits.WR );
  9200                           
  9201  0FF6  1895               	btfsc	21,1	;volsfr
  9202  0FF7  2FF6               	goto	l46
  9203                           
  9204                           ;eeprom.c: 19: NVMCON1bits.WREN = 0;
  9205  0FF8  1115               	bcf	21,2	;volsfr
  9206                           
  9207                           ;eeprom.c: 20: INTCONbits.GIE = GIEBitValue;
  9208  0FF9  0020               	movlb	0	; select bank0
  9209  0FFA  0C51               	rrf	DATAEE_WriteByte@GIEBitValue,w
  9210  0FFB  1C03               	skipc
  9211  0FFC  138B               	bcf	11,7	;volatile
  9212  0FFD  1803               	skipnc
  9213  0FFE  178B               	bsf	11,7	;volatile
  9214  0FFF  0008               	return
  9215  1000                     __end_of_DATAEE_WriteByte:	
  9216                           
  9217                           	psect	bssBANK0
  9218  0020                     __pbssBANK0:	
  9219  0020                     IR_ScanLongPress@cnt:	
  9220  0020                     	ds	2
  9221  0022                     IR_Decode@codeVal:	
  9222  0022                     	ds	2
  9223  0024                     Audio_GetValue@cnt:	
  9224  0024                     	ds	2
  9225  0026                     Audio_GetValue@min:	
  9226  0026                     	ds	2
  9227  0028                     Audio_GetValue@max:	
  9228  0028                     	ds	2
  9229  002A                     _audio_value:	
  9230  002A                     	ds	2
  9231  002C                     _adc_result:	
  9232  002C                     	ds	2
  9233  002E                     IR_Decode@rptCnt:	
  9234  002E                     	ds	1
  9235  002F                     IR_Decode@nBit:	
  9236  002F                     	ds	1
  9237  0030                     _keyValue:	
  9238  0030                     	ds	1
  9239  0031                     _rtc_status:	
  9240  0031                     	ds	1
  9241  0032                     Led_Run@cnt:	
  9242  0032                     	ds	1
  9243  0033                     Led_Notice@cnt:	
  9244  0033                     	ds	1
  9245  0034                     _txHead:	
  9246  0034                     	ds	1
  9247  0035                     _txTail:	
  9248  0035                     	ds	1
  9249  0036                     _ir_state:	
  9250  0036                     	ds	7
  9251  003D                     _rtc_time:	
  9252  003D                     	ds	3
  9253                           
  9254                           	psect	bssBANK1
  9255  00C8                     __pbssBANK1:	
  9256  00C8                     _gLedRunPara:	
  9257  00C8                     	ds	26
  9258                           
  9259                           	psect	dataBANK1
  9260  00A0                     __pdataBANK1:	
  9261  00A0                     Led_DynamicCloud@F8332:	
  9262  00A0                     	ds	10
  9263  00AA                     Led_DynamicMoon@F8322:	
  9264  00AA                     	ds	10
  9265  00B4                     Led_DynamicWave@F8312:	
  9266  00B4                     	ds	10
  9267  00BE                     _loadDuty:	
  9268  00BE                     	ds	10
  9269                           
  9270                           	psect	bssBANK2
  9271  0120                     __pbssBANK2:	
  9272  0120                     _gLedPara:	
  9273  0120                     	ds	78
  9274                           
  9275                           	psect	bssBANK3
  9276  01A0                     __pbssBANK3:	
  9277  01A0                     _txBuf:	
  9278  01A0                     	ds	32
  9279                           
  9280                           	psect	dataBANK3
  9281  01D2                     __pdataBANK3:	
  9282  01D2                     Led_DynamicStorm@F8342:	
  9283  01D2                     	ds	10
  9284                           
  9285                           	psect	inittext
  9286  146A                     init_ram:	
  9287  146A  00FE               	movwf	126
  9288  146B                     initloop:	
  9289  146B  0012               	moviw fsr0++
  9290  146C  001E               	movwi fsr1++
  9291  146D  0BFE               	decfsz	126,f
  9292  146E  2C6B               	goto	initloop
  9293  146F  3400               	retlw	0
  9294                           
  9295                           	psect	clrtext
  9296  1464                     clear_ram0:	
  9297                           ;	Called with FSR0 containing the base address, and
  9298                           ;	WREG with the size to clear
  9299                           
  9300  1464  0064               	clrwdt	;clear the watchdog before getting into this loop
  9301  1465                     clrloop0:	
  9302  1465  0180               	clrf	0	;clear RAM location pointed to by FSR
  9303  1466  3101               	addfsr 0,1
  9304  1467  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  9305  1468  2C65               	goto	clrloop0	;have we reached the end yet?
  9306  1469  3400               	retlw	0	;all done for this memory range, return
  9307                           
  9308                           	psect	cstackBANK3
  9309  01C0                     __pcstackBANK3:	
  9310  01C0                     ??_IR_KeyAction:	
  9311                           
  9312                           ; 1 bytes @ 0x0
  9313  01C0                     	ds	10
  9314  01CA                     IR_KeyAction@i:	
  9315                           
  9316                           ; 1 bytes @ 0xA
  9317  01CA                     	ds	1
  9318  01CB                     IR_KeyAction@i_1428:	
  9319                           
  9320                           ; 1 bytes @ 0xB
  9321  01CB                     	ds	1
  9322  01CC                     IR_KeyAction@i_1429:	
  9323                           
  9324                           ; 1 bytes @ 0xC
  9325  01CC                     	ds	1
  9326  01CD                     IR_KeyAction@i_1434:	
  9327                           
  9328                           ; 1 bytes @ 0xD
  9329  01CD                     	ds	1
  9330  01CE                     IR_KeyAction@i_1435:	
  9331                           
  9332                           ; 1 bytes @ 0xE
  9333  01CE                     	ds	1
  9334  01CF                     IR_KeyAction@i_1430:	
  9335                           
  9336                           ; 1 bytes @ 0xF
  9337  01CF                     	ds	1
  9338  01D0                     IR_KeyAction@i_1431:	
  9339                           
  9340                           ; 1 bytes @ 0x10
  9341  01D0                     	ds	1
  9342  01D1                     IR_KeyAction@idx:	
  9343                           
  9344                           ; 1 bytes @ 0x11
  9345  01D1                     	ds	1
  9346                           
  9347                           	psect	cstackCOMMON
  9348  0070                     __pcstackCOMMON:	
  9349  0070                     ?_SYSTEM_Initialize:	
  9350  0070                     ?_Interrupt_Initialize:	
  9351                           ; 1 bytes @ 0x0
  9352                           
  9353  0070                     ?_Led_InitPara:	
  9354                           ; 1 bytes @ 0x0
  9355                           
  9356  0070                     ?_Led_Initialize:	
  9357                           ; 1 bytes @ 0x0
  9358                           
  9359  0070                     ?_IR_KeyAtionIfPressed:	
  9360                           ; 1 bytes @ 0x0
  9361                           
  9362  0070                     ?_IR_ResetIfTMR1Overflow:	
  9363                           ; 1 bytes @ 0x0
  9364                           
  9365  0070                     ?_Led_SaveParaIfChanged:	
  9366                           ; 1 bytes @ 0x0
  9367                           
  9368  0070                     ?_RTC_HourReady:	
  9369                           ; 1 bytes @ 0x0
  9370                           
  9371  0070                     ?_RTC_MinuteReady:	
  9372                           ; 1 bytes @ 0x0
  9373                           
  9374  0070                     ?_Led_CheckAutoStatus:	
  9375                           ; 1 bytes @ 0x0
  9376                           
  9377  0070                     ?_RTC_SecondReady:	
  9378                           ; 1 bytes @ 0x0
  9379                           
  9380  0070                     ?_Led_AutoRun:	
  9381                           ; 1 bytes @ 0x0
  9382                           
  9383  0070                     ?_IR_UpdateSetStatus:	
  9384                           ; 1 bytes @ 0x0
  9385                           
  9386  0070                     ?_IR_Decode:	
  9387                           ; 1 bytes @ 0x0
  9388                           
  9389  0070                     ?_RTC_OnSecond:	
  9390                           ; 1 bytes @ 0x0
  9391                           
  9392  0070                     ??_RTC_OnSecond:	
  9393                           ; 1 bytes @ 0x0
  9394                           
  9395  0070                     ?_Led_Run:	
  9396                           ; 1 bytes @ 0x0
  9397                           
  9398  0070                     ?_Led_Notice:	
  9399                           ; 1 bytes @ 0x0
  9400                           
  9401  0070                     ??_Led_Notice:	
  9402                           ; 1 bytes @ 0x0
  9403                           
  9404  0070                     ?_RTC_GetTime:	
  9405                           ; 1 bytes @ 0x0
  9406                           
  9407  0070                     ?_Led_TurnOffRamp:	
  9408                           ; 1 bytes @ 0x0
  9409                           
  9410  0070                     ?_Led_UpdateBright:	
  9411                           ; 1 bytes @ 0x0
  9412                           
  9413  0070                     ?_Led_TurnOnRamp:	
  9414                           ; 1 bytes @ 0x0
  9415                           
  9416  0070                     ?_IR_ScanLongPress:	
  9417                           ; 1 bytes @ 0x0
  9418                           
  9419  0070                     ?_ADC_Initialize_Default:	
  9420                           ; 1 bytes @ 0x0
  9421                           
  9422  0070                     ?_EUSART_Initialize_Default:	
  9423                           ; 1 bytes @ 0x0
  9424                           
  9425  0070                     ?_EUSART_Write:	
  9426                           ; 1 bytes @ 0x0
  9427                           
  9428  0070                     ?_EUSART_Transmit_ISR:	
  9429                           ; 1 bytes @ 0x0
  9430                           
  9431  0070                     ??_EUSART_Transmit_ISR:	
  9432                           ; 1 bytes @ 0x0
  9433                           
  9434  0070                     ?_PWM1_Initialize:	
  9435                           ; 1 bytes @ 0x0
  9436                           
  9437  0070                     ?_PWM2_Initialize:	
  9438                           ; 1 bytes @ 0x0
  9439                           
  9440  0070                     ?_PWM3_Initialize:	
  9441                           ; 1 bytes @ 0x0
  9442                           
  9443  0070                     ?_PWM4_Initialize:	
  9444                           ; 1 bytes @ 0x0
  9445                           
  9446  0070                     ?_PWM5_Initialize:	
  9447                           ; 1 bytes @ 0x0
  9448                           
  9449  0070                     ?_TMR0_Initialize_Default:	
  9450                           ; 1 bytes @ 0x0
  9451                           
  9452  0070                     ?_TMR0_StartTimer:	
  9453                           ; 1 bytes @ 0x0
  9454                           
  9455  0070                     ?_TMR0_ISR:	
  9456                           ; 1 bytes @ 0x0
  9457                           
  9458  0070                     ??_TMR0_ISR:	
  9459                           ; 1 bytes @ 0x0
  9460                           
  9461  0070                     ?_TMR1_Initialize_Default:	
  9462                           ; 1 bytes @ 0x0
  9463                           
  9464  0070                     ?_TMR1_StartTimer:	
  9465                           ; 1 bytes @ 0x0
  9466                           
  9467  0070                     ?_TMR1_StopTimer:	
  9468                           ; 1 bytes @ 0x0
  9469                           
  9470  0070                     ?_TMR1_GATE_ISR:	
  9471                           ; 1 bytes @ 0x0
  9472                           
  9473  0070                     ?_TMR2_Initialize_Default:	
  9474                           ; 1 bytes @ 0x0
  9475                           
  9476  0070                     ?_TMR2_StartTimer:	
  9477                           ; 1 bytes @ 0x0
  9478                           
  9479  0070                     ?_TMR2_ISR:	
  9480                           ; 1 bytes @ 0x0
  9481                           
  9482  0070                     ?_TMR2_DisableInterrupt:	
  9483                           ; 1 bytes @ 0x0
  9484                           
  9485  0070                     ?_TMR2_EnableInterrupt:	
  9486                           ; 1 bytes @ 0x0
  9487                           
  9488  0070                     ?_TMR4_Initialize_Default:	
  9489                           ; 1 bytes @ 0x0
  9490                           
  9491  0070                     ?_TMR4_StartTimer:	
  9492                           ; 1 bytes @ 0x0
  9493                           
  9494  0070                     ?_TMR4_StopTimer:	
  9495                           ; 1 bytes @ 0x0
  9496                           
  9497  0070                     ??_TMR4_StopTimer:	
  9498                           ; 1 bytes @ 0x0
  9499                           
  9500  0070                     ?_TMR4_ISR:	
  9501                           ; 1 bytes @ 0x0
  9502                           
  9503  0070                     ?_Audio_PlaySound:	
  9504                           ; 1 bytes @ 0x0
  9505                           
  9506  0070                     ?_Audio_StopSound:	
  9507                           ; 1 bytes @ 0x0
  9508                           
  9509  0070                     ?_Audio_SelectSound:	
  9510                           ; 1 bytes @ 0x0
  9511                           
  9512  0070                     ?_Audio_SetPlayMode:	
  9513                           ; 1 bytes @ 0x0
  9514                           
  9515  0070                     ?_Audio_SetVolume:	
  9516                           ; 1 bytes @ 0x0
  9517                           
  9518  0070                     ?_Audio_GetValue:	
  9519                           ; 1 bytes @ 0x0
  9520                           
  9521  0070                     ?_main:	
  9522                           ; 1 bytes @ 0x0
  9523                           
  9524  0070                     ?_ISR:	
  9525                           ; 1 bytes @ 0x0
  9526                           
  9527  0070                     ?_OSCILLATOR_Initialize:	
  9528                           ; 1 bytes @ 0x0
  9529                           
  9530  0070                     ?_PIN_Initialize:	
  9531                           ; 1 bytes @ 0x0
  9532                           
  9533  0070                     ?_Led_FirstPowerUp:	
  9534                           ; 1 bytes @ 0x0
  9535                           
  9536  0070                     ?_Led_TurnOnDirect:	
  9537                           ; 1 bytes @ 0x0
  9538                           
  9539  0070                     ??_Led_TurnOnDirect:	
  9540                           ; 1 bytes @ 0x0
  9541                           
  9542  0070                     ?_Led_TurnOffDirect:	
  9543                           ; 1 bytes @ 0x0
  9544                           
  9545  0070                     ??_Led_TurnOffDirect:	
  9546                           ; 1 bytes @ 0x0
  9547                           
  9548  0070                     ?_Led_Ramp:	
  9549                           ; 1 bytes @ 0x0
  9550                           
  9551  0070                     ?_Led_StartNotice:	
  9552                           ; 1 bytes @ 0x0
  9553                           
  9554  0070                     ?_Led_RunMusic:	
  9555                           ; 1 bytes @ 0x0
  9556                           
  9557  0070                     ?_IR_GetIndex:	
  9558                           ; 1 bytes @ 0x0
  9559                           
  9560  0070                     ?_IR_GetKeyType:	
  9561                           ; 1 bytes @ 0x0
  9562                           
  9563  0070                     ??_IR_GetKeyType:	
  9564                           ; 1 bytes @ 0x0
  9565                           
  9566  0070                     ?_IR_ExitSet:	
  9567                           ; 1 bytes @ 0x0
  9568                           
  9569  0070                     ?_IR_ExitTimeout:	
  9570                           ; 1 bytes @ 0x0
  9571                           
  9572  0070                     ?_IR_KeyAction:	
  9573                           ; 1 bytes @ 0x0
  9574                           
  9575  0070                     ?i1_EUSART_Write:	
  9576                           ; 1 bytes @ 0x0
  9577                           
  9578  0070                     ??i1_EUSART_Write:	
  9579                           ; 1 bytes @ 0x0
  9580                           
  9581  0070                     ?i1_PWM1_LoadDutyValue:	
  9582                           ; 1 bytes @ 0x0
  9583                           
  9584  0070                     ?i1_PWM2_LoadDutyValue:	
  9585                           ; 1 bytes @ 0x0
  9586                           
  9587  0070                     ?i1_PWM3_LoadDutyValue:	
  9588                           ; 1 bytes @ 0x0
  9589                           
  9590  0070                     ?i1_PWM4_LoadDutyValue:	
  9591                           ; 1 bytes @ 0x0
  9592                           
  9593  0070                     ?i1_PWM5_LoadDutyValue:	
  9594                           ; 1 bytes @ 0x0
  9595                           
  9596  0070                     ?i1_TMR2_DisableInterrupt:	
  9597                           ; 1 bytes @ 0x0
  9598                           
  9599  0070                     ??i1_TMR2_DisableInterrupt:	
  9600                           ; 1 bytes @ 0x0
  9601                           
  9602  0070                     ?i1_TMR2_EnableInterrupt:	
  9603                           ; 1 bytes @ 0x0
  9604                           
  9605  0070                     ??i1_TMR2_EnableInterrupt:	
  9606                           ; 1 bytes @ 0x0
  9607                           
  9608  0070                     ?i1_TMR4_StartTimer:	
  9609                           ; 1 bytes @ 0x0
  9610                           
  9611  0070                     ??i1_TMR4_StartTimer:	
  9612                           ; 1 bytes @ 0x0
  9613                           
  9614  0070                     ?i1_Led_UpdateBright:	
  9615                           ; 1 bytes @ 0x0
  9616                           
  9617  0070                     ?i1_Led_StartNotice:	
  9618                           ; 1 bytes @ 0x0
  9619                           
  9620  0070                     ??i1_Led_StartNotice:	
  9621                           ; 1 bytes @ 0x0
  9622                           
  9623  0070                     ?i1_IR_GetIndex:	
  9624                           ; 1 bytes @ 0x0
  9625                           
  9626  0070                     ??i1_IR_GetIndex:	
  9627                           ; 1 bytes @ 0x0
  9628                           
  9629  0070                     ?i1_Util_IncValue:	
  9630                           ; 1 bytes @ 0x0
  9631                           
  9632  0070                     ?i1_Util_DecValue:	
  9633                           ; 1 bytes @ 0x0
  9634                           
  9635  0070                     ?i1___bmul:	
  9636                           ; 1 bytes @ 0x0
  9637                           
  9638  0070                     ?i1___wmul:	
  9639                           ; 1 bytes @ 0x0
  9640                           
  9641  0070                     i1EUSART_Write@byte:	
  9642                           ; 2 bytes @ 0x0
  9643                           
  9644  0070                     i1IR_GetIndex@idx:	
  9645                           ; 1 bytes @ 0x0
  9646                           
  9647  0070                     i1___bmul@multiplicand:	
  9648                           ; 1 bytes @ 0x0
  9649                           
  9650  0070                     i1PWM1_LoadDutyValue@dutyValue:	
  9651                           ; 1 bytes @ 0x0
  9652                           
  9653  0070                     i1PWM2_LoadDutyValue@dutyValue:	
  9654                           ; 2 bytes @ 0x0
  9655                           
  9656  0070                     i1PWM3_LoadDutyValue@dutyValue:	
  9657                           ; 2 bytes @ 0x0
  9658                           
  9659  0070                     i1PWM4_LoadDutyValue@dutyValue:	
  9660                           ; 2 bytes @ 0x0
  9661                           
  9662  0070                     i1PWM5_LoadDutyValue@dutyValue:	
  9663                           ; 2 bytes @ 0x0
  9664                           
  9665  0070                     i1Util_IncValue@pSrc:	
  9666                           ; 2 bytes @ 0x0
  9667                           
  9668  0070                     i1Util_DecValue@pSrc:	
  9669                           ; 2 bytes @ 0x0
  9670                           
  9671  0070                     i1___wmul@multiplier:	
  9672                           ; 2 bytes @ 0x0
  9673                           
  9674                           
  9675                           ; 2 bytes @ 0x0
  9676  0070                     	ds	1
  9677  0071                     ??_TMR4_ISR:	
  9678  0071                     ??_Audio_PlaySound:	
  9679                           ; 1 bytes @ 0x1
  9680                           
  9681  0071                     ??_Audio_SelectSound:	
  9682                           ; 1 bytes @ 0x1
  9683                           
  9684  0071                     ??i1___bmul:	
  9685                           ; 1 bytes @ 0x1
  9686                           
  9687  0071                     Audio_PlaySound@checksum:	
  9688                           ; 1 bytes @ 0x1
  9689                           
  9690  0071                     Audio_SelectSound@index:	
  9691                           ; 1 bytes @ 0x1
  9692                           
  9693  0071                     IR_GetKeyType@result:	
  9694                           ; 1 bytes @ 0x1
  9695                           
  9696  0071                     i1Led_StartNotice@cnt:	
  9697                           ; 1 bytes @ 0x1
  9698                           
  9699  0071                     i1IR_GetIndex@keynum:	
  9700                           ; 1 bytes @ 0x1
  9701                           
  9702  0071                     i1___bmul@multiplier:	
  9703                           ; 1 bytes @ 0x1
  9704                           
  9705                           
  9706                           ; 1 bytes @ 0x1
  9707  0071                     	ds	1
  9708  0072                     ??i1_PWM1_LoadDutyValue:	
  9709  0072                     ??i1_PWM2_LoadDutyValue:	
  9710                           ; 1 bytes @ 0x2
  9711                           
  9712  0072                     ??i1_PWM3_LoadDutyValue:	
  9713                           ; 1 bytes @ 0x2
  9714                           
  9715  0072                     ??i1_PWM4_LoadDutyValue:	
  9716                           ; 1 bytes @ 0x2
  9717                           
  9718  0072                     ??i1_PWM5_LoadDutyValue:	
  9719                           ; 1 bytes @ 0x2
  9720                           
  9721  0072                     Audio_SelectSound@checksum:	
  9722                           ; 1 bytes @ 0x2
  9723                           
  9724  0072                     IR_GetKeyType@keynum:	
  9725                           ; 1 bytes @ 0x2
  9726                           
  9727  0072                     i1___bmul@product:	
  9728                           ; 1 bytes @ 0x2
  9729                           
  9730  0072                     i1Util_IncValue@max:	
  9731                           ; 1 bytes @ 0x2
  9732                           
  9733  0072                     i1Util_DecValue@min:	
  9734                           ; 2 bytes @ 0x2
  9735                           
  9736  0072                     i1___wmul@multiplicand:	
  9737                           ; 2 bytes @ 0x2
  9738                           
  9739                           
  9740                           ; 2 bytes @ 0x2
  9741  0072                     	ds	1
  9742  0073                     ??_IR_Decode:	
  9743  0073                     ?_Led_SetCustom:	
  9744                           ; 1 bytes @ 0x3
  9745                           
  9746  0073                     Led_SetCustom@pValue:	
  9747                           ; 1 bytes @ 0x3
  9748                           
  9749                           
  9750                           ; 1 bytes @ 0x3
  9751  0073                     	ds	1
  9752  0074                     ??_Led_SetCustom:	
  9753  0074                     ??_Led_Ramp:	
  9754                           ; 1 bytes @ 0x4
  9755                           
  9756  0074                     ??i1_Led_UpdateBright:	
  9757                           ; 1 bytes @ 0x4
  9758                           
  9759  0074                     ??i1___wmul:	
  9760                           ; 1 bytes @ 0x4
  9761                           
  9762  0074                     i1Led_UpdateBright@i:	
  9763                           ; 1 bytes @ 0x4
  9764                           
  9765  0074                     i1Util_IncValue@delta:	
  9766                           ; 1 bytes @ 0x4
  9767                           
  9768  0074                     i1Util_DecValue@delta:	
  9769                           ; 2 bytes @ 0x4
  9770                           
  9771  0074                     i1___wmul@product:	
  9772                           ; 2 bytes @ 0x4
  9773                           
  9774                           
  9775                           ; 2 bytes @ 0x4
  9776  0074                     	ds	2
  9777  0076                     ?_Led_DynamicWave:	
  9778  0076                     ?_Led_DynamicMoon:	
  9779                           ; 1 bytes @ 0x6
  9780                           
  9781  0076                     ?_Led_DynamicCloud:	
  9782                           ; 1 bytes @ 0x6
  9783                           
  9784  0076                     ?_Led_DynamicStorm:	
  9785                           ; 1 bytes @ 0x6
  9786                           
  9787  0076                     ??i1_Util_IncValue:	
  9788                           ; 1 bytes @ 0x6
  9789                           
  9790  0076                     ??i1_Util_DecValue:	
  9791                           ; 1 bytes @ 0x6
  9792                           
  9793  0076                     Led_DynamicWave@ptp:	
  9794                           ; 1 bytes @ 0x6
  9795                           
  9796  0076                     Led_DynamicMoon@ptp:	
  9797                           ; 2 bytes @ 0x6
  9798                           
  9799  0076                     Led_DynamicCloud@ptp:	
  9800                           ; 2 bytes @ 0x6
  9801                           
  9802  0076                     Led_DynamicStorm@ptp:	
  9803                           ; 2 bytes @ 0x6
  9804                           
  9805                           
  9806                           ; 2 bytes @ 0x6
  9807  0076                     	ds	1
  9808  0077                     Led_SetCustom@idx:	
  9809  0077                     IR_Decode@revKeyNum:	
  9810                           ; 1 bytes @ 0x7
  9811                           
  9812                           
  9813                           ; 1 bytes @ 0x7
  9814  0077                     	ds	1
  9815  0078                     ??_Led_DynamicWave:	
  9816  0078                     ??_Led_DynamicMoon:	
  9817                           ; 1 bytes @ 0x8
  9818                           
  9819  0078                     ??_Led_DynamicCloud:	
  9820                           ; 1 bytes @ 0x8
  9821                           
  9822  0078                     ??_Led_DynamicStorm:	
  9823                           ; 1 bytes @ 0x8
  9824                           
  9825  0078                     IR_Decode@type:	
  9826                           ; 1 bytes @ 0x8
  9827                           
  9828  0078                     Led_SetCustom@value:	
  9829                           ; 1 bytes @ 0x8
  9830                           
  9831                           
  9832                           ; 2 bytes @ 0x8
  9833  0078                     	ds	1
  9834  0079                     IR_Decode@keyNum:	
  9835                           
  9836                           ; 1 bytes @ 0x9
  9837  0079                     	ds	1
  9838  007A                     Led_SetCustom@i:	
  9839  007A                     Led_Ramp@i:	
  9840                           ; 1 bytes @ 0xA
  9841                           
  9842  007A                     IR_Decode@hVal:	
  9843                           ; 1 bytes @ 0xA
  9844                           
  9845                           
  9846                           ; 2 bytes @ 0xA
  9847  007A                     	ds	1
  9848  007B                     ??_IR_ScanLongPress:	
  9849  007B                     IR_ScanLongPress@i:	
  9850                           ; 1 bytes @ 0xB
  9851                           
  9852                           
  9853                           ; 1 bytes @ 0xB
  9854  007B                     	ds	1
  9855  007C                     ??_TMR1_GATE_ISR:	
  9856  007C                     ??_Led_RunMusic:	
  9857                           ; 1 bytes @ 0xC
  9858                           
  9859  007C                     IR_ScanLongPress@i_1422:	
  9860                           ; 1 bytes @ 0xC
  9861                           
  9862                           
  9863                           ; 1 bytes @ 0xC
  9864  007C                     	ds	1
  9865  007D                     IR_ScanLongPress@idx:	
  9866                           
  9867                           ; 1 bytes @ 0xD
  9868  007D                     	ds	1
  9869  007E                     ??_TMR2_ISR:	
  9870  007E                     ??_ISR:	
  9871                           ; 1 bytes @ 0xE
  9872                           
  9873                           
  9874                           	psect	cstackBANK0
  9875  0040                     __pcstackBANK0:	
  9876                           ; 1 bytes @ 0xE
  9877                           
  9878  0040                     Led_DynamicWave@duty:	
  9879  0040                     Led_DynamicMoon@duty:	
  9880                           ; 10 bytes @ 0x0
  9881                           
  9882  0040                     Led_DynamicCloud@duty:	
  9883                           ; 10 bytes @ 0x0
  9884                           
  9885  0040                     Led_DynamicStorm@duty:	
  9886                           ; 10 bytes @ 0x0
  9887                           
  9888                           
  9889                           ; 10 bytes @ 0x0
  9890  0040                     	ds	10
  9891  004A                     Led_DynamicWave@val:	
  9892  004A                     Led_DynamicMoon@val:	
  9893                           ; 2 bytes @ 0xA
  9894                           
  9895  004A                     Led_DynamicCloud@val:	
  9896                           ; 2 bytes @ 0xA
  9897                           
  9898  004A                     Led_DynamicStorm@val:	
  9899                           ; 2 bytes @ 0xA
  9900                           
  9901                           
  9902                           ; 2 bytes @ 0xA
  9903  004A                     	ds	2
  9904  004C                     Led_DynamicWave@i:	
  9905  004C                     Led_DynamicMoon@i:	
  9906                           ; 1 bytes @ 0xC
  9907                           
  9908  004C                     Led_DynamicCloud@i:	
  9909                           ; 1 bytes @ 0xC
  9910                           
  9911  004C                     Led_DynamicStorm@i:	
  9912                           ; 1 bytes @ 0xC
  9913                           
  9914                           
  9915                           ; 1 bytes @ 0xC
  9916  004C                     	ds	1
  9917  004D                     ??_Led_Run:	
  9918                           
  9919                           ; 1 bytes @ 0xD
  9920  004D                     	ds	1
  9921  004E                     ??_IR_ResetIfTMR1Overflow:	
  9922  004E                     ??_RTC_HourReady:	
  9923                           ; 1 bytes @ 0xE
  9924                           
  9925  004E                     ??_RTC_MinuteReady:	
  9926                           ; 1 bytes @ 0xE
  9927                           
  9928  004E                     ??_RTC_SecondReady:	
  9929                           ; 1 bytes @ 0xE
  9930                           
  9931  004E                     ??_RTC_GetTime:	
  9932                           ; 1 bytes @ 0xE
  9933                           
  9934  004E                     ??_Led_TurnOffRamp:	
  9935                           ; 1 bytes @ 0xE
  9936                           
  9937  004E                     ??_Led_TurnOnRamp:	
  9938                           ; 1 bytes @ 0xE
  9939                           
  9940  004E                     ?_Util_IncValue:	
  9941                           ; 1 bytes @ 0xE
  9942                           
  9943  004E                     ?_Util_DecValue:	
  9944                           ; 1 bytes @ 0xE
  9945                           
  9946  004E                     ??_ADC_Initialize_Default:	
  9947                           ; 1 bytes @ 0xE
  9948                           
  9949  004E                     ?_DATAEE_WriteByte:	
  9950                           ; 1 bytes @ 0xE
  9951                           
  9952  004E                     ?_DATAEE_ReadByte:	
  9953                           ; 1 bytes @ 0xE
  9954                           
  9955  004E                     ??_EUSART_Initialize_Default:	
  9956                           ; 1 bytes @ 0xE
  9957                           
  9958  004E                     ??_EUSART_Write:	
  9959                           ; 1 bytes @ 0xE
  9960                           
  9961  004E                     ??_PWM1_Initialize:	
  9962                           ; 1 bytes @ 0xE
  9963                           
  9964  004E                     ?_PWM1_LoadDutyValue:	
  9965                           ; 1 bytes @ 0xE
  9966                           
  9967  004E                     ??_PWM2_Initialize:	
  9968                           ; 1 bytes @ 0xE
  9969                           
  9970  004E                     ?_PWM2_LoadDutyValue:	
  9971                           ; 1 bytes @ 0xE
  9972                           
  9973  004E                     ??_PWM3_Initialize:	
  9974                           ; 1 bytes @ 0xE
  9975                           
  9976  004E                     ?_PWM3_LoadDutyValue:	
  9977                           ; 1 bytes @ 0xE
  9978                           
  9979  004E                     ??_PWM4_Initialize:	
  9980                           ; 1 bytes @ 0xE
  9981                           
  9982  004E                     ?_PWM4_LoadDutyValue:	
  9983                           ; 1 bytes @ 0xE
  9984                           
  9985  004E                     ??_PWM5_Initialize:	
  9986                           ; 1 bytes @ 0xE
  9987                           
  9988  004E                     ?_PWM5_LoadDutyValue:	
  9989                           ; 1 bytes @ 0xE
  9990                           
  9991  004E                     ??_TMR0_Initialize_Default:	
  9992                           ; 1 bytes @ 0xE
  9993                           
  9994  004E                     ??_TMR0_StartTimer:	
  9995                           ; 1 bytes @ 0xE
  9996                           
  9997  004E                     ?_TMR0_SetInterruptHandler:	
  9998                           ; 1 bytes @ 0xE
  9999                           
 10000  004E                     ??_TMR1_Initialize_Default:	
 10001                           ; 1 bytes @ 0xE
 10002                           
 10003  004E                     ??_TMR1_StartTimer:	
 10004                           ; 1 bytes @ 0xE
 10005                           
 10006  004E                     ??_TMR1_StopTimer:	
 10007                           ; 1 bytes @ 0xE
 10008                           
 10009  004E                     ?_TMR1_Gate_SetInterruptHandler:	
 10010                           ; 1 bytes @ 0xE
 10011                           
 10012  004E                     ??_TMR2_Initialize_Default:	
 10013                           ; 1 bytes @ 0xE
 10014                           
 10015  004E                     ??_TMR2_StartTimer:	
 10016                           ; 1 bytes @ 0xE
 10017                           
 10018  004E                     ?_TMR2_SetInterruptHandler:	
 10019                           ; 1 bytes @ 0xE
 10020                           
 10021  004E                     ??_TMR2_DisableInterrupt:	
 10022                           ; 1 bytes @ 0xE
 10023                           
 10024  004E                     ??_TMR2_EnableInterrupt:	
 10025                           ; 1 bytes @ 0xE
 10026                           
 10027  004E                     ??_TMR4_Initialize_Default:	
 10028                           ; 1 bytes @ 0xE
 10029                           
 10030  004E                     ??_TMR4_StartTimer:	
 10031                           ; 1 bytes @ 0xE
 10032                           
 10033  004E                     ?_TMR4_SetInterruptHandler:	
 10034                           ; 1 bytes @ 0xE
 10035                           
 10036  004E                     ??_OSCILLATOR_Initialize:	
 10037                           ; 1 bytes @ 0xE
 10038                           
 10039  004E                     ??_PIN_Initialize:	
 10040                           ; 1 bytes @ 0xE
 10041                           
 10042  004E                     ??_Led_FirstPowerUp:	
 10043                           ; 1 bytes @ 0xE
 10044                           
 10045  004E                     ??_Led_StartNotice:	
 10046                           ; 1 bytes @ 0xE
 10047                           
 10048  004E                     ??_IR_GetIndex:	
 10049                           ; 1 bytes @ 0xE
 10050                           
 10051  004E                     ?___bmul:	
 10052                           ; 1 bytes @ 0xE
 10053                           
 10054  004E                     ?_ADC_Conversion:	
 10055                           ; 1 bytes @ 0xE
 10056                           
 10057  004E                     ?___wmul:	
 10058                           ; 2 bytes @ 0xE
 10059                           
 10060  004E                     EUSART_Write@byte:	
 10061                           ; 2 bytes @ 0xE
 10062                           
 10063  004E                     PIN_Initialize@state:	
 10064                           ; 1 bytes @ 0xE
 10065                           
 10066  004E                     Led_TurnOnRamp@i:	
 10067                           ; 1 bytes @ 0xE
 10068                           
 10069  004E                     Led_TurnOffRamp@i:	
 10070                           ; 1 bytes @ 0xE
 10071                           
 10072  004E                     IR_GetIndex@idx:	
 10073                           ; 1 bytes @ 0xE
 10074                           
 10075  004E                     ___bmul@multiplicand:	
 10076                           ; 1 bytes @ 0xE
 10077                           
 10078  004E                     DATAEE_WriteByte@addr:	
 10079                           ; 1 bytes @ 0xE
 10080                           
 10081  004E                     DATAEE_ReadByte@addr:	
 10082                           ; 2 bytes @ 0xE
 10083                           
 10084  004E                     PWM1_LoadDutyValue@dutyValue:	
 10085                           ; 2 bytes @ 0xE
 10086                           
 10087  004E                     PWM2_LoadDutyValue@dutyValue:	
 10088                           ; 2 bytes @ 0xE
 10089                           
 10090  004E                     PWM3_LoadDutyValue@dutyValue:	
 10091                           ; 2 bytes @ 0xE
 10092                           
 10093  004E                     PWM4_LoadDutyValue@dutyValue:	
 10094                           ; 2 bytes @ 0xE
 10095                           
 10096  004E                     PWM5_LoadDutyValue@dutyValue:	
 10097                           ; 2 bytes @ 0xE
 10098                           
 10099  004E                     TMR0_SetInterruptHandler@handler:	
 10100                           ; 2 bytes @ 0xE
 10101                           
 10102  004E                     TMR1_Gate_SetInterruptHandler@handler:	
 10103                           ; 2 bytes @ 0xE
 10104                           
 10105  004E                     TMR2_SetInterruptHandler@handler:	
 10106                           ; 2 bytes @ 0xE
 10107                           
 10108  004E                     TMR4_SetInterruptHandler@handler:	
 10109                           ; 2 bytes @ 0xE
 10110                           
 10111  004E                     Util_IncValue@pSrc:	
 10112                           ; 2 bytes @ 0xE
 10113                           
 10114  004E                     Util_DecValue@pSrc:	
 10115                           ; 2 bytes @ 0xE
 10116                           
 10117  004E                     ___wmul@multiplier:	
 10118                           ; 2 bytes @ 0xE
 10119                           
 10120                           
 10121                           ; 2 bytes @ 0xE
 10122  004E                     	ds	1
 10123  004F                     ??_SYSTEM_Initialize:	
 10124  004F                     ??_Audio_StopSound:	
 10125                           ; 1 bytes @ 0xF
 10126                           
 10127  004F                     ??_Audio_SetPlayMode:	
 10128                           ; 1 bytes @ 0xF
 10129                           
 10130  004F                     ??_Audio_SetVolume:	
 10131                           ; 1 bytes @ 0xF
 10132                           
 10133  004F                     ??___bmul:	
 10134                           ; 1 bytes @ 0xF
 10135                           
 10136  004F                     Audio_StopSound@checksum:	
 10137                           ; 1 bytes @ 0xF
 10138                           
 10139  004F                     Audio_SetPlayMode@type:	
 10140                           ; 1 bytes @ 0xF
 10141                           
 10142  004F                     Audio_SetVolume@vol:	
 10143                           ; 1 bytes @ 0xF
 10144                           
 10145  004F                     Led_StartNotice@cnt:	
 10146                           ; 1 bytes @ 0xF
 10147                           
 10148  004F                     IR_GetIndex@keynum:	
 10149                           ; 1 bytes @ 0xF
 10150                           
 10151  004F                     ___bmul@product:	
 10152                           ; 1 bytes @ 0xF
 10153                           
 10154                           
 10155                           ; 1 bytes @ 0xF
 10156  004F                     	ds	1
 10157  0050                     ??_Interrupt_Initialize:	
 10158  0050                     ??_ADC_Conversion:	
 10159                           ; 1 bytes @ 0x10
 10160                           
 10161  0050                     ??_DATAEE_ReadByte:	
 10162                           ; 1 bytes @ 0x10
 10163                           
 10164  0050                     ?_DATAEE_ReadBuffer:	
 10165                           ; 1 bytes @ 0x10
 10166                           
 10167  0050                     ??_PWM1_LoadDutyValue:	
 10168                           ; 1 bytes @ 0x10
 10169                           
 10170  0050                     ??_PWM2_LoadDutyValue:	
 10171                           ; 1 bytes @ 0x10
 10172                           
 10173  0050                     ??_PWM3_LoadDutyValue:	
 10174                           ; 1 bytes @ 0x10
 10175                           
 10176  0050                     ??_PWM4_LoadDutyValue:	
 10177                           ; 1 bytes @ 0x10
 10178                           
 10179  0050                     ??_PWM5_LoadDutyValue:	
 10180                           ; 1 bytes @ 0x10
 10181                           
 10182  0050                     ??_TMR0_SetInterruptHandler:	
 10183                           ; 1 bytes @ 0x10
 10184                           
 10185  0050                     ??_TMR1_Gate_SetInterruptHandler:	
 10186                           ; 1 bytes @ 0x10
 10187                           
 10188  0050                     ??_TMR2_SetInterruptHandler:	
 10189                           ; 1 bytes @ 0x10
 10190                           
 10191  0050                     ??_TMR4_SetInterruptHandler:	
 10192                           ; 1 bytes @ 0x10
 10193                           
 10194  0050                     DATAEE_WriteByte@byte:	
 10195                           ; 1 bytes @ 0x10
 10196                           
 10197  0050                     Audio_SetPlayMode@checksum:	
 10198                           ; 1 bytes @ 0x10
 10199                           
 10200  0050                     Audio_SetVolume@checksum:	
 10201                           ; 1 bytes @ 0x10
 10202                           
 10203  0050                     Led_FirstPowerUp@i:	
 10204                           ; 1 bytes @ 0x10
 10205                           
 10206  0050                     ___bmul@multiplier:	
 10207                           ; 1 bytes @ 0x10
 10208                           
 10209  0050                     DATAEE_ReadBuffer@addr:	
 10210                           ; 1 bytes @ 0x10
 10211                           
 10212  0050                     Util_IncValue@max:	
 10213                           ; 2 bytes @ 0x10
 10214                           
 10215  0050                     Util_DecValue@min:	
 10216                           ; 2 bytes @ 0x10
 10217                           
 10218  0050                     ___wmul@multiplicand:	
 10219                           ; 2 bytes @ 0x10
 10220                           
 10221                           
 10222                           ; 2 bytes @ 0x10
 10223  0050                     	ds	1
 10224  0051                     ??_DATAEE_WriteByte:	
 10225  0051                     ?_IR_IsValidTime:	
 10226                           ; 1 bytes @ 0x11
 10227                           
 10228  0051                     ADC_Conversion@chn:	
 10229                           ; 1 bytes @ 0x11
 10230                           
 10231  0051                     DATAEE_WriteByte@GIEBitValue:	
 10232                           ; 1 bytes @ 0x11
 10233                           
 10234  0051                     IR_IsValidTime@len:	
 10235                           ; 1 bytes @ 0x11
 10236                           
 10237                           
 10238                           ; 1 bytes @ 0x11
 10239  0051                     	ds	1
 10240  0052                     ??_Led_UpdateBright:	
 10241  0052                     ?_DATAEE_WriteBuffer:	
 10242                           ; 1 bytes @ 0x12
 10243                           
 10244  0052                     ??_IR_IsValidTime:	
 10245                           ; 1 bytes @ 0x12
 10246                           
 10247  0052                     ??___wmul:	
 10248                           ; 1 bytes @ 0x12
 10249                           
 10250  0052                     DATAEE_ReadBuffer@buf:	
 10251                           ; 1 bytes @ 0x12
 10252                           
 10253  0052                     Led_UpdateBright@i:	
 10254                           ; 1 bytes @ 0x12
 10255                           
 10256  0052                     IR_IsValidTime@min:	
 10257                           ; 1 bytes @ 0x12
 10258                           
 10259  0052                     DATAEE_WriteBuffer@addr:	
 10260                           ; 1 bytes @ 0x12
 10261                           
 10262  0052                     Util_IncValue@delta:	
 10263                           ; 2 bytes @ 0x12
 10264                           
 10265  0052                     Util_DecValue@delta:	
 10266                           ; 2 bytes @ 0x12
 10267                           
 10268  0052                     ___wmul@product:	
 10269                           ; 2 bytes @ 0x12
 10270                           
 10271                           
 10272                           ; 2 bytes @ 0x12
 10273  0052                     	ds	1
 10274  0053                     DATAEE_ReadBuffer@len:	
 10275  0053                     IR_IsValidTime@result:	
 10276                           ; 1 bytes @ 0x13
 10277                           
 10278                           
 10279                           ; 1 bytes @ 0x13
 10280  0053                     	ds	1
 10281  0054                     ??_Led_Initialize:	
 10282  0054                     ??_Led_CheckAutoStatus:	
 10283                           ; 1 bytes @ 0x14
 10284                           
 10285  0054                     ??_Util_IncValue:	
 10286                           ; 1 bytes @ 0x14
 10287                           
 10288  0054                     ??_Util_DecValue:	
 10289                           ; 1 bytes @ 0x14
 10290                           
 10291  0054                     ??_DATAEE_ReadBuffer:	
 10292                           ; 1 bytes @ 0x14
 10293                           
 10294  0054                     ??_Audio_GetValue:	
 10295                           ; 1 bytes @ 0x14
 10296                           
 10297  0054                     DATAEE_WriteBuffer@buf:	
 10298                           ; 1 bytes @ 0x14
 10299                           
 10300  0054                     DATAEE_ReadBuffer@i:	
 10301                           ; 1 bytes @ 0x14
 10302                           
 10303  0054                     IR_IsValidTime@hour:	
 10304                           ; 1 bytes @ 0x14
 10305                           
 10306                           
 10307                           ; 1 bytes @ 0x14
 10308  0054                     	ds	1
 10309  0055                     ??_Led_InitPara:	
 10310  0055                     DATAEE_WriteBuffer@len:	
 10311                           ; 1 bytes @ 0x15
 10312                           
 10313  0055                     IR_IsValidTime@tm:	
 10314                           ; 1 bytes @ 0x15
 10315                           
 10316  0055                     Led_CheckAutoStatus@sunrise:	
 10317                           ; 1 bytes @ 0x15
 10318                           
 10319                           
 10320                           ; 2 bytes @ 0x15
 10321  0055                     	ds	1
 10322  0056                     ??_DATAEE_WriteBuffer:	
 10323  0056                     DATAEE_WriteBuffer@i:	
 10324                           ; 1 bytes @ 0x16
 10325                           
 10326  0056                     _Led_Initialize$1206:	
 10327                           ; 1 bytes @ 0x16
 10328                           
 10329                           
 10330                           ; 2 bytes @ 0x16
 10331  0056                     	ds	1
 10332  0057                     ??_Led_SaveParaIfChanged:	
 10333  0057                     Led_CheckAutoStatus@sunset:	
 10334                           ; 1 bytes @ 0x17
 10335                           
 10336                           
 10337                           ; 2 bytes @ 0x17
 10338  0057                     	ds	1
 10339  0058                     ??_Led_AutoRun:	
 10340  0058                     Led_Initialize@result:	
 10341                           ; 1 bytes @ 0x18
 10342                           
 10343  0058                     Audio_GetValue@value:	
 10344                           ; 1 bytes @ 0x18
 10345                           
 10346                           
 10347                           ; 2 bytes @ 0x18
 10348  0058                     	ds	1
 10349  0059                     Led_Initialize@ct:	
 10350  0059                     Led_CheckAutoStatus@ct:	
 10351                           ; 2 bytes @ 0x19
 10352                           
 10353                           
 10354                           ; 2 bytes @ 0x19
 10355  0059                     	ds	1
 10356  005A                     Led_InitPara@j:	
 10357                           
 10358                           ; 1 bytes @ 0x1A
 10359  005A                     	ds	1
 10360  005B                     Led_InitPara@i:	
 10361  005B                     Led_Initialize@i:	
 10362                           ; 1 bytes @ 0x1B
 10363                           
 10364  005B                     Led_CheckAutoStatus@i_1236:	
 10365                           ; 1 bytes @ 0x1B
 10366                           
 10367                           
 10368                           ; 1 bytes @ 0x1B
 10369  005B                     	ds	1
 10370  005C                     ??_IR_KeyAtionIfPressed:	
 10371  005C                     ??_IR_UpdateSetStatus:	
 10372                           ; 1 bytes @ 0x1C
 10373                           
 10374  005C                     ??_IR_ExitSet:	
 10375                           ; 1 bytes @ 0x1C
 10376                           
 10377  005C                     ??_IR_ExitTimeout:	
 10378                           ; 1 bytes @ 0x1C
 10379                           
 10380  005C                     Led_CheckAutoStatus@i_1237:	
 10381                           ; 1 bytes @ 0x1C
 10382                           
 10383  005C                     Led_AutoRun@i:	
 10384                           ; 1 bytes @ 0x1C
 10385                           
 10386                           
 10387                           ; 1 bytes @ 0x1C
 10388  005C                     	ds	1
 10389  005D                     Led_CheckAutoStatus@i:	
 10390                           
 10391                           ; 1 bytes @ 0x1D
 10392  005D                     	ds	1
 10393  005E                     ??_main:	
 10394                           
 10395                           	psect	text3
 10396  151F                     __ptext3:	
 10397 ;; *************** function _SYSTEM_Initialize *****************
 10398 ;; Defined at:
 10399 ;;		line 143 in file "user/src/main.c"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;		None
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;		None
 10404 ;; Return value:  Size  Location     Type
 10405 ;;                  1    wreg      void 
 10406 ;; Registers used:
 10407 ;;		wreg, status,2, status,0, pclath, cstack
 10408 ;; Tracked objects:
 10409 ;;		On entry : B1F/0
 10410 ;;		On exit  : 1F/1
 10411 ;;		Unchanged: 0/0
 10412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;Total ram usage:        0 bytes
 10418 ;; Hardware stack levels used:    1
 10419 ;; Hardware stack levels required when called:    8
 10420 ;; This function calls:
 10421 ;;		_ADC_Initialize_Default
 10422 ;;		_EUSART_Initialize_Default
 10423 ;;		_OSCILLATOR_Initialize
 10424 ;;		_PIN_Initialize
 10425 ;;		_PWM1_Initialize
 10426 ;;		_PWM2_Initialize
 10427 ;;		_PWM3_Initialize
 10428 ;;		_PWM4_Initialize
 10429 ;;		_PWM5_Initialize
 10430 ;;		_TMR0_Initialize_Default
 10431 ;;		_TMR1_Initialize_Default
 10432 ;;		_TMR2_Initialize_Default
 10433 ;;		_TMR4_Initialize_Default
 10434 ;; This function is called by:
 10435 ;;		_main
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439                           
 10440                           ;psect for function _SYSTEM_Initialize
 10441  151F                     _SYSTEM_Initialize:	
 10442                           
 10443                           ;main.c: 144: PIN_Initialize();
 10444                           
 10445                           ;incstack = 0
 10446                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10447  151F  2542  3195         	fcall	_PIN_Initialize
 10448                           
 10449                           ;main.c: 145: OSCILLATOR_Initialize();
 10450  1521  2538  3195         	fcall	_OSCILLATOR_Initialize
 10451                           
 10452                           ;main.c: 146: TMR0_Initialize_Default();
 10453  1523  25BA  3195         	fcall	_TMR0_Initialize_Default
 10454                           
 10455                           ;main.c: 147: TMR1_Initialize_Default();
 10456  1525  25C5  3195         	fcall	_TMR1_Initialize_Default
 10457                           
 10458                           ;main.c: 148: TMR2_Initialize_Default();
 10459  1527  25D4  3195         	fcall	_TMR2_Initialize_Default
 10460                           
 10461                           ;main.c: 149: TMR4_Initialize_Default();
 10462  1529  25DE  3195         	fcall	_TMR4_Initialize_Default
 10463                           
 10464                           ;main.c: 150: PWM1_Initialize();
 10465  152B  258F  3195         	fcall	_PWM1_Initialize
 10466                           
 10467                           ;main.c: 151: PWM2_Initialize();
 10468  152D  2595  3195         	fcall	_PWM2_Initialize
 10469                           
 10470                           ;main.c: 152: PWM3_Initialize();
 10471  152F  259E  3195         	fcall	_PWM3_Initialize
 10472                           
 10473                           ;main.c: 153: PWM4_Initialize();
 10474  1531  25A9  3195         	fcall	_PWM4_Initialize
 10475                           
 10476                           ;main.c: 154: PWM5_Initialize();
 10477  1533  25B4  3195         	fcall	_PWM5_Initialize
 10478                           
 10479                           ;main.c: 155: EUSART_Initialize_Default();
 10480  1535  25F1  3195         	fcall	_EUSART_Initialize_Default
 10481                           
 10482                           ;main.c: 156: ADC_Initialize_Default();
 10483  1537  2DE9               	ljmp	l4726
 10484  1538                     __end_of_SYSTEM_Initialize:	
 10485  1538                     __ptext14:	
 10486 ;; *************** function _OSCILLATOR_Initialize *****************
 10487 ;; Defined at:
 10488 ;;		line 88 in file "user/src/main.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;		None
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;		None
 10493 ;; Return value:  Size  Location     Type
 10494 ;;                  1    wreg      void 
 10495 ;; Registers used:
 10496 ;;		wreg, status,2
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 1F/12
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;Total ram usage:        0 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    7
 10509 ;; This function calls:
 10510 ;;		Nothing
 10511 ;; This function is called by:
 10512 ;;		_SYSTEM_Initialize
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           
 10517                           ;psect for function _OSCILLATOR_Initialize
 10518  1538                     _OSCILLATOR_Initialize:	
 10519                           
 10520                           ;main.c: 90: OSCCON1 = 0x60;
 10521                           
 10522                           ;incstack = 0
 10523                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10524  1538  3060               	movlw	96
 10525  1539  0032               	movlb	18	; select bank18
 10526  153A  0099               	movwf	25	;volatile
 10527                           
 10528                           ;main.c: 92: OSCCON3 = 0x00;
 10529  153B  019B               	clrf	27	;volatile
 10530                           
 10531                           ;main.c: 94: OSCEN = 0x48;
 10532  153C  3048               	movlw	72
 10533  153D  009D               	movwf	29	;volatile
 10534                           
 10535                           ;main.c: 96: OSCFRQ = 0x06;
 10536  153E  3006               	movlw	6
 10537  153F  009F               	movwf	31	;volatile
 10538                           
 10539                           ;main.c: 98: OSCTUNE = 0x00;
 10540  1540  019E               	clrf	30	;volatile
 10541  1541  0008               	return
 10542  1542                     __end_of_OSCILLATOR_Initialize:	
 10543  1542                     __ptext13:	
 10544 ;; *************** function _PIN_Initialize *****************
 10545 ;; Defined at:
 10546 ;;		line 101 in file "user/src/main.c"
 10547 ;; Parameters:    Size  Location     Type
 10548 ;;		None
 10549 ;; Auto vars:     Size  Location     Type
 10550 ;;  state           1   14[BANK0 ] unsigned char 
 10551 ;; Return value:  Size  Location     Type
 10552 ;;                  1    wreg      void 
 10553 ;; Registers used:
 10554 ;;		wreg, status,2, status,0
 10555 ;; Tracked objects:
 10556 ;;		On entry : B1F/0
 10557 ;;		On exit  : 0/0
 10558 ;;		Unchanged: 0/0
 10559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10561 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10563 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10564 ;;Total ram usage:        1 bytes
 10565 ;; Hardware stack levels used:    1
 10566 ;; Hardware stack levels required when called:    7
 10567 ;; This function calls:
 10568 ;;		Nothing
 10569 ;; This function is called by:
 10570 ;;		_SYSTEM_Initialize
 10571 ;; This function uses a non-reentrant model
 10572 ;;
 10573                           
 10574                           
 10575                           ;psect for function _PIN_Initialize
 10576  1542                     _PIN_Initialize:	
 10577                           
 10578                           ;main.c: 102: LATA = 0x00;
 10579                           
 10580                           ;incstack = 0
 10581                           ; Regs used in _PIN_Initialize: [wreg+status,2+status,0]
 10582  1542  0022               	movlb	2	; select bank2
 10583  1543  018C               	clrf	12	;volatile
 10584                           
 10585                           ;main.c: 103: LATB = 0x80;
 10586  1544  3080               	movlw	128
 10587  1545  008D               	movwf	13	;volatile
 10588                           
 10589                           ;main.c: 104: LATC = 0x00;
 10590  1546  018E               	clrf	14	;volatile
 10591                           
 10592                           ;main.c: 106: TRISA = 0x30;
 10593  1547  3030               	movlw	48
 10594  1548  0021               	movlb	1	; select bank1
 10595  1549  008C               	movwf	12	;volatile
 10596                           
 10597                           ;main.c: 107: TRISB = 0x60;
 10598  154A  3060               	movlw	96
 10599  154B  008D               	movwf	13	;volatile
 10600                           
 10601                           ;main.c: 108: TRISC = 0x05;
 10602  154C  3005               	movlw	5
 10603  154D  008E               	movwf	14	;volatile
 10604                           
 10605                           ;main.c: 110: ANSELC = 0x04;
 10606  154E  3004               	movlw	4
 10607  154F  0023               	movlb	3	; select bank3
 10608  1550  008E               	movwf	14	;volatile
 10609                           
 10610                           ;main.c: 111: ANSELB = 0x00;
 10611  1551  018D               	clrf	13	;volatile
 10612                           
 10613                           ;main.c: 112: ANSELA = 0x00;
 10614  1552  018C               	clrf	12	;volatile
 10615                           
 10616                           ;main.c: 114: WPUB = 0x60;
 10617  1553  3060               	movlw	96
 10618  1554  0024               	movlb	4	; select bank4
 10619  1555  008D               	movwf	13	;volatile
 10620                           
 10621                           ;main.c: 115: WPUA = 0x00;
 10622  1556  018C               	clrf	12	;volatile
 10623                           
 10624                           ;main.c: 116: WPUC = 0x01;
 10625  1557  3001               	movlw	1
 10626  1558  008E               	movwf	14	;volatile
 10627                           
 10628                           ;main.c: 118: ODCONA = 0x00;
 10629  1559  0025               	movlb	5	; select bank5
 10630  155A  018C               	clrf	12	;volatile
 10631                           
 10632                           ;main.c: 119: ODCONB = 0x00;
 10633  155B  018D               	clrf	13	;volatile
 10634                           
 10635                           ;main.c: 120: ODCONC = 0x00;
 10636  155C  018E               	clrf	14	;volatile
 10637                           
 10638                           ;main.c: 122: uint8_t state = GIE;
 10639  155D  3000               	movlw	0
 10640  155E  1B8B               	btfsc	11,7	;volatile
 10641  155F  3001               	movlw	1
 10642  1560  0020               	movlb	0	; select bank0
 10643  1561  00CE               	movwf	PIN_Initialize@state
 10644                           
 10645                           ;main.c: 123: GIE = 0;
 10646  1562  138B               	bcf	11,7	;volatile
 10647                           
 10648                           ;main.c: 124: PPSLOCK = 0x55;
 10649                           
 10650                           ;main.c: 125: PPSLOCK = 0xAA;
 10651  1563  260A  3195         	fcall	PL96	;call to abstracted procedure
 10652                           
 10653                           ;main.c: 126: PPSLOCKbits.PPSLOCKED = 0x00;
 10654  1565  100F               	bcf	15,0	;volatile
 10655                           
 10656                           ;main.c: 128: RC5PPSbits.RC5PPS = 0x0C;
 10657  1566  003D               	movlb	29	; select bank29
 10658  1567  0825               	movf	37,w	;volatile
 10659  1568  39E0               	andlw	-32
 10660  1569  380C               	iorlw	12
 10661  156A  00A5               	movwf	37	;volatile
 10662                           
 10663                           ;main.c: 129: RC3PPSbits.RC3PPS = 0x0D;
 10664  156B  0823               	movf	35,w	;volatile
 10665  156C  39E0               	andlw	-32
 10666  156D  380D               	iorlw	13
 10667  156E  00A3               	movwf	35	;volatile
 10668                           
 10669                           ;main.c: 130: RA2PPSbits.RA2PPS = 0x0E;
 10670  156F  0812               	movf	18,w	;volatile
 10671  1570  39E0               	andlw	-32
 10672  1571  380E               	iorlw	14
 10673  1572  0092               	movwf	18	;volatile
 10674                           
 10675                           ;main.c: 131: RC1PPSbits.RC1PPS = 0x0F;
 10676  1573  0821               	movf	33,w	;volatile
 10677  1574  39E0               	andlw	-32
 10678  1575  380F               	iorlw	15
 10679  1576  00A1               	movwf	33	;volatile
 10680                           
 10681                           ;main.c: 132: RC7PPSbits.RC7PPS = 0x02;
 10682  1577  0827               	movf	39,w	;volatile
 10683  1578  39E0               	andlw	-32
 10684  1579  3802               	iorlw	2
 10685  157A  00A7               	movwf	39	;volatile
 10686                           
 10687                           ;main.c: 133: T1GPPSbits.T1GPPS = 0x10;
 10688  157B  003C               	movlb	28	; select bank28
 10689  157C  0813               	movf	19,w	;volatile
 10690  157D  39E0               	andlw	-32
 10691  157E  3810               	iorlw	16
 10692  157F  0093               	movwf	19	;volatile
 10693                           
 10694                           ;main.c: 134: RB7PPSbits.RB7PPS = 0x14;
 10695  1580  003D               	movlb	29	; select bank29
 10696  1581  081F               	movf	31,w	;volatile
 10697  1582  39E0               	andlw	-32
 10698  1583  3814               	iorlw	20
 10699  1584  009F               	movwf	31	;volatile
 10700                           
 10701                           ;main.c: 136: PPSLOCK = 0x55;
 10702                           
 10703                           ;main.c: 137: PPSLOCK = 0xAA;
 10704  1585  260A  3195         	fcall	PL96	;call to abstracted procedure
 10705                           
 10706                           ;main.c: 138: PPSLOCKbits.PPSLOCKED = 0x01;
 10707  1587  140F               	bsf	15,0	;volatile
 10708                           
 10709                           ;main.c: 140: GIE = state;
 10710  1588  0020               	movlb	0	; select bank0
 10711  1589  1C4E               	btfss	PIN_Initialize@state,0
 10712  158A  2D8D               	goto	u3500
 10713  158B  178B               	bsf	11,7	;volatile
 10714  158C  0008               	return
 10715  158D                     u3500:	
 10716  158D  138B               	bcf	11,7	;volatile
 10717  158E  0008               	return
 10718  158F                     __end_of_PIN_Initialize:	
 10719  158F                     __ptext12:	
 10720 ;; *************** function _PWM1_Initialize *****************
 10721 ;; Defined at:
 10722 ;;		line 6 in file "driver/src/pwm.c"
 10723 ;; Parameters:    Size  Location     Type
 10724 ;;		None
 10725 ;; Auto vars:     Size  Location     Type
 10726 ;;		None
 10727 ;; Return value:  Size  Location     Type
 10728 ;;                  1    wreg      void 
 10729 ;; Registers used:
 10730 ;;		wreg, status,2, status,0
 10731 ;; Tracked objects:
 10732 ;;		On entry : 1F/1
 10733 ;;		On exit  : 1F/5
 10734 ;;		Unchanged: 0/0
 10735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;Total ram usage:        0 bytes
 10741 ;; Hardware stack levels used:    1
 10742 ;; Hardware stack levels required when called:    7
 10743 ;; This function calls:
 10744 ;;		Nothing
 10745 ;; This function is called by:
 10746 ;;		_SYSTEM_Initialize
 10747 ;; This function uses a non-reentrant model
 10748 ;;
 10749                           
 10750                           
 10751                           ;psect for function _PWM1_Initialize
 10752  158F                     _PWM1_Initialize:	
 10753                           
 10754                           ;pwm.c: 8: CCP1CON = 0x8F;
 10755                           
 10756                           ;incstack = 0
 10757                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 10758  158F  308F               	movlw	143
 10759  1590  0025               	movlb	5	; select bank5
 10760  1591  0093               	movwf	19	;volatile
 10761                           
 10762                           ;pwm.c: 9: CCPR1 = 0;
 10763  1592  0191               	clrf	17	;volatile
 10764  1593  0192               	clrf	18	;volatile
 10765                           
 10766                           ;pwm.c: 10: CCPTMRSbits.C1TSEL = 0x1;
 10767  1594  2E05               	ljmp	PL90	;call to abstracted procedure
 10768  1595                     __end_of_PWM1_Initialize:	
 10769  1595                     __ptext11:	
 10770 ;; *************** function _PWM2_Initialize *****************
 10771 ;; Defined at:
 10772 ;;		line 18 in file "driver/src/pwm.c"
 10773 ;; Parameters:    Size  Location     Type
 10774 ;;		None
 10775 ;; Auto vars:     Size  Location     Type
 10776 ;;		None
 10777 ;; Return value:  Size  Location     Type
 10778 ;;                  1    wreg      void 
 10779 ;; Registers used:
 10780 ;;		wreg, status,2, status,0
 10781 ;; Tracked objects:
 10782 ;;		On entry : 1F/5
 10783 ;;		On exit  : 1F/5
 10784 ;;		Unchanged: 0/0
 10785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;Total ram usage:        0 bytes
 10791 ;; Hardware stack levels used:    1
 10792 ;; Hardware stack levels required when called:    7
 10793 ;; This function calls:
 10794 ;;		Nothing
 10795 ;; This function is called by:
 10796 ;;		_SYSTEM_Initialize
 10797 ;; This function uses a non-reentrant model
 10798 ;;
 10799                           
 10800                           
 10801                           ;psect for function _PWM2_Initialize
 10802  1595                     _PWM2_Initialize:	
 10803                           
 10804                           ;pwm.c: 20: CCP2CON = 0x8F;
 10805                           
 10806                           ;incstack = 0
 10807                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
 10808  1595  308F               	movlw	143
 10809  1596  0097               	movwf	23	;volatile
 10810                           
 10811                           ;pwm.c: 21: CCPR2 = 0;
 10812  1597  0195               	clrf	21	;volatile
 10813  1598  0196               	clrf	22	;volatile
 10814                           
 10815                           ;pwm.c: 22: CCPTMRSbits.C2TSEL = 0x1;
 10816  1599  081F               	movf	31,w	;volatile
 10817  159A  39F3               	andlw	-13
 10818  159B  3804               	iorlw	4
 10819  159C  009F               	movwf	31	;volatile
 10820  159D  0008               	return
 10821  159E                     __end_of_PWM2_Initialize:	
 10822  159E                     __ptext10:	
 10823 ;; *************** function _PWM3_Initialize *****************
 10824 ;; Defined at:
 10825 ;;		line 30 in file "driver/src/pwm.c"
 10826 ;; Parameters:    Size  Location     Type
 10827 ;;		None
 10828 ;; Auto vars:     Size  Location     Type
 10829 ;;		None
 10830 ;; Return value:  Size  Location     Type
 10831 ;;                  1    wreg      void 
 10832 ;; Registers used:
 10833 ;;		wreg, status,2, status,0
 10834 ;; Tracked objects:
 10835 ;;		On entry : 1F/5
 10836 ;;		On exit  : 1F/5
 10837 ;;		Unchanged: 0/0
 10838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;Total ram usage:        0 bytes
 10844 ;; Hardware stack levels used:    1
 10845 ;; Hardware stack levels required when called:    7
 10846 ;; This function calls:
 10847 ;;		Nothing
 10848 ;; This function is called by:
 10849 ;;		_SYSTEM_Initialize
 10850 ;; This function uses a non-reentrant model
 10851 ;;
 10852                           
 10853                           
 10854                           ;psect for function _PWM3_Initialize
 10855  159E                     _PWM3_Initialize:	
 10856                           
 10857                           ;pwm.c: 32: CCP3CON = 0x8F;
 10858                           
 10859                           ;incstack = 0
 10860                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
 10861  159E  308F               	movlw	143
 10862  159F  0026               	movlb	6	; select bank6
 10863  15A0  0093               	movwf	19	;volatile
 10864                           
 10865                           ;pwm.c: 33: CCPR3 = 0;
 10866  15A1  0191               	clrf	17	;volatile
 10867  15A2  0192               	clrf	18	;volatile
 10868                           
 10869                           ;pwm.c: 34: CCPTMRSbits.C3TSEL = 0x1;
 10870  15A3  0025               	movlb	5	; select bank5
 10871  15A4  081F               	movf	31,w	;volatile
 10872  15A5  39CF               	andlw	-49
 10873  15A6  3810               	iorlw	16
 10874  15A7  009F               	movwf	31	;volatile
 10875  15A8  0008               	return
 10876  15A9                     __end_of_PWM3_Initialize:	
 10877  15A9                     __ptext9:	
 10878 ;; *************** function _PWM4_Initialize *****************
 10879 ;; Defined at:
 10880 ;;		line 42 in file "driver/src/pwm.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;		None
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;		None
 10885 ;; Return value:  Size  Location     Type
 10886 ;;                  1    wreg      void 
 10887 ;; Registers used:
 10888 ;;		wreg, status,2, status,0
 10889 ;; Tracked objects:
 10890 ;;		On entry : 1F/5
 10891 ;;		On exit  : 1F/5
 10892 ;;		Unchanged: 0/0
 10893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;Total ram usage:        0 bytes
 10899 ;; Hardware stack levels used:    1
 10900 ;; Hardware stack levels required when called:    7
 10901 ;; This function calls:
 10902 ;;		Nothing
 10903 ;; This function is called by:
 10904 ;;		_SYSTEM_Initialize
 10905 ;; This function uses a non-reentrant model
 10906 ;;
 10907                           
 10908                           
 10909                           ;psect for function _PWM4_Initialize
 10910  15A9                     _PWM4_Initialize:	
 10911                           
 10912                           ;pwm.c: 44: CCP4CON = 0x8F;
 10913                           
 10914                           ;incstack = 0
 10915                           ; Regs used in _PWM4_Initialize: [wreg+status,2+status,0]
 10916  15A9  308F               	movlw	143
 10917  15AA  0026               	movlb	6	; select bank6
 10918  15AB  0097               	movwf	23	;volatile
 10919                           
 10920                           ;pwm.c: 45: CCPR4 = 0;
 10921  15AC  0195               	clrf	21	;volatile
 10922  15AD  0196               	clrf	22	;volatile
 10923                           
 10924                           ;pwm.c: 46: CCPTMRSbits.C4TSEL = 0x1;
 10925  15AE  0025               	movlb	5	; select bank5
 10926  15AF  081F               	movf	31,w	;volatile
 10927  15B0  393F               	andlw	-193
 10928  15B1  3840               	iorlw	64
 10929  15B2  009F               	movwf	31	;volatile
 10930  15B3  0008               	return
 10931  15B4                     __end_of_PWM4_Initialize:	
 10932  15B4                     __ptext8:	
 10933 ;; *************** function _PWM5_Initialize *****************
 10934 ;; Defined at:
 10935 ;;		line 54 in file "driver/src/pwm.c"
 10936 ;; Parameters:    Size  Location     Type
 10937 ;;		None
 10938 ;; Auto vars:     Size  Location     Type
 10939 ;;		None
 10940 ;; Return value:  Size  Location     Type
 10941 ;;                  1    wreg      void 
 10942 ;; Registers used:
 10943 ;;		wreg, status,2, status,0
 10944 ;; Tracked objects:
 10945 ;;		On entry : 1F/5
 10946 ;;		On exit  : 1F/C
 10947 ;;		Unchanged: 0/0
 10948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;Total ram usage:        0 bytes
 10954 ;; Hardware stack levels used:    1
 10955 ;; Hardware stack levels required when called:    7
 10956 ;; This function calls:
 10957 ;;		Nothing
 10958 ;; This function is called by:
 10959 ;;		_SYSTEM_Initialize
 10960 ;; This function uses a non-reentrant model
 10961 ;;
 10962                           
 10963                           
 10964                           ;psect for function _PWM5_Initialize
 10965  15B4                     _PWM5_Initialize:	
 10966                           
 10967                           ;pwm.c: 56: PWM5CON = 0x80;
 10968                           
 10969                           ;incstack = 0
 10970                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
 10971  15B4  3080               	movlw	128
 10972  15B5  002C               	movlb	12	; select bank12
 10973  15B6  0099               	movwf	25	;volatile
 10974                           
 10975                           ;pwm.c: 57: PWM5DC = 0;
 10976  15B7  0197               	clrf	23	;volatile
 10977  15B8  0198               	clrf	24	;volatile
 10978                           
 10979                           ;pwm.c: 58: PWMTMRSbits.P5TSEL = 0x1;
 10980  15B9  2E05               	ljmp	PL90	;call to abstracted procedure
 10981  15BA                     __end_of_PWM5_Initialize:	
 10982  15BA                     __ptext7:	
 10983 ;; *************** function _TMR0_Initialize_Default *****************
 10984 ;; Defined at:
 10985 ;;		line 5 in file "driver/src/tmr0.c"
 10986 ;; Parameters:    Size  Location     Type
 10987 ;;		None
 10988 ;; Auto vars:     Size  Location     Type
 10989 ;;		None
 10990 ;; Return value:  Size  Location     Type
 10991 ;;                  1    wreg      void 
 10992 ;; Registers used:
 10993 ;;		wreg, status,2
 10994 ;; Tracked objects:
 10995 ;;		On entry : 1F/12
 10996 ;;		On exit  : 1F/1
 10997 ;;		Unchanged: 0/0
 10998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;Total ram usage:        0 bytes
 11004 ;; Hardware stack levels used:    1
 11005 ;; Hardware stack levels required when called:    7
 11006 ;; This function calls:
 11007 ;;		Nothing
 11008 ;; This function is called by:
 11009 ;;		_SYSTEM_Initialize
 11010 ;; This function uses a non-reentrant model
 11011 ;;
 11012                           
 11013                           
 11014                           ;psect for function _TMR0_Initialize_Default
 11015  15BA                     _TMR0_Initialize_Default:	
 11016                           
 11017                           ;tmr0.c: 7: T0CON0 = 0x00;
 11018                           
 11019                           ;incstack = 0
 11020                           ; Regs used in _TMR0_Initialize_Default: [wreg+status,2]
 11021  15BA  0020               	movlb	0	; select bank0
 11022  15BB  0197               	clrf	23	;volatile
 11023                           
 11024                           ;tmr0.c: 8: T0CON1 = 0xC0 | 0x10 | 0x07;
 11025  15BC  30D7               	movlw	215
 11026  15BD  0098               	movwf	24	;volatile
 11027                           
 11028                           ;tmr0.c: 10: TMR0H = 0xFF;
 11029  15BE  30FF               	movlw	255
 11030  15BF  0096               	movwf	22	;volatile
 11031                           
 11032                           ;tmr0.c: 11: TMR0L = 0x00;
 11033  15C0  0195               	clrf	21	;volatile
 11034                           
 11035                           ;tmr0.c: 13: PIR0bits.TMR0IF = 0;
 11036  15C1  1290               	bcf	16,5	;volatile
 11037                           
 11038                           ;tmr0.c: 14: PIE0bits.TMR0IE = 1;
 11039  15C2  0021               	movlb	1	; select bank1
 11040  15C3  1690               	bsf	16,5	;volatile
 11041  15C4  0008               	return
 11042  15C5                     __end_of_TMR0_Initialize_Default:	
 11043  15C5                     __ptext6:	
 11044 ;; *************** function _TMR1_Initialize_Default *****************
 11045 ;; Defined at:
 11046 ;;		line 9 in file "driver/src/tmr1.c"
 11047 ;; Parameters:    Size  Location     Type
 11048 ;;		None
 11049 ;; Auto vars:     Size  Location     Type
 11050 ;;		None
 11051 ;; Return value:  Size  Location     Type
 11052 ;;                  1    wreg      void 
 11053 ;; Registers used:
 11054 ;;		wreg, status,2
 11055 ;; Tracked objects:
 11056 ;;		On entry : 1F/1
 11057 ;;		On exit  : 1F/1
 11058 ;;		Unchanged: 0/0
 11059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;Total ram usage:        0 bytes
 11065 ;; Hardware stack levels used:    1
 11066 ;; Hardware stack levels required when called:    7
 11067 ;; This function calls:
 11068 ;;		Nothing
 11069 ;; This function is called by:
 11070 ;;		_SYSTEM_Initialize
 11071 ;; This function uses a non-reentrant model
 11072 ;;
 11073                           
 11074                           
 11075                           ;psect for function _TMR1_Initialize_Default
 11076  15C5                     _TMR1_Initialize_Default:	
 11077                           
 11078                           ;tmr1.c: 11: T1CON = 0x30 | 0x04 | 0x00;
 11079                           
 11080                           ;incstack = 0
 11081                           ; Regs used in _TMR1_Initialize_Default: [wreg+status,2]
 11082  15C5  3034               	movlw	52
 11083  15C6  0020               	movlb	0	; select bank0
 11084  15C7  009B               	movwf	27	;volatile
 11085                           
 11086                           ;tmr1.c: 12: T1GCON = 0x00 | 0x80 | 0x40 | 0x08;
 11087  15C8  30C8               	movlw	200
 11088  15C9  009C               	movwf	28	;volatile
 11089                           
 11090                           ;tmr1.c: 14: TMR1 = 0x00;
 11091  15CA  0199               	clrf	25	;volatile
 11092  15CB  019A               	clrf	26	;volatile
 11093                           
 11094                           ;tmr1.c: 15: PIR1bits.TMR1IF = 0;
 11095  15CC  1011               	bcf	17,0	;volatile
 11096                           
 11097                           ;tmr1.c: 16: PIE1bits.TMR1IE = 0;
 11098  15CD  0021               	movlb	1	; select bank1
 11099  15CE  1011               	bcf	17,0	;volatile
 11100                           
 11101                           ;tmr1.c: 17: PIR1bits.TMR1GIF = 0;
 11102  15CF  0020               	movlb	0	; select bank0
 11103  15D0  1391               	bcf	17,7	;volatile
 11104                           
 11105                           ;tmr1.c: 18: PIE1bits.TMR1GIE = 1;
 11106  15D1  0021               	movlb	1	; select bank1
 11107  15D2  1791               	bsf	17,7	;volatile
 11108  15D3  0008               	return
 11109  15D4                     __end_of_TMR1_Initialize_Default:	
 11110  15D4                     __ptext5:	
 11111 ;; *************** function _TMR2_Initialize_Default *****************
 11112 ;; Defined at:
 11113 ;;		line 7 in file "driver/src/tmr2.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;		None
 11116 ;; Auto vars:     Size  Location     Type
 11117 ;;		None
 11118 ;; Return value:  Size  Location     Type
 11119 ;;                  1    wreg      void 
 11120 ;; Registers used:
 11121 ;;		wreg, status,2
 11122 ;; Tracked objects:
 11123 ;;		On entry : 1F/1
 11124 ;;		On exit  : 1F/1
 11125 ;;		Unchanged: 0/0
 11126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;Total ram usage:        0 bytes
 11132 ;; Hardware stack levels used:    1
 11133 ;; Hardware stack levels required when called:    7
 11134 ;; This function calls:
 11135 ;;		Nothing
 11136 ;; This function is called by:
 11137 ;;		_SYSTEM_Initialize
 11138 ;; This function uses a non-reentrant model
 11139 ;;
 11140                           
 11141                           
 11142                           ;psect for function _TMR2_Initialize_Default
 11143  15D4                     _TMR2_Initialize_Default:	
 11144                           
 11145                           ;tmr2.c: 9: T2CON = 0x00 | 0x78;
 11146                           
 11147                           ;incstack = 0
 11148                           ; Regs used in _TMR2_Initialize_Default: [wreg+status,2]
 11149  15D4  3078               	movlw	120
 11150  15D5  0020               	movlb	0	; select bank0
 11151  15D6  009F               	movwf	31	;volatile
 11152                           
 11153                           ;tmr2.c: 10: PR2 = 0xF9;
 11154  15D7  30F9               	movlw	249
 11155  15D8  009E               	movwf	30	;volatile
 11156                           
 11157                           ;tmr2.c: 11: TMR2 = 0x00;
 11158  15D9  019D               	clrf	29	;volatile
 11159                           
 11160                           ;tmr2.c: 12: PIR1bits.TMR2IF = 0;
 11161  15DA  1091               	bcf	17,1	;volatile
 11162                           
 11163                           ;tmr2.c: 13: PIE1bits.TMR2IE = 1;
 11164  15DB  0021               	movlb	1	; select bank1
 11165  15DC  1491               	bsf	17,1	;volatile
 11166  15DD  0008               	return
 11167  15DE                     __end_of_TMR2_Initialize_Default:	
 11168  15DE                     __ptext4:	
 11169 ;; *************** function _TMR4_Initialize_Default *****************
 11170 ;; Defined at:
 11171 ;;		line 7 in file "driver/src/tmr4.c"
 11172 ;; Parameters:    Size  Location     Type
 11173 ;;		None
 11174 ;; Auto vars:     Size  Location     Type
 11175 ;;		None
 11176 ;; Return value:  Size  Location     Type
 11177 ;;                  1    wreg      void 
 11178 ;; Registers used:
 11179 ;;		wreg, status,2
 11180 ;; Tracked objects:
 11181 ;;		On entry : 1F/1
 11182 ;;		On exit  : 1F/1
 11183 ;;		Unchanged: 0/0
 11184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11189 ;;Total ram usage:        0 bytes
 11190 ;; Hardware stack levels used:    1
 11191 ;; Hardware stack levels required when called:    7
 11192 ;; This function calls:
 11193 ;;		Nothing
 11194 ;; This function is called by:
 11195 ;;		_SYSTEM_Initialize
 11196 ;; This function uses a non-reentrant model
 11197 ;;
 11198                           
 11199                           
 11200                           ;psect for function _TMR4_Initialize_Default
 11201  15DE                     _TMR4_Initialize_Default:	
 11202                           
 11203                           ;tmr4.c: 9: T4CON = 0x03 | 0x78;
 11204                           
 11205                           ;incstack = 0
 11206                           ; Regs used in _TMR4_Initialize_Default: [wreg+status,2]
 11207  15DE  307B               	movlw	123
 11208  15DF  0028               	movlb	8	; select bank8
 11209  15E0  0097               	movwf	23	;volatile
 11210                           
 11211                           ;tmr4.c: 10: PR4 = 0xF9;
 11212  15E1  30F9               	movlw	249
 11213  15E2  0096               	movwf	22	;volatile
 11214                           
 11215                           ;tmr4.c: 11: TMR4 = 0x00;
 11216  15E3  0195               	clrf	21	;volatile
 11217                           
 11218                           ;tmr4.c: 13: PIR2bits.TMR4IF = 0;
 11219  15E4  0020               	movlb	0	; select bank0
 11220  15E5  1092               	bcf	18,1	;volatile
 11221                           
 11222                           ;tmr4.c: 14: PIE2bits.TMR4IE = 1;
 11223  15E6  0021               	movlb	1	; select bank1
 11224  15E7  1492               	bsf	18,1	;volatile
 11225  15E8  0008               	return
 11226  15E9                     __end_of_TMR4_Initialize_Default:	
 11227  15E9                     __ptext16:	
 11228 ;; *************** function _ADC_Initialize_Default *****************
 11229 ;; Defined at:
 11230 ;;		line 14 in file "driver/src/adc.c"
 11231 ;; Parameters:    Size  Location     Type
 11232 ;;		None
 11233 ;; Auto vars:     Size  Location     Type
 11234 ;;		None
 11235 ;; Return value:  Size  Location     Type
 11236 ;;                  1    wreg      void 
 11237 ;; Registers used:
 11238 ;;		wreg, status,2
 11239 ;; Tracked objects:
 11240 ;;		On entry : 1F/0
 11241 ;;		On exit  : 1F/1
 11242 ;;		Unchanged: 0/0
 11243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11248 ;;Total ram usage:        0 bytes
 11249 ;; Hardware stack levels used:    1
 11250 ;; Hardware stack levels required when called:    7
 11251 ;; This function calls:
 11252 ;;		Nothing
 11253 ;; This function is called by:
 11254 ;;		_SYSTEM_Initialize
 11255 ;; This function uses a non-reentrant model
 11256 ;;
 11257                           
 11258                           
 11259                           ;psect for function _ADC_Initialize_Default
 11260  15E9                     _ADC_Initialize_Default:	
 11261  15E9                     l4726:	
 11262                           ;incstack = 0
 11263                           ; Regs used in _ADC_Initialize_Default: [wreg+status,2]
 11264                           
 11265                           
 11266                           ;adc.c: 16: ADCON0 = 0x00;
 11267  15E9  0021               	movlb	1	; select bank1
 11268  15EA  019D               	clrf	29	;volatile
 11269                           
 11270                           ;adc.c: 17: ADCON1 = 0x80 | 0x50;
 11271  15EB  30D0               	movlw	208
 11272  15EC  009E               	movwf	30	;volatile
 11273                           
 11274                           ;adc.c: 18: ADACT = 0x00;
 11275  15ED  019F               	clrf	31	;volatile
 11276                           
 11277                           ;adc.c: 19: ADRESH = 0x00;
 11278  15EE  019C               	clrf	28	;volatile
 11279                           
 11280                           ;adc.c: 20: ADRESL = 0x00;
 11281  15EF  019B               	clrf	27	;volatile
 11282  15F0  0008               	return
 11283  15F1                     __end_of_ADC_Initialize_Default:	
 11284  15F1                     __ptext15:	
 11285 ;; *************** function _EUSART_Initialize_Default *****************
 11286 ;; Defined at:
 11287 ;;		line 17 in file "driver/src/eusart.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;		None
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;		None
 11292 ;; Return value:  Size  Location     Type
 11293 ;;                  1    wreg      void 
 11294 ;; Registers used:
 11295 ;;		wreg, status,2
 11296 ;; Tracked objects:
 11297 ;;		On entry : 1F/C
 11298 ;;		On exit  : 1F/0
 11299 ;;		Unchanged: 0/0
 11300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;Total ram usage:        0 bytes
 11306 ;; Hardware stack levels used:    1
 11307 ;; Hardware stack levels required when called:    7
 11308 ;; This function calls:
 11309 ;;		Nothing
 11310 ;; This function is called by:
 11311 ;;		_SYSTEM_Initialize
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           
 11316                           ;psect for function _EUSART_Initialize_Default
 11317  15F1                     _EUSART_Initialize_Default:	
 11318                           
 11319                           ;eusart.c: 19: PIE1bits.RCIE = 0;
 11320                           
 11321                           ;incstack = 0
 11322                           ; Regs used in _EUSART_Initialize_Default: [wreg+status,2]
 11323  15F1  0021               	movlb	1	; select bank1
 11324  15F2  1291               	bcf	17,5	;volatile
 11325                           
 11326                           ;eusart.c: 20: PIE1bits.TXIE = 0;
 11327  15F3  1211               	bcf	17,4	;volatile
 11328                           
 11329                           ;eusart.c: 21: BAUD1CON = 0x08;
 11330  15F4  3008               	movlw	8
 11331  15F5  0023               	movlb	3	; select bank3
 11332  15F6  009F               	movwf	31	;volatile
 11333                           
 11334                           ;eusart.c: 22: RC1STA = 0x80 | 0x10;
 11335  15F7  3090               	movlw	144
 11336  15F8  009D               	movwf	29	;volatile
 11337                           
 11338                           ;eusart.c: 23: TX1STA = 0x20 | 0x04;
 11339  15F9  3024               	movlw	36
 11340  15FA  009E               	movwf	30	;volatile
 11341                           
 11342                           ;eusart.c: 24: SP1BRG = 0x01A0;
 11343  15FB  3001               	movlw	1
 11344  15FC  009C               	movwf	28	;volatile
 11345  15FD  30A0               	movlw	160
 11346  15FE  009B               	movwf	27	;volatile
 11347                           
 11348                           ;eusart.c: 27: txTail = 0;
 11349  15FF  0020               	movlb	0	; select bank0
 11350  1600  3020               	movlw	32
 11351  1601  01B5               	clrf	_txTail
 11352  1602  01B4               	clrf	_txHead
 11353                           
 11354                           ;eusart.c: 29: txRemain = sizeof (txBuf );
 11355  1603  00DE               	movwf	_txRemain
 11356  1604  0008               	return
 11357  1605                     __end_of_EUSART_Initialize_Default:	
 11358  1605                     PL90:	
 11359  1605  081F               	movf	31,w	;volatile
 11360  1606  39FC               	andlw	-4
 11361  1607  3801               	iorlw	1
 11362  1608  009F               	movwf	31	;volatile
 11363  1609  0008               	return
 11364  160A                     __end_ofPL90:	
 11365  160A                     PL96:	
 11366  160A  3055               	movlw	85
 11367  160B  003C               	movlb	28	; select bank28
 11368  160C  008F               	movwf	15	;volatile
 11369  160D  30AA               	movlw	170
 11370  160E  008F               	movwf	15	;volatile
 11371  160F  0008               	return
 11372  1610                     __end_ofPL96:	
 11373                           
 11374                           	psect	text23
 11375  066A                     __ptext23:	
 11376 ;; *************** function _Led_InitPara *****************
 11377 ;; Defined at:
 11378 ;;		line 31 in file "user/src/led.c"
 11379 ;; Parameters:    Size  Location     Type
 11380 ;;		None
 11381 ;; Auto vars:     Size  Location     Type
 11382 ;;  j               1   26[BANK0 ] unsigned char 
 11383 ;;  i               1   27[BANK0 ] unsigned char 
 11384 ;; Return value:  Size  Location     Type
 11385 ;;                  1    wreg      void 
 11386 ;; Registers used:
 11387 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11388 ;; Tracked objects:
 11389 ;;		On entry : 1F/1
 11390 ;;		On exit  : 1F/0
 11391 ;;		Unchanged: 0/0
 11392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11395 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11396 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11397 ;;Total ram usage:        7 bytes
 11398 ;; Hardware stack levels used:    1
 11399 ;; Hardware stack levels required when called:    9
 11400 ;; This function calls:
 11401 ;;		_DATAEE_ReadBuffer
 11402 ;;		_Led_FirstPowerUp
 11403 ;;		___bmul
 11404 ;; This function is called by:
 11405 ;;		_main
 11406 ;; This function uses a non-reentrant model
 11407 ;;
 11408                           
 11409                           
 11410                           ;psect for function _Led_InitPara
 11411  066A                     _Led_InitPara:	
 11412                           
 11413                           ;led.c: 32: Led_FirstPowerUp();
 11414                           
 11415                           ;incstack = 0
 11416                           ; Regs used in _Led_InitPara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11417  066A  272D  3186         	fcall	_Led_FirstPowerUp
 11418                           
 11419                           ;led.c: 33: DATAEE_ReadBuffer(0x7010, (uint8_t *) & gLedPara, sizeof ( gLedPara));
 11420  066C  3010               	movlw	16
 11421  066D  0020               	movlb	0	; select bank0
 11422  066E  00D0               	movwf	DATAEE_ReadBuffer@addr
 11423  066F  3070               	movlw	112
 11424  0670  00D1               	movwf	DATAEE_ReadBuffer@addr+1
 11425  0671  3020               	movlw	(low (_gLedPara| (0+256)))& (0+255)
 11426  0672  00D2               	movwf	DATAEE_ReadBuffer@buf
 11427  0673  304E               	movlw	78
 11428  0674  00D3               	movwf	DATAEE_ReadBuffer@len
 11429  0675  2708  3186         	fcall	_DATAEE_ReadBuffer
 11430                           
 11431                           ;led.c: 34: for (uint8_t i = 0; i < 5; i++) {
 11432  0677  01DB               	clrf	Led_InitPara@i
 11433  0678                     l6940:	
 11434                           
 11435                           ;led.c: 35: if (gLedPara.mBright[i] > 1000) {
 11436  0678  355B               	lslf	Led_InitPara@i,w
 11437  0679  3E24               	addlw	(low ((_gLedPara| (0+256)+4)))& (0+255)
 11438  067A  275E  3186         	fcall	PL16	;call to abstracted procedure
 11439  067C  1903               	skipnz
 11440  067D  0255               	subwf	??_Led_InitPara,w
 11441  067E  1C03               	skipc
 11442  067F  2E85               	goto	l615
 11443                           
 11444                           ;led.c: 36: gLedPara.mBright[i] = 1000;
 11445  0680  276E  3186         	fcall	PL82	;call to abstracted procedure
 11446  0682  3E24               	addlw	(low ((_gLedPara| (0+256)+4)))& (0+255)
 11447  0683  2768  3186         	fcall	PL80	;call to abstracted procedure
 11448  0685                     l615:	
 11449                           
 11450                           ;led.c: 37: }
 11451                           ;led.c: 38: if (gLedPara.mDayBright[i] > 1000) {
 11452  0685  355B               	lslf	Led_InitPara@i,w
 11453  0686  3E58               	addlw	(low ((_gLedPara| (0+256)+56)))& (0+255)
 11454  0687  275E  3186         	fcall	PL16	;call to abstracted procedure
 11455  0689  1903               	skipnz
 11456  068A  0255               	subwf	??_Led_InitPara,w
 11457  068B  1C03               	skipc
 11458  068C  2E92               	goto	l616
 11459                           
 11460                           ;led.c: 39: gLedPara.mDayBright[i] = 1000;
 11461  068D  276E  3186         	fcall	PL82	;call to abstracted procedure
 11462  068F  3E58               	addlw	(low ((_gLedPara| (0+256)+56)))& (0+255)
 11463  0690  2768  3186         	fcall	PL80	;call to abstracted procedure
 11464  0692                     l616:	
 11465                           
 11466                           ;led.c: 40: }
 11467                           ;led.c: 41: if (gLedPara.mNightBright[i] > 1000) {
 11468  0692  355B               	lslf	Led_InitPara@i,w
 11469  0693  3E64               	addlw	(low ((_gLedPara| (0+256)+68)))& (0+255)
 11470  0694  275E  3186         	fcall	PL16	;call to abstracted procedure
 11471  0696  1903               	skipnz
 11472  0697  0255               	subwf	??_Led_InitPara,w
 11473  0698  1C03               	skipc
 11474  0699  2E9E               	goto	l6948
 11475                           
 11476                           ;led.c: 42: gLedPara.mNightBright[i] = 1000;
 11477  069A  276E  3186         	fcall	PL82	;call to abstracted procedure
 11478  069C  3E64               	addlw	(low ((_gLedPara| (0+256)+68)))& (0+255)
 11479  069D  2768               	fcall	PL80	;call to abstracted procedure
 11480  069E                     l6948:	
 11481                           
 11482                           ;led.c: 43: }
 11483                           ;led.c: 44: for (uint8_t j = 0; j < 4; j++) {
 11484  069E  01DA               	clrf	Led_InitPara@j
 11485  069F                     l6954:	
 11486                           
 11487                           ;led.c: 45: if (gLedPara.mCustom[j][i] > 1000) {
 11488  069F  085B               	movf	Led_InitPara@i,w
 11489  06A0  00D5               	movwf	??_Led_InitPara
 11490  06A1  302E               	movlw	(low ((_gLedPara| (0+256)+14)))& (0+255)
 11491  06A2  35D5               	lslf	??_Led_InitPara,f
 11492  06A3  0755               	addwf	??_Led_InitPara,w
 11493  06A4  00D6               	movwf	??_Led_InitPara+1
 11494  06A5  300A               	movlw	10
 11495  06A6  00CE               	movwf	___bmul@multiplicand
 11496  06A7  085A               	movf	Led_InitPara@j,w
 11497  06A8  318D  2505  3186   	fcall	___bmul
 11498  06AB  0756               	addwf	??_Led_InitPara+1,w
 11499  06AC  00D7               	movwf	??_Led_InitPara+2
 11500  06AD  0086               	movwf	6
 11501  06AE  3001               	movlw	1	; select bank2/3
 11502  06AF  0087               	movwf	7
 11503  06B0  3F40               	moviw [0]fsr1
 11504  06B1  00D8               	movwf	??_Led_InitPara+3
 11505  06B2  3F41               	moviw [1]fsr1
 11506  06B3  00D9               	movwf	??_Led_InitPara+4
 11507  06B4  3003               	movlw	3
 11508  06B5  0259               	subwf	??_Led_InitPara+4,w
 11509  06B6  30E9               	movlw	233
 11510  06B7  1903               	skipnz
 11511  06B8  0258               	subwf	??_Led_InitPara+3,w
 11512  06B9  1C03               	skipc
 11513  06BA  2ED4               	goto	l6958
 11514                           
 11515                           ;led.c: 46: gLedPara.mCustom[j][i] = 1000;
 11516  06BB  30E8               	movlw	232
 11517  06BC  00D5               	movwf	??_Led_InitPara
 11518  06BD  3003               	movlw	3
 11519  06BE  00D6               	movwf	??_Led_InitPara+1
 11520  06BF  085B               	movf	Led_InitPara@i,w
 11521  06C0  00D7               	movwf	??_Led_InitPara+2
 11522  06C1  302E               	movlw	(low ((_gLedPara| (0+256)+14)))& (0+255)
 11523  06C2  35D7               	lslf	??_Led_InitPara+2,f
 11524  06C3  0757               	addwf	??_Led_InitPara+2,w
 11525  06C4  00D8               	movwf	??_Led_InitPara+3
 11526  06C5  300A               	movlw	10
 11527  06C6  00CE               	movwf	___bmul@multiplicand
 11528  06C7  085A               	movf	Led_InitPara@j,w
 11529  06C8  318D  2505  3186   	fcall	___bmul
 11530  06CB  0758               	addwf	??_Led_InitPara+3,w
 11531  06CC  00D9               	movwf	??_Led_InitPara+4
 11532  06CD  0086               	movwf	6
 11533  06CE  3001               	movlw	1	; select bank2/3
 11534  06CF  0087               	movwf	7
 11535  06D0  0855               	movf	??_Led_InitPara,w
 11536  06D1  3FC0               	movwi [0]fsr1
 11537  06D2  0856               	movf	??_Led_InitPara+1,w
 11538  06D3  3FC1               	movwi [1]fsr1
 11539  06D4                     l6958:	
 11540  06D4  3004               	movlw	4
 11541  06D5  0ADA               	incf	Led_InitPara@j,f
 11542  06D6  025A               	subwf	Led_InitPara@j,w
 11543  06D7  1C03               	skipc
 11544  06D8  2E9F               	goto	l6954
 11545                           
 11546                           ;led.c: 47: }
 11547                           ;led.c: 48: }
 11548                           ;led.c: 49: if (gLedPara.mMsc > 8) {
 11549  06D9  0022               	movlb	2	; select bank2
 11550  06DA  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 11551  06DB  0020               	movlb	0	; select bank0
 11552  06DC  00D5               	movwf	??_Led_InitPara
 11553  06DD  0CD5               	rrf	??_Led_InitPara,f
 11554  06DE  0C55               	rrf	??_Led_InitPara,w
 11555  06DF  390F               	andlw	15
 11556  06E0  00D6               	movwf	??_Led_InitPara+1
 11557  06E1  3009               	movlw	9
 11558  06E2  0256               	subwf	??_Led_InitPara+1,w
 11559  06E3  1C03               	skipc
 11560  06E4  2EE8               	goto	l6966
 11561                           
 11562                           ;led.c: 50: gLedPara.mMsc = 0;
 11563  06E5  3087               	movlw	-121
 11564  06E6  0022               	movlb	2	; select bank2
 11565  06E7  05A0               	andwf	_gLedPara^(0+256),f	;volatile
 11566  06E8                     l6966:	
 11567                           
 11568                           ;led.c: 51: }
 11569                           ;led.c: 52: if (gLedPara.mSunrise > 1439) {
 11570  06E8  3005               	movlw	5
 11571  06E9  0022               	movlb	2	; select bank2
 11572  06EA  0257               	subwf	((_gLedPara+1)^(0+256)+54),w	;volatile
 11573  06EB  30A0               	movlw	160
 11574  06EC  1903               	skipnz
 11575  06ED  0256               	subwf	(_gLedPara^(0+256)+54),w	;volatile
 11576  06EE  1C03               	skipc
 11577  06EF  2EF2               	goto	l6970
 11578                           
 11579                           ;led.c: 53: gLedPara.mSunrise = 0;
 11580  06F0  01D6               	clrf	(_gLedPara^(0+256)+54)	;volatile
 11581  06F1  01D7               	clrf	((_gLedPara+1)^(0+256)+54)	;volatile
 11582  06F2                     l6970:	
 11583                           
 11584                           ;led.c: 54: }
 11585                           ;led.c: 55: if (gLedPara.mSunset > 1439) {
 11586  06F2  3005               	movlw	5
 11587  06F3  0263               	subwf	((_gLedPara+1)^(0+256)+66),w	;volatile
 11588  06F4  30A0               	movlw	160
 11589  06F5  1903               	skipnz
 11590  06F6  0262               	subwf	(_gLedPara^(0+256)+66),w	;volatile
 11591  06F7  1C03               	skipc
 11592  06F8  2EFB               	goto	l6974
 11593                           
 11594                           ;led.c: 56: gLedPara.mSunset = 0;
 11595  06F9  01E2               	clrf	(_gLedPara^(0+256)+66)	;volatile
 11596  06FA  01E3               	clrf	((_gLedPara+1)^(0+256)+66)	;volatile
 11597  06FB                     l6974:	
 11598                           
 11599                           ;led.c: 57: }
 11600                           ;led.c: 58: if (gLedPara.mVolume > 4) {
 11601  06FB  3005               	movlw	5
 11602  06FC  0223               	subwf	(_gLedPara^(0+256)+3),w	;volatile
 11603  06FD  1C03               	skipc
 11604  06FE  2F01               	goto	l6978
 11605                           
 11606                           ;led.c: 59: gLedPara.mVolume = 4;
 11607  06FF  3004               	movlw	4
 11608  0700  00A3               	movwf	(_gLedPara^(0+256)+3)	;volatile
 11609  0701                     l6978:	
 11610  0701  0020               	movlb	0	; select bank0
 11611  0702  3005               	movlw	5
 11612  0703  0ADB               	incf	Led_InitPara@i,f
 11613  0704  025B               	subwf	Led_InitPara@i,w
 11614  0705  1803               	btfsc	3,0
 11615  0706  0008               	return
 11616  0707  2E78               	goto	l6940
 11617  0708                     __end_of_Led_InitPara:	
 11618  0708                     __ptext25:	
 11619 ;; *************** function _DATAEE_ReadBuffer *****************
 11620 ;; Defined at:
 11621 ;;		line 55 in file "driver/src/eeprom.c"
 11622 ;; Parameters:    Size  Location     Type
 11623 ;;  addr            2   16[BANK0 ] unsigned int 
 11624 ;;  buf             1   18[BANK0 ] PTR unsigned char 
 11625 ;;		 -> gLedPara(78), 
 11626 ;;  len             1   19[BANK0 ] unsigned char 
 11627 ;; Auto vars:     Size  Location     Type
 11628 ;;  i               1   20[BANK0 ] unsigned char 
 11629 ;; Return value:  Size  Location     Type
 11630 ;;                  1    wreg      void 
 11631 ;; Registers used:
 11632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11633 ;; Tracked objects:
 11634 ;;		On entry : 1F/0
 11635 ;;		On exit  : 1F/0
 11636 ;;		Unchanged: 0/0
 11637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11638 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;Total ram usage:        5 bytes
 11643 ;; Hardware stack levels used:    1
 11644 ;; Hardware stack levels required when called:    8
 11645 ;; This function calls:
 11646 ;;		_DATAEE_ReadByte
 11647 ;; This function is called by:
 11648 ;;		_Led_InitPara
 11649 ;; This function uses a non-reentrant model
 11650 ;;
 11651                           
 11652                           
 11653                           ;psect for function _DATAEE_ReadBuffer
 11654  0708                     _DATAEE_ReadBuffer:	
 11655                           
 11656                           ;eeprom.c: 57: for ( uint8_t i = len; i != 0; i-- )
 11657                           
 11658                           ;incstack = 0
 11659                           ; Regs used in _DATAEE_ReadBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11660  0708  0853               	movf	DATAEE_ReadBuffer@len,w
 11661  0709  00D4               	movwf	DATAEE_ReadBuffer@i
 11662  070A                     l4766:	
 11663  070A  0854               	movf	DATAEE_ReadBuffer@i,w
 11664  070B  1903               	btfsc	3,2
 11665  070C  0008               	return
 11666                           
 11667                           ;eeprom.c: 58: {
 11668                           ;eeprom.c: 59: *buf++ = DATAEE_ReadByte ( addr++ );
 11669  070D  0852               	movf	DATAEE_ReadBuffer@buf,w
 11670  070E  0086               	movwf	6
 11671  070F  3001               	movlw	1	; select bank2/3
 11672  0710  0087               	movwf	7
 11673  0711  0851               	movf	DATAEE_ReadBuffer@addr+1,w
 11674  0712  00CF               	movwf	DATAEE_ReadByte@addr+1
 11675  0713  0850               	movf	DATAEE_ReadBuffer@addr,w
 11676  0714  00CE               	movwf	DATAEE_ReadByte@addr
 11677  0715  271F  3186         	fcall	_DATAEE_ReadByte
 11678  0717  0081               	movwf	1
 11679  0718  0020               	movlb	0	; select bank0
 11680  0719  0AD0               	incf	DATAEE_ReadBuffer@addr,f
 11681  071A  1903               	skipnz
 11682  071B  0AD1               	incf	DATAEE_ReadBuffer@addr+1,f
 11683  071C  0AD2               	incf	DATAEE_ReadBuffer@buf,f
 11684  071D  03D4               	decf	DATAEE_ReadBuffer@i,f
 11685  071E  2F0A               	goto	l4766
 11686  071F                     __end_of_DATAEE_ReadBuffer:	
 11687  071F                     __ptext26:	
 11688 ;; *************** function _DATAEE_ReadByte *****************
 11689 ;; Defined at:
 11690 ;;		line 23 in file "driver/src/eeprom.c"
 11691 ;; Parameters:    Size  Location     Type
 11692 ;;  addr            2   14[BANK0 ] unsigned int 
 11693 ;; Auto vars:     Size  Location     Type
 11694 ;;		None
 11695 ;; Return value:  Size  Location     Type
 11696 ;;                  1    wreg      unsigned char 
 11697 ;; Registers used:
 11698 ;;		wreg
 11699 ;; Tracked objects:
 11700 ;;		On entry : 1F/0
 11701 ;;		On exit  : 1F/11
 11702 ;;		Unchanged: 0/0
 11703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11704 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11707 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11708 ;;Total ram usage:        2 bytes
 11709 ;; Hardware stack levels used:    1
 11710 ;; Hardware stack levels required when called:    7
 11711 ;; This function calls:
 11712 ;;		Nothing
 11713 ;; This function is called by:
 11714 ;;		_DATAEE_ReadBuffer
 11715 ;; This function uses a non-reentrant model
 11716 ;;
 11717                           
 11718                           
 11719                           ;psect for function _DATAEE_ReadByte
 11720  071F                     _DATAEE_ReadByte:	
 11721                           
 11722                           ;eeprom.c: 25: NVMADRH = addr >> 8;
 11723                           
 11724                           ;incstack = 0
 11725                           ; Regs used in _DATAEE_ReadByte: [wreg]
 11726  071F  084F               	movf	DATAEE_ReadByte@addr+1,w
 11727  0720  0031               	movlb	17	; select bank17
 11728  0721  0092               	movwf	18	;volatile
 11729                           
 11730                           ;eeprom.c: 26: NVMADRL = addr & 0xFF;
 11731  0722  0020               	movlb	0	; select bank0
 11732  0723  084E               	movf	DATAEE_ReadByte@addr,w
 11733  0724  0031               	movlb	17	; select bank17
 11734  0725  0091               	movwf	17	;volatile
 11735                           
 11736                           ;eeprom.c: 27: NVMCON1bits.NVMREGS = 1;
 11737  0726  1715               	bsf	21,6	;volsfr
 11738                           
 11739                           ;eeprom.c: 28: NVMCON1bits.RD = 1;
 11740  0727  1415               	bsf	21,0	;volsfr
 11741                           
 11742                           ;eeprom.c: 29: __nop();
 11743  0728  0000               	nop
 11744                           
 11745                           ;eeprom.c: 30: __nop();
 11746  0729  0000               	nop
 11747                           
 11748                           ;eeprom.c: 32: return ( NVMDATL );
 11749  072A  0031               	movlb	17	; select bank17
 11750  072B  0813               	movf	19,w	;volatile
 11751  072C  0008               	return
 11752  072D                     __end_of_DATAEE_ReadByte:	
 11753  072D                     __ptext24:	
 11754 ;; *************** function _Led_FirstPowerUp *****************
 11755 ;; Defined at:
 11756 ;;		line 17 in file "user/src/led.c"
 11757 ;; Parameters:    Size  Location     Type
 11758 ;;		None
 11759 ;; Auto vars:     Size  Location     Type
 11760 ;;  i               1   16[BANK0 ] unsigned char 
 11761 ;; Return value:  Size  Location     Type
 11762 ;;                  1    wreg      void 
 11763 ;; Registers used:
 11764 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11765 ;; Tracked objects:
 11766 ;;		On entry : 1F/1
 11767 ;;		On exit  : 1F/2
 11768 ;;		Unchanged: 0/0
 11769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;Total ram usage:        3 bytes
 11775 ;; Hardware stack levels used:    1
 11776 ;; Hardware stack levels required when called:    7
 11777 ;; This function calls:
 11778 ;;		Nothing
 11779 ;; This function is called by:
 11780 ;;		_Led_InitPara
 11781 ;; This function uses a non-reentrant model
 11782 ;;
 11783                           
 11784                           
 11785                           ;psect for function _Led_FirstPowerUp
 11786  072D                     _Led_FirstPowerUp:	
 11787                           
 11788                           ;led.c: 19: if(gLedPara.mFirstPowerUp != 0x55){
 11789                           
 11790                           ;incstack = 0
 11791                           ; Regs used in _Led_FirstPowerUp: [wreg+fsr1l+fsr1h+status,2+status,0]
 11792  072D  3055               	movlw	85
 11793  072E  0022               	movlb	2	; select bank2
 11794  072F  0621               	xorwf	(_gLedPara^(0+256)+1),w	;volatile
 11795  0730  0422               	iorwf	((_gLedPara+1)^(0+256)+1),w	;volatile
 11796  0731  1903               	btfsc	3,2
 11797  0732  0008               	return
 11798                           
 11799                           ;led.c: 20: gLedPara.mFirstPowerUp = 0x55;
 11800  0733  3055               	movlw	85
 11801  0734  00A1               	movwf	(_gLedPara^(0+256)+1)	;volatile
 11802  0735  01A2               	clrf	((_gLedPara+1)^(0+256)+1)	;volatile
 11803                           
 11804                           ;led.c: 21: for (uint8_t i = 0; i < 5; i++){
 11805  0736  0020               	movlb	0	; select bank0
 11806  0737  01D0               	clrf	Led_FirstPowerUp@i
 11807  0738                     l4932:	
 11808                           
 11809                           ;led.c: 22: gLedPara.mDayBright[i] = 1000;
 11810  0738  30E8               	movlw	232
 11811  0739  00CE               	movwf	??_Led_FirstPowerUp
 11812  073A  3003               	movlw	3
 11813  073B  00CF               	movwf	??_Led_FirstPowerUp+1
 11814  073C  3550               	lslf	Led_FirstPowerUp@i,w
 11815  073D  3E58               	addlw	(low ((_gLedPara| (0+256)+56)))& (0+255)
 11816  073E  0086               	movwf	6
 11817  073F  3001               	movlw	1	; select bank2/3
 11818  0740  0087               	movwf	7
 11819  0741  084E               	movf	??_Led_FirstPowerUp,w
 11820  0742  3FC0               	movwi [0]fsr1
 11821  0743  084F               	movf	??_Led_FirstPowerUp+1,w
 11822  0744  3FC1               	movwi [1]fsr1
 11823                           
 11824                           ;led.c: 23: gLedPara.mNightBright[i] = 0;
 11825  0745  3550               	lslf	Led_FirstPowerUp@i,w
 11826  0746  3E64               	addlw	(low ((_gLedPara| (0+256)+68)))& (0+255)
 11827  0747  0086               	movwf	6
 11828  0748  3000               	movlw	0
 11829  0749  3FC0               	movwi [0]fsr1
 11830  074A  3FC1               	movwi [1]fsr1
 11831  074B  3005               	movlw	5
 11832  074C  0AD0               	incf	Led_FirstPowerUp@i,f
 11833  074D  0250               	subwf	Led_FirstPowerUp@i,w
 11834  074E  1C03               	skipc
 11835  074F  2F38               	goto	l4932
 11836                           
 11837                           ;led.c: 24: }
 11838                           ;led.c: 25: gLedPara.mSunrise = 390;
 11839  0750  3001               	movlw	1
 11840  0751  0022               	movlb	2	; select bank2
 11841  0752  00D7               	movwf	((_gLedPara+1)^(0+256)+54)	;volatile
 11842  0753  3086               	movlw	134
 11843  0754  00D6               	movwf	(_gLedPara^(0+256)+54)	;volatile
 11844                           
 11845                           ;led.c: 26: gLedPara.mSunset = 1110;
 11846  0755  3004               	movlw	4
 11847  0756  00E3               	movwf	((_gLedPara+1)^(0+256)+66)	;volatile
 11848  0757  3056               	movlw	86
 11849  0758  00E2               	movwf	(_gLedPara^(0+256)+66)	;volatile
 11850                           
 11851                           ;led.c: 27: gLedPara.mNightBright[2] = 1000;
 11852  0759  3003               	movlw	3
 11853  075A  00E9               	movwf	((_gLedPara+1)^(0+256)+72)	;volatile
 11854  075B  30E8               	movlw	232
 11855  075C  00E8               	movwf	(_gLedPara^(0+256)+72)	;volatile
 11856  075D  0008               	return
 11857  075E                     __end_of_Led_FirstPowerUp:	
 11858  075E                     PL16:	
 11859  075E  0086               	movwf	6
 11860  075F  3001               	movlw	1	; select bank2/3
 11861  0760  0087               	movwf	7
 11862  0761  3F40               	moviw [0]fsr1
 11863  0762  00D5               	movwf	??_Led_InitPara
 11864  0763  3F41               	moviw [1]fsr1
 11865  0764  00D6               	movwf	??_Led_InitPara+1
 11866  0765  3003               	movlw	3
 11867  0766  0256               	subwf	??_Led_InitPara+1,w
 11868  0767  34E9               	retlw	233
 11869  0768                     __end_ofPL16:	
 11870  0768                     PL80:	
 11871  0768  0086               	movwf	6
 11872  0769  0855               	movf	??_Led_InitPara,w
 11873  076A  3FC0               	movwi [0]fsr1
 11874  076B  0856               	movf	??_Led_InitPara+1,w
 11875  076C  3FC1               	movwi [1]fsr1
 11876  076D  0008               	return
 11877  076E                     __end_ofPL80:	
 11878  076E                     PL82:	
 11879  076E  30E8               	movlw	232
 11880  076F  00D5               	movwf	??_Led_InitPara
 11881  0770  3003               	movlw	3
 11882  0771  00D6               	movwf	??_Led_InitPara+1
 11883  0772  355B               	lslf	Led_InitPara@i,w
 11884  0773  0008               	return
 11885  0774                     __end_ofPL82:	
 11886                           
 11887                           	psect	text54
 11888  14E0                     __ptext54:	
 11889 ;; *************** function _PWM4_LoadDutyValue *****************
 11890 ;; Defined at:
 11891 ;;		line 49 in file "driver/src/pwm.c"
 11892 ;; Parameters:    Size  Location     Type
 11893 ;;  dutyValue       2   14[BANK0 ] unsigned int 
 11894 ;; Auto vars:     Size  Location     Type
 11895 ;;		None
 11896 ;; Return value:  Size  Location     Type
 11897 ;;                  1    wreg      void 
 11898 ;; Registers used:
 11899 ;;		wreg
 11900 ;; Tracked objects:
 11901 ;;		On entry : 10/0
 11902 ;;		On exit  : 1F/6
 11903 ;;		Unchanged: 0/0
 11904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11905 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11909 ;;Total ram usage:        2 bytes
 11910 ;; Hardware stack levels used:    1
 11911 ;; Hardware stack levels required when called:    7
 11912 ;; This function calls:
 11913 ;;		Nothing
 11914 ;; This function is called by:
 11915 ;;		_Led_UpdateBright
 11916 ;;		i1_Led_UpdateBright
 11917 ;;		_Led_Ramp
 11918 ;; This function uses a non-reentrant model
 11919 ;;
 11920                           
 11921                           
 11922                           ;psect for function _PWM4_LoadDutyValue
 11923  14E0                     _PWM4_LoadDutyValue:	
 11924                           
 11925                           ;Skip over the trampoline to the duplicate function for level 1
 11926  14E0  1C7E               	btfss	126,0
 11927  14E1  2CE3               	goto	l5848
 11928  14E2  2CEC               	ljmp	i1l3800
 11929  14E3                     _PWM4_LoadDutyValue$intlevel0:	
 11930  14E3                     l5848:	
 11931                           ;incstack = 0
 11932                           ; Regs used in _PWM4_LoadDutyValue: [wreg]
 11933                           
 11934                           
 11935                           ;pwm.c: 51: CCPR4 = dutyValue;
 11936  14E3  0020               	movlb	0	; select bank0
 11937  14E4  084F               	movf	PWM4_LoadDutyValue@dutyValue+1,w
 11938  14E5  0026               	movlb	6	; select bank6
 11939  14E6  0096               	movwf	22	;volatile
 11940  14E7  0020               	movlb	0	; select bank0
 11941  14E8  084E               	movf	PWM4_LoadDutyValue@dutyValue,w
 11942  14E9  0026               	movlb	6	; select bank6
 11943  14EA  0095               	movwf	21	;volatile
 11944  14EB  0008               	return
 11945  14EC                     __end_of_PWM4_LoadDutyValue:	
 11946  14EC                     __ptext87:	
 11947 ;; *************** function i1_PWM4_LoadDutyValue *****************
 11948 ;; Defined at:
 11949 ;;		line 49 in file "driver/src/pwm.c"
 11950 ;; Parameters:    Size  Location     Type
 11951 ;;  dutyValue       2    0[COMMON] unsigned int 
 11952 ;; Auto vars:     Size  Location     Type
 11953 ;;		None
 11954 ;; Return value:  Size  Location     Type
 11955 ;;                  1    wreg      void 
 11956 ;; Registers used:
 11957 ;;		wreg
 11958 ;; Tracked objects:
 11959 ;;		On entry : 0/0
 11960 ;;		On exit  : 1F/6
 11961 ;;		Unchanged: 0/0
 11962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11963 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11966 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11967 ;;Total ram usage:        2 bytes
 11968 ;; Hardware stack levels used:    1
 11969 ;; This function calls:
 11970 ;;		Nothing
 11971 ;; This function is called by:
 11972 ;; This function uses a non-reentrant model
 11973 ;;
 11974                           
 11975                           
 11976                           ;psect for function i1_PWM4_LoadDutyValue
 11977  14EC                     i1_PWM4_LoadDutyValue:	
 11978  14EC                     i1l3800:	
 11979                           ;incstack = 0
 11980                           ; Regs used in i1_PWM4_LoadDutyValue: [wreg]
 11981                           
 11982                           
 11983                           ;pwm.c: 51: CCPR4 = dutyValue;
 11984  14EC  0871               	movf	i1PWM4_LoadDutyValue@dutyValue+1,w
 11985  14ED  0026               	movlb	6	; select bank6
 11986  14EE  0096               	movwf	22	;volatile
 11987  14EF  0870               	movf	i1PWM4_LoadDutyValue@dutyValue,w
 11988  14F0  0095               	movwf	21	;volatile
 11989  14F1  0008               	return
 11990  14F2                     __end_ofi1_PWM4_LoadDutyValue:	
 11991                           
 11992                           	psect	text55
 11993  14CE                     __ptext55:	
 11994 ;; *************** function _PWM3_LoadDutyValue *****************
 11995 ;; Defined at:
 11996 ;;		line 37 in file "driver/src/pwm.c"
 11997 ;; Parameters:    Size  Location     Type
 11998 ;;  dutyValue       2   14[BANK0 ] unsigned int 
 11999 ;; Auto vars:     Size  Location     Type
 12000 ;;		None
 12001 ;; Return value:  Size  Location     Type
 12002 ;;                  1    wreg      void 
 12003 ;; Registers used:
 12004 ;;		wreg
 12005 ;; Tracked objects:
 12006 ;;		On entry : 10/0
 12007 ;;		On exit  : 1F/6
 12008 ;;		Unchanged: 0/0
 12009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12010 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12014 ;;Total ram usage:        2 bytes
 12015 ;; Hardware stack levels used:    1
 12016 ;; Hardware stack levels required when called:    7
 12017 ;; This function calls:
 12018 ;;		Nothing
 12019 ;; This function is called by:
 12020 ;;		_Led_UpdateBright
 12021 ;;		i1_Led_UpdateBright
 12022 ;;		_Led_Ramp
 12023 ;; This function uses a non-reentrant model
 12024 ;;
 12025                           
 12026                           
 12027                           ;psect for function _PWM3_LoadDutyValue
 12028  14CE                     _PWM3_LoadDutyValue:	
 12029                           
 12030                           ;Skip over the trampoline to the duplicate function for level 1
 12031  14CE  1C7E               	btfss	126,0
 12032  14CF  2CD1               	goto	l5846
 12033  14D0  2CDA               	ljmp	i1l3798
 12034  14D1                     _PWM3_LoadDutyValue$intlevel0:	
 12035  14D1                     l5846:	
 12036                           ;incstack = 0
 12037                           ; Regs used in _PWM3_LoadDutyValue: [wreg]
 12038                           
 12039                           
 12040                           ;pwm.c: 39: CCPR3 = dutyValue;
 12041  14D1  0020               	movlb	0	; select bank0
 12042  14D2  084F               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 12043  14D3  0026               	movlb	6	; select bank6
 12044  14D4  0092               	movwf	18	;volatile
 12045  14D5  0020               	movlb	0	; select bank0
 12046  14D6  084E               	movf	PWM3_LoadDutyValue@dutyValue,w
 12047  14D7  0026               	movlb	6	; select bank6
 12048  14D8  0091               	movwf	17	;volatile
 12049  14D9  0008               	return
 12050  14DA                     __end_of_PWM3_LoadDutyValue:	
 12051  14DA                     __ptext88:	
 12052 ;; *************** function i1_PWM3_LoadDutyValue *****************
 12053 ;; Defined at:
 12054 ;;		line 37 in file "driver/src/pwm.c"
 12055 ;; Parameters:    Size  Location     Type
 12056 ;;  dutyValue       2    0[COMMON] unsigned int 
 12057 ;; Auto vars:     Size  Location     Type
 12058 ;;		None
 12059 ;; Return value:  Size  Location     Type
 12060 ;;                  1    wreg      void 
 12061 ;; Registers used:
 12062 ;;		wreg
 12063 ;; Tracked objects:
 12064 ;;		On entry : 0/0
 12065 ;;		On exit  : 1F/6
 12066 ;;		Unchanged: 0/0
 12067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12068 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12071 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12072 ;;Total ram usage:        2 bytes
 12073 ;; Hardware stack levels used:    1
 12074 ;; This function calls:
 12075 ;;		Nothing
 12076 ;; This function is called by:
 12077 ;; This function uses a non-reentrant model
 12078 ;;
 12079                           
 12080                           
 12081                           ;psect for function i1_PWM3_LoadDutyValue
 12082  14DA                     i1_PWM3_LoadDutyValue:	
 12083  14DA                     i1l3798:	
 12084                           ;incstack = 0
 12085                           ; Regs used in i1_PWM3_LoadDutyValue: [wreg]
 12086                           
 12087                           
 12088                           ;pwm.c: 39: CCPR3 = dutyValue;
 12089  14DA  0871               	movf	i1PWM3_LoadDutyValue@dutyValue+1,w
 12090  14DB  0026               	movlb	6	; select bank6
 12091  14DC  0092               	movwf	18	;volatile
 12092  14DD  0870               	movf	i1PWM3_LoadDutyValue@dutyValue,w
 12093  14DE  0091               	movwf	17	;volatile
 12094  14DF  0008               	return
 12095  14E0                     __end_ofi1_PWM3_LoadDutyValue:	
 12096                           
 12097                           	psect	text56
 12098  14BC                     __ptext56:	
 12099 ;; *************** function _PWM2_LoadDutyValue *****************
 12100 ;; Defined at:
 12101 ;;		line 25 in file "driver/src/pwm.c"
 12102 ;; Parameters:    Size  Location     Type
 12103 ;;  dutyValue       2   14[BANK0 ] unsigned int 
 12104 ;; Auto vars:     Size  Location     Type
 12105 ;;		None
 12106 ;; Return value:  Size  Location     Type
 12107 ;;                  1    wreg      void 
 12108 ;; Registers used:
 12109 ;;		wreg
 12110 ;; Tracked objects:
 12111 ;;		On entry : 10/0
 12112 ;;		On exit  : 1F/5
 12113 ;;		Unchanged: 0/0
 12114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12115 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12118 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12119 ;;Total ram usage:        2 bytes
 12120 ;; Hardware stack levels used:    1
 12121 ;; Hardware stack levels required when called:    7
 12122 ;; This function calls:
 12123 ;;		Nothing
 12124 ;; This function is called by:
 12125 ;;		_Led_UpdateBright
 12126 ;;		i1_Led_UpdateBright
 12127 ;;		_Led_Ramp
 12128 ;; This function uses a non-reentrant model
 12129 ;;
 12130                           
 12131                           
 12132                           ;psect for function _PWM2_LoadDutyValue
 12133  14BC                     _PWM2_LoadDutyValue:	
 12134                           
 12135                           ;Skip over the trampoline to the duplicate function for level 1
 12136  14BC  1C7E               	btfss	126,0
 12137  14BD  2CBF               	goto	l5844
 12138  14BE  2CC8               	ljmp	i1l3796
 12139  14BF                     _PWM2_LoadDutyValue$intlevel0:	
 12140  14BF                     l5844:	
 12141                           ;incstack = 0
 12142                           ; Regs used in _PWM2_LoadDutyValue: [wreg]
 12143                           
 12144                           
 12145                           ;pwm.c: 27: CCPR2 = dutyValue;
 12146  14BF  0020               	movlb	0	; select bank0
 12147  14C0  084F               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 12148  14C1  0025               	movlb	5	; select bank5
 12149  14C2  0096               	movwf	22	;volatile
 12150  14C3  0020               	movlb	0	; select bank0
 12151  14C4  084E               	movf	PWM2_LoadDutyValue@dutyValue,w
 12152  14C5  0025               	movlb	5	; select bank5
 12153  14C6  0095               	movwf	21	;volatile
 12154  14C7  0008               	return
 12155  14C8                     __end_of_PWM2_LoadDutyValue:	
 12156  14C8                     __ptext89:	
 12157 ;; *************** function i1_PWM2_LoadDutyValue *****************
 12158 ;; Defined at:
 12159 ;;		line 25 in file "driver/src/pwm.c"
 12160 ;; Parameters:    Size  Location     Type
 12161 ;;  dutyValue       2    0[COMMON] unsigned int 
 12162 ;; Auto vars:     Size  Location     Type
 12163 ;;		None
 12164 ;; Return value:  Size  Location     Type
 12165 ;;                  1    wreg      void 
 12166 ;; Registers used:
 12167 ;;		wreg
 12168 ;; Tracked objects:
 12169 ;;		On entry : 0/0
 12170 ;;		On exit  : 1F/5
 12171 ;;		Unchanged: 0/0
 12172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12173 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;Total ram usage:        2 bytes
 12178 ;; Hardware stack levels used:    1
 12179 ;; This function calls:
 12180 ;;		Nothing
 12181 ;; This function is called by:
 12182 ;; This function uses a non-reentrant model
 12183 ;;
 12184                           
 12185                           
 12186                           ;psect for function i1_PWM2_LoadDutyValue
 12187  14C8                     i1_PWM2_LoadDutyValue:	
 12188  14C8                     i1l3796:	
 12189                           ;incstack = 0
 12190                           ; Regs used in i1_PWM2_LoadDutyValue: [wreg]
 12191                           
 12192                           
 12193                           ;pwm.c: 27: CCPR2 = dutyValue;
 12194  14C8  0871               	movf	i1PWM2_LoadDutyValue@dutyValue+1,w
 12195  14C9  0025               	movlb	5	; select bank5
 12196  14CA  0096               	movwf	22	;volatile
 12197  14CB  0870               	movf	i1PWM2_LoadDutyValue@dutyValue,w
 12198  14CC  0095               	movwf	21	;volatile
 12199  14CD  0008               	return
 12200  14CE                     __end_ofi1_PWM2_LoadDutyValue:	
 12201                           
 12202                           	psect	text57
 12203  14AA                     __ptext57:	
 12204 ;; *************** function _PWM1_LoadDutyValue *****************
 12205 ;; Defined at:
 12206 ;;		line 13 in file "driver/src/pwm.c"
 12207 ;; Parameters:    Size  Location     Type
 12208 ;;  dutyValue       2   14[BANK0 ] unsigned int 
 12209 ;; Auto vars:     Size  Location     Type
 12210 ;;		None
 12211 ;; Return value:  Size  Location     Type
 12212 ;;                  1    wreg      void 
 12213 ;; Registers used:
 12214 ;;		wreg
 12215 ;; Tracked objects:
 12216 ;;		On entry : 10/0
 12217 ;;		On exit  : 1F/5
 12218 ;;		Unchanged: 0/0
 12219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12220 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12223 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12224 ;;Total ram usage:        2 bytes
 12225 ;; Hardware stack levels used:    1
 12226 ;; Hardware stack levels required when called:    7
 12227 ;; This function calls:
 12228 ;;		Nothing
 12229 ;; This function is called by:
 12230 ;;		_Led_UpdateBright
 12231 ;;		i1_Led_UpdateBright
 12232 ;;		_Led_Ramp
 12233 ;; This function uses a non-reentrant model
 12234 ;;
 12235                           
 12236                           
 12237                           ;psect for function _PWM1_LoadDutyValue
 12238  14AA                     _PWM1_LoadDutyValue:	
 12239                           
 12240                           ;Skip over the trampoline to the duplicate function for level 1
 12241  14AA  1C7E               	btfss	126,0
 12242  14AB  2CAD               	goto	l5842
 12243  14AC  2CB6               	ljmp	i1l3794
 12244  14AD                     _PWM1_LoadDutyValue$intlevel0:	
 12245  14AD                     l5842:	
 12246                           ;incstack = 0
 12247                           ; Regs used in _PWM1_LoadDutyValue: [wreg]
 12248                           
 12249                           
 12250                           ;pwm.c: 15: CCPR1 = dutyValue;
 12251  14AD  0020               	movlb	0	; select bank0
 12252  14AE  084F               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 12253  14AF  0025               	movlb	5	; select bank5
 12254  14B0  0092               	movwf	18	;volatile
 12255  14B1  0020               	movlb	0	; select bank0
 12256  14B2  084E               	movf	PWM1_LoadDutyValue@dutyValue,w
 12257  14B3  0025               	movlb	5	; select bank5
 12258  14B4  0091               	movwf	17	;volatile
 12259  14B5  0008               	return
 12260  14B6                     __end_of_PWM1_LoadDutyValue:	
 12261  14B6                     __ptext90:	
 12262 ;; *************** function i1_PWM1_LoadDutyValue *****************
 12263 ;; Defined at:
 12264 ;;		line 13 in file "driver/src/pwm.c"
 12265 ;; Parameters:    Size  Location     Type
 12266 ;;  dutyValue       2    0[COMMON] unsigned int 
 12267 ;; Auto vars:     Size  Location     Type
 12268 ;;		None
 12269 ;; Return value:  Size  Location     Type
 12270 ;;                  1    wreg      void 
 12271 ;; Registers used:
 12272 ;;		wreg
 12273 ;; Tracked objects:
 12274 ;;		On entry : 0/0
 12275 ;;		On exit  : 1F/5
 12276 ;;		Unchanged: 0/0
 12277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12278 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12281 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12282 ;;Total ram usage:        2 bytes
 12283 ;; Hardware stack levels used:    1
 12284 ;; This function calls:
 12285 ;;		Nothing
 12286 ;; This function is called by:
 12287 ;; This function uses a non-reentrant model
 12288 ;;
 12289                           
 12290                           
 12291                           ;psect for function i1_PWM1_LoadDutyValue
 12292  14B6                     i1_PWM1_LoadDutyValue:	
 12293  14B6                     i1l3794:	
 12294                           ;incstack = 0
 12295                           ; Regs used in i1_PWM1_LoadDutyValue: [wreg]
 12296                           
 12297                           
 12298                           ;pwm.c: 15: CCPR1 = dutyValue;
 12299  14B6  0871               	movf	i1PWM1_LoadDutyValue@dutyValue+1,w
 12300  14B7  0025               	movlb	5	; select bank5
 12301  14B8  0092               	movwf	18	;volatile
 12302  14B9  0870               	movf	i1PWM1_LoadDutyValue@dutyValue,w
 12303  14BA  0091               	movwf	17	;volatile
 12304  14BB  0008               	return
 12305  14BC                     __end_ofi1_PWM1_LoadDutyValue:	
 12306                           
 12307                           	psect	text58
 12308  07D8                     __ptext58:	
 12309 ;; *************** function _PWM5_LoadDutyValue *****************
 12310 ;; Defined at:
 12311 ;;		line 61 in file "driver/src/pwm.c"
 12312 ;; Parameters:    Size  Location     Type
 12313 ;;  dutyValue       2   14[BANK0 ] unsigned int 
 12314 ;; Auto vars:     Size  Location     Type
 12315 ;;		None
 12316 ;; Return value:  Size  Location     Type
 12317 ;;                  1    wreg      void 
 12318 ;; Registers used:
 12319 ;;		wreg
 12320 ;; Tracked objects:
 12321 ;;		On entry : 10/0
 12322 ;;		On exit  : 1F/C
 12323 ;;		Unchanged: 0/0
 12324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12325 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12327 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12328 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12329 ;;Total ram usage:        4 bytes
 12330 ;; Hardware stack levels used:    1
 12331 ;; Hardware stack levels required when called:    7
 12332 ;; This function calls:
 12333 ;;		Nothing
 12334 ;; This function is called by:
 12335 ;;		_Led_UpdateBright
 12336 ;;		i1_Led_UpdateBright
 12337 ;;		_Led_Ramp
 12338 ;; This function uses a non-reentrant model
 12339 ;;
 12340                           
 12341                           
 12342                           ;psect for function _PWM5_LoadDutyValue
 12343  07D8                     _PWM5_LoadDutyValue:	
 12344                           
 12345                           ;Skip over the trampoline to the duplicate function for level 1
 12346  07D8  1C7E               	btfss	126,0
 12347  07D9  2FDB               	goto	l5850
 12348  07DA  2FED               	ljmp	i1l3802
 12349  07DB                     _PWM5_LoadDutyValue$intlevel0:	
 12350  07DB                     l5850:	
 12351                           ;incstack = 0
 12352                           ; Regs used in _PWM5_LoadDutyValue: [wreg]
 12353                           
 12354                           
 12355                           ;pwm.c: 63: PWM5DC = dutyValue << 6;
 12356  07DB  0020               	movlb	0	; select bank0
 12357  07DC  084F               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 12358  07DD  00D1               	movwf	??_PWM5_LoadDutyValue+1
 12359  07DE  084E               	movf	PWM5_LoadDutyValue@dutyValue,w
 12360  07DF  00D0               	movwf	??_PWM5_LoadDutyValue
 12361  07E0  3006               	movlw	6
 12362  07E1                     u4745:	
 12363  07E1  35D0               	lslf	??_PWM5_LoadDutyValue,f
 12364  07E2  0DD1               	rlf	??_PWM5_LoadDutyValue+1,f
 12365  07E3  0B89               	decfsz	9,f
 12366  07E4  2FE1               	goto	u4745
 12367  07E5  0850               	movf	??_PWM5_LoadDutyValue,w
 12368  07E6  002C               	movlb	12	; select bank12
 12369  07E7  0097               	movwf	23	;volatile
 12370  07E8  0020               	movlb	0	; select bank0
 12371  07E9  0851               	movf	??_PWM5_LoadDutyValue+1,w
 12372  07EA  002C               	movlb	12	; select bank12
 12373  07EB  0098               	movwf	24	;volatile
 12374  07EC  0008               	return
 12375  07ED                     __end_of_PWM5_LoadDutyValue:	
 12376  07ED                     __ptext91:	
 12377 ;; *************** function i1_PWM5_LoadDutyValue *****************
 12378 ;; Defined at:
 12379 ;;		line 61 in file "driver/src/pwm.c"
 12380 ;; Parameters:    Size  Location     Type
 12381 ;;  dutyValue       2    0[COMMON] unsigned int 
 12382 ;; Auto vars:     Size  Location     Type
 12383 ;;		None
 12384 ;; Return value:  Size  Location     Type
 12385 ;;                  1    wreg      void 
 12386 ;; Registers used:
 12387 ;;		wreg
 12388 ;; Tracked objects:
 12389 ;;		On entry : 0/0
 12390 ;;		On exit  : 1F/C
 12391 ;;		Unchanged: 0/0
 12392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12393 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12395 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12397 ;;Total ram usage:        4 bytes
 12398 ;; Hardware stack levels used:    1
 12399 ;; This function calls:
 12400 ;;		Nothing
 12401 ;; This function is called by:
 12402 ;; This function uses a non-reentrant model
 12403 ;;
 12404                           
 12405                           
 12406                           ;psect for function i1_PWM5_LoadDutyValue
 12407  07ED                     i1_PWM5_LoadDutyValue:	
 12408  07ED                     i1l3802:	
 12409                           ;incstack = 0
 12410                           ; Regs used in i1_PWM5_LoadDutyValue: [wreg]
 12411                           
 12412                           
 12413                           ;pwm.c: 63: PWM5DC = dutyValue << 6;
 12414  07ED  0871               	movf	i1PWM5_LoadDutyValue@dutyValue+1,w
 12415  07EE  00F3               	movwf	??i1_PWM5_LoadDutyValue+1
 12416  07EF  0870               	movf	i1PWM5_LoadDutyValue@dutyValue,w
 12417  07F0  00F2               	movwf	??i1_PWM5_LoadDutyValue
 12418  07F1  3006               	movlw	6
 12419  07F2                     u240_25:	
 12420  07F2  35F2               	lslf	??i1_PWM5_LoadDutyValue,f
 12421  07F3  0DF3               	rlf	??i1_PWM5_LoadDutyValue+1,f
 12422  07F4  0B89               	decfsz	9,f
 12423  07F5  2FF2               	goto	u240_25
 12424  07F6  0872               	movf	??i1_PWM5_LoadDutyValue,w
 12425  07F7  002C               	movlb	12	; select bank12
 12426  07F8  0097               	movwf	23	;volatile
 12427  07F9  0873               	movf	??i1_PWM5_LoadDutyValue+1,w
 12428  07FA  0098               	movwf	24	;volatile
 12429  07FB  0008               	return
 12430  07FC                     __end_ofi1_PWM5_LoadDutyValue:	
 12431                           
 12432                           	psect	intentry
 12433  0004                     __pintentry:	
 12434 ;; *************** function _ISR *****************
 12435 ;; Defined at:
 12436 ;;		line 74 in file "user/src/main.c"
 12437 ;; Parameters:    Size  Location     Type
 12438 ;;		None
 12439 ;; Auto vars:     Size  Location     Type
 12440 ;;		None
 12441 ;; Return value:  Size  Location     Type
 12442 ;;                  1    wreg      void 
 12443 ;; Registers used:
 12444 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12445 ;; Tracked objects:
 12446 ;;		On entry : 0/0
 12447 ;;		On exit  : 0/0
 12448 ;;		Unchanged: 0/0
 12449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;Total ram usage:        0 bytes
 12455 ;; Hardware stack levels used:    1
 12456 ;; Hardware stack levels required when called:    6
 12457 ;; This function calls:
 12458 ;;		_EUSART_Transmit_ISR
 12459 ;;		_TMR0_ISR
 12460 ;;		_TMR1_GATE_ISR
 12461 ;;		_TMR2_ISR
 12462 ;;		_TMR4_ISR
 12463 ;; This function is called by:
 12464 ;;		Interrupt level 1
 12465 ;; This function uses a non-reentrant model
 12466 ;;
 12467                           
 12468  0004                     _ISR:	
 12469                           
 12470                           ;incstack = 0
 12471  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12472                           
 12473                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12474  0005  3180               	pagesel	$
 12475                           
 12476                           ;main.c: 75: if (PIR1bits.TMR1GIF) {
 12477  0006  0020               	movlb	0	; select bank0
 12478  0007  1F91               	btfss	17,7	;volatile
 12479  0008  280D               	goto	i1l517
 12480                           
 12481                           ;main.c: 76: TMR1_GATE_ISR();
 12482  0009  3194  2486  3180   	fcall	_TMR1_GATE_ISR
 12483                           
 12484                           ;main.c: 77: } else if (PIE1bits.TMR2IE && PIR1bits.TMR2IF) {
 12485  000C  282C               	goto	i1l526
 12486  000D                     i1l517:	
 12487  000D  0021               	movlb	1	; select bank1
 12488  000E  1C91               	btfss	17,1	;volatile
 12489  000F  2817               	goto	i1l519
 12490  0010  0020               	movlb	0	; select bank0
 12491  0011  1C91               	btfss	17,1	;volatile
 12492  0012  2817               	goto	i1l519
 12493                           
 12494                           ;main.c: 78: TMR2_ISR();
 12495  0013  3194  2492  3180   	fcall	_TMR2_ISR
 12496                           
 12497                           ;main.c: 79: } else if (PIR0bits.TMR0IF) {
 12498  0016  282C               	goto	i1l526
 12499  0017                     i1l519:	
 12500  0017  0020               	movlb	0	; select bank0
 12501  0018  1E90               	btfss	16,5	;volatile
 12502  0019  281E               	goto	i1l521
 12503                           
 12504                           ;main.c: 80: TMR0_ISR();
 12505  001A  3194  247A  3180   	fcall	_TMR0_ISR
 12506                           
 12507                           ;main.c: 81: } else if (PIR2bits.TMR4IF) {
 12508  001D  282C               	goto	i1l526
 12509  001E                     i1l521:	
 12510  001E  1C92               	btfss	18,1	;volatile
 12511  001F  2824               	goto	i1l523
 12512                           
 12513                           ;main.c: 82: TMR4_ISR();
 12514  0020  3194  249E  3180   	fcall	_TMR4_ISR
 12515                           
 12516                           ;main.c: 83: } else if (PIE1bits.TXIE && PIR1bits.TXIF) {
 12517  0023  282C               	goto	i1l526
 12518  0024                     i1l523:	
 12519  0024  0021               	movlb	1	; select bank1
 12520  0025  1E11               	btfss	17,4	;volatile
 12521  0026  282C               	goto	i1l526
 12522  0027  0020               	movlb	0	; select bank0
 12523  0028  1E11               	btfss	17,4	;volatile
 12524  0029  282C               	goto	i1l526
 12525                           
 12526                           ;main.c: 84: EUSART_Transmit_ISR();
 12527  002A  3195  2508         	fcall	_EUSART_Transmit_ISR
 12528  002C                     i1l526:	
 12529  002C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12530  002D  0009               	retfie
 12531  002E                     __end_of_ISR:	
 12532                           
 12533                           	psect	text69
 12534  149E                     __ptext69:	
 12535 ;; *************** function _TMR4_ISR *****************
 12536 ;; Defined at:
 12537 ;;		line 27 in file "driver/src/tmr4.c"
 12538 ;; Parameters:    Size  Location     Type
 12539 ;;		None
 12540 ;; Auto vars:     Size  Location     Type
 12541 ;;		None
 12542 ;; Return value:  Size  Location     Type
 12543 ;;                  1    wreg      void 
 12544 ;; Registers used:
 12545 ;;		wreg, status,2, status,0, pclath, cstack
 12546 ;; Tracked objects:
 12547 ;;		On entry : 1F/0
 12548 ;;		On exit  : 0/0
 12549 ;;		Unchanged: 0/0
 12550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12555 ;;Total ram usage:        0 bytes
 12556 ;; Hardware stack levels used:    1
 12557 ;; Hardware stack levels required when called:    2
 12558 ;; This function calls:
 12559 ;;		Absolute function
 12560 ;;		_Led_Notice
 12561 ;; This function is called by:
 12562 ;;		_ISR
 12563 ;; This function uses a non-reentrant model
 12564 ;;
 12565                           
 12566                           
 12567                           ;psect for function _TMR4_ISR
 12568  149E                     _TMR4_ISR:	
 12569                           
 12570                           ;tmr4.c: 29: PIR2bits.TMR4IF = 0;
 12571                           
 12572                           ;incstack = 0
 12573                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 12574  149E  1092               	bcf	18,1	;volatile
 12575                           
 12576                           ;tmr4.c: 31: if ( tmr4_isr_handler )
 12577  149F  0021               	movlb	1	; select bank1
 12578  14A0  0862               	movf	_tmr4_isr_handler^(0+128),w
 12579  14A1  0463               	iorwf	(_tmr4_isr_handler+1)^(0+128),w
 12580  14A2  1903               	btfsc	3,2
 12581  14A3  0008               	return
 12582                           
 12583                           ;tmr4.c: 32: {
 12584                           ;tmr4.c: 33: tmr4_isr_handler ( );
 12585  14A4  0863               	movf	(_tmr4_isr_handler+1)^(0+128),w
 12586  14A5  008A               	movwf	10
 12587  14A6  0862               	movf	_tmr4_isr_handler^(0+128),w
 12588  14A7  000A               	callw
 12589  14A8  3194               	pagesel	$
 12590  14A9  0008               	return
 12591  14AA                     __end_of_TMR4_ISR:	
 12592                           
 12593                           	psect	text70
 12594  0774                     __ptext70:	
 12595 ;; *************** function _Led_Notice *****************
 12596 ;; Defined at:
 12597 ;;		line 402 in file "user/src/led.c"
 12598 ;; Parameters:    Size  Location     Type
 12599 ;;		None
 12600 ;; Auto vars:     Size  Location     Type
 12601 ;;		None
 12602 ;; Return value:  Size  Location     Type
 12603 ;;                  1    wreg      void 
 12604 ;; Registers used:
 12605 ;;		wreg, status,2, status,0, pclath, cstack
 12606 ;; Tracked objects:
 12607 ;;		On entry : 1F/1
 12608 ;;		On exit  : 1E/0
 12609 ;;		Unchanged: 0/0
 12610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12614 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12615 ;;Total ram usage:        1 bytes
 12616 ;; Hardware stack levels used:    1
 12617 ;; Hardware stack levels required when called:    1
 12618 ;; This function calls:
 12619 ;;		_Led_TurnOffDirect
 12620 ;;		_Led_TurnOnDirect
 12621 ;;		_TMR4_StopTimer
 12622 ;; This function is called by:
 12623 ;;		_Interrupt_Initialize
 12624 ;;		_TMR4_ISR
 12625 ;; This function uses a non-reentrant model
 12626 ;;
 12627                           
 12628                           
 12629                           ;psect for function _Led_Notice
 12630  0774                     _Led_Notice:	
 12631                           
 12632                           ;led.c: 403: static uint8_t cnt = 0;
 12633                           ;led.c: 404: if (gLedRunPara.mNoticeCount) {
 12634                           
 12635                           ;incstack = 0
 12636                           ; Regs used in _Led_Notice: [wreg+status,2+status,0+pclath+cstack]
 12637  0774  0C5C               	rrf	(_gLedRunPara^(0+128)+20),w	;volatile
 12638  0775  0C89               	rrf	9,f
 12639  0776  393F               	andlw	63
 12640  0777  1903               	skipnz
 12641  0778  2F97               	goto	i1l4956
 12642                           
 12643                           ;led.c: 405: cnt++;
 12644  0779  0020               	movlb	0	; select bank0
 12645  077A  0AB3               	incf	Led_Notice@cnt,f
 12646                           
 12647                           ;led.c: 406: if ((cnt & 0x07) == 0) {
 12648  077B  0833               	movf	Led_Notice@cnt,w
 12649  077C  3907               	andlw	7
 12650  077D  1D03               	btfss	3,2
 12651  077E  0008               	return
 12652                           
 12653                           ;led.c: 407: if (gLedRunPara.mNoticeStatus) {
 12654  077F  0021               	movlb	1	; select bank1
 12655  0780  1CDC               	btfss	(_gLedRunPara^(0+128)+20),1	;volatile
 12656  0781  2F93               	goto	i1l4952
 12657                           
 12658                           ;led.c: 408: Led_TurnOnDirect();
 12659  0782  27A4               	fcall	_Led_TurnOnDirect
 12660                           
 12661                           ;led.c: 409: gLedRunPara.mNoticeCount--;
 12662  0783  0021               	movlb	1	; select bank1
 12663  0784  0C5C               	rrf	(_gLedRunPara^(0+128)+20),w	;volatile
 12664  0785  00F0               	movwf	??_Led_Notice
 12665  0786  0C70               	rrf	??_Led_Notice,w
 12666  0787  393F               	andlw	63
 12667  0788  00F0               	movwf	??_Led_Notice
 12668  0789  03F0               	decf	??_Led_Notice,f
 12669  078A  0DF0               	rlf	??_Led_Notice,f
 12670  078B  0DF0               	rlf	??_Led_Notice,f
 12671  078C  085C               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
 12672  078D  0670               	xorwf	??_Led_Notice,w
 12673  078E  3903               	andlw	-253
 12674  078F  0670               	xorwf	??_Led_Notice,w
 12675  0790  00DC               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
 12676                           
 12677                           ;led.c: 410: gLedRunPara.mNoticeStatus = 0;
 12678  0791  10DC               	bcf	(_gLedRunPara^(0+128)+20),1	;volatile
 12679                           
 12680                           ;led.c: 411: } else {
 12681  0792  0008               	return
 12682  0793                     i1l4952:	
 12683                           
 12684                           ;led.c: 412: Led_TurnOffDirect();
 12685  0793  279B               	fcall	_Led_TurnOffDirect
 12686                           
 12687                           ;led.c: 413: gLedRunPara.mNoticeStatus = 1;
 12688  0794  0021               	movlb	1	; select bank1
 12689  0795  14DC               	bsf	(_gLedRunPara^(0+128)+20),1	;volatile
 12690  0796  0008               	return
 12691  0797                     i1l4956:	
 12692                           
 12693                           ;led.c: 417: TMR4_StopTimer();
 12694  0797  27AD               	fcall	_TMR4_StopTimer
 12695                           
 12696                           ;led.c: 418: cnt = 0;
 12697  0798  0020               	movlb	0	; select bank0
 12698  0799  01B3               	clrf	Led_Notice@cnt
 12699  079A  0008               	return
 12700  079B                     __end_of_Led_Notice:	
 12701  079B                     __ptext73:	
 12702 ;; *************** function _Led_TurnOffDirect *****************
 12703 ;; Defined at:
 12704 ;;		line 174 in file "user/src/led.c"
 12705 ;; Parameters:    Size  Location     Type
 12706 ;;		None
 12707 ;; Auto vars:     Size  Location     Type
 12708 ;;		None
 12709 ;; Return value:  Size  Location     Type
 12710 ;;                  1    wreg      void 
 12711 ;; Registers used:
 12712 ;;		None
 12713 ;; Tracked objects:
 12714 ;;		On entry : 1F/1
 12715 ;;		On exit  : 1F/C
 12716 ;;		Unchanged: 0/0
 12717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12722 ;;Total ram usage:        0 bytes
 12723 ;; Hardware stack levels used:    1
 12724 ;; This function calls:
 12725 ;;		Nothing
 12726 ;; This function is called by:
 12727 ;;		_Led_Notice
 12728 ;; This function uses a non-reentrant model
 12729 ;;
 12730                           
 12731                           
 12732                           ;psect for function _Led_TurnOffDirect
 12733  079B                     _Led_TurnOffDirect:	
 12734                           
 12735                           ;led.c: 175: CCP1CON &= 0x7F;
 12736                           
 12737                           ;incstack = 0
 12738                           ; Regs used in _Led_TurnOffDirect: []
 12739  079B  0025               	movlb	5	; select bank5
 12740  079C  1393               	bcf	19,7	;volatile
 12741                           
 12742                           ;led.c: 176: CCP2CON &= 0x7F;
 12743  079D  1397               	bcf	23,7	;volatile
 12744                           
 12745                           ;led.c: 177: CCP3CON &= 0x7F;
 12746  079E  0026               	movlb	6	; select bank6
 12747  079F  1393               	bcf	19,7	;volatile
 12748                           
 12749                           ;led.c: 178: CCP4CON &= 0x7F;
 12750  07A0  1397               	bcf	23,7	;volatile
 12751                           
 12752                           ;led.c: 179: PWM5CON &= 0x7F;
 12753  07A1  002C               	movlb	12	; select bank12
 12754  07A2  1399               	bcf	25,7	;volatile
 12755  07A3  0008               	return
 12756  07A4                     __end_of_Led_TurnOffDirect:	
 12757  07A4                     __ptext72:	
 12758 ;; *************** function _Led_TurnOnDirect *****************
 12759 ;; Defined at:
 12760 ;;		line 166 in file "user/src/led.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;		None
 12763 ;; Auto vars:     Size  Location     Type
 12764 ;;		None
 12765 ;; Return value:  Size  Location     Type
 12766 ;;                  1    wreg      void 
 12767 ;; Registers used:
 12768 ;;		None
 12769 ;; Tracked objects:
 12770 ;;		On entry : 1F/1
 12771 ;;		On exit  : 1F/C
 12772 ;;		Unchanged: 0/0
 12773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12778 ;;Total ram usage:        0 bytes
 12779 ;; Hardware stack levels used:    1
 12780 ;; This function calls:
 12781 ;;		Nothing
 12782 ;; This function is called by:
 12783 ;;		_Led_Notice
 12784 ;; This function uses a non-reentrant model
 12785 ;;
 12786                           
 12787                           
 12788                           ;psect for function _Led_TurnOnDirect
 12789  07A4                     _Led_TurnOnDirect:	
 12790                           
 12791                           ;led.c: 167: CCP1CON |= 0x80;
 12792                           
 12793                           ;incstack = 0
 12794                           ; Regs used in _Led_TurnOnDirect: []
 12795  07A4  0025               	movlb	5	; select bank5
 12796  07A5  1793               	bsf	19,7	;volatile
 12797                           
 12798                           ;led.c: 168: CCP2CON |= 0x80;
 12799  07A6  1797               	bsf	23,7	;volatile
 12800                           
 12801                           ;led.c: 169: CCP3CON |= 0x80;
 12802  07A7  0026               	movlb	6	; select bank6
 12803  07A8  1793               	bsf	19,7	;volatile
 12804                           
 12805                           ;led.c: 170: CCP4CON |= 0x80;
 12806  07A9  1797               	bsf	23,7	;volatile
 12807                           
 12808                           ;led.c: 171: PWM5CON |= 0x80;
 12809  07AA  002C               	movlb	12	; select bank12
 12810  07AB  1799               	bsf	25,7	;volatile
 12811  07AC  0008               	return
 12812  07AD                     __end_of_Led_TurnOnDirect:	
 12813  07AD                     __ptext71:	
 12814 ;; *************** function _TMR4_StopTimer *****************
 12815 ;; Defined at:
 12816 ;;		line 22 in file "driver/src/tmr4.c"
 12817 ;; Parameters:    Size  Location     Type
 12818 ;;		None
 12819 ;; Auto vars:     Size  Location     Type
 12820 ;;		None
 12821 ;; Return value:  Size  Location     Type
 12822 ;;                  1    wreg      void 
 12823 ;; Registers used:
 12824 ;;		None
 12825 ;; Tracked objects:
 12826 ;;		On entry : 1F/1
 12827 ;;		On exit  : 1F/8
 12828 ;;		Unchanged: 0/0
 12829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12834 ;;Total ram usage:        0 bytes
 12835 ;; Hardware stack levels used:    1
 12836 ;; This function calls:
 12837 ;;		Nothing
 12838 ;; This function is called by:
 12839 ;;		_Led_Notice
 12840 ;; This function uses a non-reentrant model
 12841 ;;
 12842                           
 12843                           
 12844                           ;psect for function _TMR4_StopTimer
 12845  07AD                     _TMR4_StopTimer:	
 12846                           
 12847                           ;tmr4.c: 24: T4CONbits.TMR4ON = 0;
 12848                           
 12849                           ;incstack = 0
 12850                           ; Regs used in _TMR4_StopTimer: []
 12851  07AD  0028               	movlb	8	; select bank8
 12852  07AE  1117               	bcf	23,2	;volatile
 12853  07AF  0008               	return
 12854  07B0                     __end_of_TMR4_StopTimer:	
 12855                           
 12856                           	psect	text74
 12857  1492                     __ptext74:	
 12858 ;; *************** function _TMR2_ISR *****************
 12859 ;; Defined at:
 12860 ;;		line 26 in file "driver/src/tmr2.c"
 12861 ;; Parameters:    Size  Location     Type
 12862 ;;		None
 12863 ;; Auto vars:     Size  Location     Type
 12864 ;;		None
 12865 ;; Return value:  Size  Location     Type
 12866 ;;                  1    wreg      void 
 12867 ;; Registers used:
 12868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12869 ;; Tracked objects:
 12870 ;;		On entry : 1F/0
 12871 ;;		On exit  : 0/0
 12872 ;;		Unchanged: 0/0
 12873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12878 ;;Total ram usage:        0 bytes
 12879 ;; Hardware stack levels used:    1
 12880 ;; Hardware stack levels required when called:    5
 12881 ;; This function calls:
 12882 ;;		Absolute function
 12883 ;;		_Led_Run
 12884 ;; This function is called by:
 12885 ;;		_ISR
 12886 ;; This function uses a non-reentrant model
 12887 ;;
 12888                           
 12889                           
 12890                           ;psect for function _TMR2_ISR
 12891  1492                     _TMR2_ISR:	
 12892                           
 12893                           ;tmr2.c: 28: PIR1bits.TMR2IF = 0;
 12894                           
 12895                           ;incstack = 0
 12896                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12897  1492  1091               	bcf	17,1	;volatile
 12898                           
 12899                           ;tmr2.c: 29: if ( tmr2_isr_handler )
 12900  1493  0021               	movlb	1	; select bank1
 12901  1494  0864               	movf	_tmr2_isr_handler^(0+128),w
 12902  1495  0465               	iorwf	(_tmr2_isr_handler+1)^(0+128),w
 12903  1496  1903               	btfsc	3,2
 12904  1497  0008               	return
 12905                           
 12906                           ;tmr2.c: 30: {
 12907                           ;tmr2.c: 31: tmr2_isr_handler ( );
 12908  1498  0865               	movf	(_tmr2_isr_handler+1)^(0+128),w
 12909  1499  008A               	movwf	10
 12910  149A  0864               	movf	_tmr2_isr_handler^(0+128),w
 12911  149B  000A               	callw
 12912  149C  3194               	pagesel	$
 12913  149D  0008               	return
 12914  149E                     __end_of_TMR2_ISR:	
 12915                           
 12916                           	psect	text75
 12917  0030                     __ptext75:	
 12918 ;; *************** function _Led_Run *****************
 12919 ;; Defined at:
 12920 ;;		line 542 in file "user/src/led.c"
 12921 ;; Parameters:    Size  Location     Type
 12922 ;;		None
 12923 ;; Auto vars:     Size  Location     Type
 12924 ;;		None
 12925 ;; Return value:  Size  Location     Type
 12926 ;;                  1    wreg      void 
 12927 ;; Registers used:
 12928 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12929 ;; Tracked objects:
 12930 ;;		On entry : 1F/1
 12931 ;;		On exit  : 10/0
 12932 ;;		Unchanged: 0/0
 12933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12937 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12938 ;;Total ram usage:        1 bytes
 12939 ;; Hardware stack levels used:    1
 12940 ;; Hardware stack levels required when called:    4
 12941 ;; This function calls:
 12942 ;;		_IR_ScanLongPress
 12943 ;;		_Led_Ramp
 12944 ;;		_Led_RunMusic
 12945 ;; This function is called by:
 12946 ;;		_Interrupt_Initialize
 12947 ;;		_TMR2_ISR
 12948 ;; This function uses a non-reentrant model
 12949 ;;
 12950                           
 12951                           
 12952                           ;psect for function _Led_Run
 12953  0030                     _Led_Run:	
 12954                           
 12955                           ;led.c: 543: static uint8_t cnt = 0;
 12956                           ;led.c: 544: cnt++;
 12957                           
 12958                           ;incstack = 0
 12959                           ; Regs used in _Led_Run: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12960  0030  0020               	movlb	0	; select bank0
 12961  0031  0AB2               	incf	Led_Run@cnt,f
 12962                           
 12963                           ;led.c: 545: if ((cnt & 0x03) == 0x00) {
 12964  0032  0832               	movf	Led_Run@cnt,w
 12965  0033  3903               	andlw	3
 12966  0034  1D03               	btfss	3,2
 12967  0035  2837               	goto	i1l6542
 12968                           
 12969                           ;led.c: 546: IR_ScanLongPress();
 12970  0036  2051               	fcall	_IR_ScanLongPress
 12971  0037                     i1l6542:	
 12972                           
 12973                           ;led.c: 547: }
 12974                           ;led.c: 548: if ((ir_state.mSet == 4) || (ir_state.mSet == 5)) {
 12975  0037  0020               	movlb	0	; select bank0
 12976  0038  318F  2761  3180   	fcall	PL100	;call to abstracted procedure
 12977  003B  1903               	skipnz
 12978  003C  2842               	goto	i1l6546
 12979  003D  318F  275C  3180   	fcall	PL98	;call to abstracted procedure
 12980  0040  1D03               	skipz
 12981  0041  2843               	goto	i1l814
 12982  0042                     i1l6546:	
 12983                           
 12984                           ;led.c: 549: Led_Ramp();
 12985  0042  2A49               	ljmp	i1l6270
 12986  0043                     i1l814:	
 12987                           ;led.c: 550: } else if (!gLedPara.mAuto) {
 12988                           
 12989  0043  0022               	movlb	2	; select bank2
 12990  0044  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 12991  0045  0008               	return
 12992                           
 12993                           ;led.c: 551: if (gLedPara.mOn && gLedPara.mMsc) {
 12994  0046  1CA0               	btfss	_gLedPara^(0+256),1	;volatile
 12995  0047  2842               	goto	i1l6546
 12996  0048  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 12997  0049  0020               	movlb	0	; select bank0
 12998  004A  00CD               	movwf	??_Led_Run
 12999  004B  0CCD               	rrf	??_Led_Run,f
 13000  004C  0C4D               	rrf	??_Led_Run,w
 13001  004D  390F               	andlw	15
 13002  004E  1903               	skipnz
 13003  004F  2842               	goto	i1l6546
 13004                           
 13005                           ;led.c: 552: Led_RunMusic();
 13006  0050  2C19               	ljmp	i1l6298
 13007  0051                     __end_of_Led_Run:	
 13008                           ;led.c: 553: } else {
 13009                           
 13010  0051                     __ptext92:	
 13011 ;; *************** function _IR_ScanLongPress *****************
 13012 ;; Defined at:
 13013 ;;		line 334 in file "user/src/ir.c"
 13014 ;; Parameters:    Size  Location     Type
 13015 ;;		None
 13016 ;; Auto vars:     Size  Location     Type
 13017 ;;  i               1   12[COMMON] unsigned char 
 13018 ;;  i               1   11[COMMON] unsigned char 
 13019 ;;  idx             1   13[COMMON] unsigned char 
 13020 ;; Return value:  Size  Location     Type
 13021 ;;                  1    wreg      void 
 13022 ;; Registers used:
 13023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13024 ;; Tracked objects:
 13025 ;;		On entry : 1F/0
 13026 ;;		On exit  : 16/0
 13027 ;;		Unchanged: 0/0
 13028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13030 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13032 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13033 ;;Total ram usage:        3 bytes
 13034 ;; Hardware stack levels used:    1
 13035 ;; Hardware stack levels required when called:    2
 13036 ;; This function calls:
 13037 ;;		_Led_SetCustom
 13038 ;;		i1_IR_GetIndex
 13039 ;;		i1_Led_StartNotice
 13040 ;;		i1_Util_DecValue
 13041 ;;		i1_Util_IncValue
 13042 ;; This function is called by:
 13043 ;;		_Led_Run
 13044 ;; This function uses a non-reentrant model
 13045 ;;
 13046                           
 13047                           
 13048                           ;psect for function _IR_ScanLongPress
 13049  0051                     _IR_ScanLongPress:	
 13050                           
 13051                           ;ir.c: 337: if (!ir_state.mKeyRpt) {
 13052                           
 13053                           ;incstack = 0
 13054                           ; Regs used in _IR_ScanLongPress: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13055  0051  18B6               	btfsc	_ir_state,1	;volatile
 13056  0052  28F3               	goto	i1l6454
 13057                           
 13058                           ;ir.c: 338: cnt = 0;
 13059  0053  01A0               	clrf	IR_ScanLongPress@cnt
 13060  0054  01A1               	clrf	IR_ScanLongPress@cnt+1
 13061  0055  0008               	return
 13062  0056                     i1l1102:	
 13063  0056                     i1l6342:	
 13064                           
 13065                           ;ir.c: 343: case 0x59:
 13066                           ;ir.c: 344: case 0x45:
 13067                           ;ir.c: 345: case 0x44:
 13068                           ;ir.c: 346: case 0x41:
 13069                           ;ir.c: 347: idx = IR_GetIndex(keyValue);
 13070  0056  0830               	movf	_keyValue,w	;volatile
 13071  0057  212F  3180         	fcall	i1_IR_GetIndex
 13072  0059  00FD               	movwf	IR_ScanLongPress@idx
 13073                           
 13074                           ;ir.c: 348: Util_IncValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 1000, 1);
 13075  005A  357D               	lslf	IR_ScanLongPress@idx,w
 13076  005B  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 13077  005C  00F0               	movwf	i1Util_IncValue@pSrc
 13078  005D  30E8               	movlw	232
 13079  005E  01F1               	clrf	i1Util_IncValue@pSrc+1
 13080  005F  00F2               	movwf	i1Util_IncValue@max
 13081  0060  3003               	movlw	3
 13082  0061  00F3               	movwf	i1Util_IncValue@max+1
 13083  0062  01F4               	clrf	i1Util_IncValue@delta
 13084  0063  0AF4               	incf	i1Util_IncValue@delta,f
 13085  0064  01F5               	clrf	i1Util_IncValue@delta+1
 13086  0065  2220  3180         	fcall	i1_Util_IncValue
 13087  0067                     L19:	
 13088                           
 13089                           ;ir.c: 349: if (ir_state.mSet == 0) {
 13090  0067  0E36               	swapf	_ir_state,w	;volatile
 13091  0068  0C89               	rrf	9,f
 13092  0069  3907               	andlw	7
 13093  006A  1D03               	skipz
 13094  006B  0008               	return
 13095                           
 13096                           ;ir.c: 350: gLedPara.mBright[idx] = gLedRunPara.mTargetBright[idx];
 13097  006C  357D               	lslf	IR_ScanLongPress@idx,w
 13098  006D  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 13099  006E  0086               	movwf	6
 13100  006F  0187               	clrf	7
 13101  0070  357D               	lslf	IR_ScanLongPress@idx,w
 13102  0071  3E24               	addlw	(low ((_gLedPara| (0+256)+4)))& (0+255)
 13103  0072  318E  26B2         	fcall	PL8	;call to abstracted procedure
 13104  0074  0008               	return
 13105  0075                     i1l1109:	
 13106  0075                     i1l6350:	
 13107                           
 13108                           ;ir.c: 354: case 0x55:
 13109                           ;ir.c: 355: case 0x49:
 13110                           ;ir.c: 356: case 0x48:
 13111                           ;ir.c: 357: case 0x40:
 13112                           ;ir.c: 358: idx = IR_GetIndex(keyValue);
 13113  0075  0830               	movf	_keyValue,w	;volatile
 13114  0076  212F  3180         	fcall	i1_IR_GetIndex
 13115  0078  00FD               	movwf	IR_ScanLongPress@idx
 13116                           
 13117                           ;ir.c: 359: Util_DecValue((uint16_t*) & gLedRunPara.mTargetBright[idx], 0, 1);
 13118  0079  357D               	lslf	IR_ScanLongPress@idx,w
 13119  007A  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 13120  007B  00F0               	movwf	i1Util_DecValue@pSrc
 13121  007C  01F1               	clrf	i1Util_DecValue@pSrc+1
 13122  007D  01F2               	clrf	i1Util_DecValue@min
 13123  007E  01F3               	clrf	i1Util_DecValue@min+1
 13124  007F  01F4               	clrf	i1Util_DecValue@delta
 13125  0080  0AF4               	incf	i1Util_DecValue@delta,f
 13126  0081  01F5               	clrf	i1Util_DecValue@delta+1
 13127  0082  21FA  3180         	fcall	i1_Util_DecValue
 13128  0084  2867               	goto	L19
 13129  0085                     i1l1114:	
 13130                           ;ir.c: 360: if (ir_state.mSet == 0) {
 13131                           
 13132  0085                     i1l6358:	
 13133                           
 13134                           ;ir.c: 365: case 0x51:
 13135                           ;ir.c: 366: case 0x4D:
 13136                           ;ir.c: 367: case 0x4C:
 13137                           ;ir.c: 368: cnt++;
 13138                           
 13139                           ;ir.c: 369: if (cnt == 0x200) {
 13140  0085  2297  3180         	fcall	PL18	;call to abstracted procedure
 13141  0087  1D03               	btfss	3,2
 13142  0088  0008               	return
 13143                           
 13144                           ;ir.c: 370: ir_state.mKeyRpt = 0;
 13145  0089  10B6               	bcf	_ir_state,1	;volatile
 13146                           
 13147                           ;ir.c: 371: idx = IR_GetIndex(keyValue);
 13148  008A  0830               	movf	_keyValue,w	;volatile
 13149  008B  212F  3180         	fcall	i1_IR_GetIndex
 13150  008D  00FD               	movwf	IR_ScanLongPress@idx
 13151                           
 13152                           ;ir.c: 372: Led_SetCustom(idx, (uint16_t*) gLedRunPara.mTargetBright);
 13153  008E  30D2               	movlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 13154  008F  00F3               	movwf	Led_SetCustom@pValue
 13155  0090  087D               	movf	IR_ScanLongPress@idx,w
 13156  0091  21BE  3180         	fcall	_Led_SetCustom
 13157                           
 13158                           ;ir.c: 373: Led_StartNotice(1);
 13159  0093  3001               	movlw	1
 13160  0094  21B2               	fcall	i1_Led_StartNotice
 13161                           
 13162                           ;ir.c: 374: gLedRunPara.mParaChanged = 1;
 13163  0095  0021               	movlb	1	; select bank1
 13164  0096  145C               	bsf	(_gLedRunPara^(0+128)+20),0	;volatile
 13165  0097  0008               	return
 13166  0098                     i1l6372:	
 13167                           
 13168                           ;ir.c: 379: cnt++;
 13169                           
 13170                           ;ir.c: 380: if (cnt == 0x200) {
 13171  0098  2297  3180         	fcall	PL18	;call to abstracted procedure
 13172  009A  1D03               	btfss	3,2
 13173  009B  0008               	return
 13174                           
 13175                           ;ir.c: 381: ir_state.mKeyRpt = 0;
 13176  009C  10B6               	bcf	_ir_state,1	;volatile
 13177                           
 13178                           ;ir.c: 382: ir_state.mSet = 2;
 13179  009D  0836               	movf	_ir_state,w	;volatile
 13180  009E  391F               	andlw	-225
 13181  009F  3840               	iorlw	64
 13182  00A0  00B6               	movwf	_ir_state	;volatile
 13183                           
 13184                           ;ir.c: 383: ir_state.tmIdx = 0;
 13185  00A1  01B7               	clrf	_ir_state+1	;volatile
 13186                           
 13187                           ;ir.c: 384: Led_StartNotice(1);
 13188  00A2  3001               	movlw	1
 13189  00A3  21B2               	fcall	i1_Led_StartNotice
 13190  00A4  0008               	return
 13191  00A5                     i1l6384:	
 13192                           
 13193                           ;ir.c: 389: cnt++;
 13194                           
 13195                           ;ir.c: 390: if (cnt == 0x200) {
 13196  00A5  2297  3180         	fcall	PL18	;call to abstracted procedure
 13197  00A7  1D03               	btfss	3,2
 13198  00A8  0008               	return
 13199                           
 13200                           ;ir.c: 391: ir_state.mKeyRpt = 0;
 13201  00A9  10B6               	bcf	_ir_state,1	;volatile
 13202                           
 13203                           ;ir.c: 392: ir_state.mSet = 3;
 13204  00AA  0836               	movf	_ir_state,w	;volatile
 13205  00AB  391F               	andlw	-225
 13206  00AC  3860               	iorlw	96
 13207  00AD  00B6               	movwf	_ir_state	;volatile
 13208                           
 13209                           ;ir.c: 393: ir_state.tmIdx = 0;
 13210  00AE  01B7               	clrf	_ir_state+1	;volatile
 13211                           
 13212                           ;ir.c: 394: Led_StartNotice(1);
 13213  00AF  3001               	movlw	1
 13214  00B0  21B2               	fcall	i1_Led_StartNotice
 13215  00B1  0008               	return
 13216  00B2                     i1l6396:	
 13217                           
 13218                           ;ir.c: 399: cnt++;
 13219                           
 13220                           ;ir.c: 400: if (cnt == 0x200) {
 13221  00B2  2297  3180         	fcall	PL18	;call to abstracted procedure
 13222  00B4  1D03               	btfss	3,2
 13223  00B5  0008               	return
 13224                           
 13225                           ;ir.c: 401: ir_state.mKeyRpt = 0;
 13226  00B6  10B6               	bcf	_ir_state,1	;volatile
 13227                           
 13228                           ;ir.c: 402: ir_state.mSet = 4;
 13229  00B7  0836               	movf	_ir_state,w	;volatile
 13230  00B8  391F               	andlw	-225
 13231  00B9  3880               	iorlw	128
 13232  00BA  00B6               	movwf	_ir_state	;volatile
 13233                           
 13234                           ;ir.c: 403: for (uint8_t i = 0; i < 5; i++) {
 13235  00BB  01FB               	clrf	IR_ScanLongPress@i
 13236  00BC                     i1l6410:	
 13237                           
 13238                           ;ir.c: 404: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
 13239  00BC  357B               	lslf	IR_ScanLongPress@i,w
 13240  00BD  3E58               	addlw	(low ((_gLedPara| (0+256)+56)))& (0+255)
 13241  00BE  0086               	movwf	6
 13242  00BF  3001               	movlw	1	; select bank2/3
 13243  00C0  0087               	movwf	7
 13244  00C1  357B               	lslf	IR_ScanLongPress@i,w
 13245  00C2  232C  3180         	fcall	PL2	;call to abstracted procedure
 13246  00C4  3005               	movlw	5
 13247  00C5  0AFB               	incf	IR_ScanLongPress@i,f
 13248  00C6  027B               	subwf	IR_ScanLongPress@i,w
 13249  00C7  1C03               	skipc
 13250  00C8  28BC               	goto	i1l6410
 13251                           
 13252                           ;ir.c: 405: }
 13253                           ;ir.c: 406: Led_StartNotice(1);
 13254  00C9  3001               	movlw	1
 13255  00CA  21B2               	fcall	i1_Led_StartNotice
 13256  00CB  0008               	return
 13257  00CC                     i1l6418:	
 13258                           
 13259                           ;ir.c: 410: cnt++;
 13260                           
 13261                           ;ir.c: 411: if (cnt == 0x200) {
 13262  00CC  2297  3180         	fcall	PL18	;call to abstracted procedure
 13263  00CE  1D03               	btfss	3,2
 13264  00CF  0008               	return
 13265                           
 13266                           ;ir.c: 412: ir_state.mKeyRpt = 0;
 13267  00D0  10B6               	bcf	_ir_state,1	;volatile
 13268                           
 13269                           ;ir.c: 413: ir_state.mSet = 5;
 13270  00D1  0836               	movf	_ir_state,w	;volatile
 13271  00D2  391F               	andlw	-225
 13272  00D3  38A0               	iorlw	160
 13273  00D4  00B6               	movwf	_ir_state	;volatile
 13274                           
 13275                           ;ir.c: 414: for (uint8_t i = 0; i < 5; i++) {
 13276  00D5  01FC               	clrf	IR_ScanLongPress@i_1422
 13277  00D6                     i1l6432:	
 13278                           
 13279                           ;ir.c: 415: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
 13280  00D6  357C               	lslf	IR_ScanLongPress@i_1422,w
 13281  00D7  3E64               	addlw	(low ((_gLedPara| (0+256)+68)))& (0+255)
 13282  00D8  0086               	movwf	6
 13283  00D9  3001               	movlw	1	; select bank2/3
 13284  00DA  0087               	movwf	7
 13285  00DB  357C               	lslf	IR_ScanLongPress@i_1422,w
 13286  00DC  232C  3180         	fcall	PL2	;call to abstracted procedure
 13287  00DE  3005               	movlw	5
 13288  00DF  0AFC               	incf	IR_ScanLongPress@i_1422,f
 13289  00E0  027C               	subwf	IR_ScanLongPress@i_1422,w
 13290  00E1  1C03               	skipc
 13291  00E2  28D6               	goto	i1l6432
 13292                           
 13293                           ;ir.c: 416: }
 13294                           ;ir.c: 417: Led_StartNotice(1);
 13295  00E3  3001               	movlw	1
 13296  00E4  21B2               	fcall	i1_Led_StartNotice
 13297  00E5  0008               	return
 13298  00E6                     i1l6440:	
 13299                           
 13300                           ;ir.c: 421: cnt++;
 13301                           
 13302                           ;ir.c: 422: if (cnt == 0x200) {
 13303  00E6  2297  3180         	fcall	PL18	;call to abstracted procedure
 13304  00E8  1D03               	btfss	3,2
 13305  00E9  0008               	return
 13306                           
 13307                           ;ir.c: 423: ir_state.mKeyRpt = 0;
 13308  00EA  10B6               	bcf	_ir_state,1	;volatile
 13309                           
 13310                           ;ir.c: 424: ir_state.mSet = 1;
 13311  00EB  0836               	movf	_ir_state,w	;volatile
 13312  00EC  391F               	andlw	-225
 13313  00ED  3820               	iorlw	32
 13314  00EE  00B6               	movwf	_ir_state	;volatile
 13315                           
 13316                           ;ir.c: 425: ir_state.tmIdx = 0;
 13317  00EF  01B7               	clrf	_ir_state+1	;volatile
 13318                           
 13319                           ;ir.c: 426: Led_StartNotice(1);
 13320  00F0  3001               	movlw	1
 13321  00F1  21B2               	fcall	i1_Led_StartNotice
 13322  00F2  0008               	return
 13323  00F3                     i1l6454:	
 13324  00F3  0830               	movf	_keyValue,w	;volatile
 13325                           
 13326                           ; Switch size 1, requested type "space"
 13327                           ; Number of cases is 19, Range of values is 6 to 89
 13328                           ; switch strategies available:
 13329                           ; Name         Instructions Cycles
 13330                           ; simple_byte           58    30 (average)
 13331                           ; direct_byte          177     9 (fixed)
 13332                           ; jumptable            263     9 (fixed)
 13333                           ;	Chosen strategy is simple_byte
 13334  00F4  3A06               	xorlw	6	; case 6
 13335  00F5  1903               	skipnz
 13336  00F6  28E6               	goto	i1l6440
 13337  00F7  3A16               	xorlw	22	; case 16
 13338  00F8  1903               	skipnz
 13339  00F9  2898               	goto	i1l6372
 13340  00FA  3A01               	xorlw	1	; case 17
 13341  00FB  1903               	skipnz
 13342  00FC  28B2               	goto	i1l6396
 13343  00FD  3A03               	xorlw	3	; case 18
 13344  00FE  1903               	skipnz
 13345  00FF  28A5               	goto	i1l6384
 13346  0100  3A01               	xorlw	1	; case 19
 13347  0101  1903               	skipnz
 13348  0102  28CC               	goto	i1l6418
 13349  0103  3A53               	xorlw	83	; case 64
 13350  0104  1903               	skipnz
 13351  0105  2875               	goto	i1l6350
 13352  0106  3A01               	xorlw	1	; case 65
 13353  0107  1903               	skipnz
 13354  0108  2856               	goto	i1l6342
 13355  0109  3A05               	xorlw	5	; case 68
 13356  010A  1903               	skipnz
 13357  010B  2856               	goto	i1l6342
 13358  010C  3A01               	xorlw	1	; case 69
 13359  010D  1903               	skipnz
 13360  010E  2856               	goto	i1l6342
 13361  010F  3A0D               	xorlw	13	; case 72
 13362  0110  1903               	skipnz
 13363  0111  2875               	goto	i1l6350
 13364  0112  3A01               	xorlw	1	; case 73
 13365  0113  1903               	skipnz
 13366  0114  2875               	goto	i1l6350
 13367  0115  3A05               	xorlw	5	; case 76
 13368  0116  1903               	skipnz
 13369  0117  2885               	goto	i1l6358
 13370  0118  3A01               	xorlw	1	; case 77
 13371  0119  1903               	skipnz
 13372  011A  2885               	goto	i1l6358
 13373  011B  3A1D               	xorlw	29	; case 80
 13374  011C  1903               	skipnz
 13375  011D  2885               	goto	i1l1114
 13376  011E  3A01               	xorlw	1	; case 81
 13377  011F  1903               	skipnz
 13378  0120  2885               	goto	i1l6358
 13379  0121  3A05               	xorlw	5	; case 84
 13380  0122  1903               	skipnz
 13381  0123  2875               	goto	i1l1109
 13382  0124  3A01               	xorlw	1	; case 85
 13383  0125  1903               	skipnz
 13384  0126  2875               	goto	i1l6350
 13385  0127  3A0D               	xorlw	13	; case 88
 13386  0128  1903               	skipnz
 13387  0129  2856               	goto	i1l1102
 13388  012A  3A01               	xorlw	1	; case 89
 13389  012B  1903               	skipnz
 13390  012C  2856               	goto	i1l6342
 13391  012D  292E               	goto	i1l1097
 13392  012E                     i1l1097:	
 13393  012E  0008               	return
 13394  012F                     __end_of_IR_ScanLongPress:	
 13395  012F                     __ptext97:	
 13396 ;; *************** function i1_IR_GetIndex *****************
 13397 ;; Defined at:
 13398 ;;		line 10 in file "user/src/ir.c"
 13399 ;; Parameters:    Size  Location     Type
 13400 ;;  keynum          1    wreg     unsigned char 
 13401 ;; Auto vars:     Size  Location     Type
 13402 ;;  keynum          1    1[COMMON] unsigned char 
 13403 ;;  IR_GetIndex     1    0[COMMON] unsigned char 
 13404 ;; Return value:  Size  Location     Type
 13405 ;;                  1    wreg      unsigned char 
 13406 ;; Registers used:
 13407 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13408 ;; Tracked objects:
 13409 ;;		On entry : 1F/0
 13410 ;;		On exit  : 1F/0
 13411 ;;		Unchanged: 1F/0
 13412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13416 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13417 ;;Total ram usage:        2 bytes
 13418 ;; Hardware stack levels used:    1
 13419 ;; This function calls:
 13420 ;;		Nothing
 13421 ;; This function is called by:
 13422 ;;		_IR_ScanLongPress
 13423 ;; This function uses a non-reentrant model
 13424 ;;
 13425                           
 13426                           
 13427                           ;psect for function i1_IR_GetIndex
 13428  012F                     i1_IR_GetIndex:	
 13429                           
 13430                           ;incstack = 0
 13431                           ; Regs used in i1_IR_GetIndex: [wreg-fsr0h+status,2+status,0]
 13432                           ;i1IR_GetIndex@keynum stored from wreg
 13433  012F  00F1               	movwf	i1IR_GetIndex@keynum
 13434                           
 13435                           ;ir.c: 11: uint8_t idx = 0xFF;
 13436  0130  30FF               	movlw	255
 13437  0131  00F0               	movwf	i1IR_GetIndex@idx
 13438                           
 13439                           ;ir.c: 12: switch (keynum) {
 13440  0132  294E               	goto	i1l4326
 13441  0133                     i1l4306:	
 13442                           
 13443                           ;ir.c: 14: case 0x54:
 13444                           ;ir.c: 15: case 0x50:
 13445                           ;ir.c: 16: idx = 0;
 13446  0133  01F0               	clrf	i1IR_GetIndex@idx
 13447                           
 13448                           ;ir.c: 17: break;
 13449  0134  29B0               	goto	i1l4328
 13450  0135                     i1l894:	
 13451                           
 13452                           ;ir.c: 19: case 0x55:
 13453                           ;ir.c: 20: case 0x51:
 13454                           ;ir.c: 21: idx = 1;
 13455  0135  01F0               	clrf	i1IR_GetIndex@idx
 13456  0136  0AF0               	incf	i1IR_GetIndex@idx,f
 13457                           
 13458                           ;ir.c: 22: break;
 13459  0137  29B0               	goto	i1l4328
 13460  0138                     i1l4308:	
 13461                           
 13462                           ;ir.c: 24: case 0x49:
 13463                           ;ir.c: 25: case 0x4D:
 13464                           ;ir.c: 26: idx = 2;
 13465  0138  3002               	movlw	2
 13466  0139  294C               	goto	L28
 13467  013A                     i1l4310:	
 13468                           ;ir.c: 27: break;
 13469                           
 13470                           
 13471                           ;ir.c: 29: case 0x44:
 13472                           ;ir.c: 30: case 0x4C:
 13473                           ;ir.c: 31: idx = 3;
 13474  013A  3003               	movlw	3
 13475  013B  294C               	goto	L28
 13476  013C                     i1l4312:	
 13477                           ;ir.c: 32: break;
 13478                           
 13479                           
 13480                           ;ir.c: 34: case 0x40:
 13481                           ;ir.c: 35: idx = 4;
 13482  013C  3004               	movlw	4
 13483  013D  294C               	goto	L28
 13484  013E                     i1l905:	
 13485                           ;ir.c: 36: break;
 13486                           
 13487  013E                     i1l4314:	
 13488                           
 13489                           ;ir.c: 38: case 0x1D:
 13490                           ;ir.c: 39: case 0x1E:
 13491                           ;ir.c: 40: case 0x1F:
 13492                           ;ir.c: 41: idx = keynum - 0x1C + 1;
 13493  013E  0871               	movf	i1IR_GetIndex@keynum,w
 13494  013F  3EE5               	addlw	229
 13495  0140  294C               	goto	L28
 13496  0141                     i1l909:	
 13497                           ;ir.c: 42: break;
 13498                           
 13499  0141                     i1l4316:	
 13500                           
 13501                           ;ir.c: 44: case 0x15:
 13502                           ;ir.c: 45: case 0x16:
 13503                           ;ir.c: 46: case 0x17:
 13504                           ;ir.c: 47: idx = keynum - 0x14 + 5;
 13505  0141  0871               	movf	i1IR_GetIndex@keynum,w
 13506  0142  3EF1               	addlw	241
 13507  0143  294C               	goto	L28
 13508  0144                     i1l913:	
 13509                           ;ir.c: 48: break;
 13510                           
 13511  0144                     i1l4318:	
 13512                           
 13513                           ;ir.c: 50: case 0x0D:
 13514                           ;ir.c: 51: case 0x0E:
 13515                           ;ir.c: 52: case 0x0F:
 13516                           ;ir.c: 53: idx = keynum - 0x0C;
 13517  0144  0871               	movf	i1IR_GetIndex@keynum,w
 13518  0145  3EF4               	addlw	244
 13519  0146  294C               	goto	L28
 13520  0147                     i1l917:	
 13521                           ;ir.c: 54: break;
 13522                           
 13523  0147                     i1l4320:	
 13524                           
 13525                           ;ir.c: 56: case 0x09:
 13526                           ;ir.c: 57: case 0x0A:
 13527                           ;ir.c: 58: case 0x0B:
 13528                           ;ir.c: 59: idx = keynum - 0x08 + 4;
 13529  0147  0871               	movf	i1IR_GetIndex@keynum,w
 13530  0148  3EFC               	addlw	252
 13531  0149  294C               	goto	L28
 13532  014A                     i1l4322:	
 13533                           ;ir.c: 60: break;
 13534                           
 13535                           
 13536                           ;ir.c: 62: case 0x05:
 13537                           ;ir.c: 63: idx = keynum - 0x04 + 8;
 13538  014A  0871               	movf	i1IR_GetIndex@keynum,w
 13539  014B  3E04               	addlw	4
 13540  014C                     L28:	
 13541  014C  00F0               	movwf	i1IR_GetIndex@idx
 13542                           
 13543                           ;ir.c: 64: break;
 13544  014D  29B0               	goto	i1l4328
 13545  014E                     i1l4326:	
 13546  014E  0871               	movf	i1IR_GetIndex@keynum,w
 13547                           
 13548                           ; Switch size 1, requested type "space"
 13549                           ; Number of cases is 32, Range of values is 4 to 89
 13550                           ; switch strategies available:
 13551                           ; Name         Instructions Cycles
 13552                           ; simple_byte           97    49 (average)
 13553                           ; direct_byte          181     9 (fixed)
 13554                           ; jumptable            263     9 (fixed)
 13555                           ;	Chosen strategy is simple_byte
 13556  014F  3A04               	xorlw	4	; case 4
 13557  0150  1903               	skipnz
 13558  0151  294A               	goto	i1l4322
 13559  0152  3A01               	xorlw	1	; case 5
 13560  0153  1903               	skipnz
 13561  0154  294A               	goto	i1l4322
 13562  0155  3A0D               	xorlw	13	; case 8
 13563  0156  1903               	skipnz
 13564  0157  2947               	goto	i1l917
 13565  0158  3A01               	xorlw	1	; case 9
 13566  0159  1903               	skipnz
 13567  015A  2947               	goto	i1l4320
 13568  015B  3A03               	xorlw	3	; case 10
 13569  015C  1903               	skipnz
 13570  015D  2947               	goto	i1l4320
 13571  015E  3A01               	xorlw	1	; case 11
 13572  015F  1903               	skipnz
 13573  0160  2947               	goto	i1l4320
 13574  0161  3A07               	xorlw	7	; case 12
 13575  0162  1903               	skipnz
 13576  0163  2944               	goto	i1l913
 13577  0164  3A01               	xorlw	1	; case 13
 13578  0165  1903               	skipnz
 13579  0166  2944               	goto	i1l4318
 13580  0167  3A03               	xorlw	3	; case 14
 13581  0168  1903               	skipnz
 13582  0169  2944               	goto	i1l4318
 13583  016A  3A01               	xorlw	1	; case 15
 13584  016B  1903               	skipnz
 13585  016C  2944               	goto	i1l4318
 13586  016D  3A1B               	xorlw	27	; case 20
 13587  016E  1903               	skipnz
 13588  016F  2941               	goto	i1l909
 13589  0170  3A01               	xorlw	1	; case 21
 13590  0171  1903               	skipnz
 13591  0172  2941               	goto	i1l4316
 13592  0173  3A03               	xorlw	3	; case 22
 13593  0174  1903               	skipnz
 13594  0175  2941               	goto	i1l4316
 13595  0176  3A01               	xorlw	1	; case 23
 13596  0177  1903               	skipnz
 13597  0178  2941               	goto	i1l4316
 13598  0179  3A0B               	xorlw	11	; case 28
 13599  017A  1903               	skipnz
 13600  017B  293E               	goto	i1l905
 13601  017C  3A01               	xorlw	1	; case 29
 13602  017D  1903               	skipnz
 13603  017E  293E               	goto	i1l4314
 13604  017F  3A03               	xorlw	3	; case 30
 13605  0180  1903               	skipnz
 13606  0181  293E               	goto	i1l4314
 13607  0182  3A01               	xorlw	1	; case 31
 13608  0183  1903               	skipnz
 13609  0184  293E               	goto	i1l4314
 13610  0185  3A5F               	xorlw	95	; case 64
 13611  0186  1903               	skipnz
 13612  0187  293C               	goto	i1l4312
 13613  0188  3A01               	xorlw	1	; case 65
 13614  0189  1903               	skipnz
 13615  018A  293C               	goto	i1l4312
 13616  018B  3A05               	xorlw	5	; case 68
 13617  018C  1903               	skipnz
 13618  018D  293A               	goto	i1l4310
 13619  018E  3A01               	xorlw	1	; case 69
 13620  018F  1903               	skipnz
 13621  0190  2938               	goto	i1l4308
 13622  0191  3A0D               	xorlw	13	; case 72
 13623  0192  1903               	skipnz
 13624  0193  293A               	goto	i1l4310
 13625  0194  3A01               	xorlw	1	; case 73
 13626  0195  1903               	skipnz
 13627  0196  2938               	goto	i1l4308
 13628  0197  3A05               	xorlw	5	; case 76
 13629  0198  1903               	skipnz
 13630  0199  293A               	goto	i1l4310
 13631  019A  3A01               	xorlw	1	; case 77
 13632  019B  1903               	skipnz
 13633  019C  2938               	goto	i1l4308
 13634  019D  3A1D               	xorlw	29	; case 80
 13635  019E  1903               	skipnz
 13636  019F  2933               	goto	i1l4306
 13637  01A0  3A01               	xorlw	1	; case 81
 13638  01A1  1903               	skipnz
 13639  01A2  2935               	goto	i1l894
 13640  01A3  3A05               	xorlw	5	; case 84
 13641  01A4  1903               	skipnz
 13642  01A5  2933               	goto	i1l4306
 13643  01A6  3A01               	xorlw	1	; case 85
 13644  01A7  1903               	skipnz
 13645  01A8  2935               	goto	i1l894
 13646  01A9  3A0D               	xorlw	13	; case 88
 13647  01AA  1903               	skipnz
 13648  01AB  2933               	goto	i1l4306
 13649  01AC  3A01               	xorlw	1	; case 89
 13650  01AD  1903               	skipnz
 13651  01AE  2935               	goto	i1l894
 13652  01AF  29B0               	goto	i1l4328
 13653  01B0                     i1l4328:	
 13654                           
 13655                           ;ir.c: 68: return idx;
 13656  01B0  0870               	movf	i1IR_GetIndex@idx,w
 13657  01B1  0008               	return
 13658  01B2                     __end_ofi1_IR_GetIndex:	
 13659  01B2                     __ptext95:	
 13660 ;; *************** function i1_Led_StartNotice *****************
 13661 ;; Defined at:
 13662 ;;		line 397 in file "user/src/led.c"
 13663 ;; Parameters:    Size  Location     Type
 13664 ;;  cnt             1    wreg     unsigned char 
 13665 ;; Auto vars:     Size  Location     Type
 13666 ;;  cnt             1    1[COMMON] unsigned char 
 13667 ;; Return value:  Size  Location     Type
 13668 ;;                  1    wreg      void 
 13669 ;; Registers used:
 13670 ;;		wreg, status,2, status,0, pclath, cstack
 13671 ;; Tracked objects:
 13672 ;;		On entry : 0/0
 13673 ;;		On exit  : 1F/8
 13674 ;;		Unchanged: 0/0
 13675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13678 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13679 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13680 ;;Total ram usage:        2 bytes
 13681 ;; Hardware stack levels used:    1
 13682 ;; Hardware stack levels required when called:    1
 13683 ;; This function calls:
 13684 ;;		i1_TMR4_StartTimer
 13685 ;; This function is called by:
 13686 ;;		_IR_ScanLongPress
 13687 ;; This function uses a non-reentrant model
 13688 ;;
 13689                           
 13690                           
 13691                           ;psect for function i1_Led_StartNotice
 13692  01B2                     i1_Led_StartNotice:	
 13693                           
 13694                           ;incstack = 0
 13695                           ; Regs used in i1_Led_StartNotice: [wreg+status,2+status,0+pclath+cstack]
 13696                           ;i1Led_StartNotice@cnt stored from wreg
 13697  01B2  00F1               	movwf	i1Led_StartNotice@cnt
 13698                           
 13699                           ;led.c: 398: gLedRunPara.mNoticeCount = cnt;
 13700  01B3  00F0               	movwf	??i1_Led_StartNotice
 13701  01B4  0DF0               	rlf	??i1_Led_StartNotice,f
 13702  01B5  0DF0               	rlf	??i1_Led_StartNotice,f
 13703  01B6  0021               	movlb	1	; select bank1
 13704  01B7  085C               	movf	(_gLedRunPara^(0+128)+20),w	;volatile
 13705  01B8  0670               	xorwf	??i1_Led_StartNotice,w
 13706  01B9  3903               	andlw	-253
 13707  01BA  0670               	xorwf	??i1_Led_StartNotice,w
 13708  01BB  00DC               	movwf	(_gLedRunPara^(0+128)+20)	;volatile
 13709                           
 13710                           ;led.c: 399: TMR4_StartTimer();
 13711  01BC  2246               	fcall	i1_TMR4_StartTimer
 13712  01BD  0008               	return
 13713  01BE                     __end_ofi1_Led_StartNotice:	
 13714  01BE                     __ptext98:	
 13715 ;; *************** function _Led_SetCustom *****************
 13716 ;; Defined at:
 13717 ;;		line 256 in file "user/src/led.c"
 13718 ;; Parameters:    Size  Location     Type
 13719 ;;  idx             1    wreg     unsigned char 
 13720 ;;  pValue          1    3[COMMON] PTR unsigned int 
 13721 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), 
 13722 ;; Auto vars:     Size  Location     Type
 13723 ;;  idx             1    7[COMMON] unsigned char 
 13724 ;;  i               1   10[COMMON] unsigned char 
 13725 ;;  value           2    8[COMMON] unsigned int 
 13726 ;; Return value:  Size  Location     Type
 13727 ;;                  1    wreg      void 
 13728 ;; Registers used:
 13729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13730 ;; Tracked objects:
 13731 ;;		On entry : 1F/0
 13732 ;;		On exit  : 0/0
 13733 ;;		Unchanged: 0/0
 13734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13735 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13739 ;;Total ram usage:        8 bytes
 13740 ;; Hardware stack levels used:    1
 13741 ;; Hardware stack levels required when called:    1
 13742 ;; This function calls:
 13743 ;;		i1___bmul
 13744 ;; This function is called by:
 13745 ;;		_IR_ScanLongPress
 13746 ;; This function uses a non-reentrant model
 13747 ;;
 13748                           
 13749                           
 13750                           ;psect for function _Led_SetCustom
 13751  01BE                     _Led_SetCustom:	
 13752                           
 13753                           ;incstack = 0
 13754                           ; Regs used in _Led_SetCustom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13755                           ;Led_SetCustom@idx stored from wreg
 13756  01BE  00F7               	movwf	Led_SetCustom@idx
 13757                           
 13758                           ;led.c: 257: uint16_t value;
 13759                           ;led.c: 258: if (idx >= 4) {
 13760  01BF  3004               	movlw	4
 13761  01C0  0277               	subwf	Led_SetCustom@idx,w
 13762  01C1  1803               	btfsc	3,0
 13763  01C2  0008               	return
 13764                           
 13765                           ;led.c: 260: }
 13766                           ;led.c: 261: for (uint8_t i = 0; i < 5; i++) {
 13767  01C3  01FA               	clrf	Led_SetCustom@i
 13768  01C4                     i1l6102:	
 13769                           
 13770                           ;led.c: 262: value = *pValue++;
 13771  01C4  0873               	movf	Led_SetCustom@pValue,w
 13772  01C5  0086               	movwf	6
 13773  01C6  0187               	clrf	7
 13774  01C7  3F40               	moviw [0]fsr1
 13775  01C8  00F8               	movwf	Led_SetCustom@value
 13776  01C9  3F41               	moviw [1]fsr1
 13777  01CA  00F9               	movwf	Led_SetCustom@value+1
 13778  01CB  3003               	movlw	3
 13779  01CC  0AF3               	incf	Led_SetCustom@pValue,f
 13780  01CD  0AF3               	incf	Led_SetCustom@pValue,f
 13781                           
 13782                           ;led.c: 266: if (value <= 1000)
 13783  01CE  0279               	subwf	Led_SetCustom@value+1,w
 13784  01CF  30E9               	movlw	233
 13785  01D0  1903               	skipnz
 13786  01D1  0278               	subwf	Led_SetCustom@value,w
 13787  01D2  1803               	skipnc
 13788  01D3  29E8               	goto	i1l6110
 13789                           
 13790                           ;led.c: 268: {
 13791                           ;led.c: 269: gLedPara.mCustom[idx][i] = value;
 13792  01D4  087A               	movf	Led_SetCustom@i,w
 13793  01D5  00F4               	movwf	??_Led_SetCustom
 13794  01D6  302E               	movlw	(low ((_gLedPara| (0+256)+14)))& (0+255)
 13795  01D7  35F4               	lslf	??_Led_SetCustom,f
 13796  01D8  0774               	addwf	??_Led_SetCustom,w
 13797  01D9  00F5               	movwf	??_Led_SetCustom+1
 13798  01DA  300A               	movlw	10
 13799  01DB  00F0               	movwf	i1___bmul@multiplicand
 13800  01DC  0877               	movf	Led_SetCustom@idx,w
 13801  01DD  21EE  3180         	fcall	i1___bmul
 13802  01DF  0775               	addwf	??_Led_SetCustom+1,w
 13803  01E0  00F6               	movwf	??_Led_SetCustom+2
 13804  01E1  0086               	movwf	6
 13805  01E2  3001               	movlw	1	; select bank2/3
 13806  01E3  0087               	movwf	7
 13807  01E4  0878               	movf	Led_SetCustom@value,w
 13808  01E5  3FC0               	movwi [0]fsr1
 13809  01E6  0879               	movf	Led_SetCustom@value+1,w
 13810  01E7  3FC1               	movwi [1]fsr1
 13811  01E8                     i1l6110:	
 13812  01E8  3005               	movlw	5
 13813  01E9  0AFA               	incf	Led_SetCustom@i,f
 13814  01EA  027A               	subwf	Led_SetCustom@i,w
 13815  01EB  1803               	btfsc	3,0
 13816  01EC  0008               	return
 13817  01ED  29C4               	goto	i1l6102
 13818  01EE                     __end_of_Led_SetCustom:	
 13819  01EE                     __ptext99:	
 13820 ;; *************** function i1___bmul *****************
 13821 ;; Defined at:
 13822 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul8.c"
 13823 ;; Parameters:    Size  Location     Type
 13824 ;;  multiplier      1    wreg     unsigned char 
 13825 ;;  multiplicand    1    0[COMMON] unsigned char 
 13826 ;; Auto vars:     Size  Location     Type
 13827 ;;  multiplier      1    1[COMMON] unsigned char 
 13828 ;;  __bmul          1    2[COMMON] unsigned char 
 13829 ;; Return value:  Size  Location     Type
 13830 ;;                  1    wreg      unsigned char 
 13831 ;; Registers used:
 13832 ;;		wreg, status,2, status,0
 13833 ;; Tracked objects:
 13834 ;;		On entry : 0/0
 13835 ;;		On exit  : 0/0
 13836 ;;		Unchanged: 0/0
 13837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13838 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13839 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13841 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13842 ;;Total ram usage:        3 bytes
 13843 ;; Hardware stack levels used:    1
 13844 ;; This function calls:
 13845 ;;		Nothing
 13846 ;; This function is called by:
 13847 ;;		_Led_SetCustom
 13848 ;; This function uses a non-reentrant model
 13849 ;;
 13850                           
 13851                           
 13852                           ;psect for function i1___bmul
 13853  01EE                     i1___bmul:	
 13854                           
 13855                           ;incstack = 0
 13856                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 13857                           ;i1___bmul@multiplier stored from wreg
 13858  01EE  00F1               	movwf	i1___bmul@multiplier
 13859  01EF  01F2               	clrf	i1___bmul@product
 13860  01F0                     i1l3960:	
 13861  01F0  0870               	movf	i1___bmul@multiplicand,w
 13862  01F1  1871               	btfsc	i1___bmul@multiplier,0
 13863  01F2  07F2               	addwf	i1___bmul@product,f
 13864  01F3  35F0               	lslf	i1___bmul@multiplicand,f
 13865  01F4  36F1               	lsrf	i1___bmul@multiplier,f
 13866  01F5  0871               	movf	i1___bmul@multiplier,w
 13867  01F6  1D03               	btfss	3,2
 13868  01F7  29F0               	goto	i1l3960
 13869  01F8  0872               	movf	i1___bmul@product,w
 13870  01F9  0008               	return
 13871  01FA                     __end_ofi1___bmul:	
 13872  01FA                     __ptext94:	
 13873 ;; *************** function i1_Util_DecValue *****************
 13874 ;; Defined at:
 13875 ;;		line 15 in file "user/src/util.c"
 13876 ;; Parameters:    Size  Location     Type
 13877 ;;  pSrc            2    0[COMMON] PTR unsigned int 
 13878 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara(26), gLedPara.mVolume(1), gLedPara(78), 
 13879 ;;  min             2    2[COMMON] unsigned int 
 13880 ;;  delta           2    4[COMMON] unsigned int 
 13881 ;; Auto vars:     Size  Location     Type
 13882 ;;		None
 13883 ;; Return value:  Size  Location     Type
 13884 ;;                  1    wreg      void 
 13885 ;; Registers used:
 13886 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13887 ;; Tracked objects:
 13888 ;;		On entry : 1F/0
 13889 ;;		On exit  : 1F/0
 13890 ;;		Unchanged: 1F/0
 13891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13892 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13894 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13895 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13896 ;;Total ram usage:       10 bytes
 13897 ;; Hardware stack levels used:    1
 13898 ;; This function calls:
 13899 ;;		Nothing
 13900 ;; This function is called by:
 13901 ;;		_IR_ScanLongPress
 13902 ;; This function uses a non-reentrant model
 13903 ;;
 13904                           
 13905                           
 13906                           ;psect for function i1_Util_DecValue
 13907  01FA                     i1_Util_DecValue:	
 13908                           
 13909                           ;util.c: 17: if( *pSrc > min + delta )
 13910                           
 13911                           ;incstack = 0
 13912                           ; Regs used in i1_Util_DecValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 13913  01FA  0870               	movf	i1Util_DecValue@pSrc,w
 13914  01FB  0086               	movwf	6
 13915  01FC  0871               	movf	i1Util_DecValue@pSrc+1,w
 13916  01FD  0087               	movwf	7
 13917  01FE  3F40               	moviw [0]fsr1
 13918  01FF  00F6               	movwf	??i1_Util_DecValue
 13919  0200  3F41               	moviw [1]fsr1
 13920  0201  00F7               	movwf	??i1_Util_DecValue+1
 13921  0202  0874               	movf	i1Util_DecValue@delta,w
 13922  0203  0772               	addwf	i1Util_DecValue@min,w
 13923  0204  00F8               	movwf	??i1_Util_DecValue+2
 13924  0205  0875               	movf	i1Util_DecValue@delta+1,w
 13925  0206  3D73               	addwfc	i1Util_DecValue@min+1,w
 13926  0207  00F9               	movwf	??i1_Util_DecValue+3
 13927  0208  0877               	movf	??i1_Util_DecValue+1,w
 13928  0209  0279               	subwf	??i1_Util_DecValue+3,w
 13929  020A  1D03               	skipz
 13930  020B  2A0E               	goto	u296_25
 13931  020C  0876               	movf	??i1_Util_DecValue,w
 13932  020D  0278               	subwf	??i1_Util_DecValue+2,w
 13933  020E                     u296_25:	
 13934                           
 13935                           ;util.c: 18: {
 13936                           ;util.c: 19: (*pSrc) -= delta;
 13937  020E  0870               	movf	i1Util_DecValue@pSrc,w
 13938  020F  0086               	movwf	6
 13939  0210  0871               	movf	i1Util_DecValue@pSrc+1,w
 13940  0211  0087               	movwf	7
 13941  0212  1803               	skipnc
 13942  0213  2A1B               	goto	L21
 13943  0214  0874               	movf	i1Util_DecValue@delta,w
 13944  0215  0281               	subwf	1,f
 13945  0216  3141               	addfsr 1,1
 13946  0217  0875               	movf	i1Util_DecValue@delta+1,w
 13947  0218  3B81               	subwfb	1,f
 13948  0219  317F               	addfsr 1,-1
 13949                           
 13950                           ;util.c: 20: }
 13951  021A  0008               	return
 13952  021B                     L21:	
 13953                           ;util.c: 21: else
 13954                           ;util.c: 22: {
 13955                           ;util.c: 23: *pSrc = min;
 13956                           
 13957  021B  0872               	movf	i1Util_DecValue@min,w
 13958  021C  3FC0               	movwi [0]fsr1
 13959  021D  0873               	movf	i1Util_DecValue@min+1,w
 13960  021E  3FC1               	movwi [1]fsr1
 13961  021F  0008               	return
 13962  0220                     __end_ofi1_Util_DecValue:	
 13963  0220                     __ptext93:	
 13964 ;; *************** function i1_Util_IncValue *****************
 13965 ;; Defined at:
 13966 ;;		line 3 in file "user/src/util.c"
 13967 ;; Parameters:    Size  Location     Type
 13968 ;;  pSrc            2    0[COMMON] PTR unsigned int 
 13969 ;;		 -> gLedRunPara.mTargetBright(10), gLedRunPara.mCurrentBright(10), gLedRunPara(26), gLedPara.mVolume(1), 
 13970 ;;		 -> gLedPara(78), 
 13971 ;;  max             2    2[COMMON] unsigned int 
 13972 ;;  delta           2    4[COMMON] unsigned int 
 13973 ;; Auto vars:     Size  Location     Type
 13974 ;;		None
 13975 ;; Return value:  Size  Location     Type
 13976 ;;                  1    wreg      void 
 13977 ;; Registers used:
 13978 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13979 ;; Tracked objects:
 13980 ;;		On entry : 1F/0
 13981 ;;		On exit  : 1F/0
 13982 ;;		Unchanged: 1F/0
 13983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13984 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13986 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13987 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13988 ;;Total ram usage:       10 bytes
 13989 ;; Hardware stack levels used:    1
 13990 ;; This function calls:
 13991 ;;		Nothing
 13992 ;; This function is called by:
 13993 ;;		_IR_ScanLongPress
 13994 ;; This function uses a non-reentrant model
 13995 ;;
 13996                           
 13997                           
 13998                           ;psect for function i1_Util_IncValue
 13999  0220                     i1_Util_IncValue:	
 14000                           
 14001                           ;util.c: 5: if( *pSrc + delta < max )
 14002                           
 14003                           ;incstack = 0
 14004                           ; Regs used in i1_Util_IncValue: [wreg+fsr1l+fsr1h+status,2+status,0]
 14005  0220  0870               	movf	i1Util_IncValue@pSrc,w
 14006  0221  0086               	movwf	6
 14007  0222  0871               	movf	i1Util_IncValue@pSrc+1,w
 14008  0223  0087               	movwf	7
 14009  0224  3F40               	moviw [0]fsr1
 14010  0225  00F6               	movwf	??i1_Util_IncValue
 14011  0226  3F41               	moviw [1]fsr1
 14012  0227  00F7               	movwf	??i1_Util_IncValue+1
 14013  0228  0874               	movf	i1Util_IncValue@delta,w
 14014  0229  0776               	addwf	??i1_Util_IncValue,w
 14015  022A  00F8               	movwf	??i1_Util_IncValue+2
 14016  022B  0875               	movf	i1Util_IncValue@delta+1,w
 14017  022C  3D77               	addwfc	??i1_Util_IncValue+1,w
 14018  022D  00F9               	movwf	??i1_Util_IncValue+3
 14019  022E  0873               	movf	i1Util_IncValue@max+1,w
 14020  022F  0279               	subwf	??i1_Util_IncValue+3,w
 14021  0230  1D03               	skipz
 14022  0231  2A34               	goto	u295_25
 14023  0232  0872               	movf	i1Util_IncValue@max,w
 14024  0233  0278               	subwf	??i1_Util_IncValue+2,w
 14025  0234                     u295_25:	
 14026                           
 14027                           ;util.c: 6: {
 14028                           ;util.c: 7: (*pSrc) += delta;
 14029  0234  0870               	movf	i1Util_IncValue@pSrc,w
 14030  0235  0086               	movwf	6
 14031  0236  0871               	movf	i1Util_IncValue@pSrc+1,w
 14032  0237  0087               	movwf	7
 14033  0238  1803               	skipnc
 14034  0239  2A41               	goto	L20
 14035  023A  0874               	movf	i1Util_IncValue@delta,w
 14036  023B  0781               	addwf	1,f
 14037  023C  3141               	addfsr 1,1
 14038  023D  0875               	movf	i1Util_IncValue@delta+1,w
 14039  023E  3D81               	addwfc	1,f
 14040  023F  317F               	addfsr 1,-1
 14041                           
 14042                           ;util.c: 8: }
 14043  0240  0008               	return
 14044  0241                     L20:	
 14045                           ;util.c: 9: else
 14046                           ;util.c: 10: {
 14047                           ;util.c: 11: *pSrc = max;
 14048                           
 14049  0241  0872               	movf	i1Util_IncValue@max,w
 14050  0242  3FC0               	movwi [0]fsr1
 14051  0243  0873               	movf	i1Util_IncValue@max+1,w
 14052  0244  3FC1               	movwi [1]fsr1
 14053  0245  0008               	return
 14054  0246                     __end_ofi1_Util_IncValue:	
 14055  0246                     __ptext96:	
 14056 ;; *************** function i1_TMR4_StartTimer *****************
 14057 ;; Defined at:
 14058 ;;		line 17 in file "driver/src/tmr4.c"
 14059 ;; Parameters:    Size  Location     Type
 14060 ;;		None
 14061 ;; Auto vars:     Size  Location     Type
 14062 ;;		None
 14063 ;; Return value:  Size  Location     Type
 14064 ;;                  1    wreg      void 
 14065 ;; Registers used:
 14066 ;;		None
 14067 ;; Tracked objects:
 14068 ;;		On entry : 1F/1
 14069 ;;		On exit  : 1F/8
 14070 ;;		Unchanged: 0/0
 14071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14076 ;;Total ram usage:        0 bytes
 14077 ;; Hardware stack levels used:    1
 14078 ;; This function calls:
 14079 ;;		Nothing
 14080 ;; This function is called by:
 14081 ;;		i1_Led_StartNotice
 14082 ;; This function uses a non-reentrant model
 14083 ;;
 14084                           
 14085                           
 14086                           ;psect for function i1_TMR4_StartTimer
 14087  0246                     i1_TMR4_StartTimer:	
 14088                           
 14089                           ;tmr4.c: 19: T4CONbits.TMR4ON = 1;
 14090                           
 14091                           ;incstack = 0
 14092                           ; Regs used in i1_TMR4_StartTimer: []
 14093  0246  0028               	movlb	8	; select bank8
 14094  0247  1517               	bsf	23,2	;volatile
 14095  0248  0008               	return
 14096  0249                     __end_ofi1_TMR4_StartTimer:	
 14097  0249                     __ptext86:	
 14098 ;; *************** function _Led_Ramp *****************
 14099 ;; Defined at:
 14100 ;;		line 274 in file "user/src/led.c"
 14101 ;; Parameters:    Size  Location     Type
 14102 ;;		None
 14103 ;; Auto vars:     Size  Location     Type
 14104 ;;  i               1   10[COMMON] unsigned char 
 14105 ;; Return value:  Size  Location     Type
 14106 ;;                  1    wreg      void 
 14107 ;; Registers used:
 14108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14109 ;; Tracked objects:
 14110 ;;		On entry : 1C/0
 14111 ;;		On exit  : 14/4
 14112 ;;		Unchanged: 0/0
 14113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14117 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14118 ;;Total ram usage:        7 bytes
 14119 ;; Hardware stack levels used:    1
 14120 ;; Hardware stack levels required when called:    1
 14121 ;; This function calls:
 14122 ;;		i1_PWM1_LoadDutyValue
 14123 ;;		i1_PWM2_LoadDutyValue
 14124 ;;		i1_PWM3_LoadDutyValue
 14125 ;;		i1_PWM4_LoadDutyValue
 14126 ;;		i1_PWM5_LoadDutyValue
 14127 ;; This function is called by:
 14128 ;;		_Led_Run
 14129 ;; This function uses a non-reentrant model
 14130 ;;
 14131                           
 14132                           
 14133                           ;psect for function _Led_Ramp
 14134  0249                     _Led_Ramp:	
 14135  0249                     i1l6270:	
 14136                           ;incstack = 0
 14137                           ; Regs used in _Led_Ramp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14138                           
 14139                           
 14140                           ;led.c: 275: for (uint8_t i = 0; i < 5; i++) {
 14141  0249  01FA               	clrf	Led_Ramp@i
 14142  024A                     i1l6276:	
 14143                           
 14144                           ;led.c: 276: if (gLedRunPara.mCurrentBright[i] + 1 < gLedRunPara.mTargetBright[i]) {
 14145  024A  357A               	lslf	Led_Ramp@i,w
 14146  024B  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14147  024C  229E  3180         	fcall	PL62	;call to abstracted procedure
 14148  024E  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14149  024F  2285  3180         	fcall	PL12	;call to abstracted procedure
 14150  0251  1803               	skipnc
 14151  0252  2A59               	goto	i1l6280
 14152                           
 14153                           ;led.c: 277: gLedRunPara.mCurrentBright[i] += 1;
 14154  0253  357A               	lslf	Led_Ramp@i,w
 14155  0254  25FD  3180         	fcall	PL22	;call to abstracted procedure
 14156  0256  1803               	skipnc
 14157  0257  0A81               	incf	1,f
 14158                           
 14159                           ;led.c: 278: } else if (gLedRunPara.mCurrentBright[i] > gLedRunPara.mTargetBright[i] + 1
      +                          ) {
 14160  0258  2A6E               	goto	i1l6286
 14161  0259                     i1l6280:	
 14162  0259  357A               	lslf	Led_Ramp@i,w
 14163  025A  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14164  025B  229E  3180         	fcall	PL62	;call to abstracted procedure
 14165  025D  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14166  025E  2285  3180         	fcall	PL12	;call to abstracted procedure
 14167  0260  1803               	skipnc
 14168  0261  2A66               	goto	i1l6284
 14169                           
 14170                           ;led.c: 279: gLedRunPara.mCurrentBright[i] -= 1;
 14171  0262  357A               	lslf	Led_Ramp@i,w
 14172  0263  25E8  3180         	fcall	PL4	;call to abstracted procedure
 14173                           
 14174                           ;led.c: 280: } else {
 14175  0265  2A6E               	goto	i1l6286
 14176  0266                     i1l6284:	
 14177                           
 14178                           ;led.c: 281: gLedRunPara.mCurrentBright[i] = gLedRunPara.mTargetBright[i];
 14179  0266  357A               	lslf	Led_Ramp@i,w
 14180  0267  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14181  0268  0086               	movwf	6
 14182  0269  0187               	clrf	7
 14183  026A  357A               	lslf	Led_Ramp@i,w
 14184  026B  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14185  026C  227E  3180         	fcall	PL6	;call to abstracted procedure
 14186  026E                     i1l6286:	
 14187                           
 14188                           ;led.c: 282: }
 14189                           ;led.c: 283: loadDuty[i](gLedRunPara.mCurrentBright[i]);
 14190  026E  357A               	lslf	Led_Ramp@i,w
 14191  026F  22A6               	fcall	PL78	;call to abstracted procedure
 14192  0270  357A               	lslf	Led_Ramp@i,w
 14193  0271  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
 14194  0272  0086               	movwf	6
 14195  0273  3F41               	moviw [1]fsr1
 14196  0274  008A               	movwf	10
 14197  0275  3F40               	moviw [0]fsr1
 14198  0276  000A               	callw
 14199  0277  3005               	movlw	5
 14200  0278  3180               	pagesel	$
 14201  0279  0AFA               	incf	Led_Ramp@i,f
 14202  027A  027A               	subwf	Led_Ramp@i,w
 14203  027B  1803               	btfsc	3,0
 14204  027C  0008               	return
 14205  027D  2A4A               	goto	i1l6276
 14206  027E                     __end_of_Led_Ramp:	
 14207  027E                     PL6:	
 14208  027E  0084               	movwf	4
 14209  027F  0185               	clrf	5
 14210  0280  3F40               	moviw [0]fsr1
 14211  0281  3F80               	movwi [0]fsr0
 14212  0282  3F41               	moviw [1]fsr1
 14213  0283  3F81               	movwi [1]fsr0
 14214  0284  0008               	return
 14215  0285                     __end_ofPL6:	
 14216  0285                     PL12:	
 14217  0285  0086               	movwf	6
 14218  0286  3F40               	moviw [0]fsr1
 14219  0287  00F6               	movwf	??_Led_Ramp+2
 14220  0288  3F41               	moviw [1]fsr1
 14221  0289  00F7               	movwf	??_Led_Ramp+3
 14222  028A  0876               	movf	??_Led_Ramp+2,w
 14223  028B  3E01               	addlw	1
 14224  028C  00F8               	movwf	??_Led_Ramp+4
 14225  028D  3000               	movlw	0
 14226  028E  3D77               	addwfc	??_Led_Ramp+3,w
 14227  028F  00F9               	movwf	??_Led_Ramp+5
 14228  0290  0875               	movf	??_Led_Ramp+1,w
 14229  0291  0279               	subwf	??_Led_Ramp+5,w
 14230  0292  1D03               	skipz
 14231  0293  0008               	return
 14232  0294  0874               	movf	??_Led_Ramp,w
 14233  0295  0278               	subwf	??_Led_Ramp+4,w
 14234  0296  0008               	return
 14235  0297                     __end_ofPL12:	
 14236  0297                     PL18:	
 14237  0297  0AA0               	incf	IR_ScanLongPress@cnt,f
 14238  0298  1903               	skipnz
 14239  0299  0AA1               	incf	IR_ScanLongPress@cnt+1,f
 14240  029A  3002               	movlw	2
 14241  029B  0621               	xorwf	IR_ScanLongPress@cnt+1,w
 14242  029C  0420               	iorwf	IR_ScanLongPress@cnt,w
 14243  029D  0008               	return
 14244  029E                     __end_ofPL18:	
 14245  029E                     PL62:	
 14246  029E  0086               	movwf	6
 14247  029F  0187               	clrf	7
 14248  02A0  3F40               	moviw [0]fsr1
 14249  02A1  00F4               	movwf	??_Led_Ramp
 14250  02A2  3F41               	moviw [1]fsr1
 14251  02A3  00F5               	movwf	??_Led_Ramp+1
 14252  02A4  357A               	lslf	Led_Ramp@i,w
 14253  02A5  0008               	return
 14254  02A6                     __end_ofPL62:	
 14255  02A6                     PL78:	
 14256  02A6  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14257  02A7  0086               	movwf	6
 14258  02A8  0187               	clrf	7
 14259  02A9  3F40               	moviw [0]fsr1
 14260  02AA  00F0               	movwf	i1PWM5_LoadDutyValue@dutyValue
 14261  02AB  3F41               	moviw [1]fsr1
 14262  02AC  00F1               	movwf	i1PWM5_LoadDutyValue@dutyValue+1
 14263  02AD  0008               	return
 14264  02AE                     __end_ofPL78:	
 14265  02AE                     __ptext27:	
 14266 ;; *************** function _Led_CheckAutoStatus *****************
 14267 ;; Defined at:
 14268 ;;		line 316 in file "user/src/led.c"
 14269 ;; Parameters:    Size  Location     Type
 14270 ;;		None
 14271 ;; Auto vars:     Size  Location     Type
 14272 ;;  i               1   28[BANK0 ] unsigned char 
 14273 ;;  i               1   27[BANK0 ] unsigned char 
 14274 ;;  i               1   29[BANK0 ] unsigned char 
 14275 ;;  ct              2   25[BANK0 ] unsigned int 
 14276 ;;  sunset          2   23[BANK0 ] unsigned int 
 14277 ;;  sunrise         2   21[BANK0 ] unsigned int 
 14278 ;; Return value:  Size  Location     Type
 14279 ;;                  1    wreg      void 
 14280 ;; Registers used:
 14281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14282 ;; Tracked objects:
 14283 ;;		On entry : 1F/2
 14284 ;;		On exit  : 1E/0
 14285 ;;		Unchanged: 0/0
 14286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14288 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14290 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14291 ;;Total ram usage:       10 bytes
 14292 ;; Hardware stack levels used:    1
 14293 ;; Hardware stack levels required when called:    9
 14294 ;; This function calls:
 14295 ;;		_Led_UpdateBright
 14296 ;;		_RTC_GetTime
 14297 ;;		___wmul
 14298 ;; This function is called by:
 14299 ;;		_main
 14300 ;; This function uses a non-reentrant model
 14301 ;;
 14302                           
 14303                           
 14304                           ;psect for function _Led_CheckAutoStatus
 14305  02AE                     _Led_CheckAutoStatus:	
 14306                           
 14307                           ;led.c: 317: uint16_t ct = RTC_GetTime()->hour * 60u + RTC_GetTime()->minute;
 14308                           
 14309                           ;incstack = 0
 14310                           ; Regs used in _Led_CheckAutoStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14311  02AE  318D  255E  3180   	fcall	_RTC_GetTime
 14312  02B1  2334               	fcall	PL54	;call to abstracted procedure
 14313  02B2  318C  24D9  3180   	fcall	___wmul
 14314  02B5  084F               	movf	?___wmul+1,w
 14315  02B6  00DA               	movwf	Led_CheckAutoStatus@ct+1
 14316  02B7  084E               	movf	?___wmul,w
 14317  02B8  00D9               	movwf	Led_CheckAutoStatus@ct
 14318  02B9  318D  255E  3180   	fcall	_RTC_GetTime
 14319  02BC  0020               	movlb	0	; select bank0
 14320  02BD  00D4               	movwf	??_Led_CheckAutoStatus
 14321  02BE  3E01               	addlw	1
 14322  02BF  0086               	movwf	6
 14323  02C0  0187               	clrf	7
 14324  02C1  0801               	movf	1,w
 14325  02C2  07D9               	addwf	Led_CheckAutoStatus@ct,f
 14326  02C3  1803               	skipnc
 14327  02C4  0ADA               	incf	Led_CheckAutoStatus@ct+1,f
 14328                           
 14329                           ;led.c: 318: uint16_t sunrise = gLedPara.mSunrise;
 14330  02C5  0022               	movlb	2	; select bank2
 14331  02C6  0857               	movf	((_gLedPara+1)^(0+256)+54),w	;volatile
 14332  02C7  0020               	movlb	0	; select bank0
 14333  02C8  00D6               	movwf	Led_CheckAutoStatus@sunrise+1
 14334  02C9  0022               	movlb	2	; select bank2
 14335  02CA  0856               	movf	(_gLedPara^(0+256)+54),w	;volatile
 14336  02CB  0020               	movlb	0	; select bank0
 14337  02CC  00D5               	movwf	Led_CheckAutoStatus@sunrise
 14338                           
 14339                           ;led.c: 319: uint16_t sunset = gLedPara.mSunset;
 14340  02CD  0022               	movlb	2	; select bank2
 14341  02CE  0863               	movf	((_gLedPara+1)^(0+256)+66),w	;volatile
 14342  02CF  0020               	movlb	0	; select bank0
 14343  02D0  00D8               	movwf	Led_CheckAutoStatus@sunset+1
 14344  02D1  0022               	movlb	2	; select bank2
 14345  02D2  0862               	movf	(_gLedPara^(0+256)+66),w	;volatile
 14346  02D3  0020               	movlb	0	; select bank0
 14347  02D4  00D7               	movwf	Led_CheckAutoStatus@sunset
 14348                           
 14349                           ;led.c: 320: if (sunrise == sunset) {
 14350  02D5  0858               	movf	Led_CheckAutoStatus@sunset+1,w
 14351  02D6  0656               	xorwf	Led_CheckAutoStatus@sunrise+1,w
 14352  02D7  1D03               	skipz
 14353  02D8  2ADB               	goto	u5965
 14354  02D9  0857               	movf	Led_CheckAutoStatus@sunset,w
 14355  02DA  0655               	xorwf	Led_CheckAutoStatus@sunrise,w
 14356  02DB                     u5965:	
 14357  02DB  1D03               	skipz
 14358  02DC  2AF8               	goto	l7032
 14359                           
 14360                           ;led.c: 321: for (uint8_t i = 0; i < 5; i++) {
 14361  02DD  01DD               	clrf	Led_CheckAutoStatus@i
 14362  02DE                     l7020:	
 14363                           
 14364                           ;led.c: 322: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
 14365  02DE  355D               	lslf	Led_CheckAutoStatus@i,w
 14366  02DF  3E64               	addlw	(low ((_gLedPara| (0+256)+68)))& (0+255)
 14367  02E0  0086               	movwf	6
 14368  02E1  3001               	movlw	1	; select bank2/3
 14369  02E2  0087               	movwf	7
 14370  02E3  355D               	lslf	Led_CheckAutoStatus@i,w
 14371  02E4  232C               	fcall	PL2	;call to abstracted procedure
 14372                           
 14373                           ;led.c: 323: gLedRunPara.mCurrentBright[i] = gLedPara.mNightBright[i];
 14374  02E5  355D               	lslf	Led_CheckAutoStatus@i,w
 14375  02E6  3E64               	addlw	(low ((_gLedPara| (0+256)+68)))& (0+255)
 14376  02E7  0086               	movwf	6
 14377  02E8  355D               	lslf	Led_CheckAutoStatus@i,w
 14378  02E9  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14379  02EA  0084               	movwf	4
 14380  02EB  318E  26DD  3180   	fcall	PL24	;call to abstracted procedure
 14381  02EE  0ADD               	incf	Led_CheckAutoStatus@i,f
 14382  02EF  025D               	subwf	Led_CheckAutoStatus@i,w
 14383  02F0  1C03               	skipc
 14384  02F1  2ADE               	goto	l7020
 14385                           
 14386                           ;led.c: 324: }
 14387                           ;led.c: 325: gLedRunPara.auto_state = 0;
 14388  02F2  0021               	movlb	1	; select bank1
 14389  02F3  01DD               	clrf	(_gLedRunPara^(0+128)+21)	;volatile
 14390                           
 14391                           ;led.c: 326: gLedRunPara.auto_num = 0;
 14392  02F4  01DE               	clrf	(_gLedRunPara^(0+128)+22)	;volatile
 14393  02F5  01DF               	clrf	((_gLedRunPara+1)^(0+128)+22)	;volatile
 14394                           
 14395                           ;led.c: 327: Led_UpdateBright();
 14396  02F6  318A  2A50         	ljmp	l5912
 14397  02F8                     l7032:	
 14398                           
 14399                           ;led.c: 329: }
 14400                           ;led.c: 330: if (ct == sunrise) {
 14401  02F8  0856               	movf	Led_CheckAutoStatus@sunrise+1,w
 14402  02F9  065A               	xorwf	Led_CheckAutoStatus@ct+1,w
 14403  02FA  1D03               	skipz
 14404  02FB  2AFE               	goto	u5985
 14405  02FC  0855               	movf	Led_CheckAutoStatus@sunrise,w
 14406  02FD  0659               	xorwf	Led_CheckAutoStatus@ct,w
 14407  02FE                     u5985:	
 14408  02FE  1D03               	skipz
 14409  02FF  2B14               	goto	l7052
 14410                           
 14411                           ;led.c: 331: for (uint8_t i = 0; i < 5; i++) {
 14412  0300  01DB               	clrf	Led_CheckAutoStatus@i_1236
 14413  0301                     l7040:	
 14414                           
 14415                           ;led.c: 332: gLedRunPara.mTargetBright[i] = gLedPara.mDayBright[i];
 14416  0301  355B               	lslf	Led_CheckAutoStatus@i_1236,w
 14417  0302  3E58               	addlw	(low ((_gLedPara| (0+256)+56)))& (0+255)
 14418  0303  0086               	movwf	6
 14419  0304  3001               	movlw	1	; select bank2/3
 14420  0305  0087               	movwf	7
 14421  0306  355B               	lslf	Led_CheckAutoStatus@i_1236,w
 14422  0307  232C  3180         	fcall	PL2	;call to abstracted procedure
 14423  0309  3005               	movlw	5
 14424  030A  0ADB               	incf	Led_CheckAutoStatus@i_1236,f
 14425  030B  025B               	subwf	Led_CheckAutoStatus@i_1236,w
 14426  030C  1C03               	skipc
 14427  030D  2B01               	goto	l7040
 14428                           
 14429                           ;led.c: 333: }
 14430                           ;led.c: 334: gLedRunPara.auto_state = 1;
 14431  030E  3001               	movlw	1
 14432  030F                     L1:	
 14433  030F  0021               	movlb	1	; select bank1
 14434  0310  00DD               	movwf	(_gLedRunPara^(0+128)+21)	;volatile
 14435                           
 14436                           ;led.c: 335: gLedRunPara.auto_num = 0;
 14437  0311  01DE               	clrf	(_gLedRunPara^(0+128)+22)	;volatile
 14438  0312  01DF               	clrf	((_gLedRunPara+1)^(0+128)+22)	;volatile
 14439  0313  0008               	return
 14440  0314                     l7052:	
 14441                           
 14442                           ;led.c: 337: }
 14443                           ;led.c: 338: if (ct == sunset) {
 14444  0314  0858               	movf	Led_CheckAutoStatus@sunset+1,w
 14445  0315  065A               	xorwf	Led_CheckAutoStatus@ct+1,w
 14446  0316  1D03               	skipz
 14447  0317  2B1A               	goto	u6005
 14448  0318  0857               	movf	Led_CheckAutoStatus@sunset,w
 14449  0319  0659               	xorwf	Led_CheckAutoStatus@ct,w
 14450  031A                     u6005:	
 14451  031A  1D03               	skipz
 14452  031B  0008               	return
 14453                           
 14454                           ;led.c: 339: for (uint8_t i = 0; i < 5; i++) {
 14455  031C  01DC               	clrf	Led_CheckAutoStatus@i_1237
 14456  031D                     l7060:	
 14457                           
 14458                           ;led.c: 340: gLedRunPara.mTargetBright[i] = gLedPara.mNightBright[i];
 14459  031D  355C               	lslf	Led_CheckAutoStatus@i_1237,w
 14460  031E  3E64               	addlw	(low ((_gLedPara| (0+256)+68)))& (0+255)
 14461  031F  0086               	movwf	6
 14462  0320  3001               	movlw	1	; select bank2/3
 14463  0321  0087               	movwf	7
 14464  0322  355C               	lslf	Led_CheckAutoStatus@i_1237,w
 14465  0323  232C  3180         	fcall	PL2	;call to abstracted procedure
 14466  0325  3005               	movlw	5
 14467  0326  0ADC               	incf	Led_CheckAutoStatus@i_1237,f
 14468  0327  025C               	subwf	Led_CheckAutoStatus@i_1237,w
 14469  0328  1C03               	skipc
 14470  0329  2B1D               	goto	l7060
 14471                           
 14472                           ;led.c: 341: }
 14473                           ;led.c: 342: gLedRunPara.auto_state = 2;
 14474  032A  3002               	movlw	2
 14475  032B  2B0F               	goto	L1
 14476  032C                     __end_of_Led_CheckAutoStatus:	
 14477  032C                     PL2:	
 14478  032C  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14479  032D  0084               	movwf	4
 14480  032E  0185               	clrf	5
 14481  032F  3F40               	moviw [0]fsr1
 14482  0330  3F80               	movwi [0]fsr0
 14483  0331  3F41               	moviw [1]fsr1
 14484  0332  3F81               	movwi [1]fsr0
 14485  0333  0008               	return
 14486  0334                     __end_ofPL2:	
 14487  0334                     PL54:	
 14488  0334  0086               	movwf	6
 14489  0335  0187               	clrf	7
 14490  0336  0801               	movf	1,w
 14491  0337  0020               	movlb	0	; select bank0
 14492  0338  00CE               	movwf	___wmul@multiplier
 14493  0339  303C               	movlw	60
 14494  033A  01CF               	clrf	___wmul@multiplier+1
 14495  033B  00D0               	movwf	___wmul@multiplicand
 14496  033C  01D1               	clrf	___wmul@multiplicand+1
 14497  033D  0008               	return
 14498  033E                     __end_ofPL54:	
 14499  033E                     __ptext28:	
 14500 ;; *************** function _Led_AutoRun *****************
 14501 ;; Defined at:
 14502 ;;		line 348 in file "user/src/led.c"
 14503 ;; Parameters:    Size  Location     Type
 14504 ;;		None
 14505 ;; Auto vars:     Size  Location     Type
 14506 ;;  i               1   28[BANK0 ] unsigned char 
 14507 ;; Return value:  Size  Location     Type
 14508 ;;                  1    wreg      void 
 14509 ;; Registers used:
 14510 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14511 ;; Tracked objects:
 14512 ;;		On entry : 1F/0
 14513 ;;		On exit  : 1F/0
 14514 ;;		Unchanged: 0/0
 14515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14517 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14520 ;;Total ram usage:        5 bytes
 14521 ;; Hardware stack levels used:    1
 14522 ;; Hardware stack levels required when called:    9
 14523 ;; This function calls:
 14524 ;;		_Led_UpdateBright
 14525 ;;		_Util_IncValue
 14526 ;; This function is called by:
 14527 ;;		_main
 14528 ;; This function uses a non-reentrant model
 14529 ;;
 14530                           
 14531                           
 14532                           ;psect for function _Led_AutoRun
 14533  033E                     _Led_AutoRun:	
 14534                           
 14535                           ;led.c: 349: if (gLedRunPara.auto_state == 1 && gLedRunPara.auto_num < 250) {
 14536                           
 14537                           ;incstack = 0
 14538                           ; Regs used in _Led_AutoRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14539  033E  0021               	movlb	1	; select bank1
 14540  033F  0B5D               	decfsz	(_gLedRunPara^(0+128)+21),w	;volatile
 14541  0340  2B50               	goto	l7078
 14542  0341  3000               	movlw	0
 14543  0342  025F               	subwf	((_gLedRunPara+1)^(0+128)+22),w	;volatile
 14544  0343  30FA               	movlw	250
 14545  0344  1903               	skipnz
 14546  0345  025E               	subwf	(_gLedRunPara^(0+128)+22),w	;volatile
 14547  0346  1803               	skipnc
 14548  0347  2B50               	goto	l7078
 14549                           
 14550                           ;led.c: 350: Util_IncValue((uint16_t *) & gLedRunPara.mCurrentBright[0], 1000, 4);
 14551  0348  23B5               	fcall	PL56	;call to abstracted procedure
 14552  0349  3004               	movlw	4
 14553  034A  00D2               	movwf	Util_IncValue@delta
 14554  034B  01D3               	clrf	Util_IncValue@delta+1
 14555  034C  318D  2538  3180   	fcall	_Util_IncValue
 14556                           
 14557                           ;led.c: 351: } else if (gLedRunPara.auto_state == 2 && gLedRunPara.auto_num < 1000) {
 14558  034F  2B7E               	goto	l7094
 14559  0350                     l7078:	
 14560  0350  3002               	movlw	2
 14561  0351  065D               	xorwf	(_gLedRunPara^(0+128)+21),w	;volatile
 14562  0352  1D03               	btfss	3,2
 14563  0353  2B63               	goto	l7084
 14564  0354  3003               	movlw	3
 14565  0355  025F               	subwf	((_gLedRunPara+1)^(0+128)+22),w	;volatile
 14566  0356  30E8               	movlw	232
 14567  0357  1903               	skipnz
 14568  0358  025E               	subwf	(_gLedRunPara^(0+128)+22),w	;volatile
 14569  0359  1803               	skipnc
 14570  035A  2B63               	goto	l7084
 14571                           
 14572                           ;led.c: 352: Util_IncValue((uint16_t *) & gLedRunPara.mCurrentBright[0], 1000, 1);
 14573  035B  23B5               	fcall	PL56	;call to abstracted procedure
 14574  035C  01D2               	clrf	Util_IncValue@delta
 14575  035D  0AD2               	incf	Util_IncValue@delta,f
 14576  035E  01D3               	clrf	Util_IncValue@delta+1
 14577  035F  318D  2538  3180   	fcall	_Util_IncValue
 14578                           
 14579                           ;led.c: 353: } else {
 14580  0362  2B7E               	goto	l7094
 14581  0363                     l7084:	
 14582                           
 14583                           ;led.c: 354: gLedRunPara.auto_state = 0;
 14584  0363  01DD               	clrf	(_gLedRunPara^(0+128)+21)	;volatile
 14585                           
 14586                           ;led.c: 355: gLedRunPara.auto_num = 0;
 14587  0364  01DE               	clrf	(_gLedRunPara^(0+128)+22)	;volatile
 14588  0365  01DF               	clrf	((_gLedRunPara+1)^(0+128)+22)	;volatile
 14589                           
 14590                           ;led.c: 356: if (gLedRunPara.mCurrentBright[0] < gLedRunPara.mTargetBright[0]) {
 14591  0366  0853               	movf	((_gLedRunPara+1)^(0+128)+10),w	;volatile
 14592  0367  0249               	subwf	(_gLedRunPara+1)^(0+128),w	;volatile
 14593  0368  1D03               	skipz
 14594  0369  2B6C               	goto	u6065
 14595  036A  0852               	movf	(_gLedRunPara^(0+128)+10),w	;volatile
 14596  036B  0248               	subwf	_gLedRunPara^(0+128),w	;volatile
 14597  036C                     u6065:	
 14598  036C  1803               	skipnc
 14599  036D  2B72               	goto	l7090
 14600                           
 14601                           ;led.c: 357: gLedRunPara.mCurrentBright[0]++;
 14602  036E  0AC8               	incf	_gLedRunPara^(0+128),f	;volatile
 14603  036F  1903               	skipnz
 14604  0370  0AC9               	incf	(_gLedRunPara+1)^(0+128),f	;volatile
 14605                           
 14606                           ;led.c: 358: } else if (gLedRunPara.mCurrentBright[0] > gLedRunPara.mTargetBright[0]) {
 14607  0371  2B7E               	goto	l7094
 14608  0372                     l7090:	
 14609  0372  0849               	movf	(_gLedRunPara+1)^(0+128),w	;volatile
 14610  0373  0253               	subwf	((_gLedRunPara+1)^(0+128)+10),w	;volatile
 14611  0374  1D03               	skipz
 14612  0375  2B78               	goto	u6075
 14613  0376  0848               	movf	_gLedRunPara^(0+128),w	;volatile
 14614  0377  0252               	subwf	(_gLedRunPara^(0+128)+10),w	;volatile
 14615  0378                     u6075:	
 14616  0378  1803               	skipnc
 14617  0379  2B7E               	goto	l7094
 14618                           
 14619                           ;led.c: 359: gLedRunPara.mCurrentBright[0]--;
 14620  037A  3001               	movlw	1
 14621  037B  02C8               	subwf	_gLedRunPara^(0+128),f	;volatile
 14622  037C  3000               	movlw	0
 14623  037D  3BC9               	subwfb	(_gLedRunPara+1)^(0+128),f	;volatile
 14624  037E                     l7094:	
 14625                           
 14626                           ;led.c: 360: }
 14627                           ;led.c: 361: }
 14628                           ;led.c: 362: gLedRunPara.auto_num++;
 14629  037E  0021               	movlb	1	; select bank1
 14630  037F  0ADE               	incf	(_gLedRunPara^(0+128)+22),f	;volatile
 14631  0380  1903               	skipnz
 14632  0381  0ADF               	incf	((_gLedRunPara+1)^(0+128)+22),f	;volatile
 14633                           
 14634                           ;led.c: 363: if ((gLedRunPara.auto_num & 0x01) == 0) {
 14635  0382  185E               	btfsc	(_gLedRunPara^(0+128)+22),0	;volatile
 14636  0383  2BA7               	goto	l7116
 14637                           
 14638                           ;led.c: 364: for (uint8_t i = 1; i < 5; i++) {
 14639  0384  0020               	movlb	0	; select bank0
 14640  0385  01DC               	clrf	Led_AutoRun@i
 14641  0386  0ADC               	incf	Led_AutoRun@i,f
 14642  0387                     l7104:	
 14643                           
 14644                           ;led.c: 365: if (gLedRunPara.mCurrentBright[i] < gLedRunPara.mTargetBright[i]) {
 14645  0387  355C               	lslf	Led_AutoRun@i,w
 14646  0388  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14647  0389  23BF  3180         	fcall	PL76	;call to abstracted procedure
 14648  038B  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14649  038C  23A9  3180         	fcall	PL46	;call to abstracted procedure
 14650  038E  1803               	skipnc
 14651  038F  2B96               	goto	l7108
 14652                           
 14653                           ;led.c: 366: gLedRunPara.mCurrentBright[i]++;
 14654  0390  355C               	lslf	Led_AutoRun@i,w
 14655  0391  25FD  3180         	fcall	PL22	;call to abstracted procedure
 14656  0393  1803               	skipnc
 14657  0394  0A81               	incf	1,f
 14658                           
 14659                           ;led.c: 367: } else if (gLedRunPara.mCurrentBright[i] > gLedRunPara.mTargetBright[i]) {
 14660  0395  2BA2               	goto	l7112
 14661  0396                     l7108:	
 14662  0396  355C               	lslf	Led_AutoRun@i,w
 14663  0397  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14664  0398  23BF  3180         	fcall	PL76	;call to abstracted procedure
 14665  039A  3ED2               	addlw	(low ((_gLedRunPara| 0+10)))& (0+255)
 14666  039B  23A9  3180         	fcall	PL46	;call to abstracted procedure
 14667  039D  1803               	skipnc
 14668  039E  2BA2               	goto	l7112
 14669                           
 14670                           ;led.c: 368: gLedRunPara.mCurrentBright[i]--;
 14671  039F  355C               	lslf	Led_AutoRun@i,w
 14672  03A0  25E8  3180         	fcall	PL4	;call to abstracted procedure
 14673  03A2                     l7112:	
 14674  03A2  3005               	movlw	5
 14675  03A3  0ADC               	incf	Led_AutoRun@i,f
 14676  03A4  025C               	subwf	Led_AutoRun@i,w
 14677  03A5  1C03               	skipc
 14678  03A6  2B87               	goto	l7104
 14679  03A7                     l7116:	
 14680                           
 14681                           ;led.c: 369: }
 14682                           ;led.c: 370: }
 14683                           ;led.c: 371: }
 14684                           ;led.c: 372: Led_UpdateBright();
 14685  03A7  318A  2A50         	ljmp	l5912
 14686  03A9                     __end_of_Led_AutoRun:	
 14687  03A9                     PL46:	
 14688  03A9  0086               	movwf	6
 14689  03AA  3F40               	moviw [0]fsr1
 14690  03AB  00DA               	movwf	??_Led_AutoRun+2
 14691  03AC  3F41               	moviw [1]fsr1
 14692  03AD  00DB               	movwf	??_Led_AutoRun+3
 14693  03AE  0859               	movf	??_Led_AutoRun+1,w
 14694  03AF  025B               	subwf	??_Led_AutoRun+3,w
 14695  03B0  1D03               	skipz
 14696  03B1  0008               	return
 14697  03B2  0858               	movf	??_Led_AutoRun,w
 14698  03B3  025A               	subwf	??_Led_AutoRun+2,w
 14699  03B4  0008               	return
 14700  03B5                     __end_ofPL46:	
 14701  03B5                     PL56:	
 14702  03B5  30C8               	movlw	low _gLedRunPara
 14703  03B6  0020               	movlb	0	; select bank0
 14704  03B7  00CE               	movwf	Util_IncValue@pSrc
 14705  03B8  3000               	movlw	high _gLedRunPara
 14706  03B9  00CF               	movwf	Util_IncValue@pSrc+1
 14707  03BA  30E8               	movlw	232
 14708  03BB  00D0               	movwf	Util_IncValue@max
 14709  03BC  3003               	movlw	3
 14710  03BD  00D1               	movwf	Util_IncValue@max+1
 14711  03BE  0008               	return
 14712  03BF                     __end_ofPL56:	
 14713  03BF                     PL76:	
 14714  03BF  0086               	movwf	6
 14715  03C0  0187               	clrf	7
 14716  03C1  3F40               	moviw [0]fsr1
 14717  03C2  00D8               	movwf	??_Led_AutoRun
 14718  03C3  3F41               	moviw [1]fsr1
 14719  03C4  00D9               	movwf	??_Led_AutoRun+1
 14720  03C5  355C               	lslf	Led_AutoRun@i,w
 14721  03C6  0008               	return
 14722  03C7                     __end_ofPL76:	
 14723  03C7                     __ptext77:	
 14724 ;; *************** function _Led_DynamicWave *****************
 14725 ;; Defined at:
 14726 ;;		line 422 in file "user/src/led.c"
 14727 ;; Parameters:    Size  Location     Type
 14728 ;;  ptp             2    6[COMMON] unsigned int 
 14729 ;; Auto vars:     Size  Location     Type
 14730 ;;  duty           10    0[BANK0 ] unsigned int [5]
 14731 ;;  val             2   10[BANK0 ] unsigned int 
 14732 ;;  i               1   12[BANK0 ] unsigned char 
 14733 ;; Return value:  Size  Location     Type
 14734 ;;                  1    wreg      void 
 14735 ;; Registers used:
 14736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14737 ;; Tracked objects:
 14738 ;;		On entry : 1F/0
 14739 ;;		On exit  : 14/4
 14740 ;;		Unchanged: 0/0
 14741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14742 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14743 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14744 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14745 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14746 ;;Total ram usage:       19 bytes
 14747 ;; Hardware stack levels used:    1
 14748 ;; Hardware stack levels required when called:    2
 14749 ;; This function calls:
 14750 ;;		i1_Led_UpdateBright
 14751 ;;		i1___wmul
 14752 ;; This function is called by:
 14753 ;;		_Led_RunMusic
 14754 ;; This function uses a non-reentrant model
 14755 ;;
 14756                           
 14757                           
 14758                           ;psect for function _Led_DynamicWave
 14759  03C7                     _Led_DynamicWave:	
 14760  03C7                     i1l6118:	
 14761                           ;incstack = 0
 14762                           ; Regs used in _Led_DynamicWave: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14763                           
 14764                           
 14765                           ;led.c: 423: uint8_t i;
 14766                           ;led.c: 424: uint16_t val = ptp * ( 6 + GAIN[gLedPara.mVolume] );
 14767  03C7  25F2  3180         	fcall	PL10	;call to abstracted procedure
 14768  03C9  3006               	movlw	6
 14769  03CA  01F1               	clrf	i1___wmul@multiplier+1
 14770  03CB  07F0               	addwf	i1___wmul@multiplier,f
 14771  03CC  1803               	skipnc
 14772  03CD  0AF1               	incf	i1___wmul@multiplier+1,f
 14773  03CE  0877               	movf	Led_DynamicWave@ptp+1,w
 14774  03CF  00F3               	movwf	i1___wmul@multiplicand+1
 14775  03D0  0876               	movf	Led_DynamicWave@ptp,w
 14776  03D1  00F2               	movwf	i1___wmul@multiplicand
 14777  03D2  25C2  3180         	fcall	i1___wmul
 14778  03D4  0871               	movf	?i1___wmul+1,w
 14779  03D5  0020               	movlb	0	; select bank0
 14780  03D6  00CB               	movwf	Led_DynamicWave@val+1
 14781  03D7  0870               	movf	?i1___wmul,w
 14782  03D8  00CA               	movwf	Led_DynamicWave@val
 14783                           
 14784                           ;led.c: 425: uint16_t duty[5] = {500, 500, 500, 200, 500};
 14785  03D9  30B4               	movlw	low Led_DynamicWave@F8312
 14786  03DA  0086               	movwf	6
 14787  03DB  3000               	movlw	high Led_DynamicWave@F8312
 14788  03DC  0087               	movwf	7
 14789  03DD  3040               	movlw	low Led_DynamicWave@duty
 14790  03DE  0084               	movwf	4
 14791  03DF  3000               	movlw	high Led_DynamicWave@duty
 14792  03E0  0085               	movwf	5
 14793  03E1  300A               	movlw	10
 14794  03E2  00F8               	movwf	??_Led_DynamicWave
 14795  03E3                     u497_20:	
 14796  03E3  0016               	moviw fsr1++
 14797  03E4  001A               	movwi fsr0++
 14798  03E5  0BF8               	decfsz	??_Led_DynamicWave,f
 14799  03E6  2BE3               	goto	u497_20
 14800                           
 14801                           ;led.c: 426: duty[3] += val;
 14802  03E7  084A               	movf	Led_DynamicWave@val,w
 14803  03E8  07C6               	addwf	Led_DynamicWave@duty+6,f
 14804  03E9  084B               	movf	Led_DynamicWave@val+1,w
 14805  03EA  3DC7               	addwfc	Led_DynamicWave@duty+7,f
 14806                           
 14807                           ;led.c: 427: if (duty[3] > 1000) {
 14808  03EB  3003               	movlw	3
 14809  03EC  0247               	subwf	Led_DynamicWave@duty+7,w
 14810  03ED  30E9               	movlw	233
 14811  03EE  1903               	skipnz
 14812  03EF  0246               	subwf	Led_DynamicWave@duty+6,w
 14813  03F0  1C03               	skipc
 14814  03F1  2BF6               	goto	i1l6128
 14815                           
 14816                           ;led.c: 428: duty[3] = 1000;
 14817  03F2  30E8               	movlw	232
 14818  03F3  00C6               	movwf	Led_DynamicWave@duty+6
 14819  03F4  3003               	movlw	3
 14820  03F5  00C7               	movwf	Led_DynamicWave@duty+7
 14821  03F6                     i1l6128:	
 14822                           
 14823                           ;led.c: 429: }
 14824                           ;led.c: 430: for (i = 0; i < 5; i++) {
 14825  03F6  01CC               	clrf	Led_DynamicWave@i
 14826  03F7                     i1l6134:	
 14827                           
 14828                           ;led.c: 431: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 14829  03F7  354C               	lslf	Led_DynamicWave@i,w
 14830  03F8  3E40               	addlw	(low (Led_DynamicWave@duty| 0))& (0+255)
 14831  03F9  2654  3180         	fcall	PL72	;call to abstracted procedure
 14832  03FB  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14833  03FC  2610  3180         	fcall	PL38	;call to abstracted procedure
 14834  03FE  1803               	skipnc
 14835  03FF  2C06               	goto	i1l6138
 14836                           
 14837                           ;led.c: 432: gLedRunPara.mCurrentBright[i]++;
 14838  0400  354C               	lslf	Led_DynamicWave@i,w
 14839  0401  25FD  3180         	fcall	PL22	;call to abstracted procedure
 14840  0403  1803               	skipnc
 14841  0404  0A81               	incf	1,f
 14842                           
 14843                           ;led.c: 433: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 14844  0405  2C12               	goto	i1l6142
 14845  0406                     i1l6138:	
 14846  0406  354C               	lslf	Led_DynamicWave@i,w
 14847  0407  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 14848  0408  2654  3180         	fcall	PL72	;call to abstracted procedure
 14849  040A  3E40               	addlw	(low (Led_DynamicWave@duty| 0))& (0+255)
 14850  040B  2610  3180         	fcall	PL38	;call to abstracted procedure
 14851  040D  1803               	skipnc
 14852  040E  2C12               	goto	i1l6142
 14853                           
 14854                           ;led.c: 434: gLedRunPara.mCurrentBright[i]--;
 14855  040F  354C               	lslf	Led_DynamicWave@i,w
 14856  0410  25E8  3180         	fcall	PL4	;call to abstracted procedure
 14857  0412                     i1l6142:	
 14858  0412  3005               	movlw	5
 14859  0413  0ACC               	incf	Led_DynamicWave@i,f
 14860  0414  024C               	subwf	Led_DynamicWave@i,w
 14861  0415  1C03               	skipc
 14862  0416  2BF7               	goto	i1l6134
 14863                           
 14864                           ;led.c: 435: }
 14865                           ;led.c: 436: }
 14866                           ;led.c: 437: Led_UpdateBright();
 14867  0417  25D7               	fcall	i1_Led_UpdateBright
 14868  0418  0008               	return
 14869  0419                     __end_of_Led_DynamicWave:	
 14870  0419                     __ptext76:	
 14871 ;; *************** function _Led_RunMusic *****************
 14872 ;; Defined at:
 14873 ;;		line 510 in file "user/src/led.c"
 14874 ;; Parameters:    Size  Location     Type
 14875 ;;		None
 14876 ;; Auto vars:     Size  Location     Type
 14877 ;;		None
 14878 ;; Return value:  Size  Location     Type
 14879 ;;                  1    wreg      void 
 14880 ;; Registers used:
 14881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14882 ;; Tracked objects:
 14883 ;;		On entry : 1F/0
 14884 ;;		On exit  : 10/0
 14885 ;;		Unchanged: 0/0
 14886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14890 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;Total ram usage:        1 bytes
 14892 ;; Hardware stack levels used:    1
 14893 ;; Hardware stack levels required when called:    3
 14894 ;; This function calls:
 14895 ;;		_Audio_PlaySound
 14896 ;;		_Audio_SelectSound
 14897 ;;		_Led_DynamicCloud
 14898 ;;		_Led_DynamicMoon
 14899 ;;		_Led_DynamicStorm
 14900 ;;		_Led_DynamicWave
 14901 ;; This function is called by:
 14902 ;;		_Led_Run
 14903 ;; This function uses a non-reentrant model
 14904 ;;
 14905                           
 14906                           
 14907                           ;psect for function _Led_RunMusic
 14908  0419                     _Led_RunMusic:	
 14909  0419                     i1l6298:	
 14910                           ;incstack = 0
 14911                           ; Regs used in _Led_RunMusic: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14912                           
 14913                           
 14914                           ;led.c: 511: if (gLedRunPara.music_state < 32) {
 14915  0419  3020               	movlw	32
 14916  041A  0021               	movlb	1	; select bank1
 14917  041B  0261               	subwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14918  041C  1C03               	btfss	3,0
 14919  041D  2C32               	goto	i1l6300
 14920                           
 14921                           ;led.c: 513: } else if (gLedRunPara.music_state == 32) {
 14922  041E  3020               	movlw	32
 14923  041F  0661               	xorwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14924  0420  1D03               	btfss	3,2
 14925  0421  2C28               	goto	i1l6308
 14926                           
 14927                           ;led.c: 514: Audio_SelectSound(gLedPara.mMsc);
 14928  0422  0022               	movlb	2	; select bank2
 14929  0423  2664  3180         	fcall	PL88	;call to abstracted procedure
 14930  0425  2470  3180         	fcall	_Audio_SelectSound
 14931  0427  2C32               	goto	i1l6300
 14932  0428                     i1l6308:	
 14933  0428  3040               	movlw	64
 14934  0429  0261               	subwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14935  042A  1C03               	btfss	3,0
 14936  042B  2C32               	goto	i1l6300
 14937  042C  3040               	movlw	64
 14938  042D  0661               	xorwf	(_gLedRunPara^(0+128)+25),w	;volatile
 14939  042E  1D03               	btfss	3,2
 14940  042F  2C33               	goto	i1l6318
 14941                           
 14942                           ;led.c: 519: Audio_PlaySound();
 14943  0430  245E  3180         	fcall	_Audio_PlaySound
 14944  0432                     i1l6300:	
 14945                           
 14946                           ;led.c: 512: gLedRunPara.music_state++;
 14947  0432  0AE1               	incf	(_gLedRunPara^(0+128)+25),f	;volatile
 14948  0433                     i1l6318:	
 14949                           
 14950                           ;led.c: 521: }
 14951                           ;led.c: 522: if (gLedPara.mDyn) {
 14952  0433  0022               	movlb	2	; select bank2
 14953  0434  1FA0               	btfss	_gLedPara^(0+256),7	;volatile
 14954  0435  0008               	return
 14955                           
 14956                           ;led.c: 535: break;
 14957  0436  2664  3180         	fcall	PL88	;call to abstracted procedure
 14958                           
 14959                           ; Switch size 1, requested type "space"
 14960                           ; Number of cases is 4, Range of values is 5 to 8
 14961                           ; switch strategies available:
 14962                           ; Name         Instructions Cycles
 14963                           ; simple_byte           13     7 (average)
 14964                           ; direct_byte           17     9 (fixed)
 14965                           ; jumptable            263     9 (fixed)
 14966                           ;	Chosen strategy is simple_byte
 14967  0438  3A05               	xorlw	5	; case 5
 14968  0439  1903               	skipnz
 14969  043A  2C45               	goto	i1l6322
 14970  043B  3A03               	xorlw	3	; case 6
 14971  043C  1903               	skipnz
 14972  043D  2C4B               	goto	i1l6324
 14973  043E  3A01               	xorlw	1	; case 7
 14974  043F  1903               	skipnz
 14975  0440  2C51               	goto	i1l6326
 14976  0441  3A0F               	xorlw	15	; case 8
 14977  0442  1903               	skipnz
 14978  0443  2C57               	goto	i1l6328
 14979  0444  2C5D               	goto	i1l808
 14980  0445                     i1l6322:	
 14981                           
 14982                           ;led.c: 525: Led_DynamicWave(audio_value);
 14983  0445  0020               	movlb	0	; select bank0
 14984  0446  082B               	movf	_audio_value+1,w	;volatile
 14985  0447  00F7               	movwf	Led_DynamicWave@ptp+1
 14986  0448  082A               	movf	_audio_value,w	;volatile
 14987  0449  00F6               	movwf	Led_DynamicWave@ptp
 14988  044A  2BC7               	ljmp	i1l6118
 14989  044B                     i1l6324:	
 14990                           ;led.c: 526: break;
 14991                           
 14992                           
 14993                           ;led.c: 528: Led_DynamicMoon(audio_value);
 14994  044B  0020               	movlb	0	; select bank0
 14995  044C  082B               	movf	_audio_value+1,w	;volatile
 14996  044D  00F7               	movwf	Led_DynamicMoon@ptp+1
 14997  044E  082A               	movf	_audio_value,w	;volatile
 14998  044F  00F6               	movwf	Led_DynamicMoon@ptp
 14999  0450  2C9F               	ljmp	i1l6148
 15000  0451                     i1l6326:	
 15001                           ;led.c: 529: break;
 15002                           
 15003                           
 15004                           ;led.c: 531: Led_DynamicCloud(audio_value);
 15005  0451  0020               	movlb	0	; select bank0
 15006  0452  082B               	movf	_audio_value+1,w	;volatile
 15007  0453  00F7               	movwf	Led_DynamicCloud@ptp+1
 15008  0454  082A               	movf	_audio_value,w	;volatile
 15009  0455  00F6               	movwf	Led_DynamicCloud@ptp
 15010  0456  2D52               	ljmp	i1l6176
 15011  0457                     i1l6328:	
 15012                           ;led.c: 532: break;
 15013                           
 15014                           
 15015                           ;led.c: 534: Led_DynamicStorm(audio_value);
 15016  0457  0020               	movlb	0	; select bank0
 15017  0458  082B               	movf	_audio_value+1,w	;volatile
 15018  0459  00F7               	movwf	Led_DynamicStorm@ptp+1
 15019  045A  082A               	movf	_audio_value,w	;volatile
 15020  045B  00F6               	movwf	Led_DynamicStorm@ptp
 15021  045C  2CF1               	ljmp	i1l6216
 15022  045D                     i1l808:	
 15023  045D  0008               	return
 15024  045E                     __end_of_Led_RunMusic:	
 15025  045E                     __ptext84:	
 15026 ;; *************** function _Audio_PlaySound *****************
 15027 ;; Defined at:
 15028 ;;		line 5 in file "user/src/audio.c"
 15029 ;; Parameters:    Size  Location     Type
 15030 ;;		None
 15031 ;; Auto vars:     Size  Location     Type
 15032 ;;  checksum        1    1[COMMON] unsigned char 
 15033 ;; Return value:  Size  Location     Type
 15034 ;;                  1    wreg      void 
 15035 ;; Registers used:
 15036 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15037 ;; Tracked objects:
 15038 ;;		On entry : 1F/1
 15039 ;;		On exit  : 1F/1
 15040 ;;		Unchanged: 0/0
 15041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15043 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15045 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;Total ram usage:        1 bytes
 15047 ;; Hardware stack levels used:    1
 15048 ;; Hardware stack levels required when called:    1
 15049 ;; This function calls:
 15050 ;;		i1_EUSART_Write
 15051 ;; This function is called by:
 15052 ;;		_Led_RunMusic
 15053 ;; This function uses a non-reentrant model
 15054 ;;
 15055                           
 15056                           
 15057                           ;psect for function _Audio_PlaySound
 15058  045E                     _Audio_PlaySound:	
 15059  045E  307E               	movlw	126
 15060                           
 15061                           ;audio.c: 7: uint8_t checksum = 0x00;
 15062                           
 15063                           ;incstack = 0
 15064                           ; Regs used in _Audio_PlaySound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15065  045F  01F1               	clrf	Audio_PlaySound@checksum
 15066                           
 15067                           ;audio.c: 8: EUSART_Write ( 0x7E );
 15068  0460  248B  3180         	fcall	i1_EUSART_Write
 15069                           
 15070                           ;audio.c: 9: checksum ^= EUSART_Write ( 0x03 );
 15071  0462  3003               	movlw	3
 15072  0463  248B  3180         	fcall	i1_EUSART_Write
 15073  0465  06F1               	xorwf	Audio_PlaySound@checksum,f
 15074                           
 15075                           ;audio.c: 10: checksum ^= EUSART_Write ( 0x11 );
 15076  0466  3011               	movlw	17
 15077  0467  248B  3180         	fcall	i1_EUSART_Write
 15078  0469  06F1               	xorwf	Audio_PlaySound@checksum,f
 15079                           
 15080                           ;audio.c: 11: EUSART_Write ( checksum );
 15081  046A  0871               	movf	Audio_PlaySound@checksum,w
 15082  046B  248B  3180         	fcall	i1_EUSART_Write
 15083                           
 15084                           ;audio.c: 12: EUSART_Write ( 0xEF );
 15085  046D  30EF               	movlw	239
 15086  046E  248B               	fcall	i1_EUSART_Write
 15087  046F  0008               	return
 15088  0470                     __end_of_Audio_PlaySound:	
 15089  0470                     __ptext83:	
 15090 ;; *************** function _Audio_SelectSound *****************
 15091 ;; Defined at:
 15092 ;;		line 25 in file "user/src/audio.c"
 15093 ;; Parameters:    Size  Location     Type
 15094 ;;  index           1    wreg     unsigned char 
 15095 ;; Auto vars:     Size  Location     Type
 15096 ;;  index           1    1[COMMON] unsigned char 
 15097 ;;  checksum        1    2[COMMON] unsigned char 
 15098 ;; Return value:  Size  Location     Type
 15099 ;;                  1    wreg      void 
 15100 ;; Registers used:
 15101 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15102 ;; Tracked objects:
 15103 ;;		On entry : 1F/2
 15104 ;;		On exit  : 1F/1
 15105 ;;		Unchanged: 0/0
 15106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15108 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15110 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15111 ;;Total ram usage:        2 bytes
 15112 ;; Hardware stack levels used:    1
 15113 ;; Hardware stack levels required when called:    1
 15114 ;; This function calls:
 15115 ;;		i1_EUSART_Write
 15116 ;; This function is called by:
 15117 ;;		_Led_RunMusic
 15118 ;; This function uses a non-reentrant model
 15119 ;;
 15120                           
 15121                           
 15122                           ;psect for function _Audio_SelectSound
 15123  0470                     _Audio_SelectSound:	
 15124                           
 15125                           ;incstack = 0
 15126                           ; Regs used in _Audio_SelectSound: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15127                           ;Audio_SelectSound@index stored from wreg
 15128  0470  00F1               	movwf	Audio_SelectSound@index
 15129  0471  307E               	movlw	126
 15130                           
 15131                           ;audio.c: 27: uint8_t checksum = 0x00;
 15132  0472  01F2               	clrf	Audio_SelectSound@checksum
 15133                           
 15134                           ;audio.c: 28: EUSART_Write ( 0x7E );
 15135  0473  248B  3180         	fcall	i1_EUSART_Write
 15136                           
 15137                           ;audio.c: 29: checksum ^= EUSART_Write ( 0x05 );
 15138  0475  3005               	movlw	5
 15139  0476  248B  3180         	fcall	i1_EUSART_Write
 15140  0478  06F2               	xorwf	Audio_SelectSound@checksum,f
 15141                           
 15142                           ;audio.c: 30: checksum ^= EUSART_Write ( 0x41 );
 15143  0479  3041               	movlw	65
 15144  047A  248B  3180         	fcall	i1_EUSART_Write
 15145  047C  06F2               	xorwf	Audio_SelectSound@checksum,f
 15146                           
 15147                           ;audio.c: 31: checksum ^= EUSART_Write ( 0x00 );
 15148  047D  3000               	movlw	0
 15149  047E  248B  3180         	fcall	i1_EUSART_Write
 15150  0480  06F2               	xorwf	Audio_SelectSound@checksum,f
 15151                           
 15152                           ;audio.c: 32: checksum ^= EUSART_Write ( index );
 15153  0481  0871               	movf	Audio_SelectSound@index,w
 15154  0482  248B  3180         	fcall	i1_EUSART_Write
 15155  0484  06F2               	xorwf	Audio_SelectSound@checksum,f
 15156                           
 15157                           ;audio.c: 33: EUSART_Write ( checksum );
 15158  0485  0872               	movf	Audio_SelectSound@checksum,w
 15159  0486  248B  3180         	fcall	i1_EUSART_Write
 15160                           
 15161                           ;audio.c: 34: EUSART_Write ( 0xEF );
 15162  0488  30EF               	movlw	239
 15163  0489  248B               	fcall	i1_EUSART_Write
 15164  048A  0008               	return
 15165  048B                     __end_of_Audio_SelectSound:	
 15166  048B                     __ptext85:	
 15167 ;; *************** function i1_EUSART_Write *****************
 15168 ;; Defined at:
 15169 ;;		line 32 in file "driver/src/eusart.c"
 15170 ;; Parameters:    Size  Location     Type
 15171 ;;  byte            1    wreg     unsigned char 
 15172 ;; Auto vars:     Size  Location     Type
 15173 ;;  byte            1    0[COMMON] unsigned char 
 15174 ;; Return value:  Size  Location     Type
 15175 ;;                  1    wreg      unsigned char 
 15176 ;; Registers used:
 15177 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15178 ;; Tracked objects:
 15179 ;;		On entry : 1C/2
 15180 ;;		On exit  : 1F/1
 15181 ;;		Unchanged: 0/0
 15182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15184 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15186 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15187 ;;Total ram usage:        1 bytes
 15188 ;; Hardware stack levels used:    1
 15189 ;; This function calls:
 15190 ;;		Nothing
 15191 ;; This function is called by:
 15192 ;;		_Audio_PlaySound
 15193 ;;		_Audio_SelectSound
 15194 ;; This function uses a non-reentrant model
 15195 ;;
 15196                           
 15197                           
 15198                           ;psect for function i1_EUSART_Write
 15199  048B                     i1_EUSART_Write:	
 15200                           
 15201                           ;incstack = 0
 15202                           ; Regs used in i1_EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 15203                           ;i1EUSART_Write@byte stored from wreg
 15204  048B  00F0               	movwf	i1EUSART_Write@byte
 15205  048C                     i1l3908:	
 15206                           ;eusart.c: 34: while ( 0 == txRemain );
 15207                           
 15208  048C  0020               	movlb	0	; select bank0
 15209  048D  085E               	movf	_txRemain,w
 15210  048E  1903               	btfsc	3,2
 15211  048F  2C8C               	goto	i1l3908
 15212                           
 15213                           ;eusart.c: 36: if ( !PIE1bits.TXIE )
 15214  0490  0021               	movlb	1	; select bank1
 15215  0491  1A11               	btfsc	17,4	;volatile
 15216  0492  2C97               	goto	i1l95
 15217                           
 15218                           ;eusart.c: 37: {
 15219                           ;eusart.c: 38: TXREG = byte;
 15220  0493  0870               	movf	i1EUSART_Write@byte,w
 15221  0494  0023               	movlb	3	; select bank3
 15222  0495  009A               	movwf	26	;volatile
 15223                           
 15224                           ;eusart.c: 39: }
 15225  0496  2C9B               	goto	i1l3922
 15226  0497                     i1l95:	
 15227                           
 15228                           ;eusart.c: 40: else
 15229                           ;eusart.c: 41: {
 15230                           ;eusart.c: 42: PIE1bits.TXIE = 0;
 15231                           
 15232                           ;eusart.c: 43: txBuf[txHead++] = byte;
 15233  0497  264C  3180         	fcall	PL70	;call to abstracted procedure
 15234  0499  0870               	movf	i1EUSART_Write@byte,w
 15235                           
 15236                           ;eusart.c: 44: if ( sizeof (txBuf ) <= txHead )
 15237                           
 15238                           ;eusart.c: 45: {
 15239                           ;eusart.c: 46: txHead = 0;
 15240                           
 15241                           ;eusart.c: 47: }
 15242                           ;eusart.c: 48: txRemain--;
 15243  049A  2634               	fcall	PL64	;call to abstracted procedure
 15244  049B                     i1l3922:	
 15245                           
 15246                           ;eusart.c: 49: }
 15247                           ;eusart.c: 50: PIE1bits.TXIE = 1;
 15248  049B  0021               	movlb	1	; select bank1
 15249  049C  1611               	bsf	17,4	;volatile
 15250                           
 15251                           ;eusart.c: 51: return byte;
 15252  049D  0870               	movf	i1EUSART_Write@byte,w
 15253  049E  0008               	return
 15254  049F                     __end_ofi1_EUSART_Write:	
 15255  049F                     __ptext79:	
 15256 ;; *************** function _Led_DynamicMoon *****************
 15257 ;; Defined at:
 15258 ;;		line 440 in file "user/src/led.c"
 15259 ;; Parameters:    Size  Location     Type
 15260 ;;  ptp             2    6[COMMON] unsigned int 
 15261 ;; Auto vars:     Size  Location     Type
 15262 ;;  duty           10    0[BANK0 ] unsigned int [5]
 15263 ;;  val             2   10[BANK0 ] unsigned int 
 15264 ;;  i               1   12[BANK0 ] unsigned char 
 15265 ;; Return value:  Size  Location     Type
 15266 ;;                  1    wreg      void 
 15267 ;; Registers used:
 15268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15269 ;; Tracked objects:
 15270 ;;		On entry : 1F/0
 15271 ;;		On exit  : 14/4
 15272 ;;		Unchanged: 0/0
 15273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15274 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15275 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15278 ;;Total ram usage:       19 bytes
 15279 ;; Hardware stack levels used:    1
 15280 ;; Hardware stack levels required when called:    2
 15281 ;; This function calls:
 15282 ;;		i1_Led_UpdateBright
 15283 ;;		i1___wmul
 15284 ;; This function is called by:
 15285 ;;		_Led_RunMusic
 15286 ;; This function uses a non-reentrant model
 15287 ;;
 15288                           
 15289                           
 15290                           ;psect for function _Led_DynamicMoon
 15291  049F                     _Led_DynamicMoon:	
 15292  049F                     i1l6148:	
 15293                           ;incstack = 0
 15294                           ; Regs used in _Led_DynamicMoon: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15295                           
 15296                           
 15297                           ;led.c: 441: uint8_t i;
 15298                           ;led.c: 442: uint16_t val = ptp * ( 5 + GAIN[gLedPara.mVolume] );
 15299  049F  25F2  3180         	fcall	PL10	;call to abstracted procedure
 15300  04A1  3005               	movlw	5
 15301  04A2  01F1               	clrf	i1___wmul@multiplier+1
 15302  04A3  07F0               	addwf	i1___wmul@multiplier,f
 15303  04A4  1803               	skipnc
 15304  04A5  0AF1               	incf	i1___wmul@multiplier+1,f
 15305  04A6  0877               	movf	Led_DynamicMoon@ptp+1,w
 15306  04A7  00F3               	movwf	i1___wmul@multiplicand+1
 15307  04A8  0876               	movf	Led_DynamicMoon@ptp,w
 15308  04A9  00F2               	movwf	i1___wmul@multiplicand
 15309  04AA  25C2  3180         	fcall	i1___wmul
 15310  04AC  0871               	movf	?i1___wmul+1,w
 15311  04AD  0020               	movlb	0	; select bank0
 15312  04AE  00CB               	movwf	Led_DynamicMoon@val+1
 15313  04AF  0870               	movf	?i1___wmul,w
 15314  04B0  00CA               	movwf	Led_DynamicMoon@val
 15315                           
 15316                           ;led.c: 443: uint16_t duty[5] = {0, 0, 1000, 200, 0};
 15317  04B1  30AA               	movlw	low Led_DynamicMoon@F8322
 15318  04B2  0086               	movwf	6
 15319  04B3  3000               	movlw	high Led_DynamicMoon@F8322
 15320  04B4  0087               	movwf	7
 15321  04B5  3040               	movlw	low Led_DynamicMoon@duty
 15322  04B6  0084               	movwf	4
 15323  04B7  3000               	movlw	high Led_DynamicMoon@duty
 15324  04B8  0085               	movwf	5
 15325  04B9  300A               	movlw	10
 15326  04BA  00F8               	movwf	??_Led_DynamicMoon
 15327  04BB                     u502_20:	
 15328  04BB  0016               	moviw fsr1++
 15329  04BC  001A               	movwi fsr0++
 15330  04BD  0BF8               	decfsz	??_Led_DynamicMoon,f
 15331  04BE  2CBB               	goto	u502_20
 15332                           
 15333                           ;led.c: 444: if (duty[3] > val) {
 15334  04BF  0847               	movf	Led_DynamicMoon@duty+7,w
 15335  04C0  024B               	subwf	Led_DynamicMoon@val+1,w
 15336  04C1  1D03               	skipz
 15337  04C2  2CC5               	goto	u503_25
 15338  04C3  0846               	movf	Led_DynamicMoon@duty+6,w
 15339  04C4  024A               	subwf	Led_DynamicMoon@val,w
 15340  04C5                     u503_25:	
 15341  04C5  1803               	skipnc
 15342  04C6  2CCC               	goto	i1l6156
 15343                           
 15344                           ;led.c: 445: duty[3] -= val;
 15345  04C7  084A               	movf	Led_DynamicMoon@val,w
 15346  04C8  02C6               	subwf	Led_DynamicMoon@duty+6,f
 15347  04C9  084B               	movf	Led_DynamicMoon@val+1,w
 15348  04CA  3BC7               	subwfb	Led_DynamicMoon@duty+7,f
 15349                           
 15350                           ;led.c: 446: } else {
 15351  04CB  2CCE               	goto	i1l757
 15352  04CC                     i1l6156:	
 15353                           
 15354                           ;led.c: 447: duty[3] = 0;
 15355  04CC  01C6               	clrf	Led_DynamicMoon@duty+6
 15356  04CD  01C7               	clrf	Led_DynamicMoon@duty+7
 15357  04CE                     i1l757:	
 15358                           
 15359                           ;led.c: 448: }
 15360                           ;led.c: 449: for (i = 0; i < 5; i++) {
 15361  04CE  01CC               	clrf	Led_DynamicMoon@i
 15362  04CF                     i1l6162:	
 15363                           
 15364                           ;led.c: 450: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 15365  04CF  354C               	lslf	Led_DynamicMoon@i,w
 15366  04D0  3E40               	addlw	(low (Led_DynamicMoon@duty| 0))& (0+255)
 15367  04D1  2644  3180         	fcall	PL68	;call to abstracted procedure
 15368  04D3  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15369  04D4  2628  3180         	fcall	PL48	;call to abstracted procedure
 15370  04D6  1803               	skipnc
 15371  04D7  2CDE               	goto	i1l6166
 15372                           
 15373                           ;led.c: 451: gLedRunPara.mCurrentBright[i]++;
 15374  04D8  354C               	lslf	Led_DynamicMoon@i,w
 15375  04D9  25FD  3180         	fcall	PL22	;call to abstracted procedure
 15376  04DB  1803               	skipnc
 15377  04DC  0A81               	incf	1,f
 15378                           
 15379                           ;led.c: 452: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 15380  04DD  2CEA               	goto	i1l6170
 15381  04DE                     i1l6166:	
 15382  04DE  354C               	lslf	Led_DynamicMoon@i,w
 15383  04DF  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15384  04E0  2644  3180         	fcall	PL68	;call to abstracted procedure
 15385  04E2  3E40               	addlw	(low (Led_DynamicMoon@duty| 0))& (0+255)
 15386  04E3  2628  3180         	fcall	PL48	;call to abstracted procedure
 15387  04E5  1803               	skipnc
 15388  04E6  2CEA               	goto	i1l6170
 15389                           
 15390                           ;led.c: 453: gLedRunPara.mCurrentBright[i]--;
 15391  04E7  354C               	lslf	Led_DynamicMoon@i,w
 15392  04E8  25E8  3180         	fcall	PL4	;call to abstracted procedure
 15393  04EA                     i1l6170:	
 15394  04EA  3005               	movlw	5
 15395  04EB  0ACC               	incf	Led_DynamicMoon@i,f
 15396  04EC  024C               	subwf	Led_DynamicMoon@i,w
 15397  04ED  1C03               	skipc
 15398  04EE  2CCF               	goto	i1l6162
 15399                           
 15400                           ;led.c: 454: }
 15401                           ;led.c: 455: }
 15402                           ;led.c: 456: Led_UpdateBright();
 15403  04EF  25D7               	fcall	i1_Led_UpdateBright
 15404  04F0  0008               	return
 15405  04F1                     __end_of_Led_DynamicMoon:	
 15406  04F1                     __ptext78:	
 15407 ;; *************** function _Led_DynamicStorm *****************
 15408 ;; Defined at:
 15409 ;;		line 486 in file "user/src/led.c"
 15410 ;; Parameters:    Size  Location     Type
 15411 ;;  ptp             2    6[COMMON] unsigned int 
 15412 ;; Auto vars:     Size  Location     Type
 15413 ;;  duty           10    0[BANK0 ] unsigned int [5]
 15414 ;;  val             2   10[BANK0 ] unsigned int 
 15415 ;;  i               1   12[BANK0 ] unsigned char 
 15416 ;; Return value:  Size  Location     Type
 15417 ;;                  1    wreg      void 
 15418 ;; Registers used:
 15419 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15420 ;; Tracked objects:
 15421 ;;		On entry : 1F/0
 15422 ;;		On exit  : 14/4
 15423 ;;		Unchanged: 0/0
 15424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15425 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15426 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15427 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15428 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15429 ;;Total ram usage:       19 bytes
 15430 ;; Hardware stack levels used:    1
 15431 ;; Hardware stack levels required when called:    2
 15432 ;; This function calls:
 15433 ;;		i1_Led_UpdateBright
 15434 ;;		i1___wmul
 15435 ;; This function is called by:
 15436 ;;		_Led_RunMusic
 15437 ;; This function uses a non-reentrant model
 15438 ;;
 15439                           
 15440                           
 15441                           ;psect for function _Led_DynamicStorm
 15442  04F1                     _Led_DynamicStorm:	
 15443  04F1                     i1l6216:	
 15444                           ;incstack = 0
 15445                           ; Regs used in _Led_DynamicStorm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15446                           
 15447                           
 15448                           ;led.c: 487: uint8_t i;
 15449                           ;led.c: 488: uint16_t val = ptp * ( 5 + GAIN[gLedPara.mVolume] );
 15450  04F1  25F2  3180         	fcall	PL10	;call to abstracted procedure
 15451  04F3  3005               	movlw	5
 15452  04F4  01F1               	clrf	i1___wmul@multiplier+1
 15453  04F5  07F0               	addwf	i1___wmul@multiplier,f
 15454  04F6  1803               	skipnc
 15455  04F7  0AF1               	incf	i1___wmul@multiplier+1,f
 15456  04F8  0877               	movf	Led_DynamicStorm@ptp+1,w
 15457  04F9  00F3               	movwf	i1___wmul@multiplicand+1
 15458  04FA  0876               	movf	Led_DynamicStorm@ptp,w
 15459  04FB  00F2               	movwf	i1___wmul@multiplicand
 15460  04FC  25C2  3180         	fcall	i1___wmul
 15461  04FE  0871               	movf	?i1___wmul+1,w
 15462  04FF  0020               	movlb	0	; select bank0
 15463  0500  00CB               	movwf	Led_DynamicStorm@val+1
 15464  0501  0870               	movf	?i1___wmul,w
 15465  0502  00CA               	movwf	Led_DynamicStorm@val
 15466                           
 15467                           ;led.c: 489: uint16_t duty[5] = {0, 0, 600, 64, 0};
 15468  0503  30D2               	movlw	low Led_DynamicStorm@F8342
 15469  0504  0086               	movwf	6
 15470  0505  3001               	movlw	high Led_DynamicStorm@F8342
 15471  0506  0087               	movwf	7
 15472  0507  3040               	movlw	low Led_DynamicStorm@duty
 15473  0508  0084               	movwf	4
 15474  0509  3000               	movlw	high Led_DynamicStorm@duty
 15475  050A  0085               	movwf	5
 15476  050B  300A               	movlw	10
 15477  050C  00F8               	movwf	??_Led_DynamicStorm
 15478  050D                     u514_20:	
 15479  050D  0016               	moviw fsr1++
 15480  050E  001A               	movwi fsr0++
 15481  050F  0BF8               	decfsz	??_Led_DynamicStorm,f
 15482  0510  2D0D               	goto	u514_20
 15483                           
 15484                           ;led.c: 490: if (duty[2] > val) {
 15485  0511  0845               	movf	Led_DynamicStorm@duty+5,w
 15486  0512  024B               	subwf	Led_DynamicStorm@val+1,w
 15487  0513  1D03               	skipz
 15488  0514  2D17               	goto	u515_25
 15489  0515  0844               	movf	Led_DynamicStorm@duty+4,w
 15490  0516  024A               	subwf	Led_DynamicStorm@val,w
 15491  0517                     u515_25:	
 15492  0517  1803               	skipnc
 15493  0518  2D1E               	goto	i1l6224
 15494                           
 15495                           ;led.c: 491: duty[2] -= val;
 15496  0519  084A               	movf	Led_DynamicStorm@val,w
 15497  051A  02C4               	subwf	Led_DynamicStorm@duty+4,f
 15498  051B  084B               	movf	Led_DynamicStorm@val+1,w
 15499  051C  3BC5               	subwfb	Led_DynamicStorm@duty+5,f
 15500                           
 15501                           ;led.c: 492: } else {
 15502  051D  2D20               	goto	i1l6226
 15503  051E                     i1l6224:	
 15504                           
 15505                           ;led.c: 493: duty[2] = 0;
 15506  051E  01C4               	clrf	Led_DynamicStorm@duty+4
 15507  051F  01C5               	clrf	Led_DynamicStorm@duty+5
 15508  0520                     i1l6226:	
 15509                           
 15510                           ;led.c: 494: }
 15511                           ;led.c: 495: duty[3] += val;
 15512  0520  084A               	movf	Led_DynamicStorm@val,w
 15513  0521  07C6               	addwf	Led_DynamicStorm@duty+6,f
 15514  0522  084B               	movf	Led_DynamicStorm@val+1,w
 15515  0523  3DC7               	addwfc	Led_DynamicStorm@duty+7,f
 15516                           
 15517                           ;led.c: 496: if( duty[3] > 1000 )
 15518  0524  3003               	movlw	3
 15519  0525  0247               	subwf	Led_DynamicStorm@duty+7,w
 15520  0526  30E9               	movlw	233
 15521  0527  1903               	skipnz
 15522  0528  0246               	subwf	Led_DynamicStorm@duty+6,w
 15523  0529  1C03               	skipc
 15524  052A  2D2F               	goto	i1l6232
 15525                           
 15526                           ;led.c: 497: {
 15527                           ;led.c: 498: duty[3] = 1000;
 15528  052B  30E8               	movlw	232
 15529  052C  00C6               	movwf	Led_DynamicStorm@duty+6
 15530  052D  3003               	movlw	3
 15531  052E  00C7               	movwf	Led_DynamicStorm@duty+7
 15532  052F                     i1l6232:	
 15533                           
 15534                           ;led.c: 499: }
 15535                           ;led.c: 500: for (i = 0; i < 5; i++) {
 15536  052F  01CC               	clrf	Led_DynamicStorm@i
 15537  0530                     i1l6238:	
 15538                           
 15539                           ;led.c: 501: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 15540  0530  354C               	lslf	Led_DynamicStorm@i,w
 15541  0531  3E40               	addlw	(low (Led_DynamicStorm@duty| 0))& (0+255)
 15542  0532  265C  3180         	fcall	PL74	;call to abstracted procedure
 15543  0534  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15544  0535  261C  3180         	fcall	PL42	;call to abstracted procedure
 15545  0537  1803               	skipnc
 15546  0538  2D3F               	goto	i1l6242
 15547                           
 15548                           ;led.c: 502: gLedRunPara.mCurrentBright[i]++;
 15549  0539  354C               	lslf	Led_DynamicStorm@i,w
 15550  053A  25FD  3180         	fcall	PL22	;call to abstracted procedure
 15551  053C  1803               	skipnc
 15552  053D  0A81               	incf	1,f
 15553                           
 15554                           ;led.c: 503: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 15555  053E  2D4B               	goto	i1l6246
 15556  053F                     i1l6242:	
 15557  053F  354C               	lslf	Led_DynamicStorm@i,w
 15558  0540  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15559  0541  265C  3180         	fcall	PL74	;call to abstracted procedure
 15560  0543  3E40               	addlw	(low (Led_DynamicStorm@duty| 0))& (0+255)
 15561  0544  261C  3180         	fcall	PL42	;call to abstracted procedure
 15562  0546  1803               	skipnc
 15563  0547  2D4B               	goto	i1l6246
 15564                           
 15565                           ;led.c: 504: gLedRunPara.mCurrentBright[i]--;
 15566  0548  354C               	lslf	Led_DynamicStorm@i,w
 15567  0549  25E8  3180         	fcall	PL4	;call to abstracted procedure
 15568  054B                     i1l6246:	
 15569  054B  3005               	movlw	5
 15570  054C  0ACC               	incf	Led_DynamicStorm@i,f
 15571  054D  024C               	subwf	Led_DynamicStorm@i,w
 15572  054E  1C03               	skipc
 15573  054F  2D30               	goto	i1l6238
 15574                           
 15575                           ;led.c: 505: }
 15576                           ;led.c: 506: }
 15577                           ;led.c: 507: Led_UpdateBright();
 15578  0550  25D7               	fcall	i1_Led_UpdateBright
 15579  0551  0008               	return
 15580  0552                     __end_of_Led_DynamicStorm:	
 15581  0552                     __ptext80:	
 15582 ;; *************** function _Led_DynamicCloud *****************
 15583 ;; Defined at:
 15584 ;;		line 459 in file "user/src/led.c"
 15585 ;; Parameters:    Size  Location     Type
 15586 ;;  ptp             2    6[COMMON] unsigned int 
 15587 ;; Auto vars:     Size  Location     Type
 15588 ;;  duty           10    0[BANK0 ] unsigned int [5]
 15589 ;;  val             2   10[BANK0 ] unsigned int 
 15590 ;;  i               1   12[BANK0 ] unsigned char 
 15591 ;; Return value:  Size  Location     Type
 15592 ;;                  1    wreg      void 
 15593 ;; Registers used:
 15594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15595 ;; Tracked objects:
 15596 ;;		On entry : 1F/0
 15597 ;;		On exit  : 14/4
 15598 ;;		Unchanged: 0/0
 15599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15600 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15603 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15604 ;;Total ram usage:       19 bytes
 15605 ;; Hardware stack levels used:    1
 15606 ;; Hardware stack levels required when called:    2
 15607 ;; This function calls:
 15608 ;;		i1_Led_UpdateBright
 15609 ;;		i1___wmul
 15610 ;; This function is called by:
 15611 ;;		_Led_RunMusic
 15612 ;; This function uses a non-reentrant model
 15613 ;;
 15614                           
 15615                           
 15616                           ;psect for function _Led_DynamicCloud
 15617  0552                     _Led_DynamicCloud:	
 15618  0552                     i1l6176:	
 15619                           ;incstack = 0
 15620                           ; Regs used in _Led_DynamicCloud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15621                           
 15622                           
 15623                           ;led.c: 460: uint8_t i;
 15624                           ;led.c: 461: uint16_t val = ptp * ( 16 + GAIN[gLedPara.mVolume] );
 15625  0552  25F2  3180         	fcall	PL10	;call to abstracted procedure
 15626  0554  3010               	movlw	16
 15627  0555  01F1               	clrf	i1___wmul@multiplier+1
 15628  0556  07F0               	addwf	i1___wmul@multiplier,f
 15629  0557  1803               	skipnc
 15630  0558  0AF1               	incf	i1___wmul@multiplier+1,f
 15631  0559  0877               	movf	Led_DynamicCloud@ptp+1,w
 15632  055A  00F3               	movwf	i1___wmul@multiplicand+1
 15633  055B  0876               	movf	Led_DynamicCloud@ptp,w
 15634  055C  00F2               	movwf	i1___wmul@multiplicand
 15635  055D  25C2  3180         	fcall	i1___wmul
 15636  055F  0871               	movf	?i1___wmul+1,w
 15637  0560  0020               	movlb	0	; select bank0
 15638  0561  00CB               	movwf	Led_DynamicCloud@val+1
 15639  0562  0870               	movf	?i1___wmul,w
 15640  0563  00CA               	movwf	Led_DynamicCloud@val
 15641                           
 15642                           ;led.c: 462: uint16_t duty[5] = {200, 200, 400, 320, 400};
 15643  0564  30A0               	movlw	low Led_DynamicCloud@F8332
 15644  0565  0086               	movwf	6
 15645  0566  3000               	movlw	high Led_DynamicCloud@F8332
 15646  0567  0087               	movwf	7
 15647  0568  3040               	movlw	low Led_DynamicCloud@duty
 15648  0569  0084               	movwf	4
 15649  056A  3000               	movlw	high Led_DynamicCloud@duty
 15650  056B  0085               	movwf	5
 15651  056C  300A               	movlw	10
 15652  056D  00F8               	movwf	??_Led_DynamicCloud
 15653  056E                     u507_20:	
 15654  056E  0016               	moviw fsr1++
 15655  056F  001A               	movwi fsr0++
 15656  0570  0BF8               	decfsz	??_Led_DynamicCloud,f
 15657  0571  2D6E               	goto	u507_20
 15658                           
 15659                           ;led.c: 463: duty[2] += val;
 15660  0572  084A               	movf	Led_DynamicCloud@val,w
 15661  0573  07C4               	addwf	Led_DynamicCloud@duty+4,f
 15662  0574  084B               	movf	Led_DynamicCloud@val+1,w
 15663  0575  3DC5               	addwfc	Led_DynamicCloud@duty+5,f
 15664                           
 15665                           ;led.c: 464: if (duty[2] > 1000) {
 15666  0576  3003               	movlw	3
 15667  0577  0245               	subwf	Led_DynamicCloud@duty+5,w
 15668  0578  30E9               	movlw	233
 15669  0579  1903               	skipnz
 15670  057A  0244               	subwf	Led_DynamicCloud@duty+4,w
 15671  057B  1C03               	skipc
 15672  057C  2D81               	goto	i1l768
 15673                           
 15674                           ;led.c: 465: duty[2] = 1000;
 15675  057D  30E8               	movlw	232
 15676  057E  00C4               	movwf	Led_DynamicCloud@duty+4
 15677  057F  3003               	movlw	3
 15678  0580  00C5               	movwf	Led_DynamicCloud@duty+5
 15679  0581                     i1l768:	
 15680                           
 15681                           ;led.c: 466: }
 15682                           ;led.c: 467: if (duty[3] > val) {
 15683  0581  0847               	movf	Led_DynamicCloud@duty+7,w
 15684  0582  024B               	subwf	Led_DynamicCloud@val+1,w
 15685  0583  1D03               	skipz
 15686  0584  2D87               	goto	u509_25
 15687  0585  0846               	movf	Led_DynamicCloud@duty+6,w
 15688  0586  024A               	subwf	Led_DynamicCloud@val,w
 15689  0587                     u509_25:	
 15690  0587  1803               	skipnc
 15691  0588  2D8E               	goto	i1l6188
 15692                           
 15693                           ;led.c: 468: duty[3] -= val;
 15694  0589  084A               	movf	Led_DynamicCloud@val,w
 15695  058A  02C6               	subwf	Led_DynamicCloud@duty+6,f
 15696  058B  084B               	movf	Led_DynamicCloud@val+1,w
 15697  058C  3BC7               	subwfb	Led_DynamicCloud@duty+7,f
 15698                           
 15699                           ;led.c: 469: } else {
 15700  058D  2D90               	goto	i1l6190
 15701  058E                     i1l6188:	
 15702                           
 15703                           ;led.c: 470: duty[3] = 0;
 15704  058E  01C6               	clrf	Led_DynamicCloud@duty+6
 15705  058F  01C7               	clrf	Led_DynamicCloud@duty+7
 15706  0590                     i1l6190:	
 15707                           
 15708                           ;led.c: 471: }
 15709                           ;led.c: 472: duty[4] += val;
 15710  0590  084A               	movf	Led_DynamicCloud@val,w
 15711  0591  07C8               	addwf	Led_DynamicCloud@duty+8,f
 15712  0592  084B               	movf	Led_DynamicCloud@val+1,w
 15713  0593  3DC9               	addwfc	Led_DynamicCloud@duty+9,f
 15714                           
 15715                           ;led.c: 473: if (duty[4] > 1000) {
 15716  0594  3003               	movlw	3
 15717  0595  0249               	subwf	Led_DynamicCloud@duty+9,w
 15718  0596  30E9               	movlw	233
 15719  0597  1903               	skipnz
 15720  0598  0248               	subwf	Led_DynamicCloud@duty+8,w
 15721  0599  1C03               	skipc
 15722  059A  2D9F               	goto	i1l6196
 15723                           
 15724                           ;led.c: 474: duty[4] = 1000;
 15725  059B  30E8               	movlw	232
 15726  059C  00C8               	movwf	Led_DynamicCloud@duty+8
 15727  059D  3003               	movlw	3
 15728  059E  00C9               	movwf	Led_DynamicCloud@duty+9
 15729  059F                     i1l6196:	
 15730                           
 15731                           ;led.c: 475: }
 15732                           ;led.c: 476: for (i = 0; i < 5; i++) {
 15733  059F  01CC               	clrf	Led_DynamicCloud@i
 15734  05A0                     i1l6202:	
 15735                           
 15736                           ;led.c: 477: if (gLedRunPara.mCurrentBright[i] < duty[i]) {
 15737  05A0  354C               	lslf	Led_DynamicCloud@i,w
 15738  05A1  3E40               	addlw	(low (Led_DynamicCloud@duty| 0))& (0+255)
 15739  05A2  263C  3180         	fcall	PL66	;call to abstracted procedure
 15740  05A4  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15741  05A5  2604  3180         	fcall	PL36	;call to abstracted procedure
 15742  05A7  1803               	skipnc
 15743  05A8  2DAF               	goto	i1l6206
 15744                           
 15745                           ;led.c: 478: gLedRunPara.mCurrentBright[i]++;
 15746  05A9  354C               	lslf	Led_DynamicCloud@i,w
 15747  05AA  25FD  3180         	fcall	PL22	;call to abstracted procedure
 15748  05AC  1803               	skipnc
 15749  05AD  0A81               	incf	1,f
 15750                           
 15751                           ;led.c: 479: } else if (gLedRunPara.mCurrentBright[i] > duty[i]) {
 15752  05AE  2DBB               	goto	i1l6210
 15753  05AF                     i1l6206:	
 15754  05AF  354C               	lslf	Led_DynamicCloud@i,w
 15755  05B0  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15756  05B1  263C  3180         	fcall	PL66	;call to abstracted procedure
 15757  05B3  3E40               	addlw	(low (Led_DynamicCloud@duty| 0))& (0+255)
 15758  05B4  2604  3180         	fcall	PL36	;call to abstracted procedure
 15759  05B6  1803               	skipnc
 15760  05B7  2DBB               	goto	i1l6210
 15761                           
 15762                           ;led.c: 480: gLedRunPara.mCurrentBright[i]--;
 15763  05B8  354C               	lslf	Led_DynamicCloud@i,w
 15764  05B9  25E8  3180         	fcall	PL4	;call to abstracted procedure
 15765  05BB                     i1l6210:	
 15766  05BB  3005               	movlw	5
 15767  05BC  0ACC               	incf	Led_DynamicCloud@i,f
 15768  05BD  024C               	subwf	Led_DynamicCloud@i,w
 15769  05BE  1C03               	skipc
 15770  05BF  2DA0               	goto	i1l6202
 15771                           
 15772                           ;led.c: 481: }
 15773                           ;led.c: 482: }
 15774                           ;led.c: 483: Led_UpdateBright();
 15775  05C0  25D7               	fcall	i1_Led_UpdateBright
 15776  05C1  0008               	return
 15777  05C2                     __end_of_Led_DynamicCloud:	
 15778  05C2                     __ptext81:	
 15779 ;; *************** function i1___wmul *****************
 15780 ;; Defined at:
 15781 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
 15782 ;; Parameters:    Size  Location     Type
 15783 ;;  multiplier      2    0[COMMON] unsigned int 
 15784 ;;  multiplicand    2    2[COMMON] unsigned int 
 15785 ;; Auto vars:     Size  Location     Type
 15786 ;;  __wmul          2    4[COMMON] unsigned int 
 15787 ;; Return value:  Size  Location     Type
 15788 ;;                  2    0[COMMON] unsigned int 
 15789 ;; Registers used:
 15790 ;;		wreg, status,2, status,0
 15791 ;; Tracked objects:
 15792 ;;		On entry : 1F/2
 15793 ;;		On exit  : 1F/2
 15794 ;;		Unchanged: 1F/0
 15795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15796 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15797 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15799 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15800 ;;Total ram usage:        6 bytes
 15801 ;; Hardware stack levels used:    1
 15802 ;; This function calls:
 15803 ;;		Nothing
 15804 ;; This function is called by:
 15805 ;;		_Led_DynamicWave
 15806 ;;		_Led_DynamicMoon
 15807 ;;		_Led_DynamicCloud
 15808 ;;		_Led_DynamicStorm
 15809 ;; This function uses a non-reentrant model
 15810 ;;
 15811                           
 15812                           
 15813                           ;psect for function i1___wmul
 15814  05C2                     i1___wmul:	
 15815                           
 15816                           ;incstack = 0
 15817                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 15818  05C2  01F4               	clrf	i1___wmul@product
 15819  05C3  01F5               	clrf	i1___wmul@product+1
 15820  05C4                     i1l3944:	
 15821  05C4  1C70               	btfss	i1___wmul@multiplier,0
 15822  05C5  2DCA               	goto	i1l3948
 15823  05C6  0872               	movf	i1___wmul@multiplicand,w
 15824  05C7  07F4               	addwf	i1___wmul@product,f
 15825  05C8  0873               	movf	i1___wmul@multiplicand+1,w
 15826  05C9  3DF5               	addwfc	i1___wmul@product+1,f
 15827  05CA                     i1l3948:	
 15828  05CA  35F2               	lslf	i1___wmul@multiplicand,f
 15829  05CB  0DF3               	rlf	i1___wmul@multiplicand+1,f
 15830  05CC  36F1               	lsrf	i1___wmul@multiplier+1,f
 15831  05CD  0CF0               	rrf	i1___wmul@multiplier,f
 15832  05CE  0870               	movf	i1___wmul@multiplier,w
 15833  05CF  0471               	iorwf	i1___wmul@multiplier+1,w
 15834  05D0  1D03               	btfss	3,2
 15835  05D1  2DC4               	goto	i1l3944
 15836  05D2  0875               	movf	i1___wmul@product+1,w
 15837  05D3  00F1               	movwf	?i1___wmul+1
 15838  05D4  0874               	movf	i1___wmul@product,w
 15839  05D5  00F0               	movwf	?i1___wmul
 15840  05D6  0008               	return
 15841  05D7                     __end_ofi1___wmul:	
 15842  05D7                     __ptext82:	
 15843 ;; *************** function i1_Led_UpdateBright *****************
 15844 ;; Defined at:
 15845 ;;		line 160 in file "user/src/led.c"
 15846 ;; Parameters:    Size  Location     Type
 15847 ;;		None
 15848 ;; Auto vars:     Size  Location     Type
 15849 ;;  Led_UpdateBr    1    4[COMMON] unsigned char 
 15850 ;; Return value:  Size  Location     Type
 15851 ;;                  1    wreg      void 
 15852 ;; Registers used:
 15853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15854 ;; Tracked objects:
 15855 ;;		On entry : 1F/0
 15856 ;;		On exit  : 14/4
 15857 ;;		Unchanged: 0/0
 15858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15860 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15862 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15863 ;;Total ram usage:        1 bytes
 15864 ;; Hardware stack levels used:    1
 15865 ;; Hardware stack levels required when called:    1
 15866 ;; This function calls:
 15867 ;;		i1_PWM1_LoadDutyValue
 15868 ;;		i1_PWM2_LoadDutyValue
 15869 ;;		i1_PWM3_LoadDutyValue
 15870 ;;		i1_PWM4_LoadDutyValue
 15871 ;;		i1_PWM5_LoadDutyValue
 15872 ;; This function is called by:
 15873 ;;		_Led_DynamicWave
 15874 ;;		_Led_DynamicMoon
 15875 ;;		_Led_DynamicCloud
 15876 ;;		_Led_DynamicStorm
 15877 ;; This function uses a non-reentrant model
 15878 ;;
 15879                           
 15880                           
 15881                           ;psect for function i1_Led_UpdateBright
 15882  05D7                     i1_Led_UpdateBright:	
 15883                           
 15884                           ;led.c: 161: for (uint8_t i = 0; i < 5; i++) {
 15885                           
 15886                           ;incstack = 0
 15887                           ; Regs used in i1_Led_UpdateBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15888  05D7  01F4               	clrf	i1Led_UpdateBright@i
 15889  05D8                     i1l5960:	
 15890                           
 15891                           ;led.c: 162: loadDuty[i](gLedRunPara.mCurrentBright[i]);
 15892  05D8  3574               	lslf	i1Led_UpdateBright@i,w
 15893  05D9  22A6               	fcall	PL78	;call to abstracted procedure
 15894  05DA  3574               	lslf	i1Led_UpdateBright@i,w
 15895  05DB  3EBE               	addlw	(low (_loadDuty| 0))& (0+255)
 15896  05DC  0086               	movwf	6
 15897  05DD  3F41               	moviw [1]fsr1
 15898  05DE  008A               	movwf	10
 15899  05DF  3F40               	moviw [0]fsr1
 15900  05E0  000A               	callw
 15901  05E1  3005               	movlw	5
 15902  05E2  3180               	pagesel	$
 15903  05E3  0AF4               	incf	i1Led_UpdateBright@i,f
 15904  05E4  0274               	subwf	i1Led_UpdateBright@i,w
 15905  05E5  1803               	btfsc	3,0
 15906  05E6  0008               	return
 15907  05E7  2DD8               	goto	i1l5960
 15908  05E8                     __end_ofi1_Led_UpdateBright:	
 15909  05E8                     PL4:	
 15910  05E8  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15911  05E9  0086               	movwf	6
 15912  05EA  3001               	movlw	1
 15913  05EB  0187               	clrf	7
 15914  05EC  0281               	subwf	1,f
 15915  05ED  3000               	movlw	0
 15916  05EE  3141               	addfsr 1,1
 15917  05EF  3B81               	subwfb	1,f
 15918  05F0  317F               	addfsr 1,-1
 15919  05F1  0008               	return
 15920  05F2                     __end_ofPL4:	
 15921  05F2                     PL10:	
 15922  05F2  0022               	movlb	2	; select bank2
 15923  05F3  0823               	movf	(_gLedPara^(0+256)+3),w	;volatile
 15924  05F4  3E00               	addlw	low (_GAIN| (0+32768))
 15925  05F5  0084               	movwf	4
 15926  05F6  3098               	movlw	high (_GAIN| (0+32768))
 15927  05F7  1803               	skipnc
 15928  05F8  3E01               	addlw	1
 15929  05F9  0085               	movwf	5
 15930  05FA  0800               	movf	0,w	;code access
 15931  05FB  00F0               	movwf	i1___wmul@multiplier
 15932  05FC  0008               	return
 15933  05FD                     __end_ofPL10:	
 15934  05FD                     PL22:	
 15935  05FD  3EC8               	addlw	(low (_gLedRunPara| 0))& (0+255)
 15936  05FE  0086               	movwf	6
 15937  05FF  3001               	movlw	1
 15938  0600  0187               	clrf	7
 15939  0601  0781               	addwf	1,f
 15940  0602  3141               	addfsr 1,1
 15941  0603  0008               	return
 15942  0604                     __end_ofPL22:	
 15943  0604                     PL36:	
 15944  0604  0086               	movwf	6
 15945  0605  3F40               	moviw [0]fsr1
 15946  0606  00FA               	movwf	??_Led_DynamicCloud+2
 15947  0607  3F41               	moviw [1]fsr1
 15948  0608  00FB               	movwf	??_Led_DynamicCloud+3
 15949  0609  0879               	movf	??_Led_DynamicCloud+1,w
 15950  060A  027B               	subwf	??_Led_DynamicCloud+3,w
 15951  060B  1D03               	skipz
 15952  060C  0008               	return
 15953  060D  0878               	movf	??_Led_DynamicCloud,w
 15954  060E  027A               	subwf	??_Led_DynamicCloud+2,w
 15955  060F  0008               	return
 15956  0610                     __end_ofPL36:	
 15957  0610                     PL38:	
 15958  0610  0086               	movwf	6
 15959  0611  3F40               	moviw [0]fsr1
 15960  0612  00FA               	movwf	??_Led_DynamicWave+2
 15961  0613  3F41               	moviw [1]fsr1
 15962  0614  00FB               	movwf	??_Led_DynamicWave+3
 15963  0615  0879               	movf	??_Led_DynamicWave+1,w
 15964  0616  027B               	subwf	??_Led_DynamicWave+3,w
 15965  0617  1D03               	skipz
 15966  0618  0008               	return
 15967  0619  0878               	movf	??_Led_DynamicWave,w
 15968  061A  027A               	subwf	??_Led_DynamicWave+2,w
 15969  061B  0008               	return
 15970  061C                     __end_ofPL38:	
 15971  061C                     PL42:	
 15972  061C  0086               	movwf	6
 15973  061D  3F40               	moviw [0]fsr1
 15974  061E  00FA               	movwf	??_Led_DynamicStorm+2
 15975  061F  3F41               	moviw [1]fsr1
 15976  0620  00FB               	movwf	??_Led_DynamicStorm+3
 15977  0621  0879               	movf	??_Led_DynamicStorm+1,w
 15978  0622  027B               	subwf	??_Led_DynamicStorm+3,w
 15979  0623  1D03               	skipz
 15980  0624  0008               	return
 15981  0625  0878               	movf	??_Led_DynamicStorm,w
 15982  0626  027A               	subwf	??_Led_DynamicStorm+2,w
 15983  0627  0008               	return
 15984  0628                     __end_ofPL42:	
 15985  0628                     PL48:	
 15986  0628  0086               	movwf	6
 15987  0629  3F40               	moviw [0]fsr1
 15988  062A  00FA               	movwf	??_Led_DynamicMoon+2
 15989  062B  3F41               	moviw [1]fsr1
 15990  062C  00FB               	movwf	??_Led_DynamicMoon+3
 15991  062D  0879               	movf	??_Led_DynamicMoon+1,w
 15992  062E  027B               	subwf	??_Led_DynamicMoon+3,w
 15993  062F  1D03               	skipz
 15994  0630  0008               	return
 15995  0631  0878               	movf	??_Led_DynamicMoon,w
 15996  0632  027A               	subwf	??_Led_DynamicMoon+2,w
 15997  0633  0008               	return
 15998  0634                     __end_ofPL48:	
 15999  0634                     PL64:	
 16000  0634  0081               	movwf	1
 16001  0635  3020               	movlw	32
 16002  0636  0AB4               	incf	_txHead,f
 16003  0637  0234               	subwf	_txHead,w
 16004  0638  1803               	btfsc	3,0
 16005  0639  01B4               	clrf	_txHead
 16006  063A  03DE               	decf	_txRemain,f
 16007  063B  0008               	return
 16008  063C                     __end_ofPL64:	
 16009  063C                     PL66:	
 16010  063C  0086               	movwf	6
 16011  063D  0187               	clrf	7
 16012  063E  3F40               	moviw [0]fsr1
 16013  063F  00F8               	movwf	??_Led_DynamicCloud
 16014  0640  3F41               	moviw [1]fsr1
 16015  0641  00F9               	movwf	??_Led_DynamicCloud+1
 16016  0642  354C               	lslf	Led_DynamicCloud@i,w
 16017  0643  0008               	return
 16018  0644                     __end_ofPL66:	
 16019  0644                     PL68:	
 16020  0644  0086               	movwf	6
 16021  0645  0187               	clrf	7
 16022  0646  3F40               	moviw [0]fsr1
 16023  0647  00F8               	movwf	??_Led_DynamicMoon
 16024  0648  3F41               	moviw [1]fsr1
 16025  0649  00F9               	movwf	??_Led_DynamicMoon+1
 16026  064A  354C               	lslf	Led_DynamicMoon@i,w
 16027  064B  0008               	return
 16028  064C                     __end_ofPL68:	
 16029  064C                     PL70:	
 16030  064C  1211               	bcf	17,4	;volatile
 16031  064D  0020               	movlb	0	; select bank0
 16032  064E  0834               	movf	_txHead,w
 16033  064F  3EA0               	addlw	(low (_txBuf| (0+256)))& (0+255)
 16034  0650  0086               	movwf	6
 16035  0651  3001               	movlw	1	; select bank3/4
 16036  0652  0087               	movwf	7
 16037  0653  0008               	return
 16038  0654                     __end_ofPL70:	
 16039  0654                     PL72:	
 16040  0654  0086               	movwf	6
 16041  0655  0187               	clrf	7
 16042  0656  3F40               	moviw [0]fsr1
 16043  0657  00F8               	movwf	??_Led_DynamicWave
 16044  0658  3F41               	moviw [1]fsr1
 16045  0659  00F9               	movwf	??_Led_DynamicWave+1
 16046  065A  354C               	lslf	Led_DynamicWave@i,w
 16047  065B  0008               	return
 16048  065C                     __end_ofPL72:	
 16049  065C                     PL74:	
 16050  065C  0086               	movwf	6
 16051  065D  0187               	clrf	7
 16052  065E  3F40               	moviw [0]fsr1
 16053  065F  00F8               	movwf	??_Led_DynamicStorm
 16054  0660  3F41               	moviw [1]fsr1
 16055  0661  00F9               	movwf	??_Led_DynamicStorm+1
 16056  0662  354C               	lslf	Led_DynamicStorm@i,w
 16057  0663  0008               	return
 16058  0664                     __end_ofPL74:	
 16059  0664                     PL88:	
 16060  0664  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 16061  0665  00FC               	movwf	??_Led_RunMusic
 16062  0666  0CFC               	rrf	??_Led_RunMusic,f
 16063  0667  0C7C               	rrf	??_Led_RunMusic,w
 16064  0668  390F               	andlw	15
 16065  0669  0008               	return
 16066  066A                     __end_ofPL88:	
 16067                           
 16068                           	psect	text100
 16069  1486                     __ptext100:	
 16070 ;; *************** function _TMR1_GATE_ISR *****************
 16071 ;; Defined at:
 16072 ;;		line 40 in file "driver/src/tmr1.c"
 16073 ;; Parameters:    Size  Location     Type
 16074 ;;		None
 16075 ;; Auto vars:     Size  Location     Type
 16076 ;;		None
 16077 ;; Return value:  Size  Location     Type
 16078 ;;                  1    wreg      void 
 16079 ;; Registers used:
 16080 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16081 ;; Tracked objects:
 16082 ;;		On entry : 1F/0
 16083 ;;		On exit  : 0/0
 16084 ;;		Unchanged: 0/0
 16085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16090 ;;Total ram usage:        0 bytes
 16091 ;; Hardware stack levels used:    1
 16092 ;; Hardware stack levels required when called:    2
 16093 ;; This function calls:
 16094 ;;		Absolute function
 16095 ;;		_IR_Decode
 16096 ;; This function is called by:
 16097 ;;		_ISR
 16098 ;; This function uses a non-reentrant model
 16099 ;;
 16100                           
 16101                           
 16102                           ;psect for function _TMR1_GATE_ISR
 16103  1486                     _TMR1_GATE_ISR:	
 16104                           
 16105                           ;tmr1.c: 42: PIR1bits.TMR1GIF = 0;
 16106                           
 16107                           ;incstack = 0
 16108                           ; Regs used in _TMR1_GATE_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16109  1486  1391               	bcf	17,7	;volatile
 16110                           
 16111                           ;tmr1.c: 43: if ( tmr1_gate_isr_handler )
 16112  1487  0021               	movlb	1	; select bank1
 16113  1488  0866               	movf	_tmr1_gate_isr_handler^(0+128),w
 16114  1489  0467               	iorwf	(_tmr1_gate_isr_handler+1)^(0+128),w
 16115  148A  1903               	btfsc	3,2
 16116  148B  0008               	return
 16117                           
 16118                           ;tmr1.c: 44: {
 16119                           ;tmr1.c: 45: tmr1_gate_isr_handler ( );
 16120  148C  0867               	movf	(_tmr1_gate_isr_handler+1)^(0+128),w
 16121  148D  008A               	movwf	10
 16122  148E  0866               	movf	_tmr1_gate_isr_handler^(0+128),w
 16123  148F  000A               	callw
 16124  1490  3194               	pagesel	$
 16125  1491  0008               	return
 16126  1492                     __end_of_TMR1_GATE_ISR:	
 16127                           
 16128                           	psect	text101
 16129  1610                     __ptext101:	
 16130 ;; *************** function _IR_Decode *****************
 16131 ;; Defined at:
 16132 ;;		line 250 in file "user/src/ir.c"
 16133 ;; Parameters:    Size  Location     Type
 16134 ;;		None
 16135 ;; Auto vars:     Size  Location     Type
 16136 ;;  type            1    8[COMMON] unsigned char 
 16137 ;;  hVal            2   10[COMMON] unsigned int 
 16138 ;;  keyNum          1    9[COMMON] unsigned char 
 16139 ;;  revKeyNum       1    7[COMMON] unsigned char 
 16140 ;; Return value:  Size  Location     Type
 16141 ;;                  1    wreg      void 
 16142 ;; Registers used:
 16143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16144 ;; Tracked objects:
 16145 ;;		On entry : 1F/1
 16146 ;;		On exit  : 1E/0
 16147 ;;		Unchanged: 0/0
 16148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16150 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16151 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16152 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16153 ;;Total ram usage:        9 bytes
 16154 ;; Hardware stack levels used:    1
 16155 ;; Hardware stack levels required when called:    1
 16156 ;; This function calls:
 16157 ;;		_IR_GetKeyType
 16158 ;;		i1_TMR2_DisableInterrupt
 16159 ;;		i1_TMR2_EnableInterrupt
 16160 ;; This function is called by:
 16161 ;;		_Interrupt_Initialize
 16162 ;;		_TMR1_GATE_ISR
 16163 ;; This function uses a non-reentrant model
 16164 ;;
 16165                           
 16166                           
 16167                           ;psect for function _IR_Decode
 16168  1610                     _IR_Decode:	
 16169                           
 16170                           ;ir.c: 252: uint8_t revKeyNum = 0;
 16171                           
 16172                           ;incstack = 0
 16173                           ; Regs used in _IR_Decode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16174  1610  01F7               	clrf	IR_Decode@revKeyNum
 16175                           
 16176                           ;ir.c: 253: uint16_t hVal = TMR1;
 16177  1611  0020               	movlb	0	; select bank0
 16178  1612  081A               	movf	26,w	;volatile
 16179  1613  00FB               	movwf	IR_Decode@hVal+1
 16180  1614  0819               	movf	25,w	;volatile
 16181  1615  00FA               	movwf	IR_Decode@hVal
 16182                           
 16183                           ;ir.c: 254: static uint16_t codeVal = 0;
 16184                           ;ir.c: 255: static uint8_t nBit = 0;
 16185                           ;ir.c: 256: static uint8_t rptCnt = 0;
 16186                           ;ir.c: 258: TMR1 = 0;
 16187  1616  0199               	clrf	25	;volatile
 16188  1617  019A               	clrf	26	;volatile
 16189                           
 16190                           ;ir.c: 260: switch (ir_state.mState) {
 16191  1618  2ECE               	goto	i1l5106
 16192  1619                     i1l5010:	
 16193                           
 16194                           ;ir.c: 262: if (hVal > 2000 && hVal < 2500) {
 16195  1619  3007               	movlw	7
 16196  161A  027B               	subwf	IR_Decode@hVal+1,w
 16197  161B  30D1               	movlw	209
 16198  161C  1903               	skipnz
 16199  161D  027A               	subwf	IR_Decode@hVal,w
 16200  161E  1C03               	skipc
 16201  161F  0008               	return
 16202  1620  3009               	movlw	9
 16203  1621  027B               	subwf	IR_Decode@hVal+1,w
 16204  1622  30C4               	movlw	196
 16205  1623  1903               	skipnz
 16206  1624  027A               	subwf	IR_Decode@hVal,w
 16207  1625  1803               	skipnc
 16208  1626  0008               	return
 16209                           
 16210                           ;ir.c: 263: ir_state.mState = 1;
 16211  1627  0836               	movf	_ir_state,w	;volatile
 16212  1628  39E3               	andlw	-29
 16213  1629  3804               	iorlw	4
 16214  162A  00B6               	movwf	_ir_state	;volatile
 16215                           
 16216                           ;ir.c: 264: codeVal = 0;
 16217  162B  01A2               	clrf	IR_Decode@codeVal
 16218  162C  01A3               	clrf	IR_Decode@codeVal+1
 16219                           
 16220                           ;ir.c: 265: nBit = 0;
 16221  162D  01AF               	clrf	IR_Decode@nBit
 16222                           
 16223                           ;ir.c: 266: TMR2_DisableInterrupt();
 16224  162E  27E8               	fcall	i1_TMR2_DisableInterrupt
 16225  162F  0008               	return
 16226  1630                     i1l5022:	
 16227                           
 16228                           ;ir.c: 271: case 2:
 16229                           ;ir.c: 272: if (hVal > 220 && hVal < 340) {
 16230  1630  3000               	movlw	0
 16231  1631  027B               	subwf	IR_Decode@hVal+1,w
 16232  1632  30DD               	movlw	221
 16233  1633  1903               	skipnz
 16234  1634  027A               	subwf	IR_Decode@hVal,w
 16235  1635  1C03               	skipc
 16236  1636  2E40               	goto	i1l5028
 16237  1637  3001               	movlw	1
 16238  1638  027B               	subwf	IR_Decode@hVal+1,w
 16239  1639  3054               	movlw	84
 16240  163A  1903               	skipnz
 16241  163B  027A               	subwf	IR_Decode@hVal,w
 16242  163C  1803               	skipnc
 16243  163D  2E40               	goto	i1l5028
 16244  163E                     i1l5026:	
 16245                           
 16246                           ;ir.c: 273: nBit++;
 16247  163E  0AAF               	incf	IR_Decode@nBit,f
 16248                           
 16249                           ;ir.c: 274: } else if (hVal > 720 && hVal < 960) {
 16250  163F  2E5E               	goto	i1l5038
 16251  1640                     i1l5028:	
 16252  1640  3002               	movlw	2
 16253  1641  027B               	subwf	IR_Decode@hVal+1,w
 16254  1642  30D1               	movlw	209
 16255  1643  1903               	skipnz
 16256  1644  027A               	subwf	IR_Decode@hVal,w
 16257  1645  1C03               	skipc
 16258  1646  2E5C               	goto	i1l5036
 16259  1647  3003               	movlw	3
 16260  1648  027B               	subwf	IR_Decode@hVal+1,w
 16261  1649  30C0               	movlw	192
 16262  164A  1903               	skipnz
 16263  164B  027A               	subwf	IR_Decode@hVal,w
 16264  164C  1803               	skipnc
 16265  164D  2E5C               	goto	i1l5036
 16266                           
 16267                           ;ir.c: 275: codeVal |= (1 << nBit);
 16268  164E  3001               	movlw	1
 16269  164F  00F3               	movwf	??_IR_Decode
 16270  1650  01F4               	clrf	??_IR_Decode+1
 16271  1651  0A2F               	incf	IR_Decode@nBit,w
 16272  1652  2E55               	goto	u372_24
 16273  1653                     u372_25:	
 16274  1653  35F3               	lslf	??_IR_Decode,f
 16275  1654  0DF4               	rlf	??_IR_Decode+1,f
 16276  1655                     u372_24:	
 16277  1655  0B89               	decfsz	9,f
 16278  1656  2E53               	goto	u372_25
 16279  1657  0873               	movf	??_IR_Decode,w
 16280  1658  04A2               	iorwf	IR_Decode@codeVal,f
 16281  1659  0874               	movf	??_IR_Decode+1,w
 16282  165A  04A3               	iorwf	IR_Decode@codeVal+1,f
 16283  165B  2E3E               	goto	i1l5026
 16284  165C                     i1l5036:	
 16285                           
 16286                           ;ir.c: 278: ir_state.mState = 0;
 16287  165C  30E3               	movlw	-29
 16288  165D  05B6               	andwf	_ir_state,f	;volatile
 16289  165E                     i1l5038:	
 16290                           
 16291                           ;ir.c: 279: }
 16292                           ;ir.c: 280: if (nBit >= 16) {
 16293  165E  3010               	movlw	16
 16294  165F  022F               	subwf	IR_Decode@nBit,w
 16295  1660  1C03               	skipc
 16296  1661  0008               	return
 16297                           
 16298                           ;ir.c: 281: if (ir_state.mState == 1) {
 16299  1662  0C36               	rrf	_ir_state,w	;volatile
 16300  1663  0C89               	rrf	9,f
 16301  1664  3907               	andlw	7
 16302  1665  3A01               	xorlw	1
 16303  1666  1D03               	skipz
 16304  1667  2E71               	goto	i1l5048
 16305                           
 16306                           ;ir.c: 282: if (codeVal == 0xFF00) {
 16307  1668  0A23               	incf	IR_Decode@codeVal+1,w
 16308  1669  0422               	iorwf	IR_Decode@codeVal,w
 16309  166A  1D03               	btfss	3,2
 16310  166B  2EAF               	goto	i1l5088
 16311                           
 16312                           ;ir.c: 283: ir_state.mState = 2;
 16313  166C  0836               	movf	_ir_state,w	;volatile
 16314  166D  39E3               	andlw	-29
 16315  166E  3808               	iorlw	8
 16316  166F  00B6               	movwf	_ir_state	;volatile
 16317                           
 16318                           ;ir.c: 284: } else {
 16319  1670  2EB1               	goto	i1l5090
 16320  1671                     i1l5048:	
 16321                           ;ir.c: 285: ir_state.mState = 0;
 16322                           
 16323  1671  0C36               	rrf	_ir_state,w	;volatile
 16324  1672  0C89               	rrf	9,f
 16325  1673  3907               	andlw	7
 16326  1674  3A02               	xorlw	2
 16327  1675  1D03               	skipz
 16328  1676  2EB1               	goto	i1l5090
 16329                           
 16330                           ;ir.c: 288: TMR2_EnableInterrupt();
 16331  1677  27E5  3196         	fcall	i1_TMR2_EnableInterrupt
 16332                           
 16333                           ;ir.c: 289: keyNum = codeVal & 0xFF;
 16334  1679  0020               	movlb	0	; select bank0
 16335  167A  0822               	movf	IR_Decode@codeVal,w
 16336  167B  00F9               	movwf	IR_Decode@keyNum
 16337                           
 16338                           ;ir.c: 290: revKeyNum = codeVal >> 8;
 16339  167C  0823               	movf	IR_Decode@codeVal+1,w
 16340  167D  00F7               	movwf	IR_Decode@revKeyNum
 16341                           
 16342                           ;ir.c: 291: if (keyNum ^ revKeyNum == 0xFF)
 16343  167E  0F77               	incfsz	IR_Decode@revKeyNum,w
 16344  167F  2E82               	goto	u377_20
 16345  1680  3001               	movlw	1
 16346  1681  2E83               	goto	u378_20
 16347  1682                     u377_20:	
 16348  1682  3000               	movlw	0
 16349  1683                     u378_20:	
 16350  1683  00F3               	movwf	??_IR_Decode
 16351  1684  01F4               	clrf	??_IR_Decode+1
 16352  1685  0679               	xorwf	IR_Decode@keyNum,w
 16353  1686  00F5               	movwf	??_IR_Decode+2
 16354  1687  0874               	movf	??_IR_Decode+1,w
 16355  1688  00F6               	movwf	??_IR_Decode+3
 16356  1689  0475               	iorwf	??_IR_Decode+2,w
 16357  168A  1903               	btfsc	3,2
 16358  168B  2EAF               	goto	i1l5088
 16359                           
 16360                           ;ir.c: 292: {
 16361                           ;ir.c: 293: uint8_t type = IR_GetKeyType(keyNum);
 16362  168C  0879               	movf	IR_Decode@keyNum,w
 16363  168D  26DE  3196         	fcall	_IR_GetKeyType
 16364  168F  00F8               	movwf	IR_Decode@type
 16365                           
 16366                           ;ir.c: 294: if (type == 255) {
 16367  1690  0F78               	incfsz	IR_Decode@type,w
 16368  1691  2E94               	goto	i1l5068
 16369                           
 16370                           ;ir.c: 295: keyValue = 255;
 16371  1692  30FF               	movlw	255
 16372  1693  2E97               	goto	L30
 16373  1694                     i1l5068:	
 16374                           ;ir.c: 298: } else if (type == 1) {
 16375                           
 16376                           ;ir.c: 297: ir_state.mState = 0;
 16377                           
 16378                           ;ir.c: 296: ir_state.mKeyRcv = 1;
 16379                           
 16380  1694  0B78               	decfsz	IR_Decode@type,w
 16381  1695  2E9B               	goto	i1l5076
 16382                           
 16383                           ;ir.c: 299: keyValue = keyNum;
 16384  1696  0879               	movf	IR_Decode@keyNum,w
 16385  1697                     L30:	
 16386  1697  0020               	movlb	0	; select bank0
 16387  1698  00B0               	movwf	_keyValue	;volatile
 16388                           
 16389                           ;ir.c: 300: ir_state.mKeyRcv = 1;
 16390  1699  1436               	bsf	_ir_state,0	;volatile
 16391  169A  2EAF               	goto	i1l5088
 16392  169B                     i1l5076:	
 16393                           ;ir.c: 302: } else if (type == 3 || type == 2) {
 16394                           
 16395                           ;ir.c: 301: ir_state.mState = 0;
 16396                           
 16397  169B  3003               	movlw	3
 16398  169C  0678               	xorwf	IR_Decode@type,w
 16399  169D  1903               	btfsc	3,2
 16400  169E  2EA3               	goto	i1l5080
 16401  169F  3002               	movlw	2
 16402  16A0  0678               	xorwf	IR_Decode@type,w
 16403  16A1  1D03               	btfss	3,2
 16404  16A2  2EAC               	goto	i1l5086
 16405  16A3                     i1l5080:	
 16406                           
 16407                           ;ir.c: 303: keyValue = keyNum;
 16408  16A3  0879               	movf	IR_Decode@keyNum,w
 16409  16A4  0020               	movlb	0	; select bank0
 16410  16A5  00B0               	movwf	_keyValue	;volatile
 16411                           
 16412                           ;ir.c: 304: ir_state.mState = 3;
 16413  16A6  0836               	movf	_ir_state,w	;volatile
 16414  16A7  39E3               	andlw	-29
 16415  16A8  380C               	iorlw	12
 16416  16A9  00B6               	movwf	_ir_state	;volatile
 16417                           
 16418                           ;ir.c: 305: rptCnt = 0;
 16419  16AA  01AE               	clrf	IR_Decode@rptCnt
 16420                           
 16421                           ;ir.c: 306: } else {
 16422  16AB  2EB1               	goto	i1l5090
 16423  16AC                     i1l5086:	
 16424                           
 16425                           ;ir.c: 307: ir_state.mState = 0;
 16426  16AC  30E3               	movlw	-29
 16427  16AD  0020               	movlb	0	; select bank0
 16428  16AE  2EB0               	goto	L29
 16429  16AF                     i1l5088:	
 16430                           
 16431                           ;ir.c: 310: ir_state.mState = 0;
 16432  16AF  30E3               	movlw	-29
 16433  16B0                     L29:	
 16434  16B0  05B6               	andwf	_ir_state,f	;volatile
 16435  16B1                     i1l5090:	
 16436                           
 16437                           ;ir.c: 311: }
 16438                           ;ir.c: 312: }
 16439                           ;ir.c: 313: codeVal = 0;
 16440  16B1  01A2               	clrf	IR_Decode@codeVal
 16441  16B2  01A3               	clrf	IR_Decode@codeVal+1
 16442                           
 16443                           ;ir.c: 314: nBit = 0;
 16444  16B3  01AF               	clrf	IR_Decode@nBit
 16445  16B4  0008               	return
 16446  16B5                     i1l5094:	
 16447                           
 16448                           ;ir.c: 319: if (hVal > 1000 && hVal < 1250) {
 16449  16B5  3003               	movlw	3
 16450  16B6  027B               	subwf	IR_Decode@hVal+1,w
 16451  16B7  30E9               	movlw	233
 16452  16B8  1903               	skipnz
 16453  16B9  027A               	subwf	IR_Decode@hVal,w
 16454  16BA  1C03               	skipc
 16455  16BB  0008               	return
 16456  16BC  3004               	movlw	4
 16457  16BD  027B               	subwf	IR_Decode@hVal+1,w
 16458  16BE  30E2               	movlw	226
 16459  16BF  1903               	skipnz
 16460  16C0  027A               	subwf	IR_Decode@hVal,w
 16461  16C1  1803               	skipnc
 16462  16C2  0008               	return
 16463                           
 16464                           ;ir.c: 320: if (rptCnt < 4) {
 16465  16C3  3004               	movlw	4
 16466  16C4  022E               	subwf	IR_Decode@rptCnt,w
 16467  16C5  1803               	skipnc
 16468  16C6  2EC9               	goto	i1l1088
 16469                           
 16470                           ;ir.c: 321: rptCnt++;
 16471  16C7  0AAE               	incf	IR_Decode@rptCnt,f
 16472                           
 16473                           ;ir.c: 322: } else {
 16474  16C8  0008               	return
 16475  16C9                     i1l1088:	
 16476                           
 16477                           ;ir.c: 323: ir_state.mKeyRpt = 1;
 16478  16C9  14B6               	bsf	_ir_state,1	;volatile
 16479  16CA  0008               	return
 16480  16CB                     i1l5102:	
 16481                           
 16482                           ;ir.c: 329: ir_state.mState = 0;
 16483  16CB  30E3               	movlw	-29
 16484  16CC  05B6               	andwf	_ir_state,f	;volatile
 16485                           
 16486                           ;ir.c: 330: break;
 16487  16CD  0008               	return
 16488  16CE                     i1l5106:	
 16489  16CE  0C36               	rrf	_ir_state,w	;volatile
 16490  16CF  0C89               	rrf	9,f
 16491  16D0  3907               	andlw	7
 16492                           
 16493                           ; Switch size 1, requested type "space"
 16494                           ; Number of cases is 4, Range of values is 0 to 3
 16495                           ; switch strategies available:
 16496                           ; Name         Instructions Cycles
 16497                           ; simple_byte           13     7 (average)
 16498                           ; direct_byte           14     6 (fixed)
 16499                           ; jumptable            260     6 (fixed)
 16500                           ;	Chosen strategy is simple_byte
 16501  16D1  1903               	skipnz
 16502  16D2  2E19               	goto	i1l5010
 16503  16D3  3A01               	xorlw	1	; case 1
 16504  16D4  1903               	skipnz
 16505  16D5  2E30               	goto	i1l5022
 16506  16D6  3A03               	xorlw	3	; case 2
 16507  16D7  1903               	skipnz
 16508  16D8  2E30               	goto	i1l5022
 16509  16D9  3A01               	xorlw	1	; case 3
 16510  16DA  1903               	skipnz
 16511  16DB  2EB5               	goto	i1l5094
 16512  16DC  2ECB               	goto	i1l5102
 16513  16DD  0008               	return
 16514  16DE                     __end_of_IR_Decode:	
 16515  16DE                     __ptext104:	
 16516 ;; *************** function _IR_GetKeyType *****************
 16517 ;; Defined at:
 16518 ;;		line 107 in file "user/src/ir.c"
 16519 ;; Parameters:    Size  Location     Type
 16520 ;;  keynum          1    wreg     unsigned char 
 16521 ;; Auto vars:     Size  Location     Type
 16522 ;;  keynum          1    2[COMMON] unsigned char 
 16523 ;;  result          1    1[COMMON] unsigned char 
 16524 ;; Return value:  Size  Location     Type
 16525 ;;                  1    wreg      unsigned char 
 16526 ;; Registers used:
 16527 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16528 ;; Tracked objects:
 16529 ;;		On entry : 1F/0
 16530 ;;		On exit  : 1D/0
 16531 ;;		Unchanged: 0/0
 16532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16534 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16535 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16536 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16537 ;;Total ram usage:        3 bytes
 16538 ;; Hardware stack levels used:    1
 16539 ;; This function calls:
 16540 ;;		Nothing
 16541 ;; This function is called by:
 16542 ;;		_IR_Decode
 16543 ;; This function uses a non-reentrant model
 16544 ;;
 16545                           
 16546                           
 16547                           ;psect for function _IR_GetKeyType
 16548  16DE                     _IR_GetKeyType:	
 16549                           
 16550                           ;incstack = 0
 16551                           ; Regs used in _IR_GetKeyType: [wreg-fsr0h+status,2+status,0]
 16552                           ;IR_GetKeyType@keynum stored from wreg
 16553  16DE  00F2               	movwf	IR_GetKeyType@keynum
 16554                           
 16555                           ;ir.c: 108: uint8_t result = 0;
 16556  16DF  01F1               	clrf	IR_GetKeyType@result
 16557                           
 16558                           ;ir.c: 109: if (ir_state.mSet == 0) {
 16559  16E0  0E36               	swapf	_ir_state,w	;volatile
 16560  16E1  0C89               	rrf	9,f
 16561  16E2  3907               	andlw	7
 16562  16E3  1D03               	skipz
 16563  16E4  2F79               	goto	i1l4678
 16564                           
 16565                           ;ir.c: 110: if (keynum == 0x5D || keynum == 0x5C) {
 16566  16E5  305D               	movlw	93
 16567  16E6  0672               	xorwf	IR_GetKeyType@keynum,w
 16568  16E7  1903               	btfsc	3,2
 16569  16E8  2EED               	goto	i1l942
 16570  16E9  305C               	movlw	92
 16571  16EA  0672               	xorwf	IR_GetKeyType@keynum,w
 16572  16EB  1D03               	btfss	3,2
 16573  16EC  2EF0               	goto	i1l4646
 16574  16ED                     i1l942:	
 16575                           
 16576                           ;ir.c: 111: result = 1;
 16577  16ED  01F1               	clrf	IR_GetKeyType@result
 16578  16EE  0AF1               	incf	IR_GetKeyType@result,f
 16579                           
 16580                           ;ir.c: 112: } else if (keynum == 0x10 || keynum == 0x11
 16581  16EF  2FE3               	goto	i1l4702
 16582  16F0                     i1l4646:	
 16583                           
 16584                           ;ir.c: 113: || keynum == 0x12 || keynum == 0x13
 16585                           ;ir.c: 114: || keynum == 0x06) {
 16586  16F0  3010               	movlw	16
 16587  16F1  0672               	xorwf	IR_GetKeyType@keynum,w
 16588  16F2  1903               	btfsc	3,2
 16589  16F3  2F04               	goto	i1l4656
 16590  16F4  3011               	movlw	17
 16591  16F5  0672               	xorwf	IR_GetKeyType@keynum,w
 16592  16F6  1903               	btfsc	3,2
 16593  16F7  2F04               	goto	i1l4656
 16594  16F8  3012               	movlw	18
 16595  16F9  0672               	xorwf	IR_GetKeyType@keynum,w
 16596  16FA  1903               	btfsc	3,2
 16597  16FB  2F04               	goto	i1l4656
 16598  16FC  3013               	movlw	19
 16599  16FD  0672               	xorwf	IR_GetKeyType@keynum,w
 16600  16FE  1903               	btfsc	3,2
 16601  16FF  2F04               	goto	i1l4656
 16602  1700  3006               	movlw	6
 16603  1701  0672               	xorwf	IR_GetKeyType@keynum,w
 16604  1702  1D03               	btfss	3,2
 16605  1703  2F06               	goto	i1l944
 16606  1704                     i1l4656:	
 16607                           
 16608                           ;ir.c: 115: result = 3;
 16609  1704  3003               	movlw	3
 16610  1705  2F86               	goto	L32
 16611  1706                     i1l944:	
 16612                           ;ir.c: 116: } else if (gLedPara.mOn) {
 16613                           
 16614  1706  0022               	movlb	2	; select bank2
 16615  1707  18A0               	btfsc	_gLedPara^(0+256),1	;volatile
 16616  1708  2F28               	goto	i1l4676
 16617  1709  2FE3               	goto	i1l4702
 16618  170A                     i1l953:	
 16619  170A  2EED               	goto	i1l942
 16620  170B                     i1l960:	
 16621                           
 16622                           ;ir.c: 129: case 0x18:
 16623                           ;ir.c: 130: if (gLedPara.mAuto || gLedPara.mMsc == 0) {
 16624  170B  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 16625  170C  2EED               	goto	i1l942
 16626  170D  27EB  3196         	fcall	PL60	;call to abstracted procedure
 16627  170F  1903               	btfsc	3,2
 16628  1710  2EED               	goto	i1l942
 16629  1711  2FE3               	goto	i1l4702
 16630  1712                     i1l965:	
 16631                           
 16632                           ;ir.c: 135: case 0x1B:
 16633                           ;ir.c: 136: if (!gLedPara.mAuto && gLedPara.mMsc) {
 16634  1712  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 16635  1713  2FE3               	goto	i1l4702
 16636  1714  27EB  3196         	fcall	PL60	;call to abstracted procedure
 16637  1716  1D03               	btfss	3,2
 16638  1717  2EED               	goto	i1l942
 16639  1718  2FE3               	goto	i1l4702
 16640  1719                     i1l970:	
 16641                           
 16642                           ;ir.c: 141: case 0x51:
 16643                           ;ir.c: 142: case 0x4D:
 16644                           ;ir.c: 143: case 0x4C:
 16645                           ;ir.c: 144: if (gLedPara.mAuto || gLedPara.mMsc) {
 16646  1719  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 16647  171A  2EED               	goto	i1l942
 16648  171B  27EB  3196         	fcall	PL60	;call to abstracted procedure
 16649  171D  1D03               	btfss	3,2
 16650  171E  2EED               	goto	i1l942
 16651  171F                     i1l4668:	
 16652                           
 16653                           ;ir.c: 147: result = 2;
 16654  171F  3002               	movlw	2
 16655  1720  2F86               	goto	L32
 16656  1721                     i1l978:	
 16657  1721                     i1l984:	
 16658                           
 16659                           ;ir.c: 151: case 0x59:
 16660                           ;ir.c: 152: case 0x45:
 16661                           ;ir.c: 153: case 0x44:
 16662                           ;ir.c: 154: case 0x41:
 16663                           ;ir.c: 155: case 0x54:
 16664                           ;ir.c: 156: case 0x55:
 16665                           ;ir.c: 157: case 0x49:
 16666                           ;ir.c: 158: case 0x48:
 16667                           ;ir.c: 159: case 0x40:
 16668                           ;ir.c: 160: if (gLedPara.mAuto || gLedPara.mMsc == 0) {
 16669  1721  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 16670  1722  2F1F               	goto	i1l4668
 16671  1723  27EB  3196         	fcall	PL60	;call to abstracted procedure
 16672  1725  1903               	btfsc	3,2
 16673  1726  2F1F               	goto	i1l4668
 16674  1727  2FE3               	goto	i1l4702
 16675  1728                     i1l4676:	
 16676  1728  0872               	movf	IR_GetKeyType@keynum,w
 16677                           
 16678                           ; Switch size 1, requested type "space"
 16679                           ; Number of cases is 26, Range of values is 20 to 89
 16680                           ; switch strategies available:
 16681                           ; Name         Instructions Cycles
 16682                           ; simple_byte           79    40 (average)
 16683                           ; direct_byte          149     9 (fixed)
 16684                           ; jumptable            263     9 (fixed)
 16685                           ;	Chosen strategy is simple_byte
 16686  1729  3A14               	xorlw	20	; case 20
 16687  172A  1903               	skipnz
 16688  172B  2EED               	goto	i1l942
 16689  172C  3A01               	xorlw	1	; case 21
 16690  172D  1903               	skipnz
 16691  172E  2EED               	goto	i1l942
 16692  172F  3A03               	xorlw	3	; case 22
 16693  1730  1903               	skipnz
 16694  1731  2EED               	goto	i1l942
 16695  1732  3A01               	xorlw	1	; case 23
 16696  1733  1903               	skipnz
 16697  1734  2EED               	goto	i1l942
 16698  1735  3A0F               	xorlw	15	; case 24
 16699  1736  1903               	skipnz
 16700  1737  2F0B               	goto	i1l960
 16701  1738  3A01               	xorlw	1	; case 25
 16702  1739  1903               	skipnz
 16703  173A  2F0B               	goto	i1l960
 16704  173B  3A03               	xorlw	3	; case 26
 16705  173C  1903               	skipnz
 16706  173D  2F12               	goto	i1l965
 16707  173E  3A01               	xorlw	1	; case 27
 16708  173F  1903               	skipnz
 16709  1740  2F12               	goto	i1l965
 16710  1741  3A07               	xorlw	7	; case 28
 16711  1742  1903               	skipnz
 16712  1743  2F0A               	goto	i1l953
 16713  1744  3A01               	xorlw	1	; case 29
 16714  1745  1903               	skipnz
 16715  1746  2EED               	goto	i1l942
 16716  1747  3A03               	xorlw	3	; case 30
 16717  1748  1903               	skipnz
 16718  1749  2EED               	goto	i1l942
 16719  174A  3A01               	xorlw	1	; case 31
 16720  174B  1903               	skipnz
 16721  174C  2EED               	goto	i1l942
 16722  174D  3A5F               	xorlw	95	; case 64
 16723  174E  1903               	skipnz
 16724  174F  2F21               	goto	i1l984
 16725  1750  3A01               	xorlw	1	; case 65
 16726  1751  1903               	skipnz
 16727  1752  2F21               	goto	i1l984
 16728  1753  3A05               	xorlw	5	; case 68
 16729  1754  1903               	skipnz
 16730  1755  2F21               	goto	i1l984
 16731  1756  3A01               	xorlw	1	; case 69
 16732  1757  1903               	skipnz
 16733  1758  2F21               	goto	i1l984
 16734  1759  3A0D               	xorlw	13	; case 72
 16735  175A  1903               	skipnz
 16736  175B  2F21               	goto	i1l984
 16737  175C  3A01               	xorlw	1	; case 73
 16738  175D  1903               	skipnz
 16739  175E  2F21               	goto	i1l984
 16740  175F  3A05               	xorlw	5	; case 76
 16741  1760  1903               	skipnz
 16742  1761  2F19               	goto	i1l970
 16743  1762  3A01               	xorlw	1	; case 77
 16744  1763  1903               	skipnz
 16745  1764  2F19               	goto	i1l970
 16746  1765  3A1D               	xorlw	29	; case 80
 16747  1766  1903               	skipnz
 16748  1767  2F19               	goto	i1l970
 16749  1768  3A01               	xorlw	1	; case 81
 16750  1769  1903               	skipnz
 16751  176A  2F19               	goto	i1l970
 16752  176B  3A05               	xorlw	5	; case 84
 16753  176C  1903               	skipnz
 16754  176D  2F21               	goto	i1l984
 16755  176E  3A01               	xorlw	1	; case 85
 16756  176F  1903               	skipnz
 16757  1770  2F21               	goto	i1l984
 16758  1771  3A0D               	xorlw	13	; case 88
 16759  1772  1903               	skipnz
 16760  1773  2F21               	goto	i1l978
 16761  1774  3A01               	xorlw	1	; case 89
 16762  1775  1903               	skipnz
 16763  1776  2F21               	goto	i1l984
 16764  1777  2F78               	goto	i1l947
 16765  1778                     i1l947:	
 16766  1778  2FE3               	goto	i1l4702
 16767  1779                     i1l4678:	
 16768  1779  318F  2761  3196   	fcall	PL100	;call to abstracted procedure
 16769  177C  1903               	skipnz
 16770  177D  2F88               	goto	i1l4688
 16771  177E  318F  275C  3196   	fcall	PL98	;call to abstracted procedure
 16772  1781  1903               	btfsc	3,2
 16773  1782  2F88               	goto	i1l4688
 16774  1783  2FB7               	goto	i1l4690
 16775  1784                     i1l997:	
 16776  1784  2F1F               	goto	i1l4668
 16777  1785                     i1l4684:	
 16778                           
 16779                           ;ir.c: 190: result = 255;
 16780  1785  30FF               	movlw	255
 16781  1786                     L32:	
 16782  1786  00F1               	movwf	IR_GetKeyType@result
 16783                           
 16784                           ;ir.c: 191: break;
 16785  1787  2FE3               	goto	i1l4702
 16786  1788                     i1l4688:	
 16787  1788  0872               	movf	IR_GetKeyType@keynum,w
 16788                           
 16789                           ; Switch size 1, requested type "space"
 16790                           ; Number of cases is 15, Range of values is 7 to 89
 16791                           ; switch strategies available:
 16792                           ; Name         Instructions Cycles
 16793                           ; simple_byte           46    24 (average)
 16794                           ; direct_byte          175     9 (fixed)
 16795                           ; jumptable            263     9 (fixed)
 16796                           ;	Chosen strategy is simple_byte
 16797  1789  3A07               	xorlw	7	; case 7
 16798  178A  1903               	skipnz
 16799  178B  2EED               	goto	i1l942
 16800  178C  3A47               	xorlw	71	; case 64
 16801  178D  1903               	skipnz
 16802  178E  2F1F               	goto	i1l4668
 16803  178F  3A01               	xorlw	1	; case 65
 16804  1790  1903               	skipnz
 16805  1791  2F1F               	goto	i1l4668
 16806  1792  3A05               	xorlw	5	; case 68
 16807  1793  1903               	skipnz
 16808  1794  2F1F               	goto	i1l4668
 16809  1795  3A01               	xorlw	1	; case 69
 16810  1796  1903               	skipnz
 16811  1797  2F1F               	goto	i1l4668
 16812  1798  3A0D               	xorlw	13	; case 72
 16813  1799  1903               	skipnz
 16814  179A  2F1F               	goto	i1l4668
 16815  179B  3A01               	xorlw	1	; case 73
 16816  179C  1903               	skipnz
 16817  179D  2F1F               	goto	i1l4668
 16818  179E  3A05               	xorlw	5	; case 76
 16819  179F  1903               	skipnz
 16820  17A0  2EED               	goto	i1l942
 16821  17A1  3A01               	xorlw	1	; case 77
 16822  17A2  1903               	skipnz
 16823  17A3  2EED               	goto	i1l942
 16824  17A4  3A1D               	xorlw	29	; case 80
 16825  17A5  1903               	skipnz
 16826  17A6  2F0A               	goto	i1l953
 16827  17A7  3A01               	xorlw	1	; case 81
 16828  17A8  1903               	skipnz
 16829  17A9  2EED               	goto	i1l942
 16830  17AA  3A05               	xorlw	5	; case 84
 16831  17AB  1903               	skipnz
 16832  17AC  2F1F               	goto	i1l4668
 16833  17AD  3A01               	xorlw	1	; case 85
 16834  17AE  1903               	skipnz
 16835  17AF  2F1F               	goto	i1l4668
 16836  17B0  3A0D               	xorlw	13	; case 88
 16837  17B1  1903               	skipnz
 16838  17B2  2F84               	goto	i1l997
 16839  17B3  3A01               	xorlw	1	; case 89
 16840  17B4  1903               	skipnz
 16841  17B5  2F84               	goto	i1l997
 16842  17B6  2F85               	goto	i1l4684
 16843  17B7                     i1l4690:	
 16844  17B7  27F1  3196         	fcall	PL102	;call to abstracted procedure
 16845  17B9  1903               	skipnz
 16846  17BA  2FC3               	goto	i1l4700
 16847  17BB  27F6  3196         	fcall	PL106	;call to abstracted procedure
 16848  17BD  1903               	skipnz
 16849  17BE  2FC3               	goto	i1l4700
 16850  17BF  27FB  3196         	fcall	PL108	;call to abstracted procedure
 16851  17C1  1D03               	skipz
 16852  17C2  2FE3               	goto	i1l4702
 16853  17C3                     i1l4700:	
 16854  17C3  0872               	movf	IR_GetKeyType@keynum,w
 16855                           
 16856                           ; Switch size 1, requested type "space"
 16857                           ; Number of cases is 10, Range of values is 4 to 15
 16858                           ; switch strategies available:
 16859                           ; Name         Instructions Cycles
 16860                           ; simple_byte           31    16 (average)
 16861                           ; direct_byte           33     9 (fixed)
 16862                           ; jumptable            263     9 (fixed)
 16863                           ;	Chosen strategy is simple_byte
 16864  17C4  3A04               	xorlw	4	; case 4
 16865  17C5  1903               	skipnz
 16866  17C6  2EED               	goto	i1l942
 16867  17C7  3A01               	xorlw	1	; case 5
 16868  17C8  1903               	skipnz
 16869  17C9  2EED               	goto	i1l942
 16870  17CA  3A0D               	xorlw	13	; case 8
 16871  17CB  1903               	skipnz
 16872  17CC  2EED               	goto	i1l942
 16873  17CD  3A01               	xorlw	1	; case 9
 16874  17CE  1903               	skipnz
 16875  17CF  2EED               	goto	i1l942
 16876  17D0  3A03               	xorlw	3	; case 10
 16877  17D1  1903               	skipnz
 16878  17D2  2EED               	goto	i1l942
 16879  17D3  3A01               	xorlw	1	; case 11
 16880  17D4  1903               	skipnz
 16881  17D5  2EED               	goto	i1l942
 16882  17D6  3A07               	xorlw	7	; case 12
 16883  17D7  1903               	skipnz
 16884  17D8  2F0A               	goto	i1l953
 16885  17D9  3A01               	xorlw	1	; case 13
 16886  17DA  1903               	skipnz
 16887  17DB  2EED               	goto	i1l942
 16888  17DC  3A03               	xorlw	3	; case 14
 16889  17DD  1903               	skipnz
 16890  17DE  2EED               	goto	i1l942
 16891  17DF  3A01               	xorlw	1	; case 15
 16892  17E0  1903               	skipnz
 16893  17E1  2EED               	goto	i1l942
 16894  17E2  2F85               	goto	i1l4684
 16895  17E3                     i1l4702:	
 16896                           
 16897                           ;ir.c: 211: }
 16898                           ;ir.c: 212: return result;
 16899  17E3  0871               	movf	IR_GetKeyType@result,w
 16900  17E4  0008               	return
 16901  17E5                     __end_of_IR_GetKeyType:	
 16902  17E5                     __ptext102:	
 16903 ;; *************** function i1_TMR2_EnableInterrupt *****************
 16904 ;; Defined at:
 16905 ;;		line 45 in file "driver/src/tmr2.c"
 16906 ;; Parameters:    Size  Location     Type
 16907 ;;		None
 16908 ;; Auto vars:     Size  Location     Type
 16909 ;;		None
 16910 ;; Return value:  Size  Location     Type
 16911 ;;                  1    wreg      void 
 16912 ;; Registers used:
 16913 ;;		None
 16914 ;; Tracked objects:
 16915 ;;		On entry : 1F/0
 16916 ;;		On exit  : 1F/1
 16917 ;;		Unchanged: 0/0
 16918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16923 ;;Total ram usage:        0 bytes
 16924 ;; Hardware stack levels used:    1
 16925 ;; This function calls:
 16926 ;;		Nothing
 16927 ;; This function is called by:
 16928 ;;		_IR_Decode
 16929 ;; This function uses a non-reentrant model
 16930 ;;
 16931                           
 16932                           
 16933                           ;psect for function i1_TMR2_EnableInterrupt
 16934  17E5                     i1_TMR2_EnableInterrupt:	
 16935                           
 16936                           ;tmr2.c: 47: PIE1bits.TMR2IE = 1;
 16937                           
 16938                           ;incstack = 0
 16939                           ; Regs used in i1_TMR2_EnableInterrupt: []
 16940  17E5  0021               	movlb	1	; select bank1
 16941  17E6  1491               	bsf	17,1	;volatile
 16942  17E7  0008               	return
 16943  17E8                     __end_ofi1_TMR2_EnableInterrupt:	
 16944  17E8                     __ptext103:	
 16945 ;; *************** function i1_TMR2_DisableInterrupt *****************
 16946 ;; Defined at:
 16947 ;;		line 40 in file "driver/src/tmr2.c"
 16948 ;; Parameters:    Size  Location     Type
 16949 ;;		None
 16950 ;; Auto vars:     Size  Location     Type
 16951 ;;		None
 16952 ;; Return value:  Size  Location     Type
 16953 ;;                  1    wreg      void 
 16954 ;; Registers used:
 16955 ;;		None
 16956 ;; Tracked objects:
 16957 ;;		On entry : 1F/0
 16958 ;;		On exit  : 1F/1
 16959 ;;		Unchanged: 0/0
 16960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16965 ;;Total ram usage:        0 bytes
 16966 ;; Hardware stack levels used:    1
 16967 ;; This function calls:
 16968 ;;		Nothing
 16969 ;; This function is called by:
 16970 ;;		_IR_Decode
 16971 ;; This function uses a non-reentrant model
 16972 ;;
 16973                           
 16974                           
 16975                           ;psect for function i1_TMR2_DisableInterrupt
 16976  17E8                     i1_TMR2_DisableInterrupt:	
 16977                           
 16978                           ;tmr2.c: 42: PIE1bits.TMR2IE = 0;
 16979                           
 16980                           ;incstack = 0
 16981                           ; Regs used in i1_TMR2_DisableInterrupt: []
 16982  17E8  0021               	movlb	1	; select bank1
 16983  17E9  1091               	bcf	17,1	;volatile
 16984  17EA  0008               	return
 16985  17EB                     __end_ofi1_TMR2_DisableInterrupt:	
 16986  17EB                     PL60:	
 16987  17EB  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 16988  17EC  00F0               	movwf	??_IR_GetKeyType
 16989  17ED  0CF0               	rrf	??_IR_GetKeyType,f
 16990  17EE  0C70               	rrf	??_IR_GetKeyType,w
 16991  17EF  390F               	andlw	15
 16992  17F0  0008               	return
 16993  17F1                     __end_ofPL60:	
 16994  17F1                     PL102:	
 16995  17F1  0E36               	swapf	_ir_state,w	;volatile
 16996  17F2  0C89               	rrf	9,f
 16997  17F3  3907               	andlw	7
 16998  17F4  3A01               	xorlw	1
 16999  17F5  0008               	return
 17000  17F6                     __end_ofPL102:	
 17001  17F6                     PL106:	
 17002  17F6  0E36               	swapf	_ir_state,w	;volatile
 17003  17F7  0C89               	rrf	9,f
 17004  17F8  3907               	andlw	7
 17005  17F9  3A02               	xorlw	2
 17006  17FA  0008               	return
 17007  17FB                     __end_ofPL106:	
 17008  17FB                     PL108:	
 17009  17FB  0E36               	swapf	_ir_state,w	;volatile
 17010  17FC  0C89               	rrf	9,f
 17011  17FD  3907               	andlw	7
 17012  17FE  3A03               	xorlw	3
 17013  17FF  0008               	return
 17014  1800                     __end_ofPL108:	
 17015                           
 17016                           	psect	text105
 17017  147A                     __ptext105:	
 17018 ;; *************** function _TMR0_ISR *****************
 17019 ;; Defined at:
 17020 ;;		line 27 in file "driver/src/tmr0.c"
 17021 ;; Parameters:    Size  Location     Type
 17022 ;;		None
 17023 ;; Auto vars:     Size  Location     Type
 17024 ;;		None
 17025 ;; Return value:  Size  Location     Type
 17026 ;;                  1    wreg      void 
 17027 ;; Registers used:
 17028 ;;		wreg, status,2, status,0, pclath, cstack
 17029 ;; Tracked objects:
 17030 ;;		On entry : 1F/0
 17031 ;;		On exit  : 0/0
 17032 ;;		Unchanged: 0/0
 17033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17038 ;;Total ram usage:        0 bytes
 17039 ;; Hardware stack levels used:    1
 17040 ;; Hardware stack levels required when called:    1
 17041 ;; This function calls:
 17042 ;;		Absolute function
 17043 ;;		_RTC_OnSecond
 17044 ;; This function is called by:
 17045 ;;		_ISR
 17046 ;; This function uses a non-reentrant model
 17047 ;;
 17048                           
 17049                           
 17050                           ;psect for function _TMR0_ISR
 17051  147A                     _TMR0_ISR:	
 17052                           
 17053                           ;tmr0.c: 29: PIR0bits.TMR0IF = 0;
 17054                           
 17055                           ;incstack = 0
 17056                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 17057  147A  1290               	bcf	16,5	;volatile
 17058                           
 17059                           ;tmr0.c: 31: if ( tmr0_isr_handler )
 17060  147B  0021               	movlb	1	; select bank1
 17061  147C  0868               	movf	_tmr0_isr_handler^(0+128),w
 17062  147D  0469               	iorwf	(_tmr0_isr_handler+1)^(0+128),w
 17063  147E  1903               	btfsc	3,2
 17064  147F  0008               	return
 17065                           
 17066                           ;tmr0.c: 32: {
 17067                           ;tmr0.c: 33: tmr0_isr_handler ( );
 17068  1480  0869               	movf	(_tmr0_isr_handler+1)^(0+128),w
 17069  1481  008A               	movwf	10
 17070  1482  0868               	movf	_tmr0_isr_handler^(0+128),w
 17071  1483  000A               	callw
 17072  1484  3194               	pagesel	$
 17073  1485  0008               	return
 17074  1486                     __end_of_TMR0_ISR:	
 17075                           
 17076                           	psect	text106
 17077  14F2                     __ptext106:	
 17078 ;; *************** function _RTC_OnSecond *****************
 17079 ;; Defined at:
 17080 ;;		line 19 in file "user/src/rtc.c"
 17081 ;; Parameters:    Size  Location     Type
 17082 ;;		None
 17083 ;; Auto vars:     Size  Location     Type
 17084 ;;		None
 17085 ;; Return value:  Size  Location     Type
 17086 ;;                  1    wreg      void 
 17087 ;; Registers used:
 17088 ;;		wreg, status,2, status,0
 17089 ;; Tracked objects:
 17090 ;;		On entry : 1F/1
 17091 ;;		On exit  : 1F/0
 17092 ;;		Unchanged: 0/0
 17093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17098 ;;Total ram usage:        0 bytes
 17099 ;; Hardware stack levels used:    1
 17100 ;; This function calls:
 17101 ;;		Nothing
 17102 ;; This function is called by:
 17103 ;;		_Interrupt_Initialize
 17104 ;;		_TMR0_ISR
 17105 ;; This function uses a non-reentrant model
 17106 ;;
 17107                           
 17108                           
 17109                           ;psect for function _RTC_OnSecond
 17110  14F2                     _RTC_OnSecond:	
 17111                           
 17112                           ;rtc.c: 21: rtc_time.second++;
 17113                           
 17114                           ;incstack = 0
 17115                           ; Regs used in _RTC_OnSecond: [wreg+status,2+status,0]
 17116  14F2  0020               	movlb	0	; select bank0
 17117  14F3  303C               	movlw	60
 17118  14F4  0ABF               	incf	_rtc_time+2,f
 17119                           
 17120                           ;rtc.c: 22: if( rtc_time.second > 59 )
 17121  14F5  023F               	subwf	_rtc_time+2,w
 17122  14F6  1C03               	skipc
 17123  14F7  2D06               	goto	i1l5002
 17124  14F8  303C               	movlw	60
 17125                           
 17126                           ;rtc.c: 23: {
 17127                           ;rtc.c: 24: rtc_time.second = 0;
 17128  14F9  01BF               	clrf	_rtc_time+2
 17129                           
 17130                           ;rtc.c: 25: rtc_time.minute++;
 17131  14FA  0ABE               	incf	_rtc_time+1,f
 17132                           
 17133                           ;rtc.c: 26: if( rtc_time.minute > 59 )
 17134  14FB  023E               	subwf	_rtc_time+1,w
 17135  14FC  1C03               	skipc
 17136  14FD  2D05               	goto	i1l5000
 17137  14FE  3018               	movlw	24
 17138                           
 17139                           ;rtc.c: 27: {
 17140                           ;rtc.c: 28: rtc_time.minute = 0;
 17141  14FF  01BE               	clrf	_rtc_time+1
 17142                           
 17143                           ;rtc.c: 29: rtc_time.hour++;
 17144  1500  0ABD               	incf	_rtc_time,f
 17145                           
 17146                           ;rtc.c: 30: if( rtc_time.hour > 23 )
 17147  1501  023D               	subwf	_rtc_time,w
 17148  1502  1803               	btfsc	3,0
 17149                           
 17150                           ;rtc.c: 31: {
 17151                           ;rtc.c: 32: rtc_time.hour = 0;
 17152  1503  01BD               	clrf	_rtc_time
 17153                           
 17154                           ;rtc.c: 33: }
 17155                           ;rtc.c: 34: rtc_status.mHour = 1;
 17156  1504  1531               	bsf	_rtc_status,2	;volatile
 17157  1505                     i1l5000:	
 17158                           
 17159                           ;rtc.c: 35: }
 17160                           ;rtc.c: 36: rtc_status.mMin = 1;
 17161  1505  14B1               	bsf	_rtc_status,1	;volatile
 17162  1506                     i1l5002:	
 17163                           
 17164                           ;rtc.c: 37: }
 17165                           ;rtc.c: 38: rtc_status.mSec = 1;
 17166  1506  1431               	bsf	_rtc_status,0	;volatile
 17167  1507  0008               	return
 17168  1508                     __end_of_RTC_OnSecond:	
 17169                           
 17170                           	psect	text107
 17171  1508                     __ptext107:	
 17172 ;; *************** function _EUSART_Transmit_ISR *****************
 17173 ;; Defined at:
 17174 ;;		line 63 in file "driver/src/eusart.c"
 17175 ;; Parameters:    Size  Location     Type
 17176 ;;		None
 17177 ;; Auto vars:     Size  Location     Type
 17178 ;;		None
 17179 ;; Return value:  Size  Location     Type
 17180 ;;                  1    wreg      void 
 17181 ;; Registers used:
 17182 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17183 ;; Tracked objects:
 17184 ;;		On entry : 1F/0
 17185 ;;		On exit  : 1E/0
 17186 ;;		Unchanged: 0/0
 17187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17192 ;;Total ram usage:        0 bytes
 17193 ;; Hardware stack levels used:    1
 17194 ;; This function calls:
 17195 ;;		Nothing
 17196 ;; This function is called by:
 17197 ;;		_ISR
 17198 ;; This function uses a non-reentrant model
 17199 ;;
 17200                           
 17201                           
 17202                           ;psect for function _EUSART_Transmit_ISR
 17203  1508                     _EUSART_Transmit_ISR:	
 17204                           
 17205                           ;eusart.c: 65: if ( sizeof (txBuf ) > txRemain )
 17206                           
 17207                           ;incstack = 0
 17208                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 17209  1508  3020               	movlw	32
 17210  1509  025E               	subwf	_txRemain,w
 17211  150A  1803               	skipnc
 17212  150B  2D1C               	goto	i1l105
 17213                           
 17214                           ;eusart.c: 66: {
 17215                           ;eusart.c: 67: TXREG = txBuf[txTail++];
 17216  150C  0835               	movf	_txTail,w
 17217  150D  3EA0               	addlw	(low (_txBuf| (0+256)))& (0+255)
 17218  150E  0086               	movwf	6
 17219  150F  3001               	movlw	1	; select bank3/4
 17220  1510  0087               	movwf	7
 17221  1511  0801               	movf	1,w
 17222  1512  0023               	movlb	3	; select bank3
 17223  1513  009A               	movwf	26	;volatile
 17224  1514  0020               	movlb	0	; select bank0
 17225  1515  3020               	movlw	32
 17226  1516  0AB5               	incf	_txTail,f
 17227                           
 17228                           ;eusart.c: 68: if ( sizeof (txBuf ) <= txTail )
 17229  1517  0235               	subwf	_txTail,w
 17230  1518  1803               	btfsc	3,0
 17231                           
 17232                           ;eusart.c: 69: {
 17233                           ;eusart.c: 70: txTail = 0;
 17234  1519  01B5               	clrf	_txTail
 17235                           
 17236                           ;eusart.c: 71: }
 17237                           ;eusart.c: 72: txRemain++;
 17238  151A  0ADE               	incf	_txRemain,f
 17239                           
 17240                           ;eusart.c: 73: }
 17241  151B  0008               	return
 17242  151C                     i1l105:	
 17243                           
 17244                           ;eusart.c: 74: else
 17245                           ;eusart.c: 75: {
 17246                           ;eusart.c: 76: PIE1bits.TXIE = 0;
 17247  151C  0021               	movlb	1	; select bank1
 17248  151D  1211               	bcf	17,4	;volatile
 17249  151E  0008               	return
 17250  151F                     __end_of_EUSART_Transmit_ISR:	
 17251  007E                     btemp	set	126	;btemp
 17252  007E                     int$flags	set	126
 17253  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    10
    Data        50
    BSS         168
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      63
    BANK1            80      0      74
    BANK2            80      0      78
    BANK3            80     18      60
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Util_DecValue@pSrc	PTR unsigned int  size(2) Largest target is 78
		 -> gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara(BANK1[26]), gLedPara.mVolume(BANK2[1]), gLedPara(BANK2[78]), 

    Util_IncValue@pSrc	PTR unsigned int  size(2) Largest target is 78
		 -> gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara.mCurrentBright(BANK1[10]), gLedRunPara(BANK1[26]), gLedPara.mVolume(BANK2[1]), 
		 -> gLedPara(BANK2[78]), 

    IR_IsValidTime@tm	PTR unsigned char  size(1) Largest target is 7
		 -> ir_state.time(BANK0[4]), ir_state(BANK0[7]), 

    Led_SetCustom@pValue	PTR unsigned int  size(1) Largest target is 26
		 -> gLedRunPara.mTargetBright(BANK1[10]), gLedRunPara(BANK1[26]), 

    sp__RTC_GetTime	PTR struct . size(1) Largest target is 3
		 -> rtc_time(BANK0[3]), 

    loadDuty	PTR FTN(unsigned int ,)void [5] size(2) Largest target is 1
		 -> PWM5_LoadDutyValue(), PWM4_LoadDutyValue(), PWM3_LoadDutyValue(), PWM2_LoadDutyValue(), 
		 -> PWM1_LoadDutyValue(), 

    TMR4_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Notice(), 

    tmr4_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Notice(), Absolute function(), 

    TMR2_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Run(), 

    tmr2_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Led_Run(), Absolute function(), 

    TMR1_Gate_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> IR_Decode(), 

    tmr1_gate_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> IR_Decode(), Absolute function(), 

    tmr1_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> RTC_OnSecond(), 

    tmr0_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> RTC_OnSecond(), Absolute function(), 

    eusart_rcv_isr_handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    DATAEE_ReadBuffer@buf	PTR unsigned char  size(1) Largest target is 78
		 -> gLedPara(BANK2[78]), 

    DATAEE_WriteBuffer@buf	PTR unsigned char  size(1) Largest target is 78
		 -> gLedPara(BANK2[78]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR4_ISR->_Led_Notice
    _Led_Run->_IR_ScanLongPress
    _Led_RunMusic->_Led_DynamicCloud
    _Led_RunMusic->_Led_DynamicMoon
    _Led_RunMusic->_Led_DynamicStorm
    _Led_RunMusic->_Led_DynamicWave
    _Led_DynamicWave->i1___wmul
    _Led_DynamicStorm->i1___wmul
    _Led_DynamicMoon->i1___wmul
    _Led_DynamicCloud->i1___wmul
    i1_Led_UpdateBright->i1_PWM5_LoadDutyValue
    _Audio_SelectSound->i1_EUSART_Write
    _Audio_PlaySound->i1_EUSART_Write
    _Led_Ramp->i1_PWM5_LoadDutyValue
    _IR_ScanLongPress->_Led_SetCustom
    _Led_SetCustom->i1___bmul
    _TMR1_GATE_ISR->_IR_Decode
    _IR_Decode->_IR_GetKeyType

Critical Paths under _main in BANK0

    _main->_Led_CheckAutoStatus
    _SYSTEM_Initialize->_PIN_Initialize
    _Led_SaveParaIfChanged->_DATAEE_WriteBuffer
    _DATAEE_WriteBuffer->_DATAEE_WriteByte
    _Led_InitPara->_DATAEE_ReadBuffer
    _DATAEE_ReadBuffer->_DATAEE_ReadByte
    _Led_CheckAutoStatus->___wmul
    _Led_AutoRun->_Util_IncValue
    _Interrupt_Initialize->_TMR0_SetInterruptHandler
    _Interrupt_Initialize->_TMR1_Gate_SetInterruptHandler
    _Interrupt_Initialize->_TMR2_SetInterruptHandler
    _Interrupt_Initialize->_TMR4_SetInterruptHandler
    _IR_ExitTimeout->_Led_Initialize
    _IR_KeyAction->_Led_Initialize
    _IR_IsValidTime->___bmul
    _IR_ExitSet->_Led_Initialize
    _Led_Initialize->___wmul
    _Led_UpdateBright->_PWM5_LoadDutyValue
    _Audio_StopSound->_EUSART_Write
    _Audio_SetVolume->_EUSART_Write
    _Audio_SetPlayMode->_EUSART_Write
    _Audio_GetValue->___wmul

Critical Paths under _ISR in BANK0

    _TMR2_ISR->_Led_Run
    _Led_RunMusic->_Led_DynamicCloud
    _Led_RunMusic->_Led_DynamicMoon
    _Led_RunMusic->_Led_DynamicStorm
    _Led_RunMusic->_Led_DynamicWave

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _IR_KeyAtionIfPressed->_IR_KeyAction

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   40251
                     _Audio_GetValue
               _IR_KeyAtionIfPressed
             _IR_ResetIfTMR1Overflow
                 _IR_UpdateSetStatus
               _Interrupt_Initialize
                        _Led_AutoRun
                _Led_CheckAutoStatus
                       _Led_InitPara
                     _Led_Initialize
              _Led_SaveParaIfChanged
                      _RTC_HourReady
                    _RTC_MinuteReady
                    _RTC_SecondReady
                  _SYSTEM_Initialize
                    _TMR0_StartTimer
                    _TMR1_StartTimer
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
             _ADC_Initialize_Default
          _EUSART_Initialize_Default
              _OSCILLATOR_Initialize
                     _PIN_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM3_Initialize
                    _PWM4_Initialize
                    _PWM5_Initialize
            _TMR0_Initialize_Default
            _TMR1_Initialize_Default
            _TMR2_Initialize_Default
            _TMR4_Initialize_Default
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize_Default                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_Initialize                                       1     1      0      23
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize_Default                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize_Default                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_SecondReady                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_MinuteReady                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_HourReady                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_SaveParaIfChanged                                0     0      0     584
                 _DATAEE_WriteBuffer
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteBuffer                                   5     1      4     584
                                             18 BANK0      5     1      4
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     4     1      3     242
                                             14 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Led_InitPara                                         7     7      0    1823
                                             21 BANK0      7     7      0
                  _DATAEE_ReadBuffer
                   _Led_FirstPowerUp
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _Led_FirstPowerUp                                     3     3      0      90
                                             14 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadBuffer                                    5     1      4     463
                                             16 BANK0      5     1      4
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      2     0      2     121
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Led_CheckAutoStatus                                 10    10      0    3996
                                             20 BANK0     10    10      0
                   _Led_UpdateBright
                        _RTC_GetTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Led_AutoRun                                          5     5      0    2097
                                             24 BANK0      5     5      0
                   _Led_UpdateBright
                      _Util_IncValue
 ---------------------------------------------------------------------------------
 (1) _Interrupt_Initialize                                 0     0      0     392
           _TMR0_SetInterruptHandler
      _TMR1_Gate_SetInterruptHandler
           _TMR2_SetInterruptHandler
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR4_SetInterruptHandler                             2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_Gate_SetInterruptHandler                        2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2      98
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _IR_UpdateSetStatus                                   0     0      0    4664
                     _IR_ExitTimeout
 ---------------------------------------------------------------------------------
 (2) _IR_ExitTimeout                                       0     0      0    4664
                     _Led_Initialize
                    _Led_StartNotice
 ---------------------------------------------------------------------------------
 (1) _IR_ResetIfTMR1Overflow                               0     0      0       0
                    _TMR1_StartTimer
                     _TMR1_StopTimer
               _TMR2_EnableInterrupt
 ---------------------------------------------------------------------------------
 (2) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_KeyAtionIfPressed                                 0     0      0   18862
                       _IR_KeyAction
 ---------------------------------------------------------------------------------
 (2) _IR_KeyAction                                        18    18      0   18862
                                              0 BANK3     18    18      0
                    _Audio_SetVolume
                    _Audio_StopSound
                         _IR_ExitSet
                        _IR_GetIndex
                     _IR_IsValidTime
                     _Led_Initialize
                    _Led_StartNotice
                        _RTC_GetTime
              _TMR2_DisableInterrupt
               _TMR2_EnableInterrupt
                      _Util_DecValue
                      _Util_IncValue
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Util_IncValue                                       10     4      6    1463
                                             14 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (3) _Util_DecValue                                       10     4      6    1023
                                             14 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _TMR2_EnableInterrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_DisableInterrupt                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _IR_IsValidTime                                       5     4      1    1479
                                             17 BANK0      5     4      1
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     824
                                             14 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _IR_GetIndex                                          2     2      0     250
                                             14 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _IR_ExitSet                                           0     0      0    4664
                     _Led_Initialize
                    _Led_StartNotice
 ---------------------------------------------------------------------------------
 (3) _Led_StartNotice                                      2     2      0      31
                                             14 BANK0      2     2      0
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (4) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Led_Initialize                                       8     8      0    4633
                                             20 BANK0      8     8      0
                  _Audio_SetPlayMode
                    _Audio_SetVolume
                    _Audio_StopSound
                    _Led_TurnOffRamp
                     _Led_TurnOnRamp
                   _Led_UpdateBright
                        _RTC_GetTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _RTC_GetTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Led_UpdateBright                                     1     1      0     380
                                             18 BANK0      1     1      0
                 _PWM1_LoadDutyValue *
                 _PWM2_LoadDutyValue *
                 _PWM3_LoadDutyValue *
                 _PWM4_LoadDutyValue *
                 _PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (3) _PWM5_LoadDutyValue                                   4     2      2     126
                                             14 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _PWM4_LoadDutyValue                                   2     0      2      31
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM3_LoadDutyValue                                   2     0      2      31
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM2_LoadDutyValue                                   2     0      2      31
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM1_LoadDutyValue                                   2     0      2      31
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOnRamp                                       1     1      0     130
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Led_TurnOffRamp                                      1     1      0      99
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Audio_StopSound                                      1     1      0     133
                                             15 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _Audio_SetVolume                                      2     2      0     167
                                             15 BANK0      2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _Audio_SetPlayMode                                    2     2      0     167
                                             15 BANK0      2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      93
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Audio_GetValue                                       6     6      0    3177
                                             20 BANK0      6     6      0
                     _ADC_Conversion
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2966
                                             14 BANK0      6     2      4
                        _RTC_GetTime (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADC_Conversion                                       4     2      2      22
                                             14 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  0     0      0    8491
                _EUSART_Transmit_ISR
                           _TMR0_ISR
                      _TMR1_GATE_ISR
                           _TMR2_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR4_ISR                                             0     0      0       0
                   Absolute function *
                         _Led_Notice *
 ---------------------------------------------------------------------------------
 (9) _Led_Notice                                           1     1      0       0
                                              0 COMMON     1     1      0
                  _Led_TurnOffDirect
                   _Led_TurnOnDirect
                     _TMR4_StopTimer
 ---------------------------------------------------------------------------------
 (10) _TMR4_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Led_TurnOnDirect                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Led_TurnOffDirect                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR2_ISR                                             0     0      0    7855
                   Absolute function *
                            _Led_Run *
 ---------------------------------------------------------------------------------
 (9) _Led_Run                                              1     1      0    7855
                                             13 BANK0      1     1      0
                   _IR_ScanLongPress
                           _Led_Ramp
                       _Led_RunMusic
 ---------------------------------------------------------------------------------
 (10) _Led_RunMusic                                        1     1      0    5788
                                             12 COMMON     1     1      0
                    _Audio_PlaySound
                  _Audio_SelectSound
                   _Led_DynamicCloud
                    _Led_DynamicMoon
                   _Led_DynamicStorm
                    _Led_DynamicWave
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicWave                                    19    17      2    1268
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicStorm                                   19    17      2    1438
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicMoon                                    19    17      2    1299
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) _Led_DynamicCloud                                   19    17      2    1577
                                              6 COMMON     6     4      2
                                              0 BANK0     13    13      0
                 i1_Led_UpdateBright
                           i1___wmul
 ---------------------------------------------------------------------------------
 (12) i1___wmul                                            6     2      4     388
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (12) i1_Led_UpdateBright                                  1     1      0     292
                                              4 COMMON     1     1      0
               i1_PWM1_LoadDutyValue *
               i1_PWM2_LoadDutyValue *
               i1_PWM3_LoadDutyValue *
               i1_PWM4_LoadDutyValue *
               i1_PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (11) _Audio_SelectSound                                   2     2      0     115
                                              1 COMMON     2     2      0
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (11) _Audio_PlaySound                                     1     1      0      91
                                              1 COMMON     1     1      0
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (12) i1_EUSART_Write                                      1     1      0      66
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _Led_Ramp                                            7     7      0     540
                                              4 COMMON     7     7      0
               i1_PWM1_LoadDutyValue *
               i1_PWM2_LoadDutyValue *
               i1_PWM3_LoadDutyValue *
               i1_PWM4_LoadDutyValue *
               i1_PWM5_LoadDutyValue *
 ---------------------------------------------------------------------------------
 (13) i1_PWM5_LoadDutyValue                                4     2      2      74
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM4_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM3_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM2_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (13) i1_PWM1_LoadDutyValue                                2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _IR_ScanLongPress                                    3     3      0    1527
                                             11 COMMON     3     3      0
                      _Led_SetCustom
                      i1_IR_GetIndex
                  i1_Led_StartNotice
                    i1_Util_DecValue
                    i1_Util_IncValue
 ---------------------------------------------------------------------------------
 (11) i1_Util_IncValue                                    10     4      6     207
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (11) i1_Util_DecValue                                    10     4      6     207
                                              0 COMMON    10     4      6
 ---------------------------------------------------------------------------------
 (11) i1_Led_StartNotice                                   2     2      0      22
                                              0 COMMON     2     2      0
                  i1_TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (12) i1_TMR4_StartTimer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_IR_GetIndex                                       2     2      0     165
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _Led_SetCustom                                       8     7      1     437
                                              3 COMMON     8     7      1
                           i1___bmul
 ---------------------------------------------------------------------------------
 (12) i1___bmul                                            3     2      1      87
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (8) _TMR1_GATE_ISR                                        0     0      0     636
                   Absolute function *
                          _IR_Decode *
 ---------------------------------------------------------------------------------
 (9) _IR_Decode                                            9     9      0     636
                                              3 COMMON     9     9      0
                      _IR_GetKeyType
            i1_TMR2_DisableInterrupt
             i1_TMR2_EnableInterrupt
 ---------------------------------------------------------------------------------
 (10) i1_TMR2_EnableInterrupt                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_TMR2_DisableInterrupt                             0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _IR_GetKeyType                                       3     3      0     256
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
                       _RTC_OnSecond *
 ---------------------------------------------------------------------------------
 (9) _RTC_OnSecond                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Audio_GetValue
     _ADC_Conversion
     ___wmul
       _RTC_GetTime (ARG)
   _IR_KeyAtionIfPressed
     _IR_KeyAction
       _Audio_SetVolume
         _EUSART_Write
       _Audio_StopSound
         _EUSART_Write
       _IR_ExitSet
         _Led_Initialize
           _Audio_SetPlayMode
             _EUSART_Write
           _Audio_SetVolume
             _EUSART_Write
           _Audio_StopSound
             _EUSART_Write
           _Led_TurnOffRamp
           _Led_TurnOnRamp
           _Led_UpdateBright
             _PWM1_LoadDutyValue *
             _PWM2_LoadDutyValue *
             _PWM3_LoadDutyValue *
             _PWM4_LoadDutyValue *
             _PWM5_LoadDutyValue *
           _RTC_GetTime
           ___wmul
             _RTC_GetTime (ARG)
         _Led_StartNotice
           _TMR4_StartTimer
       _IR_GetIndex
       _IR_IsValidTime
         ___bmul
       _Led_Initialize
         _Audio_SetPlayMode
           _EUSART_Write
         _Audio_SetVolume
           _EUSART_Write
         _Audio_StopSound
           _EUSART_Write
         _Led_TurnOffRamp
         _Led_TurnOnRamp
         _Led_UpdateBright
           _PWM1_LoadDutyValue *
           _PWM2_LoadDutyValue *
           _PWM3_LoadDutyValue *
           _PWM4_LoadDutyValue *
           _PWM5_LoadDutyValue *
         _RTC_GetTime
         ___wmul
           _RTC_GetTime (ARG)
       _Led_StartNotice
         _TMR4_StartTimer
       _RTC_GetTime
       _TMR2_DisableInterrupt
       _TMR2_EnableInterrupt
       _Util_DecValue
       _Util_IncValue
       ___bmul
       ___wmul
         _RTC_GetTime (ARG)
   _IR_ResetIfTMR1Overflow
     _TMR1_StartTimer
     _TMR1_StopTimer
     _TMR2_EnableInterrupt
   _IR_UpdateSetStatus
     _IR_ExitTimeout
       _Led_Initialize
         _Audio_SetPlayMode
           _EUSART_Write
         _Audio_SetVolume
           _EUSART_Write
         _Audio_StopSound
           _EUSART_Write
         _Led_TurnOffRamp
         _Led_TurnOnRamp
         _Led_UpdateBright
           _PWM1_LoadDutyValue *
           _PWM2_LoadDutyValue *
           _PWM3_LoadDutyValue *
           _PWM4_LoadDutyValue *
           _PWM5_LoadDutyValue *
         _RTC_GetTime
         ___wmul
           _RTC_GetTime (ARG)
       _Led_StartNotice
         _TMR4_StartTimer
   _Interrupt_Initialize
     _TMR0_SetInterruptHandler
     _TMR1_Gate_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR4_SetInterruptHandler
   _Led_AutoRun
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _Util_IncValue
   _Led_CheckAutoStatus
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _RTC_GetTime
     ___wmul
       _RTC_GetTime (ARG)
   _Led_InitPara
     _DATAEE_ReadBuffer
       _DATAEE_ReadByte
     _Led_FirstPowerUp
     ___bmul
   _Led_Initialize
     _Audio_SetPlayMode
       _EUSART_Write
     _Audio_SetVolume
       _EUSART_Write
     _Audio_StopSound
       _EUSART_Write
     _Led_TurnOffRamp
     _Led_TurnOnRamp
     _Led_UpdateBright
       _PWM1_LoadDutyValue *
       _PWM2_LoadDutyValue *
       _PWM3_LoadDutyValue *
       _PWM4_LoadDutyValue *
       _PWM5_LoadDutyValue *
     _RTC_GetTime
     ___wmul
       _RTC_GetTime (ARG)
   _Led_SaveParaIfChanged
     _DATAEE_WriteBuffer
       _DATAEE_WriteByte
   _RTC_HourReady
   _RTC_MinuteReady
   _RTC_SecondReady
   _SYSTEM_Initialize
     _ADC_Initialize_Default
     _EUSART_Initialize_Default
     _OSCILLATOR_Initialize
     _PIN_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _PWM3_Initialize
     _PWM4_Initialize
     _PWM5_Initialize
     _TMR0_Initialize_Default
     _TMR1_Initialize_Default
     _TMR2_Initialize_Default
     _TMR4_Initialize_Default
   _TMR0_StartTimer
   _TMR1_StartTimer
   _TMR2_StartTimer

 _ISR (ROOT)
   _EUSART_Transmit_ISR
   _TMR0_ISR
     Absolute function(Fake) *
     _RTC_OnSecond *
   _TMR1_GATE_ISR
     Absolute function(Fake) *
     _IR_Decode *
       _IR_GetKeyType
       i1_TMR2_DisableInterrupt
       i1_TMR2_EnableInterrupt
   _TMR2_ISR
     Absolute function(Fake) *
     _Led_Run *
       _IR_ScanLongPress
         _Led_SetCustom
           i1___bmul
         i1_IR_GetIndex
         i1_Led_StartNotice
           i1_TMR4_StartTimer
         i1_Util_DecValue
         i1_Util_IncValue
       _Led_Ramp
         i1_PWM1_LoadDutyValue *
         i1_PWM2_LoadDutyValue *
         i1_PWM3_LoadDutyValue *
         i1_PWM4_LoadDutyValue *
         i1_PWM5_LoadDutyValue *
       _Led_RunMusic
         _Audio_PlaySound
           i1_EUSART_Write
         _Audio_SelectSound
           i1_EUSART_Write
         _Led_DynamicCloud
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicMoon
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicStorm
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
         _Led_DynamicWave
           i1_Led_UpdateBright
             i1_PWM1_LoadDutyValue *
             i1_PWM2_LoadDutyValue *
             i1_PWM3_LoadDutyValue *
             i1_PWM4_LoadDutyValue *
             i1_PWM5_LoadDutyValue *
           i1___wmul
   _TMR4_ISR
     Absolute function(Fake) *
     _Led_Notice *
       _Led_TurnOffDirect
       _Led_TurnOnDirect
       _TMR4_StopTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1E      3F       5       78.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     12      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     121      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     121      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Dec 01 09:50:14 2017

                      ??i1_EUSART_Write 0070              __size_of_Audio_SetPlayMode 0017  
      __end_of_TMR2_SetInterruptHandler 0FA8                          ___bmul@product 004F  
            __size_of_Audio_SelectSound 001B                             __CFG_CP$OFF 0000  
                                    PL2 032C                                      PL4 05E8  
                                    PL6 027E                                      PL8 0EB2  
                                    l26 08EC                                      l46 0FF6  
                                    l95 0CFA                    i1_PWM1_LoadDutyValue 14B6  
                   ?_IR_UpdateSetStatus 0070                           _Util_IncValue 0D38  
                   ___wmul@multiplicand 0050                        i1___wmul@product 0074  
                ??i1_PWM4_LoadDutyValue 0072           i1PWM5_LoadDutyValue@dutyValue 0070  
                _ADC_Initialize_Default 15E9                                     PL10 05F2  
                                   PL20 0ECC                                     PL12 0285  
                                   PL30 0EFB                                     PL22 05FD  
                                   PL14 0EBA                                     PL40 0F16  
                                   PL32 0F04                                     PL24 0EDD  
                                   PL16 075E                     IR_ScanLongPress@cnt 0020  
                                   PL50 0F27                                     PL42 061C  
                                   PL34 0F11                                     PL26 0EE2  
                                   PL18 0297                                     PL60 17EB  
                                   PL52 0F32                                     PL44 0F1B  
                                   PL36 0604                                     PL28 0EEC  
                                   PL70 064C                                     PL62 029E  
                                   PL54 0334                                     PL46 03A9  
                                   PL38 0610                             __CFG_LVP$ON 0000  
                                   PL80 0768                                     PL72 0654  
                                   PL64 0634                                     PL56 03B5  
                                   PL48 0628                     IR_ScanLongPress@idx 007D  
                                   PL90 1605                                     PL82 076E  
                                   PL74 065C                                     PL66 063C  
                                   PL58 0F3C                                     PL92 0F50  
                                   PL84 0F43                                     PL76 03BF  
                                   PL68 0644                                     PL94 0F56  
                                   PL86 0F49                                     PL78 02A6  
                                   PL96 160A                                     PL88 0664  
                                   PL98 0F5C                                     l343 08A0  
                                   l505 0851                                     l615 0685  
                                   l616 0692                                     l634 09A2  
                                   l913 0D87                                     l905 0D81  
                                   l917 0D8A                                     l909 0D84  
                                   l894 0D78                                     _GIE 005F  
                                   _PR2 001E                                     _PR4 0416  
                          __CFG_CPD$OFF 0000                                     _ISR 0004  
                       _Led_TurnOffRamp 0A2D                        ?_Led_DynamicMoon 0076  
       __end_of_TMR2_Initialize_Default 15DE                        ?_Led_DynamicWave 0076  
                       _PWM4_Initialize 15A9                                     wreg 0009  
                 ?_Interrupt_Initialize 0070                          ?_RTC_HourReady 0070  
                                  PL100 0F61                                    PL110 0F6B  
                                  PL102 17F1                                    PL112 0F70  
                                  PL104 0F66                                    PL106 17F6  
                                  PL108 17FB                                    ?_ISR 0070  
                                  l1032 0E8D               _EUSART_Initialize_Default 15F1  
                                  l1212 0C27                                    l1037 0E5F  
                                  l1047 0E5F                                    l1170 0B15  
                                  l1164 0B08                                    l1148 0A9F  
                                  l1157 0AE7                                    l1183 0B78  
                                  l1189 0B9E                                    l6002 0968  
                                  l6020 0988                                    l6012 0979  
                                  l6030 098C                                    l6014 097A  
                                  l6006 096D                                    l6032 098E  
                                  l7002 0E61                                    l6044 0991  
                                  l7004 0E8E                                    l7020 02DE  
                   PIN_Initialize@state 004E                                    l6046 09A1  
                                  l6072 09DC                                    l6056 09D5  
                                  l6064 09D7                                    l6048 09A3  
                                  l7112 03A2                                    l7104 0387  
                                  l7040 0301                                    l7032 02F8  
                                  l6058 09B8                                    l6084 09EE  
                                  l7108 0396                                    l7116 03A7  
                                  l7060 031D                                    l7052 0314  
                                  l6078 09ED                                    l6254 0D08  
                                  l4750 0FCA                                    l4726 15E9  
                                  l7150 085A                                    l6504 0E20  
                                  l6514 0E3C                                    l7090 0372  
                                  l7162 086D                                    l6460 0D7B  
                                  l6516 0E4A                                    l6612 0A94  
                                  l4844 0E50                                    l7084 0363  
                                  l4932 0738                                    l4748 0FC8  
                                  l7172 0885                                    l5822 0CEF  
                                  l6470 0D87                                    l6462 0D7D  
                                  l7094 037E                                    l7078 0350  
                                  l4766 070A                                    l5912 0A50  
                                  l6472 0D8A                                    l6464 0D7F  
                                  l6480 0DF3                                    l6800 0B8C  
                                  l6712 0B15                                    l6640 0ABF  
                                  l5906 0A30                                    l5850 07DB  
                                  l5842 14AD                                    l6474 0D8D  
                                  l6466 0D81                                    l6458 0D76  
                                  l6490 0E0C                                    l6650 0ACE  
                                  l6626 0A9F                                    l6570 0A6D  
                                  l5940 0CDB                                    l5836 0D00  
                                  l5932 0A41                                    l5844 14BF  
                                  l5852 0D6F                                    l6468 0D84  
                                  l6820 0BBB                                    l6812 0BAC  
                                  l6644 0ACC                                    l6580 0A79  
                                  l6556 0FC0                                    l4868 0FA8  
                                  l5846 14D1                                    l5918 0A52  
                                  l6478 0D91                                    l6486 0E02  
                                  l6830 0BDF                                    l6814 0BAD  
                                  l6806 0B9E                                    l6750 0B48  
                                  l6718 0B1D                                    l6582 0A7B  
                                  l6566 0A69                                    l5944 0CE1  
                                  l6912 0896                                    l5848 14E3  
                                  l6496 0E13                                    l6840 0BF8  
                                  l6728 0B2D                                    l6672 0AE7  
                                  l6584 0A7E                                    l6818 0BB8  
                                  l6754 0B4C                                    l6738 0B37  
                                  l6690 0B06                                    l6666 0AD8  
                                  l6916 08A8                                    l6852 0C13  
                                  l6772 0B60                                    l6692 0B08  
                                  l6940 0678                                    l6918 08AC  
                                  l5966 08F9                                    l6598 0A89  
                                  l5976 091C                                    l6872 0C32  
                                  l6856 0C19                                    l6776 0B64  
                                  l6688 0B03                                    l5898 0A2D  
                                  l6794 0B7B                                    l6970 06F2  
                                  l6954 069F                                    l5996 095C  
                                  l6884 0C40                                    l6868 0C2C  
                                  l6948 069E                                    l6894 0C48  
                                  l6974 06FB                                    l6966 06E8  
                                  l6958 06D4                 __end_of_RTC_MinuteReady 0FB9  
                                  l6896 0CC3                                    l6978 0701  
                          __CFG_WDTE$ON 0000                                    _GAIN 1800  
               __end_of_PWM1_Initialize 1595                                    _LATA 010C  
                                  _LATB 010D                                    _LATC 010E  
                                  u3500 158D                                    u6005 031A  
               __end_of_RTC_SecondReady 0FBE                                    u5255 0D4C  
                                  u6065 036C                                    u6307 08FF  
                                  u6075 0378                                    u6317 090F  
                                  u5550 0ACA                                    u6327 092A  
                                  u4745 07E1                                    u4905 09D3  
                                  u6337 093A                                    u6347 08E7  
                                  u5805 089C                                    u5485 0D26  
                                  i1l95 0497                                    u5815 08A6  
                                  u4855 09AC                                    u4865 09B5  
                                  u4885 09BE                    ??_IR_UpdateSetStatus 005C  
                                  u4895 09C7                                    u5965 02DB  
                                  u5985 02FE                                    _TMR1 0019  
                                  _TMR2 001D                                    _TMR4 0415  
                                  _WPUA 020C                                    _WPUB 020D  
                                  _WPUC 020E                        _Led_TurnOnDirect 07A4  
                          __CFG_WRT$OFF 0000                     __end_of_Led_AutoRun 03A9  
                                  _main 0840                       ?_Led_DynamicCloud 0076  
                       _TMR0_StartTimer 0EB0                                    fsr0h 0005  
                                  fsr1h 0007                                    indf0 0000  
                                  fsr0l 0004                                    indf1 0001  
                                  fsr1l 0006                                    btemp 007E  
                        ?_Util_DecValue 004E                      Led_DynamicMoon@val 004A  
                    Led_DynamicMoon@ptp 0076                       ?_Led_DynamicStorm 0076  
                                  start 002E                      ??_Led_DynamicCloud 0078  
                      Util_DecValue@min 0050                         _PWM5_Initialize 15B4  
               _TMR0_Initialize_Default 15BA                    _IR_KeyAtionIfPressed 0E4C  
                         __CFG_CSWEN$ON 0000                      Led_DynamicWave@val 004A  
                    Led_DynamicWave@ptp 0076                       ___bmul@multiplier 0050  
                         __CFG_MCLRE$ON 0000                         __end_of_Led_Run 0051  
                    ??_Led_DynamicStorm 0078              ??_TMR4_SetInterruptHandler 0050  
            __end_of_PWM5_LoadDutyValue 07ED                         IR_Decode@keyNum 0079  
                                 ??_ISR 007E                     Led_DynamicCloud@val 004A  
                   Led_DynamicCloud@ptp 0076                      i1_Led_UpdateBright 05D7  
                 ?i1_PWM1_LoadDutyValue 0070               __size_of_DATAEE_WriteByte 0021  
                        ?_Util_IncValue 004E                         IR_Decode@rptCnt 002E  
               __end_of_PWM2_Initialize 159E                     _Led_CheckAutoStatus 02AE  
                         ?_EUSART_Write 0070          __size_of_OSCILLATOR_Initialize 000A  
         __end_of_OSCILLATOR_Initialize 1542                                   _ADACT 009F  
                                 ?_main 0070                 __end_of_Led_StartNotice 0D6C  
         __size_ofi1_PWM3_LoadDutyValue 0006                                   _ADRES 009B  
                                 _CCPR1 0291                                   _CCPR2 0295  
                                 _CCPR3 0311                                   _CCPR4 0315  
        ?_TMR1_Gate_SetInterruptHandler 004E                         _TMR1_StartTimer 0E50  
                                 _T1CON 001B                                   _T2CON 001F  
                                 _T4CON 0417                          __CFG_DEBUG$OFF 0000  
                                 i1l105 151C                              _Led_Notice 0774  
                                 i1l521 001E                                   i1l523 0024  
                                 i1l517 000D                                   i1l526 002C  
                                 i1l519 0017                                   i1l814 0043  
                                 i1l808 045D                                   i1l913 0144  
                                 i1l905 013E                                   i1l917 0147  
                                 i1l909 0141                                   i1l757 04CE  
                                 i1l942 16ED                                   i1l960 170B  
                                 i1l944 1706                                   i1l768 0581  
                                 i1l953 170A                                   i1l970 1719  
                                 i1l947 1778                                   i1l965 1712  
                                 i1l894 0135                                   i1l984 1721  
                                 i1l978 1721                                   i1l997 1784  
                   ?i1_Led_UpdateBright 0070                                   _OSCEN 091D  
                    _PWM4_LoadDutyValue 14E0                                   _TMR0H 0016  
                                 _TMR0L 0015                __end_of_IR_ScanLongPress 012F  
                                 _TRISA 008C                                   _TRISB 008D  
                                 _TRISC 008E                       _Led_TurnOffDirect 079B  
                                 _TXREG 019A                    i1_PWM5_LoadDutyValue 07ED  
                    __size_of_IR_Decode 00CE       __size_of_TMR0_SetInterruptHandler 0008  
               __size_of_PIN_Initialize 004D               ?_TMR0_SetInterruptHandler 004E  
                         __CFG_PWRTE$ON 0000                             ?_IR_ExitSet 0070  
                        __CFG_FCMEN$OFF 0000                      _DATAEE_WriteBuffer 0FC8  
                      __end_of_TMR0_ISR 1486                        __end_of_TMR2_ISR 149E  
                      __end_of_TMR4_ISR 14AA                      ?_Led_TurnOffDirect 0070  
                      _tmr4_isr_handler 00E2                         _DATAEE_ReadByte 071F  
       __end_ofi1_TMR2_DisableInterrupt 17EB                     ?_PWM4_LoadDutyValue 004E  
                                 _txBuf 01A0                    __end_of_Led_InitPara 0708  
                  ?_Led_CheckAutoStatus 0070                        __end_ofi1___bmul 01FA  
          __end_ofi1_PWM2_LoadDutyValue 14CE                 __end_of_PWM3_Initialize 15A9  
                        __CFG_BOREN$OFF 0000                                   pclath 000A  
                      __end_ofi1___wmul 05D7                          __CFG_BORV$HIGH 0000  
                   Led_DynamicMoon@duty 0040                     ?_DATAEE_WriteBuffer 0052  
                   ??_Led_TurnOffDirect 0070                                   status 0003  
                   i1___wmul@multiplier 0070                                   wtemp0 007E  
                 Audio_SetPlayMode@type 004F                         _TMR2_StartTimer 0FBE  
                     Util_DecValue@pSrc 004E                            __end_ofPL100 0F66  
                          __end_ofPL110 0F70                            __end_ofPL102 17F6  
                          __end_ofPL112 0F75                            __end_ofPL104 0F6B  
                  ??i1_Led_UpdateBright 0074                            __end_ofPL106 17FB  
                          __end_ofPL108 1800                __end_of_Led_UpdateBright 0A69  
                 ?_IR_KeyAtionIfPressed 0070                            __end_of_GAIN 1805  
               __size_of_Audio_GetValue 0050                     Led_DynamicWave@duty 0040  
                       Led_TurnOnRamp@i 004E                     i1Util_IncValue@pSrc 0070  
                      __end_of_Led_Ramp 027E                         __initialization 0805  
                  __end_of_Led_RunMusic 045E                        IR_Decode@codeVal 0022  
                          __end_of_main 0888                    ??_PWM4_LoadDutyValue 0050  
               __end_of_Led_TurnOffRamp 0A3D                         i1_Util_DecValue 01FA  
                IR_ScanLongPress@i_1422 007C                 Audio_PlaySound@checksum 0071  
                        ??_EUSART_Write 004E                 __end_of_PWM4_Initialize 15B4  
                    Led_SetCustom@value 0078                      Led_StartNotice@cnt 004F  
                  ??_DATAEE_WriteBuffer 0056                    Led_DynamicCloud@duty 0040  
             __end_of_Led_TurnOffDirect 07A4                _TMR2_SetInterruptHandler 0FA0  
                                ??_main 005E                          IR_GetIndex@idx 004E  
                 ?i1_PWM5_LoadDutyValue 0070                     Led_DynamicStorm@val 004A  
                       ??_RTC_HourReady 004E                    DATAEE_ReadBuffer@buf 0052  
                   Led_DynamicStorm@ptp 0076                    DATAEE_ReadBuffer@len 0053  
                ??_Interrupt_Initialize 0050                         i1_Util_IncValue 0220  
                           _Led_AutoRun 033E                 __end_of_TMR0_StartTimer 0EB2  
                                _ADCON0 009D                                  _ADCON1 009E  
                     Led_FirstPowerUp@i 0050                                  _ADRESH 009C  
                                _ADRESL 009B                   ??_Led_CheckAutoStatus 0054  
                                _ANSELA 018C                                  _ANSELB 018D  
                                _ANSELC 018E                      __CFG_RSTOSC$HFINT1 0000  
         __size_of_TMR2_EnableInterrupt 0003                                  _T0CON0 0017  
                                _T0CON1 0018                                  _T1GCON 001C  
                      ?_RTC_MinuteReady 0070                                  _RC1STA 019D  
                                i1l1102 0056                                  i1l1114 0085  
                                i1l1109 0075                        ?_PWM1_Initialize 0070  
                                i1l1088 16C9                            ?_IR_GetIndex 0070  
                                i1l1097 012E                                  _ODCONA 028C  
                                _ODCONB 028D                                  _ODCONC 028E  
                                i1l5000 1505                                  i1l5002 1506  
                                i1l5010 1619                                  i1l5102 16CB  
                                i1l5022 1630                                  i1l4310 013A  
                                i1l4320 0147                                  i1l4312 013C  
                                i1l5026 163E                                  i1l5106 16CE  
                                i1l4322 014A                                  i1l4314 013E  
                                i1l4306 0133                                  i1l5036 165C  
                                i1l5028 1640                                  i1l4316 0141  
                                i1l4308 0138                 __end_of_PWM5_Initialize 15BA  
                                i1l5038 165E                                  i1l6110 01E8  
                                i1l6102 01C4                                  i1l4318 0144  
                                i1l4326 014E                                  i1l5080 16A3  
                                i1l5048 1671                                  i1l4328 01B0  
                                i1l3800 14EC                                  i1l5090 16B1  
                                i1l3802 07ED                                  i1l6210 05BB  
                                i1l6202 05A0                                  i1l4700 17C3  
                                i1l5076 169B                                  i1l5068 1694  
                                i1l6300 0432                                  i1l4702 17E3  
                                i1l5094 16B5                                  i1l5086 16AC  
                                i1l6206 05AF                                  i1l6142 0412  
                                i1l6134 03F7                                  i1l6118 03C7  
                                i1l5088 16AF                                  i1l6232 052F  
                                i1l6224 051E                                  i1l6216 04F1  
                                i1l6128 03F6                                  i1l6410 00BC  
                                i1l3922 049B                                  i1l6170 04EA  
                                i1l6162 04CF                                  i1l6242 053F  
                                i1l6226 0520                                  i1l6138 0406  
                                i1l6322 0445                                  i1l3908 048C  
                                i1l6156 04CC                                  i1l6148 049F  
                                i1l6324 044B                                  i1l6308 0428  
                                i1l4646 16F0                                  i1l6350 0075  
                                i1l6342 0056                                  i1l6270 0249  
                                i1l6190 0590                                  i1l6166 04DE  
                                i1l6246 054B                                  i1l6238 0530  
                                i1l6326 0451                                  i1l6318 0433  
                                i1l4656 1704                                  i1l3960 01F0  
                                i1l6440 00E6                                  i1l6432 00D6  
                                i1l6280 0259                                  i1l3944 05C4  
                                i1l6176 0552                                  i1l6328 0457  
                      ?_RTC_SecondReady 0070                                  i1l4690 17B7  
                                i1l6418 00CC                                  i1l3794 14B6  
                                i1l4684 1785                                  i1l4668 171F  
                                i1l4676 1728                                  i1l6372 0098  
                                i1l3796 14C8                                  i1l6284 0266  
                                i1l6276 024A                                  i1l3948 05CA  
                                i1l6196 059F                                  i1l6188 058E  
                                i1l4678 1779                                  i1l6358 0085  
                                i1l6454 00F3                                  i1l3798 14DA  
                                i1l6286 026E                                  i1l6542 0037  
                                i1l4688 1788                                  i1l6384 00A5  
                                i1l4952 0793                                  i1l6298 0419  
                                i1l6546 0042                                  i1l6396 00B2  
                                i1l4956 0797                                  i1l5960 05D8  
                                u240_25 07F2                                  u502_20 04BB  
                                u503_25 04C5                                  _SP1BRG 019B  
                                u514_20 050D                                  u507_20 056E  
                                u515_25 0517                                  u372_24 1655  
                                u372_25 1653                                  u509_25 0587  
                                u295_25 0234                                  u296_25 020E  
                                u377_20 1682                         ??_Util_DecValue 0054  
                                u378_20 1683                                  _OSCFRQ 091F  
                                u497_20 03E3                                  _PWM5DC 0617  
                                _TX1STA 019E                   __end_of_IR_GetKeyType 17E5  
               __size_of_IR_IsValidTime 004E                               ??_Led_Run 004D  
             ??_TMR0_Initialize_Default 004E                                  _VOLUME 1805  
                       _TMR4_StartTimer 0D6F                 __size_of_Led_Initialize 0106  
                     __end_of_IR_Decode 16DE                   __end_of_TMR1_GATE_ISR 1492  
      __size_of_TMR2_Initialize_Default 000A                         ??_Util_IncValue 0054  
                                ___bmul 0D05                     __size_of_IR_ExitSet 0009  
                ??i1_PWM1_LoadDutyValue 0072             __size_of_PWM3_LoadDutyValue 000C  
               __end_of_TMR1_StartTimer 0E53                                  ___wmul 0CD9  
                        __CFG_STVREN$ON 0000                    Led_DynamicMoon@F8322 00AA  
                   Audio_GetValue@value 0058                     _EUSART_Transmit_ISR 1508  
                      ?_PWM2_Initialize 0070                                  _txHead 0034  
                                _txTail 0035                 __end_of_DATAEE_ReadByte 072D  
                      ?_Led_StartNotice 0070                             ?_Led_Notice 0070  
                      IR_IsValidTime@tm 0055                    Led_DynamicWave@F8312 00B4  
               __end_of_TMR2_StartTimer 0FC0                   __end_of_Led_SetCustom 01EE  
              ??_IR_ResetIfTMR1Overflow 004E                ?_TMR1_Initialize_Default 0070  
              ?_TMR4_Initialize_Default 0070                    ?_EUSART_Transmit_ISR 0070  
                    Util_DecValue@delta 0052                      i1Util_DecValue@min 0072  
                      ?_PWM3_Initialize 0070                       _SYSTEM_Initialize 151F  
                          ?_RTC_GetTime 0070                 __end_of__initialization 083D  
                ??_IR_KeyAtionIfPressed 005C                      ?_SYSTEM_Initialize 0070  
                   i1Led_UpdateBright@i 0074          __size_of_Led_SaveParaIfChanged 000E  
            __end_of_PWM2_LoadDutyValue 14C8           __end_of_Led_SaveParaIfChanged 0EB0  
                      Led_TurnOffRamp@i 004E                 __end_ofi1_Util_DecValue 0220  
               __size_of_IR_ExitTimeout 0008             PWM1_LoadDutyValue@dutyValue 004E  
                  i1Util_IncValue@delta 0074                     ___bmul@multiplicand 004E  
             __size_of_Led_FirstPowerUp 0031                        Led_DynamicMoon@i 004C  
                      Led_DynamicWave@i 004C         TMR4_SetInterruptHandler@handler 004E  
                        __pcstackCOMMON 0070                       IR_GetIndex@keynum 004F  
                          __pidataBANK1 07B0                            __pidataBANK3 1470  
                   ??_SYSTEM_Initialize 004F                               ?_TMR0_ISR 0070  
        __size_of_TMR2_DisableInterrupt 0003                               ?_TMR2_ISR 0070  
                 Led_DynamicCloud@F8332 00A0                               ?_TMR4_ISR 0070  
               ?_ADC_Initialize_Default 0070           __end_of_TMR2_DisableInterrupt 0D6F  
                      _DATAEE_WriteByte 0FDF                        ?_Led_TurnOffRamp 0070  
               __end_ofi1_Util_IncValue 0246                              _adc_result 002C  
                    _PWM1_LoadDutyValue 14AA                        ?_PWM4_Initialize 0070  
                            __end_ofPL2 0334                              __end_ofPL4 05F2  
                            __end_ofPL6 0285                              __end_ofPL8 0EBA  
      __size_ofi1_TMR2_DisableInterrupt 0003                __end_of_Led_TurnOnDirect 07AD  
                  i1_PWM2_LoadDutyValue 14C8                               ?i1___bmul 0070  
                   Led_SetCustom@pValue 0073              __size_of_Led_TurnOffDirect 0009  
           PWM4_LoadDutyValue@dutyValue 004E                  ??i1_PWM5_LoadDutyValue 0072  
                             ?i1___wmul 0070                      DATAEE_ReadBuffer@i 0054  
                        _PIN_Initialize 1542                   __size_of_Led_InitPara 009E  
                   ?_PWM1_LoadDutyValue 004E                        Led_Initialize@ct 0059  
                      i1___bmul@product 0072                               ?_Led_Ramp 0070  
                      ?_TMR0_StartTimer 0070                 __end_of_TMR4_StartTimer 0D72  
             __end_of_SYSTEM_Initialize 1538                   ??_EUSART_Transmit_ISR 0070  
              __size_of_Audio_PlaySound 0012                              __pbssBANK0 0020  
                            __pbssBANK1 00C8                              __pbssBANK2 0120  
                            __pbssBANK3 01A0                __size_of_Audio_SetVolume 0017  
                  __end_of_EUSART_Write 0D05                        ?_PWM5_Initialize 0070  
               __size_of_Led_TurnOnRamp 0013            _PWM2_LoadDutyValue$intlevel0 14BF  
                 DATAEE_ReadBuffer@addr 0050                    Led_DynamicStorm@duty 0040  
                 __size_of_Led_RunMusic 0045                     IR_GetKeyType@keynum 0072  
               __size_of_ADC_Conversion 0021                     IR_GetKeyType@result 0071  
                        _Audio_GetValue 0888                    ??_PWM1_LoadDutyValue 0050  
                   __size_of_Led_Notice 0027                              __pmaintext 0840  
         i1PWM3_LoadDutyValue@dutyValue 0070          __end_of_ADC_Initialize_Default 15F1  
                               ?___bmul 004E        __end_of_TMR0_SetInterruptHandler 0F98  
              ??i1_TMR2_EnableInterrupt 0070                                 ?___wmul 004E  
                      ?_TMR1_StartTimer 0070                              ??_TMR0_ISR 0070  
                       __CFG_PPS1WAY$ON 0000                              ??_TMR2_ISR 007E  
                            ??_TMR4_ISR 0071         TMR2_SetInterruptHandler@handler 004E  
          _PWM5_LoadDutyValue$intlevel0 07DB                              __pintentry 0004  
                          _Led_InitPara 066A                                 _CCP1CON 0293  
                               _CCP2CON 0297                                 _CCP3CON 0313  
                               _CCP4CON 0317                   ?i1_PWM2_LoadDutyValue 0070  
              __size_of_Audio_StopSound 0012               __size_of_Led_DynamicCloud 0070  
                            ??i1___bmul 0071                  __end_of_PIN_Initialize 158F  
                __size_ofi1_IR_GetIndex 0083                              ??i1___wmul 0074  
               __size_of_TMR1_StopTimer 0002               __size_of_Led_DynamicStorm 0061  
                      ?_DATAEE_ReadByte 004E           __size_ofi1_PWM4_LoadDutyValue 0006  
       __end_of_TMR1_Initialize_Default 15D4         __end_of_TMR4_Initialize_Default 15E9  
                     ?_IR_ScanLongPress 0070                      _PWM5_LoadDutyValue 07D8  
                          ??_IR_ExitSet 005C                                 _OSCCON1 0919  
                               _OSCCON3 091B                                 _NVMADRH 0892  
                               _NVMADRL 0891                                 _OSCTUNE 091E  
                               _NVMDATL 0893                                 _NVMCON2 0896  
                               _PWM5CON 0619                            _Led_RunMusic 0419  
                               _PPSLOCK 0E0F                      ??_IR_ScanLongPress 007B  
                            ??_Led_Ramp 0074                        ?_TMR2_StartTimer 0070  
                         ?_IR_KeyAction 0070         __size_of_IR_ResetIfTMR1Overflow 003E  
                   ?_PWM5_LoadDutyValue 004E             __size_of_IR_UpdateSetStatus 000C  
              __size_of_Led_DynamicMoon 0052                __size_of_Led_DynamicWave 0052  
       ??_TMR1_Gate_SetInterruptHandler 0050            __end_ofi1_PWM3_LoadDutyValue 14E0  
                      Util_IncValue@max 0050                          _IR_IsValidTime 0DFE  
                        Led_SetCustom@i 007A                  __end_of_Audio_GetValue 08D8  
                  DATAEE_WriteByte@addr 004E                                 _Led_Run 0030  
                  DATAEE_WriteByte@byte 0050                    __size_of_IR_GetIndex 0083  
                        _Led_Initialize 08F9                        ?i1_Util_DecValue 0070  
                     ?_Led_UpdateBright 0070                 _TMR2_Initialize_Default 15D4  
            ??_TMR2_SetInterruptHandler 0050                      ??_Led_UpdateBright 0052  
               __size_of_TMR4_StopTimer 0003                         __size_of___bmul 000D  
                    __end_of_IR_ExitSet 0DFE                         __size_of___wmul 0015  
                  ??_PWM5_LoadDutyValue 0050                       _DATAEE_ReadBuffer 0708  
                      ?i1_Util_IncValue 0070         TMR0_SetInterruptHandler@handler 004E  
                               __ptext1 0FBE                                 __ptext2 0EB0  
                               __ptext3 151F                                 __ptext4 15DE  
                               __ptext5 15D4                                 __ptext6 15C5  
                               __ptext7 15BA                                 __ptext8 15B4  
                               __ptext9 15A9                         ?_PIN_Initialize 0070  
                    ?_DATAEE_ReadBuffer 0050                            __size_of_ISR 002A  
                             _T1CONbits 001B                   _OSCILLATOR_Initialize 1538  
                             _T2CONbits 001F                 __size_ofi1_EUSART_Write 0014  
                             _T4CONbits 0417       __size_of_TMR4_SetInterruptHandler 0008  
                   i1___bmul@multiplier 0071               ?_TMR4_SetInterruptHandler 004E  
                 _tmr1_gate_isr_handler 00E6                     ??_DATAEE_ReadBuffer 0054  
                          ?_Led_AutoRun 0070                          ??_IR_KeyAction 01C0  
            __size_of_SYSTEM_Initialize 0019                                 clrloop0 1465  
                      ?_TMR4_StartTimer 0070                  __end_of_IR_IsValidTime 0E4C  
                  end_of_initialization 083D                             _gLedRunPara 00C8  
                __end_of_Led_Initialize 09FF                           i1_IR_GetIndex 012F  
                               init_ram 146A                 Audio_SetVolume@checksum 0050  
                       ?_Audio_GetValue 0070                                 initloop 146B  
                      i1IR_GetIndex@idx 0070                       IR_IsValidTime@len 0051  
                     IR_IsValidTime@min 0052                 Audio_StopSound@checksum 004F  
                     ??_Audio_PlaySound 0071             __size_ofi1_Led_UpdateBright 0011  
                        _IR_ExitTimeout 0FC0                    __size_of_RTC_GetTime 0001  
             Audio_SetPlayMode@checksum 0050                        _Led_FirstPowerUp 072D  
                     ??_Audio_SetVolume 004F               __end_of_DATAEE_ReadBuffer 071F  
          __end_of_TMR2_EnableInterrupt 0E94                  _IR_ResetIfTMR1Overflow 0E53  
                ??i1_PWM2_LoadDutyValue 0072         __size_ofi1_TMR2_EnableInterrupt 0003  
           __size_of_PWM4_LoadDutyValue 000C                            __pstringtext 1800  
               i1_TMR2_DisableInterrupt 17E8                               _IR_Decode 1610  
                 i1___wmul@multiplicand 0072                               Led_Ramp@i 007A  
           __size_of_DATAEE_WriteBuffer 0017                _TMR0_SetInterruptHandler 0F90  
                   i1Util_DecValue@pSrc 0070                            ??_Led_Notice 0070  
                DATAEE_WriteBuffer@addr 0052                              _rtc_status 0031  
           __end_of_Led_CheckAutoStatus 032C                       ??_Audio_StopSound 004F  
                 __size_of_EUSART_Write 0017                   __end_of_RTC_HourReady 0FB5  
         __size_of_Interrupt_Initialize 001B                        __CFG_FEXTOSC$OFF 0000  
                       ?_IR_IsValidTime 0051                __end_of_DATAEE_WriteByte 1000  
                         ?_RTC_OnSecond 0070                          _Led_TurnOnRamp 0A3D  
                        ?i1_IR_GetIndex 0070                           IR_Decode@nBit 002F  
                         IR_Decode@hVal 007A                  __end_of_IR_ExitTimeout 0FC8  
                       ?_Led_Initialize 0070                       Led_DynamicCloud@i 004C  
                        _ADC_Conversion 08D8                           IR_Decode@type 0078  
             ??_TMR2_Initialize_Default 004E                   __end_of_Util_DecValue 0D38  
                   _Led_Initialize$1206 0056                          __end_of_VOLUME 180A  
            __end_of_PWM3_LoadDutyValue 14DA                      Util_IncValue@delta 0052  
                    __end_of_Led_Notice 079B                __size_of_RTC_MinuteReady 0004  
                     ??_Led_DynamicMoon 0078                       ??_Led_DynamicWave 0078  
              __size_of_PWM1_Initialize 0006                __size_of_RTC_SecondReady 0005  
                      Led_SetCustom@idx 0077        __size_of_TMR1_Initialize_Default 000F  
      __size_of_TMR4_Initialize_Default 000B                       Led_DynamicStorm@i 004C  
                            ?_IR_Decode 0070                          __end_of___bmul 0D12  
                 __end_of_Util_IncValue 0D5E           __size_ofi1_PWM1_LoadDutyValue 0006  
                        __end_of___wmul 0CEE                        _Led_DynamicCloud 0552  
                          _EUSART_Write 0CEE                       __size_of_TMR0_ISR 000C  
                     __size_of_TMR2_ISR 000C                      _PWM2_LoadDutyValue 14BC  
                     __size_of_TMR4_ISR 000C                       Audio_GetValue@cnt 0024  
                     ?_Led_TurnOnDirect 0070                       Audio_GetValue@max 0028  
                     Audio_GetValue@min 0026                          _TMR1_StopTimer 0E94  
                ?_OSCILLATOR_Initialize 0070                    i1_PWM3_LoadDutyValue 14DA  
                      _Led_DynamicStorm 04F1                  __size_of_IR_GetKeyType 0107  
                    ??_Led_TurnOnDirect 0070                       i1_Led_StartNotice 01B2  
                     __size_ofi1___bmul 000C                             __end_ofPL10 05FD  
                           __end_ofPL20 0EDD                             __end_ofPL12 0297  
                           __end_ofPL30 0F04                             __end_ofPL22 0604  
                           __end_ofPL14 0ECC                             __end_ofPL40 0F1B  
                           __end_ofPL32 0F11                             __end_ofPL24 0EE2  
                           __end_ofPL16 0768                             __end_ofPL50 0F32  
                           __end_ofPL42 0628                             __end_ofPL34 0F16  
                           __end_ofPL26 0EEC                             __end_ofPL18 029E  
                           __end_ofPL60 17F1                             __end_ofPL52 0F3C  
                           __end_ofPL44 0F27                             __end_ofPL36 0610  
                           __end_ofPL28 0EFB                             __end_ofPL70 0654  
                           __end_ofPL62 02A6                             __end_ofPL54 033E  
                           __end_ofPL46 03B5                             __end_ofPL38 061C  
                           __end_ofPL80 076E                             __end_ofPL72 065C  
                           __end_ofPL64 063C                             __end_ofPL56 03BF  
                           __end_ofPL48 0634                             __end_ofPL90 160A  
                           __end_ofPL82 0774                             __end_ofPL74 0664  
                           __end_ofPL66 0644                             __end_ofPL58 0F43  
                           __end_ofPL92 0F56                             __end_ofPL84 0F49  
                           __end_ofPL76 03C7                             __end_ofPL68 064C  
                           __end_ofPL94 0F5C                             __end_ofPL86 0F50  
                           __end_ofPL78 02AE                             __end_ofPL96 1610  
                           __end_ofPL88 066A                             __end_ofPL98 0F61  
                   start_initialization 0805                       __size_ofi1___wmul 0015  
                           __end_of_ISR 002E                      i1Util_IncValue@max 0072  
              __size_of_PWM2_Initialize 0009                     ?_PWM2_LoadDutyValue 004E  
                    ?i1_Led_StartNotice 0070                  __size_of_TMR1_GATE_ISR 000C  
                __end_of_Led_TurnOnRamp 0A50                  i1_TMR2_EnableInterrupt 17E5  
              __size_of_Led_StartNotice 000D                ?_TMR0_Initialize_Default 0070  
                        ??_RTC_OnSecond 0070                  __end_of_ADC_Conversion 08F9  
                     __size_of_Led_Ramp 0035                     ??i1_Led_StartNotice 0070  
                       ?_IR_ExitTimeout 0070                     DATAEE_ReadByte@addr 004E  
         __size_of_IR_KeyAtionIfPressed 0004                        __CFG_LPBOREN$OFF 0000  
                       IR_KeyAction@idx 01D1                    ??_PWM2_LoadDutyValue 0050  
                    IR_Decode@revKeyNum 0077               ??i1_TMR2_DisableInterrupt 0070  
              __size_of_PWM3_Initialize 000B                   _Led_SaveParaIfChanged 0EA2  
                        _TMR4_StopTimer 07AD                                ??___bmul 004F  
           PWM2_LoadDutyValue@dutyValue 004E              __size_of_DATAEE_ReadBuffer 0017  
                              ??___wmul 0052                             _CCPTMRSbits 029F  
                  __end_of_IR_KeyAction 0CC7                  __end_of_TMR1_StopTimer 0E96  
                           __pdataBANK1 00A0                             __pdataBANK3 01D2  
                __size_of_Led_SetCustom 0030                   Led_DynamicStorm@F8342 01D2  
                 ?i1_PWM3_LoadDutyValue 0070                   _TMR2_DisableInterrupt 0D6C  
             __end_ofi1_Led_StartNotice 01BE                          i1_EUSART_Write 048B  
           __end_of_EUSART_Transmit_ISR 151F             PWM5_LoadDutyValue@dutyValue 004E  
         __size_ofi1_PWM5_LoadDutyValue 000F                __size_of_Led_TurnOffRamp 0010  
                             ___latbits 0002                           __pcstackBANK0 0040  
                         __pcstackBANK3 01C0                __size_of_PWM4_Initialize 000B  
                Audio_SelectSound@index 0071                     i1IR_GetIndex@keynum 0071  
                       ?_Led_TurnOnRamp 0070                         ??i1_IR_GetIndex 0070  
                     ADC_Conversion@chn 0051                    IR_IsValidTime@result 0053  
                  _TMR2_EnableInterrupt 0E91                    __size_of_Led_AutoRun 006B  
                       ?_ADC_Conversion 004E                           Led_InitPara@i 005B  
                         Led_InitPara@j 005A                         Led_Initialize@i 005B  
                         IR_KeyAction@i 01CA           i1PWM1_LoadDutyValue@dutyValue 0070  
                              ?_Led_Run 0070            __end_ofi1_PWM4_LoadDutyValue 14F2  
                         _IR_GetKeyType 16DE                               __pnvBANK0 005E  
                             __pnvBANK1 00E2            _PWM3_LoadDutyValue$intlevel0 14D1  
              __size_of_TMR0_StartTimer 0002               __size_of_IR_ScanLongPress 00DE  
                __end_of_TMR4_StopTimer 07B0             __size_of_PWM1_LoadDutyValue 000C  
              __size_of_PWM5_Initialize 0006               Audio_SelectSound@checksum 0072  
                         _TMR1_GATE_ISR 1486                        ??_PIN_Initialize 004E  
      __end_of_TMR4_SetInterruptHandler 0FB0      __size_of_EUSART_Initialize_Default 0014  
                             __ptext100 1486                               __ptext101 1610  
                             __ptext102 17E5                               __ptext103 17E8  
                             __ptext104 16DE                               __ptext105 147A  
                             __ptext106 14F2                               __ptext107 1508  
         i1PWM4_LoadDutyValue@dutyValue 0070                             ??_IR_Decode 0073  
            ?_EUSART_Initialize_Default 0070                         ?_TMR1_StopTimer 0070  
                __end_ofi1_EUSART_Write 049F                       ??_RTC_MinuteReady 004E  
                     ??_PWM1_Initialize 004E                       ??_RTC_SecondReady 004E  
                   DATAEE_WriteBuffer@i 0056                                _BAUD1CON 019F  
              __size_of_TMR1_StartTimer 0003               __size_of_Led_UpdateBright 0019  
       __end_of_TMR0_Initialize_Default 15C5                __end_of_Led_FirstPowerUp 075E  
                       _Audio_PlaySound 045E                        ??_Audio_GetValue 0054  
            __end_of_IR_UpdateSetStatus 0EA2                   ?_TMR2_EnableInterrupt 0070  
              __size_of_DATAEE_ReadByte 000E                         _Audio_SetVolume 0A16  
                         ??_IR_GetIndex 004E                           _Led_SetCustom 01BE  
                         Led_Notice@cnt 0033                       ??_PWM2_Initialize 004E  
                        ?_IR_GetKeyType 0070                             _audio_value 002A  
                        ___wmul@product 0052                               clear_ram0 1464  
                              _PIE0bits 0090                       ??_Led_StartNotice 004E  
                              _PIE1bits 0091                                _PIE2bits 0092  
              __size_of_TMR2_StartTimer 0002                   i1___bmul@multiplicand 0070  
                ?_Led_SaveParaIfChanged 0070                         ?_TMR4_StopTimer 0070  
               ?_IR_ResetIfTMR1Overflow 0070                 _TMR1_Initialize_Default 15C5  
               _TMR4_Initialize_Default 15DE              ??_TMR0_SetInterruptHandler 0050  
                              _PIR0bits 0010                          ?_TMR1_GATE_ISR 0070  
                              _PIR1bits 0011                                _PIR2bits 0012  
                              _TMR0_ISR 147A                                _TMR2_ISR 1492  
                              _TMR4_ISR 149E                         _Audio_StopSound 0CC7  
                      EUSART_Write@byte 004E                   DATAEE_WriteBuffer@buf 0054  
                ??i1_PWM3_LoadDutyValue 0072                   DATAEE_WriteBuffer@len 0055  
                ?_TMR2_DisableInterrupt 0070                    __end_of_RTC_OnSecond 1508  
           __size_of_PWM5_LoadDutyValue 0015                __size_ofi1_Util_DecValue 0026  
     __end_of_EUSART_Initialize_Default 1605                         ?i1_EUSART_Write 0070  
                     ??_PWM3_Initialize 004E                                i1___bmul 01EE  
            __size_ofi1_Led_StartNotice 000C                              _ADCON0bits 009D  
                     ___wmul@multiplier 004E                                i1___wmul 05C2  
                     IR_ScanLongPress@i 007B                    Led_Initialize@result 0058  
                      ??_IR_IsValidTime 0052       __size_of_TMR2_SetInterruptHandler 0008  
             ?_TMR2_SetInterruptHandler 004E                       Util_IncValue@pSrc 004E  
              __size_ofi1_Util_IncValue 0026                   Led_CheckAutoStatus@ct 0059  
                      ??_Led_Initialize 0054                      IR_KeyAction@i_1430 01CF  
                    IR_KeyAction@i_1431 01D0                      IR_KeyAction@i_1434 01CD  
                    IR_KeyAction@i_1435 01CE                      IR_KeyAction@i_1428 01CB  
                    IR_KeyAction@i_1429 01CC                                _Led_Ramp 0249  
                        ?_Led_SetCustom 0073                         _Led_DynamicMoon 049F  
                       _Led_DynamicWave 03C7                       ?_DATAEE_WriteByte 004E  
                     ??_Led_TurnOffRamp 004E                       i1_TMR4_StartTimer 0246  
                         ??_RTC_GetTime 004E              __end_ofi1_Led_UpdateBright 05E8  
              __end_of_Led_DynamicCloud 05C2                       ??_PWM4_Initialize 004E  
              ??_ADC_Initialize_Default 004E                      ??_DATAEE_WriteByte 0051  
              __end_of_Led_DynamicStorm 0552                      ?i1_TMR4_StartTimer 0070  
        __end_of_IR_ResetIfTMR1Overflow 0E91                        __size_of_Led_Run 0021  
              __size_of_TMR4_StartTimer 0003                   __size_of_IR_KeyAction 025E  
                   __end_of_IR_GetIndex 0DF5            __end_of_Interrupt_Initialize 0F90  
            __end_of_PWM4_LoadDutyValue 14EC                                _gLedPara 0120  
                   ??i1_TMR4_StartTimer 0070              __end_of_DATAEE_WriteBuffer 0FDF  
               ??_OSCILLATOR_Initialize 004E                       ??_TMR0_StartTimer 004E  
                     _Audio_SetPlayMode 09FF           __size_ofi1_PWM2_LoadDutyValue 0006  
                          Led_AutoRun@i 005C                       _Audio_SelectSound 0470  
                     ??_PWM5_Initialize 004E                 __end_of_Audio_PlaySound 0470  
                    ?_Audio_SetPlayMode 0070                _TMR4_SetInterruptHandler 0FA8  
                    _PWM3_LoadDutyValue 14CE                    i1_PWM4_LoadDutyValue 14EC  
               __end_of_Audio_SetVolume 0A2D                      ?_Audio_SelectSound 0070  
               ?i1_TMR2_EnableInterrupt 0070                              _T0CON0bits 0017  
            Led_CheckAutoStatus@sunrise 0055                        _tmr0_isr_handler 00E8  
                ??_TMR2_EnableInterrupt 004E                     ??_Audio_SetPlayMode 004F  
                      ??_IR_ExitTimeout 005C                                __ptext10 159E  
                              __ptext11 1595                                __ptext20 0EA2  
                              __ptext12 158F                                __ptext21 0FC8  
                              __ptext13 1542                                __ptext30 0FA8  
                              __ptext22 0FDF                                __ptext14 1538  
                              __ptext31 0FA0                                __ptext23 066A  
                              __ptext15 15F1                                __ptext40 0A69  
                              __ptext32 0F98                                __ptext24 072D  
                              __ptext16 15E9                                __ptext41 0D38  
                              __ptext33 0F90                                __ptext25 0708  
                              __ptext17 0FB9                                __ptext50 0D6F  
                              __ptext42 0D12                                __ptext34 0E96  
                              __ptext26 071F                                __ptext18 0FB5  
                              __ptext51 08F9                                __ptext43 0E91  
                              __ptext35 0FC0                                __ptext27 02AE  
                              __ptext19 0FB0                                __ptext60 0A2D  
                              __ptext52 0D5E                                __ptext44 0D6C  
                              __ptext36 0E53                                __ptext28 033E  
                              __ptext61 0CC7                                __ptext53 0A50  
                              __ptext45 0DFE                                __ptext37 0E94  
                              __ptext29 0F75                                __ptext70 0774  
                              __ptext62 0A16                                __ptext54 14E0  
                              __ptext46 0D05                                __ptext38 0E50  
                              __ptext71 07AD                                __ptext63 09FF  
                              __ptext55 14CE                                __ptext47 0D72  
                              __ptext39 0E4C                                __ptext80 0552  
                              __ptext72 07A4                                __ptext64 0CEE  
                              __ptext56 14BC                                __ptext48 0DF5  
                              __ptext81 05C2                                __ptext73 079B  
                              __ptext65 0888                                __ptext57 14AA  
                              __ptext49 0D5F                                __ptext90 14B6  
                              __ptext82 05D7                                __ptext74 1492  
                              __ptext66 0CD9                                __ptext58 07D8  
                   ?_PWM3_LoadDutyValue 004E                                __ptext91 07ED  
                              __ptext83 0470                                __ptext75 0030  
                              __ptext67 08D8                                __ptext59 0A3D  
                              __ptext92 0051                                __ptext84 045E  
                              __ptext76 0419                                __ptext93 0220  
                              __ptext85 048B                                __ptext77 03C7  
                              __ptext69 149E                                __ptext94 01FA  
                              __ptext86 0249                                __ptext78 04F1  
                              __ptext95 01B2                                __ptext87 14EC  
                              __ptext79 049F                                __ptext96 0246  
                              __ptext88 14DA                                __ptext97 012F  
                              __ptext89 14C8                                __ptext98 01BE  
                              __ptext99 01EE               __end_ofi1_TMR4_StartTimer 0249  
          __end_ofi1_PWM1_LoadDutyValue 14BC                     ??_Audio_SelectSound 0071  
                     ??_TMR1_StartTimer 004E                            _IR_KeyAction 0A69  
          __size_of_Led_CheckAutoStatus 007E                         ??_IR_GetKeyType 0070  
           DATAEE_WriteByte@GIEBitValue 0051               __size_of_Led_TurnOnDirect 0009  
                              _keyValue 0030                                _loadDuty 00BE  
                            _T1GPPSbits 0E13                           __size_of_main 0048  
             ??_TMR1_Initialize_Default 004E                                _ir_state 0036  
             ??_TMR4_Initialize_Default 004E                         ??_TMR1_GATE_ISR 007C  
                      _IR_ScanLongPress 0051                              _RA2PPSbits 0E92  
               __end_of_Audio_StopSound 0CD9                       ??_DATAEE_ReadByte 0050  
                            _RC1PPSbits 0EA1                     __end_of_RTC_GetTime 0D5F  
      __size_of_TMR0_Initialize_Default 000B                    ??_PWM3_LoadDutyValue 0050  
                            _RC3PPSbits 0EA3               __end_of_Audio_SetPlayMode 0A16  
                              _txRemain 005E                  __size_of_RTC_HourReady 0005  
                              _rtc_time 003D                                int$flags 007E  
                            _RC5PPSbits 0EA5                              _RB7PPSbits 0E9F  
                         ?_Led_InitPara 0070               __end_of_Audio_SelectSound 048B  
                     ??_TMR2_StartTimer 004E                              _RC7PPSbits 0EA7  
  TMR1_Gate_SetInterruptHandler@handler 004E                    i1Led_StartNotice@cnt 0071  
                  Led_CheckAutoStatus@i 005D          __end_ofi1_TMR2_EnableInterrupt 17E8  
                 ?i1_PWM4_LoadDutyValue 0070               Led_CheckAutoStatus@i_1236 005B  
             Led_CheckAutoStatus@i_1237 005C                       Led_UpdateBright@i 0052  
                      ??_Led_TurnOnRamp 004E                        _Led_UpdateBright 0A50  
               __end_of_Led_DynamicMoon 04F1            __end_of_IR_KeyAtionIfPressed 0E50  
               __end_of_Led_DynamicWave 0419                              _INTCONbits 000B  
                __size_of_Util_DecValue 0026                             _NVMCON1bits 0895  
                     ??i1_Util_DecValue 0076                        ??_ADC_Conversion 0050  
                       ??_Led_SetCustom 0074                           ?_Led_RunMusic 0070  
              ?_TMR2_Initialize_Default 0070                      IR_IsValidTime@hour 0054  
                              intlevel1 0000                             _IR_GetIndex 0D72  
                __size_of_Util_IncValue 0026               Led_CheckAutoStatus@sunset 0057  
                     ??i1_Util_IncValue 0076         __size_of_ADC_Initialize_Default 0008  
                     __CFG_CLKOUTEN$OFF 0000            __end_ofi1_PWM5_LoadDutyValue 07FC  
                           _PPSLOCKbits 0E0F                         _RTC_MinuteReady 0FB5  
                    i1EUSART_Write@byte 0070                         _PWM1_Initialize 158F  
                       _RTC_SecondReady 0FB9                        ??_TMR1_StopTimer 004E  
                 __size_of_RTC_OnSecond 0016             __size_of_PWM2_LoadDutyValue 000C  
                        ??_Led_InitPara 0055   __end_of_TMR1_Gate_SetInterruptHandler 0FA0  
__size_of_TMR1_Gate_SetInterruptHandler 0008           _TMR1_Gate_SetInterruptHandler 0F98  
           PWM3_LoadDutyValue@dutyValue 004E             ??_EUSART_Initialize_Default 004E  
                     ??_TMR4_StartTimer 004E                        ?_Audio_PlaySound 0070  
                      ?_Audio_SetVolume 0070                         _PWM2_Initialize 1595  
                        ??_Led_RunMusic 007C                              Led_Run@cnt 0032  
                            _IR_ExitSet 0DF5                       ?_Led_FirstPowerUp 0070  
                         ??_Led_AutoRun 0058                        _tmr2_isr_handler 00E4  
                       _Led_StartNotice 0D5F                    _Interrupt_Initialize 0F75  
                         _RTC_HourReady 0FB0              __size_ofi1_TMR4_StartTimer 0003  
                    ??_Led_FirstPowerUp 004E            _PWM1_LoadDutyValue$intlevel0 14AD  
                  i1Util_DecValue@delta 0074            __size_of_EUSART_Transmit_ISR 0017  
                 __end_ofi1_IR_GetIndex 01B2                        ??_TMR4_StopTimer 0070  
                          _RTC_OnSecond 14F2                             _RTC_GetTime 0D5E  
               ??_Led_SaveParaIfChanged 0057                      Audio_SetVolume@vol 004F  
                           _PWMTMRSbits 061F              __end_of_PWM1_LoadDutyValue 14B6  
              ?i1_TMR2_DisableInterrupt 0070           i1PWM2_LoadDutyValue@dutyValue 0070  
                         _Util_DecValue 0D12                        ?_Audio_StopSound 0070  
                       _PWM3_Initialize 159E                      _IR_UpdateSetStatus 0E96  
          _PWM4_LoadDutyValue$intlevel0 14E3                 ??_TMR2_DisableInterrupt 004E  
